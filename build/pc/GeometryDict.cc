//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:44:43 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIGeometryDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "GeometryDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HGeomVector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomVector(void *p = 0);
   static void *newArray_HGeomVector(Long_t size, void *p);
   static void delete_HGeomVector(void *p);
   static void deleteArray_HGeomVector(void *p);
   static void destruct_HGeomVector(void *p);
   static void streamer_HGeomVector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomVector*)
   {
      ::HGeomVector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomVector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomVector", ::HGeomVector::Class_Version(), "./geometry/hgeomvector.h", 10,
                  typeid(::HGeomVector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomVector::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomVector) );
      instance.SetNew(&new_HGeomVector);
      instance.SetNewArray(&newArray_HGeomVector);
      instance.SetDelete(&delete_HGeomVector);
      instance.SetDeleteArray(&deleteArray_HGeomVector);
      instance.SetDestructor(&destruct_HGeomVector);
      instance.SetStreamerFunc(&streamer_HGeomVector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomVector*)
   {
      return GenerateInitInstanceLocal((::HGeomVector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomVector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomRotation_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomRotation(void *p = 0);
   static void *newArray_HGeomRotation(Long_t size, void *p);
   static void delete_HGeomRotation(void *p);
   static void deleteArray_HGeomRotation(void *p);
   static void destruct_HGeomRotation(void *p);
   static void streamer_HGeomRotation(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomRotation*)
   {
      ::HGeomRotation *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomRotation >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomRotation", ::HGeomRotation::Class_Version(), "./geometry/hgeomrotation.h", 10,
                  typeid(::HGeomRotation), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomRotation::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomRotation) );
      instance.SetNew(&new_HGeomRotation);
      instance.SetNewArray(&newArray_HGeomRotation);
      instance.SetDelete(&delete_HGeomRotation);
      instance.SetDeleteArray(&deleteArray_HGeomRotation);
      instance.SetDestructor(&destruct_HGeomRotation);
      instance.SetStreamerFunc(&streamer_HGeomRotation);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomRotation*)
   {
      return GenerateInitInstanceLocal((::HGeomRotation*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomRotation*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomTransform_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomTransform(void *p = 0);
   static void *newArray_HGeomTransform(Long_t size, void *p);
   static void delete_HGeomTransform(void *p);
   static void deleteArray_HGeomTransform(void *p);
   static void destruct_HGeomTransform(void *p);
   static void streamer_HGeomTransform(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomTransform*)
   {
      ::HGeomTransform *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomTransform >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomTransform", ::HGeomTransform::Class_Version(), "./geometry/hgeomtransform.h", 7,
                  typeid(::HGeomTransform), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomTransform::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomTransform) );
      instance.SetNew(&new_HGeomTransform);
      instance.SetNewArray(&newArray_HGeomTransform);
      instance.SetDelete(&delete_HGeomTransform);
      instance.SetDeleteArray(&deleteArray_HGeomTransform);
      instance.SetDestructor(&destruct_HGeomTransform);
      instance.SetStreamerFunc(&streamer_HGeomTransform);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomTransform*)
   {
      return GenerateInitInstanceLocal((::HGeomTransform*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomTransform*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomVolume_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomVolume(void *p = 0);
   static void *newArray_HGeomVolume(Long_t size, void *p);
   static void delete_HGeomVolume(void *p);
   static void deleteArray_HGeomVolume(void *p);
   static void destruct_HGeomVolume(void *p);
   static void streamer_HGeomVolume(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomVolume*)
   {
      ::HGeomVolume *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomVolume >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomVolume", ::HGeomVolume::Class_Version(), "./geometry/hgeomvolume.h", 8,
                  typeid(::HGeomVolume), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomVolume::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomVolume) );
      instance.SetNew(&new_HGeomVolume);
      instance.SetNewArray(&newArray_HGeomVolume);
      instance.SetDelete(&delete_HGeomVolume);
      instance.SetDeleteArray(&deleteArray_HGeomVolume);
      instance.SetDestructor(&destruct_HGeomVolume);
      instance.SetStreamerFunc(&streamer_HGeomVolume);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomVolume*)
   {
      return GenerateInitInstanceLocal((::HGeomVolume*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomVolume*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomCompositeVolume_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomCompositeVolume(void *p = 0);
   static void *newArray_HGeomCompositeVolume(Long_t size, void *p);
   static void delete_HGeomCompositeVolume(void *p);
   static void deleteArray_HGeomCompositeVolume(void *p);
   static void destruct_HGeomCompositeVolume(void *p);
   static void streamer_HGeomCompositeVolume(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomCompositeVolume*)
   {
      ::HGeomCompositeVolume *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomCompositeVolume >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomCompositeVolume", ::HGeomCompositeVolume::Class_Version(), "./geometry/hgeomcompositevolume.h", 6,
                  typeid(::HGeomCompositeVolume), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomCompositeVolume::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomCompositeVolume) );
      instance.SetNew(&new_HGeomCompositeVolume);
      instance.SetNewArray(&newArray_HGeomCompositeVolume);
      instance.SetDelete(&delete_HGeomCompositeVolume);
      instance.SetDeleteArray(&deleteArray_HGeomCompositeVolume);
      instance.SetDestructor(&destruct_HGeomCompositeVolume);
      instance.SetStreamerFunc(&streamer_HGeomCompositeVolume);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomCompositeVolume*)
   {
      return GenerateInitInstanceLocal((::HGeomCompositeVolume*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomCompositeVolume*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomShapes_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomShapes(void *p = 0);
   static void *newArray_HGeomShapes(Long_t size, void *p);
   static void delete_HGeomShapes(void *p);
   static void deleteArray_HGeomShapes(void *p);
   static void destruct_HGeomShapes(void *p);
   static void streamer_HGeomShapes(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomShapes*)
   {
      ::HGeomShapes *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomShapes >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomShapes", ::HGeomShapes::Class_Version(), "./geometry/hgeomshapes.h", 16,
                  typeid(::HGeomShapes), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomShapes::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomShapes) );
      instance.SetNew(&new_HGeomShapes);
      instance.SetNewArray(&newArray_HGeomShapes);
      instance.SetDelete(&delete_HGeomShapes);
      instance.SetDeleteArray(&deleteArray_HGeomShapes);
      instance.SetDestructor(&destruct_HGeomShapes);
      instance.SetStreamerFunc(&streamer_HGeomShapes);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomShapes*)
   {
      return GenerateInitInstanceLocal((::HGeomShapes*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomShapes*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSpecGeomPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSpecGeomPar(void *p = 0);
   static void *newArray_HSpecGeomPar(Long_t size, void *p);
   static void delete_HSpecGeomPar(void *p);
   static void deleteArray_HSpecGeomPar(void *p);
   static void destruct_HSpecGeomPar(void *p);
   static void streamer_HSpecGeomPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSpecGeomPar*)
   {
      ::HSpecGeomPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSpecGeomPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSpecGeomPar", ::HSpecGeomPar::Class_Version(), "./geometry/hspecgeompar.h", 11,
                  typeid(::HSpecGeomPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSpecGeomPar::Dictionary, isa_proxy, 0,
                  sizeof(::HSpecGeomPar) );
      instance.SetNew(&new_HSpecGeomPar);
      instance.SetNewArray(&newArray_HSpecGeomPar);
      instance.SetDelete(&delete_HSpecGeomPar);
      instance.SetDeleteArray(&deleteArray_HSpecGeomPar);
      instance.SetDestructor(&destruct_HSpecGeomPar);
      instance.SetStreamerFunc(&streamer_HSpecGeomPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSpecGeomPar*)
   {
      return GenerateInitInstanceLocal((::HSpecGeomPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSpecGeomPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HModGeomPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HModGeomPar(void *p = 0);
   static void *newArray_HModGeomPar(Long_t size, void *p);
   static void delete_HModGeomPar(void *p);
   static void deleteArray_HModGeomPar(void *p);
   static void destruct_HModGeomPar(void *p);
   static void streamer_HModGeomPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HModGeomPar*)
   {
      ::HModGeomPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HModGeomPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HModGeomPar", ::HModGeomPar::Class_Version(), "./geometry/hdetgeompar.h", 12,
                  typeid(::HModGeomPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HModGeomPar::Dictionary, isa_proxy, 0,
                  sizeof(::HModGeomPar) );
      instance.SetNew(&new_HModGeomPar);
      instance.SetNewArray(&newArray_HModGeomPar);
      instance.SetDelete(&delete_HModGeomPar);
      instance.SetDeleteArray(&deleteArray_HModGeomPar);
      instance.SetDestructor(&destruct_HModGeomPar);
      instance.SetStreamerFunc(&streamer_HModGeomPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HModGeomPar*)
   {
      return GenerateInitInstanceLocal((::HModGeomPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HModGeomPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HDetGeomPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HDetGeomPar(void *p = 0);
   static void *newArray_HDetGeomPar(Long_t size, void *p);
   static void delete_HDetGeomPar(void *p);
   static void deleteArray_HDetGeomPar(void *p);
   static void destruct_HDetGeomPar(void *p);
   static void streamer_HDetGeomPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HDetGeomPar*)
   {
      ::HDetGeomPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HDetGeomPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HDetGeomPar", ::HDetGeomPar::Class_Version(), "./geometry/hdetgeompar.h", 30,
                  typeid(::HDetGeomPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HDetGeomPar::Dictionary, isa_proxy, 0,
                  sizeof(::HDetGeomPar) );
      instance.SetNew(&new_HDetGeomPar);
      instance.SetNewArray(&newArray_HDetGeomPar);
      instance.SetDelete(&delete_HDetGeomPar);
      instance.SetDeleteArray(&deleteArray_HDetGeomPar);
      instance.SetDestructor(&destruct_HDetGeomPar);
      instance.SetStreamerFunc(&streamer_HDetGeomPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HDetGeomPar*)
   {
      return GenerateInitInstanceLocal((::HDetGeomPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HDetGeomPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomBasicShape_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomBasicShape(void *p = 0);
   static void *newArray_HGeomBasicShape(Long_t size, void *p);
   static void delete_HGeomBasicShape(void *p);
   static void deleteArray_HGeomBasicShape(void *p);
   static void destruct_HGeomBasicShape(void *p);
   static void streamer_HGeomBasicShape(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomBasicShape*)
   {
      ::HGeomBasicShape *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomBasicShape >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomBasicShape", ::HGeomBasicShape::Class_Version(), "./geometry/hgeombasicshape.h", 13,
                  typeid(::HGeomBasicShape), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomBasicShape::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomBasicShape) );
      instance.SetNew(&new_HGeomBasicShape);
      instance.SetNewArray(&newArray_HGeomBasicShape);
      instance.SetDelete(&delete_HGeomBasicShape);
      instance.SetDeleteArray(&deleteArray_HGeomBasicShape);
      instance.SetDestructor(&destruct_HGeomBasicShape);
      instance.SetStreamerFunc(&streamer_HGeomBasicShape);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomBasicShape*)
   {
      return GenerateInitInstanceLocal((::HGeomBasicShape*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomBasicShape*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomBrik_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomBrik(void *p = 0);
   static void *newArray_HGeomBrik(Long_t size, void *p);
   static void delete_HGeomBrik(void *p);
   static void deleteArray_HGeomBrik(void *p);
   static void destruct_HGeomBrik(void *p);
   static void streamer_HGeomBrik(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomBrik*)
   {
      ::HGeomBrik *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomBrik >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomBrik", ::HGeomBrik::Class_Version(), "./geometry/hgeombrik.h", 8,
                  typeid(::HGeomBrik), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomBrik::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomBrik) );
      instance.SetNew(&new_HGeomBrik);
      instance.SetNewArray(&newArray_HGeomBrik);
      instance.SetDelete(&delete_HGeomBrik);
      instance.SetDeleteArray(&deleteArray_HGeomBrik);
      instance.SetDestructor(&destruct_HGeomBrik);
      instance.SetStreamerFunc(&streamer_HGeomBrik);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomBrik*)
   {
      return GenerateInitInstanceLocal((::HGeomBrik*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomBrik*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomTrap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomTrap(void *p = 0);
   static void *newArray_HGeomTrap(Long_t size, void *p);
   static void delete_HGeomTrap(void *p);
   static void deleteArray_HGeomTrap(void *p);
   static void destruct_HGeomTrap(void *p);
   static void streamer_HGeomTrap(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomTrap*)
   {
      ::HGeomTrap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomTrap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomTrap", ::HGeomTrap::Class_Version(), "./geometry/hgeomtrap.h", 8,
                  typeid(::HGeomTrap), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomTrap::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomTrap) );
      instance.SetNew(&new_HGeomTrap);
      instance.SetNewArray(&newArray_HGeomTrap);
      instance.SetDelete(&delete_HGeomTrap);
      instance.SetDeleteArray(&deleteArray_HGeomTrap);
      instance.SetDestructor(&destruct_HGeomTrap);
      instance.SetStreamerFunc(&streamer_HGeomTrap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomTrap*)
   {
      return GenerateInitInstanceLocal((::HGeomTrap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomTrap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomTrd1_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomTrd1(void *p = 0);
   static void *newArray_HGeomTrd1(Long_t size, void *p);
   static void delete_HGeomTrd1(void *p);
   static void deleteArray_HGeomTrd1(void *p);
   static void destruct_HGeomTrd1(void *p);
   static void streamer_HGeomTrd1(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomTrd1*)
   {
      ::HGeomTrd1 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomTrd1 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomTrd1", ::HGeomTrd1::Class_Version(), "./geometry/hgeomtrd1.h", 8,
                  typeid(::HGeomTrd1), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomTrd1::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomTrd1) );
      instance.SetNew(&new_HGeomTrd1);
      instance.SetNewArray(&newArray_HGeomTrd1);
      instance.SetDelete(&delete_HGeomTrd1);
      instance.SetDeleteArray(&deleteArray_HGeomTrd1);
      instance.SetDestructor(&destruct_HGeomTrd1);
      instance.SetStreamerFunc(&streamer_HGeomTrd1);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomTrd1*)
   {
      return GenerateInitInstanceLocal((::HGeomTrd1*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomTrd1*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomPgon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomPgon(void *p = 0);
   static void *newArray_HGeomPgon(Long_t size, void *p);
   static void delete_HGeomPgon(void *p);
   static void deleteArray_HGeomPgon(void *p);
   static void destruct_HGeomPgon(void *p);
   static void streamer_HGeomPgon(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomPgon*)
   {
      ::HGeomPgon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomPgon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomPgon", ::HGeomPgon::Class_Version(), "./geometry/hgeompgon.h", 8,
                  typeid(::HGeomPgon), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomPgon::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomPgon) );
      instance.SetNew(&new_HGeomPgon);
      instance.SetNewArray(&newArray_HGeomPgon);
      instance.SetDelete(&delete_HGeomPgon);
      instance.SetDeleteArray(&deleteArray_HGeomPgon);
      instance.SetDestructor(&destruct_HGeomPgon);
      instance.SetStreamerFunc(&streamer_HGeomPgon);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomPgon*)
   {
      return GenerateInitInstanceLocal((::HGeomPgon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomPgon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomPcon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomPcon(void *p = 0);
   static void *newArray_HGeomPcon(Long_t size, void *p);
   static void delete_HGeomPcon(void *p);
   static void deleteArray_HGeomPcon(void *p);
   static void destruct_HGeomPcon(void *p);
   static void streamer_HGeomPcon(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomPcon*)
   {
      ::HGeomPcon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomPcon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomPcon", ::HGeomPcon::Class_Version(), "./geometry/hgeompcon.h", 8,
                  typeid(::HGeomPcon), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomPcon::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomPcon) );
      instance.SetNew(&new_HGeomPcon);
      instance.SetNewArray(&newArray_HGeomPcon);
      instance.SetDelete(&delete_HGeomPcon);
      instance.SetDeleteArray(&deleteArray_HGeomPcon);
      instance.SetDestructor(&destruct_HGeomPcon);
      instance.SetStreamerFunc(&streamer_HGeomPcon);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomPcon*)
   {
      return GenerateInitInstanceLocal((::HGeomPcon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomPcon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomTube_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomTube(void *p = 0);
   static void *newArray_HGeomTube(Long_t size, void *p);
   static void delete_HGeomTube(void *p);
   static void deleteArray_HGeomTube(void *p);
   static void destruct_HGeomTube(void *p);
   static void streamer_HGeomTube(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomTube*)
   {
      ::HGeomTube *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomTube >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomTube", ::HGeomTube::Class_Version(), "./geometry/hgeomtube.h", 8,
                  typeid(::HGeomTube), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomTube::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomTube) );
      instance.SetNew(&new_HGeomTube);
      instance.SetNewArray(&newArray_HGeomTube);
      instance.SetDelete(&delete_HGeomTube);
      instance.SetDeleteArray(&deleteArray_HGeomTube);
      instance.SetDestructor(&destruct_HGeomTube);
      instance.SetStreamerFunc(&streamer_HGeomTube);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomTube*)
   {
      return GenerateInitInstanceLocal((::HGeomTube*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomTube*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomTubs_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomTubs(void *p = 0);
   static void *newArray_HGeomTubs(Long_t size, void *p);
   static void delete_HGeomTubs(void *p);
   static void deleteArray_HGeomTubs(void *p);
   static void destruct_HGeomTubs(void *p);
   static void streamer_HGeomTubs(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomTubs*)
   {
      ::HGeomTubs *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomTubs >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomTubs", ::HGeomTubs::Class_Version(), "./geometry/hgeomtubs.h", 8,
                  typeid(::HGeomTubs), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomTubs::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomTubs) );
      instance.SetNew(&new_HGeomTubs);
      instance.SetNewArray(&newArray_HGeomTubs);
      instance.SetDelete(&delete_HGeomTubs);
      instance.SetDeleteArray(&deleteArray_HGeomTubs);
      instance.SetDestructor(&destruct_HGeomTubs);
      instance.SetStreamerFunc(&streamer_HGeomTubs);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomTubs*)
   {
      return GenerateInitInstanceLocal((::HGeomTubs*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomTubs*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomCone_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomCone(void *p = 0);
   static void *newArray_HGeomCone(Long_t size, void *p);
   static void delete_HGeomCone(void *p);
   static void deleteArray_HGeomCone(void *p);
   static void destruct_HGeomCone(void *p);
   static void streamer_HGeomCone(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomCone*)
   {
      ::HGeomCone *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomCone >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomCone", ::HGeomCone::Class_Version(), "./geometry/hgeomcone.h", 8,
                  typeid(::HGeomCone), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomCone::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomCone) );
      instance.SetNew(&new_HGeomCone);
      instance.SetNewArray(&newArray_HGeomCone);
      instance.SetDelete(&delete_HGeomCone);
      instance.SetDeleteArray(&deleteArray_HGeomCone);
      instance.SetDestructor(&destruct_HGeomCone);
      instance.SetStreamerFunc(&streamer_HGeomCone);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomCone*)
   {
      return GenerateInitInstanceLocal((::HGeomCone*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomCone*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomCons_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomCons(void *p = 0);
   static void *newArray_HGeomCons(Long_t size, void *p);
   static void delete_HGeomCons(void *p);
   static void deleteArray_HGeomCons(void *p);
   static void destruct_HGeomCons(void *p);
   static void streamer_HGeomCons(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomCons*)
   {
      ::HGeomCons *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomCons >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomCons", ::HGeomCons::Class_Version(), "./geometry/hgeomcons.h", 8,
                  typeid(::HGeomCons), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomCons::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomCons) );
      instance.SetNew(&new_HGeomCons);
      instance.SetNewArray(&newArray_HGeomCons);
      instance.SetDelete(&delete_HGeomCons);
      instance.SetDeleteArray(&deleteArray_HGeomCons);
      instance.SetDestructor(&destruct_HGeomCons);
      instance.SetStreamerFunc(&streamer_HGeomCons);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomCons*)
   {
      return GenerateInitInstanceLocal((::HGeomCons*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomCons*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomSphe_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomSphe(void *p = 0);
   static void *newArray_HGeomSphe(Long_t size, void *p);
   static void delete_HGeomSphe(void *p);
   static void deleteArray_HGeomSphe(void *p);
   static void destruct_HGeomSphe(void *p);
   static void streamer_HGeomSphe(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomSphe*)
   {
      ::HGeomSphe *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomSphe >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomSphe", ::HGeomSphe::Class_Version(), "./geometry/hgeomsphe.h", 8,
                  typeid(::HGeomSphe), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomSphe::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomSphe) );
      instance.SetNew(&new_HGeomSphe);
      instance.SetNewArray(&newArray_HGeomSphe);
      instance.SetDelete(&delete_HGeomSphe);
      instance.SetDeleteArray(&deleteArray_HGeomSphe);
      instance.SetDestructor(&destruct_HGeomSphe);
      instance.SetStreamerFunc(&streamer_HGeomSphe);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomSphe*)
   {
      return GenerateInitInstanceLocal((::HGeomSphe*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomSphe*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomEltu_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomEltu(void *p = 0);
   static void *newArray_HGeomEltu(Long_t size, void *p);
   static void delete_HGeomEltu(void *p);
   static void deleteArray_HGeomEltu(void *p);
   static void destruct_HGeomEltu(void *p);
   static void streamer_HGeomEltu(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomEltu*)
   {
      ::HGeomEltu *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomEltu >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomEltu", ::HGeomEltu::Class_Version(), "./geometry/hgeomeltu.h", 8,
                  typeid(::HGeomEltu), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomEltu::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomEltu) );
      instance.SetNew(&new_HGeomEltu);
      instance.SetNewArray(&newArray_HGeomEltu);
      instance.SetDelete(&delete_HGeomEltu);
      instance.SetDeleteArray(&deleteArray_HGeomEltu);
      instance.SetDestructor(&destruct_HGeomEltu);
      instance.SetStreamerFunc(&streamer_HGeomEltu);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomEltu*)
   {
      return GenerateInitInstanceLocal((::HGeomEltu*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomEltu*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomMatrix(void *p = 0);
   static void *newArray_HGeomMatrix(Long_t size, void *p);
   static void delete_HGeomMatrix(void *p);
   static void deleteArray_HGeomMatrix(void *p);
   static void destruct_HGeomMatrix(void *p);
   static void streamer_HGeomMatrix(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomMatrix*)
   {
      ::HGeomMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomMatrix", ::HGeomMatrix::Class_Version(), "./geometry/hgeommatrix.h", 7,
                  typeid(::HGeomMatrix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomMatrix::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomMatrix) );
      instance.SetNew(&new_HGeomMatrix);
      instance.SetNewArray(&newArray_HGeomMatrix);
      instance.SetDelete(&delete_HGeomMatrix);
      instance.SetDeleteArray(&deleteArray_HGeomMatrix);
      instance.SetDestructor(&destruct_HGeomMatrix);
      instance.SetStreamerFunc(&streamer_HGeomMatrix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomMatrix*)
   {
      return GenerateInitInstanceLocal((::HGeomMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomVertexFit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomVertexFit(void *p = 0);
   static void *newArray_HGeomVertexFit(Long_t size, void *p);
   static void delete_HGeomVertexFit(void *p);
   static void deleteArray_HGeomVertexFit(void *p);
   static void destruct_HGeomVertexFit(void *p);
   static void streamer_HGeomVertexFit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomVertexFit*)
   {
      ::HGeomVertexFit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomVertexFit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomVertexFit", ::HGeomVertexFit::Class_Version(), "./geometry/hgeomvertexfit.h", 8,
                  typeid(::HGeomVertexFit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomVertexFit::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomVertexFit) );
      instance.SetNew(&new_HGeomVertexFit);
      instance.SetNewArray(&newArray_HGeomVertexFit);
      instance.SetDelete(&delete_HGeomVertexFit);
      instance.SetDeleteArray(&deleteArray_HGeomVertexFit);
      instance.SetDestructor(&destruct_HGeomVertexFit);
      instance.SetStreamerFunc(&streamer_HGeomVertexFit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomVertexFit*)
   {
      return GenerateInitInstanceLocal((::HGeomVertexFit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomVertexFit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomVertexFit2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomVertexFit2(void *p = 0);
   static void *newArray_HGeomVertexFit2(Long_t size, void *p);
   static void delete_HGeomVertexFit2(void *p);
   static void deleteArray_HGeomVertexFit2(void *p);
   static void destruct_HGeomVertexFit2(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomVertexFit2*)
   {
      ::HGeomVertexFit2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomVertexFit2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomVertexFit2", ::HGeomVertexFit2::Class_Version(), "./geometry/hgeomvertexfit2.h", 9,
                  typeid(::HGeomVertexFit2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomVertexFit2::Dictionary, isa_proxy, 4,
                  sizeof(::HGeomVertexFit2) );
      instance.SetNew(&new_HGeomVertexFit2);
      instance.SetNewArray(&newArray_HGeomVertexFit2);
      instance.SetDelete(&delete_HGeomVertexFit2);
      instance.SetDeleteArray(&deleteArray_HGeomVertexFit2);
      instance.SetDestructor(&destruct_HGeomVertexFit2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomVertexFit2*)
   {
      return GenerateInitInstanceLocal((::HGeomVertexFit2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomVertexFit2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomVertexFit3_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomVertexFit3(void *p = 0);
   static void *newArray_HGeomVertexFit3(Long_t size, void *p);
   static void delete_HGeomVertexFit3(void *p);
   static void deleteArray_HGeomVertexFit3(void *p);
   static void destruct_HGeomVertexFit3(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomVertexFit3*)
   {
      ::HGeomVertexFit3 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomVertexFit3 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomVertexFit3", ::HGeomVertexFit3::Class_Version(), "./geometry/hgeomvertexfit3.h", 9,
                  typeid(::HGeomVertexFit3), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomVertexFit3::Dictionary, isa_proxy, 4,
                  sizeof(::HGeomVertexFit3) );
      instance.SetNew(&new_HGeomVertexFit3);
      instance.SetNewArray(&newArray_HGeomVertexFit3);
      instance.SetDelete(&delete_HGeomVertexFit3);
      instance.SetDeleteArray(&deleteArray_HGeomVertexFit3);
      instance.SetDestructor(&destruct_HGeomVertexFit3);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomVertexFit3*)
   {
      return GenerateInitInstanceLocal((::HGeomVertexFit3*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomVertexFit3*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HGeomVector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomVector::Class_Name()
{
   return "HGeomVector";
}

//______________________________________________________________________________
const char *HGeomVector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomVector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomVector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomVector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomRotation::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomRotation::Class_Name()
{
   return "HGeomRotation";
}

//______________________________________________________________________________
const char *HGeomRotation::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRotation*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomRotation::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRotation*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomRotation::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRotation*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomRotation::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRotation*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomTransform::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomTransform::Class_Name()
{
   return "HGeomTransform";
}

//______________________________________________________________________________
const char *HGeomTransform::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTransform*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomTransform::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTransform*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomTransform::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTransform*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomTransform::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTransform*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomVolume::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomVolume::Class_Name()
{
   return "HGeomVolume";
}

//______________________________________________________________________________
const char *HGeomVolume::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVolume*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomVolume::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVolume*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomVolume::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVolume*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomVolume::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVolume*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomCompositeVolume::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomCompositeVolume::Class_Name()
{
   return "HGeomCompositeVolume";
}

//______________________________________________________________________________
const char *HGeomCompositeVolume::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCompositeVolume*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomCompositeVolume::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCompositeVolume*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomCompositeVolume::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCompositeVolume*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomCompositeVolume::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCompositeVolume*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomShapes::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomShapes::Class_Name()
{
   return "HGeomShapes";
}

//______________________________________________________________________________
const char *HGeomShapes::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomShapes*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomShapes::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomShapes*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomShapes::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomShapes*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomShapes::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomShapes*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSpecGeomPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSpecGeomPar::Class_Name()
{
   return "HSpecGeomPar";
}

//______________________________________________________________________________
const char *HSpecGeomPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSpecGeomPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSpecGeomPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSpecGeomPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSpecGeomPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSpecGeomPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSpecGeomPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSpecGeomPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HModGeomPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HModGeomPar::Class_Name()
{
   return "HModGeomPar";
}

//______________________________________________________________________________
const char *HModGeomPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HModGeomPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HModGeomPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HModGeomPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HModGeomPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HModGeomPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HModGeomPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HModGeomPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HDetGeomPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HDetGeomPar::Class_Name()
{
   return "HDetGeomPar";
}

//______________________________________________________________________________
const char *HDetGeomPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDetGeomPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HDetGeomPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDetGeomPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HDetGeomPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDetGeomPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HDetGeomPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDetGeomPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomBasicShape::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomBasicShape::Class_Name()
{
   return "HGeomBasicShape";
}

//______________________________________________________________________________
const char *HGeomBasicShape::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomBasicShape*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomBasicShape::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomBasicShape*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomBasicShape::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomBasicShape*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomBasicShape::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomBasicShape*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomBrik::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomBrik::Class_Name()
{
   return "HGeomBrik";
}

//______________________________________________________________________________
const char *HGeomBrik::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomBrik*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomBrik::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomBrik*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomBrik::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomBrik*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomBrik::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomBrik*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomTrap::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomTrap::Class_Name()
{
   return "HGeomTrap";
}

//______________________________________________________________________________
const char *HGeomTrap::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTrap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomTrap::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTrap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomTrap::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTrap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomTrap::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTrap*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomTrd1::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomTrd1::Class_Name()
{
   return "HGeomTrd1";
}

//______________________________________________________________________________
const char *HGeomTrd1::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTrd1*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomTrd1::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTrd1*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomTrd1::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTrd1*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomTrd1::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTrd1*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomPgon::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomPgon::Class_Name()
{
   return "HGeomPgon";
}

//______________________________________________________________________________
const char *HGeomPgon::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomPgon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomPgon::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomPgon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomPgon::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomPgon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomPgon::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomPgon*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomPcon::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomPcon::Class_Name()
{
   return "HGeomPcon";
}

//______________________________________________________________________________
const char *HGeomPcon::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomPcon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomPcon::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomPcon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomPcon::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomPcon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomPcon::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomPcon*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomTube::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomTube::Class_Name()
{
   return "HGeomTube";
}

//______________________________________________________________________________
const char *HGeomTube::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTube*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomTube::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTube*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomTube::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTube*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomTube::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTube*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomTubs::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomTubs::Class_Name()
{
   return "HGeomTubs";
}

//______________________________________________________________________________
const char *HGeomTubs::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTubs*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomTubs::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTubs*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomTubs::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTubs*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomTubs::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTubs*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomCone::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomCone::Class_Name()
{
   return "HGeomCone";
}

//______________________________________________________________________________
const char *HGeomCone::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCone*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomCone::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCone*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomCone::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCone*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomCone::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCone*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomCons::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomCons::Class_Name()
{
   return "HGeomCons";
}

//______________________________________________________________________________
const char *HGeomCons::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCons*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomCons::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCons*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomCons::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCons*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomCons::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCons*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomSphe::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomSphe::Class_Name()
{
   return "HGeomSphe";
}

//______________________________________________________________________________
const char *HGeomSphe::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomSphe*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomSphe::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomSphe*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomSphe::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomSphe*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomSphe::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomSphe*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomEltu::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomEltu::Class_Name()
{
   return "HGeomEltu";
}

//______________________________________________________________________________
const char *HGeomEltu::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomEltu*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomEltu::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomEltu*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomEltu::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomEltu*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomEltu::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomEltu*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomMatrix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomMatrix::Class_Name()
{
   return "HGeomMatrix";
}

//______________________________________________________________________________
const char *HGeomMatrix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomMatrix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomMatrix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomMatrix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMatrix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomVertexFit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomVertexFit::Class_Name()
{
   return "HGeomVertexFit";
}

//______________________________________________________________________________
const char *HGeomVertexFit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVertexFit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomVertexFit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVertexFit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomVertexFit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVertexFit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomVertexFit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVertexFit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomVertexFit2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomVertexFit2::Class_Name()
{
   return "HGeomVertexFit2";
}

//______________________________________________________________________________
const char *HGeomVertexFit2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVertexFit2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomVertexFit2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVertexFit2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomVertexFit2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVertexFit2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomVertexFit2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVertexFit2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomVertexFit3::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomVertexFit3::Class_Name()
{
   return "HGeomVertexFit3";
}

//______________________________________________________________________________
const char *HGeomVertexFit3::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVertexFit3*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomVertexFit3::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVertexFit3*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomVertexFit3::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVertexFit3*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomVertexFit3::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVertexFit3*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HSpecGeomPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSpecGeomPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> cave;
      R__b >> sectors;
      R__b >> targets;
      R__b.CheckByteCount(R__s, R__c, HSpecGeomPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HSpecGeomPar::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << cave;
      R__b << sectors;
      R__b << targets;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HSpecGeomPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSpecGeomPar.
      TClass *R__cl = ::HSpecGeomPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cave", &cave);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sectors", &sectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*targets", &targets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*shapes", &shapes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFirstInit", &isFirstInit);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSpecGeomPar(void *p) {
      return  p ? new(p) ::HSpecGeomPar : new ::HSpecGeomPar;
   }
   static void *newArray_HSpecGeomPar(Long_t nElements, void *p) {
      return p ? new(p) ::HSpecGeomPar[nElements] : new ::HSpecGeomPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSpecGeomPar(void *p) {
      delete ((::HSpecGeomPar*)p);
   }
   static void deleteArray_HSpecGeomPar(void *p) {
      delete [] ((::HSpecGeomPar*)p);
   }
   static void destruct_HSpecGeomPar(void *p) {
      typedef ::HSpecGeomPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSpecGeomPar(TBuffer &buf, void *obj) {
      ((::HSpecGeomPar*)obj)->::HSpecGeomPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSpecGeomPar

//______________________________________________________________________________
void HDetGeomPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HDetGeomPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> modules;
      R__b >> refVolumes;
      R__b >> maxSectors;
      R__b >> maxModules;
      R__b >> numComponents;
      R__b.CheckByteCount(R__s, R__c, HDetGeomPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HDetGeomPar::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << modules;
      R__b << refVolumes;
      R__b << maxSectors;
      R__b << maxModules;
      R__b << numComponents;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HDetGeomPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HDetGeomPar.
      TClass *R__cl = ::HDetGeomPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*modules", &modules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*refVolumes", &refVolumes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxSectors", &maxSectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxModules", &maxModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numComponents", &numComponents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*shapes", &shapes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFirstInit", &isFirstInit);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HDetGeomPar(void *p) {
      return  p ? new(p) ::HDetGeomPar : new ::HDetGeomPar;
   }
   static void *newArray_HDetGeomPar(Long_t nElements, void *p) {
      return p ? new(p) ::HDetGeomPar[nElements] : new ::HDetGeomPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HDetGeomPar(void *p) {
      delete ((::HDetGeomPar*)p);
   }
   static void deleteArray_HDetGeomPar(void *p) {
      delete [] ((::HDetGeomPar*)p);
   }
   static void destruct_HDetGeomPar(void *p) {
      typedef ::HDetGeomPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HDetGeomPar(TBuffer &buf, void *obj) {
      ((::HDetGeomPar*)obj)->::HDetGeomPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HDetGeomPar

//______________________________________________________________________________
void HModGeomPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HModGeomPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      refName.Streamer(R__b);
      transform.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HModGeomPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HModGeomPar::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      refName.Streamer(R__b);
      transform.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HModGeomPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HModGeomPar.
      TClass *R__cl = ::HModGeomPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "refName", &refName);
      R__insp.InspectMember(refName, "refName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*refVolume", &refVolume);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transform", &transform);
      R__insp.InspectMember(transform, "transform.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HModGeomPar(void *p) {
      return  p ? new(p) ::HModGeomPar : new ::HModGeomPar;
   }
   static void *newArray_HModGeomPar(Long_t nElements, void *p) {
      return p ? new(p) ::HModGeomPar[nElements] : new ::HModGeomPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HModGeomPar(void *p) {
      delete ((::HModGeomPar*)p);
   }
   static void deleteArray_HModGeomPar(void *p) {
      delete [] ((::HModGeomPar*)p);
   }
   static void destruct_HModGeomPar(void *p) {
      typedef ::HModGeomPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HModGeomPar(TBuffer &buf, void *obj) {
      ((::HModGeomPar*)obj)->::HModGeomPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HModGeomPar

//______________________________________________________________________________
void HGeomVolume::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomVolume.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      shape.Streamer(R__b);
      mother.Streamer(R__b);
      R__b >> points;
      transform.Streamer(R__b);
      R__b >> nPoints;
      R__b.CheckByteCount(R__s, R__c, HGeomVolume::IsA());
   } else {
      R__c = R__b.WriteVersion(HGeomVolume::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      shape.Streamer(R__b);
      mother.Streamer(R__b);
      R__b << points;
      transform.Streamer(R__b);
      R__b << nPoints;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HGeomVolume::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomVolume.
      TClass *R__cl = ::HGeomVolume::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shape", &shape);
      R__insp.InspectMember(shape, "shape.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mother", &mother);
      R__insp.InspectMember(mother, "mother.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*points", &points);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transform", &transform);
      R__insp.InspectMember(transform, "transform.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPoints", &nPoints);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomVolume(void *p) {
      return  p ? new(p) ::HGeomVolume : new ::HGeomVolume;
   }
   static void *newArray_HGeomVolume(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomVolume[nElements] : new ::HGeomVolume[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomVolume(void *p) {
      delete ((::HGeomVolume*)p);
   }
   static void deleteArray_HGeomVolume(void *p) {
      delete [] ((::HGeomVolume*)p);
   }
   static void destruct_HGeomVolume(void *p) {
      typedef ::HGeomVolume current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomVolume(TBuffer &buf, void *obj) {
      ((::HGeomVolume*)obj)->::HGeomVolume::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomVolume

//______________________________________________________________________________
void HGeomCompositeVolume::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomCompositeVolume.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HGeomVolume::Streamer(R__b);
      R__b >> components;
      R__b.CheckByteCount(R__s, R__c, HGeomCompositeVolume::IsA());
   } else {
      R__c = R__b.WriteVersion(HGeomCompositeVolume::IsA(), kTRUE);
      HGeomVolume::Streamer(R__b);
      R__b << components;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HGeomCompositeVolume::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomCompositeVolume.
      TClass *R__cl = ::HGeomCompositeVolume::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*components", &components);
      HGeomVolume::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomCompositeVolume(void *p) {
      return  p ? new(p) ::HGeomCompositeVolume : new ::HGeomCompositeVolume;
   }
   static void *newArray_HGeomCompositeVolume(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomCompositeVolume[nElements] : new ::HGeomCompositeVolume[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomCompositeVolume(void *p) {
      delete ((::HGeomCompositeVolume*)p);
   }
   static void deleteArray_HGeomCompositeVolume(void *p) {
      delete [] ((::HGeomCompositeVolume*)p);
   }
   static void destruct_HGeomCompositeVolume(void *p) {
      typedef ::HGeomCompositeVolume current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomCompositeVolume(TBuffer &buf, void *obj) {
      ((::HGeomCompositeVolume*)obj)->::HGeomCompositeVolume::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomCompositeVolume

//______________________________________________________________________________
void HGeomTransform::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomTransform.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      rot.Streamer(R__b);
      trans.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HGeomTransform::IsA());
   } else {
      R__c = R__b.WriteVersion(HGeomTransform::IsA(), kTRUE);
      TObject::Streamer(R__b);
      rot.Streamer(R__b);
      trans.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HGeomTransform::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomTransform.
      TClass *R__cl = ::HGeomTransform::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rot", &rot);
      R__insp.InspectMember(rot, "rot.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trans", &trans);
      R__insp.InspectMember(trans, "trans.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomTransform(void *p) {
      return  p ? new(p) ::HGeomTransform : new ::HGeomTransform;
   }
   static void *newArray_HGeomTransform(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomTransform[nElements] : new ::HGeomTransform[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomTransform(void *p) {
      delete ((::HGeomTransform*)p);
   }
   static void deleteArray_HGeomTransform(void *p) {
      delete [] ((::HGeomTransform*)p);
   }
   static void destruct_HGeomTransform(void *p) {
      typedef ::HGeomTransform current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomTransform(TBuffer &buf, void *obj) {
      ((::HGeomTransform*)obj)->::HGeomTransform::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomTransform

//______________________________________________________________________________
void HGeomRotation::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomRotation.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.ReadStaticArray((double*)rot);
      R__b.CheckByteCount(R__s, R__c, HGeomRotation::IsA());
   } else {
      R__c = R__b.WriteVersion(HGeomRotation::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.WriteArray(rot, 9);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HGeomRotation::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomRotation.
      TClass *R__cl = ::HGeomRotation::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rot[9]", rot);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomRotation(void *p) {
      return  p ? new(p) ::HGeomRotation : new ::HGeomRotation;
   }
   static void *newArray_HGeomRotation(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomRotation[nElements] : new ::HGeomRotation[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomRotation(void *p) {
      delete ((::HGeomRotation*)p);
   }
   static void deleteArray_HGeomRotation(void *p) {
      delete [] ((::HGeomRotation*)p);
   }
   static void destruct_HGeomRotation(void *p) {
      typedef ::HGeomRotation current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomRotation(TBuffer &buf, void *obj) {
      ((::HGeomRotation*)obj)->::HGeomRotation::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomRotation

//______________________________________________________________________________
void HGeomVector::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomVector.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> x;
      R__b >> y;
      R__b >> z;
      R__b.CheckByteCount(R__s, R__c, HGeomVector::IsA());
   } else {
      R__c = R__b.WriteVersion(HGeomVector::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << x;
      R__b << y;
      R__b << z;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HGeomVector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomVector.
      TClass *R__cl = ::HGeomVector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomVector(void *p) {
      return  p ? new(p) ::HGeomVector : new ::HGeomVector;
   }
   static void *newArray_HGeomVector(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomVector[nElements] : new ::HGeomVector[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomVector(void *p) {
      delete ((::HGeomVector*)p);
   }
   static void deleteArray_HGeomVector(void *p) {
      delete [] ((::HGeomVector*)p);
   }
   static void destruct_HGeomVector(void *p) {
      typedef ::HGeomVector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomVector(TBuffer &buf, void *obj) {
      ((::HGeomVector*)obj)->::HGeomVector::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomVector

//______________________________________________________________________________
void HGeomShapes::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomShapes.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomShapes::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomShapes.
      TClass *R__cl = ::HGeomShapes::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*shapes", &shapes);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomShapes(void *p) {
      return  p ? new(p) ::HGeomShapes : new ::HGeomShapes;
   }
   static void *newArray_HGeomShapes(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomShapes[nElements] : new ::HGeomShapes[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomShapes(void *p) {
      delete ((::HGeomShapes*)p);
   }
   static void deleteArray_HGeomShapes(void *p) {
      delete [] ((::HGeomShapes*)p);
   }
   static void destruct_HGeomShapes(void *p) {
      typedef ::HGeomShapes current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomShapes(TBuffer &buf, void *obj) {
      ((::HGeomShapes*)obj)->::HGeomShapes::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomShapes

//______________________________________________________________________________
void HGeomBasicShape::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomBasicShape.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomBasicShape::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomBasicShape.
      TClass *R__cl = ::HGeomBasicShape::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPoints", &nPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nParam", &nParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*param", &param);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*center", &center);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*position", &position);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomBasicShape(void *p) {
      return  p ? new(p) ::HGeomBasicShape : new ::HGeomBasicShape;
   }
   static void *newArray_HGeomBasicShape(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomBasicShape[nElements] : new ::HGeomBasicShape[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomBasicShape(void *p) {
      delete ((::HGeomBasicShape*)p);
   }
   static void deleteArray_HGeomBasicShape(void *p) {
      delete [] ((::HGeomBasicShape*)p);
   }
   static void destruct_HGeomBasicShape(void *p) {
      typedef ::HGeomBasicShape current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomBasicShape(TBuffer &buf, void *obj) {
      ((::HGeomBasicShape*)obj)->::HGeomBasicShape::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomBasicShape

//______________________________________________________________________________
void HGeomBrik::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomBrik.

   HGeomBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomBrik::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomBrik.
      TClass *R__cl = ::HGeomBrik::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomBasicShape::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomBrik(void *p) {
      return  p ? new(p) ::HGeomBrik : new ::HGeomBrik;
   }
   static void *newArray_HGeomBrik(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomBrik[nElements] : new ::HGeomBrik[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomBrik(void *p) {
      delete ((::HGeomBrik*)p);
   }
   static void deleteArray_HGeomBrik(void *p) {
      delete [] ((::HGeomBrik*)p);
   }
   static void destruct_HGeomBrik(void *p) {
      typedef ::HGeomBrik current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomBrik(TBuffer &buf, void *obj) {
      ((::HGeomBrik*)obj)->::HGeomBrik::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomBrik

//______________________________________________________________________________
void HGeomTrap::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomTrap.

   HGeomBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomTrap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomTrap.
      TClass *R__cl = ::HGeomTrap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "intrinsicRot", &intrinsicRot);
      R__insp.InspectMember(intrinsicRot, "intrinsicRot.");
      HGeomBasicShape::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomTrap(void *p) {
      return  p ? new(p) ::HGeomTrap : new ::HGeomTrap;
   }
   static void *newArray_HGeomTrap(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomTrap[nElements] : new ::HGeomTrap[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomTrap(void *p) {
      delete ((::HGeomTrap*)p);
   }
   static void deleteArray_HGeomTrap(void *p) {
      delete [] ((::HGeomTrap*)p);
   }
   static void destruct_HGeomTrap(void *p) {
      typedef ::HGeomTrap current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomTrap(TBuffer &buf, void *obj) {
      ((::HGeomTrap*)obj)->::HGeomTrap::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomTrap

//______________________________________________________________________________
void HGeomTrd1::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomTrd1.

   HGeomBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomTrd1::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomTrd1.
      TClass *R__cl = ::HGeomTrd1::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "intrinsicRot", &intrinsicRot);
      R__insp.InspectMember(intrinsicRot, "intrinsicRot.");
      HGeomBasicShape::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomTrd1(void *p) {
      return  p ? new(p) ::HGeomTrd1 : new ::HGeomTrd1;
   }
   static void *newArray_HGeomTrd1(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomTrd1[nElements] : new ::HGeomTrd1[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomTrd1(void *p) {
      delete ((::HGeomTrd1*)p);
   }
   static void deleteArray_HGeomTrd1(void *p) {
      delete [] ((::HGeomTrd1*)p);
   }
   static void destruct_HGeomTrd1(void *p) {
      typedef ::HGeomTrd1 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomTrd1(TBuffer &buf, void *obj) {
      ((::HGeomTrd1*)obj)->::HGeomTrd1::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomTrd1

//______________________________________________________________________________
void HGeomPgon::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomPgon.

   HGeomBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomPgon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomPgon.
      TClass *R__cl = ::HGeomPgon::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomBasicShape::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomPgon(void *p) {
      return  p ? new(p) ::HGeomPgon : new ::HGeomPgon;
   }
   static void *newArray_HGeomPgon(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomPgon[nElements] : new ::HGeomPgon[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomPgon(void *p) {
      delete ((::HGeomPgon*)p);
   }
   static void deleteArray_HGeomPgon(void *p) {
      delete [] ((::HGeomPgon*)p);
   }
   static void destruct_HGeomPgon(void *p) {
      typedef ::HGeomPgon current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomPgon(TBuffer &buf, void *obj) {
      ((::HGeomPgon*)obj)->::HGeomPgon::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomPgon

//______________________________________________________________________________
void HGeomPcon::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomPcon.

   HGeomBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomPcon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomPcon.
      TClass *R__cl = ::HGeomPcon::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomBasicShape::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomPcon(void *p) {
      return  p ? new(p) ::HGeomPcon : new ::HGeomPcon;
   }
   static void *newArray_HGeomPcon(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomPcon[nElements] : new ::HGeomPcon[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomPcon(void *p) {
      delete ((::HGeomPcon*)p);
   }
   static void deleteArray_HGeomPcon(void *p) {
      delete [] ((::HGeomPcon*)p);
   }
   static void destruct_HGeomPcon(void *p) {
      typedef ::HGeomPcon current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomPcon(TBuffer &buf, void *obj) {
      ((::HGeomPcon*)obj)->::HGeomPcon::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomPcon

//______________________________________________________________________________
void HGeomTube::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomTube.

   HGeomBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomTube::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomTube.
      TClass *R__cl = ::HGeomTube::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomBasicShape::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomTube(void *p) {
      return  p ? new(p) ::HGeomTube : new ::HGeomTube;
   }
   static void *newArray_HGeomTube(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomTube[nElements] : new ::HGeomTube[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomTube(void *p) {
      delete ((::HGeomTube*)p);
   }
   static void deleteArray_HGeomTube(void *p) {
      delete [] ((::HGeomTube*)p);
   }
   static void destruct_HGeomTube(void *p) {
      typedef ::HGeomTube current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomTube(TBuffer &buf, void *obj) {
      ((::HGeomTube*)obj)->::HGeomTube::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomTube

//______________________________________________________________________________
void HGeomTubs::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomTubs.

   HGeomBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomTubs::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomTubs.
      TClass *R__cl = ::HGeomTubs::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomBasicShape::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomTubs(void *p) {
      return  p ? new(p) ::HGeomTubs : new ::HGeomTubs;
   }
   static void *newArray_HGeomTubs(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomTubs[nElements] : new ::HGeomTubs[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomTubs(void *p) {
      delete ((::HGeomTubs*)p);
   }
   static void deleteArray_HGeomTubs(void *p) {
      delete [] ((::HGeomTubs*)p);
   }
   static void destruct_HGeomTubs(void *p) {
      typedef ::HGeomTubs current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomTubs(TBuffer &buf, void *obj) {
      ((::HGeomTubs*)obj)->::HGeomTubs::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomTubs

//______________________________________________________________________________
void HGeomCone::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomCone.

   HGeomBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomCone::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomCone.
      TClass *R__cl = ::HGeomCone::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomBasicShape::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomCone(void *p) {
      return  p ? new(p) ::HGeomCone : new ::HGeomCone;
   }
   static void *newArray_HGeomCone(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomCone[nElements] : new ::HGeomCone[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomCone(void *p) {
      delete ((::HGeomCone*)p);
   }
   static void deleteArray_HGeomCone(void *p) {
      delete [] ((::HGeomCone*)p);
   }
   static void destruct_HGeomCone(void *p) {
      typedef ::HGeomCone current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomCone(TBuffer &buf, void *obj) {
      ((::HGeomCone*)obj)->::HGeomCone::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomCone

//______________________________________________________________________________
void HGeomCons::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomCons.

   HGeomBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomCons::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomCons.
      TClass *R__cl = ::HGeomCons::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomBasicShape::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomCons(void *p) {
      return  p ? new(p) ::HGeomCons : new ::HGeomCons;
   }
   static void *newArray_HGeomCons(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomCons[nElements] : new ::HGeomCons[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomCons(void *p) {
      delete ((::HGeomCons*)p);
   }
   static void deleteArray_HGeomCons(void *p) {
      delete [] ((::HGeomCons*)p);
   }
   static void destruct_HGeomCons(void *p) {
      typedef ::HGeomCons current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomCons(TBuffer &buf, void *obj) {
      ((::HGeomCons*)obj)->::HGeomCons::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomCons

//______________________________________________________________________________
void HGeomSphe::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomSphe.

   HGeomBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomSphe::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomSphe.
      TClass *R__cl = ::HGeomSphe::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomBasicShape::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomSphe(void *p) {
      return  p ? new(p) ::HGeomSphe : new ::HGeomSphe;
   }
   static void *newArray_HGeomSphe(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomSphe[nElements] : new ::HGeomSphe[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomSphe(void *p) {
      delete ((::HGeomSphe*)p);
   }
   static void deleteArray_HGeomSphe(void *p) {
      delete [] ((::HGeomSphe*)p);
   }
   static void destruct_HGeomSphe(void *p) {
      typedef ::HGeomSphe current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomSphe(TBuffer &buf, void *obj) {
      ((::HGeomSphe*)obj)->::HGeomSphe::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomSphe

//______________________________________________________________________________
void HGeomEltu::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomEltu.

   HGeomBasicShape::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomEltu::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomEltu.
      TClass *R__cl = ::HGeomEltu::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomBasicShape::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomEltu(void *p) {
      return  p ? new(p) ::HGeomEltu : new ::HGeomEltu;
   }
   static void *newArray_HGeomEltu(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomEltu[nElements] : new ::HGeomEltu[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomEltu(void *p) {
      delete ((::HGeomEltu*)p);
   }
   static void deleteArray_HGeomEltu(void *p) {
      delete [] ((::HGeomEltu*)p);
   }
   static void destruct_HGeomEltu(void *p) {
      typedef ::HGeomEltu current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomEltu(TBuffer &buf, void *obj) {
      ((::HGeomEltu*)obj)->::HGeomEltu::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomEltu

//______________________________________________________________________________
void HGeomVertexFit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomVertexFit.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomVertexFit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomVertexFit.
      TClass *R__cl = ::HGeomVertexFit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM", &fM);
      R__insp.InspectMember(fM, "fM.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSys", &fSys);
      R__insp.InspectMember(fSys, "fSys.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fB", &fB);
      R__insp.InspectMember(fB, "fB.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomVertexFit(void *p) {
      return  p ? new(p) ::HGeomVertexFit : new ::HGeomVertexFit;
   }
   static void *newArray_HGeomVertexFit(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomVertexFit[nElements] : new ::HGeomVertexFit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomVertexFit(void *p) {
      delete ((::HGeomVertexFit*)p);
   }
   static void deleteArray_HGeomVertexFit(void *p) {
      delete [] ((::HGeomVertexFit*)p);
   }
   static void destruct_HGeomVertexFit(void *p) {
      typedef ::HGeomVertexFit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomVertexFit(TBuffer &buf, void *obj) {
      ((::HGeomVertexFit*)obj)->::HGeomVertexFit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomVertexFit

//______________________________________________________________________________
void HGeomVertexFit2::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomVertexFit2.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(HGeomVertexFit2::Class(),this);
   } else {
      R__b.WriteClassBuffer(HGeomVertexFit2::Class(),this);
   }
}

//______________________________________________________________________________
void HGeomVertexFit2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomVertexFit2.
      TClass *R__cl = ::HGeomVertexFit2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM", &fM);
      R__insp.InspectMember(fM, "fM.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSys", &fSys);
      R__insp.InspectMember(fSys, "fSys.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fB", &fB);
      R__insp.InspectMember(fB, "fB.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomVertexFit2(void *p) {
      return  p ? new(p) ::HGeomVertexFit2 : new ::HGeomVertexFit2;
   }
   static void *newArray_HGeomVertexFit2(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomVertexFit2[nElements] : new ::HGeomVertexFit2[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomVertexFit2(void *p) {
      delete ((::HGeomVertexFit2*)p);
   }
   static void deleteArray_HGeomVertexFit2(void *p) {
      delete [] ((::HGeomVertexFit2*)p);
   }
   static void destruct_HGeomVertexFit2(void *p) {
      typedef ::HGeomVertexFit2 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::HGeomVertexFit2

//______________________________________________________________________________
void HGeomVertexFit3::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomVertexFit3.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(HGeomVertexFit3::Class(),this);
   } else {
      R__b.WriteClassBuffer(HGeomVertexFit3::Class(),this);
   }
}

//______________________________________________________________________________
void HGeomVertexFit3::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomVertexFit3.
      TClass *R__cl = ::HGeomVertexFit3::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM", &fM);
      R__insp.InspectMember(fM, "fM.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSys", &fSys);
      R__insp.InspectMember(fSys, "fSys.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fB", &fB);
      R__insp.InspectMember(fB, "fB.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomVertexFit3(void *p) {
      return  p ? new(p) ::HGeomVertexFit3 : new ::HGeomVertexFit3;
   }
   static void *newArray_HGeomVertexFit3(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomVertexFit3[nElements] : new ::HGeomVertexFit3[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomVertexFit3(void *p) {
      delete ((::HGeomVertexFit3*)p);
   }
   static void deleteArray_HGeomVertexFit3(void *p) {
      delete [] ((::HGeomVertexFit3*)p);
   }
   static void destruct_HGeomVertexFit3(void *p) {
      typedef ::HGeomVertexFit3 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::HGeomVertexFit3

//______________________________________________________________________________
void HGeomMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomMatrix.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomMatrix.
      TClass *R__cl = ::HGeomMatrix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM[9]", fM);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomMatrix(void *p) {
      return  p ? new(p) ::HGeomMatrix : new ::HGeomMatrix;
   }
   static void *newArray_HGeomMatrix(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomMatrix[nElements] : new ::HGeomMatrix[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomMatrix(void *p) {
      delete ((::HGeomMatrix*)p);
   }
   static void deleteArray_HGeomMatrix(void *p) {
      delete [] ((::HGeomMatrix*)p);
   }
   static void destruct_HGeomMatrix(void *p) {
      typedef ::HGeomMatrix current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomMatrix(TBuffer &buf, void *obj) {
      ((::HGeomMatrix*)obj)->::HGeomMatrix::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomMatrix

/********************************************************
* ../build/pc/GeometryDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableGeometryDict();

extern "C" void G__set_cpp_environmentGeometryDict() {
  G__cpp_reset_tagtableGeometryDict();
}
#include <new>
extern "C" int G__cpp_dllrevGeometryDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HGeomVector */
static int G__GeometryDict_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomVector(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) HGeomVector(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomVector((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) HGeomVector((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomVector((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomVector((Double_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomVector[n];
       } else {
         p = new((void*) gvp) HGeomVector[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomVector;
       } else {
         p = new((void*) gvp) HGeomVector;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((HGeomVector*) G__getstructoffset())->X();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((HGeomVector*) G__getstructoffset())->Y();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((HGeomVector*) G__getstructoffset())->Z();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HGeomVector*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HGeomVector*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HGeomVector*) G__getstructoffset())->getZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVector*) G__getstructoffset())->setXYZ((const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVector*) G__getstructoffset())->setX((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVector*) G__getstructoffset())->setY((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVector*) G__getstructoffset())->setZ((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVector*) G__getstructoffset())->setVector((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVector*) G__getstructoffset())->setVector((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HGeomVector*) G__getstructoffset())->operator()((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector* pobj;
         const HGeomVector xobj = ((const HGeomVector*) G__getstructoffset())->operator-();
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HGeomVector*) G__getstructoffset())->operator=(*(HGeomVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HGeomVector*) G__getstructoffset())->operator==(*(HGeomVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HGeomVector*) G__getstructoffset())->operator!=(*(HGeomVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomVector*) G__getstructoffset())->operator<((const Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomVector*) G__getstructoffset())->operator<=((const Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomVector*) G__getstructoffset())->operator>((const Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomVector*) G__getstructoffset())->operator>=((const Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HGeomVector*) G__getstructoffset())->operator+=((const Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HGeomVector*) G__getstructoffset())->operator-=((const Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HGeomVector*) G__getstructoffset())->operator*=((const Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HGeomVector*) G__getstructoffset())->operator/=((const Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HGeomVector*) G__getstructoffset())->operator+=(*(HGeomVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HGeomVector*) G__getstructoffset())->operator-=(*(HGeomVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector* pobj;
         const HGeomVector xobj = ((const HGeomVector*) G__getstructoffset())->operator+(*(HGeomVector*) libp->para[0].ref);
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector* pobj;
         const HGeomVector xobj = ((const HGeomVector*) G__getstructoffset())->operator-(*(HGeomVector*) libp->para[0].ref);
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HGeomVector*) G__getstructoffset())->abs();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HGeomVector*) G__getstructoffset())->scalarProduct(*(HGeomVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector* pobj;
         const HGeomVector xobj = ((const HGeomVector*) G__getstructoffset())->vectorProduct(*(HGeomVector*) libp->para[0].ref);
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HGeomVector*) G__getstructoffset())->length());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVector*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HGeomVector*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVector*) G__getstructoffset())->round((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomVector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomVector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomVector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomVector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_170_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomVector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_170_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomVector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomVector(*(HGeomVector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomVector G__THGeomVector;
static int G__GeometryDict_170_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomVector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomVector*) (soff+(sizeof(HGeomVector)*i)))->~G__THGeomVector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomVector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomVector*) (soff))->~G__THGeomVector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomRotation */
static int G__GeometryDict_187_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomRotation[n];
     } else {
       p = new((void*) gvp) HGeomRotation[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomRotation;
     } else {
       p = new((void*) gvp) HGeomRotation;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HGeomRotation((Double_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HGeomRotation((Double_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HGeomRotation(
(const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) HGeomRotation(
(const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomRotation*) G__getstructoffset())->setMatrix((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomRotation*) G__getstructoffset())->setMatrix((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomRotation*) G__getstructoffset())->setEulerAngles((const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomRotation*) G__getstructoffset())->setElement((const Double_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HGeomRotation*) G__getstructoffset())->operator()((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomRotation& obj = ((HGeomRotation*) G__getstructoffset())->operator=(*(HGeomRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomRotation*) G__getstructoffset())->operator==(*(HGeomRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomRotation*) G__getstructoffset())->operator!=(*(HGeomRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector* pobj;
         const HGeomVector xobj = ((const HGeomRotation*) G__getstructoffset())->operator*(*(HGeomVector*) libp->para[0].ref);
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomRotation* pobj;
         const HGeomRotation xobj = ((const HGeomRotation*) G__getstructoffset())->operator*(*(HGeomRotation*) libp->para[0].ref);
         pobj = new HGeomRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomRotation& obj = ((HGeomRotation*) G__getstructoffset())->operator*=(*(HGeomRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomRotation& obj = ((HGeomRotation*) G__getstructoffset())->transform(*(HGeomRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomRotation*) G__getstructoffset())->isUnitMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomRotation* pobj;
         const HGeomRotation xobj = ((const HGeomRotation*) G__getstructoffset())->inverse();
         pobj = new HGeomRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomRotation& obj = ((HGeomRotation*) G__getstructoffset())->invert();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HGeomRotation*) G__getstructoffset())->determinant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HGeomRotation*) G__getstructoffset())->diff2(*(HGeomRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HGeomRotation*) G__getstructoffset())->getElement((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomRotation*) G__getstructoffset())->setUnitMatrix();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomRotation*) G__getstructoffset())->setZero();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HGeomRotation*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HGeomRotation*) G__getstructoffset())->createTRotMatrix((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HGeomRotation*) G__getstructoffset())->createTRotMatrix((const Text_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HGeomRotation*) G__getstructoffset())->createTRotMatrix());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomRotation::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRotation::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomRotation::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomRotation::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomRotation*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRotation::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomRotation::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRotation::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_187_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomRotation::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_187_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomRotation* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomRotation(*(HGeomRotation*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomRotation G__THGeomRotation;
static int G__GeometryDict_187_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomRotation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomRotation*) (soff+(sizeof(HGeomRotation)*i)))->~G__THGeomRotation();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomRotation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomRotation*) (soff))->~G__THGeomRotation();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomTransform */
static int G__GeometryDict_188_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTransform* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTransform[n];
     } else {
       p = new((void*) gvp) HGeomTransform[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTransform;
     } else {
       p = new((void*) gvp) HGeomTransform;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTransform* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HGeomTransform(*(HGeomTransform*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HGeomTransform(*(HGeomTransform*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomTransform& obj = ((HGeomTransform*) G__getstructoffset())->operator=(*(HGeomTransform*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomRotation& obj = ((const HGeomTransform*) G__getstructoffset())->getRotMatrix();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((const HGeomTransform*) G__getstructoffset())->getTransVector();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTransform*) G__getstructoffset())->setRotMatrix(*(HGeomRotation*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTransform*) G__getstructoffset())->setRotMatrix((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTransform*) G__getstructoffset())->setRotMatrix((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTransform*) G__getstructoffset())->setTransVector(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTransform*) G__getstructoffset())->setTransVector((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTransform*) G__getstructoffset())->setTransVector((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector* pobj;
         const HGeomVector xobj = ((const HGeomTransform*) G__getstructoffset())->transFrom(*(HGeomVector*) libp->para[0].ref);
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector* pobj;
         const HGeomVector xobj = ((const HGeomTransform*) G__getstructoffset())->transTo(*(HGeomVector*) libp->para[0].ref);
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTransform*) G__getstructoffset())->transFrom(*(HGeomTransform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTransform*) G__getstructoffset())->transTo(*(HGeomTransform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTransform*) G__getstructoffset())->invert();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTransform*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HGeomTransform*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTransform*) G__getstructoffset())->setTransform(*(HGeomTransform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomTransform::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTransform::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomTransform::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomTransform::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTransform*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTransform::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTransform::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTransform::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_188_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTransform::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomTransform G__THGeomTransform;
static int G__GeometryDict_188_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomTransform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomTransform*) (soff+(sizeof(HGeomTransform)*i)))->~G__THGeomTransform();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomTransform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomTransform*) (soff))->~G__THGeomTransform();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomVolume */
static int G__GeometryDict_196_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomVolume* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomVolume[n];
     } else {
       p = new((void*) gvp) HGeomVolume[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomVolume;
     } else {
       p = new((void*) gvp) HGeomVolume;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomVolume* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HGeomVolume(*(HGeomVolume*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HGeomVolume(*(HGeomVolume*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const HGeomVolume*) G__getstructoffset())->getName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const HGeomVolume*) G__getstructoffset())->getShape();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const HGeomVolume*) G__getstructoffset())->getMother();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomTransform& obj = ((HGeomVolume*) G__getstructoffset())->getTransform();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomVolume*) G__getstructoffset())->getNumPoints());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomVolume*) G__getstructoffset())->getPoint((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVolume*) G__getstructoffset())->setName((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVolume*) G__getstructoffset())->setVolumePar(*(HGeomVolume*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVolume*) G__getstructoffset())->setShape((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVolume*) G__getstructoffset())->setMother((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVolume*) G__getstructoffset())->createPoints((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVolume*) G__getstructoffset())->setPoint((const Int_t) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVolume*) G__getstructoffset())->setPoint((const Int_t) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVolume*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVolume*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomVolume::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVolume::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomVolume::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomVolume::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVolume*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVolume::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomVolume::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVolume::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_196_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomVolume::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomVolume G__THGeomVolume;
static int G__GeometryDict_196_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomVolume*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomVolume*) (soff+(sizeof(HGeomVolume)*i)))->~G__THGeomVolume();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomVolume*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomVolume*) (soff))->~G__THGeomVolume();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_196_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomVolume* dest = (HGeomVolume*) G__getstructoffset();
   *dest = *(HGeomVolume*) libp->para[0].ref;
   const HGeomVolume& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomCompositeVolume */
static int G__GeometryDict_197_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomCompositeVolume* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomCompositeVolume((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomCompositeVolume((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomCompositeVolume[n];
       } else {
         p = new((void*) gvp) HGeomCompositeVolume[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomCompositeVolume;
       } else {
         p = new((void*) gvp) HGeomCompositeVolume;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomCompositeVolume));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_197_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomCompositeVolume*) G__getstructoffset())->getNumComponents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_197_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomCompositeVolume*) G__getstructoffset())->getComponent((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_197_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomCompositeVolume*) G__getstructoffset())->createComponents((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_197_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomCompositeVolume*) G__getstructoffset())->setComponent((HGeomVolume*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_197_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomCompositeVolume::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_197_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCompositeVolume::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_197_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomCompositeVolume::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_197_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomCompositeVolume::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_197_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomCompositeVolume*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_197_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCompositeVolume::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_197_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomCompositeVolume::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_197_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCompositeVolume::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_197_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomCompositeVolume::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_197_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomCompositeVolume* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomCompositeVolume(*(HGeomCompositeVolume*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomCompositeVolume));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomCompositeVolume G__THGeomCompositeVolume;
static int G__GeometryDict_197_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomCompositeVolume*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomCompositeVolume*) (soff+(sizeof(HGeomCompositeVolume)*i)))->~G__THGeomCompositeVolume();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomCompositeVolume*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomCompositeVolume*) (soff))->~G__THGeomCompositeVolume();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_197_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomCompositeVolume* dest = (HGeomCompositeVolume*) G__getstructoffset();
   *dest = *(HGeomCompositeVolume*) libp->para[0].ref;
   const HGeomCompositeVolume& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomShapes */
static int G__GeometryDict_202_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomShapes* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomShapes[n];
     } else {
       p = new((void*) gvp) HGeomShapes[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomShapes;
     } else {
       p = new((void*) gvp) HGeomShapes;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomShapes));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_202_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomShapes*) G__getstructoffset())->selectShape((HGeomVolume*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_202_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomShapes*) G__getstructoffset())->selectShape(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_202_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomShapes*) G__getstructoffset())->readPoints((fstream*) G__int(libp->para[0]), (HGeomVolume*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_202_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomShapes*) G__getstructoffset())->writePoints((fstream*) G__int(libp->para[0]), (HGeomVolume*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_202_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomShapes*) G__getstructoffset())->printPoints((HGeomVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_202_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomShapes::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_202_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomShapes::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_202_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomShapes::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_202_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomShapes::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_202_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomShapes*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_202_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomShapes::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_202_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomShapes::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_202_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomShapes::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_202_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomShapes::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_202_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomShapes* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomShapes(*(HGeomShapes*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomShapes));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomShapes G__THGeomShapes;
static int G__GeometryDict_202_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomShapes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomShapes*) (soff+(sizeof(HGeomShapes)*i)))->~G__THGeomShapes();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomShapes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomShapes*) (soff))->~G__THGeomShapes();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_202_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomShapes* dest = (HGeomShapes*) G__getstructoffset();
   *dest = *(HGeomShapes*) libp->para[0].ref;
   const HGeomShapes& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSpecGeomPar */
static int G__GeometryDict_203_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSpecGeomPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSpecGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HSpecGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSpecGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HSpecGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSpecGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HSpecGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSpecGeomPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HSpecGeomPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HSpecGeomPar[n];
       } else {
         p = new((void*) gvp) HSpecGeomPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HSpecGeomPar;
       } else {
         p = new((void*) gvp) HSpecGeomPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HSpecGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSpecGeomPar*) G__getstructoffset())->getNumSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSpecGeomPar*) G__getstructoffset())->getNumTargets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HSpecGeomPar*) G__getstructoffset())->getCave());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HSpecGeomPar*) G__getstructoffset())->getSector((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HSpecGeomPar*) G__getstructoffset())->getTarget((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSpecGeomPar*) G__getstructoffset())->isFirstInitialization());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSpecGeomPar*) G__getstructoffset())->setNotFirstInit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSpecGeomPar*) G__getstructoffset())->addCave((HGeomVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSpecGeomPar*) G__getstructoffset())->createTargets((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSpecGeomPar*) G__getstructoffset())->addTarget((HGeomVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSpecGeomPar*) G__getstructoffset())->addSector((HGeomVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSpecGeomPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSpecGeomPar*) G__getstructoffset())->getSectorIndex((const Text_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSpecGeomPar*) G__getstructoffset())->getTargetIndex((const Text_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HSpecGeomPar*) G__getstructoffset())->getShapes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSpecGeomPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSpecGeomPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSpecGeomPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSpecGeomPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSpecGeomPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSpecGeomPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSpecGeomPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSpecGeomPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_203_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSpecGeomPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_203_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSpecGeomPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSpecGeomPar(*(HSpecGeomPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HSpecGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSpecGeomPar G__THSpecGeomPar;
static int G__GeometryDict_203_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSpecGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSpecGeomPar*) (soff+(sizeof(HSpecGeomPar)*i)))->~G__THSpecGeomPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSpecGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSpecGeomPar*) (soff))->~G__THSpecGeomPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_203_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSpecGeomPar* dest = (HSpecGeomPar*) G__getstructoffset();
   *dest = *(HSpecGeomPar*) libp->para[0].ref;
   const HSpecGeomPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HModGeomPar */
static int G__GeometryDict_204_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HModGeomPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HModGeomPar[n];
     } else {
       p = new((void*) gvp) HModGeomPar[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HModGeomPar;
     } else {
       p = new((void*) gvp) HModGeomPar;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HModGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HModGeomPar*) G__getstructoffset())->getRefVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomTransform& obj = ((HModGeomPar*) G__getstructoffset())->getLabTransform();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const HModGeomPar*) G__getstructoffset())->getRefName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HModGeomPar*) G__getstructoffset())->setRefName((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HModGeomPar*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HModGeomPar*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HModGeomPar*) G__getstructoffset())->setVolume((HGeomCompositeVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HModGeomPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HModGeomPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HModGeomPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HModGeomPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HModGeomPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HModGeomPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HModGeomPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HModGeomPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_204_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HModGeomPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_204_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HModGeomPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HModGeomPar(*(HModGeomPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HModGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HModGeomPar G__THModGeomPar;
static int G__GeometryDict_204_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HModGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HModGeomPar*) (soff+(sizeof(HModGeomPar)*i)))->~G__THModGeomPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HModGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HModGeomPar*) (soff))->~G__THModGeomPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_204_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HModGeomPar* dest = (HModGeomPar*) G__getstructoffset();
   *dest = *(HModGeomPar*) libp->para[0].ref;
   const HModGeomPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HDetGeomPar */
static int G__GeometryDict_205_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDetGeomPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HDetGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HDetGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HDetGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HDetGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HDetGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HDetGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HDetGeomPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HDetGeomPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HDetGeomPar[n];
       } else {
         p = new((void*) gvp) HDetGeomPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HDetGeomPar;
       } else {
         p = new((void*) gvp) HDetGeomPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HDetGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDetGeomPar*) G__getstructoffset())->getNumModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDetGeomPar*) G__getstructoffset())->getNumRefModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDetGeomPar*) G__getstructoffset())->getNumComponents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDetGeomPar*) G__getstructoffset())->getMaxSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDetGeomPar*) G__getstructoffset())->getMaxModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDetGeomPar*) G__getstructoffset())->isFirstInitialization());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDetGeomPar*) G__getstructoffset())->setNotFirstInit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HDetGeomPar*) G__getstructoffset())->getModule((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HDetGeomPar*) G__getstructoffset())->getModule((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDetGeomPar*) G__getstructoffset())->getSector((TObjArray*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HDetGeomPar*) G__getstructoffset())->getRefVolume((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDetGeomPar*) G__getstructoffset())->addRefVolume((HGeomCompositeVolume*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDetGeomPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDetGeomPar*) G__getstructoffset())->getSecNum(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDetGeomPar*) G__getstructoffset())->getModNumInMod(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDetGeomPar*) G__getstructoffset())->getModNumInComp(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDetGeomPar*) G__getstructoffset())->getCompNum(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HDetGeomPar*) G__getstructoffset())->getShapes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HDetGeomPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDetGeomPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HDetGeomPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HDetGeomPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDetGeomPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDetGeomPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDetGeomPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDetGeomPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_205_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDetGeomPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_205_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HDetGeomPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HDetGeomPar(*(HDetGeomPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HDetGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HDetGeomPar G__THDetGeomPar;
static int G__GeometryDict_205_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HDetGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HDetGeomPar*) (soff+(sizeof(HDetGeomPar)*i)))->~G__THDetGeomPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HDetGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HDetGeomPar*) (soff))->~G__THDetGeomPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_205_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDetGeomPar* dest = (HDetGeomPar*) G__getstructoffset();
   *dest = *(HDetGeomPar*) libp->para[0].ref;
   const HDetGeomPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomBasicShape */
static int G__GeometryDict_209_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomBasicShape* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomBasicShape[n];
     } else {
       p = new((void*) gvp) HGeomBasicShape[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomBasicShape;
     } else {
       p = new((void*) gvp) HGeomBasicShape;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomBasicShape*) G__getstructoffset())->getNumPoints());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomBasicShape*) G__getstructoffset())->getNumParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomBasicShape*) G__getstructoffset())->getParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomBasicShape*) G__getstructoffset())->getCenterPosition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomBasicShape*) G__getstructoffset())->getVoluPosition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomBasicShape*) G__getstructoffset())->readPoints((fstream*) G__int(libp->para[0]), (HGeomVolume*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomBasicShape*) G__getstructoffset())->writePoints((fstream*) G__int(libp->para[0]), (HGeomVolume*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomBasicShape*) G__getstructoffset())->printPoints((HGeomVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomBasicShape*) G__getstructoffset())->calcVoluParam((HGeomVolume*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomBasicShape*) G__getstructoffset())->calcVoluPosition((HGeomVolume*) G__int(libp->para[0]), *(HGeomTransform*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomBasicShape*) G__getstructoffset())->calcVoluPosition((HGeomVolume*) G__int(libp->para[0]), *(HGeomTransform*) libp->para[1].ref
, *(HGeomTransform*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomBasicShape*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomBasicShape::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomBasicShape::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomBasicShape::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomBasicShape::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomBasicShape*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomBasicShape::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomBasicShape::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomBasicShape::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_209_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomBasicShape::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_209_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomBasicShape* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomBasicShape(*(HGeomBasicShape*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomBasicShape G__THGeomBasicShape;
static int G__GeometryDict_209_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomBasicShape*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomBasicShape*) (soff+(sizeof(HGeomBasicShape)*i)))->~G__THGeomBasicShape();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomBasicShape*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomBasicShape*) (soff))->~G__THGeomBasicShape();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_209_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomBasicShape* dest = (HGeomBasicShape*) G__getstructoffset();
   *dest = *(HGeomBasicShape*) libp->para[0].ref;
   const HGeomBasicShape& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomBrik */
static int G__GeometryDict_222_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomBrik* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomBrik[n];
     } else {
       p = new((void*) gvp) HGeomBrik[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomBrik;
     } else {
       p = new((void*) gvp) HGeomBrik;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomBrik));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_222_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomBrik::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_222_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomBrik::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_222_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomBrik::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_222_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomBrik::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_222_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomBrik*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_222_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomBrik::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_222_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomBrik::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_222_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomBrik::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_222_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomBrik::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_222_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomBrik* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomBrik(*(HGeomBrik*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomBrik));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomBrik G__THGeomBrik;
static int G__GeometryDict_222_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomBrik*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomBrik*) (soff+(sizeof(HGeomBrik)*i)))->~G__THGeomBrik();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomBrik*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomBrik*) (soff))->~G__THGeomBrik();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_222_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomBrik* dest = (HGeomBrik*) G__getstructoffset();
   *dest = *(HGeomBrik*) libp->para[0].ref;
   const HGeomBrik& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomTrap */
static int G__GeometryDict_223_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTrap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTrap[n];
     } else {
       p = new((void*) gvp) HGeomTrap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTrap;
     } else {
       p = new((void*) gvp) HGeomTrap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_223_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomTrap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_223_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTrap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_223_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomTrap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_223_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomTrap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_223_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTrap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_223_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTrap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_223_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTrap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_223_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTrap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_223_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTrap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_223_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomTrap* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomTrap(*(HGeomTrap*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrap));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomTrap G__THGeomTrap;
static int G__GeometryDict_223_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomTrap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomTrap*) (soff+(sizeof(HGeomTrap)*i)))->~G__THGeomTrap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomTrap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomTrap*) (soff))->~G__THGeomTrap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_223_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTrap* dest = (HGeomTrap*) G__getstructoffset();
   *dest = *(HGeomTrap*) libp->para[0].ref;
   const HGeomTrap& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomTrd1 */
static int G__GeometryDict_224_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTrd1* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTrd1[n];
     } else {
       p = new((void*) gvp) HGeomTrd1[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTrd1;
     } else {
       p = new((void*) gvp) HGeomTrd1;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrd1));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_224_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomTrd1::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_224_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTrd1::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_224_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomTrd1::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_224_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomTrd1::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_224_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTrd1*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_224_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTrd1::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_224_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTrd1::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_224_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTrd1::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_224_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTrd1::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_224_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomTrd1* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomTrd1(*(HGeomTrd1*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrd1));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomTrd1 G__THGeomTrd1;
static int G__GeometryDict_224_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomTrd1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomTrd1*) (soff+(sizeof(HGeomTrd1)*i)))->~G__THGeomTrd1();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomTrd1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomTrd1*) (soff))->~G__THGeomTrd1();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_224_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTrd1* dest = (HGeomTrd1*) G__getstructoffset();
   *dest = *(HGeomTrd1*) libp->para[0].ref;
   const HGeomTrd1& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomPgon */
static int G__GeometryDict_225_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomPgon* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomPgon[n];
     } else {
       p = new((void*) gvp) HGeomPgon[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomPgon;
     } else {
       p = new((void*) gvp) HGeomPgon;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomPgon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_225_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomPgon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_225_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomPgon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_225_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomPgon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_225_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomPgon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_225_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomPgon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_225_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomPgon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_225_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomPgon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_225_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomPgon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_225_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomPgon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_225_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomPgon* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomPgon(*(HGeomPgon*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomPgon));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomPgon G__THGeomPgon;
static int G__GeometryDict_225_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomPgon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomPgon*) (soff+(sizeof(HGeomPgon)*i)))->~G__THGeomPgon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomPgon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomPgon*) (soff))->~G__THGeomPgon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_225_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomPgon* dest = (HGeomPgon*) G__getstructoffset();
   *dest = *(HGeomPgon*) libp->para[0].ref;
   const HGeomPgon& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomPcon */
static int G__GeometryDict_226_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomPcon* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomPcon[n];
     } else {
       p = new((void*) gvp) HGeomPcon[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomPcon;
     } else {
       p = new((void*) gvp) HGeomPcon;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomPcon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_226_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomPcon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_226_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomPcon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_226_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomPcon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_226_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomPcon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_226_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomPcon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_226_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomPcon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_226_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomPcon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_226_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomPcon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_226_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomPcon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_226_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomPcon* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomPcon(*(HGeomPcon*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomPcon));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomPcon G__THGeomPcon;
static int G__GeometryDict_226_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomPcon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomPcon*) (soff+(sizeof(HGeomPcon)*i)))->~G__THGeomPcon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomPcon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomPcon*) (soff))->~G__THGeomPcon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_226_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomPcon* dest = (HGeomPcon*) G__getstructoffset();
   *dest = *(HGeomPcon*) libp->para[0].ref;
   const HGeomPcon& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomTube */
static int G__GeometryDict_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTube* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTube[n];
     } else {
       p = new((void*) gvp) HGeomTube[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTube;
     } else {
       p = new((void*) gvp) HGeomTube;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomTube));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_227_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomTube::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_227_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTube::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_227_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomTube::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_227_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomTube::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTube*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTube::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_227_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTube::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_227_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTube::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_227_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTube::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_227_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomTube* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomTube(*(HGeomTube*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomTube));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomTube G__THGeomTube;
static int G__GeometryDict_227_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomTube*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomTube*) (soff+(sizeof(HGeomTube)*i)))->~G__THGeomTube();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomTube*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomTube*) (soff))->~G__THGeomTube();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_227_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTube* dest = (HGeomTube*) G__getstructoffset();
   *dest = *(HGeomTube*) libp->para[0].ref;
   const HGeomTube& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomTubs */
static int G__GeometryDict_228_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTubs* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTubs[n];
     } else {
       p = new((void*) gvp) HGeomTubs[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTubs;
     } else {
       p = new((void*) gvp) HGeomTubs;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomTubs));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_228_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomTubs::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_228_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTubs::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_228_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomTubs::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_228_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomTubs::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_228_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTubs*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_228_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTubs::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_228_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTubs::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_228_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTubs::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_228_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTubs::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_228_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomTubs* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomTubs(*(HGeomTubs*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomTubs));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomTubs G__THGeomTubs;
static int G__GeometryDict_228_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomTubs*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomTubs*) (soff+(sizeof(HGeomTubs)*i)))->~G__THGeomTubs();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomTubs*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomTubs*) (soff))->~G__THGeomTubs();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_228_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTubs* dest = (HGeomTubs*) G__getstructoffset();
   *dest = *(HGeomTubs*) libp->para[0].ref;
   const HGeomTubs& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomCone */
static int G__GeometryDict_229_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomCone* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomCone[n];
     } else {
       p = new((void*) gvp) HGeomCone[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomCone;
     } else {
       p = new((void*) gvp) HGeomCone;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomCone));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_229_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomCone::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_229_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCone::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_229_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomCone::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_229_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomCone::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_229_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomCone*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_229_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCone::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_229_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomCone::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_229_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCone::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_229_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomCone::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_229_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomCone* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomCone(*(HGeomCone*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomCone));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomCone G__THGeomCone;
static int G__GeometryDict_229_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomCone*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomCone*) (soff+(sizeof(HGeomCone)*i)))->~G__THGeomCone();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomCone*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomCone*) (soff))->~G__THGeomCone();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_229_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomCone* dest = (HGeomCone*) G__getstructoffset();
   *dest = *(HGeomCone*) libp->para[0].ref;
   const HGeomCone& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomCons */
static int G__GeometryDict_230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomCons* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomCons[n];
     } else {
       p = new((void*) gvp) HGeomCons[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomCons;
     } else {
       p = new((void*) gvp) HGeomCons;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomCons));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_230_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomCons::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_230_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCons::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_230_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomCons::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_230_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomCons::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_230_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomCons*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_230_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCons::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_230_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomCons::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_230_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCons::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_230_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomCons::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_230_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomCons* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomCons(*(HGeomCons*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomCons));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomCons G__THGeomCons;
static int G__GeometryDict_230_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomCons*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomCons*) (soff+(sizeof(HGeomCons)*i)))->~G__THGeomCons();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomCons*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomCons*) (soff))->~G__THGeomCons();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_230_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomCons* dest = (HGeomCons*) G__getstructoffset();
   *dest = *(HGeomCons*) libp->para[0].ref;
   const HGeomCons& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomSphe */
static int G__GeometryDict_231_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomSphe* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomSphe[n];
     } else {
       p = new((void*) gvp) HGeomSphe[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomSphe;
     } else {
       p = new((void*) gvp) HGeomSphe;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomSphe));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_231_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomSphe::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_231_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomSphe::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_231_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomSphe::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_231_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomSphe::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_231_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomSphe*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_231_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomSphe::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_231_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomSphe::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_231_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomSphe::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_231_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomSphe::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_231_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomSphe* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomSphe(*(HGeomSphe*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomSphe));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomSphe G__THGeomSphe;
static int G__GeometryDict_231_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomSphe*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomSphe*) (soff+(sizeof(HGeomSphe)*i)))->~G__THGeomSphe();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomSphe*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomSphe*) (soff))->~G__THGeomSphe();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_231_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomSphe* dest = (HGeomSphe*) G__getstructoffset();
   *dest = *(HGeomSphe*) libp->para[0].ref;
   const HGeomSphe& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomEltu */
static int G__GeometryDict_232_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomEltu* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomEltu[n];
     } else {
       p = new((void*) gvp) HGeomEltu[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomEltu;
     } else {
       p = new((void*) gvp) HGeomEltu;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomEltu));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_232_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomEltu::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_232_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomEltu::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_232_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomEltu::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_232_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomEltu::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_232_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomEltu*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_232_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomEltu::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_232_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomEltu::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_232_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomEltu::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_232_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomEltu::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_232_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomEltu* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomEltu(*(HGeomEltu*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomEltu));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomEltu G__THGeomEltu;
static int G__GeometryDict_232_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomEltu*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomEltu*) (soff+(sizeof(HGeomEltu)*i)))->~G__THGeomEltu();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomEltu*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomEltu*) (soff))->~G__THGeomEltu();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_232_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomEltu* dest = (HGeomEltu*) G__getstructoffset();
   *dest = *(HGeomEltu*) libp->para[0].ref;
   const HGeomEltu& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomMatrix */
static int G__GeometryDict_233_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMatrix[n];
     } else {
       p = new((void*) gvp) HGeomMatrix[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMatrix;
     } else {
       p = new((void*) gvp) HGeomMatrix;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_233_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((HGeomMatrix*) G__getstructoffset())->operator()((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_233_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HGeomMatrix*) G__getstructoffset())->det());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_233_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HGeomMatrix*) G__getstructoffset())->operator*(*(HGeomVector*) libp->para[0].ref);
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_233_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomMatrix& obj = ((HGeomMatrix*) G__getstructoffset())->operator/=((Double_t) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_233_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_233_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_233_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_233_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_233_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_233_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_233_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_233_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_233_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_233_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomMatrix* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomMatrix(*(HGeomMatrix*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomMatrix G__THGeomMatrix;
static int G__GeometryDict_233_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomMatrix*) (soff+(sizeof(HGeomMatrix)*i)))->~G__THGeomMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomMatrix*) (soff))->~G__THGeomMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_233_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMatrix* dest = (HGeomMatrix*) G__getstructoffset();
   *dest = *(HGeomMatrix*) libp->para[0].ref;
   const HGeomMatrix& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomVertexFit */
static int G__GeometryDict_234_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomVertexFit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomVertexFit[n];
     } else {
       p = new((void*) gvp) HGeomVertexFit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomVertexFit;
     } else {
       p = new((void*) gvp) HGeomVertexFit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_234_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HGeomVertexFit*) G__getstructoffset())->addLine(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, (const Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HGeomVertexFit*) G__getstructoffset())->addLine(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_234_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVertexFit*) G__getstructoffset())->getVertex(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_234_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVertexFit*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_234_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomVertexFit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_234_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVertexFit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_234_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomVertexFit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_234_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomVertexFit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_234_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVertexFit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_234_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVertexFit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_234_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomVertexFit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_234_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVertexFit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_234_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomVertexFit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_234_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomVertexFit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomVertexFit(*(HGeomVertexFit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomVertexFit G__THGeomVertexFit;
static int G__GeometryDict_234_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomVertexFit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomVertexFit*) (soff+(sizeof(HGeomVertexFit)*i)))->~G__THGeomVertexFit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomVertexFit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomVertexFit*) (soff))->~G__THGeomVertexFit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_234_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomVertexFit* dest = (HGeomVertexFit*) G__getstructoffset();
   *dest = *(HGeomVertexFit*) libp->para[0].ref;
   const HGeomVertexFit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomVertexFit2 */
static int G__GeometryDict_242_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomVertexFit2* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomVertexFit2[n];
     } else {
       p = new((void*) gvp) HGeomVertexFit2[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomVertexFit2;
     } else {
       p = new((void*) gvp) HGeomVertexFit2;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_242_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((HGeomVertexFit2*) G__getstructoffset())->addLine(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HSymMat4*) libp->para[2].ref, (Float_t) G__double(libp->para[3])
, (const Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HGeomVertexFit2*) G__getstructoffset())->addLine(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HSymMat4*) libp->para[2].ref, (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_242_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVertexFit2*) G__getstructoffset())->getVertex(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_242_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVertexFit2*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_242_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomVertexFit2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_242_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVertexFit2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_242_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomVertexFit2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_242_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomVertexFit2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_242_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVertexFit2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_242_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVertexFit2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_242_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomVertexFit2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_242_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVertexFit2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_242_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomVertexFit2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_242_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomVertexFit2* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomVertexFit2(*(HGeomVertexFit2*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit2));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomVertexFit2 G__THGeomVertexFit2;
static int G__GeometryDict_242_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomVertexFit2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomVertexFit2*) (soff+(sizeof(HGeomVertexFit2)*i)))->~G__THGeomVertexFit2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomVertexFit2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomVertexFit2*) (soff))->~G__THGeomVertexFit2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_242_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomVertexFit2* dest = (HGeomVertexFit2*) G__getstructoffset();
   *dest = *(HGeomVertexFit2*) libp->para[0].ref;
   const HGeomVertexFit2& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomVertexFit3 */
static int G__GeometryDict_243_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomVertexFit3* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomVertexFit3[n];
     } else {
       p = new((void*) gvp) HGeomVertexFit3[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomVertexFit3;
     } else {
       p = new((void*) gvp) HGeomVertexFit3;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_243_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HGeomVertexFit3*) G__getstructoffset())->addLine(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, (const Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HGeomVertexFit3*) G__getstructoffset())->addLine(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_243_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVertexFit3*) G__getstructoffset())->getVertex(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_243_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVertexFit3*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_243_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomVertexFit3::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_243_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVertexFit3::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_243_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomVertexFit3::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_243_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomVertexFit3::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_243_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVertexFit3*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_243_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVertexFit3::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_243_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomVertexFit3::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_243_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVertexFit3::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeometryDict_243_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomVertexFit3::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeometryDict_243_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomVertexFit3* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomVertexFit3(*(HGeomVertexFit3*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit3));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomVertexFit3 G__THGeomVertexFit3;
static int G__GeometryDict_243_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomVertexFit3*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomVertexFit3*) (soff+(sizeof(HGeomVertexFit3)*i)))->~G__THGeomVertexFit3();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomVertexFit3*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomVertexFit3*) (soff))->~G__THGeomVertexFit3();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeometryDict_243_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomVertexFit3* dest = (HGeomVertexFit3*) G__getstructoffset();
   *dest = *(HGeomVertexFit3*) libp->para[0].ref;
   const HGeomVertexFit3& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HGeomVector */

/* HGeomRotation */

/* HGeomTransform */

/* HGeomVolume */

/* HGeomCompositeVolume */

/* HGeomShapes */

/* HSpecGeomPar */

/* HModGeomPar */

/* HDetGeomPar */

/* HGeomBasicShape */

/* HGeomBrik */

/* HGeomTrap */

/* HGeomTrd1 */

/* HGeomPgon */

/* HGeomPcon */

/* HGeomTube */

/* HGeomTubs */

/* HGeomCone */

/* HGeomCons */

/* HGeomSphe */

/* HGeomEltu */

/* HGeomMatrix */

/* HGeomVertexFit */

/* HGeomVertexFit2 */

/* HGeomVertexFit3 */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncGeometryDict {
 public:
  G__Sizep2memfuncGeometryDict(): p(&G__Sizep2memfuncGeometryDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncGeometryDict::*p)();
};

size_t G__get_sizep2memfuncGeometryDict()
{
  G__Sizep2memfuncGeometryDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceGeometryDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector))) {
     HGeomVector *G__Lderived;
     G__Lderived=(HGeomVector*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation))) {
     HGeomRotation *G__Lderived;
     G__Lderived=(HGeomRotation*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform))) {
     HGeomTransform *G__Lderived;
     G__Lderived=(HGeomTransform*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume))) {
     HGeomVolume *G__Lderived;
     G__Lderived=(HGeomVolume*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCompositeVolume))) {
     HGeomCompositeVolume *G__Lderived;
     G__Lderived=(HGeomCompositeVolume*)0x1000;
     {
       HGeomVolume *G__Lpbase=(HGeomVolume*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCompositeVolume),G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCompositeVolume),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCompositeVolume),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomShapes))) {
     HGeomShapes *G__Lderived;
     G__Lderived=(HGeomShapes*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomShapes),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HSpecGeomPar))) {
     HSpecGeomPar *G__Lderived;
     G__Lderived=(HSpecGeomPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HSpecGeomPar),G__get_linked_tagnum(&G__GeometryDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HSpecGeomPar),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HSpecGeomPar),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HModGeomPar))) {
     HModGeomPar *G__Lderived;
     G__Lderived=(HModGeomPar*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HModGeomPar),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HModGeomPar),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HDetGeomPar))) {
     HDetGeomPar *G__Lderived;
     G__Lderived=(HDetGeomPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HDetGeomPar),G__get_linked_tagnum(&G__GeometryDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HDetGeomPar),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HDetGeomPar),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape))) {
     HGeomBasicShape *G__Lderived;
     G__Lderived=(HGeomBasicShape*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomBrik))) {
     HGeomBrik *G__Lderived;
     G__Lderived=(HGeomBrik*)0x1000;
     {
       HGeomBasicShape *G__Lpbase=(HGeomBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomBrik),G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomBrik),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomBrik),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrap))) {
     HGeomTrap *G__Lderived;
     G__Lderived=(HGeomTrap*)0x1000;
     {
       HGeomBasicShape *G__Lpbase=(HGeomBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrap),G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrap),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrap),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrd1))) {
     HGeomTrd1 *G__Lderived;
     G__Lderived=(HGeomTrd1*)0x1000;
     {
       HGeomBasicShape *G__Lpbase=(HGeomBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrd1),G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrd1),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrd1),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomPgon))) {
     HGeomPgon *G__Lderived;
     G__Lderived=(HGeomPgon*)0x1000;
     {
       HGeomBasicShape *G__Lpbase=(HGeomBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomPgon),G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomPgon),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomPgon),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomPcon))) {
     HGeomPcon *G__Lderived;
     G__Lderived=(HGeomPcon*)0x1000;
     {
       HGeomBasicShape *G__Lpbase=(HGeomBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomPcon),G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomPcon),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomPcon),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTube))) {
     HGeomTube *G__Lderived;
     G__Lderived=(HGeomTube*)0x1000;
     {
       HGeomBasicShape *G__Lpbase=(HGeomBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTube),G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTube),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTube),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTubs))) {
     HGeomTubs *G__Lderived;
     G__Lderived=(HGeomTubs*)0x1000;
     {
       HGeomBasicShape *G__Lpbase=(HGeomBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTubs),G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTubs),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTubs),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCone))) {
     HGeomCone *G__Lderived;
     G__Lderived=(HGeomCone*)0x1000;
     {
       HGeomBasicShape *G__Lpbase=(HGeomBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCone),G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCone),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCone),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCons))) {
     HGeomCons *G__Lderived;
     G__Lderived=(HGeomCons*)0x1000;
     {
       HGeomBasicShape *G__Lpbase=(HGeomBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCons),G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCons),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCons),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomSphe))) {
     HGeomSphe *G__Lderived;
     G__Lderived=(HGeomSphe*)0x1000;
     {
       HGeomBasicShape *G__Lpbase=(HGeomBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomSphe),G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomSphe),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomSphe),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomEltu))) {
     HGeomEltu *G__Lderived;
     G__Lderived=(HGeomEltu*)0x1000;
     {
       HGeomBasicShape *G__Lpbase=(HGeomBasicShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomEltu),G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomEltu),G__get_linked_tagnum(&G__GeometryDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomEltu),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix))) {
     HGeomMatrix *G__Lderived;
     G__Lderived=(HGeomMatrix*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit))) {
     HGeomVertexFit *G__Lderived;
     G__Lderived=(HGeomVertexFit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit2))) {
     HGeomVertexFit2 *G__Lderived;
     G__Lderived=(HGeomVertexFit2*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit2),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit3))) {
     HGeomVertexFit3 *G__Lderived;
     G__Lderived=(HGeomVertexFit3*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit3),G__get_linked_tagnum(&G__GeometryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableGeometryDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__GeometryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GeometryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GeometryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GeometryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GeometryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__GeometryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GeometryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GeometryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GeometryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GeometryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__GeometryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__GeometryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__GeometryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__GeometryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__GeometryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HGeomVector */
static void G__setup_memvarHGeomVector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector));
   { HGeomVector *p; p=(HGeomVector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"z=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomRotation */
static void G__setup_memvarHGeomRotation(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation));
   { HGeomRotation *p; p=(HGeomRotation*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"rot[9]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomTransform */
static void G__setup_memvarHGeomTransform(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform));
   { HGeomTransform *p; p=(HGeomTransform*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation),-1,-1,2,"rot=",0,"rotation matrix, describing the orientation");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector),-1,-1,2,"trans=",0,"translation vector, describing the position");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomVolume */
static void G__setup_memvarHGeomVolume(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume));
   { HGeomVolume *p; p=(HGeomVolume*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TString),-1,-1,2,"shape=",0,"Geant shape of the volume");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TString),-1,-1,2,"mother=",0,"name of the mother volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TObjArray),-1,-1,2,"points=",0,"array of points (type HGeomVector)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform),-1,-1,2,"transform=",0,"transformation relative to the mother system");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nPoints=",0,"number of points");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomCompositeVolume */
static void G__setup_memvarHGeomCompositeVolume(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCompositeVolume));
   { HGeomCompositeVolume *p; p=(HGeomCompositeVolume*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TObjArray),-1,-1,2,"components=",0,"array of components (type HGeomVolume)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomShapes */
static void G__setup_memvarHGeomShapes(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomShapes));
   { HGeomShapes *p; p=(HGeomShapes*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TList),-1,-1,2,"shapes=",0,"list of already created shape classes");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSpecGeomPar */
static void G__setup_memvarHSpecGeomPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HSpecGeomPar));
   { HSpecGeomPar *p; p=(HSpecGeomPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume),-1,-1,2,"cave=",0,"volume describing the cave");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TObjArray),-1,-1,2,"sectors=",0,"array of sector volumes (type HGeomVolume)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TObjArray),-1,-1,2,"targets=",0,"array of target volumes (type HGeomVolume)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomShapes),-1,-1,2,"shapes=",0,"! pointer to the shape classes");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isFirstInit=",0,"! kTRUE before first initialization");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HModGeomPar */
static void G__setup_memvarHModGeomPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HModGeomPar));
   { HModGeomPar *p; p=(HModGeomPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TString),-1,-1,2,"refName=",0,"name of the reference module volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomCompositeVolume),-1,-1,2,"refVolume=",0,"! pointer to the reference module volume");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform),-1,-1,2,"transform=",0,"lab transformation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HDetGeomPar */
static void G__setup_memvarHDetGeomPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HDetGeomPar));
   { HDetGeomPar *p; p=(HDetGeomPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TObjArray),-1,-1,2,"modules=",0,"linear array of all modules (type HModGeomPar)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TObjArray),-1,-1,2,"refVolumes=",0,"array of module types (type HGeomCompositeVolume)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxSectors=",0,"maximum number of sectors");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxModules=",0,"maximum number of modules in a sector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numComponents=",0,"number of components in a sector ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomShapes),-1,-1,2,"shapes=",0,"! pointer to the shape classes");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isFirstInit=",0,"! kTRUE before first initialization");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomBasicShape */
static void G__setup_memvarHGeomBasicShape(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape));
   { HGeomBasicShape *p; p=(HGeomBasicShape*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nPoints=",0,"number of points describing the shape ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nParam=",0,"number of parameters needed to create the ROOT shape");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TArrayD),-1,-1,2,"param=",0,"parameters needed to create the ROOT shape");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform),-1,-1,2,"center=",0,"position of the volume center in the technical KS");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform),-1,-1,2,"position=",0,"position of the ROOT volume in its ROOT mother");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomBrik */
static void G__setup_memvarHGeomBrik(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomBrik));
   { HGeomBrik *p; p=(HGeomBrik*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomTrap */
static void G__setup_memvarHGeomTrap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrap));
   { HGeomTrap *p; p=(HGeomTrap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation),-1,-1,4,"intrinsicRot=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomTrd1 */
static void G__setup_memvarHGeomTrd1(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrd1));
   { HGeomTrd1 *p; p=(HGeomTrd1*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation),-1,-1,4,"intrinsicRot=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomPgon */
static void G__setup_memvarHGeomPgon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomPgon));
   { HGeomPgon *p; p=(HGeomPgon*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomPcon */
static void G__setup_memvarHGeomPcon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomPcon));
   { HGeomPcon *p; p=(HGeomPcon*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomTube */
static void G__setup_memvarHGeomTube(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTube));
   { HGeomTube *p; p=(HGeomTube*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomTubs */
static void G__setup_memvarHGeomTubs(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTubs));
   { HGeomTubs *p; p=(HGeomTubs*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomCone */
static void G__setup_memvarHGeomCone(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCone));
   { HGeomCone *p; p=(HGeomCone*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomCons */
static void G__setup_memvarHGeomCons(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCons));
   { HGeomCons *p; p=(HGeomCons*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomSphe */
static void G__setup_memvarHGeomSphe(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomSphe));
   { HGeomSphe *p; p=(HGeomSphe*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomEltu */
static void G__setup_memvarHGeomEltu(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomEltu));
   { HGeomEltu *p; p=(HGeomEltu*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomMatrix */
static void G__setup_memvarHGeomMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix));
   { HGeomMatrix *p; p=(HGeomMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fM[9]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomVertexFit */
static void G__setup_memvarHGeomVertexFit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit));
   { HGeomVertexFit *p; p=(HGeomVertexFit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix),-1,-1,4,"fM=",0,"Temporal matrix for calculations");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix),-1,-1,2,"fSys=",0,"LSM system inverse matrix");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector),-1,-1,2,"fB=",0,"LSM independent term");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomVertexFit2 */
static void G__setup_memvarHGeomVertexFit2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit2));
   { HGeomVertexFit2 *p; p=(HGeomVertexFit2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix),-1,-1,4,"fM=",0,"Temporal matrix for calculations");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix),-1,-1,2,"fSys=",0,"LSM system inverse matrix");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector),-1,-1,2,"fB=",0,"LSM independent term");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomVertexFit3 */
static void G__setup_memvarHGeomVertexFit3(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit3));
   { HGeomVertexFit3 *p; p=(HGeomVertexFit3*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix),-1,-1,4,"fM=",0,"Temporal matrix for calculations");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix),-1,-1,2,"fSys=",0,"LSM system inverse matrix");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector),-1,-1,2,"fB=",0,"LSM independent term");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeometryDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarGeometryDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHGeomVector(void) {
   /* HGeomVector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector));
   G__memfunc_setup("round",552,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"d - 'Double_t' 0 - d i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HGeomVector",1091,G__GeometryDict_170_0_2, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 '0' dx d - 'Double_t' 0 '0' dy "
"d - 'Double_t' 0 '0' dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__GeometryDict_170_0_3, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__GeometryDict_170_0_4, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Z",90,G__GeometryDict_170_0_5, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__GeometryDict_170_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__GeometryDict_170_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ",410,G__GeometryDict_170_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYZ",599,G__GeometryDict_170_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 10 - xx d - 'Double_t' 10 - yy "
"d - 'Double_t' 10 - zz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__GeometryDict_170_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__GeometryDict_170_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ",422,G__GeometryDict_170_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVector",959,G__GeometryDict_170_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVector",959,G__GeometryDict_170_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__GeometryDict_170_0_15, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__GeometryDict_170_0_16, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__GeometryDict_170_0_17, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 1, 1, 1, 1, 0, "u 'HGeomVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__GeometryDict_170_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'HGeomVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__GeometryDict_170_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'HGeomVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__GeometryDict_170_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__GeometryDict_170_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__GeometryDict_170_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__GeometryDict_170_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__GeometryDict_170_0_24, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__GeometryDict_170_0_25, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__GeometryDict_170_0_26, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__GeometryDict_170_0_27, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__GeometryDict_170_0_28, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 1, 1, 1, 1, 0, "u 'HGeomVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__GeometryDict_170_0_29, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 1, 1, 1, 1, 0, "u 'HGeomVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__GeometryDict_170_0_30, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 0, 1, 1, 1, 8, "u 'HGeomVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__GeometryDict_170_0_31, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 0, 1, 1, 1, 8, "u 'HGeomVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("abs",310,G__GeometryDict_170_0_32, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scalarProduct",1367,G__GeometryDict_170_0_33, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'HGeomVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vectorProduct",1396,G__GeometryDict_170_0_34, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 0, 1, 1, 1, 8, "u 'HGeomVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("length",642,G__GeometryDict_170_0_35, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__GeometryDict_170_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__GeometryDict_170_0_37, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("round",552,G__GeometryDict_170_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeometryDict_170_0_39, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomVector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_170_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_170_0_41, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomVector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_170_0_42, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomVector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_170_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_170_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_170_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomVector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_170_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_170_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomVector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomVector", 1091, G__GeometryDict_170_0_51, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomVector", 1217, G__GeometryDict_170_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomRotation(void) {
   /* HGeomRotation */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation));
   G__memfunc_setup("HGeomRotation",1312,G__GeometryDict_187_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HGeomRotation",1312,G__GeometryDict_187_0_2, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation), -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HGeomRotation",1312,G__GeometryDict_187_0_3, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation), -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 10 - - d - 'Double_t' 10 - - "
"d - 'Double_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMatrix",961,G__GeometryDict_187_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMatrix",961,G__GeometryDict_187_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEulerAngles",1443,G__GeometryDict_187_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 10 - - d - 'Double_t' 10 - - "
"d - 'Double_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__GeometryDict_187_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 10 - a i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__GeometryDict_187_0_8, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__GeometryDict_187_0_9, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation), -1, 1, 1, 1, 1, 0, "u 'HGeomRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__GeometryDict_187_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HGeomRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__GeometryDict_187_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HGeomRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__GeometryDict_187_0_12, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 0, 1, 1, 1, 8, "u 'HGeomVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__GeometryDict_187_0_13, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation), -1, 0, 1, 1, 1, 8, "u 'HGeomRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__GeometryDict_187_0_14, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation), -1, 1, 1, 1, 1, 0, "u 'HGeomRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__GeometryDict_187_0_15, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation), -1, 1, 1, 1, 1, 0, "u 'HGeomRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isUnitMatrix",1265,G__GeometryDict_187_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__GeometryDict_187_0_17, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,G__GeometryDict_187_0_18, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("determinant",1179,G__GeometryDict_187_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("diff2",459,G__GeometryDict_187_0_20, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'HGeomRotation' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__GeometryDict_187_0_21, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUnitMatrix",1377,G__GeometryDict_187_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZero",748,G__GeometryDict_187_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__GeometryDict_187_0_24, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createTRotMatrix",1650,G__GeometryDict_187_0_25, 85, G__get_linked_tagnum(&G__GeometryDictLN_TRotMatrix), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 '\"\"' name C - 'Text_t' 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeometryDict_187_0_26, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomRotation::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_187_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRotation::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_187_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomRotation::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_187_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomRotation::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_187_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_187_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRotation::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_187_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomRotation::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_187_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRotation::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_187_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomRotation::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomRotation", 1312, G__GeometryDict_187_0_38, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation), -1, 0, 1, 1, 1, 0, "u 'HGeomRotation' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomRotation", 1438, G__GeometryDict_187_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomTransform(void) {
   /* HGeomTransform */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform));
   G__memfunc_setup("HGeomTransform",1420,G__GeometryDict_188_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HGeomTransform",1420,G__GeometryDict_188_0_2, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform), -1, 0, 1, 1, 1, 0, "u 'HGeomTransform' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__GeometryDict_188_0_3, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform), -1, 1, 1, 1, 1, 0, "u 'HGeomTransform' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRotMatrix",1258,G__GeometryDict_188_0_4, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomRotation), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTransVector",1467,G__GeometryDict_188_0_5, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRotMatrix",1270,G__GeometryDict_188_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRotMatrix",1270,G__GeometryDict_188_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRotMatrix",1270,G__GeometryDict_188_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTransVector",1479,G__GeometryDict_188_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTransVector",1479,G__GeometryDict_188_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTransVector",1479,G__GeometryDict_188_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transFrom",956,G__GeometryDict_188_0_12, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 0, 1, 1, 1, 8, "u 'HGeomVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transTo",747,G__GeometryDict_188_0_13, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 0, 1, 1, 1, 8, "u 'HGeomVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transFrom",956,G__GeometryDict_188_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transTo",747,G__GeometryDict_188_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,G__GeometryDict_188_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__GeometryDict_188_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__GeometryDict_188_0_18, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTransform",1288,G__GeometryDict_188_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomTransform' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeometryDict_188_0_20, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomTransform::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_188_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTransform::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_188_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomTransform::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_188_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomTransform::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_188_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_188_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTransform::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_188_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTransform::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_188_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTransform::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_188_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTransform::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HGeomTransform", 1546, G__GeometryDict_188_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomVolume(void) {
   /* HGeomVolume */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume));
   G__memfunc_setup("HGeomVolume",1096,G__GeometryDict_196_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HGeomVolume",1096,G__GeometryDict_196_0_2, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume), -1, 0, 1, 1, 1, 0, "u 'HGeomVolume' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getName",705,G__GeometryDict_196_0_3, 117, G__get_linked_tagnum(&G__GeometryDictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShape",817,G__GeometryDict_196_0_4, 117, G__get_linked_tagnum(&G__GeometryDictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMother",943,G__GeometryDict_196_0_5, 117, G__get_linked_tagnum(&G__GeometryDictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTransform",1276,G__GeometryDict_196_0_6, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumPoints",1261,G__GeometryDict_196_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPoint",842,G__GeometryDict_196_0_8, 85, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setName",717,G__GeometryDict_196_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVolumePar",1255,G__GeometryDict_196_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVolume' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShape",829,G__GeometryDict_196_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMother",955,G__GeometryDict_196_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createPoints",1265,G__GeometryDict_196_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPoint",854,G__GeometryDict_196_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 10 - - d - 'Double_t' 10 - - "
"d - 'Double_t' 10 - - d - 'Double_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPoint",854,G__GeometryDict_196_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - - u 'HGeomVector' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__GeometryDict_196_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,G__GeometryDict_196_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeometryDict_196_0_18, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomVolume::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_196_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVolume::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_196_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomVolume::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_196_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomVolume::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_196_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_196_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVolume::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_196_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomVolume::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_196_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVolume::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_196_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomVolume::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HGeomVolume", 1222, G__GeometryDict_196_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_196_0_31, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume), -1, 1, 1, 1, 1, 0, "u 'HGeomVolume' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomCompositeVolume(void) {
   /* HGeomCompositeVolume */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCompositeVolume));
   G__memfunc_setup("HGeomCompositeVolume",2043,G__GeometryDict_197_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomCompositeVolume), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' nComp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumComponents",1686,G__GeometryDict_197_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getComponent",1267,G__GeometryDict_197_0_3, 85, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createComponents",1690,G__GeometryDict_197_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setComponent",1279,G__GeometryDict_197_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HGeomVolume' - 0 - - i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeometryDict_197_0_8, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomCompositeVolume::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_197_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCompositeVolume::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_197_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomCompositeVolume::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_197_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomCompositeVolume::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_197_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_197_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCompositeVolume::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_197_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomCompositeVolume::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_197_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCompositeVolume::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_197_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomCompositeVolume::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomCompositeVolume", 2043, G__GeometryDict_197_0_20, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomCompositeVolume), -1, 0, 1, 1, 1, 0, "u 'HGeomCompositeVolume' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomCompositeVolume", 2169, G__GeometryDict_197_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_197_0_22, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomCompositeVolume), -1, 1, 1, 1, 1, 0, "u 'HGeomCompositeVolume' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomShapes(void) {
   /* HGeomShapes */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomShapes));
   G__memfunc_setup("HGeomShapes",1076,G__GeometryDict_202_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomShapes), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectShape",1137,G__GeometryDict_202_0_2, 85, G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape), -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectShape",1137,G__GeometryDict_202_0_3, 85, G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readPoints",1049,G__GeometryDict_202_0_4, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writePoints",1192,G__GeometryDict_202_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printPoints",1194,G__GeometryDict_202_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - volu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeometryDict_202_0_7, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomShapes::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_202_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomShapes::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_202_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomShapes::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_202_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomShapes::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_202_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_202_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomShapes::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_202_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomShapes::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_202_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomShapes::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_202_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomShapes::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomShapes", 1076, G__GeometryDict_202_0_19, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomShapes), -1, 0, 1, 1, 1, 0, "u 'HGeomShapes' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomShapes", 1202, G__GeometryDict_202_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_202_0_21, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomShapes), -1, 1, 1, 1, 1, 0, "u 'HGeomShapes' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSpecGeomPar(void) {
   /* HSpecGeomPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HSpecGeomPar));
   G__memfunc_setup("HSpecGeomPar",1150,G__GeometryDict_203_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HSpecGeomPar), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 '\"SpecGeomPar\"' name C - 'Char_t' 10 '\"Geometry of cave, sectors and target\"' title "
"C - 'Char_t' 10 '\"GeomProduction\"' context i - 'Int_t' 10 '6' maxSec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumSectors",1363,G__GeometryDict_203_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumTargets",1354,G__GeometryDict_203_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCave",703,G__GeometryDict_203_0_4, 85, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__GeometryDict_203_0_5, 85, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTarget",935,G__GeometryDict_203_0_6, 85, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVolume), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFirstInitialization",2220,G__GeometryDict_203_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNotFirstInit",1561,G__GeometryDict_203_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCave",680,G__GeometryDict_203_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createTargets",1358,G__GeometryDict_203_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTarget",912,G__GeometryDict_203_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSector",921,G__GeometryDict_203_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__GeometryDict_203_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSectorIndex",1448,G__GeometryDict_203_0_18, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - 'Text_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetIndex",1439,G__GeometryDict_203_0_19, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - 'Text_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShapes",932,G__GeometryDict_203_0_20, 85, G__get_linked_tagnum(&G__GeometryDictLN_HGeomShapes), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeometryDict_203_0_21, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSpecGeomPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_203_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSpecGeomPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_203_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSpecGeomPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_203_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSpecGeomPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_203_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_203_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSpecGeomPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_203_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSpecGeomPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_203_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSpecGeomPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_203_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSpecGeomPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSpecGeomPar", 1150, G__GeometryDict_203_0_33, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HSpecGeomPar), -1, 0, 1, 1, 1, 0, "u 'HSpecGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSpecGeomPar", 1276, G__GeometryDict_203_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_203_0_35, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HSpecGeomPar), -1, 1, 1, 1, 1, 0, "u 'HSpecGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHModGeomPar(void) {
   /* HModGeomPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HModGeomPar));
   G__memfunc_setup("HModGeomPar",1043,G__GeometryDict_204_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HModGeomPar), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefVolume",1237,G__GeometryDict_204_0_2, 85, G__get_linked_tagnum(&G__GeometryDictLN_HGeomCompositeVolume), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabTransform",1547,G__GeometryDict_204_0_3, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefName",990,G__GeometryDict_204_0_4, 67, -1, G__defined_typename("Text_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefName",1002,G__GeometryDict_204_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__GeometryDict_204_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__GeometryDict_204_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVolume",964,G__GeometryDict_204_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomCompositeVolume' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeometryDict_204_0_9, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HModGeomPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_204_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HModGeomPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_204_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HModGeomPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_204_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HModGeomPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_204_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_204_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HModGeomPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_204_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HModGeomPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_204_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HModGeomPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_204_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HModGeomPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HModGeomPar", 1043, G__GeometryDict_204_0_21, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HModGeomPar), -1, 0, 1, 1, 1, 0, "u 'HModGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HModGeomPar", 1169, G__GeometryDict_204_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_204_0_23, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HModGeomPar), -1, 1, 1, 1, 1, 0, "u 'HModGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHDetGeomPar(void) {
   /* HDetGeomPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HDetGeomPar));
   G__memfunc_setup("HDetGeomPar",1040,G__GeometryDict_205_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HDetGeomPar), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' name C - 'Char_t' 10 '\"\"' title "
"C - 'Char_t' 10 '\"\"' context C - 'Char_t' 10 '\"\"' detectorName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumModules",1353,G__GeometryDict_205_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumRefModules",1638,G__GeometryDict_205_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumComponents",1686,G__GeometryDict_205_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxSectors",1353,G__GeometryDict_205_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxModules",1343,G__GeometryDict_205_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFirstInitialization",2220,G__GeometryDict_205_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNotFirstInit",1561,G__GeometryDict_205_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__GeometryDict_205_0_9, 85, G__get_linked_tagnum(&G__GeometryDictLN_HModGeomPar), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - - i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__GeometryDict_205_0_10, 85, G__get_linked_tagnum(&G__GeometryDictLN_HModGeomPar), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__GeometryDict_205_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TObjArray' - 0 - - i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefVolume",1237,G__GeometryDict_205_0_12, 85, G__get_linked_tagnum(&G__GeometryDictLN_HGeomCompositeVolume), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addRefVolume",1214,G__GeometryDict_205_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HGeomCompositeVolume' - 0 - - i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__GeometryDict_205_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNum",907,G__GeometryDict_205_0_18, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,G__GeometryDict_205_0_19, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInComp",1494,G__GeometryDict_205_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCompNum",1023,G__GeometryDict_205_0_21, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getShapes",932,G__GeometryDict_205_0_22, 85, G__get_linked_tagnum(&G__GeometryDictLN_HGeomShapes), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeometryDict_205_0_23, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HDetGeomPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_205_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDetGeomPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_205_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HDetGeomPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_205_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HDetGeomPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_205_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_205_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDetGeomPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_205_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDetGeomPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_205_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDetGeomPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_205_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDetGeomPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HDetGeomPar", 1040, G__GeometryDict_205_0_35, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HDetGeomPar), -1, 0, 1, 1, 1, 0, "u 'HDetGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HDetGeomPar", 1166, G__GeometryDict_205_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_205_0_37, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HDetGeomPar), -1, 1, 1, 1, 1, 0, "u 'HDetGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomBasicShape(void) {
   /* HGeomBasicShape */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape));
   G__memfunc_setup("HGeomBasicShape",1443,G__GeometryDict_209_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumPoints",1261,G__GeometryDict_209_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumParam",1121,G__GeometryDict_209_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParam",817,G__GeometryDict_209_0_4, 85, G__get_linked_tagnum(&G__GeometryDictLN_TArrayD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCenterPosition",1782,G__GeometryDict_209_0_5, 85, G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVoluPosition",1595,G__GeometryDict_209_0_6, 85, G__get_linked_tagnum(&G__GeometryDictLN_HGeomTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readPoints",1049,G__GeometryDict_209_0_7, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,G__GeometryDict_209_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,G__GeometryDict_209_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluParam",1322,G__GeometryDict_209_0_10, 85, G__get_linked_tagnum(&G__GeometryDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,G__GeometryDict_209_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HGeomVolume' - 0 - - u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,G__GeometryDict_209_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomVolume' - 0 - - u 'HGeomTransform' - 11 - - "
"u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__GeometryDict_209_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("posInMother",1144,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'HGeomTransform' - 11 - - u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeometryDict_209_0_15, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomBasicShape::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_209_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomBasicShape::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_209_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomBasicShape::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_209_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomBasicShape::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_209_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_209_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomBasicShape::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_209_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomBasicShape::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_209_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomBasicShape::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_209_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomBasicShape::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomBasicShape", 1443, G__GeometryDict_209_0_27, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape), -1, 0, 1, 1, 1, 0, "u 'HGeomBasicShape' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomBasicShape", 1569, G__GeometryDict_209_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_209_0_29, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomBasicShape), -1, 1, 1, 1, 1, 0, "u 'HGeomBasicShape' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomBrik(void) {
   /* HGeomBrik */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomBrik));
   G__memfunc_setup("HGeomBrik",856,G__GeometryDict_222_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomBrik), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomVolume' - 0 - - u 'HGeomTransform' - 11 - - "
"u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeometryDict_222_0_4, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomBrik::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_222_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomBrik::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_222_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomBrik::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_222_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomBrik::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_222_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_222_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomBrik::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_222_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomBrik::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_222_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomBrik::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_222_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomBrik::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomBrik", 856, G__GeometryDict_222_0_16, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomBrik), -1, 0, 1, 1, 1, 0, "u 'HGeomBrik' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomBrik", 982, G__GeometryDict_222_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_222_0_18, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomBrik), -1, 1, 1, 1, 1, 0, "u 'HGeomBrik' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomTrap(void) {
   /* HGeomTrap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrap));
   G__memfunc_setup("HGeomTrap",871,G__GeometryDict_223_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomVolume' - 0 - - u 'HGeomTransform' - 11 - - "
"u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeometryDict_223_0_4, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomTrap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_223_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTrap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_223_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomTrap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_223_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomTrap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_223_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_223_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTrap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_223_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTrap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_223_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTrap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_223_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTrap::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomTrap", 871, G__GeometryDict_223_0_16, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrap), -1, 0, 1, 1, 1, 0, "u 'HGeomTrap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomTrap", 997, G__GeometryDict_223_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_223_0_18, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrap), -1, 1, 1, 1, 1, 0, "u 'HGeomTrap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomTrd1(void) {
   /* HGeomTrd1 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrd1));
   G__memfunc_setup("HGeomTrd1",811,G__GeometryDict_224_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrd1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomVolume' - 0 - - u 'HGeomTransform' - 11 - - "
"u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeometryDict_224_0_4, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomTrd1::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_224_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTrd1::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_224_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomTrd1::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_224_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomTrd1::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_224_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_224_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTrd1::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_224_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTrd1::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_224_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTrd1::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_224_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTrd1::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomTrd1", 811, G__GeometryDict_224_0_16, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrd1), -1, 0, 1, 1, 1, 0, "u 'HGeomTrd1' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomTrd1", 937, G__GeometryDict_224_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_224_0_18, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomTrd1), -1, 1, 1, 1, 1, 0, "u 'HGeomTrd1' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomPgon(void) {
   /* HGeomPgon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomPgon));
   G__memfunc_setup("HGeomPgon",868,G__GeometryDict_225_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomPgon), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomVolume' - 0 - - u 'HGeomTransform' - 11 - - "
"u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeometryDict_225_0_7, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomPgon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_225_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomPgon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_225_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomPgon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_225_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomPgon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_225_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_225_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomPgon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_225_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomPgon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_225_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomPgon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_225_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomPgon::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomPgon", 868, G__GeometryDict_225_0_19, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomPgon), -1, 0, 1, 1, 1, 0, "u 'HGeomPgon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomPgon", 994, G__GeometryDict_225_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_225_0_21, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomPgon), -1, 1, 1, 1, 1, 0, "u 'HGeomPgon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomPcon(void) {
   /* HGeomPcon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomPcon));
   G__memfunc_setup("HGeomPcon",864,G__GeometryDict_226_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomPcon), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomVolume' - 0 - - u 'HGeomTransform' - 11 - - "
"u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeometryDict_226_0_7, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomPcon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_226_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomPcon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_226_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomPcon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_226_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomPcon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_226_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_226_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomPcon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_226_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomPcon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_226_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomPcon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_226_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomPcon::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomPcon", 864, G__GeometryDict_226_0_19, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomPcon), -1, 0, 1, 1, 1, 0, "u 'HGeomPcon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomPcon", 990, G__GeometryDict_226_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_226_0_21, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomPcon), -1, 1, 1, 1, 1, 0, "u 'HGeomPcon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomTube(void) {
   /* HGeomTube */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTube));
   G__memfunc_setup("HGeomTube",864,G__GeometryDict_227_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomTube), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomVolume' - 0 - - u 'HGeomTransform' - 11 - - "
"u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeometryDict_227_0_7, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomTube::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_227_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTube::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_227_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomTube::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_227_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomTube::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_227_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_227_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTube::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_227_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTube::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_227_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTube::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_227_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTube::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomTube", 864, G__GeometryDict_227_0_19, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomTube), -1, 0, 1, 1, 1, 0, "u 'HGeomTube' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomTube", 990, G__GeometryDict_227_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_227_0_21, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomTube), -1, 1, 1, 1, 1, 0, "u 'HGeomTube' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomTubs(void) {
   /* HGeomTubs */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomTubs));
   G__memfunc_setup("HGeomTubs",878,G__GeometryDict_228_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomTubs), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomVolume' - 0 - - u 'HGeomTransform' - 11 - - "
"u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeometryDict_228_0_7, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomTubs::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_228_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTubs::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_228_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomTubs::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_228_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomTubs::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_228_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_228_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTubs::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_228_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTubs::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_228_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTubs::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_228_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTubs::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomTubs", 878, G__GeometryDict_228_0_19, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomTubs), -1, 0, 1, 1, 1, 0, "u 'HGeomTubs' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomTubs", 1004, G__GeometryDict_228_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_228_0_21, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomTubs), -1, 1, 1, 1, 1, 0, "u 'HGeomTubs' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomCone(void) {
   /* HGeomCone */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCone));
   G__memfunc_setup("HGeomCone",853,G__GeometryDict_229_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomCone), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomVolume' - 0 - - u 'HGeomTransform' - 11 - - "
"u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeometryDict_229_0_7, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomCone::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_229_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCone::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_229_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomCone::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_229_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomCone::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_229_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_229_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCone::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_229_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomCone::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_229_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCone::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_229_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomCone::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomCone", 853, G__GeometryDict_229_0_19, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomCone), -1, 0, 1, 1, 1, 0, "u 'HGeomCone' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomCone", 979, G__GeometryDict_229_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_229_0_21, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomCone), -1, 1, 1, 1, 1, 0, "u 'HGeomCone' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomCons(void) {
   /* HGeomCons */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomCons));
   G__memfunc_setup("HGeomCons",867,G__GeometryDict_230_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomCons), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomVolume' - 0 - - u 'HGeomTransform' - 11 - - "
"u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeometryDict_230_0_7, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomCons::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_230_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCons::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_230_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomCons::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_230_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomCons::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_230_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_230_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCons::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_230_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomCons::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_230_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCons::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_230_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomCons::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomCons", 867, G__GeometryDict_230_0_19, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomCons), -1, 0, 1, 1, 1, 0, "u 'HGeomCons' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomCons", 993, G__GeometryDict_230_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_230_0_21, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomCons), -1, 1, 1, 1, 1, 0, "u 'HGeomCons' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomSphe(void) {
   /* HGeomSphe */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomSphe));
   G__memfunc_setup("HGeomSphe",864,G__GeometryDict_231_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomSphe), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomVolume' - 0 - - u 'HGeomTransform' - 11 - - "
"u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeometryDict_231_0_7, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomSphe::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_231_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomSphe::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_231_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomSphe::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_231_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomSphe::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_231_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_231_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomSphe::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_231_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomSphe::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_231_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomSphe::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_231_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomSphe::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomSphe", 864, G__GeometryDict_231_0_19, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomSphe), -1, 0, 1, 1, 1, 0, "u 'HGeomSphe' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomSphe", 990, G__GeometryDict_231_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_231_0_21, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomSphe), -1, 1, 1, 1, 1, 0, "u 'HGeomSphe' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomEltu(void) {
   /* HGeomEltu */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomEltu));
   G__memfunc_setup("HGeomEltu",874,G__GeometryDict_232_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomEltu), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVoluParam",1322,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcVoluPosition",1678,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomVolume' - 0 - - u 'HGeomTransform' - 11 - - "
"u 'HGeomTransform' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readPoints",1049,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writePoints",1192,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - - U 'HGeomVolume' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printPoints",1194,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVolume' - 0 - volu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeometryDict_232_0_7, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomEltu::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_232_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomEltu::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_232_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomEltu::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_232_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomEltu::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_232_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_232_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomEltu::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_232_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomEltu::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_232_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomEltu::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_232_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomEltu::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomEltu", 874, G__GeometryDict_232_0_19, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomEltu), -1, 0, 1, 1, 1, 0, "u 'HGeomEltu' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomEltu", 1000, G__GeometryDict_232_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_232_0_21, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomEltu), -1, 1, 1, 1, 1, 0, "u 'HGeomEltu' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomMatrix(void) {
   /* HGeomMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix));
   G__memfunc_setup("HGeomMatrix",1093,G__GeometryDict_233_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__GeometryDict_233_0_2, 100, -1, G__defined_typename("Double_t"), 1, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("det",317,G__GeometryDict_233_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__GeometryDict_233_0_4, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVector), -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__GeometryDict_233_0_5, 117, G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix), -1, 1, 1, 1, 1, 0, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeometryDict_233_0_6, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_233_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_233_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_233_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_233_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_233_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_233_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_233_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_233_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomMatrix::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomMatrix", 1093, G__GeometryDict_233_0_18, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix), -1, 0, 1, 1, 1, 0, "u 'HGeomMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomMatrix", 1219, G__GeometryDict_233_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_233_0_20, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomMatrix), -1, 1, 1, 1, 1, 0, "u 'HGeomMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomVertexFit(void) {
   /* HGeomVertexFit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit));
   G__memfunc_setup("HGeomVertexFit",1393,G__GeometryDict_234_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addLine",689,G__GeometryDict_234_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'HGeomVector' - 11 - r u 'HGeomVector' - 11 - alpha "
"d - 'Double_t' 10 '1.0' w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVertex",958,G__GeometryDict_234_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 1 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__GeometryDict_234_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeometryDict_234_0_5, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomVertexFit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_234_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVertexFit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_234_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomVertexFit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_234_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomVertexFit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_234_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_234_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVertexFit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_234_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomVertexFit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_234_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVertexFit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_234_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomVertexFit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomVertexFit", 1393, G__GeometryDict_234_0_17, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit), -1, 0, 1, 1, 1, 0, "u 'HGeomVertexFit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomVertexFit", 1519, G__GeometryDict_234_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_234_0_19, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit), -1, 1, 1, 1, 1, 0, "u 'HGeomVertexFit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomVertexFit2(void) {
   /* HGeomVertexFit2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit2));
   G__memfunc_setup("HGeomVertexFit2",1443,G__GeometryDict_242_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addLine",689,G__GeometryDict_242_0_2, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'HGeomVector' - 11 - r u 'HGeomVector' - 11 - alpha "
"u 'HSymMat4' - 1 - cov f - 'Float_t' 0 - zv "
"d - 'Double_t' 10 '1.0' w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVertex",958,G__GeometryDict_242_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 1 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__GeometryDict_242_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeometryDict_242_0_5, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomVertexFit2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_242_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVertexFit2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_242_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomVertexFit2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_242_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomVertexFit2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_242_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_242_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVertexFit2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_242_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomVertexFit2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_242_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVertexFit2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_242_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomVertexFit2::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomVertexFit2", 1443, G__GeometryDict_242_0_17, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit2), -1, 0, 1, 1, 1, 0, "u 'HGeomVertexFit2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomVertexFit2", 1569, G__GeometryDict_242_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_242_0_19, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit2), -1, 1, 1, 1, 1, 0, "u 'HGeomVertexFit2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomVertexFit3(void) {
   /* HGeomVertexFit3 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit3));
   G__memfunc_setup("HGeomVertexFit3",1444,G__GeometryDict_243_0_1, 105, G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addLine",689,G__GeometryDict_243_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'HGeomVector' - 11 - r u 'HGeomVector' - 11 - alpha "
"d - 'Double_t' 10 '1.0' w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVertex",958,G__GeometryDict_243_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 1 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__GeometryDict_243_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeometryDict_243_0_5, 85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomVertexFit3::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeometryDict_243_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVertexFit3::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeometryDict_243_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomVertexFit3::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeometryDict_243_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomVertexFit3::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeometryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeometryDict_243_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeometryDict_243_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVertexFit3::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeometryDict_243_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomVertexFit3::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeometryDict_243_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVertexFit3::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeometryDict_243_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomVertexFit3::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomVertexFit3", 1444, G__GeometryDict_243_0_17, (int) ('i'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit3), -1, 0, 1, 1, 1, 0, "u 'HGeomVertexFit3' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomVertexFit3", 1570, G__GeometryDict_243_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeometryDict_243_0_19, (int) ('u'), G__get_linked_tagnum(&G__GeometryDictLN_HGeomVertexFit3), -1, 1, 1, 1, 1, 0, "u 'HGeomVertexFit3' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncGeometryDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalGeometryDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcGeometryDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__GeometryDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomVector = { "HGeomVector" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_TRotMatrix = { "TRotMatrix" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomRotation = { "HGeomRotation" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomTransform = { "HGeomTransform" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomVolume = { "HGeomVolume" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomCompositeVolume = { "HGeomCompositeVolume" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HParIo = { "HParIo" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HParSet = { "HParSet" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomShapes = { "HGeomShapes" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HSpecGeomPar = { "HSpecGeomPar" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HModGeomPar = { "HModGeomPar" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HDetGeomPar = { "HDetGeomPar" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomBasicShape = { "HGeomBasicShape" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomBrik = { "HGeomBrik" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomTrap = { "HGeomTrap" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomTrd1 = { "HGeomTrd1" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomPgon = { "HGeomPgon" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomPcon = { "HGeomPcon" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomTube = { "HGeomTube" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomTubs = { "HGeomTubs" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomCone = { "HGeomCone" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomCons = { "HGeomCons" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomSphe = { "HGeomSphe" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomEltu = { "HGeomEltu" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomMatrix = { "HGeomMatrix" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomVertexFit = { "HGeomVertexFit" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HSymMat4 = { "HSymMat4" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomVertexFit2 = { "HGeomVertexFit2" , 99 , -1 };
G__linked_taginfo G__GeometryDictLN_HGeomVertexFit3 = { "HGeomVertexFit3" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableGeometryDict() {
  G__GeometryDictLN_TClass.tagnum = -1 ;
  G__GeometryDictLN_TBuffer.tagnum = -1 ;
  G__GeometryDictLN_TMemberInspector.tagnum = -1 ;
  G__GeometryDictLN_TObject.tagnum = -1 ;
  G__GeometryDictLN_TNamed.tagnum = -1 ;
  G__GeometryDictLN_TString.tagnum = -1 ;
  G__GeometryDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__GeometryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__GeometryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GeometryDictLN_TList.tagnum = -1 ;
  G__GeometryDictLN_TObjArray.tagnum = -1 ;
  G__GeometryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__GeometryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GeometryDictLN_HGeomVector.tagnum = -1 ;
  G__GeometryDictLN_TRotMatrix.tagnum = -1 ;
  G__GeometryDictLN_HGeomRotation.tagnum = -1 ;
  G__GeometryDictLN_HGeomTransform.tagnum = -1 ;
  G__GeometryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__GeometryDictLN_HGeomVolume.tagnum = -1 ;
  G__GeometryDictLN_HGeomCompositeVolume.tagnum = -1 ;
  G__GeometryDictLN_HParIo.tagnum = -1 ;
  G__GeometryDictLN_HParSet.tagnum = -1 ;
  G__GeometryDictLN_HGeomShapes.tagnum = -1 ;
  G__GeometryDictLN_HSpecGeomPar.tagnum = -1 ;
  G__GeometryDictLN_HModGeomPar.tagnum = -1 ;
  G__GeometryDictLN_HDetGeomPar.tagnum = -1 ;
  G__GeometryDictLN_HGeomBasicShape.tagnum = -1 ;
  G__GeometryDictLN_TArrayD.tagnum = -1 ;
  G__GeometryDictLN_HGeomBrik.tagnum = -1 ;
  G__GeometryDictLN_HGeomTrap.tagnum = -1 ;
  G__GeometryDictLN_HGeomTrd1.tagnum = -1 ;
  G__GeometryDictLN_HGeomPgon.tagnum = -1 ;
  G__GeometryDictLN_HGeomPcon.tagnum = -1 ;
  G__GeometryDictLN_HGeomTube.tagnum = -1 ;
  G__GeometryDictLN_HGeomTubs.tagnum = -1 ;
  G__GeometryDictLN_HGeomCone.tagnum = -1 ;
  G__GeometryDictLN_HGeomCons.tagnum = -1 ;
  G__GeometryDictLN_HGeomSphe.tagnum = -1 ;
  G__GeometryDictLN_HGeomEltu.tagnum = -1 ;
  G__GeometryDictLN_HGeomMatrix.tagnum = -1 ;
  G__GeometryDictLN_HGeomVertexFit.tagnum = -1 ;
  G__GeometryDictLN_HSymMat4.tagnum = -1 ;
  G__GeometryDictLN_HGeomVertexFit2.tagnum = -1 ;
  G__GeometryDictLN_HGeomVertexFit3.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableGeometryDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_TString);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_TList);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomVector),sizeof(HGeomVector),-1,32000,"vector with 3 components",G__setup_memvarHGeomVector,G__setup_memfuncHGeomVector);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_TRotMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomRotation),sizeof(HGeomRotation),-1,64768,"rotation matrix",G__setup_memvarHGeomRotation,G__setup_memfuncHGeomRotation);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomTransform),sizeof(HGeomTransform),-1,32512,"basic geometry transformation class",G__setup_memvarHGeomTransform,G__setup_memfuncHGeomTransform);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomVolume),sizeof(HGeomVolume),-1,63232,"basic geometry parameters of a volume",G__setup_memvarHGeomVolume,G__setup_memfuncHGeomVolume);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomCompositeVolume),sizeof(HGeomCompositeVolume),-1,62720,"basic geometry of a volume with components",G__setup_memvarHGeomCompositeVolume,G__setup_memfuncHGeomCompositeVolume);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_HParIo);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_HParSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomShapes),sizeof(HGeomShapes),-1,29952,"manager class for geometry shapes",G__setup_memvarHGeomShapes,G__setup_memfuncHGeomShapes);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HSpecGeomPar),sizeof(HSpecGeomPar),-1,62720,"geometry container for cave, sectors, targets",G__setup_memvarHSpecGeomPar,G__setup_memfuncHSpecGeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HModGeomPar),sizeof(HModGeomPar),-1,62720,"Module level of the basic geometry container",G__setup_memvarHModGeomPar,G__setup_memfuncHModGeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HDetGeomPar),sizeof(HDetGeomPar),-1,62720,"basic geometry container of a detector",G__setup_memvarHDetGeomPar,G__setup_memfuncHDetGeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomBasicShape),sizeof(HGeomBasicShape),-1,62720,"base class for all shapes",G__setup_memvarHGeomBasicShape,G__setup_memfuncHGeomBasicShape);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_TArrayD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomBrik),sizeof(HGeomBrik),-1,62720,"class for geometry shape BOX or BRIK",G__setup_memvarHGeomBrik,G__setup_memfuncHGeomBrik);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomTrap),sizeof(HGeomTrap),-1,62720,"class for geometry shape TRAP",G__setup_memvarHGeomTrap,G__setup_memfuncHGeomTrap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomTrd1),sizeof(HGeomTrd1),-1,62720,"class for geometry shape TRD1",G__setup_memvarHGeomTrd1,G__setup_memfuncHGeomTrd1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomPgon),sizeof(HGeomPgon),-1,62720,"class for geometry shape PGON",G__setup_memvarHGeomPgon,G__setup_memfuncHGeomPgon);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomPcon),sizeof(HGeomPcon),-1,62720,"class for geometry shape PCON",G__setup_memvarHGeomPcon,G__setup_memfuncHGeomPcon);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomTube),sizeof(HGeomTube),-1,62720,"class for geometry shape TUBE",G__setup_memvarHGeomTube,G__setup_memfuncHGeomTube);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomTubs),sizeof(HGeomTubs),-1,62720,"class for geometry shape TUBS",G__setup_memvarHGeomTubs,G__setup_memfuncHGeomTubs);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomCone),sizeof(HGeomCone),-1,62720,"class for geometry shape CONE",G__setup_memvarHGeomCone,G__setup_memfuncHGeomCone);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomCons),sizeof(HGeomCons),-1,62720,"class for geometry shape CONS",G__setup_memvarHGeomCons,G__setup_memfuncHGeomCons);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomSphe),sizeof(HGeomSphe),-1,62720,"class for geometry shape SPHE",G__setup_memvarHGeomSphe,G__setup_memfuncHGeomSphe);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomEltu),sizeof(HGeomEltu),-1,62720,"class for geometry shape ELTU",G__setup_memvarHGeomEltu,G__setup_memfuncHGeomEltu);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomMatrix),sizeof(HGeomMatrix),-1,29952,(char*)NULL,G__setup_memvarHGeomMatrix,G__setup_memfuncHGeomMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomVertexFit),sizeof(HGeomVertexFit),-1,29952,(char*)NULL,G__setup_memvarHGeomVertexFit,G__setup_memfuncHGeomVertexFit);
   G__get_linked_tagnum_fwd(&G__GeometryDictLN_HSymMat4);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomVertexFit2),sizeof(HGeomVertexFit2),-1,292096,(char*)NULL,G__setup_memvarHGeomVertexFit2,G__setup_memfuncHGeomVertexFit2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeometryDictLN_HGeomVertexFit3),sizeof(HGeomVertexFit3),-1,292096,(char*)NULL,G__setup_memvarHGeomVertexFit3,G__setup_memfuncHGeomVertexFit3);
}
extern "C" void G__cpp_setupGeometryDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupGeometryDict()");
  G__set_cpp_environmentGeometryDict();
  G__cpp_setup_tagtableGeometryDict();

  G__cpp_setup_inheritanceGeometryDict();

  G__cpp_setup_typetableGeometryDict();

  G__cpp_setup_memvarGeometryDict();

  G__cpp_setup_memfuncGeometryDict();
  G__cpp_setup_globalGeometryDict();
  G__cpp_setup_funcGeometryDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncGeometryDict();
  return;
}
class G__cpp_setup_initGeometryDict {
  public:
    G__cpp_setup_initGeometryDict() { G__add_setup_func("GeometryDict",(G__incsetup)(&G__cpp_setupGeometryDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initGeometryDict() { G__remove_setup_func("GeometryDict"); }
};
G__cpp_setup_initGeometryDict G__cpp_setup_initializerGeometryDict;


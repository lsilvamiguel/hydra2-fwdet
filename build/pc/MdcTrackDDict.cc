//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:47:27 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIMdcTrackDDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MdcTrackDDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HMdcTrackDContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrackDContFact(void *p = 0);
   static void *newArray_HMdcTrackDContFact(Long_t size, void *p);
   static void delete_HMdcTrackDContFact(void *p);
   static void deleteArray_HMdcTrackDContFact(void *p);
   static void destruct_HMdcTrackDContFact(void *p);
   static void streamer_HMdcTrackDContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackDContFact*)
   {
      ::HMdcTrackDContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackDContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackDContFact", ::HMdcTrackDContFact::Class_Version(), "././hmdctrackdcontfact.h", 9,
                  typeid(::HMdcTrackDContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackDContFact::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackDContFact) );
      instance.SetNew(&new_HMdcTrackDContFact);
      instance.SetNewArray(&newArray_HMdcTrackDContFact);
      instance.SetDelete(&delete_HMdcTrackDContFact);
      instance.SetDeleteArray(&deleteArray_HMdcTrackDContFact);
      instance.SetDestructor(&destruct_HMdcTrackDContFact);
      instance.SetStreamerFunc(&streamer_HMdcTrackDContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackDContFact*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackDContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackDContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcPointPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcPointPlane(void *p = 0);
   static void *newArray_HMdcPointPlane(Long_t size, void *p);
   static void delete_HMdcPointPlane(void *p);
   static void deleteArray_HMdcPointPlane(void *p);
   static void destruct_HMdcPointPlane(void *p);
   static void streamer_HMdcPointPlane(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcPointPlane*)
   {
      ::HMdcPointPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcPointPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcPointPlane", ::HMdcPointPlane::Class_Version(), "././hmdcgeomobj.h", 11,
                  typeid(::HMdcPointPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcPointPlane::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcPointPlane) );
      instance.SetNew(&new_HMdcPointPlane);
      instance.SetNewArray(&newArray_HMdcPointPlane);
      instance.SetDelete(&delete_HMdcPointPlane);
      instance.SetDeleteArray(&deleteArray_HMdcPointPlane);
      instance.SetDestructor(&destruct_HMdcPointPlane);
      instance.SetStreamerFunc(&streamer_HMdcPointPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcPointPlane*)
   {
      return GenerateInitInstanceLocal((::HMdcPointPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcPointPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrapPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrapPlane(void *p = 0);
   static void *newArray_HMdcTrapPlane(Long_t size, void *p);
   static void delete_HMdcTrapPlane(void *p);
   static void deleteArray_HMdcTrapPlane(void *p);
   static void destruct_HMdcTrapPlane(void *p);
   static void streamer_HMdcTrapPlane(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrapPlane*)
   {
      ::HMdcTrapPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrapPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrapPlane", ::HMdcTrapPlane::Class_Version(), "././hmdcgeomobj.h", 35,
                  typeid(::HMdcTrapPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrapPlane::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrapPlane) );
      instance.SetNew(&new_HMdcTrapPlane);
      instance.SetNewArray(&newArray_HMdcTrapPlane);
      instance.SetDelete(&delete_HMdcTrapPlane);
      instance.SetDeleteArray(&deleteArray_HMdcTrapPlane);
      instance.SetDestructor(&destruct_HMdcTrapPlane);
      instance.SetStreamerFunc(&streamer_HMdcTrapPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrapPlane*)
   {
      return GenerateInitInstanceLocal((::HMdcTrapPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrapPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrap(void *p = 0);
   static void *newArray_HMdcTrap(Long_t size, void *p);
   static void delete_HMdcTrap(void *p);
   static void deleteArray_HMdcTrap(void *p);
   static void destruct_HMdcTrap(void *p);
   static void streamer_HMdcTrap(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrap*)
   {
      ::HMdcTrap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrap", ::HMdcTrap::Class_Version(), "././hmdcgeomobj.h", 85,
                  typeid(::HMdcTrap), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrap::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrap) );
      instance.SetNew(&new_HMdcTrap);
      instance.SetNewArray(&newArray_HMdcTrap);
      instance.SetDelete(&delete_HMdcTrap);
      instance.SetDeleteArray(&deleteArray_HMdcTrap);
      instance.SetDestructor(&destruct_HMdcTrap);
      instance.SetStreamerFunc(&streamer_HMdcTrap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrap*)
   {
      return GenerateInitInstanceLocal((::HMdcTrap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcPlane(void *p = 0);
   static void *newArray_HMdcPlane(Long_t size, void *p);
   static void delete_HMdcPlane(void *p);
   static void deleteArray_HMdcPlane(void *p);
   static void destruct_HMdcPlane(void *p);
   static void streamer_HMdcPlane(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcPlane*)
   {
      ::HMdcPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcPlane", ::HMdcPlane::Class_Version(), "././hmdcgeomobj.h", 111,
                  typeid(::HMdcPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcPlane::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcPlane) );
      instance.SetNew(&new_HMdcPlane);
      instance.SetNewArray(&newArray_HMdcPlane);
      instance.SetDelete(&delete_HMdcPlane);
      instance.SetDeleteArray(&deleteArray_HMdcPlane);
      instance.SetDestructor(&destruct_HMdcPlane);
      instance.SetStreamerFunc(&streamer_HMdcPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcPlane*)
   {
      return GenerateInitInstanceLocal((::HMdcPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcPointOnPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcPointOnPlane(void *p = 0);
   static void *newArray_HMdcPointOnPlane(Long_t size, void *p);
   static void delete_HMdcPointOnPlane(void *p);
   static void deleteArray_HMdcPointOnPlane(void *p);
   static void destruct_HMdcPointOnPlane(void *p);
   static void streamer_HMdcPointOnPlane(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcPointOnPlane*)
   {
      ::HMdcPointOnPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcPointOnPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcPointOnPlane", ::HMdcPointOnPlane::Class_Version(), "././hmdcgeomobj.h", 158,
                  typeid(::HMdcPointOnPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcPointOnPlane::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcPointOnPlane) );
      instance.SetNew(&new_HMdcPointOnPlane);
      instance.SetNewArray(&newArray_HMdcPointOnPlane);
      instance.SetDelete(&delete_HMdcPointOnPlane);
      instance.SetDeleteArray(&deleteArray_HMdcPointOnPlane);
      instance.SetDestructor(&destruct_HMdcPointOnPlane);
      instance.SetStreamerFunc(&streamer_HMdcPointOnPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcPointOnPlane*)
   {
      return GenerateInitInstanceLocal((::HMdcPointOnPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcPointOnPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLineParam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLineParam(void *p = 0);
   static void *newArray_HMdcLineParam(Long_t size, void *p);
   static void delete_HMdcLineParam(void *p);
   static void deleteArray_HMdcLineParam(void *p);
   static void destruct_HMdcLineParam(void *p);
   static void streamer_HMdcLineParam(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLineParam*)
   {
      ::HMdcLineParam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLineParam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLineParam", ::HMdcLineParam::Class_Version(), "././hmdcgeomobj.h", 206,
                  typeid(::HMdcLineParam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLineParam::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLineParam) );
      instance.SetNew(&new_HMdcLineParam);
      instance.SetNewArray(&newArray_HMdcLineParam);
      instance.SetDelete(&delete_HMdcLineParam);
      instance.SetDeleteArray(&deleteArray_HMdcLineParam);
      instance.SetDestructor(&destruct_HMdcLineParam);
      instance.SetStreamerFunc(&streamer_HMdcLineParam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLineParam*)
   {
      return GenerateInitInstanceLocal((::HMdcLineParam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLineParam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcGetContainers_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HMdcGetContainers(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcGetContainers*)
   {
      ::HMdcGetContainers *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcGetContainers >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcGetContainers", ::HMdcGetContainers::Class_Version(), "././hmdcgetcontainers.h", 25,
                  typeid(::HMdcGetContainers), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcGetContainers::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcGetContainers) );
      instance.SetStreamerFunc(&streamer_HMdcGetContainers);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcGetContainers*)
   {
      return GenerateInitInstanceLocal((::HMdcGetContainers*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcGetContainers*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLayerCorrPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLayerCorrPar(void *p = 0);
   static void *newArray_HMdcLayerCorrPar(Long_t size, void *p);
   static void delete_HMdcLayerCorrPar(void *p);
   static void deleteArray_HMdcLayerCorrPar(void *p);
   static void destruct_HMdcLayerCorrPar(void *p);
   static void streamer_HMdcLayerCorrPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLayerCorrPar*)
   {
      ::HMdcLayerCorrPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLayerCorrPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLayerCorrPar", ::HMdcLayerCorrPar::Class_Version(), "././hmdclayercorrpar.h", 6,
                  typeid(::HMdcLayerCorrPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLayerCorrPar::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLayerCorrPar) );
      instance.SetNew(&new_HMdcLayerCorrPar);
      instance.SetNewArray(&newArray_HMdcLayerCorrPar);
      instance.SetDelete(&delete_HMdcLayerCorrPar);
      instance.SetDeleteArray(&deleteArray_HMdcLayerCorrPar);
      instance.SetDestructor(&destruct_HMdcLayerCorrPar);
      instance.SetStreamerFunc(&streamer_HMdcLayerCorrPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLayerCorrPar*)
   {
      return GenerateInitInstanceLocal((::HMdcLayerCorrPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLayerCorrPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcSizesCellsCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcSizesCellsCell(void *p = 0);
   static void *newArray_HMdcSizesCellsCell(Long_t size, void *p);
   static void delete_HMdcSizesCellsCell(void *p);
   static void deleteArray_HMdcSizesCellsCell(void *p);
   static void destruct_HMdcSizesCellsCell(void *p);
   static void streamer_HMdcSizesCellsCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcSizesCellsCell*)
   {
      ::HMdcSizesCellsCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcSizesCellsCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcSizesCellsCell", ::HMdcSizesCellsCell::Class_Version(), "././hmdcsizescells.h", 22,
                  typeid(::HMdcSizesCellsCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcSizesCellsCell::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcSizesCellsCell) );
      instance.SetNew(&new_HMdcSizesCellsCell);
      instance.SetNewArray(&newArray_HMdcSizesCellsCell);
      instance.SetDelete(&delete_HMdcSizesCellsCell);
      instance.SetDeleteArray(&deleteArray_HMdcSizesCellsCell);
      instance.SetDestructor(&destruct_HMdcSizesCellsCell);
      instance.SetStreamerFunc(&streamer_HMdcSizesCellsCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcSizesCellsCell*)
   {
      return GenerateInitInstanceLocal((::HMdcSizesCellsCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcSizesCellsCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcSizesCellsMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdcSizesCellsMod(void *p);
   static void deleteArray_HMdcSizesCellsMod(void *p);
   static void destruct_HMdcSizesCellsMod(void *p);
   static void streamer_HMdcSizesCellsMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcSizesCellsMod*)
   {
      ::HMdcSizesCellsMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcSizesCellsMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcSizesCellsMod", ::HMdcSizesCellsMod::Class_Version(), "././hmdcsizescells.h", 271,
                  typeid(::HMdcSizesCellsMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcSizesCellsMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcSizesCellsMod) );
      instance.SetDelete(&delete_HMdcSizesCellsMod);
      instance.SetDeleteArray(&deleteArray_HMdcSizesCellsMod);
      instance.SetDestructor(&destruct_HMdcSizesCellsMod);
      instance.SetStreamerFunc(&streamer_HMdcSizesCellsMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcSizesCellsMod*)
   {
      return GenerateInitInstanceLocal((::HMdcSizesCellsMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcSizesCellsMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcSizesCells_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HMdcSizesCells(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcSizesCells*)
   {
      ::HMdcSizesCells *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcSizesCells >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcSizesCells", ::HMdcSizesCells::Class_Version(), "././hmdcsizescells.h", 359,
                  typeid(::HMdcSizesCells), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcSizesCells::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcSizesCells) );
      instance.SetStreamerFunc(&streamer_HMdcSizesCells);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcSizesCells*)
   {
      return GenerateInitInstanceLocal((::HMdcSizesCells*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcSizesCells*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcSizesCellsLayer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcSizesCellsLayer(void *p = 0);
   static void *newArray_HMdcSizesCellsLayer(Long_t size, void *p);
   static void delete_HMdcSizesCellsLayer(void *p);
   static void deleteArray_HMdcSizesCellsLayer(void *p);
   static void destruct_HMdcSizesCellsLayer(void *p);
   static void streamer_HMdcSizesCellsLayer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcSizesCellsLayer*)
   {
      ::HMdcSizesCellsLayer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcSizesCellsLayer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcSizesCellsLayer", ::HMdcSizesCellsLayer::Class_Version(), "././hmdcsizescells.h", 67,
                  typeid(::HMdcSizesCellsLayer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcSizesCellsLayer::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcSizesCellsLayer) );
      instance.SetNew(&new_HMdcSizesCellsLayer);
      instance.SetNewArray(&newArray_HMdcSizesCellsLayer);
      instance.SetDelete(&delete_HMdcSizesCellsLayer);
      instance.SetDeleteArray(&deleteArray_HMdcSizesCellsLayer);
      instance.SetDestructor(&destruct_HMdcSizesCellsLayer);
      instance.SetStreamerFunc(&streamer_HMdcSizesCellsLayer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcSizesCellsLayer*)
   {
      return GenerateInitInstanceLocal((::HMdcSizesCellsLayer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcSizesCellsLayer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcSizesCellsSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdcSizesCellsSec(void *p);
   static void deleteArray_HMdcSizesCellsSec(void *p);
   static void destruct_HMdcSizesCellsSec(void *p);
   static void streamer_HMdcSizesCellsSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcSizesCellsSec*)
   {
      ::HMdcSizesCellsSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcSizesCellsSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcSizesCellsSec", ::HMdcSizesCellsSec::Class_Version(), "././hmdcsizescells.h", 320,
                  typeid(::HMdcSizesCellsSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcSizesCellsSec::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcSizesCellsSec) );
      instance.SetDelete(&delete_HMdcSizesCellsSec);
      instance.SetDeleteArray(&deleteArray_HMdcSizesCellsSec);
      instance.SetDestructor(&destruct_HMdcSizesCellsSec);
      instance.SetStreamerFunc(&streamer_HMdcSizesCellsSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcSizesCellsSec*)
   {
      return GenerateInitInstanceLocal((::HMdcSizesCellsSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcSizesCellsSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLayer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLayer(void *p = 0);
   static void *newArray_HMdcLayer(Long_t size, void *p);
   static void delete_HMdcLayer(void *p);
   static void deleteArray_HMdcLayer(void *p);
   static void destruct_HMdcLayer(void *p);
   static void streamer_HMdcLayer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLayer*)
   {
      ::HMdcLayer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLayer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLayer", ::HMdcLayer::Class_Version(), "././hmdclayer.h", 10,
                  typeid(::HMdcLayer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLayer::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLayer) );
      instance.SetNew(&new_HMdcLayer);
      instance.SetNewArray(&newArray_HMdcLayer);
      instance.SetDelete(&delete_HMdcLayer);
      instance.SetDeleteArray(&deleteArray_HMdcLayer);
      instance.SetDestructor(&destruct_HMdcLayer);
      instance.SetStreamerFunc(&streamer_HMdcLayer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLayer*)
   {
      return GenerateInitInstanceLocal((::HMdcLayer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLayer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcClFnStack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcClFnStack(void *p = 0);
   static void *newArray_HMdcClFnStack(Long_t size, void *p);
   static void delete_HMdcClFnStack(void *p);
   static void deleteArray_HMdcClFnStack(void *p);
   static void destruct_HMdcClFnStack(void *p);
   static void streamer_HMdcClFnStack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcClFnStack*)
   {
      ::HMdcClFnStack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcClFnStack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcClFnStack", ::HMdcClFnStack::Class_Version(), "././hmdcclfnstack.h", 6,
                  typeid(::HMdcClFnStack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcClFnStack::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcClFnStack) );
      instance.SetNew(&new_HMdcClFnStack);
      instance.SetNewArray(&newArray_HMdcClFnStack);
      instance.SetDelete(&delete_HMdcClFnStack);
      instance.SetDeleteArray(&deleteArray_HMdcClFnStack);
      instance.SetDestructor(&destruct_HMdcClFnStack);
      instance.SetStreamerFunc(&streamer_HMdcClFnStack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcClFnStack*)
   {
      return GenerateInitInstanceLocal((::HMdcClFnStack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcClFnStack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcClFnStacksArr_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcClFnStacksArr(void *p = 0);
   static void *newArray_HMdcClFnStacksArr(Long_t size, void *p);
   static void delete_HMdcClFnStacksArr(void *p);
   static void deleteArray_HMdcClFnStacksArr(void *p);
   static void destruct_HMdcClFnStacksArr(void *p);
   static void streamer_HMdcClFnStacksArr(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcClFnStacksArr*)
   {
      ::HMdcClFnStacksArr *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcClFnStacksArr >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcClFnStacksArr", ::HMdcClFnStacksArr::Class_Version(), "././hmdcclfnstack.h", 29,
                  typeid(::HMdcClFnStacksArr), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcClFnStacksArr::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcClFnStacksArr) );
      instance.SetNew(&new_HMdcClFnStacksArr);
      instance.SetNewArray(&newArray_HMdcClFnStacksArr);
      instance.SetDelete(&delete_HMdcClFnStacksArr);
      instance.SetDeleteArray(&deleteArray_HMdcClFnStacksArr);
      instance.SetDestructor(&destruct_HMdcClFnStacksArr);
      instance.SetStreamerFunc(&streamer_HMdcClFnStacksArr);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcClFnStacksArr*)
   {
      return GenerateInitInstanceLocal((::HMdcClFnStacksArr*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcClFnStacksArr*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTBArray_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HMdcTBArray(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTBArray*)
   {
      ::HMdcTBArray *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTBArray >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTBArray", ::HMdcTBArray::Class_Version(), "././hmdctbarray.h", 6,
                  typeid(::HMdcTBArray), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTBArray::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTBArray) );
      instance.SetStreamerFunc(&streamer_HMdcTBArray);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTBArray*)
   {
      return GenerateInitInstanceLocal((::HMdcTBArray*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTBArray*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcBArray_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HMdcBArray(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcBArray*)
   {
      ::HMdcBArray *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcBArray >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcBArray", ::HMdcBArray::Class_Version(), "././hmdctbarray.h", 44,
                  typeid(::HMdcBArray), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcBArray::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcBArray) );
      instance.SetStreamerFunc(&streamer_HMdcBArray);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcBArray*)
   {
      return GenerateInitInstanceLocal((::HMdcBArray*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcBArray*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcList12GroupCells_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcList12GroupCells(void *p = 0);
   static void *newArray_HMdcList12GroupCells(Long_t size, void *p);
   static void delete_HMdcList12GroupCells(void *p);
   static void deleteArray_HMdcList12GroupCells(void *p);
   static void destruct_HMdcList12GroupCells(void *p);
   static void streamer_HMdcList12GroupCells(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcList12GroupCells*)
   {
      ::HMdcList12GroupCells *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcList12GroupCells >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcList12GroupCells", ::HMdcList12GroupCells::Class_Version(), "././hmdclistgroupcells.h", 9,
                  typeid(::HMdcList12GroupCells), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcList12GroupCells::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcList12GroupCells) );
      instance.SetNew(&new_HMdcList12GroupCells);
      instance.SetNewArray(&newArray_HMdcList12GroupCells);
      instance.SetDelete(&delete_HMdcList12GroupCells);
      instance.SetDeleteArray(&deleteArray_HMdcList12GroupCells);
      instance.SetDestructor(&destruct_HMdcList12GroupCells);
      instance.SetStreamerFunc(&streamer_HMdcList12GroupCells);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcList12GroupCells*)
   {
      return GenerateInitInstanceLocal((::HMdcList12GroupCells*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcList12GroupCells*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcList24GroupCells_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcList24GroupCells(void *p = 0);
   static void *newArray_HMdcList24GroupCells(Long_t size, void *p);
   static void delete_HMdcList24GroupCells(void *p);
   static void deleteArray_HMdcList24GroupCells(void *p);
   static void destruct_HMdcList24GroupCells(void *p);
   static void streamer_HMdcList24GroupCells(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcList24GroupCells*)
   {
      ::HMdcList24GroupCells *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcList24GroupCells >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcList24GroupCells", ::HMdcList24GroupCells::Class_Version(), "././hmdclistgroupcells.h", 311,
                  typeid(::HMdcList24GroupCells), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcList24GroupCells::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcList24GroupCells) );
      instance.SetNew(&new_HMdcList24GroupCells);
      instance.SetNewArray(&newArray_HMdcList24GroupCells);
      instance.SetDelete(&delete_HMdcList24GroupCells);
      instance.SetDeleteArray(&deleteArray_HMdcList24GroupCells);
      instance.SetDestructor(&destruct_HMdcList24GroupCells);
      instance.SetStreamerFunc(&streamer_HMdcList24GroupCells);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcList24GroupCells*)
   {
      return GenerateInitInstanceLocal((::HMdcList24GroupCells*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcList24GroupCells*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcClus_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcClus(void *p = 0);
   static void *newArray_HMdcClus(Long_t size, void *p);
   static void delete_HMdcClus(void *p);
   static void deleteArray_HMdcClus(void *p);
   static void destruct_HMdcClus(void *p);
   static void streamer_HMdcClus(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcClus*)
   {
      ::HMdcClus *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcClus >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcClus", ::HMdcClus::Class_Version(), "././hmdcclus.h", 10,
                  typeid(::HMdcClus), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcClus::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcClus) );
      instance.SetNew(&new_HMdcClus);
      instance.SetNewArray(&newArray_HMdcClus);
      instance.SetDelete(&delete_HMdcClus);
      instance.SetDeleteArray(&deleteArray_HMdcClus);
      instance.SetDestructor(&destruct_HMdcClus);
      instance.SetStreamerFunc(&streamer_HMdcClus);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcClus*)
   {
      return GenerateInitInstanceLocal((::HMdcClus*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcClus*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcClusSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcClusSim(void *p = 0);
   static void *newArray_HMdcClusSim(Long_t size, void *p);
   static void delete_HMdcClusSim(void *p);
   static void deleteArray_HMdcClusSim(void *p);
   static void destruct_HMdcClusSim(void *p);
   static void streamer_HMdcClusSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcClusSim*)
   {
      ::HMdcClusSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcClusSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcClusSim", ::HMdcClusSim::Class_Version(), "././hmdcclussim.h", 6,
                  typeid(::HMdcClusSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcClusSim::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcClusSim) );
      instance.SetNew(&new_HMdcClusSim);
      instance.SetNewArray(&newArray_HMdcClusSim);
      instance.SetDelete(&delete_HMdcClusSim);
      instance.SetDeleteArray(&deleteArray_HMdcClusSim);
      instance.SetDestructor(&destruct_HMdcClusSim);
      instance.SetStreamerFunc(&streamer_HMdcClusSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcClusSim*)
   {
      return GenerateInitInstanceLocal((::HMdcClusSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcClusSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcSecListCells_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcSecListCells(void *p = 0);
   static void *newArray_HMdcSecListCells(Long_t size, void *p);
   static void delete_HMdcSecListCells(void *p);
   static void deleteArray_HMdcSecListCells(void *p);
   static void destruct_HMdcSecListCells(void *p);
   static void streamer_HMdcSecListCells(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcSecListCells*)
   {
      ::HMdcSecListCells *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcSecListCells >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcSecListCells", ::HMdcSecListCells::Class_Version(), "././hmdclistcells.h", 424,
                  typeid(::HMdcSecListCells), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcSecListCells::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcSecListCells) );
      instance.SetNew(&new_HMdcSecListCells);
      instance.SetNewArray(&newArray_HMdcSecListCells);
      instance.SetDelete(&delete_HMdcSecListCells);
      instance.SetDeleteArray(&deleteArray_HMdcSecListCells);
      instance.SetDestructor(&destruct_HMdcSecListCells);
      instance.SetStreamerFunc(&streamer_HMdcSecListCells);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcSecListCells*)
   {
      return GenerateInitInstanceLocal((::HMdcSecListCells*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcSecListCells*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCluster(void *p = 0);
   static void *newArray_HMdcCluster(Long_t size, void *p);
   static void delete_HMdcCluster(void *p);
   static void deleteArray_HMdcCluster(void *p);
   static void destruct_HMdcCluster(void *p);
   static void streamer_HMdcCluster(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCluster*)
   {
      ::HMdcCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCluster", ::HMdcCluster::Class_Version(), "././hmdccluster.h", 10,
                  typeid(::HMdcCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCluster::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCluster) );
      instance.SetNew(&new_HMdcCluster);
      instance.SetNewArray(&newArray_HMdcCluster);
      instance.SetDelete(&delete_HMdcCluster);
      instance.SetDeleteArray(&deleteArray_HMdcCluster);
      instance.SetDestructor(&destruct_HMdcCluster);
      instance.SetStreamerFunc(&streamer_HMdcCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCluster*)
   {
      return GenerateInitInstanceLocal((::HMdcCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcClustersArrs_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcClustersArrs(void *p = 0);
   static void *newArray_HMdcClustersArrs(Long_t size, void *p);
   static void delete_HMdcClustersArrs(void *p);
   static void deleteArray_HMdcClustersArrs(void *p);
   static void destruct_HMdcClustersArrs(void *p);
   static void streamer_HMdcClustersArrs(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcClustersArrs*)
   {
      ::HMdcClustersArrs *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcClustersArrs >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcClustersArrs", ::HMdcClustersArrs::Class_Version(), "././hmdccluster.h", 146,
                  typeid(::HMdcClustersArrs), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcClustersArrs::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcClustersArrs) );
      instance.SetNew(&new_HMdcClustersArrs);
      instance.SetNewArray(&newArray_HMdcClustersArrs);
      instance.SetDelete(&delete_HMdcClustersArrs);
      instance.SetDeleteArray(&deleteArray_HMdcClustersArrs);
      instance.SetDestructor(&destruct_HMdcClustersArrs);
      instance.SetStreamerFunc(&streamer_HMdcClustersArrs);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcClustersArrs*)
   {
      return GenerateInitInstanceLocal((::HMdcClustersArrs*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcClustersArrs*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcDriftTimeParSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcDriftTimeParSec(void *p = 0);
   static void *newArray_HMdcDriftTimeParSec(Long_t size, void *p);
   static void delete_HMdcDriftTimeParSec(void *p);
   static void deleteArray_HMdcDriftTimeParSec(void *p);
   static void destruct_HMdcDriftTimeParSec(void *p);
   static void streamer_HMdcDriftTimeParSec(TBuffer &buf, void *obj);
   static Long64_t merge_HMdcDriftTimeParSec(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcDriftTimeParSec*)
   {
      ::HMdcDriftTimeParSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcDriftTimeParSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcDriftTimeParSec", ::HMdcDriftTimeParSec::Class_Version(), "././hmdcdrifttimepar.h", 129,
                  typeid(::HMdcDriftTimeParSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcDriftTimeParSec::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcDriftTimeParSec) );
      instance.SetNew(&new_HMdcDriftTimeParSec);
      instance.SetNewArray(&newArray_HMdcDriftTimeParSec);
      instance.SetDelete(&delete_HMdcDriftTimeParSec);
      instance.SetDeleteArray(&deleteArray_HMdcDriftTimeParSec);
      instance.SetDestructor(&destruct_HMdcDriftTimeParSec);
      instance.SetStreamerFunc(&streamer_HMdcDriftTimeParSec);
      instance.SetMerge(&merge_HMdcDriftTimeParSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcDriftTimeParSec*)
   {
      return GenerateInitInstanceLocal((::HMdcDriftTimeParSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcDriftTimeParSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLayListCells_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLayListCells(void *p = 0);
   static void *newArray_HMdcLayListCells(Long_t size, void *p);
   static void delete_HMdcLayListCells(void *p);
   static void deleteArray_HMdcLayListCells(void *p);
   static void destruct_HMdcLayListCells(void *p);
   static void streamer_HMdcLayListCells(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLayListCells*)
   {
      ::HMdcLayListCells *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLayListCells >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLayListCells", ::HMdcLayListCells::Class_Version(), "././hmdclistcells.h", 12,
                  typeid(::HMdcLayListCells), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLayListCells::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLayListCells) );
      instance.SetNew(&new_HMdcLayListCells);
      instance.SetNewArray(&newArray_HMdcLayListCells);
      instance.SetDelete(&delete_HMdcLayListCells);
      instance.SetDeleteArray(&deleteArray_HMdcLayListCells);
      instance.SetDestructor(&destruct_HMdcLayListCells);
      instance.SetStreamerFunc(&streamer_HMdcLayListCells);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLayListCells*)
   {
      return GenerateInitInstanceLocal((::HMdcLayListCells*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLayListCells*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookUpTbCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLookUpTbCell(void *p = 0);
   static void *newArray_HMdcLookUpTbCell(Long_t size, void *p);
   static void delete_HMdcLookUpTbCell(void *p);
   static void deleteArray_HMdcLookUpTbCell(void *p);
   static void destruct_HMdcLookUpTbCell(void *p);
   static void streamer_HMdcLookUpTbCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookUpTbCell*)
   {
      ::HMdcLookUpTbCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookUpTbCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookUpTbCell", ::HMdcLookUpTbCell::Class_Version(), "././hmdclookuptb.h", 30,
                  typeid(::HMdcLookUpTbCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookUpTbCell::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLookUpTbCell) );
      instance.SetNew(&new_HMdcLookUpTbCell);
      instance.SetNewArray(&newArray_HMdcLookUpTbCell);
      instance.SetDelete(&delete_HMdcLookUpTbCell);
      instance.SetDeleteArray(&deleteArray_HMdcLookUpTbCell);
      instance.SetDestructor(&destruct_HMdcLookUpTbCell);
      instance.SetStreamerFunc(&streamer_HMdcLookUpTbCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookUpTbCell*)
   {
      return GenerateInitInstanceLocal((::HMdcLookUpTbCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookUpTbCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookUpTbLayer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdcLookUpTbLayer(void *p);
   static void deleteArray_HMdcLookUpTbLayer(void *p);
   static void destruct_HMdcLookUpTbLayer(void *p);
   static void streamer_HMdcLookUpTbLayer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookUpTbLayer*)
   {
      ::HMdcLookUpTbLayer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookUpTbLayer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookUpTbLayer", ::HMdcLookUpTbLayer::Class_Version(), "././hmdclookuptb.h", 73,
                  typeid(::HMdcLookUpTbLayer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookUpTbLayer::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLookUpTbLayer) );
      instance.SetDelete(&delete_HMdcLookUpTbLayer);
      instance.SetDeleteArray(&deleteArray_HMdcLookUpTbLayer);
      instance.SetDestructor(&destruct_HMdcLookUpTbLayer);
      instance.SetStreamerFunc(&streamer_HMdcLookUpTbLayer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookUpTbLayer*)
   {
      return GenerateInitInstanceLocal((::HMdcLookUpTbLayer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookUpTbLayer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookUpTbMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdcLookUpTbMod(void *p);
   static void deleteArray_HMdcLookUpTbMod(void *p);
   static void destruct_HMdcLookUpTbMod(void *p);
   static void streamer_HMdcLookUpTbMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookUpTbMod*)
   {
      ::HMdcLookUpTbMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookUpTbMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookUpTbMod", ::HMdcLookUpTbMod::Class_Version(), "././hmdclookuptb.h", 170,
                  typeid(::HMdcLookUpTbMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookUpTbMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLookUpTbMod) );
      instance.SetDelete(&delete_HMdcLookUpTbMod);
      instance.SetDeleteArray(&deleteArray_HMdcLookUpTbMod);
      instance.SetDestructor(&destruct_HMdcLookUpTbMod);
      instance.SetStreamerFunc(&streamer_HMdcLookUpTbMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookUpTbMod*)
   {
      return GenerateInitInstanceLocal((::HMdcLookUpTbMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookUpTbMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookUpTbSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HMdcLookUpTbSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookUpTbSec*)
   {
      ::HMdcLookUpTbSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookUpTbSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookUpTbSec", ::HMdcLookUpTbSec::Class_Version(), "././hmdclookuptb.h", 186,
                  typeid(::HMdcLookUpTbSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookUpTbSec::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLookUpTbSec) );
      instance.SetStreamerFunc(&streamer_HMdcLookUpTbSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookUpTbSec*)
   {
      return GenerateInitInstanceLocal((::HMdcLookUpTbSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookUpTbSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookUpTb_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HMdcLookUpTb(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookUpTb*)
   {
      ::HMdcLookUpTb *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookUpTb >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookUpTb", ::HMdcLookUpTb::Class_Version(), "././hmdclookuptb.h", 471,
                  typeid(::HMdcLookUpTb), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookUpTb::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLookUpTb) );
      instance.SetStreamerFunc(&streamer_HMdcLookUpTb);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookUpTb*)
   {
      return GenerateInitInstanceLocal((::HMdcLookUpTb*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookUpTb*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcModListCells_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcModListCells(void *p = 0);
   static void *newArray_HMdcModListCells(Long_t size, void *p);
   static void delete_HMdcModListCells(void *p);
   static void deleteArray_HMdcModListCells(void *p);
   static void destruct_HMdcModListCells(void *p);
   static void streamer_HMdcModListCells(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcModListCells*)
   {
      ::HMdcModListCells *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcModListCells >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcModListCells", ::HMdcModListCells::Class_Version(), "././hmdclistcells.h", 196,
                  typeid(::HMdcModListCells), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcModListCells::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcModListCells) );
      instance.SetNew(&new_HMdcModListCells);
      instance.SetNewArray(&newArray_HMdcModListCells);
      instance.SetDelete(&delete_HMdcModListCells);
      instance.SetDeleteArray(&deleteArray_HMdcModListCells);
      instance.SetDestructor(&destruct_HMdcModListCells);
      instance.SetStreamerFunc(&streamer_HMdcModListCells);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcModListCells*)
   {
      return GenerateInitInstanceLocal((::HMdcModListCells*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcModListCells*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcEvntListCells_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcEvntListCells(void *p = 0);
   static void *newArray_HMdcEvntListCells(Long_t size, void *p);
   static void delete_HMdcEvntListCells(void *p);
   static void deleteArray_HMdcEvntListCells(void *p);
   static void destruct_HMdcEvntListCells(void *p);
   static void streamer_HMdcEvntListCells(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcEvntListCells*)
   {
      ::HMdcEvntListCells *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcEvntListCells >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcEvntListCells", ::HMdcEvntListCells::Class_Version(), "././hmdclistcells.h", 692,
                  typeid(::HMdcEvntListCells), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcEvntListCells::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcEvntListCells) );
      instance.SetNew(&new_HMdcEvntListCells);
      instance.SetNewArray(&newArray_HMdcEvntListCells);
      instance.SetDelete(&delete_HMdcEvntListCells);
      instance.SetDeleteArray(&deleteArray_HMdcEvntListCells);
      instance.SetDestructor(&destruct_HMdcEvntListCells);
      instance.SetStreamerFunc(&streamer_HMdcEvntListCells);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcEvntListCells*)
   {
      return GenerateInitInstanceLocal((::HMdcEvntListCells*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcEvntListCells*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcKickPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcKickPlane(void *p = 0);
   static void *newArray_HMdcKickPlane(Long_t size, void *p);
   static void delete_HMdcKickPlane(void *p);
   static void deleteArray_HMdcKickPlane(void *p);
   static void destruct_HMdcKickPlane(void *p);
   static void streamer_HMdcKickPlane(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcKickPlane*)
   {
      ::HMdcKickPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcKickPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcKickPlane", ::HMdcKickPlane::Class_Version(), "././hmdckickplane.h", 11,
                  typeid(::HMdcKickPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcKickPlane::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcKickPlane) );
      instance.SetNew(&new_HMdcKickPlane);
      instance.SetNewArray(&newArray_HMdcKickPlane);
      instance.SetDelete(&delete_HMdcKickPlane);
      instance.SetDeleteArray(&deleteArray_HMdcKickPlane);
      instance.SetDestructor(&destruct_HMdcKickPlane);
      instance.SetStreamerFunc(&streamer_HMdcKickPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcKickPlane*)
   {
      return GenerateInitInstanceLocal((::HMdcKickPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcKickPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcClusMetaMatch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcClusMetaMatch(void *p = 0);
   static void *newArray_HMdcClusMetaMatch(Long_t size, void *p);
   static void delete_HMdcClusMetaMatch(void *p);
   static void deleteArray_HMdcClusMetaMatch(void *p);
   static void destruct_HMdcClusMetaMatch(void *p);
   static void streamer_HMdcClusMetaMatch(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcClusMetaMatch*)
   {
      ::HMdcClusMetaMatch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcClusMetaMatch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcClusMetaMatch", ::HMdcClusMetaMatch::Class_Version(), "././hmdcclusmetamatch.h", 16,
                  typeid(::HMdcClusMetaMatch), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcClusMetaMatch::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcClusMetaMatch) );
      instance.SetNew(&new_HMdcClusMetaMatch);
      instance.SetNewArray(&newArray_HMdcClusMetaMatch);
      instance.SetDelete(&delete_HMdcClusMetaMatch);
      instance.SetDeleteArray(&deleteArray_HMdcClusMetaMatch);
      instance.SetDestructor(&destruct_HMdcClusMetaMatch);
      instance.SetStreamerFunc(&streamer_HMdcClusMetaMatch);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcClusMetaMatch*)
   {
      return GenerateInitInstanceLocal((::HMdcClusMetaMatch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcClusMetaMatch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackParam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrackParam(void *p = 0);
   static void *newArray_HMdcTrackParam(Long_t size, void *p);
   static void delete_HMdcTrackParam(void *p);
   static void deleteArray_HMdcTrackParam(void *p);
   static void destruct_HMdcTrackParam(void *p);
   static void streamer_HMdcTrackParam(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackParam*)
   {
      ::HMdcTrackParam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackParam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackParam", ::HMdcTrackParam::Class_Version(), "././hmdctrackparam.h", 11,
                  typeid(::HMdcTrackParam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackParam::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackParam) );
      instance.SetNew(&new_HMdcTrackParam);
      instance.SetNewArray(&newArray_HMdcTrackParam);
      instance.SetDelete(&delete_HMdcTrackParam);
      instance.SetDeleteArray(&deleteArray_HMdcTrackParam);
      instance.SetDestructor(&destruct_HMdcTrackParam);
      instance.SetStreamerFunc(&streamer_HMdcTrackParam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackParam*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackParam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackParam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcKickCor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcKickCor(void *p = 0);
   static void *newArray_HMdcKickCor(Long_t size, void *p);
   static void delete_HMdcKickCor(void *p);
   static void deleteArray_HMdcKickCor(void *p);
   static void destruct_HMdcKickCor(void *p);
   static void streamer_HMdcKickCor(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcKickCor*)
   {
      ::HMdcKickCor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcKickCor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcKickCor", ::HMdcKickCor::Class_Version(), "././hmdckickcor.h", 7,
                  typeid(::HMdcKickCor), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcKickCor::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcKickCor) );
      instance.SetNew(&new_HMdcKickCor);
      instance.SetNewArray(&newArray_HMdcKickCor);
      instance.SetDelete(&delete_HMdcKickCor);
      instance.SetDeleteArray(&deleteArray_HMdcKickCor);
      instance.SetDestructor(&destruct_HMdcKickCor);
      instance.SetStreamerFunc(&streamer_HMdcKickCor);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcKickCor*)
   {
      return GenerateInitInstanceLocal((::HMdcKickCor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcKickCor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcProjPlot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdcProjPlot(void *p);
   static void deleteArray_HMdcProjPlot(void *p);
   static void destruct_HMdcProjPlot(void *p);
   static void streamer_HMdcProjPlot(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcProjPlot*)
   {
      ::HMdcProjPlot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcProjPlot >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcProjPlot", ::HMdcProjPlot::Class_Version(), "././hmdc34clfinder.h", 33,
                  typeid(::HMdcProjPlot), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcProjPlot::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcProjPlot) );
      instance.SetDelete(&delete_HMdcProjPlot);
      instance.SetDeleteArray(&deleteArray_HMdcProjPlot);
      instance.SetDestructor(&destruct_HMdcProjPlot);
      instance.SetStreamerFunc(&streamer_HMdcProjPlot);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcProjPlot*)
   {
      return GenerateInitInstanceLocal((::HMdcProjPlot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcProjPlot*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdc34ClFinderLayer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdc34ClFinderLayer(void *p);
   static void deleteArray_HMdc34ClFinderLayer(void *p);
   static void destruct_HMdc34ClFinderLayer(void *p);
   static void streamer_HMdc34ClFinderLayer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdc34ClFinderLayer*)
   {
      ::HMdc34ClFinderLayer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdc34ClFinderLayer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdc34ClFinderLayer", ::HMdc34ClFinderLayer::Class_Version(), "././hmdc34clfinder.h", 93,
                  typeid(::HMdc34ClFinderLayer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdc34ClFinderLayer::Dictionary, isa_proxy, 0,
                  sizeof(::HMdc34ClFinderLayer) );
      instance.SetDelete(&delete_HMdc34ClFinderLayer);
      instance.SetDeleteArray(&deleteArray_HMdc34ClFinderLayer);
      instance.SetDestructor(&destruct_HMdc34ClFinderLayer);
      instance.SetStreamerFunc(&streamer_HMdc34ClFinderLayer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdc34ClFinderLayer*)
   {
      return GenerateInitInstanceLocal((::HMdc34ClFinderLayer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdc34ClFinderLayer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdc34ClFinderMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdc34ClFinderMod(void *p);
   static void deleteArray_HMdc34ClFinderMod(void *p);
   static void destruct_HMdc34ClFinderMod(void *p);
   static void streamer_HMdc34ClFinderMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdc34ClFinderMod*)
   {
      ::HMdc34ClFinderMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdc34ClFinderMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdc34ClFinderMod", ::HMdc34ClFinderMod::Class_Version(), "././hmdc34clfinder.h", 150,
                  typeid(::HMdc34ClFinderMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdc34ClFinderMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdc34ClFinderMod) );
      instance.SetDelete(&delete_HMdc34ClFinderMod);
      instance.SetDeleteArray(&deleteArray_HMdc34ClFinderMod);
      instance.SetDestructor(&destruct_HMdc34ClFinderMod);
      instance.SetStreamerFunc(&streamer_HMdc34ClFinderMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdc34ClFinderMod*)
   {
      return GenerateInitInstanceLocal((::HMdc34ClFinderMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdc34ClFinderMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdc34ClFinderSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HMdc34ClFinderSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdc34ClFinderSec*)
   {
      ::HMdc34ClFinderSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdc34ClFinderSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdc34ClFinderSec", ::HMdc34ClFinderSec::Class_Version(), "././hmdc34clfinder.h", 166,
                  typeid(::HMdc34ClFinderSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdc34ClFinderSec::Dictionary, isa_proxy, 0,
                  sizeof(::HMdc34ClFinderSec) );
      instance.SetStreamerFunc(&streamer_HMdc34ClFinderSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdc34ClFinderSec*)
   {
      return GenerateInitInstanceLocal((::HMdc34ClFinderSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdc34ClFinderSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdc34ClFinder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HMdc34ClFinder(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdc34ClFinder*)
   {
      ::HMdc34ClFinder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdc34ClFinder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdc34ClFinder", ::HMdc34ClFinder::Class_Version(), "././hmdc34clfinder.h", 372,
                  typeid(::HMdc34ClFinder), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdc34ClFinder::Dictionary, isa_proxy, 0,
                  sizeof(::HMdc34ClFinder) );
      instance.SetStreamerFunc(&streamer_HMdc34ClFinder);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdc34ClFinder*)
   {
      return GenerateInitInstanceLocal((::HMdc34ClFinder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdc34ClFinder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcEff_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcEff(void *p = 0);
   static void *newArray_HMdcEff(Long_t size, void *p);
   static void delete_HMdcEff(void *p);
   static void deleteArray_HMdcEff(void *p);
   static void destruct_HMdcEff(void *p);
   static void streamer_HMdcEff(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcEff*)
   {
      ::HMdcEff *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcEff >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcEff", ::HMdcEff::Class_Version(), "././hmdcefficiency.h", 28,
                  typeid(::HMdcEff), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcEff::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcEff) );
      instance.SetNew(&new_HMdcEff);
      instance.SetNewArray(&newArray_HMdcEff);
      instance.SetDelete(&delete_HMdcEff);
      instance.SetDeleteArray(&deleteArray_HMdcEff);
      instance.SetDestructor(&destruct_HMdcEff);
      instance.SetStreamerFunc(&streamer_HMdcEff);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcEff*)
   {
      return GenerateInitInstanceLocal((::HMdcEff*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcEff*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcEffMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcEffMod(void *p = 0);
   static void *newArray_HMdcEffMod(Long_t size, void *p);
   static void delete_HMdcEffMod(void *p);
   static void deleteArray_HMdcEffMod(void *p);
   static void destruct_HMdcEffMod(void *p);
   static void streamer_HMdcEffMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcEffMod*)
   {
      ::HMdcEffMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcEffMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcEffMod", ::HMdcEffMod::Class_Version(), "././hmdcefficiency.h", 104,
                  typeid(::HMdcEffMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcEffMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcEffMod) );
      instance.SetNew(&new_HMdcEffMod);
      instance.SetNewArray(&newArray_HMdcEffMod);
      instance.SetDelete(&delete_HMdcEffMod);
      instance.SetDeleteArray(&deleteArray_HMdcEffMod);
      instance.SetDestructor(&destruct_HMdcEffMod);
      instance.SetStreamerFunc(&streamer_HMdcEffMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcEffMod*)
   {
      return GenerateInitInstanceLocal((::HMdcEffMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcEffMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcEfficiencyLayer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcEfficiencyLayer(void *p = 0);
   static void *newArray_HMdcEfficiencyLayer(Long_t size, void *p);
   static void delete_HMdcEfficiencyLayer(void *p);
   static void deleteArray_HMdcEfficiencyLayer(void *p);
   static void destruct_HMdcEfficiencyLayer(void *p);
   static void streamer_HMdcEfficiencyLayer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcEfficiencyLayer*)
   {
      ::HMdcEfficiencyLayer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcEfficiencyLayer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcEfficiencyLayer", ::HMdcEfficiencyLayer::Class_Version(), "././hmdcefficiency.h", 136,
                  typeid(::HMdcEfficiencyLayer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcEfficiencyLayer::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcEfficiencyLayer) );
      instance.SetNew(&new_HMdcEfficiencyLayer);
      instance.SetNewArray(&newArray_HMdcEfficiencyLayer);
      instance.SetDelete(&delete_HMdcEfficiencyLayer);
      instance.SetDeleteArray(&deleteArray_HMdcEfficiencyLayer);
      instance.SetDestructor(&destruct_HMdcEfficiencyLayer);
      instance.SetStreamerFunc(&streamer_HMdcEfficiencyLayer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcEfficiencyLayer*)
   {
      return GenerateInitInstanceLocal((::HMdcEfficiencyLayer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcEfficiencyLayer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcEfficiencyMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdcEfficiencyMod(void *p);
   static void deleteArray_HMdcEfficiencyMod(void *p);
   static void destruct_HMdcEfficiencyMod(void *p);
   static void streamer_HMdcEfficiencyMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcEfficiencyMod*)
   {
      ::HMdcEfficiencyMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcEfficiencyMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcEfficiencyMod", ::HMdcEfficiencyMod::Class_Version(), "././hmdcefficiency.h", 245,
                  typeid(::HMdcEfficiencyMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcEfficiencyMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcEfficiencyMod) );
      instance.SetDelete(&delete_HMdcEfficiencyMod);
      instance.SetDeleteArray(&deleteArray_HMdcEfficiencyMod);
      instance.SetDestructor(&destruct_HMdcEfficiencyMod);
      instance.SetStreamerFunc(&streamer_HMdcEfficiencyMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcEfficiencyMod*)
   {
      return GenerateInitInstanceLocal((::HMdcEfficiencyMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcEfficiencyMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcEfficiencySec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdcEfficiencySec(void *p);
   static void deleteArray_HMdcEfficiencySec(void *p);
   static void destruct_HMdcEfficiencySec(void *p);
   static void streamer_HMdcEfficiencySec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcEfficiencySec*)
   {
      ::HMdcEfficiencySec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcEfficiencySec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcEfficiencySec", ::HMdcEfficiencySec::Class_Version(), "././hmdcefficiency.h", 364,
                  typeid(::HMdcEfficiencySec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcEfficiencySec::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcEfficiencySec) );
      instance.SetDelete(&delete_HMdcEfficiencySec);
      instance.SetDeleteArray(&deleteArray_HMdcEfficiencySec);
      instance.SetDestructor(&destruct_HMdcEfficiencySec);
      instance.SetStreamerFunc(&streamer_HMdcEfficiencySec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcEfficiencySec*)
   {
      return GenerateInitInstanceLocal((::HMdcEfficiencySec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcEfficiencySec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcEfficiency_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcEfficiency(void *p = 0);
   static void *newArray_HMdcEfficiency(Long_t size, void *p);
   static void delete_HMdcEfficiency(void *p);
   static void deleteArray_HMdcEfficiency(void *p);
   static void destruct_HMdcEfficiency(void *p);
   static void streamer_HMdcEfficiency(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcEfficiency*)
   {
      ::HMdcEfficiency *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcEfficiency >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcEfficiency", ::HMdcEfficiency::Class_Version(), "././hmdcefficiency.h", 399,
                  typeid(::HMdcEfficiency), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcEfficiency::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcEfficiency) );
      instance.SetNew(&new_HMdcEfficiency);
      instance.SetNewArray(&newArray_HMdcEfficiency);
      instance.SetDelete(&delete_HMdcEfficiency);
      instance.SetDeleteArray(&deleteArray_HMdcEfficiency);
      instance.SetDestructor(&destruct_HMdcEfficiency);
      instance.SetStreamerFunc(&streamer_HMdcEfficiency);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcEfficiency*)
   {
      return GenerateInitInstanceLocal((::HMdcEfficiency*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcEfficiency*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcGeantEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcGeantEvent(void *p = 0);
   static void *newArray_HMdcGeantEvent(Long_t size, void *p);
   static void delete_HMdcGeantEvent(void *p);
   static void deleteArray_HMdcGeantEvent(void *p);
   static void destruct_HMdcGeantEvent(void *p);
   static void streamer_HMdcGeantEvent(TBuffer &buf, void *obj);
   static Long64_t merge_HMdcGeantEvent(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcGeantEvent*)
   {
      ::HMdcGeantEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcGeantEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcGeantEvent", ::HMdcGeantEvent::Class_Version(), "././hmdcgeanttrack.h", 310,
                  typeid(::HMdcGeantEvent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcGeantEvent::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcGeantEvent) );
      instance.SetNew(&new_HMdcGeantEvent);
      instance.SetNewArray(&newArray_HMdcGeantEvent);
      instance.SetDelete(&delete_HMdcGeantEvent);
      instance.SetDeleteArray(&deleteArray_HMdcGeantEvent);
      instance.SetDestructor(&destruct_HMdcGeantEvent);
      instance.SetStreamerFunc(&streamer_HMdcGeantEvent);
      instance.SetMerge(&merge_HMdcGeantEvent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcGeantEvent*)
   {
      return GenerateInitInstanceLocal((::HMdcGeantEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcGeantEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackFinder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrackFinder(void *p = 0);
   static void *newArray_HMdcTrackFinder(Long_t size, void *p);
   static void delete_HMdcTrackFinder(void *p);
   static void deleteArray_HMdcTrackFinder(void *p);
   static void destruct_HMdcTrackFinder(void *p);
   static void streamer_HMdcTrackFinder(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackFinder*)
   {
      ::HMdcTrackFinder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackFinder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackFinder", ::HMdcTrackFinder::Class_Version(), "././hmdctrackfinder.h", 16,
                  typeid(::HMdcTrackFinder), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackFinder::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackFinder) );
      instance.SetNew(&new_HMdcTrackFinder);
      instance.SetNewArray(&newArray_HMdcTrackFinder);
      instance.SetDelete(&delete_HMdcTrackFinder);
      instance.SetDeleteArray(&deleteArray_HMdcTrackFinder);
      instance.SetDestructor(&destruct_HMdcTrackFinder);
      instance.SetStreamerFunc(&streamer_HMdcTrackFinder);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackFinder*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackFinder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackFinder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcClusterToHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcClusterToHit(void *p = 0);
   static void *newArray_HMdcClusterToHit(Long_t size, void *p);
   static void delete_HMdcClusterToHit(void *p);
   static void deleteArray_HMdcClusterToHit(void *p);
   static void destruct_HMdcClusterToHit(void *p);
   static void streamer_HMdcClusterToHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcClusterToHit*)
   {
      ::HMdcClusterToHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcClusterToHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcClusterToHit", ::HMdcClusterToHit::Class_Version(), "././hmdcclustertohit.h", 20,
                  typeid(::HMdcClusterToHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcClusterToHit::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcClusterToHit) );
      instance.SetNew(&new_HMdcClusterToHit);
      instance.SetNewArray(&newArray_HMdcClusterToHit);
      instance.SetDelete(&delete_HMdcClusterToHit);
      instance.SetDeleteArray(&deleteArray_HMdcClusterToHit);
      instance.SetDestructor(&destruct_HMdcClusterToHit);
      instance.SetStreamerFunc(&streamer_HMdcClusterToHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcClusterToHit*)
   {
      return GenerateInitInstanceLocal((::HMdcClusterToHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcClusterToHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdc12Fit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdc12Fit(void *p = 0);
   static void *newArray_HMdc12Fit(Long_t size, void *p);
   static void delete_HMdc12Fit(void *p);
   static void deleteArray_HMdc12Fit(void *p);
   static void destruct_HMdc12Fit(void *p);
   static void streamer_HMdc12Fit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdc12Fit*)
   {
      ::HMdc12Fit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdc12Fit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdc12Fit", ::HMdc12Fit::Class_Version(), "././hmdc12fit.h", 47,
                  typeid(::HMdc12Fit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdc12Fit::Dictionary, isa_proxy, 0,
                  sizeof(::HMdc12Fit) );
      instance.SetNew(&new_HMdc12Fit);
      instance.SetNewArray(&newArray_HMdc12Fit);
      instance.SetDelete(&delete_HMdc12Fit);
      instance.SetDeleteArray(&deleteArray_HMdc12Fit);
      instance.SetDestructor(&destruct_HMdc12Fit);
      instance.SetStreamerFunc(&streamer_HMdc12Fit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdc12Fit*)
   {
      return GenerateInitInstanceLocal((::HMdc12Fit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdc12Fit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcIdealTracking_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcIdealTracking(void *p = 0);
   static void *newArray_HMdcIdealTracking(Long_t size, void *p);
   static void delete_HMdcIdealTracking(void *p);
   static void deleteArray_HMdcIdealTracking(void *p);
   static void destruct_HMdcIdealTracking(void *p);
   static void streamer_HMdcIdealTracking(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcIdealTracking*)
   {
      ::HMdcIdealTracking *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcIdealTracking >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcIdealTracking", ::HMdcIdealTracking::Class_Version(), "././hmdcidealtracking.h", 17,
                  typeid(::HMdcIdealTracking), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcIdealTracking::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcIdealTracking) );
      instance.SetNew(&new_HMdcIdealTracking);
      instance.SetNewArray(&newArray_HMdcIdealTracking);
      instance.SetDelete(&delete_HMdcIdealTracking);
      instance.SetDeleteArray(&deleteArray_HMdcIdealTracking);
      instance.SetDestructor(&destruct_HMdcIdealTracking);
      instance.SetStreamerFunc(&streamer_HMdcIdealTracking);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcIdealTracking*)
   {
      return GenerateInitInstanceLocal((::HMdcIdealTracking*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcIdealTracking*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackDSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HMdcTrackDSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackDSet*)
   {
      ::HMdcTrackDSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackDSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackDSet", ::HMdcTrackDSet::Class_Version(), "././hmdctrackdset.h", 13,
                  typeid(::HMdcTrackDSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackDSet::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackDSet) );
      instance.SetStreamerFunc(&streamer_HMdcTrackDSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackDSet*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackDSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackDSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcHitSegFiller_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcHitSegFiller(void *p = 0);
   static void *newArray_HMdcHitSegFiller(Long_t size, void *p);
   static void delete_HMdcHitSegFiller(void *p);
   static void deleteArray_HMdcHitSegFiller(void *p);
   static void destruct_HMdcHitSegFiller(void *p);
   static void streamer_HMdcHitSegFiller(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcHitSegFiller*)
   {
      ::HMdcHitSegFiller *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcHitSegFiller >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcHitSegFiller", ::HMdcHitSegFiller::Class_Version(), "././hmdchitsegfiller.h", 16,
                  typeid(::HMdcHitSegFiller), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcHitSegFiller::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcHitSegFiller) );
      instance.SetNew(&new_HMdcHitSegFiller);
      instance.SetNewArray(&newArray_HMdcHitSegFiller);
      instance.SetDelete(&delete_HMdcHitSegFiller);
      instance.SetDeleteArray(&deleteArray_HMdcHitSegFiller);
      instance.SetDestructor(&destruct_HMdcHitSegFiller);
      instance.SetStreamerFunc(&streamer_HMdcHitSegFiller);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcHitSegFiller*)
   {
      return GenerateInitInstanceLocal((::HMdcHitSegFiller*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcHitSegFiller*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcClusInf_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcClusInf(void *p = 0);
   static void *newArray_HMdcClusInf(Long_t size, void *p);
   static void delete_HMdcClusInf(void *p);
   static void deleteArray_HMdcClusInf(void *p);
   static void destruct_HMdcClusInf(void *p);
   static void streamer_HMdcClusInf(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcClusInf*)
   {
      ::HMdcClusInf *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcClusInf >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcClusInf", ::HMdcClusInf::Class_Version(), "././hmdcclusinf.h", 6,
                  typeid(::HMdcClusInf), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcClusInf::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcClusInf) );
      instance.SetNew(&new_HMdcClusInf);
      instance.SetNewArray(&newArray_HMdcClusInf);
      instance.SetDelete(&delete_HMdcClusInf);
      instance.SetDeleteArray(&deleteArray_HMdcClusInf);
      instance.SetDestructor(&destruct_HMdcClusInf);
      instance.SetStreamerFunc(&streamer_HMdcClusInf);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcClusInf*)
   {
      return GenerateInitInstanceLocal((::HMdcClusInf*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcClusInf*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcClusFit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcClusFit(void *p = 0);
   static void *newArray_HMdcClusFit(Long_t size, void *p);
   static void delete_HMdcClusFit(void *p);
   static void deleteArray_HMdcClusFit(void *p);
   static void destruct_HMdcClusFit(void *p);
   static void streamer_HMdcClusFit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcClusFit*)
   {
      ::HMdcClusFit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcClusFit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcClusFit", ::HMdcClusFit::Class_Version(), "././hmdcclusfit.h", 7,
                  typeid(::HMdcClusFit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcClusFit::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcClusFit) );
      instance.SetNew(&new_HMdcClusFit);
      instance.SetNewArray(&newArray_HMdcClusFit);
      instance.SetDelete(&delete_HMdcClusFit);
      instance.SetDeleteArray(&deleteArray_HMdcClusFit);
      instance.SetDestructor(&destruct_HMdcClusFit);
      instance.SetStreamerFunc(&streamer_HMdcClusFit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcClusFit*)
   {
      return GenerateInitInstanceLocal((::HMdcClusFit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcClusFit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcWireData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcWireData(void *p = 0);
   static void *newArray_HMdcWireData(Long_t size, void *p);
   static void delete_HMdcWireData(void *p);
   static void deleteArray_HMdcWireData(void *p);
   static void destruct_HMdcWireData(void *p);
   static void streamer_HMdcWireData(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcWireData*)
   {
      ::HMdcWireData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcWireData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcWireData", ::HMdcWireData::Class_Version(), "././hmdcwiredata.h", 25,
                  typeid(::HMdcWireData), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcWireData::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcWireData) );
      instance.SetNew(&new_HMdcWireData);
      instance.SetNewArray(&newArray_HMdcWireData);
      instance.SetDelete(&delete_HMdcWireData);
      instance.SetDeleteArray(&deleteArray_HMdcWireData);
      instance.SetDestructor(&destruct_HMdcWireData);
      instance.SetStreamerFunc(&streamer_HMdcWireData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcWireData*)
   {
      return GenerateInitInstanceLocal((::HMdcWireData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcWireData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcWireFit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcWireFit(void *p = 0);
   static void *newArray_HMdcWireFit(Long_t size, void *p);
   static void delete_HMdcWireFit(void *p);
   static void deleteArray_HMdcWireFit(void *p);
   static void destruct_HMdcWireFit(void *p);
   static void streamer_HMdcWireFit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcWireFit*)
   {
      ::HMdcWireFit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcWireFit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcWireFit", ::HMdcWireFit::Class_Version(), "././hmdcwirefit.h", 7,
                  typeid(::HMdcWireFit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcWireFit::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcWireFit) );
      instance.SetNew(&new_HMdcWireFit);
      instance.SetNewArray(&newArray_HMdcWireFit);
      instance.SetDelete(&delete_HMdcWireFit);
      instance.SetDeleteArray(&deleteArray_HMdcWireFit);
      instance.SetDestructor(&destruct_HMdcWireFit);
      instance.SetStreamerFunc(&streamer_HMdcWireFit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcWireFit*)
   {
      return GenerateInitInstanceLocal((::HMdcWireFit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcWireFit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackFitInOut_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrackFitInOut(void *p = 0);
   static void *newArray_HMdcTrackFitInOut(Long_t size, void *p);
   static void delete_HMdcTrackFitInOut(void *p);
   static void deleteArray_HMdcTrackFitInOut(void *p);
   static void destruct_HMdcTrackFitInOut(void *p);
   static void streamer_HMdcTrackFitInOut(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackFitInOut*)
   {
      ::HMdcTrackFitInOut *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackFitInOut >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackFitInOut", ::HMdcTrackFitInOut::Class_Version(), "././hmdctrackfitter.h", 22,
                  typeid(::HMdcTrackFitInOut), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackFitInOut::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackFitInOut) );
      instance.SetNew(&new_HMdcTrackFitInOut);
      instance.SetNewArray(&newArray_HMdcTrackFitInOut);
      instance.SetDelete(&delete_HMdcTrackFitInOut);
      instance.SetDeleteArray(&deleteArray_HMdcTrackFitInOut);
      instance.SetDestructor(&destruct_HMdcTrackFitInOut);
      instance.SetStreamerFunc(&streamer_HMdcTrackFitInOut);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackFitInOut*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackFitInOut*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackFitInOut*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcDriftTimePar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HMdcDriftTimePar(TBuffer &buf, void *obj);
   static Long64_t merge_HMdcDriftTimePar(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcDriftTimePar*)
   {
      ::HMdcDriftTimePar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcDriftTimePar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcDriftTimePar", ::HMdcDriftTimePar::Class_Version(), "././hmdcdrifttimepar.h", 152,
                  typeid(::HMdcDriftTimePar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcDriftTimePar::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcDriftTimePar) );
      instance.SetStreamerFunc(&streamer_HMdcDriftTimePar);
      instance.SetMerge(&merge_HMdcDriftTimePar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcDriftTimePar*)
   {
      return GenerateInitInstanceLocal((::HMdcDriftTimePar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcDriftTimePar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcDriftTimeParBin_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcDriftTimeParBin(void *p = 0);
   static void *newArray_HMdcDriftTimeParBin(Long_t size, void *p);
   static void delete_HMdcDriftTimeParBin(void *p);
   static void deleteArray_HMdcDriftTimeParBin(void *p);
   static void destruct_HMdcDriftTimeParBin(void *p);
   static void streamer_HMdcDriftTimeParBin(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcDriftTimeParBin*)
   {
      ::HMdcDriftTimeParBin *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcDriftTimeParBin >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcDriftTimeParBin", ::HMdcDriftTimeParBin::Class_Version(), "././hmdcdrifttimepar.h", 15,
                  typeid(::HMdcDriftTimeParBin), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcDriftTimeParBin::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcDriftTimeParBin) );
      instance.SetNew(&new_HMdcDriftTimeParBin);
      instance.SetNewArray(&newArray_HMdcDriftTimeParBin);
      instance.SetDelete(&delete_HMdcDriftTimeParBin);
      instance.SetDeleteArray(&deleteArray_HMdcDriftTimeParBin);
      instance.SetDestructor(&destruct_HMdcDriftTimeParBin);
      instance.SetStreamerFunc(&streamer_HMdcDriftTimeParBin);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcDriftTimeParBin*)
   {
      return GenerateInitInstanceLocal((::HMdcDriftTimeParBin*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcDriftTimeParBin*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcWiresArr_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcWiresArr(void *p = 0);
   static void *newArray_HMdcWiresArr(Long_t size, void *p);
   static void delete_HMdcWiresArr(void *p);
   static void deleteArray_HMdcWiresArr(void *p);
   static void destruct_HMdcWiresArr(void *p);
   static void streamer_HMdcWiresArr(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcWiresArr*)
   {
      ::HMdcWiresArr *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcWiresArr >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcWiresArr", ::HMdcWiresArr::Class_Version(), "././hmdcwiredata.h", 218,
                  typeid(::HMdcWiresArr), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcWiresArr::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcWiresArr) );
      instance.SetNew(&new_HMdcWiresArr);
      instance.SetNewArray(&newArray_HMdcWiresArr);
      instance.SetDelete(&delete_HMdcWiresArr);
      instance.SetDeleteArray(&deleteArray_HMdcWiresArr);
      instance.SetDestructor(&destruct_HMdcWiresArr);
      instance.SetStreamerFunc(&streamer_HMdcWiresArr);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcWiresArr*)
   {
      return GenerateInitInstanceLocal((::HMdcWiresArr*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcWiresArr*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcDriftTimeParAngle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcDriftTimeParAngle(void *p = 0);
   static void *newArray_HMdcDriftTimeParAngle(Long_t size, void *p);
   static void delete_HMdcDriftTimeParAngle(void *p);
   static void deleteArray_HMdcDriftTimeParAngle(void *p);
   static void destruct_HMdcDriftTimeParAngle(void *p);
   static void streamer_HMdcDriftTimeParAngle(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcDriftTimeParAngle*)
   {
      ::HMdcDriftTimeParAngle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcDriftTimeParAngle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcDriftTimeParAngle", ::HMdcDriftTimeParAngle::Class_Version(), "././hmdcdrifttimepar.h", 60,
                  typeid(::HMdcDriftTimeParAngle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcDriftTimeParAngle::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcDriftTimeParAngle) );
      instance.SetNew(&new_HMdcDriftTimeParAngle);
      instance.SetNewArray(&newArray_HMdcDriftTimeParAngle);
      instance.SetDelete(&delete_HMdcDriftTimeParAngle);
      instance.SetDeleteArray(&deleteArray_HMdcDriftTimeParAngle);
      instance.SetDestructor(&destruct_HMdcDriftTimeParAngle);
      instance.SetStreamerFunc(&streamer_HMdcDriftTimeParAngle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcDriftTimeParAngle*)
   {
      return GenerateInitInstanceLocal((::HMdcDriftTimeParAngle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcDriftTimeParAngle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcDriftTimeParMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcDriftTimeParMod(void *p = 0);
   static void *newArray_HMdcDriftTimeParMod(Long_t size, void *p);
   static void delete_HMdcDriftTimeParMod(void *p);
   static void deleteArray_HMdcDriftTimeParMod(void *p);
   static void destruct_HMdcDriftTimeParMod(void *p);
   static void streamer_HMdcDriftTimeParMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcDriftTimeParMod*)
   {
      ::HMdcDriftTimeParMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcDriftTimeParMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcDriftTimeParMod", ::HMdcDriftTimeParMod::Class_Version(), "././hmdcdrifttimepar.h", 72,
                  typeid(::HMdcDriftTimeParMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcDriftTimeParMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcDriftTimeParMod) );
      instance.SetNew(&new_HMdcDriftTimeParMod);
      instance.SetNewArray(&newArray_HMdcDriftTimeParMod);
      instance.SetDelete(&delete_HMdcDriftTimeParMod);
      instance.SetDeleteArray(&deleteArray_HMdcDriftTimeParMod);
      instance.SetDestructor(&destruct_HMdcDriftTimeParMod);
      instance.SetStreamerFunc(&streamer_HMdcDriftTimeParMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcDriftTimeParMod*)
   {
      return GenerateInitInstanceLocal((::HMdcDriftTimeParMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcDriftTimeParMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackFitPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrackFitPar(void *p = 0);
   static void *newArray_HMdcTrackFitPar(Long_t size, void *p);
   static void delete_HMdcTrackFitPar(void *p);
   static void deleteArray_HMdcTrackFitPar(void *p);
   static void destruct_HMdcTrackFitPar(void *p);
   static void streamer_HMdcTrackFitPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackFitPar*)
   {
      ::HMdcTrackFitPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackFitPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackFitPar", ::HMdcTrackFitPar::Class_Version(), "././hmdctrackfitpar.h", 10,
                  typeid(::HMdcTrackFitPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackFitPar::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackFitPar) );
      instance.SetNew(&new_HMdcTrackFitPar);
      instance.SetNewArray(&newArray_HMdcTrackFitPar);
      instance.SetDelete(&delete_HMdcTrackFitPar);
      instance.SetDeleteArray(&deleteArray_HMdcTrackFitPar);
      instance.SetDestructor(&destruct_HMdcTrackFitPar);
      instance.SetStreamerFunc(&streamer_HMdcTrackFitPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackFitPar*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackFitPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackFitPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackFitter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdcTrackFitter(void *p);
   static void deleteArray_HMdcTrackFitter(void *p);
   static void destruct_HMdcTrackFitter(void *p);
   static void streamer_HMdcTrackFitter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackFitter*)
   {
      ::HMdcTrackFitter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackFitter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackFitter", ::HMdcTrackFitter::Class_Version(), "././hmdctrackfitter.h", 178,
                  typeid(::HMdcTrackFitter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackFitter::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackFitter) );
      instance.SetDelete(&delete_HMdcTrackFitter);
      instance.SetDeleteArray(&deleteArray_HMdcTrackFitter);
      instance.SetDestructor(&destruct_HMdcTrackFitter);
      instance.SetStreamerFunc(&streamer_HMdcTrackFitter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackFitter*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackFitter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackFitter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackFitterA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdcTrackFitterA(void *p);
   static void deleteArray_HMdcTrackFitterA(void *p);
   static void destruct_HMdcTrackFitterA(void *p);
   static void streamer_HMdcTrackFitterA(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackFitterA*)
   {
      ::HMdcTrackFitterA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackFitterA >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackFitterA", ::HMdcTrackFitterA::Class_Version(), "././hmdctrackfittera.h", 6,
                  typeid(::HMdcTrackFitterA), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackFitterA::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackFitterA) );
      instance.SetDelete(&delete_HMdcTrackFitterA);
      instance.SetDeleteArray(&deleteArray_HMdcTrackFitterA);
      instance.SetDestructor(&destruct_HMdcTrackFitterA);
      instance.SetStreamerFunc(&streamer_HMdcTrackFitterA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackFitterA*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackFitterA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackFitterA*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackInfSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrackInfSim(void *p = 0);
   static void *newArray_HMdcTrackInfSim(Long_t size, void *p);
   static void delete_HMdcTrackInfSim(void *p);
   static void deleteArray_HMdcTrackInfSim(void *p);
   static void destruct_HMdcTrackInfSim(void *p);
   static void streamer_HMdcTrackInfSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackInfSim*)
   {
      ::HMdcTrackInfSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackInfSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackInfSim", ::HMdcTrackInfSim::Class_Version(), "././hmdcgeanttrack.h", 253,
                  typeid(::HMdcTrackInfSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackInfSim::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackInfSim) );
      instance.SetNew(&new_HMdcTrackInfSim);
      instance.SetNewArray(&newArray_HMdcTrackInfSim);
      instance.SetDelete(&delete_HMdcTrackInfSim);
      instance.SetDeleteArray(&deleteArray_HMdcTrackInfSim);
      instance.SetDestructor(&destruct_HMdcTrackInfSim);
      instance.SetStreamerFunc(&streamer_HMdcTrackInfSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackInfSim*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackInfSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackInfSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcFittersArray_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcFittersArray(void *p = 0);
   static void *newArray_HMdcFittersArray(Long_t size, void *p);
   static void delete_HMdcFittersArray(void *p);
   static void deleteArray_HMdcFittersArray(void *p);
   static void destruct_HMdcFittersArray(void *p);
   static void streamer_HMdcFittersArray(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcFittersArray*)
   {
      ::HMdcFittersArray *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcFittersArray >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcFittersArray", ::HMdcFittersArray::Class_Version(), "././hmdc12fit.h", 25,
                  typeid(::HMdcFittersArray), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcFittersArray::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcFittersArray) );
      instance.SetNew(&new_HMdcFittersArray);
      instance.SetNewArray(&newArray_HMdcFittersArray);
      instance.SetDelete(&delete_HMdcFittersArray);
      instance.SetDeleteArray(&deleteArray_HMdcFittersArray);
      instance.SetDestructor(&destruct_HMdcFittersArray);
      instance.SetStreamerFunc(&streamer_HMdcFittersArray);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcFittersArray*)
   {
      return GenerateInitInstanceLocal((::HMdcFittersArray*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcFittersArray*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcEffMenu_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HMdcEffMenu(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcEffMenu*)
   {
      ::HMdcEffMenu *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcEffMenu >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcEffMenu", ::HMdcEffMenu::Class_Version(), "././hmdceffmenu.h", 18,
                  typeid(::HMdcEffMenu), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcEffMenu::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcEffMenu) );
      instance.SetStreamerFunc(&streamer_HMdcEffMenu);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcEffMenu*)
   {
      return GenerateInitInstanceLocal((::HMdcEffMenu*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcEffMenu*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTargetMon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTargetMon(void *p = 0);
   static void *newArray_HMdcTargetMon(Long_t size, void *p);
   static void delete_HMdcTargetMon(void *p);
   static void deleteArray_HMdcTargetMon(void *p);
   static void destruct_HMdcTargetMon(void *p);
   static void streamer_HMdcTargetMon(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTargetMon*)
   {
      ::HMdcTargetMon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTargetMon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTargetMon", ::HMdcTargetMon::Class_Version(), "././hmdctargetmon.h", 26,
                  typeid(::HMdcTargetMon), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTargetMon::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTargetMon) );
      instance.SetNew(&new_HMdcTargetMon);
      instance.SetNewArray(&newArray_HMdcTargetMon);
      instance.SetDelete(&delete_HMdcTargetMon);
      instance.SetDeleteArray(&deleteArray_HMdcTargetMon);
      instance.SetDestructor(&destruct_HMdcTargetMon);
      instance.SetStreamerFunc(&streamer_HMdcTargetMon);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTargetMon*)
   {
      return GenerateInitInstanceLocal((::HMdcTargetMon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTargetMon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcClusInfSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcClusInfSim(void *p = 0);
   static void *newArray_HMdcClusInfSim(Long_t size, void *p);
   static void delete_HMdcClusInfSim(void *p);
   static void deleteArray_HMdcClusInfSim(void *p);
   static void destruct_HMdcClusInfSim(void *p);
   static void streamer_HMdcClusInfSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcClusInfSim*)
   {
      ::HMdcClusInfSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcClusInfSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcClusInfSim", ::HMdcClusInfSim::Class_Version(), "././hmdcclusinfsim.h", 6,
                  typeid(::HMdcClusInfSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcClusInfSim::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcClusInfSim) );
      instance.SetNew(&new_HMdcClusInfSim);
      instance.SetNewArray(&newArray_HMdcClusInfSim);
      instance.SetDelete(&delete_HMdcClusInfSim);
      instance.SetDeleteArray(&deleteArray_HMdcClusInfSim);
      instance.SetDestructor(&destruct_HMdcClusInfSim);
      instance.SetStreamerFunc(&streamer_HMdcClusInfSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcClusInfSim*)
   {
      return GenerateInitInstanceLocal((::HMdcClusInfSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcClusInfSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcDGaus_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcDGaus(void *p = 0);
   static void *newArray_HMdcDGaus(Long_t size, void *p);
   static void delete_HMdcDGaus(void *p);
   static void deleteArray_HMdcDGaus(void *p);
   static void destruct_HMdcDGaus(void *p);
   static void streamer_HMdcDGaus(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcDGaus*)
   {
      ::HMdcDGaus *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcDGaus >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcDGaus", ::HMdcDGaus::Class_Version(), "././hmdcrichcorr.h", 17,
                  typeid(::HMdcDGaus), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcDGaus::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcDGaus) );
      instance.SetNew(&new_HMdcDGaus);
      instance.SetNewArray(&newArray_HMdcDGaus);
      instance.SetDelete(&delete_HMdcDGaus);
      instance.SetDeleteArray(&deleteArray_HMdcDGaus);
      instance.SetDestructor(&destruct_HMdcDGaus);
      instance.SetStreamerFunc(&streamer_HMdcDGaus);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcDGaus*)
   {
      return GenerateInitInstanceLocal((::HMdcDGaus*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcDGaus*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcRichCorr_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcRichCorr(void *p = 0);
   static void *newArray_HMdcRichCorr(Long_t size, void *p);
   static void delete_HMdcRichCorr(void *p);
   static void deleteArray_HMdcRichCorr(void *p);
   static void destruct_HMdcRichCorr(void *p);
   static void streamer_HMdcRichCorr(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcRichCorr*)
   {
      ::HMdcRichCorr *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcRichCorr >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcRichCorr", ::HMdcRichCorr::Class_Version(), "././hmdcrichcorr.h", 37,
                  typeid(::HMdcRichCorr), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcRichCorr::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcRichCorr) );
      instance.SetNew(&new_HMdcRichCorr);
      instance.SetNewArray(&newArray_HMdcRichCorr);
      instance.SetDelete(&delete_HMdcRichCorr);
      instance.SetDeleteArray(&deleteArray_HMdcRichCorr);
      instance.SetDestructor(&destruct_HMdcRichCorr);
      instance.SetStreamerFunc(&streamer_HMdcRichCorr);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcRichCorr*)
   {
      return GenerateInitInstanceLocal((::HMdcRichCorr*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcRichCorr*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSeqArrBlock_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSeqArrBlock(void *p = 0);
   static void *newArray_HSeqArrBlock(Long_t size, void *p);
   static void delete_HSeqArrBlock(void *p);
   static void deleteArray_HSeqArrBlock(void *p);
   static void destruct_HSeqArrBlock(void *p);
   static void streamer_HSeqArrBlock(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSeqArrBlock*)
   {
      ::HSeqArrBlock *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSeqArrBlock >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSeqArrBlock", ::HSeqArrBlock::Class_Version(), "././hseqarr.h", 6,
                  typeid(::HSeqArrBlock), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSeqArrBlock::Dictionary, isa_proxy, 0,
                  sizeof(::HSeqArrBlock) );
      instance.SetNew(&new_HSeqArrBlock);
      instance.SetNewArray(&newArray_HSeqArrBlock);
      instance.SetDelete(&delete_HSeqArrBlock);
      instance.SetDeleteArray(&deleteArray_HSeqArrBlock);
      instance.SetDestructor(&destruct_HSeqArrBlock);
      instance.SetStreamerFunc(&streamer_HSeqArrBlock);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSeqArrBlock*)
   {
      return GenerateInitInstanceLocal((::HSeqArrBlock*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSeqArrBlock*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSeqArrIter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSeqArrIter(void *p = 0);
   static void *newArray_HSeqArrIter(Long_t size, void *p);
   static void delete_HSeqArrIter(void *p);
   static void deleteArray_HSeqArrIter(void *p);
   static void destruct_HSeqArrIter(void *p);
   static void streamer_HSeqArrIter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSeqArrIter*)
   {
      ::HSeqArrIter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSeqArrIter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSeqArrIter", ::HSeqArrIter::Class_Version(), "././hseqarr.h", 162,
                  typeid(::HSeqArrIter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSeqArrIter::Dictionary, isa_proxy, 0,
                  sizeof(::HSeqArrIter) );
      instance.SetNew(&new_HSeqArrIter);
      instance.SetNewArray(&newArray_HSeqArrIter);
      instance.SetDelete(&delete_HSeqArrIter);
      instance.SetDeleteArray(&deleteArray_HSeqArrIter);
      instance.SetDestructor(&destruct_HSeqArrIter);
      instance.SetStreamerFunc(&streamer_HSeqArrIter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSeqArrIter*)
   {
      return GenerateInitInstanceLocal((::HSeqArrIter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSeqArrIter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSeqArr_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSeqArr(void *p = 0);
   static void *newArray_HSeqArr(Long_t size, void *p);
   static void delete_HSeqArr(void *p);
   static void deleteArray_HSeqArr(void *p);
   static void destruct_HSeqArr(void *p);
   static void streamer_HSeqArr(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSeqArr*)
   {
      ::HSeqArr *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSeqArr >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSeqArr", ::HSeqArr::Class_Version(), "././hseqarr.h", 37,
                  typeid(::HSeqArr), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSeqArr::Dictionary, isa_proxy, 0,
                  sizeof(::HSeqArr) );
      instance.SetNew(&new_HSeqArr);
      instance.SetNewArray(&newArray_HSeqArr);
      instance.SetDelete(&delete_HSeqArr);
      instance.SetDeleteArray(&deleteArray_HSeqArr);
      instance.SetDestructor(&destruct_HSeqArr);
      instance.SetStreamerFunc(&streamer_HSeqArr);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSeqArr*)
   {
      return GenerateInitInstanceLocal((::HSeqArr*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSeqArr*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcStoreWires_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcStoreWires(void *p = 0);
   static void *newArray_HMdcStoreWires(Long_t size, void *p);
   static void delete_HMdcStoreWires(void *p);
   static void deleteArray_HMdcStoreWires(void *p);
   static void destruct_HMdcStoreWires(void *p);
   static void streamer_HMdcStoreWires(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcStoreWires*)
   {
      ::HMdcStoreWires *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcStoreWires >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcStoreWires", ::HMdcStoreWires::Class_Version(), "././hmdcstoreevents.h", 11,
                  typeid(::HMdcStoreWires), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcStoreWires::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcStoreWires) );
      instance.SetNew(&new_HMdcStoreWires);
      instance.SetNewArray(&newArray_HMdcStoreWires);
      instance.SetDelete(&delete_HMdcStoreWires);
      instance.SetDeleteArray(&deleteArray_HMdcStoreWires);
      instance.SetDestructor(&destruct_HMdcStoreWires);
      instance.SetStreamerFunc(&streamer_HMdcStoreWires);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcStoreWires*)
   {
      return GenerateInitInstanceLocal((::HMdcStoreWires*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcStoreWires*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcStoreEvents_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcStoreEvents(void *p = 0);
   static void *newArray_HMdcStoreEvents(Long_t size, void *p);
   static void delete_HMdcStoreEvents(void *p);
   static void deleteArray_HMdcStoreEvents(void *p);
   static void destruct_HMdcStoreEvents(void *p);
   static void streamer_HMdcStoreEvents(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcStoreEvents*)
   {
      ::HMdcStoreEvents *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcStoreEvents >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcStoreEvents", ::HMdcStoreEvents::Class_Version(), "././hmdcstoreevents.h", 68,
                  typeid(::HMdcStoreEvents), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcStoreEvents::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcStoreEvents) );
      instance.SetNew(&new_HMdcStoreEvents);
      instance.SetNewArray(&newArray_HMdcStoreEvents);
      instance.SetDelete(&delete_HMdcStoreEvents);
      instance.SetDeleteArray(&deleteArray_HMdcStoreEvents);
      instance.SetDestructor(&destruct_HMdcStoreEvents);
      instance.SetStreamerFunc(&streamer_HMdcStoreEvents);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcStoreEvents*)
   {
      return GenerateInitInstanceLocal((::HMdcStoreEvents*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcStoreEvents*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcStoreTracks_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcStoreTracks(void *p = 0);
   static void *newArray_HMdcStoreTracks(Long_t size, void *p);
   static void delete_HMdcStoreTracks(void *p);
   static void deleteArray_HMdcStoreTracks(void *p);
   static void destruct_HMdcStoreTracks(void *p);
   static void streamer_HMdcStoreTracks(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcStoreTracks*)
   {
      ::HMdcStoreTracks *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcStoreTracks >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcStoreTracks", ::HMdcStoreTracks::Class_Version(), "././hmdcstoreevents.h", 143,
                  typeid(::HMdcStoreTracks), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcStoreTracks::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcStoreTracks) );
      instance.SetNew(&new_HMdcStoreTracks);
      instance.SetNewArray(&newArray_HMdcStoreTracks);
      instance.SetDelete(&delete_HMdcStoreTracks);
      instance.SetDeleteArray(&deleteArray_HMdcStoreTracks);
      instance.SetDestructor(&destruct_HMdcStoreTracks);
      instance.SetStreamerFunc(&streamer_HMdcStoreTracks);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcStoreTracks*)
   {
      return GenerateInitInstanceLocal((::HMdcStoreTracks*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcStoreTracks*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcStoreClusters_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcStoreClusters(void *p = 0);
   static void *newArray_HMdcStoreClusters(Long_t size, void *p);
   static void delete_HMdcStoreClusters(void *p);
   static void deleteArray_HMdcStoreClusters(void *p);
   static void destruct_HMdcStoreClusters(void *p);
   static void streamer_HMdcStoreClusters(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcStoreClusters*)
   {
      ::HMdcStoreClusters *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcStoreClusters >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcStoreClusters", ::HMdcStoreClusters::Class_Version(), "././hmdcstoreevents.h", 210,
                  typeid(::HMdcStoreClusters), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcStoreClusters::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcStoreClusters) );
      instance.SetNew(&new_HMdcStoreClusters);
      instance.SetNewArray(&newArray_HMdcStoreClusters);
      instance.SetDelete(&delete_HMdcStoreClusters);
      instance.SetDeleteArray(&deleteArray_HMdcStoreClusters);
      instance.SetDestructor(&destruct_HMdcStoreClusters);
      instance.SetStreamerFunc(&streamer_HMdcStoreClusters);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcStoreClusters*)
   {
      return GenerateInitInstanceLocal((::HMdcStoreClusters*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcStoreClusters*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcDeDx2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcDeDx2(void *p = 0);
   static void *newArray_HMdcDeDx2(Long_t size, void *p);
   static void delete_HMdcDeDx2(void *p);
   static void deleteArray_HMdcDeDx2(void *p);
   static void destruct_HMdcDeDx2(void *p);
   static void streamer_HMdcDeDx2(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcDeDx2*)
   {
      ::HMdcDeDx2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcDeDx2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcDeDx2", ::HMdcDeDx2::Class_Version(), "././hmdcdedx2.h", 28,
                  typeid(::HMdcDeDx2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcDeDx2::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcDeDx2) );
      instance.SetNew(&new_HMdcDeDx2);
      instance.SetNewArray(&newArray_HMdcDeDx2);
      instance.SetDelete(&delete_HMdcDeDx2);
      instance.SetDeleteArray(&deleteArray_HMdcDeDx2);
      instance.SetDestructor(&destruct_HMdcDeDx2);
      instance.SetStreamerFunc(&streamer_HMdcDeDx2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcDeDx2*)
   {
      return GenerateInitInstanceLocal((::HMdcDeDx2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcDeDx2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcDeDx2Maker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcDeDx2Maker(void *p = 0);
   static void *newArray_HMdcDeDx2Maker(Long_t size, void *p);
   static void delete_HMdcDeDx2Maker(void *p);
   static void deleteArray_HMdcDeDx2Maker(void *p);
   static void destruct_HMdcDeDx2Maker(void *p);
   static void streamer_HMdcDeDx2Maker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcDeDx2Maker*)
   {
      ::HMdcDeDx2Maker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcDeDx2Maker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcDeDx2Maker", ::HMdcDeDx2Maker::Class_Version(), "././hmdcdedx2maker.h", 12,
                  typeid(::HMdcDeDx2Maker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcDeDx2Maker::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcDeDx2Maker) );
      instance.SetNew(&new_HMdcDeDx2Maker);
      instance.SetNewArray(&newArray_HMdcDeDx2Maker);
      instance.SetDelete(&delete_HMdcDeDx2Maker);
      instance.SetDeleteArray(&deleteArray_HMdcDeDx2Maker);
      instance.SetDestructor(&destruct_HMdcDeDx2Maker);
      instance.SetStreamerFunc(&streamer_HMdcDeDx2Maker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcDeDx2Maker*)
   {
      return GenerateInitInstanceLocal((::HMdcDeDx2Maker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcDeDx2Maker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackFitterB_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdcTrackFitterB(void *p);
   static void deleteArray_HMdcTrackFitterB(void *p);
   static void destruct_HMdcTrackFitterB(void *p);
   static void streamer_HMdcTrackFitterB(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackFitterB*)
   {
      ::HMdcTrackFitterB *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackFitterB >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackFitterB", ::HMdcTrackFitterB::Class_Version(), "././hmdctrackfitterb.h", 6,
                  typeid(::HMdcTrackFitterB), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackFitterB::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackFitterB) );
      instance.SetDelete(&delete_HMdcTrackFitterB);
      instance.SetDeleteArray(&deleteArray_HMdcTrackFitterB);
      instance.SetDestructor(&destruct_HMdcTrackFitterB);
      instance.SetStreamerFunc(&streamer_HMdcTrackFitterB);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackFitterB*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackFitterB*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackFitterB*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcAlignerParam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcAlignerParam(void *p = 0);
   static void *newArray_HMdcAlignerParam(Long_t size, void *p);
   static void delete_HMdcAlignerParam(void *p);
   static void deleteArray_HMdcAlignerParam(void *p);
   static void destruct_HMdcAlignerParam(void *p);
   static void streamer_HMdcAlignerParam(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcAlignerParam*)
   {
      ::HMdcAlignerParam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcAlignerParam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcAlignerParam", ::HMdcAlignerParam::Class_Version(), "././hmdcalignerparam.h", 10,
                  typeid(::HMdcAlignerParam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcAlignerParam::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcAlignerParam) );
      instance.SetNew(&new_HMdcAlignerParam);
      instance.SetNewArray(&newArray_HMdcAlignerParam);
      instance.SetDelete(&delete_HMdcAlignerParam);
      instance.SetDeleteArray(&deleteArray_HMdcAlignerParam);
      instance.SetDestructor(&destruct_HMdcAlignerParam);
      instance.SetStreamerFunc(&streamer_HMdcAlignerParam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcAlignerParam*)
   {
      return GenerateInitInstanceLocal((::HMdcAlignerParam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcAlignerParam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcAlignerD_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcAlignerD(void *p = 0);
   static void *newArray_HMdcAlignerD(Long_t size, void *p);
   static void delete_HMdcAlignerD(void *p);
   static void deleteArray_HMdcAlignerD(void *p);
   static void destruct_HMdcAlignerD(void *p);
   static void streamer_HMdcAlignerD(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcAlignerD*)
   {
      ::HMdcAlignerD *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcAlignerD >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcAlignerD", ::HMdcAlignerD::Class_Version(), "././hmdcalignerd.h", 18,
                  typeid(::HMdcAlignerD), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcAlignerD::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcAlignerD) );
      instance.SetNew(&new_HMdcAlignerD);
      instance.SetNewArray(&newArray_HMdcAlignerD);
      instance.SetDelete(&delete_HMdcAlignerD);
      instance.SetDeleteArray(&deleteArray_HMdcAlignerD);
      instance.SetDestructor(&destruct_HMdcAlignerD);
      instance.SetStreamerFunc(&streamer_HMdcAlignerD);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcAlignerD*)
   {
      return GenerateInitInstanceLocal((::HMdcAlignerD*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcAlignerD*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcClusFitSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcClusFitSim(void *p = 0);
   static void *newArray_HMdcClusFitSim(Long_t size, void *p);
   static void delete_HMdcClusFitSim(void *p);
   static void deleteArray_HMdcClusFitSim(void *p);
   static void destruct_HMdcClusFitSim(void *p);
   static void streamer_HMdcClusFitSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcClusFitSim*)
   {
      ::HMdcClusFitSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcClusFitSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcClusFitSim", ::HMdcClusFitSim::Class_Version(), "././hmdcclusfitsim.h", 7,
                  typeid(::HMdcClusFitSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcClusFitSim::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcClusFitSim) );
      instance.SetNew(&new_HMdcClusFitSim);
      instance.SetNewArray(&newArray_HMdcClusFitSim);
      instance.SetDelete(&delete_HMdcClusFitSim);
      instance.SetDeleteArray(&deleteArray_HMdcClusFitSim);
      instance.SetDestructor(&destruct_HMdcClusFitSim);
      instance.SetStreamerFunc(&streamer_HMdcClusFitSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcClusFitSim*)
   {
      return GenerateInitInstanceLocal((::HMdcClusFitSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcClusFitSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcMinimize_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcMinimize(void *p = 0);
   static void *newArray_HMdcMinimize(Long_t size, void *p);
   static void delete_HMdcMinimize(void *p);
   static void deleteArray_HMdcMinimize(void *p);
   static void destruct_HMdcMinimize(void *p);
   static void streamer_HMdcMinimize(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcMinimize*)
   {
      ::HMdcMinimize *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcMinimize >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcMinimize", ::HMdcMinimize::Class_Version(), "././hmdcminimize.h", 7,
                  typeid(::HMdcMinimize), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcMinimize::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcMinimize) );
      instance.SetNew(&new_HMdcMinimize);
      instance.SetNewArray(&newArray_HMdcMinimize);
      instance.SetDelete(&delete_HMdcMinimize);
      instance.SetDeleteArray(&deleteArray_HMdcMinimize);
      instance.SetDestructor(&destruct_HMdcMinimize);
      instance.SetStreamerFunc(&streamer_HMdcMinimize);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcMinimize*)
   {
      return GenerateInitInstanceLocal((::HMdcMinimize*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcMinimize*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcWireFitSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcWireFitSim(void *p = 0);
   static void *newArray_HMdcWireFitSim(Long_t size, void *p);
   static void delete_HMdcWireFitSim(void *p);
   static void deleteArray_HMdcWireFitSim(void *p);
   static void destruct_HMdcWireFitSim(void *p);
   static void streamer_HMdcWireFitSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcWireFitSim*)
   {
      ::HMdcWireFitSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcWireFitSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcWireFitSim", ::HMdcWireFitSim::Class_Version(), "././hmdcwirefitsim.h", 6,
                  typeid(::HMdcWireFitSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcWireFitSim::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcWireFitSim) );
      instance.SetNew(&new_HMdcWireFitSim);
      instance.SetNewArray(&newArray_HMdcWireFitSim);
      instance.SetDelete(&delete_HMdcWireFitSim);
      instance.SetDeleteArray(&deleteArray_HMdcWireFitSim);
      instance.SetDestructor(&destruct_HMdcWireFitSim);
      instance.SetStreamerFunc(&streamer_HMdcWireFitSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcWireFitSim*)
   {
      return GenerateInitInstanceLocal((::HMdcWireFitSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcWireFitSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcClustFromSeg_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcClustFromSeg(void *p = 0);
   static void *newArray_HMdcClustFromSeg(Long_t size, void *p);
   static void delete_HMdcClustFromSeg(void *p);
   static void deleteArray_HMdcClustFromSeg(void *p);
   static void destruct_HMdcClustFromSeg(void *p);
   static void streamer_HMdcClustFromSeg(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcClustFromSeg*)
   {
      ::HMdcClustFromSeg *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcClustFromSeg >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcClustFromSeg", ::HMdcClustFromSeg::Class_Version(), "././hmdcclustfromseg.h", 15,
                  typeid(::HMdcClustFromSeg), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcClustFromSeg::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcClustFromSeg) );
      instance.SetNew(&new_HMdcClustFromSeg);
      instance.SetNewArray(&newArray_HMdcClustFromSeg);
      instance.SetDelete(&delete_HMdcClustFromSeg);
      instance.SetDeleteArray(&deleteArray_HMdcClustFromSeg);
      instance.SetDestructor(&destruct_HMdcClustFromSeg);
      instance.SetStreamerFunc(&streamer_HMdcClustFromSeg);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcClustFromSeg*)
   {
      return GenerateInitInstanceLocal((::HMdcClustFromSeg*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcClustFromSeg*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcGeantSeg_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcGeantSeg(void *p = 0);
   static void *newArray_HMdcGeantSeg(Long_t size, void *p);
   static void delete_HMdcGeantSeg(void *p);
   static void deleteArray_HMdcGeantSeg(void *p);
   static void destruct_HMdcGeantSeg(void *p);
   static void streamer_HMdcGeantSeg(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcGeantSeg*)
   {
      ::HMdcGeantSeg *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcGeantSeg >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcGeantSeg", ::HMdcGeantSeg::Class_Version(), "././hmdcgeanttrack.h", 20,
                  typeid(::HMdcGeantSeg), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcGeantSeg::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcGeantSeg) );
      instance.SetNew(&new_HMdcGeantSeg);
      instance.SetNewArray(&newArray_HMdcGeantSeg);
      instance.SetDelete(&delete_HMdcGeantSeg);
      instance.SetDeleteArray(&deleteArray_HMdcGeantSeg);
      instance.SetDestructor(&destruct_HMdcGeantSeg);
      instance.SetStreamerFunc(&streamer_HMdcGeantSeg);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcGeantSeg*)
   {
      return GenerateInitInstanceLocal((::HMdcGeantSeg*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcGeantSeg*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcGeantTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcGeantTrack(void *p = 0);
   static void *newArray_HMdcGeantTrack(Long_t size, void *p);
   static void delete_HMdcGeantTrack(void *p);
   static void deleteArray_HMdcGeantTrack(void *p);
   static void destruct_HMdcGeantTrack(void *p);
   static void streamer_HMdcGeantTrack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcGeantTrack*)
   {
      ::HMdcGeantTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcGeantTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcGeantTrack", ::HMdcGeantTrack::Class_Version(), "././hmdcgeanttrack.h", 129,
                  typeid(::HMdcGeantTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcGeantTrack::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcGeantTrack) );
      instance.SetNew(&new_HMdcGeantTrack);
      instance.SetNewArray(&newArray_HMdcGeantTrack);
      instance.SetDelete(&delete_HMdcGeantTrack);
      instance.SetDeleteArray(&deleteArray_HMdcGeantTrack);
      instance.SetDestructor(&destruct_HMdcGeantTrack);
      instance.SetStreamerFunc(&streamer_HMdcGeantTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcGeantTrack*)
   {
      return GenerateInitInstanceLocal((::HMdcGeantTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcGeantTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackDContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackDContFact::Class_Name()
{
   return "HMdcTrackDContFact";
}

//______________________________________________________________________________
const char *HMdcTrackDContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackDContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackDContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackDContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackDContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackDContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackDContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackDContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcPointPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcPointPlane::Class_Name()
{
   return "HMdcPointPlane";
}

//______________________________________________________________________________
const char *HMdcPointPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPointPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcPointPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPointPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcPointPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPointPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcPointPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPointPlane*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrapPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrapPlane::Class_Name()
{
   return "HMdcTrapPlane";
}

//______________________________________________________________________________
const char *HMdcTrapPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrapPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrapPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrapPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrapPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrapPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrapPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrapPlane*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrap::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrap::Class_Name()
{
   return "HMdcTrap";
}

//______________________________________________________________________________
const char *HMdcTrap::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrap::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrap::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrap::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrap*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcPlane::Class_Name()
{
   return "HMdcPlane";
}

//______________________________________________________________________________
const char *HMdcPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPlane*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcPointOnPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcPointOnPlane::Class_Name()
{
   return "HMdcPointOnPlane";
}

//______________________________________________________________________________
const char *HMdcPointOnPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPointOnPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcPointOnPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPointOnPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcPointOnPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPointOnPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcPointOnPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPointOnPlane*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLineParam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLineParam::Class_Name()
{
   return "HMdcLineParam";
}

//______________________________________________________________________________
const char *HMdcLineParam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLineParam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLineParam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLineParam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLineParam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLineParam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLineParam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLineParam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcGetContainers::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcGetContainers::Class_Name()
{
   return "HMdcGetContainers";
}

//______________________________________________________________________________
const char *HMdcGetContainers::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGetContainers*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcGetContainers::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGetContainers*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcGetContainers::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGetContainers*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcGetContainers::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGetContainers*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLayerCorrPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLayerCorrPar::Class_Name()
{
   return "HMdcLayerCorrPar";
}

//______________________________________________________________________________
const char *HMdcLayerCorrPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerCorrPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLayerCorrPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerCorrPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLayerCorrPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerCorrPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLayerCorrPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerCorrPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcSizesCellsCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcSizesCellsCell::Class_Name()
{
   return "HMdcSizesCellsCell";
}

//______________________________________________________________________________
const char *HMdcSizesCellsCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcSizesCellsCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcSizesCellsCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcSizesCellsCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcSizesCellsMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcSizesCellsMod::Class_Name()
{
   return "HMdcSizesCellsMod";
}

//______________________________________________________________________________
const char *HMdcSizesCellsMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcSizesCellsMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcSizesCellsMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcSizesCellsMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcSizesCells::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcSizesCells::Class_Name()
{
   return "HMdcSizesCells";
}

//______________________________________________________________________________
const char *HMdcSizesCells::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCells*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcSizesCells::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCells*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcSizesCells::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCells*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcSizesCells::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCells*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcSizesCellsLayer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcSizesCellsLayer::Class_Name()
{
   return "HMdcSizesCellsLayer";
}

//______________________________________________________________________________
const char *HMdcSizesCellsLayer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsLayer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcSizesCellsLayer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsLayer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcSizesCellsLayer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsLayer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcSizesCellsLayer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsLayer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcSizesCellsSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcSizesCellsSec::Class_Name()
{
   return "HMdcSizesCellsSec";
}

//______________________________________________________________________________
const char *HMdcSizesCellsSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcSizesCellsSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcSizesCellsSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcSizesCellsSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSizesCellsSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLayer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLayer::Class_Name()
{
   return "HMdcLayer";
}

//______________________________________________________________________________
const char *HMdcLayer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLayer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLayer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLayer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcClFnStack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcClFnStack::Class_Name()
{
   return "HMdcClFnStack";
}

//______________________________________________________________________________
const char *HMdcClFnStack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClFnStack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcClFnStack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClFnStack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcClFnStack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClFnStack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcClFnStack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClFnStack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcClFnStacksArr::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcClFnStacksArr::Class_Name()
{
   return "HMdcClFnStacksArr";
}

//______________________________________________________________________________
const char *HMdcClFnStacksArr::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClFnStacksArr*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcClFnStacksArr::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClFnStacksArr*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcClFnStacksArr::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClFnStacksArr*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcClFnStacksArr::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClFnStacksArr*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTBArray::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTBArray::Class_Name()
{
   return "HMdcTBArray";
}

//______________________________________________________________________________
const char *HMdcTBArray::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTBArray*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTBArray::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTBArray*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTBArray::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTBArray*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTBArray::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTBArray*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcBArray::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcBArray::Class_Name()
{
   return "HMdcBArray";
}

//______________________________________________________________________________
const char *HMdcBArray::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcBArray*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcBArray::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcBArray*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcBArray::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcBArray*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcBArray::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcBArray*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcList12GroupCells::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcList12GroupCells::Class_Name()
{
   return "HMdcList12GroupCells";
}

//______________________________________________________________________________
const char *HMdcList12GroupCells::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcList12GroupCells*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcList12GroupCells::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcList12GroupCells*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcList12GroupCells::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcList12GroupCells*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcList12GroupCells::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcList12GroupCells*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcList24GroupCells::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcList24GroupCells::Class_Name()
{
   return "HMdcList24GroupCells";
}

//______________________________________________________________________________
const char *HMdcList24GroupCells::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcList24GroupCells*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcList24GroupCells::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcList24GroupCells*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcList24GroupCells::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcList24GroupCells*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcList24GroupCells::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcList24GroupCells*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcClus::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcClus::Class_Name()
{
   return "HMdcClus";
}

//______________________________________________________________________________
const char *HMdcClus::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClus*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcClus::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClus*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcClus::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClus*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcClus::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClus*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcClusSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcClusSim::Class_Name()
{
   return "HMdcClusSim";
}

//______________________________________________________________________________
const char *HMdcClusSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcClusSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcClusSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcClusSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcSecListCells::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcSecListCells::Class_Name()
{
   return "HMdcSecListCells";
}

//______________________________________________________________________________
const char *HMdcSecListCells::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSecListCells*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcSecListCells::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSecListCells*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcSecListCells::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSecListCells*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcSecListCells::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSecListCells*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCluster::Class_Name()
{
   return "HMdcCluster";
}

//______________________________________________________________________________
const char *HMdcCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcClustersArrs::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcClustersArrs::Class_Name()
{
   return "HMdcClustersArrs";
}

//______________________________________________________________________________
const char *HMdcClustersArrs::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClustersArrs*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcClustersArrs::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClustersArrs*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcClustersArrs::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClustersArrs*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcClustersArrs::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClustersArrs*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcDriftTimeParSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcDriftTimeParSec::Class_Name()
{
   return "HMdcDriftTimeParSec";
}

//______________________________________________________________________________
const char *HMdcDriftTimeParSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcDriftTimeParSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcDriftTimeParSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcDriftTimeParSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLayListCells::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLayListCells::Class_Name()
{
   return "HMdcLayListCells";
}

//______________________________________________________________________________
const char *HMdcLayListCells::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayListCells*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLayListCells::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayListCells*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLayListCells::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayListCells*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLayListCells::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayListCells*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookUpTbCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookUpTbCell::Class_Name()
{
   return "HMdcLookUpTbCell";
}

//______________________________________________________________________________
const char *HMdcLookUpTbCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookUpTbCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookUpTbCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookUpTbCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookUpTbLayer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookUpTbLayer::Class_Name()
{
   return "HMdcLookUpTbLayer";
}

//______________________________________________________________________________
const char *HMdcLookUpTbLayer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbLayer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookUpTbLayer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbLayer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookUpTbLayer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbLayer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookUpTbLayer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbLayer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookUpTbMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookUpTbMod::Class_Name()
{
   return "HMdcLookUpTbMod";
}

//______________________________________________________________________________
const char *HMdcLookUpTbMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookUpTbMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookUpTbMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookUpTbMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookUpTbSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookUpTbSec::Class_Name()
{
   return "HMdcLookUpTbSec";
}

//______________________________________________________________________________
const char *HMdcLookUpTbSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookUpTbSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookUpTbSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookUpTbSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTbSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookUpTb::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookUpTb::Class_Name()
{
   return "HMdcLookUpTb";
}

//______________________________________________________________________________
const char *HMdcLookUpTb::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTb*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookUpTb::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTb*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookUpTb::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTb*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookUpTb::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookUpTb*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcModListCells::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcModListCells::Class_Name()
{
   return "HMdcModListCells";
}

//______________________________________________________________________________
const char *HMdcModListCells::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcModListCells*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcModListCells::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcModListCells*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcModListCells::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcModListCells*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcModListCells::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcModListCells*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcEvntListCells::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcEvntListCells::Class_Name()
{
   return "HMdcEvntListCells";
}

//______________________________________________________________________________
const char *HMdcEvntListCells::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEvntListCells*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcEvntListCells::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEvntListCells*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcEvntListCells::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEvntListCells*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcEvntListCells::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEvntListCells*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcKickPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcKickPlane::Class_Name()
{
   return "HMdcKickPlane";
}

//______________________________________________________________________________
const char *HMdcKickPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcKickPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcKickPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcKickPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcKickPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcKickPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcKickPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcKickPlane*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcClusMetaMatch::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcClusMetaMatch::Class_Name()
{
   return "HMdcClusMetaMatch";
}

//______________________________________________________________________________
const char *HMdcClusMetaMatch::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusMetaMatch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcClusMetaMatch::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusMetaMatch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcClusMetaMatch::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusMetaMatch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcClusMetaMatch::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusMetaMatch*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackParam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackParam::Class_Name()
{
   return "HMdcTrackParam";
}

//______________________________________________________________________________
const char *HMdcTrackParam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackParam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackParam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackParam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackParam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackParam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackParam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackParam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcKickCor::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcKickCor::Class_Name()
{
   return "HMdcKickCor";
}

//______________________________________________________________________________
const char *HMdcKickCor::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcKickCor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcKickCor::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcKickCor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcKickCor::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcKickCor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcKickCor::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcKickCor*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcProjPlot::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcProjPlot::Class_Name()
{
   return "HMdcProjPlot";
}

//______________________________________________________________________________
const char *HMdcProjPlot::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcProjPlot*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcProjPlot::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcProjPlot*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcProjPlot::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcProjPlot*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcProjPlot::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcProjPlot*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdc34ClFinderLayer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdc34ClFinderLayer::Class_Name()
{
   return "HMdc34ClFinderLayer";
}

//______________________________________________________________________________
const char *HMdc34ClFinderLayer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinderLayer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdc34ClFinderLayer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinderLayer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdc34ClFinderLayer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinderLayer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdc34ClFinderLayer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinderLayer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdc34ClFinderMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdc34ClFinderMod::Class_Name()
{
   return "HMdc34ClFinderMod";
}

//______________________________________________________________________________
const char *HMdc34ClFinderMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinderMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdc34ClFinderMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinderMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdc34ClFinderMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinderMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdc34ClFinderMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinderMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdc34ClFinderSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdc34ClFinderSec::Class_Name()
{
   return "HMdc34ClFinderSec";
}

//______________________________________________________________________________
const char *HMdc34ClFinderSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinderSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdc34ClFinderSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinderSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdc34ClFinderSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinderSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdc34ClFinderSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinderSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdc34ClFinder::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdc34ClFinder::Class_Name()
{
   return "HMdc34ClFinder";
}

//______________________________________________________________________________
const char *HMdc34ClFinder::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdc34ClFinder::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdc34ClFinder::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdc34ClFinder::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc34ClFinder*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcEff::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcEff::Class_Name()
{
   return "HMdcEff";
}

//______________________________________________________________________________
const char *HMdcEff::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEff*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcEff::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEff*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcEff::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEff*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcEff::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEff*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcEffMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcEffMod::Class_Name()
{
   return "HMdcEffMod";
}

//______________________________________________________________________________
const char *HMdcEffMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEffMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcEffMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEffMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcEffMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEffMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcEffMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEffMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcEfficiencyLayer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcEfficiencyLayer::Class_Name()
{
   return "HMdcEfficiencyLayer";
}

//______________________________________________________________________________
const char *HMdcEfficiencyLayer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiencyLayer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcEfficiencyLayer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiencyLayer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcEfficiencyLayer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiencyLayer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcEfficiencyLayer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiencyLayer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcEfficiencyMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcEfficiencyMod::Class_Name()
{
   return "HMdcEfficiencyMod";
}

//______________________________________________________________________________
const char *HMdcEfficiencyMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiencyMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcEfficiencyMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiencyMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcEfficiencyMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiencyMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcEfficiencyMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiencyMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcEfficiencySec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcEfficiencySec::Class_Name()
{
   return "HMdcEfficiencySec";
}

//______________________________________________________________________________
const char *HMdcEfficiencySec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiencySec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcEfficiencySec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiencySec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcEfficiencySec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiencySec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcEfficiencySec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiencySec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcEfficiency::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcEfficiency::Class_Name()
{
   return "HMdcEfficiency";
}

//______________________________________________________________________________
const char *HMdcEfficiency::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiency*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcEfficiency::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiency*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcEfficiency::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiency*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcEfficiency::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEfficiency*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcGeantEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcGeantEvent::Class_Name()
{
   return "HMdcGeantEvent";
}

//______________________________________________________________________________
const char *HMdcGeantEvent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcGeantEvent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcGeantEvent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcGeantEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantEvent*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackFinder::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackFinder::Class_Name()
{
   return "HMdcTrackFinder";
}

//______________________________________________________________________________
const char *HMdcTrackFinder::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFinder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackFinder::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFinder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackFinder::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFinder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackFinder::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFinder*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcClusterToHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcClusterToHit::Class_Name()
{
   return "HMdcClusterToHit";
}

//______________________________________________________________________________
const char *HMdcClusterToHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusterToHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcClusterToHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusterToHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcClusterToHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusterToHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcClusterToHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusterToHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdc12Fit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdc12Fit::Class_Name()
{
   return "HMdc12Fit";
}

//______________________________________________________________________________
const char *HMdc12Fit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc12Fit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdc12Fit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc12Fit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdc12Fit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc12Fit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdc12Fit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc12Fit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcIdealTracking::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcIdealTracking::Class_Name()
{
   return "HMdcIdealTracking";
}

//______________________________________________________________________________
const char *HMdcIdealTracking::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcIdealTracking*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcIdealTracking::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcIdealTracking*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcIdealTracking::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcIdealTracking*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcIdealTracking::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcIdealTracking*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackDSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackDSet::Class_Name()
{
   return "HMdcTrackDSet";
}

//______________________________________________________________________________
const char *HMdcTrackDSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackDSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackDSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackDSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackDSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackDSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackDSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackDSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcHitSegFiller::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcHitSegFiller::Class_Name()
{
   return "HMdcHitSegFiller";
}

//______________________________________________________________________________
const char *HMdcHitSegFiller::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHitSegFiller*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcHitSegFiller::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHitSegFiller*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcHitSegFiller::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHitSegFiller*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcHitSegFiller::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHitSegFiller*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcClusInf::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcClusInf::Class_Name()
{
   return "HMdcClusInf";
}

//______________________________________________________________________________
const char *HMdcClusInf::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusInf*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcClusInf::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusInf*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcClusInf::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusInf*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcClusInf::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusInf*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcClusFit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcClusFit::Class_Name()
{
   return "HMdcClusFit";
}

//______________________________________________________________________________
const char *HMdcClusFit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusFit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcClusFit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusFit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcClusFit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusFit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcClusFit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusFit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcWireData::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcWireData::Class_Name()
{
   return "HMdcWireData";
}

//______________________________________________________________________________
const char *HMdcWireData::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcWireData::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcWireData::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcWireData::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireData*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcWireFit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcWireFit::Class_Name()
{
   return "HMdcWireFit";
}

//______________________________________________________________________________
const char *HMdcWireFit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireFit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcWireFit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireFit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcWireFit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireFit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcWireFit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireFit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackFitInOut::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackFitInOut::Class_Name()
{
   return "HMdcTrackFitInOut";
}

//______________________________________________________________________________
const char *HMdcTrackFitInOut::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitInOut*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackFitInOut::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitInOut*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackFitInOut::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitInOut*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackFitInOut::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitInOut*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcDriftTimePar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcDriftTimePar::Class_Name()
{
   return "HMdcDriftTimePar";
}

//______________________________________________________________________________
const char *HMdcDriftTimePar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimePar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcDriftTimePar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimePar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcDriftTimePar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimePar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcDriftTimePar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimePar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcDriftTimeParBin::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcDriftTimeParBin::Class_Name()
{
   return "HMdcDriftTimeParBin";
}

//______________________________________________________________________________
const char *HMdcDriftTimeParBin::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParBin*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcDriftTimeParBin::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParBin*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcDriftTimeParBin::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParBin*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcDriftTimeParBin::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParBin*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcWiresArr::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcWiresArr::Class_Name()
{
   return "HMdcWiresArr";
}

//______________________________________________________________________________
const char *HMdcWiresArr::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWiresArr*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcWiresArr::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWiresArr*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcWiresArr::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWiresArr*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcWiresArr::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWiresArr*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcDriftTimeParAngle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcDriftTimeParAngle::Class_Name()
{
   return "HMdcDriftTimeParAngle";
}

//______________________________________________________________________________
const char *HMdcDriftTimeParAngle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParAngle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcDriftTimeParAngle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParAngle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcDriftTimeParAngle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParAngle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcDriftTimeParAngle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParAngle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcDriftTimeParMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcDriftTimeParMod::Class_Name()
{
   return "HMdcDriftTimeParMod";
}

//______________________________________________________________________________
const char *HMdcDriftTimeParMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcDriftTimeParMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcDriftTimeParMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcDriftTimeParMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDriftTimeParMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackFitPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackFitPar::Class_Name()
{
   return "HMdcTrackFitPar";
}

//______________________________________________________________________________
const char *HMdcTrackFitPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackFitPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackFitPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackFitPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackFitter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackFitter::Class_Name()
{
   return "HMdcTrackFitter";
}

//______________________________________________________________________________
const char *HMdcTrackFitter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackFitter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackFitter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackFitter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackFitterA::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackFitterA::Class_Name()
{
   return "HMdcTrackFitterA";
}

//______________________________________________________________________________
const char *HMdcTrackFitterA::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitterA*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackFitterA::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitterA*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackFitterA::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitterA*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackFitterA::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitterA*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackInfSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackInfSim::Class_Name()
{
   return "HMdcTrackInfSim";
}

//______________________________________________________________________________
const char *HMdcTrackInfSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackInfSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackInfSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackInfSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackInfSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackInfSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackInfSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackInfSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcFittersArray::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcFittersArray::Class_Name()
{
   return "HMdcFittersArray";
}

//______________________________________________________________________________
const char *HMdcFittersArray::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcFittersArray*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcFittersArray::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcFittersArray*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcFittersArray::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcFittersArray*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcFittersArray::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcFittersArray*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcEffMenu::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcEffMenu::Class_Name()
{
   return "HMdcEffMenu";
}

//______________________________________________________________________________
const char *HMdcEffMenu::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEffMenu*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcEffMenu::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEffMenu*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcEffMenu::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEffMenu*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcEffMenu::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcEffMenu*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTargetMon::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTargetMon::Class_Name()
{
   return "HMdcTargetMon";
}

//______________________________________________________________________________
const char *HMdcTargetMon::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTargetMon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTargetMon::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTargetMon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTargetMon::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTargetMon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTargetMon::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTargetMon*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcClusInfSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcClusInfSim::Class_Name()
{
   return "HMdcClusInfSim";
}

//______________________________________________________________________________
const char *HMdcClusInfSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusInfSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcClusInfSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusInfSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcClusInfSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusInfSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcClusInfSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusInfSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcDGaus::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcDGaus::Class_Name()
{
   return "HMdcDGaus";
}

//______________________________________________________________________________
const char *HMdcDGaus::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDGaus*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcDGaus::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDGaus*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcDGaus::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDGaus*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcDGaus::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDGaus*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcRichCorr::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcRichCorr::Class_Name()
{
   return "HMdcRichCorr";
}

//______________________________________________________________________________
const char *HMdcRichCorr::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRichCorr*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcRichCorr::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRichCorr*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcRichCorr::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRichCorr*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcRichCorr::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRichCorr*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSeqArrBlock::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSeqArrBlock::Class_Name()
{
   return "HSeqArrBlock";
}

//______________________________________________________________________________
const char *HSeqArrBlock::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSeqArrBlock*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSeqArrBlock::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSeqArrBlock*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSeqArrBlock::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSeqArrBlock*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSeqArrBlock::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSeqArrBlock*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSeqArrIter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSeqArrIter::Class_Name()
{
   return "HSeqArrIter";
}

//______________________________________________________________________________
const char *HSeqArrIter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSeqArrIter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSeqArrIter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSeqArrIter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSeqArrIter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSeqArrIter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSeqArrIter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSeqArrIter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSeqArr::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSeqArr::Class_Name()
{
   return "HSeqArr";
}

//______________________________________________________________________________
const char *HSeqArr::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSeqArr*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSeqArr::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSeqArr*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSeqArr::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSeqArr*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSeqArr::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSeqArr*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcStoreWires::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcStoreWires::Class_Name()
{
   return "HMdcStoreWires";
}

//______________________________________________________________________________
const char *HMdcStoreWires::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreWires*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcStoreWires::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreWires*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcStoreWires::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreWires*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcStoreWires::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreWires*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcStoreEvents::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcStoreEvents::Class_Name()
{
   return "HMdcStoreEvents";
}

//______________________________________________________________________________
const char *HMdcStoreEvents::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreEvents*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcStoreEvents::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreEvents*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcStoreEvents::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreEvents*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcStoreEvents::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreEvents*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcStoreTracks::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcStoreTracks::Class_Name()
{
   return "HMdcStoreTracks";
}

//______________________________________________________________________________
const char *HMdcStoreTracks::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreTracks*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcStoreTracks::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreTracks*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcStoreTracks::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreTracks*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcStoreTracks::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreTracks*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcStoreClusters::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcStoreClusters::Class_Name()
{
   return "HMdcStoreClusters";
}

//______________________________________________________________________________
const char *HMdcStoreClusters::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreClusters*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcStoreClusters::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreClusters*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcStoreClusters::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreClusters*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcStoreClusters::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcStoreClusters*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcDeDx2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcDeDx2::Class_Name()
{
   return "HMdcDeDx2";
}

//______________________________________________________________________________
const char *HMdcDeDx2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDeDx2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcDeDx2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDeDx2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcDeDx2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDeDx2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcDeDx2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDeDx2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcDeDx2Maker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcDeDx2Maker::Class_Name()
{
   return "HMdcDeDx2Maker";
}

//______________________________________________________________________________
const char *HMdcDeDx2Maker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDeDx2Maker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcDeDx2Maker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDeDx2Maker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcDeDx2Maker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDeDx2Maker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcDeDx2Maker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDeDx2Maker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackFitterB::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackFitterB::Class_Name()
{
   return "HMdcTrackFitterB";
}

//______________________________________________________________________________
const char *HMdcTrackFitterB::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitterB*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackFitterB::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitterB*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackFitterB::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitterB*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackFitterB::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFitterB*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcAlignerParam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcAlignerParam::Class_Name()
{
   return "HMdcAlignerParam";
}

//______________________________________________________________________________
const char *HMdcAlignerParam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcAlignerParam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcAlignerParam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcAlignerParam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcAlignerParam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcAlignerParam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcAlignerParam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcAlignerParam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcAlignerD::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcAlignerD::Class_Name()
{
   return "HMdcAlignerD";
}

//______________________________________________________________________________
const char *HMdcAlignerD::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcAlignerD*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcAlignerD::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcAlignerD*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcAlignerD::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcAlignerD*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcAlignerD::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcAlignerD*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcClusFitSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcClusFitSim::Class_Name()
{
   return "HMdcClusFitSim";
}

//______________________________________________________________________________
const char *HMdcClusFitSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusFitSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcClusFitSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusFitSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcClusFitSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusFitSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcClusFitSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusFitSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcMinimize::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcMinimize::Class_Name()
{
   return "HMdcMinimize";
}

//______________________________________________________________________________
const char *HMdcMinimize::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcMinimize*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcMinimize::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcMinimize*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcMinimize::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcMinimize*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcMinimize::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcMinimize*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcWireFitSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcWireFitSim::Class_Name()
{
   return "HMdcWireFitSim";
}

//______________________________________________________________________________
const char *HMdcWireFitSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireFitSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcWireFitSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireFitSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcWireFitSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireFitSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcWireFitSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireFitSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcClustFromSeg::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcClustFromSeg::Class_Name()
{
   return "HMdcClustFromSeg";
}

//______________________________________________________________________________
const char *HMdcClustFromSeg::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClustFromSeg*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcClustFromSeg::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClustFromSeg*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcClustFromSeg::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClustFromSeg*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcClustFromSeg::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClustFromSeg*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcGeantSeg::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcGeantSeg::Class_Name()
{
   return "HMdcGeantSeg";
}

//______________________________________________________________________________
const char *HMdcGeantSeg::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantSeg*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcGeantSeg::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantSeg*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcGeantSeg::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantSeg*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcGeantSeg::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantSeg*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcGeantTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcGeantTrack::Class_Name()
{
   return "HMdcGeantTrack";
}

//______________________________________________________________________________
const char *HMdcGeantTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcGeantTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcGeantTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcGeantTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HMdcPointPlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcPointPlane.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> x;
      R__b >> y;
      R__b.CheckByteCount(R__s, R__c, HMdcPointPlane::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcPointPlane::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << x;
      R__b << y;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcPointPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcPointPlane.
      TClass *R__cl = ::HMdcPointPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcPointPlane(void *p) {
      return  p ? new(p) ::HMdcPointPlane : new ::HMdcPointPlane;
   }
   static void *newArray_HMdcPointPlane(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcPointPlane[nElements] : new ::HMdcPointPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcPointPlane(void *p) {
      delete ((::HMdcPointPlane*)p);
   }
   static void deleteArray_HMdcPointPlane(void *p) {
      delete [] ((::HMdcPointPlane*)p);
   }
   static void destruct_HMdcPointPlane(void *p) {
      typedef ::HMdcPointPlane current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcPointPlane(TBuffer &buf, void *obj) {
      ((::HMdcPointPlane*)obj)->::HMdcPointPlane::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcPointPlane

//______________________________________________________________________________
void HMdcTrap::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrap.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 8; R__i++)
         points[R__i].Streamer(R__b);
      R__b >> dbPoint;
      R__b.CheckByteCount(R__s, R__c, HMdcTrap::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTrap::IsA(), kTRUE);
      TObject::Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 8; R__i++)
         points[R__i].Streamer(R__b);
      R__b << dbPoint;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTrap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrap.
      TClass *R__cl = ::HMdcTrap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "points[8]", points);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dbPoint", &dbPoint);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrap(void *p) {
      return  p ? new(p) ::HMdcTrap : new ::HMdcTrap;
   }
   static void *newArray_HMdcTrap(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrap[nElements] : new ::HMdcTrap[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrap(void *p) {
      delete ((::HMdcTrap*)p);
   }
   static void deleteArray_HMdcTrap(void *p) {
      delete [] ((::HMdcTrap*)p);
   }
   static void destruct_HMdcTrap(void *p) {
      typedef ::HMdcTrap current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrap(TBuffer &buf, void *obj) {
      ((::HMdcTrap*)obj)->::HMdcTrap::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrap

//______________________________________________________________________________
void HMdcTrapPlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrapPlane.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 16; R__i++)
         points[R__i].Streamer(R__b);
      R__b >> nPoints;
      R__b >> xMinPoint;
      R__b >> xMaxPoint;
      R__b >> yMinPoint;
      R__b >> yMaxPoint;
      R__b >> dir;
      R__b.CheckByteCount(R__s, R__c, HMdcTrapPlane::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTrapPlane::IsA(), kTRUE);
      TObject::Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 16; R__i++)
         points[R__i].Streamer(R__b);
      R__b << nPoints;
      R__b << xMinPoint;
      R__b << xMaxPoint;
      R__b << yMinPoint;
      R__b << yMaxPoint;
      R__b << dir;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTrapPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrapPlane.
      TClass *R__cl = ::HMdcTrapPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "points[16]", points);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPoints", &nPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xMinPoint", &xMinPoint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xMaxPoint", &xMaxPoint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yMinPoint", &yMinPoint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yMaxPoint", &yMaxPoint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dir", &dir);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrapPlane(void *p) {
      return  p ? new(p) ::HMdcTrapPlane : new ::HMdcTrapPlane;
   }
   static void *newArray_HMdcTrapPlane(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrapPlane[nElements] : new ::HMdcTrapPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrapPlane(void *p) {
      delete ((::HMdcTrapPlane*)p);
   }
   static void deleteArray_HMdcTrapPlane(void *p) {
      delete [] ((::HMdcTrapPlane*)p);
   }
   static void destruct_HMdcTrapPlane(void *p) {
      typedef ::HMdcTrapPlane current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrapPlane(TBuffer &buf, void *obj) {
      ((::HMdcTrapPlane*)obj)->::HMdcTrapPlane::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrapPlane

//______________________________________________________________________________
void HMdcPlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcPlane.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> parA;
      R__b >> parB;
      R__b >> parD;
      R__b.CheckByteCount(R__s, R__c, HMdcPlane::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcPlane::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << parA;
      R__b << parB;
      R__b << parD;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcPlane.
      TClass *R__cl = ::HMdcPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parA", &parA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parB", &parB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parD", &parD);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcPlane(void *p) {
      return  p ? new(p) ::HMdcPlane : new ::HMdcPlane;
   }
   static void *newArray_HMdcPlane(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcPlane[nElements] : new ::HMdcPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcPlane(void *p) {
      delete ((::HMdcPlane*)p);
   }
   static void deleteArray_HMdcPlane(void *p) {
      delete [] ((::HMdcPlane*)p);
   }
   static void destruct_HMdcPlane(void *p) {
      typedef ::HMdcPlane current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcPlane(TBuffer &buf, void *obj) {
      ((::HMdcPlane*)obj)->::HMdcPlane::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcPlane

//______________________________________________________________________________
void HMdcPointOnPlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcPointOnPlane.

   HGeomVector::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcPointOnPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcPointOnPlane.
      TClass *R__cl = ::HMdcPointOnPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pl", &pl);
      R__insp.InspectMember(pl, "pl.");
      HGeomVector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcPointOnPlane(void *p) {
      return  p ? new(p) ::HMdcPointOnPlane : new ::HMdcPointOnPlane;
   }
   static void *newArray_HMdcPointOnPlane(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcPointOnPlane[nElements] : new ::HMdcPointOnPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcPointOnPlane(void *p) {
      delete ((::HMdcPointOnPlane*)p);
   }
   static void deleteArray_HMdcPointOnPlane(void *p) {
      delete [] ((::HMdcPointOnPlane*)p);
   }
   static void destruct_HMdcPointOnPlane(void *p) {
      typedef ::HMdcPointOnPlane current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcPointOnPlane(TBuffer &buf, void *obj) {
      ((::HMdcPointOnPlane*)obj)->::HMdcPointOnPlane::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcPointOnPlane

//______________________________________________________________________________
void HMdcLineParam::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLineParam.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcLineParam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLineParam.
      TClass *R__cl = ::HMdcLineParam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "point1", &point1);
      R__insp.InspectMember(point1, "point1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "point2", &point2);
      R__insp.InspectMember(point2, "point2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dir", &dir);
      R__insp.InspectMember(dir, "dir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sec", &sec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod", &mod);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLineParam(void *p) {
      return  p ? new(p) ::HMdcLineParam : new ::HMdcLineParam;
   }
   static void *newArray_HMdcLineParam(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLineParam[nElements] : new ::HMdcLineParam[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLineParam(void *p) {
      delete ((::HMdcLineParam*)p);
   }
   static void deleteArray_HMdcLineParam(void *p) {
      delete [] ((::HMdcLineParam*)p);
   }
   static void destruct_HMdcLineParam(void *p) {
      typedef ::HMdcLineParam current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLineParam(TBuffer &buf, void *obj) {
      ((::HMdcLineParam*)obj)->::HMdcLineParam::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLineParam

//______________________________________________________________________________
void HMdcSizesCells::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcSizesCells.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcSizesCells::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcSizesCells.
      TClass *R__cl = ::HMdcSizesCells::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGetCont", &fGetCont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLayerGeomPar", &fLayerGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "verLayerGeomPar[3]", verLayerGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomPar", &fGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "verGeomPar[3]", verGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcStatus[6][4]", mdcStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nModsSeg[6][2]", nModsSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcGeomStruct", &fMdcGeomStruct);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcLookupRaw", &fMdcLookupRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "verLookupRaw[3]", verLookupRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcRawStruct", &fMdcRawStruct);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSpecGeomPar", &fSpecGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLayerCorrPar", &fLayerCorrPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "changed", &changed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geomModified", &geomModified);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numTargets", &numTargets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*targets", &targets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tarHalfThick", &tarHalfThick);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "targ3p[3]", targ3p);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcSizesCells(TBuffer &buf, void *obj) {
      ((::HMdcSizesCells*)obj)->::HMdcSizesCells::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcSizesCells

//______________________________________________________________________________
void HMdcSizesCellsSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcSizesCellsSec.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcSizesCellsSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcSizesCellsSec.
      TClass *R__cl = ::HMdcSizesCellsSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sysRLab", &sysRLab);
      R__insp.InspectMember(sysRLab, "sysRLab.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mdcStatSec", &mdcStatSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numTargets", &numTargets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*targets", &targets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "targ3p[3]", targ3p);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pToSC", &pToSC);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdcSizesCellsSec(void *p) {
      delete ((::HMdcSizesCellsSec*)p);
   }
   static void deleteArray_HMdcSizesCellsSec(void *p) {
      delete [] ((::HMdcSizesCellsSec*)p);
   }
   static void destruct_HMdcSizesCellsSec(void *p) {
      typedef ::HMdcSizesCellsSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcSizesCellsSec(TBuffer &buf, void *obj) {
      ((::HMdcSizesCellsSec*)obj)->::HMdcSizesCellsSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcSizesCellsSec

//______________________________________________________________________________
void HMdcSizesCellsMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcSizesCellsMod.

   HMdcPlane::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcSizesCellsMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcSizesCellsMod.
      TClass *R__cl = ::HMdcSizesCellsMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sysRSec", &sysRSec);
      R__insp.InspectMember(sysRSec, "sysRSec.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tSysRSec[12]", tSysRSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tSysRSecOp[12]", tSysRSecOp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ct[6]", ct);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcSCLayers[6]", mdcSCLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pToSec", &pToSec);
      HMdcPlane::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdcSizesCellsMod(void *p) {
      delete ((::HMdcSizesCellsMod*)p);
   }
   static void deleteArray_HMdcSizesCellsMod(void *p) {
      delete [] ((::HMdcSizesCellsMod*)p);
   }
   static void destruct_HMdcSizesCellsMod(void *p) {
      typedef ::HMdcSizesCellsMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcSizesCellsMod(TBuffer &buf, void *obj) {
      ((::HMdcSizesCellsMod*)obj)->::HMdcSizesCellsMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcSizesCellsMod

//______________________________________________________________________________
void HMdcSizesCellsLayer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcSizesCellsLayer.

   HMdcPlane::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcSizesCellsLayer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcSizesCellsLayer.
      TClass *R__cl = ::HMdcSizesCellsLayer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layer", &layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLayerGeomParLay", &pLayerGeomParLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeomVol", &pGeomVol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCells", &nCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "halfCatDist", &halfCatDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pitch", &pitch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "invPitch", &invPitch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "halfPitch", &halfPitch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "halfCDsDivPitch", &halfCDsDivPitch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxDriftDist", &maxDriftDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sysRSec", &sysRSec);
      R__insp.InspectMember(sysRSec, "sysRSec.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tSysRSec[12]", tSysRSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sysRMod", &sysRMod);
      R__insp.InspectMember(sysRMod, "sysRMod.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cellsArray", &cellsArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pToMod", &pToMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireOrient", &wireOrient);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireOffset", &wireOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellOffset", &cellOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosWireOr", &cosWireOr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sinWireOr", &sinWireOr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zModule", &zModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rotLaySysRMod", &rotLaySysRMod);
      R__insp.InspectMember(rotLaySysRMod, "rotLaySysRMod.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rotLaySysRSec", &rotLaySysRSec);
      R__insp.InspectMember(rotLaySysRSec, "rotLaySysRSec.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tRLaySysRSec[12]", tRLaySysRSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pntToCell[4]", pntToCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstCellPart2", &firstCellPart2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireOrientPart2", &wireOrientPart2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireOffsetPart2", &wireOffsetPart2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellOffsetPart2", &cellOffsetPart2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosWireOrPart2", &cosWireOrPart2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sinWireOrPart2", &sinWireOrPart2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rotLaySysRModPart2", &rotLaySysRModPart2);
      R__insp.InspectMember(rotLaySysRModPart2, "rotLaySysRModPart2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rotLaySysRSecPart2", &rotLaySysRSecPart2);
      R__insp.InspectMember(rotLaySysRSecPart2, "rotLaySysRSecPart2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tRLaySysRSecPart2[12]", tRLaySysRSecPart2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sensWiresThick", &sensWiresThick);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zGeantHit", &zGeantHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geantSysRMod", &geantSysRMod);
      R__insp.InspectMember(geantSysRMod, "geantSysRMod.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geantSysRSec", &geantSysRSec);
      R__insp.InspectMember(geantSysRSec, "geantSysRSec.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geantPlane", &geantPlane);
      R__insp.InspectMember(geantPlane, "geantPlane.");
      HMdcPlane::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcSizesCellsLayer(void *p) {
      return  p ? new(p) ::HMdcSizesCellsLayer : new ::HMdcSizesCellsLayer;
   }
   static void *newArray_HMdcSizesCellsLayer(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcSizesCellsLayer[nElements] : new ::HMdcSizesCellsLayer[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcSizesCellsLayer(void *p) {
      delete ((::HMdcSizesCellsLayer*)p);
   }
   static void deleteArray_HMdcSizesCellsLayer(void *p) {
      delete [] ((::HMdcSizesCellsLayer*)p);
   }
   static void destruct_HMdcSizesCellsLayer(void *p) {
      typedef ::HMdcSizesCellsLayer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcSizesCellsLayer(TBuffer &buf, void *obj) {
      ((::HMdcSizesCellsLayer*)obj)->::HMdcSizesCellsLayer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcSizesCellsLayer

//______________________________________________________________________________
void HMdcSizesCellsCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcSizesCellsCell.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcSizesCellsCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcSizesCellsCell.
      TClass *R__cl = ::HMdcSizesCellsCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wirePnt1", &wirePnt1);
      R__insp.InspectMember(wirePnt1, "wirePnt1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wirePnt2", &wirePnt2);
      R__insp.InspectMember(wirePnt2, "wirePnt2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "readOutSide", &readOutSide);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xReadout", &xReadout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "length", &length);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yWirePos", &yWirePos);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcSizesCellsCell(void *p) {
      return  p ? new(p) ::HMdcSizesCellsCell : new ::HMdcSizesCellsCell;
   }
   static void *newArray_HMdcSizesCellsCell(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcSizesCellsCell[nElements] : new ::HMdcSizesCellsCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcSizesCellsCell(void *p) {
      delete ((::HMdcSizesCellsCell*)p);
   }
   static void deleteArray_HMdcSizesCellsCell(void *p) {
      delete [] ((::HMdcSizesCellsCell*)p);
   }
   static void destruct_HMdcSizesCellsCell(void *p) {
      typedef ::HMdcSizesCellsCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcSizesCellsCell(TBuffer &buf, void *obj) {
      ((::HMdcSizesCellsCell*)obj)->::HMdcSizesCellsCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcSizesCellsCell

//______________________________________________________________________________
void HMdcLayer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLayer.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 576; R__i++)
         layerP[0][0][0][R__i].Streamer(R__b);
      for (R__i = 0; R__i < 576; R__i++)
         layerPcrop[0][0][0][R__i].Streamer(R__b);
      R__b.ReadStaticArray((double*)xcrop);
      R__b.ReadStaticArray((double*)ycrop);
      targetMidPoint.Streamer(R__b);
      for (R__i = 0; R__i < 6; R__i++)
         plMdc[R__i].Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HMdcLayer::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcLayer::IsA(), kTRUE);
      TObject::Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 576; R__i++)
         layerP[0][0][0][R__i].Streamer(R__b);
      for (R__i = 0; R__i < 576; R__i++)
         layerPcrop[0][0][0][R__i].Streamer(R__b);
      R__b.WriteArray((double*)xcrop, 8);
      R__b.WriteArray((double*)ycrop, 8);
      targetMidPoint.Streamer(R__b);
      for (R__i = 0; R__i < 6; R__i++)
         plMdc[R__i].Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcLayer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLayer.
      TClass *R__cl = ::HMdcLayer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layerP[6][4][6][4]", layerP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layerPcrop[6][4][6][4]", layerPcrop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xcrop[4][2]", xcrop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ycrop[4][2]", ycrop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "targetMidPoint", &targetMidPoint);
      R__insp.InspectMember(targetMidPoint, "targetMidPoint.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "plMdc[6]", plMdc);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLayer(void *p) {
      return  p ? new(p) ::HMdcLayer : new ::HMdcLayer;
   }
   static void *newArray_HMdcLayer(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLayer[nElements] : new ::HMdcLayer[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLayer(void *p) {
      delete ((::HMdcLayer*)p);
   }
   static void deleteArray_HMdcLayer(void *p) {
      delete [] ((::HMdcLayer*)p);
   }
   static void destruct_HMdcLayer(void *p) {
      typedef ::HMdcLayer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLayer(TBuffer &buf, void *obj) {
      ((::HMdcLayer*)obj)->::HMdcLayer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLayer

//______________________________________________________________________________
void HMdcLookUpTb::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLookUpTb.

   HParSet::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcLookUpTb::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookUpTb.
      TClass *R__cl = ::HMdcLookUpTb::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCoilOff", &isCoilOff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "typeClFinder", &typeClFinder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGetCont", &fGetCont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSizesCells", &fSizesCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcGeomPar", &fMdcGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSpecGeomPar", &fSpecGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLayerGeomPar", &fLayerGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStartGeomPar", &fStartGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcClusCat", &fMdcClusCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "targLenInc[2]", targLenInc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quietMode", &quietMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*stack", &stack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*stacksArr", &stacksArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useDriftTime", &useDriftTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "constUncert", &constUncert);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDCutCorr[4][6]", dDCutCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDistCut", &dDistCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDistYCorr", &dDistYCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numVFPoins", &numVFPoins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "use3PointMax", &use3PointMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "targetPnts[250]", targetPnts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertZErr", &vertZErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertexStat[250]", vertexStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numStartDPoints", &numStartDPoints);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookUpTb(TBuffer &buf, void *obj) {
      ((::HMdcLookUpTb*)obj)->::HMdcLookUpTb::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookUpTb

//______________________________________________________________________________
void HMdcLookUpTbSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLookUpTbSec.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcLookUpTbSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookUpTbSec.
      TClass *R__cl = ::HMdcLookUpTbSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segment", &segment);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSegments", &nSegments);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nModules", &nModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxNModules", &maxNModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCoilOff", &isCoilOff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBinX", &nBinX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xLow", &xLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xUp", &xUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xStep", &xStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBinY", &nBinY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yLow", &yLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yUp", &yUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yStep", &yStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xFirstBin", &xFirstBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yFirstBin", &yFirstBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xBinsPos", &xBinsPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*yBinsPos", &yBinsPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sizeBAr", &sizeBAr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxBinBAr4Sc", &maxBinBAr4Sc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minBinBAr4Sc", &minBinBAr4Sc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxBinBAr4M[4]", maxBinBAr4M);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minBinBAr4M[4]", minBinBAr4M);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xMin[4]", &xMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xMax[4]", &xMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*stack", &stack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*stacksArr", &stacksArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusCat", &fClusCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locClus", &locClus);
      R__insp.InspectMember(locClus, "locClus.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGeant", &isGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackListFlag", &trackListFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noFiredCells", &noFiredCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxAmp[4]", maxAmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pListCells", &pListCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minAmp[4]", minAmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMods", &nMods);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "typeClFinder", &typeClFinder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neighbBins[8]", neighbBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prPlane", &prPlane);
      R__insp.InspectMember(prPlane, "prPlane.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "target[3]", target);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eTarg[3]", eTarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "targVc[3]", targVc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doVertexFn", &doVertexFn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDistCutVF", &dDistCutVF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "levelVertF", &levelVertF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "levelVertFPP", &levelVertFPP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lTargPnt", &lTargPnt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indFirstTPnt", &indFirstTPnt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indLastTPnt", &indLastTPnt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "targetPnts[250]", targetPnts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertZErr", &vertZErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*vertexStat", &vertexStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertexPoint", &vertexPoint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nClusters", &nClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hist", &hist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "plBining", &plBining);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pClustersArrs", &pClustersArrs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nModSeg[2]", nModSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusArrSize", &clusArrSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*clusArr", &clusArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nClsArr", &nClsArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*clusArrM1", &clusArrM1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nClsArrM1", &nClsArrM1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*clusArrM2", &clusArrM2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nClsArrM2", &nClsArrM2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusArrInd", &clusArrInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cClusArr", &cClusArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cNClusArr", &cNClusArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cSeg", &cSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cMod1", &cMod1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cMod2", &cMod2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cPlModF", &cPlModF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cPlModS", &cPlModS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cMod", &cMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cPlMod", &cPlMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*clusInd", &clusInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cFMod", &cFMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cHPlModM", &cHPlModM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*clus", &clus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isClstrInited", &isClstrInited);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cXMinM", &cXMinM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cXMaxM", &cXMaxM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pXMinM", &pXMinM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pXMaxM", &pXMaxM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cPlotBAr", &cPlotBAr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLMaxCl", &nLMaxCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLMinCl", &nLMinCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xMaxCl", &xMaxCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xMinCl", &xMinCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClus", &fClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nFirstClust", &nFirstClust);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSlotAv[2]", isSlotAv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layerOrder[6]", layerOrder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layer", &layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcTime", &tdcTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "add", &add);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLayLCells", &pLayLCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLUTLayer", &pLUTLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLUTCell", &pLUTCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSCellSec", &pSCellSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pDriftTimeParSec", &pDriftTimeParSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "constUncert", &constUncert);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDCutCorr[4][6]", dDCutCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDistCut", &dDistCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*yDDistCorr", &yDDistCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useDriftTime", &useDriftTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fakeSuppFlag", &fakeSuppFlag);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookUpTbSec(TBuffer &buf, void *obj) {
      ((::HMdcLookUpTbSec*)obj)->::HMdcLookUpTbSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookUpTbSec

//______________________________________________________________________________
void HMdcLookUpTbMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLookUpTbMod.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcLookUpTbMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookUpTbMod.
      TClass *R__cl = ::HMdcLookUpTbMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayers", &nLayers);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdcLookUpTbMod(void *p) {
      delete ((::HMdcLookUpTbMod*)p);
   }
   static void deleteArray_HMdcLookUpTbMod(void *p) {
      delete [] ((::HMdcLookUpTbMod*)p);
   }
   static void destruct_HMdcLookUpTbMod(void *p) {
      typedef ::HMdcLookUpTbMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookUpTbMod(TBuffer &buf, void *obj) {
      ((::HMdcLookUpTbMod*)obj)->::HMdcLookUpTbMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookUpTbMod

//______________________________________________________________________________
void HMdcLookUpTbLayer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLookUpTbLayer.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcLookUpTbLayer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookUpTbLayer.
      TClass *R__cl = ::HMdcLookUpTbLayer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSCellLay", &pSCellLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLTCellArr", &pLTCellArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCells", &nCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layPart1", (void*)&layPart1);
      R__insp.InspectMember("HMdcLookUpTbLayer::DistCalcLuTb", (void*)&layPart1, "layPart1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*layPart2", &layPart2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*currLayPart", &currLayPart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lTargPnt", &lTargPnt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yWirePos", &yWirePos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDmin", &dDmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDmax", &dDmax);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdcLookUpTbLayer(void *p) {
      delete ((::HMdcLookUpTbLayer*)p);
   }
   static void deleteArray_HMdcLookUpTbLayer(void *p) {
      delete [] ((::HMdcLookUpTbLayer*)p);
   }
   static void destruct_HMdcLookUpTbLayer(void *p) {
      typedef ::HMdcLookUpTbLayer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookUpTbLayer(TBuffer &buf, void *obj) {
      ((::HMdcLookUpTbLayer*)obj)->::HMdcLookUpTbLayer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookUpTbLayer

//______________________________________________________________________________
void HMdcLookUpTbCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLookUpTbCell.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcLookUpTbCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookUpTbCell.
      TClass *R__cl = ::HMdcLookUpTbCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLines", &nLines);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "line", &line);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yBinMin", &yBinMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yBinMax", &yBinMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xBinMin", &xBinMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xBinMax", &xBinMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alphaMean", &alphaMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distCutFT", &distCutFT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distCut1T", &distCut1T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distCutVF", &distCutVF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDistMinCut", &dDistMinCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDistMaxCut", &dDistMaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDistMinCut2VF", &dDistMinCut2VF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDistMaxCut2VF", &dDistMaxCut2VF);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLookUpTbCell(void *p) {
      return  p ? new(p) ::HMdcLookUpTbCell : new ::HMdcLookUpTbCell;
   }
   static void *newArray_HMdcLookUpTbCell(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLookUpTbCell[nElements] : new ::HMdcLookUpTbCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLookUpTbCell(void *p) {
      delete ((::HMdcLookUpTbCell*)p);
   }
   static void deleteArray_HMdcLookUpTbCell(void *p) {
      delete [] ((::HMdcLookUpTbCell*)p);
   }
   static void destruct_HMdcLookUpTbCell(void *p) {
      typedef ::HMdcLookUpTbCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookUpTbCell(TBuffer &buf, void *obj) {
      ((::HMdcLookUpTbCell*)obj)->::HMdcLookUpTbCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookUpTbCell

//______________________________________________________________________________
void HMdcCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCluster.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCluster.
      TClass *R__cl = ::HMdcCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lCells1", &lCells1);
      R__insp.InspectMember(lCells1, "lCells1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lCells2", &lCells2);
      R__insp.InspectMember(lCells2, "lCells2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segment", &segment);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numCells1", &numCells1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numCells2", &numCells2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayers1", &nLayers1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayers2", &nLayers2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag", &flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*clusMerg", &clusMerg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMergedClus", &nMergedClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBins", &nBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumWt", &sumWt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanX", &meanX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanY", &meanY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanXX", &meanXX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanYY", &meanYY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanYX", &meanYX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanXWt", &meanXWt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanYWt", &meanYWt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanXXWt", &meanXXWt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanYYWt", &meanYYWt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minWt", &minWt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iXFirst", &iXFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iYFirst", &iYFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x0", &x0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y0", &y0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xSt", &xSt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ySt", &ySt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fakeFlag", &fakeFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "realFlag", &realFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errX", &errX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errY", &errY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma1", &sigma1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2", &sigma2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alpha", &alpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*clusMod1", &clusMod1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*clusMod2", &clusMod2);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCluster(void *p) {
      return  p ? new(p) ::HMdcCluster : new ::HMdcCluster;
   }
   static void *newArray_HMdcCluster(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCluster[nElements] : new ::HMdcCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCluster(void *p) {
      delete ((::HMdcCluster*)p);
   }
   static void deleteArray_HMdcCluster(void *p) {
      delete [] ((::HMdcCluster*)p);
   }
   static void destruct_HMdcCluster(void *p) {
      typedef ::HMdcCluster current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCluster(TBuffer &buf, void *obj) {
      ((::HMdcCluster*)obj)->::HMdcCluster::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCluster

//______________________________________________________________________________
void HMdcClustersArrs::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcClustersArrs.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcClustersArrs::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcClustersArrs.
      TClass *R__cl = ::HMdcClustersArrs::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*clusArr[3]", &clusArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arrSize[3]", arrSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dXWind1", &dXWind1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dYWind1", &dYWind1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dXWind2", &dXWind2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dYWind2", &dYWind2);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcClustersArrs(void *p) {
      return  p ? new(p) ::HMdcClustersArrs : new ::HMdcClustersArrs;
   }
   static void *newArray_HMdcClustersArrs(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcClustersArrs[nElements] : new ::HMdcClustersArrs[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcClustersArrs(void *p) {
      delete ((::HMdcClustersArrs*)p);
   }
   static void deleteArray_HMdcClustersArrs(void *p) {
      delete [] ((::HMdcClustersArrs*)p);
   }
   static void destruct_HMdcClustersArrs(void *p) {
      typedef ::HMdcClustersArrs current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcClustersArrs(TBuffer &buf, void *obj) {
      ((::HMdcClustersArrs*)obj)->::HMdcClustersArrs::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcClustersArrs

//______________________________________________________________________________
void HMdcClFnStack::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcClFnStack.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcClFnStack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcClFnStack.
      TClass *R__cl = ::HMdcClFnStack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*stack", &stack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*stackEnd", &stackEnd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*stackPos", &stackPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stackSize", &stackSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indexInArr", &indexInArr);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcClFnStack(void *p) {
      return  p ? new(p) ::HMdcClFnStack : new ::HMdcClFnStack;
   }
   static void *newArray_HMdcClFnStack(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcClFnStack[nElements] : new ::HMdcClFnStack[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcClFnStack(void *p) {
      delete ((::HMdcClFnStack*)p);
   }
   static void deleteArray_HMdcClFnStack(void *p) {
      delete [] ((::HMdcClFnStack*)p);
   }
   static void destruct_HMdcClFnStack(void *p) {
      typedef ::HMdcClFnStack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcClFnStack(TBuffer &buf, void *obj) {
      ((::HMdcClFnStack*)obj)->::HMdcClFnStack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcClFnStack

//______________________________________________________________________________
void HMdcClFnStacksArr::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcClFnStacksArr.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcClFnStacksArr::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcClFnStacksArr.
      TClass *R__cl = ::HMdcClFnStacksArr::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stacksArr[24]", stacksArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "amplitude", &amplitude);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcClFnStacksArr(void *p) {
      return  p ? new(p) ::HMdcClFnStacksArr : new ::HMdcClFnStacksArr;
   }
   static void *newArray_HMdcClFnStacksArr(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcClFnStacksArr[nElements] : new ::HMdcClFnStacksArr[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcClFnStacksArr(void *p) {
      delete ((::HMdcClFnStacksArr*)p);
   }
   static void deleteArray_HMdcClFnStacksArr(void *p) {
      delete [] ((::HMdcClFnStacksArr*)p);
   }
   static void destruct_HMdcClFnStacksArr(void *p) {
      typedef ::HMdcClFnStacksArr current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcClFnStacksArr(TBuffer &buf, void *obj) {
      ((::HMdcClFnStacksArr*)obj)->::HMdcClFnStacksArr::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcClFnStacksArr

//______________________________________________________________________________
void HMdcGeantSeg::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcGeantSeg.

   HMdcList12GroupCells::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcGeantSeg::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcGeantSeg.
      TClass *R__cl = ::HMdcGeantSeg::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sec", &sec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ioseg", &ioseg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod", &mod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackNumber", &trackNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*geantLay[2][7]", &geantLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segNumber", &segNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHitsMdc[2]", nHitsMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "direction", &direction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "areWiresColl", &areWiresColl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segmentStatus", &segmentStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pClusBest", &pClusBest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trIndBest", &trIndBest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dX", &dX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dY", &dY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayers", &nLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWires", &nWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pClusBestCh[2]", &pClusBestCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trIndBestCh[2]", trIndBestCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dXCh[2]", dXCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dYCh[2]", dYCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayersCh[2]", nLayersCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWiresCh[2]", nWiresCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSegBest", &pSegBest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sTrIndBest", &sTrIndBest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sNLayers", &sNLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sNWires", &sNWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRestWires", &nRestWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "userFlag", &userFlag);
      HMdcList12GroupCells::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcGeantSeg(void *p) {
      return  p ? new(p) ::HMdcGeantSeg : new ::HMdcGeantSeg;
   }
   static void *newArray_HMdcGeantSeg(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcGeantSeg[nElements] : new ::HMdcGeantSeg[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcGeantSeg(void *p) {
      delete ((::HMdcGeantSeg*)p);
   }
   static void deleteArray_HMdcGeantSeg(void *p) {
      delete [] ((::HMdcGeantSeg*)p);
   }
   static void destruct_HMdcGeantSeg(void *p) {
      typedef ::HMdcGeantSeg current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcGeantSeg(TBuffer &buf, void *obj) {
      ((::HMdcGeantSeg*)obj)->::HMdcGeantSeg::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcGeantSeg

//______________________________________________________________________________
void HMdcGeantTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcGeantTrack.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcGeantTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcGeantTrack.
      TClass *R__cl = ::HMdcGeantTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcCal1Cat", &pMdcCal1Cat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterMdcCal1", &iterMdcCal1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locMdcCal1", &locMdcCal1);
      R__insp.InspectMember(locMdcCal1, "locMdcCal1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeantKine", &pGeantKine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackNumber", &trackNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mom", &mom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isInMdcFlag", &isInMdcFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isInRichFlag", &isInRichFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isInMetaFlag", &isInMetaFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*segments", &segments);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arrSizeLoc", &arrSizeLoc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*arrSize", &arrSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arrOffset", &arrOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*arrGlobOffset", &arrGlobOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nGeantMdcHits", &nGeantMdcHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSegments", &nSegments);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWires", &nWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWSegments", &nWSegments);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcSector", &mdcSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcWSector", &mdcWSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nIOSeg", &nIOSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWIOSeg", &nWIOSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "directionFlag", &directionFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geantBugFlag", &geantBugFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackStatus", &trackStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debugPrintFlag", &debugPrintFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeantMdc", &pGeantMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeantMdcPrev", &pGeantMdcPrev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*segment", &segment);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "userFlag", &userFlag);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcGeantTrack(void *p) {
      return  p ? new(p) ::HMdcGeantTrack : new ::HMdcGeantTrack;
   }
   static void *newArray_HMdcGeantTrack(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcGeantTrack[nElements] : new ::HMdcGeantTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcGeantTrack(void *p) {
      delete ((::HMdcGeantTrack*)p);
   }
   static void deleteArray_HMdcGeantTrack(void *p) {
      delete [] ((::HMdcGeantTrack*)p);
   }
   static void destruct_HMdcGeantTrack(void *p) {
      typedef ::HMdcGeantTrack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcGeantTrack(TBuffer &buf, void *obj) {
      ((::HMdcGeantTrack*)obj)->::HMdcGeantTrack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcGeantTrack

//______________________________________________________________________________
void HMdcGeantEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcGeantEvent.

   TObjArray::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcGeantEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcGeantEvent.
      TClass *R__cl = ::HMdcGeantEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xVertex", &xVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yVertex", &yVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zVertex", &zVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "targNum", &targNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeantKineCat", &pGeantKineCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeantMdcCat", &pGeantMdcCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geantBugFlag", &geantBugFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debugPrintFlag", &debugPrintFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geantSegments", &geantSegments);
      R__insp.InspectMember(geantSegments, "geantSegments.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nGSegments", &nGSegments);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sizeGSegArr", &sizeGSegArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracks", &nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcListCells", &pMdcListCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMdcLCellsOwn", &isMdcLCellsOwn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcTrackInfSim", &mdcTrackInfSim);
      R__insp.InspectMember(mdcTrackInfSim, "mdcTrackInfSim.");
      TObjArray::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcGeantEvent(void *p) {
      return  p ? new(p) ::HMdcGeantEvent : new ::HMdcGeantEvent;
   }
   static void *newArray_HMdcGeantEvent(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcGeantEvent[nElements] : new ::HMdcGeantEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcGeantEvent(void *p) {
      delete ((::HMdcGeantEvent*)p);
   }
   static void deleteArray_HMdcGeantEvent(void *p) {
      delete [] ((::HMdcGeantEvent*)p);
   }
   static void destruct_HMdcGeantEvent(void *p) {
      typedef ::HMdcGeantEvent current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcGeantEvent(TBuffer &buf, void *obj) {
      ((::HMdcGeantEvent*)obj)->::HMdcGeantEvent::Streamer(buf);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_HMdcGeantEvent(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::HMdcGeantEvent*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::HMdcGeantEvent

//______________________________________________________________________________
void HMdcTrackInfSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackInfSim.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcTrackInfSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackInfSim.
      TClass *R__cl = ::HMdcTrackInfSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segment", &segment);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modInd", &modInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWiresTot", &nWiresTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isWrCollected", &isWrCollected);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numTracks", &numTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numWires[21]", numWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wiresList[21]", wiresList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gntTrackList[20]", &gntTrackList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gntSegList[20]", &gntSegList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segIngGTrack[20]", segIngGTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tracksNum[20]", tracksNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sortedInd[20]", sortedInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "embedInd", &embedInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noiseInd", &noiseInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listTmp", &listTmp);
      R__insp.InspectMember(listTmp, "listTmp.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWiresArr", &pWiresArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGntBugEvent", &isGntBugEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGntBugSeg", &isGntBugSeg);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrackInfSim(void *p) {
      return  p ? new(p) ::HMdcTrackInfSim : new ::HMdcTrackInfSim;
   }
   static void *newArray_HMdcTrackInfSim(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrackInfSim[nElements] : new ::HMdcTrackInfSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrackInfSim(void *p) {
      delete ((::HMdcTrackInfSim*)p);
   }
   static void deleteArray_HMdcTrackInfSim(void *p) {
      delete [] ((::HMdcTrackInfSim*)p);
   }
   static void destruct_HMdcTrackInfSim(void *p) {
      typedef ::HMdcTrackInfSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackInfSim(TBuffer &buf, void *obj) {
      ((::HMdcTrackInfSim*)obj)->::HMdcTrackInfSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackInfSim

//______________________________________________________________________________
void HMdcTrackFinder::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackFinder.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcTrackFinder::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackFinder.
      TClass *R__cl = ::HMdcTrackFinder::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLookUpTb", &fLookUpTb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*p34ClFinder", &p34ClFinder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pClusMetaMatch", &pClusMetaMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nModules[6]", nModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numLayers[6][4]", numLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "typeClFinder", &typeClFinder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isClustToHit", &isClustToHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusCat", &fClusCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegCat", &fSegCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "perMdcClus", &perMdcClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locClus", &locClus);
      R__insp.InspectMember(locClus, "locClus.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locNewCl", &locNewCl);
      R__insp.InspectMember(locNewCl, "locNewCl.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterClus", &iterClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*event", &event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMdcLCellsOwn", &isMdcLCellsOwn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*geantEvent", &geantEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGeantEventOwn", &isGeantEventOwn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "level4[2]", level4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "level5[2]", level5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clFndrLevel[6][4]", clFndrLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prntSt", &prntSt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tarSFinderOnly", &tarSFinderOnly);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrackFinder(void *p) {
      return  p ? new(p) ::HMdcTrackFinder : new ::HMdcTrackFinder;
   }
   static void *newArray_HMdcTrackFinder(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrackFinder[nElements] : new ::HMdcTrackFinder[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrackFinder(void *p) {
      delete ((::HMdcTrackFinder*)p);
   }
   static void deleteArray_HMdcTrackFinder(void *p) {
      delete [] ((::HMdcTrackFinder*)p);
   }
   static void destruct_HMdcTrackFinder(void *p) {
      typedef ::HMdcTrackFinder current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackFinder(TBuffer &buf, void *obj) {
      ((::HMdcTrackFinder*)obj)->::HMdcTrackFinder::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackFinder

//______________________________________________________________________________
void HMdcClus::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcClus.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcList12GroupCells::Streamer(R__b);
      R__b >> sec;
      R__b >> seg;
      R__b >> typeClFinder;
      R__b >> mod;
      R__b >> index;
      R__b >> x;
      R__b >> y;
      R__b >> xTarg;
      R__b >> yTarg;
      R__b >> zTarg;
      R__b >> errX;
      R__b >> errY;
      R__b >> errXTarg;
      R__b >> errYTarg;
      R__b >> errZTarg;
      R__b >> sumWt;
      R__b >> nBins;
      R__b >> minCl1;
      R__b >> minCl2;
      R__b >> realLevel;
      R__b >> nMergedClus;
      R__b >> indexPar;
      R__b >> indCh1;
      R__b >> indCh2;
      R__b >> parA;
      R__b >> parB;
      R__b >> parD;
      R__b >> status;
      R__b >> fakeFlag;
      R__b >> clFnLevelM1;
      R__b >> clusSizeM1;
      R__b >> nDrTimesM1;
      R__b >> nMergClusM1;
      R__b >> sigma1M1;
      R__b >> sigma2M1;
      R__b >> alphaM1;
      R__b >> clFnLevelM2;
      R__b >> clusSizeM2;
      R__b >> nDrTimesM2;
      R__b >> nMergClusM2;
      R__b >> sigma1M2;
      R__b >> sigma2M2;
      R__b >> alphaM2;
      R__b >> segIndex;
      R__b.CheckByteCount(R__s, R__c, HMdcClus::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcClus::IsA(), kTRUE);
      HMdcList12GroupCells::Streamer(R__b);
      R__b << sec;
      R__b << seg;
      R__b << typeClFinder;
      R__b << mod;
      R__b << index;
      R__b << x;
      R__b << y;
      R__b << xTarg;
      R__b << yTarg;
      R__b << zTarg;
      R__b << errX;
      R__b << errY;
      R__b << errXTarg;
      R__b << errYTarg;
      R__b << errZTarg;
      R__b << sumWt;
      R__b << nBins;
      R__b << minCl1;
      R__b << minCl2;
      R__b << realLevel;
      R__b << nMergedClus;
      R__b << indexPar;
      R__b << indCh1;
      R__b << indCh2;
      R__b << parA;
      R__b << parB;
      R__b << parD;
      R__b << status;
      R__b << fakeFlag;
      R__b << clFnLevelM1;
      R__b << clusSizeM1;
      R__b << nDrTimesM1;
      R__b << nMergClusM1;
      R__b << sigma1M1;
      R__b << sigma2M1;
      R__b << alphaM1;
      R__b << clFnLevelM2;
      R__b << clusSizeM2;
      R__b << nDrTimesM2;
      R__b << nMergClusM2;
      R__b << sigma1M2;
      R__b << sigma2M2;
      R__b << alphaM2;
      R__b << segIndex;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcClus::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcClus.
      TClass *R__cl = ::HMdcClus::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sec", &sec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seg", &seg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "typeClFinder", &typeClFinder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod", &mod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", &index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xTarg", &xTarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yTarg", &yTarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zTarg", &zTarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errX", &errX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errY", &errY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errXTarg", &errXTarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errYTarg", &errYTarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errZTarg", &errZTarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumWt", &sumWt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBins", &nBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minCl1", &minCl1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minCl2", &minCl2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "realLevel", &realLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMergedClus", &nMergedClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indexPar", &indexPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indCh1", &indCh1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indCh2", &indCh2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parA", &parA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parB", &parB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parD", &parD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fakeFlag", &fakeFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clFnLevelM1", &clFnLevelM1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusSizeM1", &clusSizeM1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDrTimesM1", &nDrTimesM1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMergClusM1", &nMergClusM1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma1M1", &sigma1M1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2M1", &sigma2M1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alphaM1", &alphaM1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clFnLevelM2", &clFnLevelM2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusSizeM2", &clusSizeM2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDrTimesM2", &nDrTimesM2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMergClusM2", &nMergClusM2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma1M2", &sigma1M2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2M2", &sigma2M2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alphaM2", &alphaM2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segIndex", &segIndex);
      HMdcList12GroupCells::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcClus(void *p) {
      return  p ? new(p) ::HMdcClus : new ::HMdcClus;
   }
   static void *newArray_HMdcClus(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcClus[nElements] : new ::HMdcClus[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcClus(void *p) {
      delete ((::HMdcClus*)p);
   }
   static void deleteArray_HMdcClus(void *p) {
      delete [] ((::HMdcClus*)p);
   }
   static void destruct_HMdcClus(void *p) {
      typedef ::HMdcClus current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcClus(TBuffer &buf, void *obj) {
      ((::HMdcClus*)obj)->::HMdcClus::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcClus

//______________________________________________________________________________
void HMdcClusSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcClusSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcClus::Streamer(R__b);
      R__b >> nTracks;
      R__b.ReadStaticArray((int*)listTr);
      R__b.ReadStaticArray((short*)nTimes);
      R__b.ReadStaticArray((unsigned char*)nLayers);
      R__b.ReadStaticArray((unsigned char*)nDigiTimes);
      R__b.ReadStaticArray((unsigned char*)trackStatus);
      R__b.ReadStaticArray((float*)xGeant);
      R__b.ReadStaticArray((float*)yGeant);
      R__b >> nNotFakeTracks;
      R__b >> ioSMatchStatus;
      R__b.CheckByteCount(R__s, R__c, HMdcClusSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcClusSim::IsA(), kTRUE);
      HMdcClus::Streamer(R__b);
      R__b << nTracks;
      R__b.WriteArray(listTr, 5);
      R__b.WriteArray(nTimes, 5);
      R__b.WriteArray((unsigned char*)nLayers, 10);
      R__b.WriteArray(nDigiTimes, 5);
      R__b.WriteArray(trackStatus, 5);
      R__b.WriteArray(xGeant, 5);
      R__b.WriteArray(yGeant, 5);
      R__b << nNotFakeTracks;
      R__b << ioSMatchStatus;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcClusSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcClusSim.
      TClass *R__cl = ::HMdcClusSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracks", &nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listTr[5]", listTr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTimes[5]", nTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayers[5][2]", nLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDigiTimes[5]", nDigiTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackStatus[5]", trackStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xGeant[5]", xGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yGeant[5]", yGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nNotFakeTracks", &nNotFakeTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ioSMatchStatus", &ioSMatchStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracksM[2]", nTracksM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listTrM[2][5]", listTrM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTimesM[2][5]", nTimesM);
      HMdcClus::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcClusSim(void *p) {
      return  p ? new(p) ::HMdcClusSim : new ::HMdcClusSim;
   }
   static void *newArray_HMdcClusSim(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcClusSim[nElements] : new ::HMdcClusSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcClusSim(void *p) {
      delete ((::HMdcClusSim*)p);
   }
   static void deleteArray_HMdcClusSim(void *p) {
      delete [] ((::HMdcClusSim*)p);
   }
   static void destruct_HMdcClusSim(void *p) {
      typedef ::HMdcClusSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcClusSim(TBuffer &buf, void *obj) {
      ((::HMdcClusSim*)obj)->::HMdcClusSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcClusSim

//______________________________________________________________________________
void HMdcTBArray::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTBArray.

   ::Error("HMdcTBArray::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void HMdcTBArray::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTBArray.
      TClass *R__cl = ::HMdcTBArray::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTBArray(TBuffer &buf, void *obj) {
      ((::HMdcTBArray*)obj)->::HMdcTBArray::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTBArray

//______________________________________________________________________________
void HMdcBArray::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcBArray.

   ::Error("HMdcBArray::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void HMdcBArray::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcBArray.
      TClass *R__cl = ::HMdcBArray::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcBArray(TBuffer &buf, void *obj) {
      ((::HMdcBArray*)obj)->::HMdcBArray::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcBArray

//______________________________________________________________________________
void HMdcLayListCells::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLayListCells.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcLayListCells::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLayListCells.
      TClass *R__cl = ::HMdcLayListCells::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arr[56]", arr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*arrEnd", &arrEnd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*drTime1", &drTime1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*drTime2", &drTime2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tof1", &tof1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tof2", &tof2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nClust", &nClust);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nRClust", &nRClust);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nFitted", &nFitted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nRFitted", &nRFitted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nFittedTot", &nFittedTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gnTrackNum1", &gnTrackNum1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gnTrackNum2", &gnTrackNum2);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLayListCells(void *p) {
      return  p ? new(p) ::HMdcLayListCells : new ::HMdcLayListCells;
   }
   static void *newArray_HMdcLayListCells(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLayListCells[nElements] : new ::HMdcLayListCells[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLayListCells(void *p) {
      delete ((::HMdcLayListCells*)p);
   }
   static void deleteArray_HMdcLayListCells(void *p) {
      delete [] ((::HMdcLayListCells*)p);
   }
   static void destruct_HMdcLayListCells(void *p) {
      typedef ::HMdcLayListCells current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLayListCells(TBuffer &buf, void *obj) {
      ((::HMdcLayListCells*)obj)->::HMdcLayListCells::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLayListCells

//______________________________________________________________________________
void HMdcModListCells::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcModListCells.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcModListCells::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcModListCells.
      TClass *R__cl = ::HMdcModListCells::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "list[6]", list);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcModListCells(void *p) {
      return  p ? new(p) ::HMdcModListCells : new ::HMdcModListCells;
   }
   static void *newArray_HMdcModListCells(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcModListCells[nElements] : new ::HMdcModListCells[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcModListCells(void *p) {
      delete ((::HMdcModListCells*)p);
   }
   static void deleteArray_HMdcModListCells(void *p) {
      delete [] ((::HMdcModListCells*)p);
   }
   static void destruct_HMdcModListCells(void *p) {
      typedef ::HMdcModListCells current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcModListCells(TBuffer &buf, void *obj) {
      ((::HMdcModListCells*)obj)->::HMdcModListCells::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcModListCells

//______________________________________________________________________________
void HMdcSecListCells::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcSecListCells.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcSecListCells::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcSecListCells.
      TClass *R__cl = ::HMdcSecListCells::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "list[4]", list);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcSecListCells(void *p) {
      return  p ? new(p) ::HMdcSecListCells : new ::HMdcSecListCells;
   }
   static void *newArray_HMdcSecListCells(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcSecListCells[nElements] : new ::HMdcSecListCells[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcSecListCells(void *p) {
      delete ((::HMdcSecListCells*)p);
   }
   static void deleteArray_HMdcSecListCells(void *p) {
      delete [] ((::HMdcSecListCells*)p);
   }
   static void destruct_HMdcSecListCells(void *p) {
      typedef ::HMdcSecListCells current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcSecListCells(TBuffer &buf, void *obj) {
      ((::HMdcSecListCells*)obj)->::HMdcSecListCells::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcSecListCells

//______________________________________________________________________________
void HMdcEvntListCells::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcEvntListCells.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcEvntListCells::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcEvntListCells.
      TClass *R__cl = ::HMdcEvntListCells::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "list[6]", list);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcCal1Cat", &pMdcCal1Cat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterMdcCal1", &iterMdcCal1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGeant", &isGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pDrTimeCut", &pDrTimeCut);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcEvntListCells(void *p) {
      return  p ? new(p) ::HMdcEvntListCells : new ::HMdcEvntListCells;
   }
   static void *newArray_HMdcEvntListCells(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcEvntListCells[nElements] : new ::HMdcEvntListCells[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcEvntListCells(void *p) {
      delete ((::HMdcEvntListCells*)p);
   }
   static void deleteArray_HMdcEvntListCells(void *p) {
      delete [] ((::HMdcEvntListCells*)p);
   }
   static void destruct_HMdcEvntListCells(void *p) {
      typedef ::HMdcEvntListCells current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcEvntListCells(TBuffer &buf, void *obj) {
      ((::HMdcEvntListCells*)obj)->::HMdcEvntListCells::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcEvntListCells

//______________________________________________________________________________
void HMdcList12GroupCells::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcList12GroupCells.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.ReadStaticArray((unsigned char*)arr);
      R__b.ReadStaticArray((int*)firstCell);
      R__b.CheckByteCount(R__s, R__c, HMdcList12GroupCells::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcList12GroupCells::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.WriteArray(arr, 144);
      R__b.WriteArray(firstCell, 12);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcList12GroupCells::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcList12GroupCells.
      TClass *R__cl = ::HMdcList12GroupCells::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arr[144]", arr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstCell[12]", firstCell);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcList12GroupCells(void *p) {
      return  p ? new(p) ::HMdcList12GroupCells : new ::HMdcList12GroupCells;
   }
   static void *newArray_HMdcList12GroupCells(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcList12GroupCells[nElements] : new ::HMdcList12GroupCells[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcList12GroupCells(void *p) {
      delete ((::HMdcList12GroupCells*)p);
   }
   static void deleteArray_HMdcList12GroupCells(void *p) {
      delete [] ((::HMdcList12GroupCells*)p);
   }
   static void destruct_HMdcList12GroupCells(void *p) {
      typedef ::HMdcList12GroupCells current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcList12GroupCells(TBuffer &buf, void *obj) {
      ((::HMdcList12GroupCells*)obj)->::HMdcList12GroupCells::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcList12GroupCells

//______________________________________________________________________________
void HMdcList24GroupCells::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcList24GroupCells.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.ReadStaticArray((unsigned char*)arr);
      R__b.ReadStaticArray((int*)firstCell);
      R__b.CheckByteCount(R__s, R__c, HMdcList24GroupCells::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcList24GroupCells::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.WriteArray(arr, 288);
      R__b.WriteArray(firstCell, 24);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcList24GroupCells::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcList24GroupCells.
      TClass *R__cl = ::HMdcList24GroupCells::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arr[288]", arr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstCell[24]", firstCell);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcList24GroupCells(void *p) {
      return  p ? new(p) ::HMdcList24GroupCells : new ::HMdcList24GroupCells;
   }
   static void *newArray_HMdcList24GroupCells(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcList24GroupCells[nElements] : new ::HMdcList24GroupCells[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcList24GroupCells(void *p) {
      delete ((::HMdcList24GroupCells*)p);
   }
   static void deleteArray_HMdcList24GroupCells(void *p) {
      delete [] ((::HMdcList24GroupCells*)p);
   }
   static void destruct_HMdcList24GroupCells(void *p) {
      typedef ::HMdcList24GroupCells current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcList24GroupCells(TBuffer &buf, void *obj) {
      ((::HMdcList24GroupCells*)obj)->::HMdcList24GroupCells::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcList24GroupCells

//______________________________________________________________________________
void HMdcProjPlot::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcProjPlot.

   HMdcPlane::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcProjPlot::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcProjPlot.
      TClass *R__cl = ::HMdcProjPlot::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yMin", &yMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yMax", &yMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xMin", &xMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xMax", &xMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xMinD", &xMinD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xMaxD", &xMaxD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBinX", &nBinX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stX", &stX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBinY", &nBinY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stY", &stY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xMinL", &xMinL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xMaxL", &xMaxL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*yMinL", &yMinL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xBinsPos", &xBinsPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*yBinsPos", &yBinsPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xFirstBin", &xFirstBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yFirstBin", &yFirstBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rootPlot", &rootPlot);
      HMdcPlane::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdcProjPlot(void *p) {
      delete ((::HMdcProjPlot*)p);
   }
   static void deleteArray_HMdcProjPlot(void *p) {
      delete [] ((::HMdcProjPlot*)p);
   }
   static void destruct_HMdcProjPlot(void *p) {
      typedef ::HMdcProjPlot current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcProjPlot(TBuffer &buf, void *obj) {
      ((::HMdcProjPlot*)obj)->::HMdcProjPlot::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcProjPlot

//______________________________________________________________________________
void HMdc34ClFinder::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdc34ClFinder.

   HParSet::Streamer(R__b);
}

//______________________________________________________________________________
void HMdc34ClFinder::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdc34ClFinder.
      TClass *R__cl = ::HMdc34ClFinder::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGetCont", &fGetCont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSpecGeomPar", &fSpecGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSizesCells", &fSizesCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kickPlane", &kickPlane);
      R__insp.InspectMember(kickPlane, "kickPlane.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcGeomPar", &fMdcGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcClusCat", &fMdcClusCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xMinClLines", &xMinClLines);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xMaxClLines", &xMaxClLines);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*stack", &stack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*stacksArr", &stacksArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMetaMatch", &pMetaMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutDxDyArr[36]", cutDxDyArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useDxDyCut", &useDxDyCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useKickCor", &useKickCor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pKickCor", &pKickCor);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HMdc34ClFinder(TBuffer &buf, void *obj) {
      ((::HMdc34ClFinder*)obj)->::HMdc34ClFinder::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdc34ClFinder

//______________________________________________________________________________
void HMdc34ClFinderSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdc34ClFinderSec.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdc34ClFinderSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdc34ClFinderSec.
      TClass *R__cl = ::HMdc34ClFinderSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMetaMatch", &pMetaMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lMods[4]", lMods);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mSeg[2]", mSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fkick", &fkick);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "target[2]", target);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*prPlotSeg2", &prPlotSeg2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seg1", &seg1);
      R__insp.InspectMember(seg1, "seg1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dirSeg1", &dirSeg1);
      R__insp.InspectMember(dirSeg1, "dirSeg1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segRegOnKick[4]", segRegOnKick);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segOnKick", &segOnKick);
      R__insp.InspectMember(segOnKick, "segOnKick.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errSegOnKick", &errSegOnKick);
      R__insp.InspectMember(errSegOnKick, "errSegOnKick.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "al[4]", al);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bl[4]", bl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cl[4]", cl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nbX[4]", nbX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minAmp[4]", minAmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxAmp[4]", maxAmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "notEnoughWrs", &notEnoughWrs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nearbyBins[8]", nearbyBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*stack", &stack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*stacksArr", &stacksArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xMinClLines", &xMinClLines);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xMaxClLines", &xMaxClLines);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLMinCl", &nLMinCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLMaxCl", &nLMaxCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isClstrInited", &isClstrInited);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indexPar", &indexPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indexFCh", &indexFCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indexLCh", &indexLCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xCMin", &xCMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xCMax", &xCMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cFMod", &cFMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cFLay", &cFLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBinX", &nBinX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layInd", &layInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcTDist", &tdcTDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBinYM2", &nBinYM2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shUp", &shUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shDown", &shDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nYLinesL", &nYLinesL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xBin1L", &xBin1L);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xBin2L", &xBin2L);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ny1", &ny1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ny2", &ny2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nbL", &nbL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nbF", &nbF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "oneArrLay[6][4]", oneArrLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*oneArr", &oneArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bitsSetLay[6]", bitsSetLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bitsSet", &bitsSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sUAr[12][420]", sUAr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sDAr[12][420]", sDAr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cNum[12][420]", cNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLayPar[12][420]", &pLayPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPRg[12]", nPRg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*shUpArr", &shUpArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*shDnArr", &shDnArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cellNum", &cellNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*numPrRegs", &numPrRegs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cFLayArr", &cFLayArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "regInd", &regInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shDownMax", &shDownMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*weightsArr", &weightsArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seg2MinAmpCut", &seg2MinAmpCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pListCells", &pListCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusCat", &fClusCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locClus", &locClus);
      R__insp.InspectMember(locClus, "locClus.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGeant", &isGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "typeClFinder", &typeClFinder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "realTypeClFinder", &realTypeClFinder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pClustersArrs", &pClustersArrs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusArrSize", &clusArrSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*clusArr", &clusArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nClsArr", &nClsArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cluster", &cluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pDriftTimeParSec", &pDriftTimeParSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDistCut", &dDistCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDistYCorr", &dDistYCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDCutCorr[12]", dDCutCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useDriftTime", &useDriftTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useDxDyCut", &useDxDyCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutDxDyArr[36]", cutDxDyArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cutXBins[36]", &cutXBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nYLinesInCut[36]", nYLinesInCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yLineMin[36]", yLineMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yLineMax[36]", yLineMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x0", &x0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y0", &y0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xBin0", &xBin0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yBin0", &yBin0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dXdYCutReg", &dXdYCutReg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yMinDxDyCut", &yMinDxDyCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yMaxDxDyCut", &yMaxDxDyCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yBinToDxDyInd", &yBinToDxDyInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fakeSuppFlag", &fakeSuppFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wLev", &wLev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wBin", &wBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wLay", &wLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dWtCut", &dWtCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pKickCor", &pKickCor);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HMdc34ClFinderSec(TBuffer &buf, void *obj) {
      ((::HMdc34ClFinderSec*)obj)->::HMdc34ClFinderSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdc34ClFinderSec

//______________________________________________________________________________
void HMdc34ClFinderMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdc34ClFinderMod.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdc34ClFinderMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdc34ClFinderMod.
      TClass *R__cl = ::HMdc34ClFinderMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdc34ClFinderMod(void *p) {
      delete ((::HMdc34ClFinderMod*)p);
   }
   static void deleteArray_HMdc34ClFinderMod(void *p) {
      delete [] ((::HMdc34ClFinderMod*)p);
   }
   static void destruct_HMdc34ClFinderMod(void *p) {
      typedef ::HMdc34ClFinderMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdc34ClFinderMod(TBuffer &buf, void *obj) {
      ((::HMdc34ClFinderMod*)obj)->::HMdc34ClFinderMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdc34ClFinderMod

//______________________________________________________________________________
void HMdc34ClFinderLayer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdc34ClFinderLayer.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdc34ClFinderLayer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdc34ClFinderLayer.
      TClass *R__cl = ::HMdc34ClFinderLayer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layer", &layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSCLay", &pSCLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cells", &cells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCells", &nCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBinX", &nBinX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*yBin", &yBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yFirst", &yFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nYLines", &nYLines);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wOrType", &wOrType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xBin1", &xBin1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xBin2", &xBin2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tgY", &tgY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tgZ", &tgZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y0[2]", y0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z0[2]", z0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yStep", &yStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zStep", &zStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPSegOnKick[2][2]", nPSegOnKick);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxDrDist", &maxDrDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y0w", &y0w);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z0w", &z0w);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xWirDir", &xWirDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yWirDir", &yWirDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zWirDir", &zWirDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yCross", &yCross);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layerPart", &layerPart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nextPartFCell", &nextPartFCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*layerNextPart", &layerNextPart);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdc34ClFinderLayer(void *p) {
      delete ((::HMdc34ClFinderLayer*)p);
   }
   static void deleteArray_HMdc34ClFinderLayer(void *p) {
      delete [] ((::HMdc34ClFinderLayer*)p);
   }
   static void destruct_HMdc34ClFinderLayer(void *p) {
      typedef ::HMdc34ClFinderLayer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdc34ClFinderLayer(TBuffer &buf, void *obj) {
      ((::HMdc34ClFinderLayer*)obj)->::HMdc34ClFinderLayer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdc34ClFinderLayer

//______________________________________________________________________________
void HMdcClusMetaMatch::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcClusMetaMatch.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcClusMetaMatch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcClusMetaMatch.
      TClass *R__cl = ::HMdcClusMetaMatch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTofGeometry", &pTofGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatTof", &pCatTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterTof", &iterTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatTofCluster", &pCatTofCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterTofCluster", &iterTofCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRpcGeometry", &pRpcGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatRpc", &pCatRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterRpc", &iterRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pShrGeometry", &pShrGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatShower", &pCatShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterShower", &iterShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGeant", &isGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMatchPar", &pMatchPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qualityMulp2", &qualityMulp2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2TofXi[6]", sigma2TofXi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2TofYi[6]", sigma2TofYi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetTofX[6]", offsetTofX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetTofY[6]", offsetTofY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality2TofCut[6]", quality2TofCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2RpcX[6]", sigma2RpcX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2RpcY[6]", sigma2RpcY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetRpcX[6]", offsetRpcX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetRpcY[6]", offsetRpcY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality2RpcCut[6]", quality2RpcCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2ShrX[6]", sigma2ShrX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2ShrY[6]", sigma2ShrY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetShrX[6]", offsetShrX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetShrY[6]", offsetShrY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality2ShrCut[6]", quality2ShrCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcSecModTrans[6][12]", rpcSecModTrans);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shrSecModTrans[6][12]", shrSecModTrans);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofSecModTrans[6][8][12]", tofSecModTrans);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofLabModTrans[6][8][12]", tofLabModTrans);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRpcHits[6]", nRpcHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcHitArr[6][200]", rpcHitArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nShowerHits[6]", nShowerHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shrHitArr[6][200]", shrHitArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTofHits[6]", nTofHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofHitArr[6][100]", tofHitArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fillPlots", &fillPlots);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rpcPlots[6]", &rpcPlots);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*shrPlots[6]", &shrPlots);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tofPlots[6]", &tofPlots);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcClusMetaMatch(void *p) {
      return  p ? new(p) ::HMdcClusMetaMatch : new ::HMdcClusMetaMatch;
   }
   static void *newArray_HMdcClusMetaMatch(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcClusMetaMatch[nElements] : new ::HMdcClusMetaMatch[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcClusMetaMatch(void *p) {
      delete ((::HMdcClusMetaMatch*)p);
   }
   static void deleteArray_HMdcClusMetaMatch(void *p) {
      delete [] ((::HMdcClusMetaMatch*)p);
   }
   static void destruct_HMdcClusMetaMatch(void *p) {
      typedef ::HMdcClusMetaMatch current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcClusMetaMatch(TBuffer &buf, void *obj) {
      ((::HMdcClusMetaMatch*)obj)->::HMdcClusMetaMatch::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcClusMetaMatch

//______________________________________________________________________________
void HMdcKickPlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcKickPlane.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcKickPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcKickPlane.
      TClass *R__cl = ::HMdcKickPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDzLimit[2]", fDzLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDx", &fDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDz[3]", fDz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fC[3]", fC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parA[3]", parA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parB[3]", parB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parD[3]", parD);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcKickPlane(void *p) {
      return  p ? new(p) ::HMdcKickPlane : new ::HMdcKickPlane;
   }
   static void *newArray_HMdcKickPlane(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcKickPlane[nElements] : new ::HMdcKickPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcKickPlane(void *p) {
      delete ((::HMdcKickPlane*)p);
   }
   static void deleteArray_HMdcKickPlane(void *p) {
      delete [] ((::HMdcKickPlane*)p);
   }
   static void destruct_HMdcKickPlane(void *p) {
      typedef ::HMdcKickPlane current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcKickPlane(TBuffer &buf, void *obj) {
      ((::HMdcKickPlane*)obj)->::HMdcKickPlane::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcKickPlane

//______________________________________________________________________________
void HMdcEfficiency::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcEfficiency.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcEfficiency::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcEfficiency.
      TClass *R__cl = ::HMdcEfficiency::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCreated", &isCreated);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalCat", &fCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusCat", &fClusCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGeant", &isGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterClus", &iterClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLookUpTb", &fLookUpTb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGetCont", &fGetCont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSizesCells", &fSizesCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*evHeader", &evHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventId", &eventId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "typePrPlot[6]", typePrPlot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canvEventProj", &canvEventProj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "drawGoodClus", &drawGoodClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nameCanvEvent", &nameCanvEvent);
      R__insp.InspectMember(nameCanvEvent, "nameCanvEvent.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nameCanvEventCurr", &nameCanvEventCurr);
      R__insp.InspectMember(nameCanvEventCurr, "nameCanvEventCurr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "titleCanvEvent", &titleCanvEvent);
      R__insp.InspectMember(titleCanvEvent, "titleCanvEvent.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstEvent", &firstEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileName", &fileName);
      R__insp.InspectMember(fileName, "fileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileId", &fileId);
      R__insp.InspectMember(fileId, "fileId.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fcut", &fcut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canvasSummary", &canvasSummary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histSummary", &histSummary);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcEfficiency(void *p) {
      return  p ? new(p) ::HMdcEfficiency : new ::HMdcEfficiency;
   }
   static void *newArray_HMdcEfficiency(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcEfficiency[nElements] : new ::HMdcEfficiency[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcEfficiency(void *p) {
      delete ((::HMdcEfficiency*)p);
   }
   static void deleteArray_HMdcEfficiency(void *p) {
      delete [] ((::HMdcEfficiency*)p);
   }
   static void destruct_HMdcEfficiency(void *p) {
      typedef ::HMdcEfficiency current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcEfficiency(TBuffer &buf, void *obj) {
      ((::HMdcEfficiency*)obj)->::HMdcEfficiency::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcEfficiency

//______________________________________________________________________________
void HMdcEfficiencySec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcEfficiencySec.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcEfficiencySec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcEfficiencySec.
      TClass *R__cl = ::HMdcEfficiencySec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canvPlotProj", &canvPlotProj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nameCanvProj", &nameCanvProj);
      R__insp.InspectMember(nameCanvProj, "nameCanvProj.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "titleCanvProj", &titleCanvProj);
      R__insp.InspectMember(titleCanvProj, "titleCanvProj.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canvPlotsHits", &canvPlotsHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nameCanvHits", &nameCanvHits);
      R__insp.InspectMember(nameCanvHits, "nameCanvHits.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "titleCanvHits", &titleCanvHits);
      R__insp.InspectMember(titleCanvHits, "titleCanvHits.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*plotHits[2]", &plotHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileName", &fileName);
      R__insp.InspectMember(fileName, "fileName.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdcEfficiencySec(void *p) {
      delete ((::HMdcEfficiencySec*)p);
   }
   static void deleteArray_HMdcEfficiencySec(void *p) {
      delete [] ((::HMdcEfficiencySec*)p);
   }
   static void destruct_HMdcEfficiencySec(void *p) {
      typedef ::HMdcEfficiencySec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcEfficiencySec(TBuffer &buf, void *obj) {
      ((::HMdcEfficiencySec*)obj)->::HMdcEfficiencySec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcEfficiencySec

//______________________________________________________________________________
void HMdcEfficiencyMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcEfficiencyMod.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcEfficiencyMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcEfficiencyMod.
      TClass *R__cl = ::HMdcEfficiencyMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n0", &n0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n1", &n1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n2", &n2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xLow", &xLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xUp", &xUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dX", &dX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yLow", &yLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yUp", &yUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dY", &dY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n0xy[256]", n0xy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n1xy[256]", n1xy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n2xy[256]", n2xy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcEffLay[6]", mdcEffLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listLayers[6]", listLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPads", &nPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canvases[6]", &canvases);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nameCanv[6]", nameCanv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "titleCanv[6]", titleCanv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eff", &eff);
      R__insp.InspectMember(eff, "eff.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "effMod", &effMod);
      R__insp.InspectMember(effMod, "effMod.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*flookupGMod", &flookupGMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*frawModStru", &frawModStru);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nChannels", &nChannels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canvasMb", &canvasMb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nameCanvMb", &nameCanvMb);
      R__insp.InspectMember(nameCanvMb, "nameCanvMb.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "titleCanvMb", &titleCanvMb);
      R__insp.InspectMember(titleCanvMb, "titleCanvMb.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mbSlider", &mbSlider);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nameSliderMb[20]", nameSliderMb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hsEffMb", &hsEffMb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hsEffMb4", &hsEffMb4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hsPattMbNoCut", &hsPattMbNoCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hsPattMbCutS", &hsPattMbCutS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hsPattMbAfCut", &hsPattMbAfCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hsPattMbClust", &hsPattMbClust);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hsTimes[9]", &hsTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*drHsTimes[15]", &drHsTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*plToTvsT1", &plToTvsT1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*drPlToTvsT1", &drPlToTvsT1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tCutBox", &tCutBox);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tCutBox2", &tCutBox2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minTimeBin[3]", minTimeBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxTimeBin[3]", maxTimeBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nameCanvTimes", &nameCanvTimes);
      R__insp.InspectMember(nameCanvTimes, "nameCanvTimes.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "titleCanvTimes", &titleCanvTimes);
      R__insp.InspectMember(titleCanvTimes, "titleCanvTimes.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "biningTimes", &biningTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileName", &fileName);
      R__insp.InspectMember(fileName, "fileName.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdcEfficiencyMod(void *p) {
      delete ((::HMdcEfficiencyMod*)p);
   }
   static void deleteArray_HMdcEfficiencyMod(void *p) {
      delete [] ((::HMdcEfficiencyMod*)p);
   }
   static void destruct_HMdcEfficiencyMod(void *p) {
      typedef ::HMdcEfficiencyMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcEfficiencyMod(TBuffer &buf, void *obj) {
      ((::HMdcEfficiencyMod*)obj)->::HMdcEfficiencyMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcEfficiencyMod

//______________________________________________________________________________
void HMdcEfficiencyLayer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcEfficiencyLayer.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcEfficiencyLayer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcEfficiencyLayer.
      TClass *R__cl = ::HMdcEfficiencyLayer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layer", &layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "is", &is);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCells", &nCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nCellTot", &nCellTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nCellCutS", &nCellCutS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nCellStat", &nCellStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nCellsClus", &nCellsClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*n0", &n0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*n1", &n1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*n2", &n2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eff", &eff);
      R__insp.InspectMember(eff, "eff.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hists[14]", &hists);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPads", &nPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listPads[6]", listPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canvEff", &canvEff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nameCanv", &nameCanv);
      R__insp.InspectMember(nameCanv, "nameCanv.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "titleCanv", &titleCanv);
      R__insp.InspectMember(titleCanv, "titleCanv.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "effXY", &effXY);
      R__insp.InspectMember(effXY, "effXY.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canvXY[3]", &canvXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nameCanvXY[3]", nameCanvXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "titleCanvXY[3]", titleCanvXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "titlePadXY[3]", titlePadXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indDrawTitXY[3]", indDrawTitXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBinsSumXY", &nBinsSumXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n0xy[256]", n0xy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n1xy[256]", n1xy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n2xy[256]", n2xy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pvTxEffXY[3][256]", pvTxEffXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indDrawPv[3][256]", indDrawPv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nClustCell", &nClustCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileName", &fileName);
      R__insp.InspectMember(fileName, "fileName.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcEfficiencyLayer(void *p) {
      return  p ? new(p) ::HMdcEfficiencyLayer : new ::HMdcEfficiencyLayer;
   }
   static void *newArray_HMdcEfficiencyLayer(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcEfficiencyLayer[nElements] : new ::HMdcEfficiencyLayer[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcEfficiencyLayer(void *p) {
      delete ((::HMdcEfficiencyLayer*)p);
   }
   static void deleteArray_HMdcEfficiencyLayer(void *p) {
      delete [] ((::HMdcEfficiencyLayer*)p);
   }
   static void destruct_HMdcEfficiencyLayer(void *p) {
      typedef ::HMdcEfficiencyLayer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcEfficiencyLayer(TBuffer &buf, void *obj) {
      ((::HMdcEfficiencyLayer*)obj)->::HMdcEfficiencyLayer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcEfficiencyLayer

//______________________________________________________________________________
void HMdcEff::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcEff.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcEff::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcEff.
      TClass *R__cl = ::HMdcEff::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tNhits", &tNhits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tNhitsCutS", &tNhitsCutS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tNhitsNoCut", &tNhitsNoCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tNhitsClus", &tNhitsClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n0", &n0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errN0", &errN0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n1", &n1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errN1", &errN1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n2m", &n2m);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errN2m", &errN2m);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n2b", &n2b);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errN2b", &errN2b);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "feff", &feff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errEff", &errEff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eM", &eM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errM", &errM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "single", &single);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errSingle", &errSingle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p0", &p0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errP0", &errP0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p1", &p1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errP1", &errP1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p2", &p2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errP2", &errP2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totNumTr", &totNumTr);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcEff(void *p) {
      return  p ? new(p) ::HMdcEff : new ::HMdcEff;
   }
   static void *newArray_HMdcEff(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcEff[nElements] : new ::HMdcEff[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcEff(void *p) {
      delete ((::HMdcEff*)p);
   }
   static void deleteArray_HMdcEff(void *p) {
      delete [] ((::HMdcEff*)p);
   }
   static void destruct_HMdcEff(void *p) {
      typedef ::HMdcEff current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcEff(TBuffer &buf, void *obj) {
      ((::HMdcEff*)obj)->::HMdcEff::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcEff

//______________________________________________________________________________
void HMdcEffMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcEffMod.

   HMdcEff::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcEffMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcEffMod.
      TClass *R__cl = ::HMdcEffMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p0l", &p0l);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p1l", &p1l);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p2l", &p2l);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p3l", &p3l);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p4l", &p4l);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p5l", &p5l);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p6l", &p6l);
      HMdcEff::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcEffMod(void *p) {
      return  p ? new(p) ::HMdcEffMod : new ::HMdcEffMod;
   }
   static void *newArray_HMdcEffMod(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcEffMod[nElements] : new ::HMdcEffMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcEffMod(void *p) {
      delete ((::HMdcEffMod*)p);
   }
   static void deleteArray_HMdcEffMod(void *p) {
      delete [] ((::HMdcEffMod*)p);
   }
   static void destruct_HMdcEffMod(void *p) {
      typedef ::HMdcEffMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcEffMod(TBuffer &buf, void *obj) {
      ((::HMdcEffMod*)obj)->::HMdcEffMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcEffMod

//______________________________________________________________________________
void HMdcEffMenu::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcEffMenu.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcEffMenu::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcEffMenu.
      TClass *R__cl = ::HMdcEffMenu::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDialog", &fDialog);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWidgets", &fWidgets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "width", &width);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "height", &height);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sHeight", &sHeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dHeight", &dHeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sWidth", &sWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dWidth", &dWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stopLoop", &stopLoop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mdcEff", &mdcEff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*feffSec", &feffSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*feffMod", &feffMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*feffLay", &feffLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bSecMod[6][4]", &bSecMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bLayer[6]", &bLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bGroupMdcLay[2]", &bGroupMdcLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*button[30]", &button);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bPlot[3]", &bPlot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bTypePlot[3]", &bTypePlot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bDrClSel", &bDrClSel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bHist[6]", &bHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bHistMb", &bHistMb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bXYlayer", &bXYlayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bTimes", &bTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bSummary", &bSummary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indSec[6]", indSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indMod[6][4]", indMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indLay[6]", indLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numLay", &numLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indPlot[3]", indPlot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "typePlot", &typePlot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indHist[6]", indHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indHistMb", &indHistMb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numHists", &numHists);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indXYlayers", &indXYlayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indTimes", &indTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indSummary", &indSummary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indGroup[2]", indGroup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumBnXY", &sumBnXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumBnTimes", &sumBnTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pvLSumXY", &pvLSumXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pvLSumTimes", &pvLSumTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name[100]", name);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doThis[100]", doThis);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*text", &text);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totModsSel", &totModsSel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTotEv", &nTotEv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calcEffFlag", &calcEffFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventLoopFlag", &eventLoopFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEvLoopAdd", &nEvLoopAdd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "endOfData", &endOfData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lbEvTot", &lbEvTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lbEvLoop", &lbEvLoop);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcEffMenu(TBuffer &buf, void *obj) {
      ((::HMdcEffMenu*)obj)->::HMdcEffMenu::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcEffMenu

//______________________________________________________________________________
void HMdcTargetMon::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTargetMon.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcTargetMon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTargetMon.
      TClass *R__cl = ::HMdcTargetMon::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mode", &mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "typePrintFile", &typePrintFile);
      R__insp.InspectMember(typePrintFile, "typePrintFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "formatEpsTo", &formatEpsTo);
      R__insp.InspectMember(formatEpsTo, "formatEpsTo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deleteEpsFile", &deleteEpsFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcHitCat", &fMdcHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterMdcHit", &iterMdcHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locHit", &locHit);
      R__insp.InspectMember(locHit, "locHit.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*evHeader", &evHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "target[6]", target);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useRtdbTarger[6]", useRtdbTarger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHldGrepFSrc", &pHldGrepFSrc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHldRemoteSrc", &pHldRemoteSrc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCoilOff", &isCoilOff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstEvent", &firstEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dateFEvent", &dateFEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeFEvent", &timeFEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dateLEvent", &dateLEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeLEvent", &timeLEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runId", &runId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileName", &fileName);
      R__insp.InspectMember(fileName, "fileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileNameR", &fileNameR);
      R__insp.InspectMember(fileNameR, "fileNameR.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dateTime", &dateTime);
      R__insp.InspectMember(dateTime, "dateTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*transf[24]", &transf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPads[6]", nPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPads[6][18]", &fPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*label", &label);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcInSec[6]", mdcInSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listMdc[24]", listMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "selectEvByTBits", &selectEvByTBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi[24][1000]", phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x[24][1000]", x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y[24][1000]", y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z[24][1000]", z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nhits[24]", nhits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trArr[10000]", trArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normalizeHists", &normalizeHists);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhiCut", &dPhiCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r0Cut", &r0Cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "combToMdc[6][2]", combToMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dPhiH[6]", &dPhiH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*r0H[6]", &r0H);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zVerH[6][6]", &zVerH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zVerDscH[6][6][10]", &zVerDscH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zVerVsEventH[6][6]", &zVerVsEventH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histsMode", &histsMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nZmBins", &nZmBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zmin", &zmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zmax", &zmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "canvasWidth", &canvasWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "canvasHeight", &canvasHeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cnComb[6][100]", cnComb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ctComb[6][100]", ctComb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canvs[6]", &canvs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "addCnName", &addCnName);
      R__insp.InspectMember(addCnName, "addCnName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timer", &timer);
      R__insp.InspectMember(timer, "timer.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "plotType", &plotType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeStep", &timeStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stat", &stat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumOfFiles", &sumOfFiles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventCounter", &eventCounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numEventsSave", &numEventsSave);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numRunEvents", &numRunEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numNRunsEvents", &numNRunsEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "collectNRuns", &collectNRuns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runsCounter", &runsCounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstRunName", &firstRunName);
      R__insp.InspectMember(firstRunName, "firstRunName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lastRunName", &lastRunName);
      R__insp.InspectMember(lastRunName, "lastRunName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dPhiForNR[6]", &dPhiForNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*r0ForNR[6]", &r0ForNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zVerForNR[6][6]", &zVerForNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zVerDscForNR[6][6][10]", &zVerDscForNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zVerVsEventForNR[6][6]", &zVerVsEventForNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canvsForNR[6]", &canvsForNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cnCombForNR[6][100]", cnCombForNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ctCombForNR[6][100]", ctCombForNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPadsForNR[6][12]", &fPadsForNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "drawInOutTracks", &drawInOutTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRunsDraw", &nRunsDraw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstTarPnt[6]", firstTarPnt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lastTarPnt[6]", lastTarPnt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*inTargetArr", &inTargetArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*allTargetArr", &allTargetArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "inOutTargCurrRun", &inOutTargCurrRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*inOutTargetHist", &inOutTargetHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pathHistOneRun", &pathHistOneRun);
      R__insp.InspectMember(pathHistOneRun, "pathHistOneRun.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pathHistSumRun", &pathHistSumRun);
      R__insp.InspectMember(pathHistSumRun, "pathHistSumRun.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fillSeg", &fillSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegCat", &fSegCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locSeg", &locSeg);
      R__insp.InspectMember(locSeg, "locSeg.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*currCanvas", &currCanvas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*currPad", &currPad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pad", &pad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "comb", &comb);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTargetMon(void *p) {
      return  p ? new(p) ::HMdcTargetMon : new ::HMdcTargetMon;
   }
   static void *newArray_HMdcTargetMon(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTargetMon[nElements] : new ::HMdcTargetMon[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTargetMon(void *p) {
      delete ((::HMdcTargetMon*)p);
   }
   static void deleteArray_HMdcTargetMon(void *p) {
      delete [] ((::HMdcTargetMon*)p);
   }
   static void destruct_HMdcTargetMon(void *p) {
      typedef ::HMdcTargetMon current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTargetMon(TBuffer &buf, void *obj) {
      ((::HMdcTargetMon*)obj)->::HMdcTargetMon::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTargetMon

//______________________________________________________________________________
void HMdcClustFromSeg::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcClustFromSeg.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcClustFromSeg::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcClustFromSeg.
      TClass *R__cl = ::HMdcClustFromSeg::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatMetaMatch", &pCatMetaMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterMetaMatch", &iterMetaMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatSplineTrack", &pCatSplineTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatMdcTrkCand", &pCatMdcTrkCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatMdcSeg", &pCatMdcSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatMdcHit", &pCatMdcHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatMdcClusInf", &pCatMdcClusInf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSizesCells", &pSizesCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locClus", &locClus);
      R__insp.InspectMember(locClus, "locClus.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatMdcClus", &pCatMdcClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackLine", &trackLine);
      R__insp.InspectMember(trackLine, "trackLine.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinMomentum", &fMinMomentum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinBeta", &fMinBeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxBeta", &fMaxBeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPolarity", &fPolarity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInnerChi2", &fInnerChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOuterChi2", &fOuterChi2);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcClustFromSeg(void *p) {
      return  p ? new(p) ::HMdcClustFromSeg : new ::HMdcClustFromSeg;
   }
   static void *newArray_HMdcClustFromSeg(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcClustFromSeg[nElements] : new ::HMdcClustFromSeg[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcClustFromSeg(void *p) {
      delete ((::HMdcClustFromSeg*)p);
   }
   static void deleteArray_HMdcClustFromSeg(void *p) {
      delete [] ((::HMdcClustFromSeg*)p);
   }
   static void destruct_HMdcClustFromSeg(void *p) {
      typedef ::HMdcClustFromSeg current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcClustFromSeg(TBuffer &buf, void *obj) {
      ((::HMdcClustFromSeg*)obj)->::HMdcClustFromSeg::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcClustFromSeg

//______________________________________________________________________________
void HMdcClusterToHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcClusterToHit.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcClusterToHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcClusterToHit.
      TClass *R__cl = ::HMdcClusterToHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locHit", &locHit);
      R__insp.InspectMember(locHit, "locHit.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locSeg", &locSeg);
      R__insp.InspectMember(locSeg, "locSeg.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locTrkCand", &locTrkCand);
      R__insp.InspectMember(locTrkCand, "locTrkCand.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitCat", &fHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegCat", &fSegCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusInfCat", &fClusInfCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrkCandCat", &fTrkCandCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClustCat", &fClustCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcDet", &fMdcDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGetCont", &fGetCont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSizesCells", &fSizesCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClst", &fClst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusIndex", &clusIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHit", &fHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSeg", &fSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrkCand", &fTrkCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitSegFiller", &hitSegFiller);
      R__insp.InspectMember(hitSegFiller, "hitSegFiller.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGeant", &isGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slotNotAv", &slotNotAv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tFillSeg[2]", tFillSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMdcs", &nMdcs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prntSt", &prntSt);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcClusterToHit(void *p) {
      return  p ? new(p) ::HMdcClusterToHit : new ::HMdcClusterToHit;
   }
   static void *newArray_HMdcClusterToHit(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcClusterToHit[nElements] : new ::HMdcClusterToHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcClusterToHit(void *p) {
      delete ((::HMdcClusterToHit*)p);
   }
   static void deleteArray_HMdcClusterToHit(void *p) {
      delete [] ((::HMdcClusterToHit*)p);
   }
   static void destruct_HMdcClusterToHit(void *p) {
      typedef ::HMdcClusterToHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcClusterToHit(TBuffer &buf, void *obj) {
      ((::HMdcClusterToHit*)obj)->::HMdcClusterToHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcClusterToHit

//______________________________________________________________________________
void HMdcTrackDSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackDSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b.CheckByteCount(R__s, R__c, HMdcTrackDSet::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTrackDSet::IsA(), kTRUE);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTrackDSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackDSet.
      TClass *R__cl = ::HMdcTrackDSet::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackDSet(TBuffer &buf, void *obj) {
      ((::HMdcTrackDSet*)obj)->::HMdcTrackDSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackDSet

//______________________________________________________________________________
void HMdcTrackDContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackDContFact.

   HContFact::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcTrackDContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackDContFact.
      TClass *R__cl = ::HMdcTrackDContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      HContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrackDContFact(void *p) {
      return  p ? new(p) ::HMdcTrackDContFact : new ::HMdcTrackDContFact;
   }
   static void *newArray_HMdcTrackDContFact(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrackDContFact[nElements] : new ::HMdcTrackDContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrackDContFact(void *p) {
      delete ((::HMdcTrackDContFact*)p);
   }
   static void deleteArray_HMdcTrackDContFact(void *p) {
      delete [] ((::HMdcTrackDContFact*)p);
   }
   static void destruct_HMdcTrackDContFact(void *p) {
      typedef ::HMdcTrackDContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackDContFact(TBuffer &buf, void *obj) {
      ((::HMdcTrackDContFact*)obj)->::HMdcTrackDContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackDContFact

//______________________________________________________________________________
void HMdcGetContainers::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcGetContainers.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcGetContainers::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcGetContainers.
      TClass *R__cl = ::HMdcGetContainers::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcCal1Cat", &pMdcCal1Cat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeantKineCat", &pGeantKineCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeantMdcCat", &pGeantMdcCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcClusCat", &pMdcClusCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcClusFitCat", &pMdcClusFitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcWireFitCat", &pMdcWireFitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcClusInfCat", &pMdcClusInfCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcTrkCandCat", &pMdcTrkCandCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rtdb", &rtdb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isRtdb", &isRtdb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*spectr", &spectr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcLayerGeomPar", &fMdcLayerGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMdcLayerGeomPar", &isMdcLayerGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcGeomPar", &fMdcGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMdcGeomPar", &isMdcGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcDetector", &fMdcDetector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMdcDetector", &isMdcDetector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSpecGeomPar", &fSpecGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSpecGeomPar", &isSpecGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcGeomStruct", &fMdcGeomStruct);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMdcGeomStruct", &isMdcGeomStruct);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcRawStruct", &fMdcRawStruct);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMdcRawStruct", &isMdcRawStruct);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcLookupGeom", &fMdcLookupGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMdcLookupGeom", &isMdcLookupGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcLayerCorrPar", &fMdcLayerCorrPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMdcLayerCorrPar", &isMdcLayerCorrPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMdcSetupInited", &isMdcSetupInited);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modSetup[6][4]", modSetup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segSetup[6][2]", segSetup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numMods[6]", numMods);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSimulation", &isSimulation);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcGetContainers(TBuffer &buf, void *obj) {
      ((::HMdcGetContainers*)obj)->::HMdcGetContainers::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcGetContainers

//______________________________________________________________________________
void HMdcIdealTracking::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcIdealTracking.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcIdealTracking::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcIdealTracking.
      TClass *R__cl = ::HMdcIdealTracking::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeantKineCat", &pGeantKineCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeantMdcCat", &pGeantMdcCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcCal1Cat", &pMdcCal1Cat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterGeantKine", &iterGeantKine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locCal1", &locCal1);
      R__insp.InspectMember(locCal1, "locCal1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcSegCat", &pMdcSegCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcHitCat", &pMdcHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcTrkCandCat", &pMdcTrkCandCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locSeg", &locSeg);
      R__insp.InspectMember(locSeg, "locSeg.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locHit", &locHit);
      R__insp.InspectMember(locHit, "locHit.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locTrkCand", &locTrkCand);
      R__insp.InspectMember(locTrkCand, "locTrkCand.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMSizesCells", &pMSizesCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMdcActive[6][4]", isMdcActive);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nFiredLayersSeg1cut", &nFiredLayersSeg1cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nFiredLayersSeg2cut", &nFiredLayersSeg2cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackNumber", &trackNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackSector", &trackSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*geantHitMod[4]", &geantHitMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*geantHitLay[4][6]", &geantHitLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nGeantMdcLay[4]", nGeantMdcLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1[4]", x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y1[4]", y1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z1[4]", z1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x2[4]", x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y2[4]", y2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z2[4]", z2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lCells", &lCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fillParallel", &fillParallel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigX[4]", sigX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigY[4]", sigY);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcIdealTracking(void *p) {
      return  p ? new(p) ::HMdcIdealTracking : new ::HMdcIdealTracking;
   }
   static void *newArray_HMdcIdealTracking(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcIdealTracking[nElements] : new ::HMdcIdealTracking[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcIdealTracking(void *p) {
      delete ((::HMdcIdealTracking*)p);
   }
   static void deleteArray_HMdcIdealTracking(void *p) {
      delete [] ((::HMdcIdealTracking*)p);
   }
   static void destruct_HMdcIdealTracking(void *p) {
      typedef ::HMdcIdealTracking current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcIdealTracking(TBuffer &buf, void *obj) {
      ((::HMdcIdealTracking*)obj)->::HMdcIdealTracking::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcIdealTracking

//______________________________________________________________________________
void HMdc12Fit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdc12Fit.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdc12Fit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdc12Fit.
      TClass *R__cl = ::HMdc12Fit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitpar", &fitpar);
      R__insp.InspectMember(fitpar, "fitpar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fittersArr[2]", fittersArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fitter", &fitter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusCat", &fClusCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterClus", &iterClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSegCat", &fSegCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitCat", &fHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusInfCat", &fClusInfCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrkCandCat", &fTrkCandCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusFitCat", &fClusFitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indFirstSeg[6]", indFirstSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indLastSeg[6]", indLastSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indFstTrCand[6]", indFstTrCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indLstTrCand[6]", indLstTrCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locSeg", &locSeg);
      R__insp.InspectMember(locSeg, "locSeg.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locHit", &locHit);
      R__insp.InspectMember(locHit, "locHit.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locTrkCand", &locTrkCand);
      R__insp.InspectMember(locTrkCand, "locTrkCand.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locClus", &locClus);
      R__insp.InspectMember(locClus, "locClus.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locClInf", &locClInf);
      R__insp.InspectMember(locClInf, "locClInf.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGeant", &isGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modForSeg[2]", modForSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nFitedTimes", &nFitedTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFitted", &isFitted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prntSt", &prntSt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "notFillByClus", &notFillByClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusFitAlg", &clusFitAlg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCosmicData", &isCosmicData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fillHitSeg", &fillHitSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useFitted", &useFitted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useFittedTrPar", &useFittedTrPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "currSeg", &currSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indFirst", &indFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indLast", &indLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indFirstTrCand", &indFirstTrCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indLastTrCand", &indLastTrCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSecListCells", &pSecListCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitSegFiller", &hitSegFiller);
      R__insp.InspectMember(hitSegFiller, "hitSegFiller.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*f34ClFinder", &f34ClFinder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTrackInfSim", &pTrackInfSim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSharedLayersCut[2]", nSharedLayersCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayerOrientCut[2]", nLayerOrientCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDCellsMinCut[2]", nDCellsMinCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDCellsCut[2]", nDCellsCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutForReal[2][13]", cutForReal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutForFake[2][13]", cutForFake);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "findOffVertTrk", &findOffVertTrk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayersCutOVT", &nLayersCutOVT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWiresCutOVT", &nWiresCutOVT);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdc12Fit(void *p) {
      return  p ? new(p) ::HMdc12Fit : new ::HMdc12Fit;
   }
   static void *newArray_HMdc12Fit(Long_t nElements, void *p) {
      return p ? new(p) ::HMdc12Fit[nElements] : new ::HMdc12Fit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdc12Fit(void *p) {
      delete ((::HMdc12Fit*)p);
   }
   static void deleteArray_HMdc12Fit(void *p) {
      delete [] ((::HMdc12Fit*)p);
   }
   static void destruct_HMdc12Fit(void *p) {
      typedef ::HMdc12Fit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdc12Fit(TBuffer &buf, void *obj) {
      ((::HMdc12Fit*)obj)->::HMdc12Fit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdc12Fit

//______________________________________________________________________________
void HMdcFittersArray::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcFittersArray.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcFittersArray::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcFittersArray.
      TClass *R__cl = ::HMdcFittersArray::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fitterArr", &fitterArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nObj", &nObj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fitpar", &fitpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitAuthor", &fitAuthor);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcFittersArray(void *p) {
      return  p ? new(p) ::HMdcFittersArray : new ::HMdcFittersArray;
   }
   static void *newArray_HMdcFittersArray(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcFittersArray[nElements] : new ::HMdcFittersArray[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcFittersArray(void *p) {
      delete ((::HMdcFittersArray*)p);
   }
   static void deleteArray_HMdcFittersArray(void *p) {
      delete [] ((::HMdcFittersArray*)p);
   }
   static void destruct_HMdcFittersArray(void *p) {
      typedef ::HMdcFittersArray current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcFittersArray(TBuffer &buf, void *obj) {
      ((::HMdcFittersArray*)obj)->::HMdcFittersArray::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcFittersArray

//______________________________________________________________________________
void HMdcTrackFitPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackFitPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> cutWeight;
      R__b >> tofFlag;
      R__b >> doTargScan;
      R__b >> minTimeOffset;
      R__b >> maxTimeOffset;
      R__b >> minCellsNum;
      R__b >> chi2CutFlag;
      R__b >> totalChi2Cut;
      R__b >> chi2PerNdfCut;
      R__b >> useTukeyFlag;
      R__b >> cnWs;
      R__b >> cn2s;
      R__b >> cn4s;
      R__b >> minSig2;
      R__b >> maxNFilterIter;
      R__b >> minWeight;
      R__b >> maxChi2;
      R__b >> minTOffsetIter;
      R__b >> funCt1;
      R__b >> stepD1;
      R__b >> funCt2;
      R__b >> stepD2;
      R__b >> stepD3;
      R__b.CheckByteCount(R__s, R__c, HMdcTrackFitPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTrackFitPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << cutWeight;
      R__b << tofFlag;
      R__b << doTargScan;
      R__b << minTimeOffset;
      R__b << maxTimeOffset;
      R__b << minCellsNum;
      R__b << chi2CutFlag;
      R__b << totalChi2Cut;
      R__b << chi2PerNdfCut;
      R__b << useTukeyFlag;
      R__b << cnWs;
      R__b << cn2s;
      R__b << cn4s;
      R__b << minSig2;
      R__b << maxNFilterIter;
      R__b << minWeight;
      R__b << maxChi2;
      R__b << minTOffsetIter;
      R__b << funCt1;
      R__b << stepD1;
      R__b << funCt2;
      R__b << stepD2;
      R__b << stepD3;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTrackFitPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackFitPar.
      TClass *R__cl = ::HMdcTrackFitPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutWeight", &cutWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofFlag", &tofFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doTargScan", &doTargScan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minTimeOffset", &minTimeOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxTimeOffset", &maxTimeOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minCellsNum", &minCellsNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2CutFlag", &chi2CutFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totalChi2Cut", &totalChi2Cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2PerNdfCut", &chi2PerNdfCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useTukeyFlag", &useTukeyFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cnWs", &cnWs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cn2s", &cn2s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cn4s", &cn4s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minSig2", &minSig2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxNFilterIter", &maxNFilterIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minWeight", &minWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxChi2", &maxChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minTOffsetIter", &minTOffsetIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "funCt1", &funCt1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepD1", &stepD1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "funCt2", &funCt2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepD2", &stepD2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepD3", &stepD3);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrackFitPar(void *p) {
      return  p ? new(p) ::HMdcTrackFitPar : new ::HMdcTrackFitPar;
   }
   static void *newArray_HMdcTrackFitPar(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrackFitPar[nElements] : new ::HMdcTrackFitPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrackFitPar(void *p) {
      delete ((::HMdcTrackFitPar*)p);
   }
   static void deleteArray_HMdcTrackFitPar(void *p) {
      delete [] ((::HMdcTrackFitPar*)p);
   }
   static void destruct_HMdcTrackFitPar(void *p) {
      typedef ::HMdcTrackFitPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackFitPar(TBuffer &buf, void *obj) {
      ((::HMdcTrackFitPar*)obj)->::HMdcTrackFitPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackFitPar

//______________________________________________________________________________
void HMdcTrackFitInOut::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackFitInOut.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcTrackFitInOut::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackFitInOut.
      TClass *R__cl = ::HMdcTrackFitInOut::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "version", &version);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDriftTimePar", &fDriftTimePar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fitPar", &fitPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalCat", &fCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusFitCat", &fClusFitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWireFitCat", &fWireFitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantKineCat", &fGeantKineCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantMdcCat", &fGeantMdcCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locClusFit", &locClusFit);
      R__insp.InspectMember(locClusFit, "locClusFit.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locWireFit", &locWireFit);
      R__insp.InspectMember(locWireFit, "locWireFit.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geantFlag", &geantFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireOffsetFlag", &wireOffsetFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDigitPar", &fDigitPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "signalSpeed", &signalSpeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fprint", &fprint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "printStartEv", &printStartEv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEventPrint", &nEventPrint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSizesCells", &fSizesCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSCModAr[6][4]", &fSCModAr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useRndbPar", &useRndbPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutWeight", &cutWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofFlag", &tofFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useRtdbTofFlag", &useRtdbTofFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minTimeOffset", &minTimeOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxTimeOffset", &maxTimeOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minCellsNum", &minCellsNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totalChi2Cut", &totalChi2Cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2PerNdfCut", &chi2PerNdfCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2CutFlag", &chi2CutFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useTukeyFlag", &useTukeyFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useRtdbTFlag", &useRtdbTFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cnWs", &cnWs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cn2s", &cn2s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cn4s", &cn4s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tukeyScale", &tukeyScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minSig2", &minSig2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxNFilterIter", &maxNFilterIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minWeight", &minWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxChi2", &maxChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doTargScan", &doTargScan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useRtdbTScFlag", &useRtdbTScFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calcInitValue", &calcInitValue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minTOffsetIter", &minTOffsetIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "funCt1", &funCt1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepD1", &stepD1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "funCt2", &funCt2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepD2", &stepD2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepD3", &stepD3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "exclLay[6][4][6]", exclLay);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrackFitInOut(void *p) {
      return  p ? new(p) ::HMdcTrackFitInOut : new ::HMdcTrackFitInOut;
   }
   static void *newArray_HMdcTrackFitInOut(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrackFitInOut[nElements] : new ::HMdcTrackFitInOut[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrackFitInOut(void *p) {
      delete ((::HMdcTrackFitInOut*)p);
   }
   static void deleteArray_HMdcTrackFitInOut(void *p) {
      delete [] ((::HMdcTrackFitInOut*)p);
   }
   static void destruct_HMdcTrackFitInOut(void *p) {
      typedef ::HMdcTrackFitInOut current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackFitInOut(TBuffer &buf, void *obj) {
      ((::HMdcTrackFitInOut*)obj)->::HMdcTrackFitInOut::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackFitInOut

//______________________________________________________________________________
void HMdcTrackFitter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackFitter.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcTrackFitter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackFitter.
      TClass *R__cl = ::HMdcTrackFitter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fitInOut", &fitInOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indClusFit", &indClusFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wires", &wires);
      R__insp.InspectMember(wires, "wires.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "initParam", &initParam);
      R__insp.InspectMember(initParam, "initParam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "finalParam", &finalParam);
      R__insp.InspectMember(finalParam, "finalParam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iteration", &iteration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxIteration", &maxIteration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofFlag", &tofFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fprint", &fprint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "exitFlag", &exitFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitStatus", &fitStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segIndex", &segIndex);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdcTrackFitter(void *p) {
      delete ((::HMdcTrackFitter*)p);
   }
   static void deleteArray_HMdcTrackFitter(void *p) {
      delete [] ((::HMdcTrackFitter*)p);
   }
   static void destruct_HMdcTrackFitter(void *p) {
      typedef ::HMdcTrackFitter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackFitter(TBuffer &buf, void *obj) {
      ((::HMdcTrackFitter*)obj)->::HMdcTrackFitter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackFitter

//______________________________________________________________________________
void HMdcTrackFitterA::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackFitterA.

   HMdcTrackFitter::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcTrackFitterA::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackFitterA.
      TClass *R__cl = ::HMdcTrackFitterA::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "initStepFit", &initStepFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "limIter1forFilter", &limIter1forFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "limFunct1to2", &limFunct1to2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "limDeltaF1to2", &limDeltaF1to2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "limGrad1to2", &limGrad1to2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepCh[6]", stepCh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dFunctMax", &dFunctMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dFunctMin", &dFunctMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "limGrad2", &limGrad2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "limStep2[10]", limStep2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "limIter2", &limIter2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepFit", &stepFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iterAfterFilter", &iterAfterFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "return2to1", &return2to1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pari", &pari);
      R__insp.InspectMember(pari, "pari.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parMin", &parMin);
      R__insp.InspectMember(parMin, "parMin.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tmpPar", &tmpPar);
      R__insp.InspectMember(tmpPar, "tmpPar.");
      HMdcTrackFitter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdcTrackFitterA(void *p) {
      delete ((::HMdcTrackFitterA*)p);
   }
   static void deleteArray_HMdcTrackFitterA(void *p) {
      delete [] ((::HMdcTrackFitterA*)p);
   }
   static void destruct_HMdcTrackFitterA(void *p) {
      typedef ::HMdcTrackFitterA current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackFitterA(TBuffer &buf, void *obj) {
      ((::HMdcTrackFitterA*)obj)->::HMdcTrackFitterA::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackFitterA

//______________________________________________________________________________
void HMdcTrackFitterB::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackFitterB.

   HMdcTrackFitterA::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcTrackFitterB::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackFitterB.
      TClass *R__cl = ::HMdcTrackFitterB::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "recalcTdcError", &recalcTdcError);
      HMdcTrackFitterA::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdcTrackFitterB(void *p) {
      delete ((::HMdcTrackFitterB*)p);
   }
   static void deleteArray_HMdcTrackFitterB(void *p) {
      delete [] ((::HMdcTrackFitterB*)p);
   }
   static void destruct_HMdcTrackFitterB(void *p) {
      typedef ::HMdcTrackFitterB current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackFitterB(TBuffer &buf, void *obj) {
      ((::HMdcTrackFitterB*)obj)->::HMdcTrackFitterB::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackFitterB

//______________________________________________________________________________
void HMdcTrackParam::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackParam.

   HMdcLineParam::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcTrackParam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackParam.
      TClass *R__cl = ::HMdcTrackParam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "funct", &funct);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "oldFunct", &oldFunct);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumWeight", &sumWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nParam", &nParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errMatr", &errMatr);
      R__insp.InspectMember(errMatr, "errMatr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMods", &nMods);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numOfGoodWires", &numOfGoodWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2perDF", &chi2perDF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iterNumb", &iterNumb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeOffsetFlag", &timeOffsetFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeOffset[16]", timeOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errTimeOffset[16]", errTimeOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isTmoffFixed", &isTmoffFixed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sDev[16]", sDev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sWht[16]", sWht);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dTdPar[4][16]", dTdPar);
      HMdcLineParam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrackParam(void *p) {
      return  p ? new(p) ::HMdcTrackParam : new ::HMdcTrackParam;
   }
   static void *newArray_HMdcTrackParam(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrackParam[nElements] : new ::HMdcTrackParam[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrackParam(void *p) {
      delete ((::HMdcTrackParam*)p);
   }
   static void deleteArray_HMdcTrackParam(void *p) {
      delete [] ((::HMdcTrackParam*)p);
   }
   static void destruct_HMdcTrackParam(void *p) {
      typedef ::HMdcTrackParam current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackParam(TBuffer &buf, void *obj) {
      ((::HMdcTrackParam*)obj)->::HMdcTrackParam::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackParam

//______________________________________________________________________________
void HMdcWireData::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcWireData.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcWireData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcWireData.
      TClass *R__cl = ::HMdcWireData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layer", &layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeIndx", &timeIndx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcTimeCal1", &tdcTimeCal1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcCal1", &fMdcCal1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lInCl", &lInCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lOutCl", &lOutCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "secInd", &secInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modInd", &modInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useInFit", &useInFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "signalTimeOffset", &signalTimeOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcTime", &tdcTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errTdcTime", &errTdcTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "driftTime", &driftTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dev0", &dev0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dev", &dev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distance", &distance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distanceSign", &distanceSign);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alpha", &alpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "inCell", &inCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "weight", &weight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isWireUsed", &isWireUsed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isWireUsedPr", &isWireUsedPr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitStatus", &hitStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sequentialIndex", &sequentialIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*grad", &grad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*grad2", &grad2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*matrH", &matrH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dirY", &dirY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dirZ", &dirZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dYdP[4]", dYdP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dZdP[4]", dZdP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDirYdP[4]", dDirYdP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDirZdP[4]", dDirZdP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cd2DsdP2[4]", cd2DsdP2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cd2DsdPkdPl[6]", cd2DsdPkdPl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cdVkdPl[6]", cdVkdPl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cdUkdPl[6]", cdUkdPl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "oneDErrTdcTime2", &oneDErrTdcTime2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wtNorm", &wtNorm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dTdP[4]", dTdP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "driftTimeDer", &driftTimeDer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "devDer", &devDer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dTdPar[4]", dTdPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSCLayer", &pSCLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pDrTimeParBin", &pDrTimeParBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geantTrackNum", &geantTrackNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof", &tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dir", &dir);
      R__insp.InspectMember(dir, "dir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pL", &pL);
      R__insp.InspectMember(pL, "pL.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pR", &pR);
      R__insp.InspectMember(pR, "pR.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "drTimeDist", &drTimeDist);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcWireData(void *p) {
      return  p ? new(p) ::HMdcWireData : new ::HMdcWireData;
   }
   static void *newArray_HMdcWireData(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcWireData[nElements] : new ::HMdcWireData[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcWireData(void *p) {
      delete ((::HMdcWireData*)p);
   }
   static void deleteArray_HMdcWireData(void *p) {
      delete [] ((::HMdcWireData*)p);
   }
   static void destruct_HMdcWireData(void *p) {
      typedef ::HMdcWireData current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcWireData(TBuffer &buf, void *obj) {
      ((::HMdcWireData*)obj)->::HMdcWireData::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcWireData

//______________________________________________________________________________
void HMdcWiresArr::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcWiresArr.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcWiresArr::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcWiresArr.
      TClass *R__cl = ::HMdcWiresArr::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*wires", &wires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arraySize", &arraySize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDriftTimes", &nDriftTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClst1", &fClst1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClst2", &fClst2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segment", &segment);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xClst", &xClst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yClst", &yClst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zClst", &zClst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fitInOut", &fitInOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lInputCells", &lInputCells);
      R__insp.InspectMember(lInputCells, "lInputCells.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lOutputCells", &lOutputCells);
      R__insp.InspectMember(lOutputCells, "lOutputCells.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMdcTimes[16]", nMdcTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstTime", &firstTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lastTime", &lastTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*firstWire", &firstWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lastWire", &lastWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nModsInFit", &nModsInFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numOfGoodWires", &numOfGoodWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2", &sigma2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*event", &event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locCal1", &locCal1);
      R__insp.InspectMember(locCal1, "locCal1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fprint", &fprint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "grad[4]", grad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "agrad", &agrad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "grad2", &grad2);
      R__insp.InspectMember(grad2, "grad2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matrH", &matrH);
      R__insp.InspectMember(matrH, "matrH.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*firstWireInLay[96]", &firstWireInLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lastWireInLay[96]", &lastWireInLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDrTmFirstSec", &nDrTmFirstSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nClTimes", &nClTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segment2", &segment2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector2", &sector2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClst3", &fClst3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClst4", &fClst4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lInputCells2", &lInputCells2);
      R__insp.InspectMember(lInputCells2, "lInputCells2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lOutputCells2", &lOutputCells2);
      R__insp.InspectMember(lOutputCells2, "lOutputCells2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segment3", &segment3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector3", &sector3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClst5", &fClst5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClst6", &fClst6);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lInputCells3", &lInputCells3);
      R__insp.InspectMember(lInputCells3, "lInputCells3.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lOutputCells3", &lOutputCells3);
      R__insp.InspectMember(lOutputCells3, "lOutputCells3.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segment4", &segment4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector4", &sector4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClst7", &fClst7);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClst8", &fClst8);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lInputCells4", &lInputCells4);
      R__insp.InspectMember(lInputCells4, "lInputCells4.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lOutputCells4", &lOutputCells4);
      R__insp.InspectMember(lOutputCells4, "lOutputCells4.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackNum[200]", trackNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numWiresClus[200]", numWiresClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numWiresFit[200]", numWiresFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dDistCut", &dDistCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useNewParam", &useNewParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanDDist", &meanDDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxNGoodWires", &maxNGoodWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "newListCells", &newListCells);
      R__insp.InspectMember(newListCells, "newListCells.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tmpList", &tmpList);
      R__insp.InspectMember(tmpList, "tmpList.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxAddWr", &maxAddWr);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcWiresArr(void *p) {
      return  p ? new(p) ::HMdcWiresArr : new ::HMdcWiresArr;
   }
   static void *newArray_HMdcWiresArr(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcWiresArr[nElements] : new ::HMdcWiresArr[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcWiresArr(void *p) {
      delete ((::HMdcWiresArr*)p);
   }
   static void deleteArray_HMdcWiresArr(void *p) {
      delete [] ((::HMdcWiresArr*)p);
   }
   static void destruct_HMdcWiresArr(void *p) {
      typedef ::HMdcWiresArr current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcWiresArr(TBuffer &buf, void *obj) {
      ((::HMdcWiresArr*)obj)->::HMdcWiresArr::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcWiresArr

//______________________________________________________________________________
void HMdcClusFit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcClusFit.
      TClass *R__cl = ::HMdcClusFit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sec", &sec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seg", &seg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod", &mod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitAuthor", &fitAuthor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distTimeVer", &distTimeVer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitType", &fitType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nParam", &nParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "functional", &functional);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeOffMdc1", &timeOffMdc1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeOffMdc2", &timeOffMdc2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeOffMdc3", &timeOffMdc3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeOffMdc4", &timeOffMdc4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numOfWires", &numOfWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numOfLayers", &numOfLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1", &x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y1", &y1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z1", &z1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x2", &x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y2", &y2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z2", &z2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numIter", &numIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indf", &indf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indl", &indl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clustIndex", &clustIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "exitFlag", &exitFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaChi2", &sigmaChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitStatus", &fitStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dx1", &dx1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dy1", &dy1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dx2", &dx2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dy2", &dy2);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcClusFit(void *p) {
      return  p ? new(p) ::HMdcClusFit : new ::HMdcClusFit;
   }
   static void *newArray_HMdcClusFit(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcClusFit[nElements] : new ::HMdcClusFit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcClusFit(void *p) {
      delete ((::HMdcClusFit*)p);
   }
   static void deleteArray_HMdcClusFit(void *p) {
      delete [] ((::HMdcClusFit*)p);
   }
   static void destruct_HMdcClusFit(void *p) {
      typedef ::HMdcClusFit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcClusFit(TBuffer &buf, void *obj) {
      ((::HMdcClusFit*)obj)->::HMdcClusFit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcClusFit

//______________________________________________________________________________
void HMdcClusFitSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcClusFitSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcClusFit::Streamer(R__b);
      R__b >> nTracks;
      R__b >> nTracksClus;
      R__b >> geantTrack;
      R__b >> nTrWires;
      R__b >> nTrWiresClus;
      R__b >> primary;
      R__b >> x1geant;
      R__b >> y1geant;
      R__b >> z1geant;
      R__b >> x2geant;
      R__b >> y2geant;
      R__b >> z2geant;
      R__b >> direction;
      R__b >> particleID;
      R__b >> momentum;
      R__b.CheckByteCount(R__s, R__c, HMdcClusFitSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcClusFitSim::IsA(), kTRUE);
      HMdcClusFit::Streamer(R__b);
      R__b << nTracks;
      R__b << nTracksClus;
      R__b << geantTrack;
      R__b << nTrWires;
      R__b << nTrWiresClus;
      R__b << primary;
      R__b << x1geant;
      R__b << y1geant;
      R__b << z1geant;
      R__b << x2geant;
      R__b << y2geant;
      R__b << z2geant;
      R__b << direction;
      R__b << particleID;
      R__b << momentum;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcClusFitSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcClusFitSim.
      TClass *R__cl = ::HMdcClusFitSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracks", &nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracksClus", &nTracksClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geantTrack", &geantTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrWires", &nTrWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrWiresClus", &nTrWiresClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "primary", &primary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1geant", &x1geant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y1geant", &y1geant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z1geant", &z1geant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x2geant", &x2geant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y2geant", &y2geant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z2geant", &z2geant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "direction", &direction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "particleID", &particleID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momentum", &momentum);
      HMdcClusFit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcClusFitSim(void *p) {
      return  p ? new(p) ::HMdcClusFitSim : new ::HMdcClusFitSim;
   }
   static void *newArray_HMdcClusFitSim(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcClusFitSim[nElements] : new ::HMdcClusFitSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcClusFitSim(void *p) {
      delete ((::HMdcClusFitSim*)p);
   }
   static void deleteArray_HMdcClusFitSim(void *p) {
      delete [] ((::HMdcClusFitSim*)p);
   }
   static void destruct_HMdcClusFitSim(void *p) {
      typedef ::HMdcClusFitSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcClusFitSim(TBuffer &buf, void *obj) {
      ((::HMdcClusFitSim*)obj)->::HMdcClusFitSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcClusFitSim

//______________________________________________________________________________
void HMdcWireFit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcWireFit.
      TClass *R__cl = ::HMdcWireFit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sec", &sec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod", &mod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layer", &layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeNum", &timeNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcTimeCal1", &tdcTimeCal1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcTime", &tdcTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dev", &dev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "weight", &weight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "driftTime", &driftTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fullTime", &fullTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minDist", &minDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alpha", &alpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isInCell", &isInCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcTimeErr", &tdcTimeErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isUsedInFit", &isUsedInFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tot", &tot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellPath", &cellPath);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcWireFit(void *p) {
      return  p ? new(p) ::HMdcWireFit : new ::HMdcWireFit;
   }
   static void *newArray_HMdcWireFit(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcWireFit[nElements] : new ::HMdcWireFit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcWireFit(void *p) {
      delete ((::HMdcWireFit*)p);
   }
   static void deleteArray_HMdcWireFit(void *p) {
      delete [] ((::HMdcWireFit*)p);
   }
   static void destruct_HMdcWireFit(void *p) {
      typedef ::HMdcWireFit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcWireFit(TBuffer &buf, void *obj) {
      ((::HMdcWireFit*)obj)->::HMdcWireFit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcWireFit

//______________________________________________________________________________
void HMdcWireFitSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcWireFitSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcWireFit::Streamer(R__b);
      R__b >> trackNum;
      R__b >> alphaGeant;
      R__b >> minDistGeant;
      R__b >> timeErrDigi;
      R__b >> tofGeant;
      R__b >> clusFitTrackFl;
      R__b.CheckByteCount(R__s, R__c, HMdcWireFitSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcWireFitSim::IsA(), kTRUE);
      HMdcWireFit::Streamer(R__b);
      R__b << trackNum;
      R__b << alphaGeant;
      R__b << minDistGeant;
      R__b << timeErrDigi;
      R__b << tofGeant;
      R__b << clusFitTrackFl;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcWireFitSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcWireFitSim.
      TClass *R__cl = ::HMdcWireFitSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackNum", &trackNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alphaGeant", &alphaGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minDistGeant", &minDistGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeErrDigi", &timeErrDigi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofGeant", &tofGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusFitTrackFl", &clusFitTrackFl);
      HMdcWireFit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcWireFitSim(void *p) {
      return  p ? new(p) ::HMdcWireFitSim : new ::HMdcWireFitSim;
   }
   static void *newArray_HMdcWireFitSim(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcWireFitSim[nElements] : new ::HMdcWireFitSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcWireFitSim(void *p) {
      delete ((::HMdcWireFitSim*)p);
   }
   static void deleteArray_HMdcWireFitSim(void *p) {
      delete [] ((::HMdcWireFitSim*)p);
   }
   static void destruct_HMdcWireFitSim(void *p) {
      typedef ::HMdcWireFitSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcWireFitSim(TBuffer &buf, void *obj) {
      ((::HMdcWireFitSim*)obj)->::HMdcWireFitSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcWireFitSim

//______________________________________________________________________________
void HMdcClusInf::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcClusInf.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fitStatus;
      R__b >> levelClFinding;
      R__b >> nModsClus;
      R__b >> nModsFit;
      R__b >> clusSize;
      R__b >> nMergClus;
      R__b >> nLayers;
      R__b >> nLayersFitted;
      R__b >> nDrTimes;
      R__b >> nDrTimesFitted;
      R__b >> indClus;
      R__b >> indClusFit;
      R__b >> sigma1;
      R__b >> sigma2;
      R__b >> alpha;
      R__b >> xHit;
      R__b >> yHit;
      R__b >> xClus;
      R__b >> yClus;
      R__b >> dedx;
      R__b >> dedxSigma;
      R__b >> dedxNWire;
      R__b >> dedxNWireCut;
      R__b.CheckByteCount(R__s, R__c, HMdcClusInf::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcClusInf::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fitStatus;
      R__b << levelClFinding;
      R__b << nModsClus;
      R__b << nModsFit;
      R__b << clusSize;
      R__b << nMergClus;
      R__b << nLayers;
      R__b << nLayersFitted;
      R__b << nDrTimes;
      R__b << nDrTimesFitted;
      R__b << indClus;
      R__b << indClusFit;
      R__b << sigma1;
      R__b << sigma2;
      R__b << alpha;
      R__b << xHit;
      R__b << yHit;
      R__b << xClus;
      R__b << yClus;
      R__b << dedx;
      R__b << dedxSigma;
      R__b << dedxNWire;
      R__b << dedxNWireCut;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcClusInf::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcClusInf.
      TClass *R__cl = ::HMdcClusInf::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitStatus", &fitStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "levelClFinding", &levelClFinding);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nModsClus", &nModsClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nModsFit", &nModsFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusSize", &clusSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMergClus", &nMergClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayers", &nLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayersFitted", &nLayersFitted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDrTimes", &nDrTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDrTimesFitted", &nDrTimesFitted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indClus", &indClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indClusFit", &indClusFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma1", &sigma1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2", &sigma2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alpha", &alpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xHit", &xHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yHit", &yHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xClus", &xClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yClus", &yClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedx", &dedx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxSigma", &dedxSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWire", &dedxNWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWireCut", &dedxNWireCut);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcClusInf(void *p) {
      return  p ? new(p) ::HMdcClusInf : new ::HMdcClusInf;
   }
   static void *newArray_HMdcClusInf(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcClusInf[nElements] : new ::HMdcClusInf[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcClusInf(void *p) {
      delete ((::HMdcClusInf*)p);
   }
   static void deleteArray_HMdcClusInf(void *p) {
      delete [] ((::HMdcClusInf*)p);
   }
   static void destruct_HMdcClusInf(void *p) {
      typedef ::HMdcClusInf current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcClusInf(TBuffer &buf, void *obj) {
      ((::HMdcClusInf*)obj)->::HMdcClusInf::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcClusInf

//______________________________________________________________________________
void HMdcClusInfSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcClusInfSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcClusInf::Streamer(R__b);
      R__b >> nTracks;
      R__b.ReadStaticArray((int*)listTr);
      R__b.ReadStaticArray((short*)nTimes);
      R__b.CheckByteCount(R__s, R__c, HMdcClusInfSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcClusInfSim::IsA(), kTRUE);
      HMdcClusInf::Streamer(R__b);
      R__b << nTracks;
      R__b.WriteArray(listTr, 5);
      R__b.WriteArray(nTimes, 5);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcClusInfSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcClusInfSim.
      TClass *R__cl = ::HMdcClusInfSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracks", &nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listTr[5]", listTr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTimes[5]", nTimes);
      HMdcClusInf::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcClusInfSim(void *p) {
      return  p ? new(p) ::HMdcClusInfSim : new ::HMdcClusInfSim;
   }
   static void *newArray_HMdcClusInfSim(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcClusInfSim[nElements] : new ::HMdcClusInfSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcClusInfSim(void *p) {
      delete ((::HMdcClusInfSim*)p);
   }
   static void deleteArray_HMdcClusInfSim(void *p) {
      delete [] ((::HMdcClusInfSim*)p);
   }
   static void destruct_HMdcClusInfSim(void *p) {
      typedef ::HMdcClusInfSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcClusInfSim(TBuffer &buf, void *obj) {
      ((::HMdcClusInfSim*)obj)->::HMdcClusInfSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcClusInfSim

//______________________________________________________________________________
void HMdcHitSegFiller::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcHitSegFiller.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcHitSegFiller::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcHitSegFiller.
      TClass *R__cl = ::HMdcHitSegFiller::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dP2dP1[4][4]", dP2dP1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*plane1", &plane1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "A1", &A1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "B1", &B1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1", &x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y1", &y1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*plane2", &plane2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "A2", &A2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "B2", &B2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x2", &x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y2", &y2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*covMatr", &covMatr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeOffSet[4]", timeOffSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errTimeOffSet[4]", errTimeOffSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z1", &z1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z2", &z2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "typeClusVert", &typeClusVert);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusErrMatr", &clusErrMatr);
      R__insp.InspectMember(clusErrMatr, "clusErrMatr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r", &r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dP1dP2[4][4]", dP1dP2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zPrime", &zPrime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rPrime", &rPrime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xTarget", &xTarget);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yTarget", &yTarget);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xDir", &xDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yDir", &yDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitErr", &hitErr);
      R__insp.InspectMember(hitErr, "hitErr.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcHitSegFiller(void *p) {
      return  p ? new(p) ::HMdcHitSegFiller : new ::HMdcHitSegFiller;
   }
   static void *newArray_HMdcHitSegFiller(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcHitSegFiller[nElements] : new ::HMdcHitSegFiller[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcHitSegFiller(void *p) {
      delete ((::HMdcHitSegFiller*)p);
   }
   static void deleteArray_HMdcHitSegFiller(void *p) {
      delete [] ((::HMdcHitSegFiller*)p);
   }
   static void destruct_HMdcHitSegFiller(void *p) {
      typedef ::HMdcHitSegFiller current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcHitSegFiller(TBuffer &buf, void *obj) {
      ((::HMdcHitSegFiller*)obj)->::HMdcHitSegFiller::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcHitSegFiller

//______________________________________________________________________________
void HMdcDriftTimeParBin::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcDriftTimeParBin.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcDriftTimeParBin::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcDriftTimeParBin.
      TClass *R__cl = ::HMdcDriftTimeParBin::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c0", &c0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c1", &c1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c2", &c2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c3", &c3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c0err", &c0err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c1err", &c1err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c2err", &c2err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c3err", &c3err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0", &d0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d1", &d1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d2", &d2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d3", &d3);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcDriftTimeParBin(void *p) {
      return  p ? new(p) ::HMdcDriftTimeParBin : new ::HMdcDriftTimeParBin;
   }
   static void *newArray_HMdcDriftTimeParBin(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcDriftTimeParBin[nElements] : new ::HMdcDriftTimeParBin[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcDriftTimeParBin(void *p) {
      delete ((::HMdcDriftTimeParBin*)p);
   }
   static void deleteArray_HMdcDriftTimeParBin(void *p) {
      delete [] ((::HMdcDriftTimeParBin*)p);
   }
   static void destruct_HMdcDriftTimeParBin(void *p) {
      typedef ::HMdcDriftTimeParBin current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcDriftTimeParBin(TBuffer &buf, void *obj) {
      ((::HMdcDriftTimeParBin*)obj)->::HMdcDriftTimeParBin::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcDriftTimeParBin

//______________________________________________________________________________
void HMdcDriftTimeParAngle::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcDriftTimeParAngle.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcDriftTimeParAngle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcDriftTimeParAngle.
      TClass *R__cl = ::HMdcDriftTimeParAngle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arr[100]", arr);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcDriftTimeParAngle(void *p) {
      return  p ? new(p) ::HMdcDriftTimeParAngle : new ::HMdcDriftTimeParAngle;
   }
   static void *newArray_HMdcDriftTimeParAngle(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcDriftTimeParAngle[nElements] : new ::HMdcDriftTimeParAngle[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcDriftTimeParAngle(void *p) {
      delete ((::HMdcDriftTimeParAngle*)p);
   }
   static void deleteArray_HMdcDriftTimeParAngle(void *p) {
      delete [] ((::HMdcDriftTimeParAngle*)p);
   }
   static void destruct_HMdcDriftTimeParAngle(void *p) {
      typedef ::HMdcDriftTimeParAngle current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcDriftTimeParAngle(TBuffer &buf, void *obj) {
      ((::HMdcDriftTimeParAngle*)obj)->::HMdcDriftTimeParAngle::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcDriftTimeParAngle

//______________________________________________________________________________
void HMdcDriftTimeParMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcDriftTimeParMod.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcDriftTimeParMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcDriftTimeParMod.
      TClass *R__cl = ::HMdcDriftTimeParMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arr[18]", arr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nAngleBins", &nAngleBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lAngleBin", &lAngleBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "angleBinSize", &angleBinSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "invAngleBinSize", &invAngleBinSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lastAngleBin", &lastAngleBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDistBins", &nDistBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lDistBin", &lDistBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distBinSize", &distBinSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "invDistBinSize", &invDistBinSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lastBinDist", &lastBinDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slopeOutside", &slopeOutside);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeBinSize", &timeBinSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "invTimeBinSize", &invTimeBinSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lastBinTime", &lastBinTime);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcDriftTimeParMod(void *p) {
      return  p ? new(p) ::HMdcDriftTimeParMod : new ::HMdcDriftTimeParMod;
   }
   static void *newArray_HMdcDriftTimeParMod(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcDriftTimeParMod[nElements] : new ::HMdcDriftTimeParMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcDriftTimeParMod(void *p) {
      delete ((::HMdcDriftTimeParMod*)p);
   }
   static void deleteArray_HMdcDriftTimeParMod(void *p) {
      delete [] ((::HMdcDriftTimeParMod*)p);
   }
   static void destruct_HMdcDriftTimeParMod(void *p) {
      typedef ::HMdcDriftTimeParMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcDriftTimeParMod(TBuffer &buf, void *obj) {
      ((::HMdcDriftTimeParMod*)obj)->::HMdcDriftTimeParMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcDriftTimeParMod

//______________________________________________________________________________
void HMdcDriftTimeParSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcDriftTimeParSec.

   TObjArray::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcDriftTimeParSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcDriftTimeParSec.
      TClass *R__cl = ::HMdcDriftTimeParSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      TObjArray::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcDriftTimeParSec(void *p) {
      return  p ? new(p) ::HMdcDriftTimeParSec : new ::HMdcDriftTimeParSec;
   }
   static void *newArray_HMdcDriftTimeParSec(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcDriftTimeParSec[nElements] : new ::HMdcDriftTimeParSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcDriftTimeParSec(void *p) {
      delete ((::HMdcDriftTimeParSec*)p);
   }
   static void deleteArray_HMdcDriftTimeParSec(void *p) {
      delete [] ((::HMdcDriftTimeParSec*)p);
   }
   static void destruct_HMdcDriftTimeParSec(void *p) {
      typedef ::HMdcDriftTimeParSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcDriftTimeParSec(TBuffer &buf, void *obj) {
      ((::HMdcDriftTimeParSec*)obj)->::HMdcDriftTimeParSec::Streamer(buf);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_HMdcDriftTimeParSec(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::HMdcDriftTimeParSec*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::HMdcDriftTimeParSec

//______________________________________________________________________________
void HMdcDriftTimePar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcDriftTimePar.

   TObjArray::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcDriftTimePar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcDriftTimePar.
      TClass *R__cl = ::HMdcDriftTimePar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCal2ParSim", &pCal2ParSim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCal2Par", &pCal2Par);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isInited", &isInited);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scaleError[4]", scaleError);
      TObjArray::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcDriftTimePar(TBuffer &buf, void *obj) {
      ((::HMdcDriftTimePar*)obj)->::HMdcDriftTimePar::Streamer(buf);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_HMdcDriftTimePar(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::HMdcDriftTimePar*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::HMdcDriftTimePar

//______________________________________________________________________________
void HMdcLayerCorrPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLayerCorrPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b.ReadStaticArray((int*)firstWire);
      R__b.ReadStaticArray((float*)shift);
      R__b.ReadStaticArray((float*)wireOrientCorr);
      R__b >> nMdc;
      R__b >> nLay;
      R__b >> numCorrLayers;
      R__b.CheckByteCount(R__s, R__c, HMdcLayerCorrPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcLayerCorrPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b.WriteArray(firstWire, 72);
      R__b.WriteArray(shift, 72);
      R__b.WriteArray(wireOrientCorr, 72);
      R__b << nMdc;
      R__b << nLay;
      R__b << numCorrLayers;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcLayerCorrPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLayerCorrPar.
      TClass *R__cl = ::HMdcLayerCorrPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstWire[72]", firstWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shift[72]", shift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireOrientCorr[72]", wireOrientCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMdc", &nMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLay", &nLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numCorrLayers", &numCorrLayers);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLayerCorrPar(void *p) {
      return  p ? new(p) ::HMdcLayerCorrPar : new ::HMdcLayerCorrPar;
   }
   static void *newArray_HMdcLayerCorrPar(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLayerCorrPar[nElements] : new ::HMdcLayerCorrPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLayerCorrPar(void *p) {
      delete ((::HMdcLayerCorrPar*)p);
   }
   static void deleteArray_HMdcLayerCorrPar(void *p) {
      delete [] ((::HMdcLayerCorrPar*)p);
   }
   static void destruct_HMdcLayerCorrPar(void *p) {
      typedef ::HMdcLayerCorrPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLayerCorrPar(TBuffer &buf, void *obj) {
      ((::HMdcLayerCorrPar*)obj)->::HMdcLayerCorrPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLayerCorrPar

//______________________________________________________________________________
void HMdcRichCorr::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcRichCorr.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcRichCorr::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcRichCorr.
      TClass *R__cl = ::HMdcRichCorr::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileName", &fileName);
      R__insp.InspectMember(fileName, "fileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flNmWoExt", &flNmWoExt);
      R__insp.InspectMember(flNmWoExt, "flNmWoExt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runId", &runId);
      R__insp.InspectMember(runId, "runId.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventDate", &eventDate);
      R__insp.InspectMember(eventDate, "eventDate.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventTime", &eventTime);
      R__insp.InspectMember(eventTime, "eventTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalib1", &fCalib1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pListCells", &pListCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMdcLCellsOwn", &isMdcLCellsOwn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusCat", &fClusCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterMdcClus", &iterMdcClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMdcHits[6]", nMdcHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRichHitCat", &fRichHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterRichHit", &iterRichHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRichHits[6]", nRichHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richTheta[6][400]", richTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richPhi[6][400]", richPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMdcHitRing[6][400]", nMdcHitRing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "radToDeg", &radToDeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLookUpTb", &fLookUpTb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "level4", &level4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "level5", &level5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayers[6][4]", nLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clFinderType", &clFinderType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRingsCut", &nRingsCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dThCuts[6][2][2]", dThCuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhCuts[6][2][2]", dPhCuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numSigTh", &numSigTh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numSigPh", &numSigPh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "planeMeanDTh[2]", planeMeanDTh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "planeSigmaDTh[2]", planeSigmaDTh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "planeMeanDPh[2]", planeMeanDPh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "planeSigmaDPh[2]", planeSigmaDPh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEvents", &nEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRingEvents", &nRingEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMatchedEvents", &nMatchedEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMatchedEvents1R", &nMatchedEvents1R);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histFileDir", &histFileDir);
      R__insp.InspectMember(histFileDir, "histFileDir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histFileSuffix", &histFileSuffix);
      R__insp.InspectMember(histFileSuffix, "histFileSuffix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histFileOption", &histFileOption);
      R__insp.InspectMember(histFileOption, "histFileOption.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histFile", &histFile);
      R__insp.InspectMember(histFile, "histFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "psFile", &psFile);
      R__insp.InspectMember(psFile, "psFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hDThAll[2]", &hDThAll);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hDPhAll[2]", &hDPhAll);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hDTh[6][2]", &hDTh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hDPh[6][2]", &hDPh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hNRings", &hNRings);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hNMRings", &hNMRings);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hNEvents", &hNEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "saveHist", &saveHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "saveCanv", &saveCanv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "savePSFile", &savePSFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "funDGaus", &funDGaus);
      R__insp.InspectMember(funDGaus, "funDGaus.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitStatDTh[6][2]", fitStatDTh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitStatDPh[6][2]", fitStatDPh);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcRichCorr(void *p) {
      return  p ? new(p) ::HMdcRichCorr : new ::HMdcRichCorr;
   }
   static void *newArray_HMdcRichCorr(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcRichCorr[nElements] : new ::HMdcRichCorr[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcRichCorr(void *p) {
      delete ((::HMdcRichCorr*)p);
   }
   static void deleteArray_HMdcRichCorr(void *p) {
      delete [] ((::HMdcRichCorr*)p);
   }
   static void destruct_HMdcRichCorr(void *p) {
      typedef ::HMdcRichCorr current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcRichCorr(TBuffer &buf, void *obj) {
      ((::HMdcRichCorr*)obj)->::HMdcRichCorr::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcRichCorr

//______________________________________________________________________________
void HMdcDGaus::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcDGaus.

   TF1::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcDGaus::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcDGaus.
      TClass *R__cl = ::HMdcDGaus::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "condMean", &condMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "condSig1", &condSig1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "condSig2", &condSig2);
      TF1::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcDGaus(void *p) {
      return  p ? new(p) ::HMdcDGaus : new ::HMdcDGaus;
   }
   static void *newArray_HMdcDGaus(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcDGaus[nElements] : new ::HMdcDGaus[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcDGaus(void *p) {
      delete ((::HMdcDGaus*)p);
   }
   static void deleteArray_HMdcDGaus(void *p) {
      delete [] ((::HMdcDGaus*)p);
   }
   static void destruct_HMdcDGaus(void *p) {
      typedef ::HMdcDGaus current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcDGaus(TBuffer &buf, void *obj) {
      ((::HMdcDGaus*)obj)->::HMdcDGaus::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcDGaus

//______________________________________________________________________________
void HSeqArrBlock::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSeqArrBlock.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HSeqArrBlock::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSeqArrBlock.
      TClass *R__cl = ::HSeqArrBlock::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arr[262144]", arr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "blockNumber", &blockNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nextBlock", &nextBlock);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSeqArrBlock(void *p) {
      return  p ? new(p) ::HSeqArrBlock : new ::HSeqArrBlock;
   }
   static void *newArray_HSeqArrBlock(Long_t nElements, void *p) {
      return p ? new(p) ::HSeqArrBlock[nElements] : new ::HSeqArrBlock[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSeqArrBlock(void *p) {
      delete ((::HSeqArrBlock*)p);
   }
   static void deleteArray_HSeqArrBlock(void *p) {
      delete [] ((::HSeqArrBlock*)p);
   }
   static void destruct_HSeqArrBlock(void *p) {
      typedef ::HSeqArrBlock current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSeqArrBlock(TBuffer &buf, void *obj) {
      ((::HSeqArrBlock*)obj)->::HSeqArrBlock::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSeqArrBlock

//______________________________________________________________________________
void HSeqArr::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSeqArr.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HSeqArr::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSeqArr.
      TClass *R__cl = ::HSeqArr::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*firstBlock", &firstBlock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lastBlock", &lastBlock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wordLength", &wordLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBlocks", &nBlocks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "blockLength", &blockLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*block", &block);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", &index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cElem", &cElem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFrst", &isFrst);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSeqArr(void *p) {
      return  p ? new(p) ::HSeqArr : new ::HSeqArr;
   }
   static void *newArray_HSeqArr(Long_t nElements, void *p) {
      return p ? new(p) ::HSeqArr[nElements] : new ::HSeqArr[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSeqArr(void *p) {
      delete ((::HSeqArr*)p);
   }
   static void deleteArray_HSeqArr(void *p) {
      delete [] ((::HSeqArr*)p);
   }
   static void destruct_HSeqArr(void *p) {
      typedef ::HSeqArr current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSeqArr(TBuffer &buf, void *obj) {
      ((::HSeqArr*)obj)->::HSeqArr::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSeqArr

//______________________________________________________________________________
void HSeqArrIter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSeqArrIter.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HSeqArrIter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSeqArrIter.
      TClass *R__cl = ::HSeqArrIter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*block", &block);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", &index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cElem", &cElem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFrst", &isFrst);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSeqArrIter(void *p) {
      return  p ? new(p) ::HSeqArrIter : new ::HSeqArrIter;
   }
   static void *newArray_HSeqArrIter(Long_t nElements, void *p) {
      return p ? new(p) ::HSeqArrIter[nElements] : new ::HSeqArrIter[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSeqArrIter(void *p) {
      delete ((::HSeqArrIter*)p);
   }
   static void deleteArray_HSeqArrIter(void *p) {
      delete [] ((::HSeqArrIter*)p);
   }
   static void destruct_HSeqArrIter(void *p) {
      typedef ::HSeqArrIter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSeqArrIter(TBuffer &buf, void *obj) {
      ((::HSeqArrIter*)obj)->::HSeqArrIter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSeqArrIter

//______________________________________________________________________________
void HMdcStoreWires::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcStoreWires.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcStoreWires::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcStoreWires.
      TClass *R__cl = ::HMdcStoreWires::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDTPerEvent", &nDTPerEvent);
      R__insp.InspectMember(nDTPerEvent, "nDTPerEvent.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterEvents", &iterEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcWireAddr", &mdcWireAddr);
      R__insp.InspectMember(mdcWireAddr, "mdcWireAddr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterWires", &iterWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxMemSize", &maxMemSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEvents", &nEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDrTimes", &nDrTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDrTmPerEv", &nDrTmPerEv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRdEvents", &nRdEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRdDrTimes", &nRdDrTimes);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcStoreWires(void *p) {
      return  p ? new(p) ::HMdcStoreWires : new ::HMdcStoreWires;
   }
   static void *newArray_HMdcStoreWires(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcStoreWires[nElements] : new ::HMdcStoreWires[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcStoreWires(void *p) {
      delete ((::HMdcStoreWires*)p);
   }
   static void deleteArray_HMdcStoreWires(void *p) {
      delete [] ((::HMdcStoreWires*)p);
   }
   static void destruct_HMdcStoreWires(void *p) {
      typedef ::HMdcStoreWires current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcStoreWires(TBuffer &buf, void *obj) {
      ((::HMdcStoreWires*)obj)->::HMdcStoreWires::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcStoreWires

//______________________________________________________________________________
void HMdcStoreEvents::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcStoreEvents.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcStoreEvents::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcStoreEvents.
      TClass *R__cl = ::HMdcStoreEvents::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDTPerEvent", &nDTPerEvent);
      R__insp.InspectMember(nDTPerEvent, "nDTPerEvent.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterEvents", &iterEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcCells", &mdcCells);
      R__insp.InspectMember(mdcCells, "mdcCells.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterWires", &iterWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxMemSize", &maxMemSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEvents", &nEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDrTimes", &nDrTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDrTmPerEv", &nDrTmPerEv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRdEvents", &nRdEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRdDrTimes", &nRdDrTimes);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcStoreEvents(void *p) {
      return  p ? new(p) ::HMdcStoreEvents : new ::HMdcStoreEvents;
   }
   static void *newArray_HMdcStoreEvents(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcStoreEvents[nElements] : new ::HMdcStoreEvents[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcStoreEvents(void *p) {
      delete ((::HMdcStoreEvents*)p);
   }
   static void deleteArray_HMdcStoreEvents(void *p) {
      delete [] ((::HMdcStoreEvents*)p);
   }
   static void destruct_HMdcStoreEvents(void *p) {
      typedef ::HMdcStoreEvents current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcStoreEvents(TBuffer &buf, void *obj) {
      ((::HMdcStoreEvents*)obj)->::HMdcStoreEvents::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcStoreEvents

//______________________________________________________________________________
void HMdcStoreTracks::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcStoreTracks.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcStoreTracks::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcStoreTracks.
      TClass *R__cl = ::HMdcStoreTracks::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "address", &address);
      R__insp.InspectMember(address, "address.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackPos", &trackPos);
      R__insp.InspectMember(trackPos, "trackPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracksEvent", &nTracksEvent);
      R__insp.InspectMember(nTracksEvent, "nTracksEvent.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterAddress", &iterAddress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterTrackPos", &iterTrackPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterNTrckEv", &iterNTrckEv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagAddress", &flagAddress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1", &x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y1", &y1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x2", &x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y2", &y2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEventTracks", &nEventTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nReadTracks", &nReadTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventFlag", &eventFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arrayEnd", &arrayEnd);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcStoreTracks(void *p) {
      return  p ? new(p) ::HMdcStoreTracks : new ::HMdcStoreTracks;
   }
   static void *newArray_HMdcStoreTracks(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcStoreTracks[nElements] : new ::HMdcStoreTracks[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcStoreTracks(void *p) {
      delete ((::HMdcStoreTracks*)p);
   }
   static void deleteArray_HMdcStoreTracks(void *p) {
      delete [] ((::HMdcStoreTracks*)p);
   }
   static void destruct_HMdcStoreTracks(void *p) {
      typedef ::HMdcStoreTracks current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcStoreTracks(TBuffer &buf, void *obj) {
      ((::HMdcStoreTracks*)obj)->::HMdcStoreTracks::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcStoreTracks

//______________________________________________________________________________
void HMdcStoreClusters::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcStoreClusters.

   HMdcStoreTracks::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcStoreClusters::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcStoreClusters.
      TClass *R__cl = ::HMdcStoreClusters::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wires", &wires);
      R__insp.InspectMember(wires, "wires.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*wiresListPack[1200]", &wiresListPack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numWires", &numWires);
      HMdcStoreTracks::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcStoreClusters(void *p) {
      return  p ? new(p) ::HMdcStoreClusters : new ::HMdcStoreClusters;
   }
   static void *newArray_HMdcStoreClusters(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcStoreClusters[nElements] : new ::HMdcStoreClusters[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcStoreClusters(void *p) {
      delete ((::HMdcStoreClusters*)p);
   }
   static void deleteArray_HMdcStoreClusters(void *p) {
      delete [] ((::HMdcStoreClusters*)p);
   }
   static void destruct_HMdcStoreClusters(void *p) {
      typedef ::HMdcStoreClusters current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcStoreClusters(TBuffer &buf, void *obj) {
      ((::HMdcStoreClusters*)obj)->::HMdcStoreClusters::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcStoreClusters

//______________________________________________________________________________
void HMdcAlignerD::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcAlignerD.

   HMdcTrackFinder::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcAlignerD::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcAlignerD.
      TClass *R__cl = ::HMdcAlignerD::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*event", &event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "storeWires", &storeWires);
      R__insp.InspectMember(storeWires, "storeWires.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*storeClusters", &storeClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fitpar", &fitpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fitter", &fitter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*param", &param);
      HMdcTrackFinder::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcAlignerD(void *p) {
      return  p ? new(p) ::HMdcAlignerD : new ::HMdcAlignerD;
   }
   static void *newArray_HMdcAlignerD(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcAlignerD[nElements] : new ::HMdcAlignerD[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcAlignerD(void *p) {
      delete ((::HMdcAlignerD*)p);
   }
   static void deleteArray_HMdcAlignerD(void *p) {
      delete [] ((::HMdcAlignerD*)p);
   }
   static void destruct_HMdcAlignerD(void *p) {
      typedef ::HMdcAlignerD current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcAlignerD(TBuffer &buf, void *obj) {
      ((::HMdcAlignerD*)obj)->::HMdcAlignerD::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcAlignerD

//______________________________________________________________________________
void HMdcAlignerParam::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcAlignerParam.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcAlignerParam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcAlignerParam.
      TClass *R__cl = ::HMdcAlignerParam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alignSec", &alignSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstFile", &firstFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cluster", &cluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scan", &scan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offset", &offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMinParams", &nMinParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rootFile", &rootFile);
      R__insp.InspectMember(rootFile, "rootFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alignParams[24]", alignParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "steps[24]", steps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flags[24]", flags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minParams[24]", minParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minSteps[24]", minSteps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minIndex[24]", minIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLookUpTb", &fLookUpTb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSizesCellsFirstMod", &fSizesCellsFirstMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSizesCellsLastMod", &fSizesCellsLastMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstMod", &firstMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lastMod", &lastMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sysRSecOrg[4]", sysRSecOrg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sysRSec[4]", sysRSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tfSysRSec[4]", &tfSysRSec);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcAlignerParam(void *p) {
      return  p ? new(p) ::HMdcAlignerParam : new ::HMdcAlignerParam;
   }
   static void *newArray_HMdcAlignerParam(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcAlignerParam[nElements] : new ::HMdcAlignerParam[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcAlignerParam(void *p) {
      delete ((::HMdcAlignerParam*)p);
   }
   static void deleteArray_HMdcAlignerParam(void *p) {
      delete [] ((::HMdcAlignerParam*)p);
   }
   static void destruct_HMdcAlignerParam(void *p) {
      typedef ::HMdcAlignerParam current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcAlignerParam(TBuffer &buf, void *obj) {
      ((::HMdcAlignerParam*)obj)->::HMdcAlignerParam::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcAlignerParam

//______________________________________________________________________________
void HMdcMinimize::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcMinimize.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcMinimize::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcMinimize.
      TClass *R__cl = ::HMdcMinimize::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPar", &nPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parIn[200]", parIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parBest[200]", parBest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "grad[200]", grad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "grad2[200][200]", grad2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scalePar[200]", scalePar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "funct0", &funct0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "functIn", &functIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "functOut", &functOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "functBest", &functBest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fObjectFit", &fObjectFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFCN", &fFCN);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcMinimize(void *p) {
      return  p ? new(p) ::HMdcMinimize : new ::HMdcMinimize;
   }
   static void *newArray_HMdcMinimize(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcMinimize[nElements] : new ::HMdcMinimize[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcMinimize(void *p) {
      delete ((::HMdcMinimize*)p);
   }
   static void deleteArray_HMdcMinimize(void *p) {
      delete [] ((::HMdcMinimize*)p);
   }
   static void destruct_HMdcMinimize(void *p) {
      typedef ::HMdcMinimize current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcMinimize(TBuffer &buf, void *obj) {
      ((::HMdcMinimize*)obj)->::HMdcMinimize::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcMinimize

//______________________________________________________________________________
void HMdcDeDx2::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcDeDx2.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b.ReadStaticArray((double*)par);
      R__b.ReadStaticArray((double*)shiftpar);
      R__b.ReadStaticArray((double*)parMax);
      R__b.ReadStaticArray((double*)pargaincorr);
      R__b.ReadStaticArray((double*)parmindistcut);
      R__b.ReadStaticArray((float*)MinDistStep);
      R__b >> AngleStep;
      R__b >> hefr;
      R__b >> minimumWires;
      R__b >> window;
      R__b.CheckByteCount(R__s, R__c, HMdcDeDx2::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcDeDx2::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b.WriteArray((double*)par, 69120);
      R__b.WriteArray((double*)shiftpar, 34560);
      R__b.WriteArray((double*)parMax, 17280);
      R__b.WriteArray((double*)pargaincorr, 31680);
      R__b.WriteArray(parmindistcut, 4);
      R__b.WriteArray(MinDistStep, 4);
      R__b << AngleStep;
      R__b << hefr;
      R__b << minimumWires;
      R__b << window;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcDeDx2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcDeDx2.
      TClass *R__cl = ::HMdcDeDx2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "par[6][4][18][40][4]", par);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shiftpar[6][4][18][40][2]", shiftpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parMax[6][4][18][40]", parMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pargaincorr[6][4][6][220]", pargaincorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parmindistcut[4]", parmindistcut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MinDistStep[4]", MinDistStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AngleStep", &AngleStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hefr", &hefr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minimumWires", &minimumWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "window", &window);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sizescells", &sizescells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catcal", &catcal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cathit", &cathit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catclusinf", &catclusinf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catclus", &catclus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loccal", &loccal);
      R__insp.InspectMember(loccal, "loccal.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isInitialized", &isInitialized);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "method", &method);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "measurements", &measurements);
      R__insp.InspectMember(measurements, "measurements.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useCalibration", &useCalibration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ctskipmod0", &ctskipmod0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ctskipmod1", &ctskipmod1);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcDeDx2(void *p) {
      return  p ? new(p) ::HMdcDeDx2 : new ::HMdcDeDx2;
   }
   static void *newArray_HMdcDeDx2(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcDeDx2[nElements] : new ::HMdcDeDx2[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcDeDx2(void *p) {
      delete ((::HMdcDeDx2*)p);
   }
   static void deleteArray_HMdcDeDx2(void *p) {
      delete [] ((::HMdcDeDx2*)p);
   }
   static void destruct_HMdcDeDx2(void *p) {
      typedef ::HMdcDeDx2 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcDeDx2(TBuffer &buf, void *obj) {
      ((::HMdcDeDx2*)obj)->::HMdcDeDx2::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcDeDx2

//______________________________________________________________________________
void HMdcDeDx2Maker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcDeDx2Maker.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcDeDx2Maker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcDeDx2Maker.
      TClass *R__cl = ::HMdcDeDx2Maker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*trkcandCat", &trkcandCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*segCat", &segCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*clsCat", &clsCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*clsInfCat", &clsInfCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cal1Cat", &cal1Cat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasPrinted", &hasPrinted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*trkcanditer", &trkcanditer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mdcdedx", &mdcdedx);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcDeDx2Maker(void *p) {
      return  p ? new(p) ::HMdcDeDx2Maker : new ::HMdcDeDx2Maker;
   }
   static void *newArray_HMdcDeDx2Maker(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcDeDx2Maker[nElements] : new ::HMdcDeDx2Maker[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcDeDx2Maker(void *p) {
      delete ((::HMdcDeDx2Maker*)p);
   }
   static void deleteArray_HMdcDeDx2Maker(void *p) {
      delete [] ((::HMdcDeDx2Maker*)p);
   }
   static void destruct_HMdcDeDx2Maker(void *p) {
      typedef ::HMdcDeDx2Maker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcDeDx2Maker(TBuffer &buf, void *obj) {
      ((::HMdcDeDx2Maker*)obj)->::HMdcDeDx2Maker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcDeDx2Maker

//______________________________________________________________________________
void HMdcKickCor::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcKickCor.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcKickCor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcKickCor.
      TClass *R__cl = ::HMdcKickCor::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta0Mdc[4]", theta0Mdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y0Mdc[4]", y0Mdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z0Mdc[4]", z0Mdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaPar[10]", thetaPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiPar[8]", phiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "drParPos[4][6][6][8][10]", drParPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "drParNeg[4][6][6][8][10]", drParNeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rMaxPar[2][7][4]", rMaxPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tmpKickPar[2]", tmpKickPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tmpPhiPar[2]", tmpPhiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "par[6]", par);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dThetaPar", &dThetaPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dThetaLow", &dThetaLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dThetaHigh", &dThetaHigh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhiPar", &dPhiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhiLow", &dPhiLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhiHigh", &dPhiHigh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rad2deg", &rad2deg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indexOffset", &indexOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTheta", &nTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iPhi", &iPhi);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcKickCor(void *p) {
      return  p ? new(p) ::HMdcKickCor : new ::HMdcKickCor;
   }
   static void *newArray_HMdcKickCor(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcKickCor[nElements] : new ::HMdcKickCor[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcKickCor(void *p) {
      delete ((::HMdcKickCor*)p);
   }
   static void deleteArray_HMdcKickCor(void *p) {
      delete [] ((::HMdcKickCor*)p);
   }
   static void destruct_HMdcKickCor(void *p) {
      typedef ::HMdcKickCor current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcKickCor(TBuffer &buf, void *obj) {
      ((::HMdcKickCor*)obj)->::HMdcKickCor::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcKickCor

/********************************************************
* ../build/pc/MdcTrackDDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMdcTrackDDict();

extern "C" void G__set_cpp_environmentMdcTrackDDict() {
  G__cpp_reset_tagtableMdcTrackDDict();
}
#include <new>
extern "C" int G__cpp_dllrevMdcTrackDDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HMdcTrackDContFact */
static int G__MdcTrackDDict_196_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackDContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackDContFact[n];
     } else {
       p = new((void*) gvp) HMdcTrackDContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackDContFact;
     } else {
       p = new((void*) gvp) HMdcTrackDContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackDContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_196_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackDContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_196_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackDContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_196_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_196_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackDContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_196_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackDContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_196_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_196_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackDContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_196_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_196_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackDContFact* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackDContFact(*(HMdcTrackDContFact*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackDContFact G__THMdcTrackDContFact;
static int G__MdcTrackDDict_196_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackDContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackDContFact*) (soff+(sizeof(HMdcTrackDContFact)*i)))->~G__THMdcTrackDContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackDContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackDContFact*) (soff))->~G__THMdcTrackDContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_196_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackDContFact* dest = (HMdcTrackDContFact*) G__getstructoffset();
   *dest = *(HMdcTrackDContFact*) libp->para[0].ref;
   const HMdcTrackDContFact& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcPointPlane */
static int G__MdcTrackDDict_205_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcPointPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcPointPlane((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcPointPlane((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcPointPlane((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcPointPlane((Double_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcPointPlane[n];
       } else {
         p = new((void*) gvp) HMdcPointPlane[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcPointPlane;
       } else {
         p = new((void*) gvp) HMdcPointPlane;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointPlane*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcPointPlane*) G__getstructoffset())->copy(*(HMdcPointPlane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointPlane*) G__getstructoffset())->setX((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointPlane*) G__getstructoffset())->setY((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointPlane*) G__getstructoffset())->set(*(HMdcPointPlane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointPlane*) G__getstructoffset())->set((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointPlane*) G__getstructoffset())->setVector((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPointPlane*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPointPlane*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcPointPlane*) G__getstructoffset())->get(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcPointPlane*) G__getstructoffset())->getVector((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcPointPlane*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcPointPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcPointPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcPointPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcPointPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcPointPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcPointPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcPointPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_205_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcPointPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_205_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcPointPlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcPointPlane(*(HMdcPointPlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcPointPlane G__THMdcPointPlane;
static int G__MdcTrackDDict_205_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcPointPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcPointPlane*) (soff+(sizeof(HMdcPointPlane)*i)))->~G__THMdcPointPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcPointPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcPointPlane*) (soff))->~G__THMdcPointPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_205_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcPointPlane* dest = (HMdcPointPlane*) G__getstructoffset();
   *dest = *(HMdcPointPlane*) libp->para[0].ref;
   const HMdcPointPlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrapPlane */
static int G__MdcTrackDDict_206_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrapPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrapPlane[n];
     } else {
       p = new((void*) gvp) HMdcTrapPlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrapPlane;
     } else {
       p = new((void*) gvp) HMdcTrapPlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrapPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrapPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcTrapPlane(*(HMdcTrapPlane*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HMdcTrapPlane(*(HMdcTrapPlane*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrapPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcPointPlane& obj = ((HMdcTrapPlane*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcTrapPlane*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrapPlane*) G__getstructoffset())->copy(*(HMdcTrapPlane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrapPlane*) G__getstructoffset())->set(*(HMdcTrapPlane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrapPlane*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrapPlane*) G__getstructoffset())->clearNPoints();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrapPlane*) G__getstructoffset())->addPoint(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrapPlane*) G__getstructoffset())->addPoint(*(HMdcPointPlane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrapPlane*) G__getstructoffset())->getNPoints());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcTrapPlane*) G__getstructoffset())->getXYMinMax(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrapPlane*) G__getstructoffset())->getLineInd((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrapPlane*) G__getstructoffset())->getXCross((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrapPlane*) G__getstructoffset())->getXminXmax((Double_t) G__double(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrapPlane*) G__getstructoffset())->getXminXmax((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrapPlane*) G__getstructoffset())->getXMinPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrapPlane*) G__getstructoffset())->getXMaxPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrapPlane*) G__getstructoffset())->getYMinPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrapPlane*) G__getstructoffset())->getYMaxPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrapPlane*) G__getstructoffset())->getXMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrapPlane*) G__getstructoffset())->getXMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrapPlane*) G__getstructoffset())->getYMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrapPlane*) G__getstructoffset())->getYMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrapPlane*) G__getstructoffset())->calcDir();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTrapPlane*) G__getstructoffset())->twoContoursSum(*(HMdcTrapPlane*) libp->para[0].ref, *(HMdcTrapPlane*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrapPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrapPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrapPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrapPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrapPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrapPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrapPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrapPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_206_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrapPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrapPlane G__THMdcTrapPlane;
static int G__MdcTrackDDict_206_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrapPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrapPlane*) (soff+(sizeof(HMdcTrapPlane)*i)))->~G__THMdcTrapPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrapPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrapPlane*) (soff))->~G__THMdcTrapPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_206_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrapPlane* dest = (HMdcTrapPlane*) G__getstructoffset();
   *dest = *(HMdcTrapPlane*) libp->para[0].ref;
   const HMdcTrapPlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrap */
static int G__MdcTrackDDict_207_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrap[n];
     } else {
       p = new((void*) gvp) HMdcTrap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrap;
     } else {
       p = new((void*) gvp) HMdcTrap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrap* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcTrap(*(HMdcTrap*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HMdcTrap(*(HMdcTrap*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HMdcTrap*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrap*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcTrap*) G__getstructoffset())->copy(*(HMdcTrap*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrap*) G__getstructoffset())->set(*(HMdcTrap*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrap*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrap*) G__getstructoffset())->transFrom(*(HGeomTransform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrap*) G__getstructoffset())->transTo(*(HGeomTransform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrap*) G__getstructoffset())->getRibInd((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrap*) G__getstructoffset())->setDbPointNum((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcTrap*) G__getstructoffset())->getDbPointNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrap*) G__getstructoffset())->getRibInXYContour((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTrap*) G__getstructoffset())->getXYContour(*(HMdcTrapPlane*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_207_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrap G__THMdcTrap;
static int G__MdcTrackDDict_207_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrap*) (soff+(sizeof(HMdcTrap)*i)))->~G__THMdcTrap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrap*) (soff))->~G__THMdcTrap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_207_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrap* dest = (HMdcTrap*) G__getstructoffset();
   *dest = *(HMdcTrap*) libp->para[0].ref;
   const HMdcTrap& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcPlane */
static int G__MdcTrackDDict_208_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcPlane[n];
     } else {
       p = new((void*) gvp) HMdcPlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcPlane;
     } else {
       p = new((void*) gvp) HMdcPlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcPlane& obj = ((HMdcPlane*) G__getstructoffset())->operator=(*(HMdcPlane*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcPlane*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPlane*) G__getstructoffset())->setPlanePar(*(HMdcPlane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPlane*) G__getstructoffset())->setPlanePar((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPlane*) G__getstructoffset())->setPlanePar(*(HGeomTransform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPlane*) G__getstructoffset())->A());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPlane*) G__getstructoffset())->B());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPlane*) G__getstructoffset())->C());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPlane*) G__getstructoffset())->D());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPlane*) G__getstructoffset())->getZOnPlane((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPlane*) G__getstructoffset())->getYOnPlane((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPlane*) G__getstructoffset())->getXOnPlane((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPlane*) G__getstructoffset())->dZdX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPlane*) G__getstructoffset())->dZdY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPlane*) G__getstructoffset())->calcMinDistance((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPlane*) G__getstructoffset())->calcMinDistance(*(HGeomVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPlane*) G__getstructoffset())->calcMinDistanceAndErr(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPlane*) G__getstructoffset())->normalLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector* pobj;
         const HGeomVector xobj = ((const HMdcPlane*) G__getstructoffset())->getNormalVector();
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector* pobj;
         const HGeomVector xobj = ((const HMdcPlane*) G__getstructoffset())->getNormalUnitVector();
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPlane*) G__getstructoffset())->transTo((HGeomTransform*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPlane*) G__getstructoffset())->transFrom((HGeomTransform*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcPlane*) G__getstructoffset())->getPlanePar(*(HMdcPlane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcPlane*) G__getstructoffset())->getPlanePar(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcPlane*) G__getstructoffset())->calcIntersection(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcPlane*) G__getstructoffset())->calcIntersection(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcPlane*) G__getstructoffset())->calcIntersection(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])
, *(Double_t*) G__Doubleref(&libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcPlane*) G__getstructoffset())->calcSegIntersec(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])
, *(Float_t*) G__Floatref(&libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcPlane*) G__getstructoffset())->calcSegIntersec(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_208_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_208_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcPlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcPlane(*(HMdcPlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcPlane G__THMdcPlane;
static int G__MdcTrackDDict_208_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcPlane*) (soff+(sizeof(HMdcPlane)*i)))->~G__THMdcPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcPlane*) (soff))->~G__THMdcPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcPointOnPlane */
static int G__MdcTrackDDict_209_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcPointOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcPointOnPlane[n];
     } else {
       p = new((void*) gvp) HMdcPointOnPlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcPointOnPlane;
     } else {
       p = new((void*) gvp) HMdcPointOnPlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcPointOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcPointOnPlane((HMdcPlane*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HMdcPointOnPlane((HMdcPlane*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcPointOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcPointOnPlane(*(HMdcPointOnPlane*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HMdcPointOnPlane(*(HMdcPointOnPlane*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->setPlane((HMdcPlane*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->setX((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->setY((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->setXY((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->setXY(*(HMdcPointOnPlane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->setXYZ(*(HMdcPointOnPlane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->addToX((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->addToY((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->addToXY((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->subFromXY((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->calcPoint((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->transTo((HGeomTransform*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->transFrom((HGeomTransform*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->calcPoint(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((const HMdcPointOnPlane*) G__getstructoffset())->getVector();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcPointOnPlane*) G__getstructoffset())->getPlane());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPointOnPlane*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPointOnPlane*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPointOnPlane*) G__getstructoffset())->getZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPointOnPlane*) G__getstructoffset())->X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPointOnPlane*) G__getstructoffset())->Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPointOnPlane*) G__getstructoffset())->Z());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPointOnPlane*) G__getstructoffset())->dZdX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcPointOnPlane*) G__getstructoffset())->dZdY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcPointOnPlane*) G__getstructoffset())->getVector(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcPointOnPlane& obj = ((HMdcPointOnPlane*) G__getstructoffset())->operator=(*(HMdcPointOnPlane*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcPointOnPlane*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcPointOnPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcPointOnPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcPointOnPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcPointOnPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPointOnPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcPointOnPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcPointOnPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcPointOnPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_209_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcPointOnPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcPointOnPlane G__THMdcPointOnPlane;
static int G__MdcTrackDDict_209_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcPointOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcPointOnPlane*) (soff+(sizeof(HMdcPointOnPlane)*i)))->~G__THMdcPointOnPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcPointOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcPointOnPlane*) (soff))->~G__THMdcPointOnPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLineParam */
static int G__MdcTrackDDict_210_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLineParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLineParam[n];
     } else {
       p = new((void*) gvp) HMdcLineParam[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLineParam;
     } else {
       p = new((void*) gvp) HMdcLineParam;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLineParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLineParam*) G__getstructoffset())->setParam((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLineParam*) G__getstructoffset())->setParam(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcLineParam*) G__getstructoffset())->setCoorSys((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcLineParam*) G__getstructoffset())->setCoorSys((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLineParam*) G__getstructoffset())->setFirstPlane((HMdcPlane*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLineParam*) G__getstructoffset())->setSecondPlane((HMdcPlane*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLineParam*) G__getstructoffset())->copyPlanes(*(HMdcLineParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLineParam*) G__getstructoffset())->copyParam(*(HMdcLineParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLineParam*) G__getstructoffset())->compare(*(HMdcLineParam*) libp->para[0].ref, (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLineParam*) G__getstructoffset())->compare(*(HMdcLineParam*) libp->para[0].ref, (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLineParam*) G__getstructoffset())->setParam((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLineParam*) G__getstructoffset())->addToParam((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLineParam*) G__getstructoffset())->addToParam((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLineParam*) G__getstructoffset())->setScParam((Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLineParam*) G__getstructoffset())->setScParam(*(HMdcLineParam*) libp->para[0].ref, (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLineParam*) G__getstructoffset())->getLinePar((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLineParam*) G__getstructoffset())->setSegmentLine((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLineParam& obj = ((HMdcLineParam*) G__getstructoffset())->operator=(*(HMdcLineParam*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcLineParam*) G__getstructoffset())->transTo((HGeomTransform*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcLineParam*) G__getstructoffset())->transTo((HGeomTransform*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcLineParam*) G__getstructoffset())->transTo((HGeomTransform*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcLineParam*) G__getstructoffset())->transFrom((HGeomTransform*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcLineParam*) G__getstructoffset())->transFrom((HGeomTransform*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcLineParam*) G__getstructoffset())->transFrom((HGeomTransform*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcLineParam*) G__getstructoffset())->getSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcLineParam*) G__getstructoffset())->getMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcLineParam*) G__getstructoffset())->getFirstPlane());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcLineParam*) G__getstructoffset())->getSecondPlane());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcPointOnPlane& obj = ((const HMdcLineParam*) G__getstructoffset())->getFisrtPoint();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcPointOnPlane& obj = ((const HMdcLineParam*) G__getstructoffset())->getSecondPoint();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((const HMdcLineParam*) G__getstructoffset())->getDir();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->x1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->y1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->z1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->x2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->y2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->z2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->getThetaRad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->getPhiRad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->getThetaDeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->getPhiDeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dZ1dX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dZ2dX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dZ1dY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dZ2dY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dDirXdX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dDirXdX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dDirYdY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dDirYdY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dDirZdX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dDirZdX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dDirZdY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLineParam*) G__getstructoffset())->dDirZdY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLineParam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLineParam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLineParam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLineParam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLineParam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLineParam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLineParam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLineParam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_210_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLineParam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_210_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLineParam* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLineParam(*(HMdcLineParam*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLineParam));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLineParam G__THMdcLineParam;
static int G__MdcTrackDDict_210_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLineParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLineParam*) (soff+(sizeof(HMdcLineParam)*i)))->~G__THMdcLineParam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLineParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLineParam*) (soff))->~G__THMdcLineParam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcGetContainers */
static int G__MdcTrackDDict_212_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcGetContainers::isInited((HParSet*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcGetContainers::getObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGetContainers::deleteCont();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcLayerGeomPar((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcLayerGeomPar());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcLayerCorrPar((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcLayerCorrPar());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcGeomPar((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcGeomPar());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcDetector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getSpecGeomPar((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getSpecGeomPar());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcGeomStruct((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcGeomStruct());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcRawStruct((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcRawStruct());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcLookupGeom((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcLookupGeom());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getModGeomPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getModGeomPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getGeomCompositeVolume((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getGeomCompositeVolume((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcLayerGeomParLay((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getMdcLayerGeomParLay((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         const HGeomTransform& obj = ((HMdcGetContainers*) G__getstructoffset())->getLabTransSec((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   case 1:
      {
         const HGeomTransform& obj = ((HMdcGetContainers*) G__getstructoffset())->getLabTransSec((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getLabTransSec(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getLabTransSec(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         const HGeomTransform& obj = ((HMdcGetContainers*) G__getstructoffset())->getLabTransMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   case 2:
      {
         const HGeomTransform& obj = ((HMdcGetContainers*) G__getstructoffset())->getLabTransMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getLabTransMod(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getLabTransMod(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getSecTransMod(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getSecTransMod(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getLabTransLayer(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getLabTransLayer(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getSecTransLayer(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getSecTransLayer(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const HGeomTransform& obj = ((HMdcGetContainers*) G__getstructoffset())->getModTransLayer((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   case 3:
      {
         const HGeomTransform& obj = ((HMdcGetContainers*) G__getstructoffset())->getModTransLayer((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getSecTransCathLayer(*(HGeomTransform*) libp->para[0].ref, *(HGeomTransform*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getSecTransCathLayer(*(HGeomTransform*) libp->para[0].ref, *(HGeomTransform*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getLabTransLayerZ0(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getLabTransLayerZ0(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcGetContainers*) G__getstructoffset())->getSensWireThick((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getModTransGeantLayer(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getLabTransGeantLayer(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->getSecTransGeantLayer(*(HGeomTransform*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGetContainers*) G__getstructoffset())->setModList((const Int_t (*)[4]) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->isModActive((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->isSegActive((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGetContainers*) G__getstructoffset())->isSecActive((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcGetContainers*) G__getstructoffset())->getNumModulesInSec((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getCatMdcCal1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getCatGeantKine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getCatGeantMdc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getCatMdcClus((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getCatMdcClus());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getCatMdcClusFit((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getCatMdcClusFit());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getCatMdcWireFit((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getCatMdcWireFit());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getCatMdcClusInf((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getCatMdcClusInf());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getCatMdcTrkCand((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcGetContainers*) G__getstructoffset())->getCatMdcTrkCand());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGetContainers*) G__getstructoffset())->setCatMdcCal1((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGetContainers*) G__getstructoffset())->setCatGeantKine((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGetContainers*) G__getstructoffset())->setCatGeantMdc((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGetContainers*) G__getstructoffset())->setCatMdcClus((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGetContainers*) G__getstructoffset())->setCatMdcClusFit((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGetContainers*) G__getstructoffset())->setCatMdcWireFit((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGetContainers*) G__getstructoffset())->setCatMdcClusInf((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGetContainers*) G__getstructoffset())->setCatMdcTrkCand((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcGetContainers::isGeant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGetContainers::getFileName(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGetContainers::getFileNameWInd(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGetContainers::getRunId(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGetContainers::getEventDate(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGetContainers::getEventTime(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcGetContainers::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGetContainers::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcGetContainers::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGetContainers::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGetContainers*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGetContainers::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGetContainers::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGetContainers::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_212_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGetContainers::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_212_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcGetContainers* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcGetContainers(*(HMdcGetContainers*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_212_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGetContainers* dest = (HMdcGetContainers*) G__getstructoffset();
   *dest = *(HMdcGetContainers*) libp->para[0].ref;
   const HMdcGetContainers& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLayerCorrPar */
static int G__MdcTrackDDict_220_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLayerCorrPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayerCorrPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcLayerCorrPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayerCorrPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcLayerCorrPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayerCorrPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcLayerCorrPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLayerCorrPar[n];
       } else {
         p = new((void*) gvp) HMdcLayerCorrPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLayerCorrPar;
       } else {
         p = new((void*) gvp) HMdcLayerCorrPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_220_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HMdcLayerCorrPar*) G__getstructoffset())->init((HParIo*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HMdcLayerCorrPar*) G__getstructoffset())->init((HParIo*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_220_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((HMdcLayerCorrPar*) G__getstructoffset())->addLayerShift((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HMdcLayerCorrPar*) G__getstructoffset())->addLayerShift((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_220_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerCorrPar*) G__getstructoffset())->setDefaultPar();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_220_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcLayerCorrPar*) G__getstructoffset())->getLayerCorrPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_220_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLayerCorrPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_220_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerCorrPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_220_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLayerCorrPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_220_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLayerCorrPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_220_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerCorrPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_220_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerCorrPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_220_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLayerCorrPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_220_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerCorrPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_220_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLayerCorrPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_220_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLayerCorrPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLayerCorrPar(*(HMdcLayerCorrPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLayerCorrPar G__THMdcLayerCorrPar;
static int G__MdcTrackDDict_220_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLayerCorrPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLayerCorrPar*) (soff+(sizeof(HMdcLayerCorrPar)*i)))->~G__THMdcLayerCorrPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLayerCorrPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLayerCorrPar*) (soff))->~G__THMdcLayerCorrPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_220_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLayerCorrPar* dest = (HMdcLayerCorrPar*) G__getstructoffset();
   *dest = *(HMdcLayerCorrPar*) libp->para[0].ref;
   const HMdcLayerCorrPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcSizesCellsCell */
static int G__MdcTrackDDict_222_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSizesCellsCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSizesCellsCell[n];
     } else {
       p = new((void*) gvp) HMdcSizesCellsCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSizesCellsCell;
     } else {
       p = new((void*) gvp) HMdcSizesCellsCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcSizesCellsCell*) G__getstructoffset())->getWirePoint((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCellsCell*) G__getstructoffset())->setStatus((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCellsCell*) G__getstructoffset())->getStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSizesCellsCell*) G__getstructoffset())->getWireLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcSizesCellsCell*) G__getstructoffset())->getReadoutSide());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSizesCellsCell*) G__getstructoffset())->getXReadout());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsCell*) G__getstructoffset())->getWirePos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCellsCell*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSizesCellsCell*) G__getstructoffset())->getSignPath((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HMdcSizesCellsCell*) G__getstructoffset())->getWirePnt1();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HMdcSizesCellsCell*) G__getstructoffset())->getWirePnt2();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCellsCell*) G__getstructoffset())->setReadoutSide((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCellsCell*) G__getstructoffset())->setWireLength((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCellsCell*) G__getstructoffset())->setXReadout((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCellsCell*) G__getstructoffset())->setWirePos((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSizesCellsCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCellsCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcSizesCellsCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCellsCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCellsCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCellsCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSizesCellsCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCellsCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_222_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSizesCellsCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_222_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcSizesCellsCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcSizesCellsCell(*(HMdcSizesCellsCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcSizesCellsCell G__THMdcSizesCellsCell;
static int G__MdcTrackDDict_222_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcSizesCellsCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcSizesCellsCell*) (soff+(sizeof(HMdcSizesCellsCell)*i)))->~G__THMdcSizesCellsCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcSizesCellsCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcSizesCellsCell*) (soff))->~G__THMdcSizesCellsCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_222_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSizesCellsCell* dest = (HMdcSizesCellsCell*) G__getstructoffset();
   *dest = *(HMdcSizesCellsCell*) libp->para[0].ref;
   const HMdcSizesCellsCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcSizesCellsMod */
static int G__MdcTrackDDict_223_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSizesCellsMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcSizesCellsMod((HMdcSizesCellsSec*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcSizesCellsMod((HMdcSizesCellsSec*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcSizesCellsLayer& obj = ((HMdcSizesCellsMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HMdcSizesCellsMod*) G__getstructoffset())->setSecTrans((HGeomTransform*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HMdcSizesCellsMod*) G__getstructoffset())->setSecTrans((HGeomTransform*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HMdcSizesCellsMod*) G__getstructoffset())->setSecTrans());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcSizesCellsMod*) G__getstructoffset())->getSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcSizesCellsMod*) G__getstructoffset())->getMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcSizesCellsMod*) G__getstructoffset())->getSizesCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcSizesCellsMod*) G__getstructoffset())->getSecTrans());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsMod*) G__getstructoffset())->transTo((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsMod*) G__getstructoffset())->transTo(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsMod*) G__getstructoffset())->transFrom(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsMod*) G__getstructoffset())->transFromZ0(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsMod*) G__getstructoffset())->transFromZ0(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsMod*) G__getstructoffset())->rotVectTo((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsMod*) G__getstructoffset())->calcInterTrMod(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsMod*) G__getstructoffset())->calcMdcHit(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])
, *(Double_t*) G__Doubleref(&libp->para[8]), *(Double_t*) G__Doubleref(&libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsMod*) G__getstructoffset())->calcMdcHit(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), *(Double_t*) G__Doubleref(&libp->para[15])
, *(Double_t*) G__Doubleref(&libp->para[16]), *(Double_t*) G__Doubleref(&libp->para[17])
, *(Double_t*) G__Doubleref(&libp->para[18]), *(Double_t*) G__Doubleref(&libp->para[19])
, *(Double_t*) G__Doubleref(&libp->para[20]), *(Double_t*) G__Doubleref(&libp->para[21])
, *(Double_t*) G__Doubleref(&libp->para[22]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const HMdcSizesCellsMod*) G__getstructoffset())->getTfSysRSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const HMdcSizesCellsMod*) G__getstructoffset())->getMdcHitLookupTb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSizesCellsMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCellsMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcSizesCellsMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCellsMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCellsMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCellsMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSizesCellsMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCellsMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_223_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSizesCellsMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_223_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcSizesCellsMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcSizesCellsMod(*(HMdcSizesCellsMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcSizesCellsMod G__THMdcSizesCellsMod;
static int G__MdcTrackDDict_223_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcSizesCellsMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcSizesCellsMod*) (soff+(sizeof(HMdcSizesCellsMod)*i)))->~G__THMdcSizesCellsMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcSizesCellsMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcSizesCellsMod*) (soff))->~G__THMdcSizesCellsMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_223_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSizesCellsMod* dest = (HMdcSizesCellsMod*) G__getstructoffset();
   *dest = *(HMdcSizesCellsMod*) libp->para[0].ref;
   const HMdcSizesCellsMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcSizesCells */
static int G__MdcTrackDDict_224_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSizesCells::getObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSizesCells::getExObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCells::deleteCont();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcSizesCellsSec& obj = ((const HMdcSizesCells*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSizesCells*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSizesCells*) G__getstructoffset())->initContainer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCells*) G__getstructoffset())->hasChanged());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCells*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((const HMdcSizesCells*) G__getstructoffset())->getCellVol((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, *(HMdcTrap*) libp->para[4].ref, (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((const HMdcSizesCells*) G__getstructoffset())->getCellVol((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, *(HMdcTrap*) libp->para[4].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcSizesCells*) G__getstructoffset())->findReadOutSide((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCells*) G__getstructoffset())->modStatus((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSizesCells*) G__getstructoffset())->nModInSeg((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((HMdcSizesCells*) G__getstructoffset())->fillModCont((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (HGeomTransform*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HMdcSizesCells*) G__getstructoffset())->fillModCont((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (HGeomTransform*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HMdcSizesCells*) G__getstructoffset())->fillModCont((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSizesCells*) G__getstructoffset())->fillModCont((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((const HMdcSizesCells*) G__getstructoffset())->getTargetFirstPoint();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((const HMdcSizesCells*) G__getstructoffset())->getTargetMiddlePoint();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((const HMdcSizesCells*) G__getstructoffset())->getTargetLastPoint();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCells*) G__getstructoffset())->calcRZToTargLine(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSizesCells*) G__getstructoffset())->getNumOfTargets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcSizesCells*) G__getstructoffset())->getTargets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HMdcSizesCells*) G__getstructoffset())->getTarHalfThick());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCells*) G__getstructoffset())->getMaxTargHThick());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCells*) G__getstructoffset())->setNotGeomModified();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCells::calcMdcSeg(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])
, *(Double_t*) G__Doubleref(&libp->para[8]), *(Double_t*) G__Doubleref(&libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCells::setTransform((Double_t*) G__int(libp->para[0]), *(HGeomTransform*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCells::copyTransfToArr(*(HGeomTransform*) libp->para[0].ref, (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCells::calcRZToLineXY(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, *(Double_t*) G__Doubleref(&libp->para[8]), *(Double_t*) G__Doubleref(&libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCells::calcMdcSeg(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), (Double_t) G__double(libp->para[13])
, (Double_t) G__double(libp->para[14]), *(Double_t*) G__Doubleref(&libp->para[15])
, *(Double_t*) G__Doubleref(&libp->para[16]), *(Double_t*) G__Doubleref(&libp->para[17])
, *(Double_t*) G__Doubleref(&libp->para[18]), *(Double_t*) G__Doubleref(&libp->para[19])
, *(Double_t*) G__Doubleref(&libp->para[20]), *(Double_t*) G__Doubleref(&libp->para[21])
, *(Double_t*) G__Doubleref(&libp->para[22]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCells::rotateYZ(*(HGeomRotation*) libp->para[0].ref, (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCells::rotateXYZ(
*(HGeomRotation*) libp->para[0].ref, (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCells::rotateDir(*(HGeomRotation*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCells::rotateDir(*(HGeomRotation*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCells*) G__getstructoffset())->transLineToOtherSec(*(HMdcLineParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, *(HGeomVector*) libp->para[2].ref, *(HGeomVector*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCells*) G__getstructoffset())->transLineToAnotherSec(*(HMdcLineParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((const HMdcSizesCells*) G__getstructoffset())->calcTargNum((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const HMdcSizesCells*) G__getstructoffset())->calcTargNum((Double_t) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCells*) G__getstructoffset())->setGeomModifiedFlag();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 71, (long) ((HMdcSizesCells*) G__getstructoffset())->modStatusArr((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSizesCells*) G__getstructoffset())->nCells((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HMdcSizesCells*) G__getstructoffset())->getTargetP((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSizesCells::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCells::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcSizesCells::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCells::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCells*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCells::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSizesCells::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCells::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_224_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSizesCells::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_224_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcSizesCells* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcSizesCells(*(HMdcSizesCells*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_224_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSizesCells* dest = (HMdcSizesCells*) G__getstructoffset();
   *dest = *(HMdcSizesCells*) libp->para[0].ref;
   const HMdcSizesCells& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcSizesCellsLayer */
static int G__MdcTrackDDict_225_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSizesCellsLayer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSizesCellsLayer[n];
     } else {
       p = new((void*) gvp) HMdcSizesCellsLayer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSizesCellsLayer;
     } else {
       p = new((void*) gvp) HMdcSizesCellsLayer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcSizesCellsCell& obj = ((const HMdcSizesCellsLayer*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HMdcSizesCellsLayer*) G__getstructoffset())->setSecTrans((Double_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HMdcSizesCellsLayer*) G__getstructoffset())->setSecTrans());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HMdcSizesCellsLayer*) G__getstructoffset())->fillLayerCont((HMdcLayerCorrPar*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HMdcSizesCellsLayer*) G__getstructoffset())->fillLayerCont((HMdcLayerCorrPar*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcSizesCellsLayer*) G__getstructoffset())->getLayerGeomParLay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcSizesCellsLayer*) G__getstructoffset())->getGeomVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcSizesCellsLayer*) G__getstructoffset())->getSizesCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getCatDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getHalfCatDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getPitch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getInvPitch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getHalfPitch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getMaxDriftDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getCosWireOr((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getSinWireOr((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getTanWireOr((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getWireOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getCellOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getCellOffsetPart2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getNCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getSecTrans());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getModTrans());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getFirstCellPart2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getLayerNParts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getLayerPart((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getRotLayP1SysRSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getRotLayP2SysRSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getRotLayP1SysRMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getRotLayP2SysRMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomTransform& obj = ((const HMdcSizesCellsLayer*) G__getstructoffset())->getRotLaySysRSec((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getRLSysRSec((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getRLP1SysRSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getRLP2SysRSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsLayer*) G__getstructoffset())->transSecToRotLayer((Int_t) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->calcCellNum((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->calcCell((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->calcCrCellsGeantMdc(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->calcCrossedCells(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *(Float_t*) G__Floatref(&libp->para[6]), *(Float_t*) G__Floatref(&libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->calcCrossedCells(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *(Int_t*) G__Intref(&libp->para[6]), *(Int_t*) G__Intref(&libp->para[7])
, *(Float_t*) G__Floatref(&libp->para[8]), *(Float_t*) G__Floatref(&libp->para[9])
, *(Float_t*) G__Floatref(&libp->para[10])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->calcSegCrossCells(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Float_t*) G__Floatref(&libp->para[6]), *(Float_t*) G__Floatref(&libp->para[7])
, *(Float_t*) G__Floatref(&libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->calcCrossedCells(*(HMdcLineParam*) libp->para[0].ref, *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getAlpha((Int_t) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcSizesCellsLayer*) G__getstructoffset())->getDist(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getDist(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsLayer*) G__getstructoffset())->getYZinWireSys((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getDistToZero((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getImpactToZero((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getImpact(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getImpact(*(HMdcLineParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getDist(*(HMdcLineParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getAlpha(*(HMdcLineParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getImpact(
*(HMdcLineParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsLayer*) G__getstructoffset())->getImpact(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getImpactLSys(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getImpact(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])
, *(Double_t*) G__Doubleref(&libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getImpact(*(HMdcLineParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getImpact(
*(HMdcLineParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->distanceSign(*(HMdcLineParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getDriftDist(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])
, *(Double_t*) G__Doubleref(&libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getXSign(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getXSign(*(HMdcLineParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getSignPath(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getSignPath(*(HMdcLineParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getSignPath(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), *(Float_t*) G__Floatref(&libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsLayer*) G__getstructoffset())->transTo(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsLayer*) G__getstructoffset())->transFrom(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsLayer*) G__getstructoffset())->rotVectToLay((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getXinRotLay((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getYinRotLay((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->calcInnerSegCell((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->calcInnerSegCell(*(HGeomVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsLayer*) G__getstructoffset())->getPntToCell((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsLayer*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getSensWiresThickness());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getZGeantHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomTransform& obj = ((const HMdcSizesCellsLayer*) G__getstructoffset())->getSecTransGeant();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomTransform& obj = ((const HMdcSizesCellsLayer*) G__getstructoffset())->getModTransGeant();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcPlane& obj = ((const HMdcSizesCellsLayer*) G__getstructoffset())->getGeantHitsPlane();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->calcCrossedCellsPar(
(Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsLayer*) G__getstructoffset())->getRotLSysForOtherSecSys((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(HGeomTransform*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCellsLayer*) G__getstructoffset())->calcCrossedCellsPar(
*(HMdcLineParam*) libp->para[0].ref, (Double_t) G__double(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HMdcSizesCellsLayer::calcAlphaImpact((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->getWireOrient((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcSizesCellsLayer*) G__getstructoffset())->calcWireY((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCellsLayer*) G__getstructoffset())->initLayer((HMdcSizesCellsMod*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSizesCellsLayer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCellsLayer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcSizesCellsLayer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCellsLayer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCellsLayer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCellsLayer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSizesCellsLayer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCellsLayer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_225_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSizesCellsLayer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_225_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcSizesCellsLayer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcSizesCellsLayer(*(HMdcSizesCellsLayer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcSizesCellsLayer G__THMdcSizesCellsLayer;
static int G__MdcTrackDDict_225_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcSizesCellsLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcSizesCellsLayer*) (soff+(sizeof(HMdcSizesCellsLayer)*i)))->~G__THMdcSizesCellsLayer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcSizesCellsLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcSizesCellsLayer*) (soff))->~G__THMdcSizesCellsLayer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_225_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSizesCellsLayer* dest = (HMdcSizesCellsLayer*) G__getstructoffset();
   *dest = *(HMdcSizesCellsLayer*) libp->para[0].ref;
   const HMdcSizesCellsLayer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcSizesCellsSec */
static int G__MdcTrackDDict_226_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSizesCellsSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcSizesCellsSec((HMdcSizesCells*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcSizesCellsSec((HMdcSizesCells*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcSizesCellsMod& obj = ((const HMdcSizesCellsSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSizesCellsSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcSizesCellsSec*) G__getstructoffset())->getLabTrans());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcSizesCellsSec*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSizesCellsSec*) G__getstructoffset())->modStatus((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcSizesCellsSec*) G__getstructoffset())->getSizesCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((const HMdcSizesCellsSec*) G__getstructoffset())->getTargetFirstPoint();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((const HMdcSizesCellsSec*) G__getstructoffset())->getTargetMiddlePoint();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((const HMdcSizesCellsSec*) G__getstructoffset())->getTargetLastPoint();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSizesCellsSec*) G__getstructoffset())->calcRZToTargLine(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSizesCellsSec*) G__getstructoffset())->getNumOfTargets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcSizesCellsSec*) G__getstructoffset())->getTargets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcSizesCellsSec*) G__getstructoffset())->getTarget((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomTransform& obj = ((HMdcSizesCellsSec*) G__getstructoffset())->getLabTransform();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCellsSec*) G__getstructoffset())->setNumOfTargets((HGeomVector*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (HGeomVector*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSizesCellsSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCellsSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcSizesCellsSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSizesCellsSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSizesCellsSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCellsSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSizesCellsSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSizesCellsSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_226_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSizesCellsSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_226_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcSizesCellsSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcSizesCellsSec(*(HMdcSizesCellsSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcSizesCellsSec G__THMdcSizesCellsSec;
static int G__MdcTrackDDict_226_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcSizesCellsSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcSizesCellsSec*) (soff+(sizeof(HMdcSizesCellsSec)*i)))->~G__THMdcSizesCellsSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcSizesCellsSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcSizesCellsSec*) (soff))->~G__THMdcSizesCellsSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_226_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSizesCellsSec* dest = (HMdcSizesCellsSec*) G__getstructoffset();
   *dest = *(HMdcSizesCellsSec*) libp->para[0].ref;
   const HMdcSizesCellsSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLayer */
static int G__MdcTrackDDict_228_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLayer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayer[n];
     } else {
       p = new((void*) gvp) HMdcLayer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayer;
     } else {
       p = new((void*) gvp) HMdcLayer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayer*) G__getstructoffset())->setMDCCrop((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcLayer*) G__getstructoffset())->fillLayerPoints((HMdcSizesCells*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcLayer*) G__getstructoffset())->fillLayerPoints((HMdcSizesCells*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayer*) G__getstructoffset())->calcCropedLayer((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayer*) G__getstructoffset())->getLayersEdge(
*(TVector2*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])
, *(Double_t*) G__Doubleref(&libp->para[8]), *(Double_t*) G__Doubleref(&libp->para[9])
, *(Double_t*) G__Doubleref(&libp->para[10]), *(Double_t*) G__Doubleref(&libp->para[11])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayer*) G__getstructoffset())->getLayersEdge(
*(TVector2*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayer*) G__getstructoffset())->getCropedLayersEdge(
*(TVector2*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayer*) G__getstructoffset())->isCroped(*(TVector2*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayer*) G__getstructoffset())->getLayerPoints(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(TVector2*) libp->para[3].ref
, *(TVector2*) libp->para[4].ref, *(TVector2*) libp->para[5].ref
, *(TVector2*) libp->para[6].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayer*) G__getstructoffset())->getCropedLayerPoints(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(TVector2*) libp->para[3].ref
, *(TVector2*) libp->para[4].ref, *(TVector2*) libp->para[5].ref
, *(TVector2*) libp->para[6].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayer*) G__getstructoffset())->printLayer((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayer*) G__getstructoffset())->printCropedLayer((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayer*) G__getstructoffset())->fillRKPlane((HMdcSizesCells*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HMdcLayer*) G__getstructoffset())->getTargetMidPoint();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcPlane& obj = ((HMdcLayer*) G__getstructoffset())->getMdcPlane((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcLayer*) G__getstructoffset())->getMdcPlanes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLayer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLayer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLayer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLayer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_228_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLayer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_228_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLayer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLayer(*(HMdcLayer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLayer G__THMdcLayer;
static int G__MdcTrackDDict_228_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLayer*) (soff+(sizeof(HMdcLayer)*i)))->~G__THMdcLayer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLayer*) (soff))->~G__THMdcLayer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_228_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLayer* dest = (HMdcLayer*) G__getstructoffset();
   *dest = *(HMdcLayer*) libp->para[0].ref;
   const HMdcLayer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcClFnStack */
static int G__MdcTrackDDict_229_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClFnStack* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClFnStack((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcClFnStack((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcClFnStack[n];
       } else {
         p = new((void*) gvp) HMdcClFnStack[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcClFnStack;
       } else {
         p = new((void*) gvp) HMdcClFnStack;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClFnStack*) G__getstructoffset())->setSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClFnStack*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClFnStack*) G__getstructoffset())->push((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcClFnStack*) G__getstructoffset())->pop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClFnStack*) G__getstructoffset())->checkSize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClFnStack*) G__getstructoffset())->setIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClFnStack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClFnStack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcClFnStack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcClFnStack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClFnStack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClFnStack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClFnStack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClFnStack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_229_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClFnStack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_229_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcClFnStack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcClFnStack(*(HMdcClFnStack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcClFnStack G__THMdcClFnStack;
static int G__MdcTrackDDict_229_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcClFnStack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcClFnStack*) (soff+(sizeof(HMdcClFnStack)*i)))->~G__THMdcClFnStack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcClFnStack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcClFnStack*) (soff))->~G__THMdcClFnStack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_229_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClFnStack* dest = (HMdcClFnStack*) G__getstructoffset();
   *dest = *(HMdcClFnStack*) libp->para[0].ref;
   const HMdcClFnStack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcClFnStacksArr */
static int G__MdcTrackDDict_230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClFnStacksArr* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClFnStacksArr((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcClFnStacksArr((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcClFnStacksArr[n];
       } else {
         p = new((void*) gvp) HMdcClFnStacksArr[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcClFnStacksArr;
       } else {
         p = new((void*) gvp) HMdcClFnStacksArr;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStacksArr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcClFnStacksArr*) G__getstructoffset())->init((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcClFnStacksArr*) G__getstructoffset())->init();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_230_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClFnStacksArr*) G__getstructoffset())->push((Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_230_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcClFnStacksArr*) G__getstructoffset())->pop(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_230_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcClFnStacksArr*) G__getstructoffset())->getOneStack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_230_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClFnStacksArr::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_230_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClFnStacksArr::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_230_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcClFnStacksArr::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_230_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcClFnStacksArr::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_230_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClFnStacksArr*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_230_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClFnStacksArr::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_230_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClFnStacksArr::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_230_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClFnStacksArr::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_230_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClFnStacksArr::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_230_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcClFnStacksArr* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcClFnStacksArr(*(HMdcClFnStacksArr*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStacksArr));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcClFnStacksArr G__THMdcClFnStacksArr;
static int G__MdcTrackDDict_230_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcClFnStacksArr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcClFnStacksArr*) (soff+(sizeof(HMdcClFnStacksArr)*i)))->~G__THMdcClFnStacksArr();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcClFnStacksArr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcClFnStacksArr*) (soff))->~G__THMdcClFnStacksArr();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_230_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClFnStacksArr* dest = (HMdcClFnStacksArr*) G__getstructoffset();
   *dest = *(HMdcClFnStacksArr*) libp->para[0].ref;
   const HMdcClFnStacksArr& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTBArray */
static int G__MdcTrackDDict_231_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTBArray::clear((UChar_t*) G__int(libp->para[0]), (UChar_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTBArray::set((UChar_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) HMdcTBArray::get((const UChar_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTBArray::unset((UChar_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTBArray::getNSet((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTBArray::position((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTBArray::first((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTBArray::last((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTBArray::shiftRight((UChar_t*) G__int(libp->para[0]), (UChar_t*) G__int(libp->para[1])
, (UChar_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTBArray::shiftLeft((UChar_t*) G__int(libp->para[0]), (UChar_t*) G__int(libp->para[1])
, (UChar_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTBArray::compare((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTBArray::andArr((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UChar_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTBArray::xorArr((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UChar_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTBArray::andArrAndUnset((UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UChar_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTBArray::isIdenBits((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTBArray::next((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTBArray::previous((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) HMdcTBArray::next2Bits((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTBArray::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTBArray::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTBArray::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTBArray::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcTBArray*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTBArray*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTBArray*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTBArray*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTBArray::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTBArray::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTBArray::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_231_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTBArray::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_231_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTBArray* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTBArray(*(HMdcTBArray*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTBArray));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_231_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTBArray* dest = (HMdcTBArray*) G__getstructoffset();
   *dest = *(HMdcTBArray*) libp->para[0].ref;
   const HMdcTBArray& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcBArray */
static int G__MdcTrackDDict_232_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcBArray::clear((UChar_t*) G__int(libp->para[0]), (UChar_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcBArray::set((UChar_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) HMdcBArray::get((const UChar_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcBArray::unset((UChar_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcBArray::testAndUnset((UChar_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::getNSet((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) HMdcBArray::getNSet((const UChar_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) HMdcBArray::getNSet((const UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) HMdcBArray::getNLayOrientation((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcBArray::is40DegWireCross((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::getNSet2B((const UChar_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::position((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::first((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::last((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::next((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::nextAndUnset((UChar_t*) G__int(libp->para[0]), (UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::previous((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::prevAndUnset((UChar_t*) G__int(libp->para[0]), (UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcBArray::shiftRight((UChar_t*) G__int(libp->para[0]), (UChar_t*) G__int(libp->para[1])
, (UChar_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcBArray::shiftLeft((UChar_t*) G__int(libp->para[0]), (UChar_t*) G__int(libp->para[1])
, (UChar_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::compare((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::andArr((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UChar_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::xorArr((const UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UChar_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::andArrAndUnset((UChar_t*) G__int(libp->para[0]), (const UChar_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UChar_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcBArray::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcBArray::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcBArray::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcBArray::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcBArray*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcBArray*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcBArray*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcBArray*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcBArray::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcBArray::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_232_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBArray::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_232_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcBArray* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcBArray(*(HMdcBArray*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcBArray));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_232_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcBArray* dest = (HMdcBArray*) G__getstructoffset();
   *dest = *(HMdcBArray*) libp->para[0].ref;
   const HMdcBArray& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcList12GroupCells */
static int G__MdcTrackDDict_233_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcList12GroupCells* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcList12GroupCells[n];
     } else {
       p = new((void*) gvp) HMdcList12GroupCells[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcList12GroupCells;
     } else {
       p = new((void*) gvp) HMdcList12GroupCells;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcList12GroupCells& obj = ((HMdcList12GroupCells*) G__getstructoffset())->operator=(*(HMdcList12GroupCells*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcList12GroupCells*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcList12GroupCells*) G__getstructoffset())->setTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcList12GroupCells*) G__getstructoffset())->add((HMdcList12GroupCells*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcList12GroupCells*) G__getstructoffset())->delTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getNCells((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getNCells((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getNCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getMaxNCellsPerLay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getNDrTimes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getNDrTimes((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getNDrTimes((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getNDrTimesMod((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getNLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getNLayers((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getNLayersMod((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 98, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getListLayers((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 98, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getListLayers());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getCell((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getFirstCell((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getLastCell((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getActiveModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->get4FirstCells((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getOneLayerGroup((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->next((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->next((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(UChar_t*) G__UCharref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getNext((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getNextCell(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->previous((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->compare((HMdcList12GroupCells*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (HMdcList12GroupCells*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->compare((HMdcList12GroupCells*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->compare((HMdcList12GroupCells*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->compare((HMdcList12GroupCells*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((HMdcList12GroupCells*) G__getstructoffset())->compareAndUnset((HMdcList12GroupCells*) G__int(libp->para[0]), (HMdcList12GroupCells*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HMdcList12GroupCells*) G__getstructoffset())->compareAndUnset((HMdcList12GroupCells*) G__int(libp->para[0]), (HMdcList12GroupCells*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->isIncluded(*(HMdcList12GroupCells*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->isIncluded(*(HMdcList12GroupCells*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->isIncluded(*(HMdcList12GroupCells*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->nIdentDrTimes((HMdcList12GroupCells*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->nIdentDrTimes((HMdcList12GroupCells*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->nIdentDrTimes((HMdcList12GroupCells*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcList12GroupCells*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcList12GroupCells*) G__getstructoffset())->print((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getArr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const HMdcList12GroupCells*) G__getstructoffset())->getFirstCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcList12GroupCells::findOverlap(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcList12GroupCells*) G__getstructoffset())->copyData((const UChar_t*) G__int(libp->para[0]), (const Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcList12GroupCells::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcList12GroupCells::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcList12GroupCells::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcList12GroupCells::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcList12GroupCells*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcList12GroupCells::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcList12GroupCells::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcList12GroupCells::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_233_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcList12GroupCells::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_233_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcList12GroupCells* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcList12GroupCells(*(HMdcList12GroupCells*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcList12GroupCells G__THMdcList12GroupCells;
static int G__MdcTrackDDict_233_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcList12GroupCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcList12GroupCells*) (soff+(sizeof(HMdcList12GroupCells)*i)))->~G__THMdcList12GroupCells();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcList12GroupCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcList12GroupCells*) (soff))->~G__THMdcList12GroupCells();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcList24GroupCells */
static int G__MdcTrackDDict_235_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcList24GroupCells* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcList24GroupCells[n];
     } else {
       p = new((void*) gvp) HMdcList24GroupCells[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcList24GroupCells;
     } else {
       p = new((void*) gvp) HMdcList24GroupCells;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcList24GroupCells& obj = ((HMdcList24GroupCells*) G__getstructoffset())->operator=(*(HMdcList24GroupCells*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcList24GroupCells*) G__getstructoffset())->clear((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcList24GroupCells*) G__getstructoffset())->clear();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcList24GroupCells*) G__getstructoffset())->setSeg1((HMdcList12GroupCells*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcList24GroupCells*) G__getstructoffset())->setSeg2((HMdcList12GroupCells*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcList24GroupCells*) G__getstructoffset())->set((HMdcList12GroupCells*) G__int(libp->para[0]), (HMdcList12GroupCells*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcList24GroupCells*) G__getstructoffset())->setTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcList24GroupCells*) G__getstructoffset())->add((HMdcList24GroupCells*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcList24GroupCells*) G__getstructoffset())->delTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getNCells((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getNCellsMod((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getNCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getMaxNCellsPerLay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getNDrTimes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getNDrTimes((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getNDrTimes((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getNDrTimesMod((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getNLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getNLayersMod((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 98, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getListLayers((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 98, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getListLayers());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getCell((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getFirstCell((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getLastCell((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->get4FirstCells((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getOneLayerGroup((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->next((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getNext((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getNextCell(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->previous((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->getSeg(*(HMdcList12GroupCells*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->compare((HMdcList24GroupCells*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->compare((HMdcList24GroupCells*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->compare((HMdcList24GroupCells*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcList24GroupCells*) G__getstructoffset())->compareAndUnset((HMdcList24GroupCells*) G__int(libp->para[0]), (HMdcList24GroupCells*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->isIncluded(*(HMdcList24GroupCells*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->isIncluded(*(HMdcList24GroupCells*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->isIncluded(*(HMdcList24GroupCells*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->nIdentDrTimes((HMdcList24GroupCells*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->nIdentDrTimes((HMdcList24GroupCells*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const HMdcList24GroupCells*) G__getstructoffset())->nIdentDrTimes((HMdcList24GroupCells*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcList24GroupCells*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcList24GroupCells*) G__getstructoffset())->print((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcList24GroupCells::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcList24GroupCells::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcList24GroupCells::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcList24GroupCells::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcList24GroupCells*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcList24GroupCells::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcList24GroupCells::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcList24GroupCells::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_235_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcList24GroupCells::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_235_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcList24GroupCells* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcList24GroupCells(*(HMdcList24GroupCells*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcList24GroupCells G__THMdcList24GroupCells;
static int G__MdcTrackDDict_235_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcList24GroupCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcList24GroupCells*) (soff+(sizeof(HMdcList24GroupCells)*i)))->~G__THMdcList24GroupCells();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcList24GroupCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcList24GroupCells*) (soff))->~G__THMdcList24GroupCells();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcClus */
static int G__MdcTrackDDict_245_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClus* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClus[n];
     } else {
       p = new((void*) gvp) HMdcClus[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClus;
     } else {
       p = new((void*) gvp) HMdcClus;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClus* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcClus(*(HMdcList12GroupCells*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HMdcClus(*(HMdcList12GroupCells*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClus*) G__getstructoffset())->isGeant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setDefValues();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->clearMod1Par();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->clearMod2Par();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setSec((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setMod((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setIOSeg((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setOwnIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setSecSegInd((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setMinCl((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setSumWt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setRealLevel((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setNBins((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setIndexParent((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setIndexChilds((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setTypeClFinder((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setNMergClust((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setXTarg((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setYTarg((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setZTarg((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setTarg((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setTarg(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setErrTarg(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setTarget((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setPrPlane((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setClFnLevelM1((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setClusSizeM1((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setNDrTimesM1((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setNMergClustM1((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setShapeM1((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setClFnLevelM2((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setClusSizeM2((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setNDrTimesM2((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setNMergClustM2((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setShapeM2((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setSegIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setFakeFlag((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClus*) G__getstructoffset())->getMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClus*) G__getstructoffset())->getTypeClFinder());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcClus*) G__getstructoffset())->getSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcClus*) G__getstructoffset())->getIOSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClus*) G__getstructoffset())->getOwnIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClus*) G__getstructoffset())->getMinCl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcClus*) G__getstructoffset())->getMinCl((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcClus*) G__getstructoffset())->getRealLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getXTarg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getYTarg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getZTarg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getErrX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getErrY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getErrXTarg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getErrYTarg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getErrZTarg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getSumWt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClus*) G__getstructoffset())->getNBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClus*) G__getstructoffset())->getPoint(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClus*) G__getstructoffset())->getTarg(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClus*) G__getstructoffset())->getIndexParent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClus*) G__getstructoffset())->getIndexRegChilds(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClus*) G__getstructoffset())->getNextIndexChild((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClus*) G__getstructoffset())->getNMergClust());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->A());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->B());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->C());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->D());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getZOnPrPlane((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getYOnPrPlane((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClus*) G__getstructoffset())->getNextWire(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClus*) G__getstructoffset())->getNextWire(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClus*) G__getstructoffset())->getClusSizeM1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClus*) G__getstructoffset())->getNDrTimesM1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClus*) G__getstructoffset())->getNMergClustM1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClus*) G__getstructoffset())->getShapeM1(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcClus*) G__getstructoffset())->getClFnLevelM1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getAlphaM1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getSigma1M1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getSigma2M1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getRatioM1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcClus*) G__getstructoffset())->getClFnLevelM2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClus*) G__getstructoffset())->getClusSizeM2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClus*) G__getstructoffset())->getNDrTimesM2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClus*) G__getstructoffset())->getNMergClustM2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClus*) G__getstructoffset())->getShapeM2(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getAlphaM2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getSigma1M2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getSigma2M2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClus*) G__getstructoffset())->getRatioM2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClus*) G__getstructoffset())->getSegIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcClus*) G__getstructoffset())->getFakeFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const HMdcClus*) G__getstructoffset())->print((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const HMdcClus*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClus*) G__getstructoffset())->printPos();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClus*) G__getstructoffset())->printCont((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->setStatus((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClus*) G__getstructoffset())->getStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcClus*) G__getstructoffset())->getBParKickPl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClus*) G__getstructoffset())->isFixedLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClus*) G__getstructoffset())->isSegmentAmpCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClus*) G__getstructoffset())->calcIntersection(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClus*) G__getstructoffset())->calcIntersection(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClus*) G__getstructoffset())->calcIntersection(*(HGeomVector*) libp->para[0].ref, *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->fillErrMatClus((Bool_t) G__int(libp->para[0]), *(HSymMat4*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClus::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClus::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcClus::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcClus::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClus*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClus::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClus::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClus::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_245_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClus::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_245_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcClus* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcClus(*(HMdcClus*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcClus G__THMdcClus;
static int G__MdcTrackDDict_245_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcClus*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcClus*) (soff+(sizeof(HMdcClus)*i)))->~G__THMdcClus();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcClus*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcClus*) (soff))->~G__THMdcClus();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_245_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClus* dest = (HMdcClus*) G__getstructoffset();
   *dest = *(HMdcClus*) libp->para[0].ref;
   const HMdcClus& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcClusSim */
static int G__MdcTrackDDict_246_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusSim[n];
     } else {
       p = new((void*) gvp) HMdcClusSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusSim;
     } else {
       p = new((void*) gvp) HMdcClusSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcClusSim(*(HMdcList12GroupCells*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HMdcClusSim(*(HMdcList12GroupCells*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusSim*) G__getstructoffset())->setDef();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusSim*) G__getstructoffset())->setNTracks((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusSim*) G__getstructoffset())->cleanRest();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusSim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcClusSim*) G__getstructoffset())->addTrack((Int_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2]), (UChar_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcClusSim*) G__getstructoffset())->resetTrack((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Short_t) G__int(libp->para[2]), (UChar_t) G__int(libp->para[3])
, (UChar_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusSim*) G__getstructoffset())->setNTracksM((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusSim*) G__getstructoffset())->setTrackM((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Short_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusSim*) G__getstructoffset())->setNDigiTimes((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusSim*) G__getstructoffset())->setTrackStatus((Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusSim*) G__getstructoffset())->setXYGeant((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusSim*) G__getstructoffset())->calcTrList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusSim*) G__getstructoffset())->calcTrListMod(*(HMdcList12GroupCells*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusSim*) G__getstructoffset())->sortTrListByContr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const HMdcClusSim*) G__getstructoffset())->getTrackList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 83, (long) ((const HMdcClusSim*) G__getstructoffset())->getNumWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const HMdcClusSim*) G__getstructoffset())->getNDigiTimes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const HMdcClusSim*) G__getstructoffset())->getTrackStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusSim*) G__getstructoffset())->getArrsSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusSim*) G__getstructoffset())->getNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcClusSim*) G__getstructoffset())->getNNotFakeTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusSim*) G__getstructoffset())->getNMatchedTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusSim*) G__getstructoffset())->getTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClusSim*) G__getstructoffset())->getNTimesInTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((const HMdcClusSim*) G__getstructoffset())->getNLayersInTrack((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const HMdcClusSim*) G__getstructoffset())->getNLayersInTrack((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcClusSim*) G__getstructoffset())->getLayListForMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 98, (long) ((const HMdcClusSim*) G__getstructoffset())->getNLayOrientation((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 98, (long) ((const HMdcClusSim*) G__getstructoffset())->getNLayOrientation((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const HMdcClusSim*) G__getstructoffset())->is40degCross((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const HMdcClusSim*) G__getstructoffset())->is40degCross((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcClusSim*) G__getstructoffset())->getNDigiTimesInTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusSim*) G__getstructoffset())->getNTracksMod((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusSim*) G__getstructoffset())->getTrackMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClusSim*) G__getstructoffset())->getNTimesInMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusSim*) G__getstructoffset())->getTrackIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusSim*) G__getstructoffset())->getNoiseIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const HMdcClusSim*) G__getstructoffset())->getListTrM((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 83, (long) ((const HMdcClusSim*) G__getstructoffset())->getNTimesM((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcClusSim*) G__getstructoffset())->getTrackStatus((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusSim*) G__getstructoffset())->getXYGeant((Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusSim*) G__getstructoffset())->getXGeant((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusSim*) G__getstructoffset())->getYGeant((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusSim*) G__getstructoffset())->dX((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusSim*) G__getstructoffset())->dY((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusSim*) G__getstructoffset())->isGntTrackOk((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusSim*) G__getstructoffset())->isIOSegMatch((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusSim*) G__getstructoffset())->noIOSegMatch((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusSim*) G__getstructoffset())->isFakeContribution((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusSim*) G__getstructoffset())->isClFnLevelTooHigh((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusSim*) G__getstructoffset())->is1or2HitsNotRec((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusSim*) G__getstructoffset())->isSegNotRec((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusSim*) G__getstructoffset())->isTrackNotRec((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusSim*) G__getstructoffset())->isNoMeta((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusSim*) G__getstructoffset())->isGEANTBug((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcClusSim*) G__getstructoffset())->getIOSegMatchingStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const HMdcClusSim*) G__getstructoffset())->printCont((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const HMdcClusSim*) G__getstructoffset())->printCont();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClusSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcClusSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcClusSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_246_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_246_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcClusSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcClusSim(*(HMdcClusSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcClusSim G__THMdcClusSim;
static int G__MdcTrackDDict_246_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcClusSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcClusSim*) (soff+(sizeof(HMdcClusSim)*i)))->~G__THMdcClusSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcClusSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcClusSim*) (soff))->~G__THMdcClusSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_246_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusSim* dest = (HMdcClusSim*) G__getstructoffset();
   *dest = *(HMdcClusSim*) libp->para[0].ref;
   const HMdcClusSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcSecListCells */
static int G__MdcTrackDDict_247_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSecListCells* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSecListCells[n];
     } else {
       p = new((void*) gvp) HMdcSecListCells[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSecListCells;
     } else {
       p = new((void*) gvp) HMdcSecListCells;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcModListCells& obj = ((HMdcSecListCells*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcModListCells& obj = ((const HMdcSecListCells*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSecListCells*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSecListCells*) G__getstructoffset())->clearClustCounter((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSecListCells*) G__getstructoffset())->clearFitWiresCounter((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->setTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UChar_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSecListCells*) G__getstructoffset())->delTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UChar_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSecListCells*) G__getstructoffset())->nextCell(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcSecListCells*) G__getstructoffset())->getTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSecListCells*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->addTime1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSecListCells*) G__getstructoffset())->nextTime(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSecListCells*) G__getstructoffset())->getTimeValue((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->addCell((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UChar_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->addCellSim(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UChar_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcSecListCells*) G__getstructoffset())->nextCell(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcSecListCells*) G__getstructoffset())->nextCellSim(
*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Int_t*) G__Intref(&libp->para[6]), *(Float_t*) G__Floatref(&libp->para[7])
, *(Float_t*) G__Floatref(&libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcSecListCells*) G__getstructoffset())->nextCellSim(
*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])
, *(Float_t*) G__Floatref(&libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->increaseClusCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->increaseRClusCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->increaseFittedCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->increaseRFittedCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->increaseFittedAndRealCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->decreaseClusCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->decreaseRClusCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->decreaseFittedCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->decreaseRFittedCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->decreaseFittedAndRealCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNClusters((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNRClusters((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNFitted((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNRFitted((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->addToClusCounters((Int_t) G__int(libp->para[0]), *(HMdcList12GroupCells*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->addToRClusCounters((Int_t) G__int(libp->para[0]), *(HMdcList12GroupCells*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->subFrClusCounters((Int_t) G__int(libp->para[0]), *(HMdcList12GroupCells*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->subFrRClusCounters((Int_t) G__int(libp->para[0]), *(HMdcList12GroupCells*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->subFittedCounters((Int_t) G__int(libp->para[0]), (HMdcCellGroup12*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->subRFittedCounters((Int_t) G__int(libp->para[0]), (HMdcCellGroup12*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->subFittedAndRealCounters((Int_t) G__int(libp->para[0]), (HMdcCellGroup12*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNUniqueWires((Int_t) G__int(libp->para[0]), *(HMdcList12GroupCells*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNUniqueWires2((Int_t) G__int(libp->para[0]), *(HMdcList12GroupCells*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNUniqueWires((Int_t) G__int(libp->para[0]), *(HMdcList12GroupCells*) libp->para[1].ref
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNUniqueWires2((Int_t) G__int(libp->para[0]), *(HMdcList12GroupCells*) libp->para[1].ref
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNUniqueAndRWires((Int_t) G__int(libp->para[0]), *(HMdcList12GroupCells*) libp->para[1].ref
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNUniqueAndRWires2((Int_t) G__int(libp->para[0]), *(HMdcList12GroupCells*) libp->para[1].ref
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->addToNFittedCounters((Int_t) G__int(libp->para[0]), (HMdcCellGroup12*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->addToNRFittedCounters((Int_t) G__int(libp->para[0]), (HMdcCellGroup12*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSecListCells*) G__getstructoffset())->addToFittedAndRealCounters((Int_t) G__int(libp->para[0]), (HMdcCellGroup12*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNFittedUnWires((Int_t) G__int(libp->para[0]), (HMdcCellGroup12*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNFittedUnWires2((Int_t) G__int(libp->para[0]), (HMdcCellGroup12*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNFittedUnLayers((Int_t) G__int(libp->para[0]), (HMdcCellGroup12*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNFittedUnAndRWires((Int_t) G__int(libp->para[0]), (HMdcCellGroup12*) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSecListCells*) G__getstructoffset())->getNFittedUnAndRWires2((Int_t) G__int(libp->para[0]), (HMdcCellGroup12*) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 102, (double) ((const HMdcSecListCells*) G__getstructoffset())->getSegmentWeight((Int_t) G__int(libp->para[0]), (HMdcCellGroup12*) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 102, (double) ((const HMdcSecListCells*) G__getstructoffset())->getSegmentWeight((Int_t) G__int(libp->para[0]), (HMdcCellGroup12*) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSecListCells::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSecListCells::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcSecListCells::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSecListCells::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSecListCells*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSecListCells::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSecListCells::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSecListCells::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_247_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSecListCells::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_247_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcSecListCells* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcSecListCells(*(HMdcSecListCells*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcSecListCells G__THMdcSecListCells;
static int G__MdcTrackDDict_247_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcSecListCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcSecListCells*) (soff+(sizeof(HMdcSecListCells)*i)))->~G__THMdcSecListCells();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcSecListCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcSecListCells*) (soff))->~G__THMdcSecListCells();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_247_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSecListCells* dest = (HMdcSecListCells*) G__getstructoffset();
   *dest = *(HMdcSecListCells*) libp->para[0].ref;
   const HMdcSecListCells& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCluster */
static int G__MdcTrackDDict_248_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCluster[n];
     } else {
       p = new((void*) gvp) HMdcCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCluster;
     } else {
       p = new((void*) gvp) HMdcCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->init((Char_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->clearBinStat();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->addBin((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->calcXY();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->addClus(*(HMdcCluster*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->sumClus(*(HMdcCluster*) libp->para[0].ref, *(HMdcCluster*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->calcClusParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->fillClus((HMdcClus*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->setModCluster((Int_t) G__int(libp->para[0]), (HMdcCluster*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcCluster*) G__getstructoffset())->getSegment());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcCluster*) G__getstructoffset())->getModCluster((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcCluster*) G__getstructoffset())->getMod1Clus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcCluster*) G__getstructoffset())->getMod2Clus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcCluster*) G__getstructoffset())->getIOSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCluster*) G__getstructoffset())->getNBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->setMod1Clus((HMdcCluster*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->setMod2Clus((HMdcCluster*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcCluster*) G__getstructoffset())->getClusMerg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->setClusMerg((HMdcCluster*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->incFlag();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcList12GroupCells& obj = ((HMdcCluster*) G__getstructoffset())->getLCells1();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcList12GroupCells& obj = ((HMdcCluster*) G__getstructoffset())->getLCells2();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcCluster*) G__getstructoffset())->getStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->setStatus((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcCluster*) G__getstructoffset())->getFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->setFlag((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcCluster*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcCluster*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCluster*) G__getstructoffset())->getMinWt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCluster*) G__getstructoffset())->getRealLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCluster*) G__getstructoffset())->testForInclude(*(HMdcCluster*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCluster*) G__getstructoffset())->testForInc34CFnd(*(HMdcCluster*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcCluster*) G__getstructoffset())->testNLayersSeg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcCluster*) G__getstructoffset())->testNLayersSeg2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->setFakeFlag((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->setFakeFlagAndStatus((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcCluster*) G__getstructoffset())->getFakeFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const UChar_t& obj = ((HMdcCluster*) G__getstructoffset())->fakeFlagS();
         result7->ref = (long) (&obj);
         G__letint(result7, 'b', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcCluster*) G__getstructoffset())->getRealFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const UChar_t& obj = ((HMdcCluster*) G__getstructoffset())->realFlagS();
         result7->ref = (long) (&obj);
         G__letint(result7, 'b', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->setMod1ClusSkipMerg((HMdcCluster*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->setMod2ClusSkipMerg((HMdcCluster*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcCluster*) G__getstructoffset())->isModClusNotTheSame(*(HMdcCluster*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCluster*) G__getstructoffset())->getNUniqueWiresSeg1((HMdcSecListCells*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCluster*) G__getstructoffset())->getNUniqueAndRWiresSeg1((HMdcSecListCells*) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcCluster*) G__getstructoffset())->isClusterAmpEq((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->resetFakeFlagSeg1((Bool_t) G__int(libp->para[0]), (HMdcSecListCells*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->resetRealFlagSeg1((Bool_t) G__int(libp->para[0]), (HMdcSecListCells*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_248_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_248_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCluster(*(HMdcCluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCluster G__THMdcCluster;
static int G__MdcTrackDDict_248_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCluster*) (soff+(sizeof(HMdcCluster)*i)))->~G__THMdcCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCluster*) (soff))->~G__THMdcCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_248_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCluster* dest = (HMdcCluster*) G__getstructoffset();
   *dest = *(HMdcCluster*) libp->para[0].ref;
   const HMdcCluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcClustersArrs */
static int G__MdcTrackDDict_249_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClustersArrs::getExObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClustersArrs::getObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcClustersArrs::deleteCont();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClustersArrs* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClustersArrs[n];
     } else {
       p = new((void*) gvp) HMdcClustersArrs[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClustersArrs;
     } else {
       p = new((void*) gvp) HMdcClustersArrs;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustersArrs));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((HMdcClustersArrs*) G__getstructoffset())->createAllArrays((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((HMdcClustersArrs*) G__getstructoffset())->createAllArrays());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcClustersArrs*) G__getstructoffset())->createArray1((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcClustersArrs*) G__getstructoffset())->createArray1());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcClustersArrs*) G__getstructoffset())->createArray2((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcClustersArrs*) G__getstructoffset())->createArray2());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HMdcClustersArrs*) G__getstructoffset())->createArray3((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcClustersArrs*) G__getstructoffset())->createArray3());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcClustersArrs*) G__getstructoffset())->getArray1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcClustersArrs*) G__getstructoffset())->getArray2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcClustersArrs*) G__getstructoffset())->getArray3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcClustersArrs*) G__getstructoffset())->getArray1Size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcClustersArrs*) G__getstructoffset())->getArray2Size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcClustersArrs*) G__getstructoffset())->getArray3Size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcClustersArrs*) G__getstructoffset())->getArr1Cluster((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcClustersArrs*) G__getstructoffset())->getArr2Cluster((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcClustersArrs*) G__getstructoffset())->getArr3Cluster((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClustersArrs*) G__getstructoffset())->setDXDYWindow((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClustersArrs*) G__getstructoffset())->setM34DXDYWindow((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClustersArrs*) G__getstructoffset())->testCluster((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HMdcClustersArrs*) G__getstructoffset())->testMdc34Cluster((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HMdcClustersArrs*) G__getstructoffset())->testMdc34Cluster((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClustersArrs::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClustersArrs::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcClustersArrs::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcClustersArrs::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClustersArrs*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClustersArrs::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClustersArrs::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClustersArrs::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_249_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClustersArrs::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_249_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcClustersArrs* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcClustersArrs(*(HMdcClustersArrs*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustersArrs));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcClustersArrs G__THMdcClustersArrs;
static int G__MdcTrackDDict_249_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcClustersArrs*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcClustersArrs*) (soff+(sizeof(HMdcClustersArrs)*i)))->~G__THMdcClustersArrs();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcClustersArrs*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcClustersArrs*) (soff))->~G__THMdcClustersArrs();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_249_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClustersArrs* dest = (HMdcClustersArrs*) G__getstructoffset();
   *dest = *(HMdcClustersArrs*) libp->para[0].ref;
   const HMdcClustersArrs& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcDriftTimeParSec */
static int G__MdcTrackDDict_253_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDriftTimeParSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDriftTimeParSec[n];
     } else {
       p = new((void*) gvp) HMdcDriftTimeParSec[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDriftTimeParSec;
     } else {
       p = new((void*) gvp) HMdcDriftTimeParSec;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcDriftTimeParSec*) G__getstructoffset())->getBinDist((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDriftTimeParSec*) G__getstructoffset())->initContainer(*(HMdcCal2ParSecSim*) libp->para[0].ref, *(HMdcCal2ParSec*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcDriftTimeParSec*) G__getstructoffset())->at((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDriftTimeParSec*) G__getstructoffset())->calcTime((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDriftTimeParSec*) G__getstructoffset())->calcTimeErr((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParSec*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcDriftTimeParSec*) G__getstructoffset())->getBinTime((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDriftTimeParSec*) G__getstructoffset())->calcDistance((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDriftTimeParSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimeParSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcDriftTimeParSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDriftTimeParSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimeParSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDriftTimeParSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimeParSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_253_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDriftTimeParSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcDriftTimeParSec G__THMdcDriftTimeParSec;
static int G__MdcTrackDDict_253_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcDriftTimeParSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcDriftTimeParSec*) (soff+(sizeof(HMdcDriftTimeParSec)*i)))->~G__THMdcDriftTimeParSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcDriftTimeParSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcDriftTimeParSec*) (soff))->~G__THMdcDriftTimeParSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLayListCells */
static int G__MdcTrackDDict_254_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLayListCells* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayListCells[n];
     } else {
       p = new((void*) gvp) HMdcLayListCells[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayListCells;
     } else {
       p = new((void*) gvp) HMdcLayListCells;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCells));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayListCells*) G__getstructoffset())->copyListOfCells(*(HMdcLayListCells*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayListCells*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayListCells*) G__getstructoffset())->clearClustCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayListCells*) G__getstructoffset())->clearFitWiresCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayListCells*) G__getstructoffset())->setTime((Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayListCells*) G__getstructoffset())->delTime((Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcLayListCells*) G__getstructoffset())->getNCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcLayListCells*) G__getstructoffset())->getCell((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcLayListCells*) G__getstructoffset())->getFirstCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcLayListCells*) G__getstructoffset())->getLastCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcLayListCells*) G__getstructoffset())->getGeantTrack((Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcLayListCells*) G__getstructoffset())->next((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcLayListCells*) G__getstructoffset())->nextCell(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcLayListCells*) G__getstructoffset())->nextNonFittedCell(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcLayListCells*) G__getstructoffset())->previousNonFittedCell(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcLayListCells*) G__getstructoffset())->previous((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcLayListCells*) G__getstructoffset())->previousCell(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcLayListCells*) G__getstructoffset())->getTime((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcLayListCells*) G__getstructoffset())->isCell((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcLayListCells*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcLayListCells*) G__getstructoffset())->printCellInfo((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayListCells*) G__getstructoffset())->addTime1((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcLayListCells*) G__getstructoffset())->nextTime(*(Int_t*) G__Intref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcLayListCells*) G__getstructoffset())->getTimeValue((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayListCells*) G__getstructoffset())->addCell((Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayListCells*) G__getstructoffset())->addCellSim(
(Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcLayListCells*) G__getstructoffset())->nextCell(*(Int_t*) G__Intref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcLayListCells*) G__getstructoffset())->nextCellSim(
*(Int_t*) G__Intref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])
, *(Float_t*) G__Floatref(&libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcLayListCells*) G__getstructoffset())->nextCellSim(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayListCells*) G__getstructoffset())->increaseClusCount((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayListCells*) G__getstructoffset())->increaseRClusCount((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayListCells*) G__getstructoffset())->increaseFittedCount((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayListCells*) G__getstructoffset())->increaseRFittedCount((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayListCells*) G__getstructoffset())->increaseFittedAndRealCount((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayListCells*) G__getstructoffset())->decreaseClusCount((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayListCells*) G__getstructoffset())->decreaseRClusCount((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayListCells*) G__getstructoffset())->decreaseFittedCount((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayListCells*) G__getstructoffset())->decreaseRFittedCount((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayListCells*) G__getstructoffset())->decreaseFittedAndRealCount((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcLayListCells*) G__getstructoffset())->getNClusters((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcLayListCells*) G__getstructoffset())->getNRClusters((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcLayListCells*) G__getstructoffset())->getNFitted((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcLayListCells*) G__getstructoffset())->getNRFitted((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcLayListCells*) G__getstructoffset())->getNumNotFitted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLayListCells::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayListCells::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLayListCells::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLayListCells::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayListCells*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayListCells::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLayListCells::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayListCells::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_254_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLayListCells::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_254_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLayListCells* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLayListCells(*(HMdcLayListCells*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCells));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLayListCells G__THMdcLayListCells;
static int G__MdcTrackDDict_254_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLayListCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLayListCells*) (soff+(sizeof(HMdcLayListCells)*i)))->~G__THMdcLayListCells();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLayListCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLayListCells*) (soff))->~G__THMdcLayListCells();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_254_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLayListCells* dest = (HMdcLayListCells*) G__getstructoffset();
   *dest = *(HMdcLayListCells*) libp->para[0].ref;
   const HMdcLayListCells& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookUpTbCell */
static int G__MdcTrackDDict_256_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookUpTbCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookUpTbCell[n];
     } else {
       p = new((void*) gvp) HMdcLookUpTbCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookUpTbCell;
     } else {
       p = new((void*) gvp) HMdcLookUpTbCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbCell*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbCell*) G__getstructoffset())->init((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLookUpTbCell*) G__getstructoffset())->addLine((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const HMdcLookUpTbCell*) G__getstructoffset())->getNLines());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const HMdcLookUpTbCell*) G__getstructoffset())->getYBinMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const HMdcLookUpTbCell*) G__getstructoffset())->getYBinMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const HMdcLookUpTbCell*) G__getstructoffset())->getXBinMin((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const HMdcLookUpTbCell*) G__getstructoffset())->getXBinMax((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbCell*) G__getstructoffset())->setAlphaMean((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLookUpTbCell*) G__getstructoffset())->getAlphaMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbCell*) G__getstructoffset())->setDistCutFT((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbCell*) G__getstructoffset())->setDistCut1T((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbCell*) G__getstructoffset())->setDistCut1TVF((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbCell*) G__getstructoffset())->setTdcTDistAndCuts1T((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbCell*) G__getstructoffset())->setTdcTDistAndCutsFT((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLookUpTbCell*) G__getstructoffset())->getDDistMinCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLookUpTbCell*) G__getstructoffset())->getDDistMaxCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLookUpTbCell*) G__getstructoffset())->getDDistMinCut2VF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLookUpTbCell*) G__getstructoffset())->getDDistMaxCut2VF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookUpTbCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTbCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookUpTbCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookUpTbCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTbCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookUpTbCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTbCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_256_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookUpTbCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_256_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookUpTbCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookUpTbCell(*(HMdcLookUpTbCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLookUpTbCell G__THMdcLookUpTbCell;
static int G__MdcTrackDDict_256_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLookUpTbCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLookUpTbCell*) (soff+(sizeof(HMdcLookUpTbCell)*i)))->~G__THMdcLookUpTbCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLookUpTbCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLookUpTbCell*) (soff))->~G__THMdcLookUpTbCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_256_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookUpTbCell* dest = (HMdcLookUpTbCell*) G__getstructoffset();
   *dest = *(HMdcLookUpTbCell*) libp->para[0].ref;
   const HMdcLookUpTbCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookUpTbLayer */
static int G__MdcTrackDDict_257_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookUpTbLayer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcLookUpTbLayer(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HMdcLookUpTbLayer(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLookUpTbCell& obj = ((HMdcLookUpTbLayer*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookUpTbLayer*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbLayer*) G__getstructoffset())->setMinDistLUTb((Int_t) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbLayer*) G__getstructoffset())->setNTargPnts((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HMdcLookUpTbLayer*) G__getstructoffset())->getYTargetArr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HMdcLookUpTbLayer*) G__getstructoffset())->getZTargetArr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HMdcLookUpTbLayer*) G__getstructoffset())->getYTargetArrP2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HMdcLookUpTbLayer*) G__getstructoffset())->getZTargetArrP2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbLayer*) G__getstructoffset())->setVertexPoint((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbLayer*) G__getstructoffset())->setCurrentCell((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcLookUpTbLayer*) G__getstructoffset())->drTmTest((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((const HMdcLookUpTbLayer*) G__getstructoffset())->drTmTest2((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((const HMdcLookUpTbLayer*) G__getstructoffset())->drTmTest2((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcLookUpTbLayer*) G__getstructoffset())->transToRotLay((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcLookUpTbLayer*) G__getstructoffset())->getLayerPart2Par());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookUpTbLayer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTbLayer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookUpTbLayer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookUpTbLayer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbLayer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTbLayer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookUpTbLayer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTbLayer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_257_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookUpTbLayer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_257_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookUpTbLayer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookUpTbLayer(*(HMdcLookUpTbLayer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLookUpTbLayer G__THMdcLookUpTbLayer;
static int G__MdcTrackDDict_257_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLookUpTbLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLookUpTbLayer*) (soff+(sizeof(HMdcLookUpTbLayer)*i)))->~G__THMdcLookUpTbLayer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLookUpTbLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLookUpTbLayer*) (soff))->~G__THMdcLookUpTbLayer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_257_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookUpTbLayer* dest = (HMdcLookUpTbLayer*) G__getstructoffset();
   *dest = *(HMdcLookUpTbLayer*) libp->para[0].ref;
   const HMdcLookUpTbLayer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookUpTbMod */
static int G__MdcTrackDDict_259_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookUpTbMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcLookUpTbMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcLookUpTbMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_259_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLookUpTbLayer& obj = ((HMdcLookUpTbMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_259_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookUpTbMod*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_259_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbMod*) G__getstructoffset())->setNLayers((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_259_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookUpTbMod*) G__getstructoffset())->getNLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_259_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookUpTbMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_259_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTbMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_259_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookUpTbMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_259_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookUpTbMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_259_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_259_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTbMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_259_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookUpTbMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_259_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTbMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_259_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookUpTbMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_259_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookUpTbMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookUpTbMod(*(HMdcLookUpTbMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLookUpTbMod G__THMdcLookUpTbMod;
static int G__MdcTrackDDict_259_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLookUpTbMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLookUpTbMod*) (soff+(sizeof(HMdcLookUpTbMod)*i)))->~G__THMdcLookUpTbMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLookUpTbMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLookUpTbMod*) (soff))->~G__THMdcLookUpTbMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_259_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookUpTbMod* dest = (HMdcLookUpTbMod*) G__getstructoffset();
   *dest = *(HMdcLookUpTbMod*) libp->para[0].ref;
   const HMdcLookUpTbMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookUpTbSec */
static int G__MdcTrackDDict_260_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLookUpTbMod& obj = ((HMdcLookUpTbSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookUpTbSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcLookUpTbSec*) G__getstructoffset())->getNClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const HMdcLookUpTbSec*) G__getstructoffset())->getMaxClus((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const HMdcLookUpTbSec*) G__getstructoffset())->getMaxClus());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcLookUpTbSec*) G__getstructoffset())->getNBinX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLookUpTbSec*) G__getstructoffset())->getXlow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLookUpTbSec*) G__getstructoffset())->getXup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcLookUpTbSec*) G__getstructoffset())->getNBinY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLookUpTbSec*) G__getstructoffset())->getYlow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcLookUpTbSec*) G__getstructoffset())->getYup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->clearwk();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookUpTbSec*) G__getstructoffset())->findClusters((Int_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->setParPlane(*(HMdcPlane*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->setTargetF(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->setTargetL(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcPlane& obj = ((HMdcLookUpTbSec*) G__getstructoffset())->getPrPlane();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HMdcLookUpTbSec*) G__getstructoffset())->getTargetF();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HMdcLookUpTbSec*) G__getstructoffset())->getTargetL();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((HMdcLookUpTbSec*) G__getstructoffset())->fillTH2C((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((HMdcLookUpTbSec*) G__getstructoffset())->fillTH2C((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((HMdcLookUpTbSec*) G__getstructoffset())->fillTH2C((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->setTypeClFinder((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookUpTbSec*) G__getstructoffset())->getTypeClFinder());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookUpTbSec*) G__getstructoffset())->xBinNum((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookUpTbSec*) G__getstructoffset())->yBinNum((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookUpTbSec*) G__getstructoffset())->xBinNumInBounds((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookUpTbSec*) G__getstructoffset())->yBinNumInBounds((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLookUpTbSec*) G__getstructoffset())->calcXYBounds(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->setPrPlotSize((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookUpTbSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcLookUpTbSec(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) HMdcLookUpTbSec(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->setClusCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->setStack((HMdcClFnStack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->setStacksArr((HMdcClFnStacksArr*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->setCoilFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->calcTarget((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLookUpTbSec*) G__getstructoffset())->calcLookUpTb((Bool_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->fillTrackList((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->calcTdcDrDist();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->findVertex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->findSecVertex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->setVertexStat((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->calcVertexFnTarg((Int_t) G__int(libp->para[0]), (HGeomVector*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->setVertexPoint((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->setVertexZErr((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookUpTbSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTbSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookUpTbSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookUpTbSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTbSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTbSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookUpTbSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTbSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_260_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookUpTbSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_260_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookUpTbSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookUpTbSec(*(HMdcLookUpTbSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_260_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookUpTbSec* dest = (HMdcLookUpTbSec*) G__getstructoffset();
   *dest = *(HMdcLookUpTbSec*) libp->para[0].ref;
   const HMdcLookUpTbSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookUpTb */
static int G__MdcTrackDDict_261_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookUpTb::getExObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookUpTb::getObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookUpTb::deleteCont();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLookUpTbSec& obj = ((HMdcLookUpTb*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookUpTb*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLookUpTb*) G__getstructoffset())->initContainer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTb*) G__getstructoffset())->setTargLenInc((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTb*) G__getstructoffset())->setTypeClFinder((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTb*) G__getstructoffset())->setIsCoilOffFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcLookUpTb*) G__getstructoffset())->setQuietMode((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcLookUpTb*) G__getstructoffset())->setQuietMode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTb*) G__getstructoffset())->fillTrackList((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTb*) G__getstructoffset())->calcTdcDrDist();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookUpTb*) G__getstructoffset())->findVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcLookUpTb*) G__getstructoffset())->getNVertexPnts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HMdcLookUpTb*) G__getstructoffset())->getVertexStat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcLookUpTb*) G__getstructoffset())->getVertexPnts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookUpTb::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTb::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookUpTb::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookUpTb::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookUpTb*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTb::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookUpTb::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookUpTb::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_261_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookUpTb::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_261_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookUpTb* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookUpTb(*(HMdcLookUpTb*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_261_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookUpTb* dest = (HMdcLookUpTb*) G__getstructoffset();
   *dest = *(HMdcLookUpTb*) libp->para[0].ref;
   const HMdcLookUpTb& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcModListCells */
static int G__MdcTrackDDict_264_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcModListCells* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcModListCells[n];
     } else {
       p = new((void*) gvp) HMdcModListCells[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcModListCells;
     } else {
       p = new((void*) gvp) HMdcModListCells;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcModListCells));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLayListCells& obj = ((HMdcModListCells*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLayListCells& obj = ((const HMdcModListCells*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcModListCells*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcModListCells*) G__getstructoffset())->clearClustCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcModListCells*) G__getstructoffset())->clearFitWiresCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcModListCells*) G__getstructoffset())->setTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcModListCells*) G__getstructoffset())->delTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcModListCells*) G__getstructoffset())->getNCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcModListCells*) G__getstructoffset())->nextCell(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcModListCells*) G__getstructoffset())->getTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcModListCells*) G__getstructoffset())->isCell((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcModListCells*) G__getstructoffset())->getNLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcModListCells*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcModListCells*) G__getstructoffset())->addTime1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcModListCells*) G__getstructoffset())->nextTime(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcModListCells*) G__getstructoffset())->getTimeValue((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcModListCells*) G__getstructoffset())->addCell((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcModListCells*) G__getstructoffset())->addCellSim(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcModListCells*) G__getstructoffset())->nextCell(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcModListCells*) G__getstructoffset())->nextCellSim(
*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Float_t*) G__Floatref(&libp->para[6]), *(Float_t*) G__Floatref(&libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcModListCells*) G__getstructoffset())->nextCellSim(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcModListCells*) G__getstructoffset())->increaseClusCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcModListCells*) G__getstructoffset())->increaseRClusCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcModListCells*) G__getstructoffset())->increaseFittedCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcModListCells*) G__getstructoffset())->increaseRFittedCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcModListCells*) G__getstructoffset())->increaseFittedAndRealCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcModListCells*) G__getstructoffset())->decreaseClusCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcModListCells*) G__getstructoffset())->decreaseRClusCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcModListCells*) G__getstructoffset())->decreaseFittedCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcModListCells*) G__getstructoffset())->decreaseRFittedCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcModListCells*) G__getstructoffset())->decreaseFittedAndRealCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcModListCells*) G__getstructoffset())->getNClusters((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcModListCells*) G__getstructoffset())->getNRClusters((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcModListCells*) G__getstructoffset())->getNFitted((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcModListCells*) G__getstructoffset())->getNRFitted((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcModListCells*) G__getstructoffset())->genNumNotFittedLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcModListCells*) G__getstructoffset())->genNumNotFittedLayers(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcModListCells::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcModListCells::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcModListCells::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcModListCells::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcModListCells*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcModListCells::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcModListCells::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcModListCells::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_264_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcModListCells::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_264_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcModListCells* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcModListCells(*(HMdcModListCells*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcModListCells));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcModListCells G__THMdcModListCells;
static int G__MdcTrackDDict_264_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcModListCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcModListCells*) (soff+(sizeof(HMdcModListCells)*i)))->~G__THMdcModListCells();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcModListCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcModListCells*) (soff))->~G__THMdcModListCells();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_264_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcModListCells* dest = (HMdcModListCells*) G__getstructoffset();
   *dest = *(HMdcModListCells*) libp->para[0].ref;
   const HMdcModListCells& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcEvntListCells */
static int G__MdcTrackDDict_267_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEvntListCells* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcEvntListCells[n];
     } else {
       p = new((void*) gvp) HMdcEvntListCells[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcEvntListCells;
     } else {
       p = new((void*) gvp) HMdcEvntListCells;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcEvntListCells::getExObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcEvntListCells::getObject(*(Bool_t*) G__Boolref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcEvntListCells::deleteCont();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcSecListCells& obj = ((HMdcEvntListCells*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcSecListCells& obj = ((const HMdcEvntListCells*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcEvntListCells*) G__getstructoffset())->setMdcCal1Cat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((HMdcEvntListCells*) G__getstructoffset())->collectWires((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((HMdcEvntListCells*) G__getstructoffset())->collectWires());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEvntListCells*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcEvntListCells*) G__getstructoffset())->setTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (UChar_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEvntListCells*) G__getstructoffset())->delTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (UChar_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcEvntListCells*) G__getstructoffset())->getNCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcEvntListCells*) G__getstructoffset())->nextCell(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcEvntListCells*) G__getstructoffset())->nextCell(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(UChar_t*) G__UCharref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcEvntListCells*) G__getstructoffset())->getTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcEvntListCells*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcEvntListCells*) G__getstructoffset())->addTime1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcEvntListCells*) G__getstructoffset())->nextTime(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcEvntListCells*) G__getstructoffset())->getTimeValue((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcEvntListCells*) G__getstructoffset())->addCell(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (UChar_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcEvntListCells*) G__getstructoffset())->addCellSim(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (UChar_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcEvntListCells*) G__getstructoffset())->nextCell(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcEvntListCells*) G__getstructoffset())->nextCellSim(
*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])
, *(Int_t*) G__Intref(&libp->para[6]), *(Int_t*) G__Intref(&libp->para[7])
, *(Float_t*) G__Floatref(&libp->para[8]), *(Float_t*) G__Floatref(&libp->para[9])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcEvntListCells*) G__getstructoffset())->nextCellSim(
*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Float_t*) G__Floatref(&libp->para[6]), *(Float_t*) G__Floatref(&libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEvntListCells*) G__getstructoffset())->clearClustCounter((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEvntListCells*) G__getstructoffset())->clearFitWiresCounter((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcEvntListCells*) G__getstructoffset())->increaseFittedCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcEvntListCells*) G__getstructoffset())->increaseRFittedCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcEvntListCells*) G__getstructoffset())->increaseFittedAndRealCount((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcEvntListCells::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEvntListCells::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcEvntListCells::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcEvntListCells::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEvntListCells*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEvntListCells::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEvntListCells::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEvntListCells::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_267_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEvntListCells::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_267_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcEvntListCells* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcEvntListCells(*(HMdcEvntListCells*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcEvntListCells G__THMdcEvntListCells;
static int G__MdcTrackDDict_267_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcEvntListCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcEvntListCells*) (soff+(sizeof(HMdcEvntListCells)*i)))->~G__THMdcEvntListCells();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcEvntListCells*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcEvntListCells*) (soff))->~G__THMdcEvntListCells();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_267_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEvntListCells* dest = (HMdcEvntListCells*) G__getstructoffset();
   *dest = *(HMdcEvntListCells*) libp->para[0].ref;
   const HMdcEvntListCells& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcKickPlane */
static int G__MdcTrackDDict_269_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcKickPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcKickPlane[n];
     } else {
       p = new((void*) gvp) HMdcKickPlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcKickPlane;
     } else {
       p = new((void*) gvp) HMdcKickPlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcKickPlane*) G__getstructoffset())->calcIntersection(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcKickPlane*) G__getstructoffset())->calcSegIntersec((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *(HGeomVector*) libp->para[4].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcKickPlane*) G__getstructoffset())->calcIntersection(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])
, *(Double_t*) G__Doubleref(&libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcKickPlane*) G__getstructoffset())->calcIntersection(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *(HGeomVector*) libp->para[6].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcKickPlane*) G__getstructoffset())->calcSegIntersec(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, *(HGeomVector*) libp->para[4].ref, *(HGeomVector*) libp->para[5].ref
, *(HGeomVector*) libp->para[6].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcKickPlane*) G__getstructoffset())->calcSegIntersec(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, *(HSymMat*) libp->para[4].ref, *(HGeomVector*) libp->para[5].ref
, *(HGeomVector*) libp->para[6].ref, *(HGeomVector*) libp->para[7].ref
, *(Double_t*) G__Doubleref(&libp->para[8]), *(Double_t*) G__Doubleref(&libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcKickPlane*) G__getstructoffset())->calcSegIntersec((HMdcSeg*) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref, *(HGeomVector*) libp->para[3].ref
, (HGeomVector*) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcKickPlane*) G__getstructoffset())->calcSegIntersec((HMdcSeg*) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcKickPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcKickPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcKickPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcKickPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcKickPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcKickPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcKickPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcKickPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_269_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcKickPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_269_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcKickPlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcKickPlane(*(HMdcKickPlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcKickPlane G__THMdcKickPlane;
static int G__MdcTrackDDict_269_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcKickPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcKickPlane*) (soff+(sizeof(HMdcKickPlane)*i)))->~G__THMdcKickPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcKickPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcKickPlane*) (soff))->~G__THMdcKickPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_269_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcKickPlane* dest = (HMdcKickPlane*) G__getstructoffset();
   *dest = *(HMdcKickPlane*) libp->para[0].ref;
   const HMdcKickPlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcClusMetaMatch */
static int G__MdcTrackDDict_289_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusMetaMatch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusMetaMatch[n];
     } else {
       p = new((void*) gvp) HMdcClusMetaMatch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusMetaMatch;
     } else {
       p = new((void*) gvp) HMdcClusMetaMatch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcClusMetaMatch*) G__getstructoffset())->init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcClusMetaMatch*) G__getstructoffset())->reinit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusMetaMatch*) G__getstructoffset())->setFillPlotsFlag();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusMetaMatch*) G__getstructoffset())->collectMetaHits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcClusMetaMatch*) G__getstructoffset())->hasClusMathToMeta((Int_t) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcClusMetaMatch*) G__getstructoffset())->getRpcPlot((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcClusMetaMatch*) G__getstructoffset())->getShrPlot((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcClusMetaMatch*) G__getstructoffset())->getTofPlot((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusMetaMatch*) G__getstructoffset())->deletePlots();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusMetaMatch*) G__getstructoffset())->savePlots();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusMetaMatch*) G__getstructoffset())->setQualMultp((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClusMetaMatch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusMetaMatch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcClusMetaMatch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcClusMetaMatch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusMetaMatch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusMetaMatch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusMetaMatch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusMetaMatch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_289_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusMetaMatch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_289_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcClusMetaMatch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcClusMetaMatch(*(HMdcClusMetaMatch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcClusMetaMatch G__THMdcClusMetaMatch;
static int G__MdcTrackDDict_289_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcClusMetaMatch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcClusMetaMatch*) (soff+(sizeof(HMdcClusMetaMatch)*i)))->~G__THMdcClusMetaMatch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcClusMetaMatch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcClusMetaMatch*) (soff))->~G__THMdcClusMetaMatch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_289_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusMetaMatch* dest = (HMdcClusMetaMatch*) G__getstructoffset();
   *dest = *(HMdcClusMetaMatch*) libp->para[0].ref;
   const HMdcClusMetaMatch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackParam */
static int G__MdcTrackDDict_290_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackParam[n];
     } else {
       p = new((void*) gvp) HMdcTrackParam[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackParam;
     } else {
       p = new((void*) gvp) HMdcTrackParam;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const HMdcTrackParam*) G__getstructoffset())->printParam((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const HMdcTrackParam*) G__getstructoffset())->printParam();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const HMdcTrackParam*) G__getstructoffset())->printFunctChange((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const HMdcTrackParam*) G__getstructoffset())->printFunctChange();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->printErrors();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->copyLine(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->copyTimeOffsets(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->copyAllParam(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcTrackParam*) G__getstructoffset())->setTimeOffsets((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcTrackParam*) G__getstructoffset())->setTimeOffsets((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->copyNewParam(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->setOneSecData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->setTwoSecData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->setNMods((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->copyNMods(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->copyPlanes(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcTrackParam*) G__getstructoffset())->setIterNumb((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcTrackParam*) G__getstructoffset())->setIterNumb();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->incIterNumb();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackParam*) G__getstructoffset())->getIterNumb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackParam*) G__getstructoffset())->getNumParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->setOldFunct(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->saveFunct();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->clearFunct();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->addToSumsDevWt((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->calcTimeOffsets((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->correctMinTimeOffsets((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HMdcTrackParam*) G__getstructoffset())->getTimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackParam*) G__getstructoffset())->getTimeOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackParam*) G__getstructoffset())->isMdcTimeOffsetFixed((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackParam*) G__getstructoffset())->isSegTimeOffsetFixed((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackParam*) G__getstructoffset())->isTrackTimeOffsetFixed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->getTimeOffsetDer((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->addToTOffsetErr((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->clearTOffsetDer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->addToTOffsetDer((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->addTimeOffsetDer1(*(TMatrixD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->addTimeOffsetDer2(*(TMatrixD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackParam*) G__getstructoffset())->getSumWtNorm((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->calcTimeOffsetsErr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->fillErrorsMatr(*(TMatrixD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->addToFunct((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackParam*) G__getstructoffset())->getSumWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->copyParAndAdd(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->copyParAndAdd(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HMdcTrackParam*) G__getstructoffset())->getErrTimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HSymMat4& obj = ((HMdcTrackParam*) G__getstructoffset())->getErrMatr();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcTrackParam*) G__getstructoffset())->getParErr((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackParam*) G__getstructoffset())->functional());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackParam*) G__getstructoffset())->getNormFunctional());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackParam*) G__getstructoffset())->oldFunctional());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackParam*) G__getstructoffset())->getNumOfGoodWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((HMdcTrackParam*) G__getstructoffset())->calcChi2PerDF((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((HMdcTrackParam*) G__getstructoffset())->calcChi2PerDF());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackParam*) G__getstructoffset())->getChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->fillClusFit((HMdcClusFit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrackParam*) G__getstructoffset())->operator>(*(HMdcTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrackParam*) G__getstructoffset())->operator<(*(HMdcTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrackParam*) G__getstructoffset())->operator<((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrackParam*) G__getstructoffset())->operator>((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcTrackParam& obj = ((HMdcTrackParam*) G__getstructoffset())->operator()(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcTrackParam& obj = ((HMdcTrackParam*) G__getstructoffset())->operator()(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackParam*) G__getstructoffset())->isFunctRelChangLess((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackParam*) G__getstructoffset())->testParameters((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->setFixedTimeOffset((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->unfixTimeOffset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackParam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackParam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackParam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackParam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackParam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackParam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackParam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackParam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_290_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackParam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_290_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackParam* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackParam(*(HMdcTrackParam*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackParam G__THMdcTrackParam;
static int G__MdcTrackDDict_290_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackParam*) (soff+(sizeof(HMdcTrackParam)*i)))->~G__THMdcTrackParam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackParam*) (soff))->~G__THMdcTrackParam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_290_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackParam* dest = (HMdcTrackParam*) G__getstructoffset();
   *dest = *(HMdcTrackParam*) libp->para[0].ref;
   const HMdcTrackParam& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcKickCor */
static int G__MdcTrackDDict_291_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcKickCor* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcKickCor[n];
     } else {
       p = new((void*) gvp) HMdcKickCor[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcKickCor;
     } else {
       p = new((void*) gvp) HMdcKickCor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickCor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcKickCor*) G__getstructoffset())->interpolateAngles((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcKickCor*) G__getstructoffset())->calcCorrection((Float_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcKickCor*) G__getstructoffset())->initParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcKickCor*) G__getstructoffset())->getYMdc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcKickCor*) G__getstructoffset())->getZMdc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcKickCor*) G__getstructoffset())->getThetaMdc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcKickCor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcKickCor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcKickCor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcKickCor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcKickCor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcKickCor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcKickCor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcKickCor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_291_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcKickCor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_291_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcKickCor* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcKickCor(*(HMdcKickCor*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickCor));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcKickCor G__THMdcKickCor;
static int G__MdcTrackDDict_291_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcKickCor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcKickCor*) (soff+(sizeof(HMdcKickCor)*i)))->~G__THMdcKickCor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcKickCor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcKickCor*) (soff))->~G__THMdcKickCor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_291_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcKickCor* dest = (HMdcKickCor*) G__getstructoffset();
   *dest = *(HMdcKickCor*) libp->para[0].ref;
   const HMdcKickCor& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcProjPlot */
static int G__MdcTrackDDict_292_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcProjPlot* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcProjPlot(
(UChar_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HMdcProjPlot(
(UChar_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcProjPlot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcProjPlot*) G__getstructoffset())->setEdges((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcProjPlot*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcProjPlot*) G__getstructoffset())->xbin((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcProjPlot*) G__getstructoffset())->ybin((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcProjPlot*) G__getstructoffset())->xBnPos((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcProjPlot*) G__getstructoffset())->yBnPos((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcProjPlot*) G__getstructoffset())->binX((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcProjPlot*) G__getstructoffset())->binY((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcProjPlot*) G__getstructoffset())->calcCrossBin(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(Short_t*) G__Shortref(&libp->para[2]), *(Short_t*) G__Shortref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcProjPlot*) G__getstructoffset())->getPlot((Char_t*) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcProjPlot*) G__getstructoffset())->binAmplitude((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcProjPlot*) G__getstructoffset())->clearBin((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcProjPlot*) G__getstructoffset())->getBinAmplAndClear((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcProjPlot::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcProjPlot::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcProjPlot::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcProjPlot::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcProjPlot*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcProjPlot::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcProjPlot::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcProjPlot::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_292_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcProjPlot::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_292_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcProjPlot* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcProjPlot(*(HMdcProjPlot*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcProjPlot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcProjPlot G__THMdcProjPlot;
static int G__MdcTrackDDict_292_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcProjPlot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcProjPlot*) (soff+(sizeof(HMdcProjPlot)*i)))->~G__THMdcProjPlot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcProjPlot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcProjPlot*) (soff))->~G__THMdcProjPlot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_292_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcProjPlot* dest = (HMdcProjPlot*) G__getstructoffset();
   *dest = *(HMdcProjPlot*) libp->para[0].ref;
   const HMdcProjPlot& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdc34ClFinderLayer */
static int G__MdcTrackDDict_293_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdc34ClFinderLayer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdc34ClFinderLayer(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HMdc34ClFinderLayer(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdc34ClFinderLayer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdc34ClFinderLayer(*(HMdc34ClFinderLayer*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HMdc34ClFinderLayer(*(HMdc34ClFinderLayer*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdc34ClFinderLayer*) G__getstructoffset())->createArrayBins((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderLayer*) G__getstructoffset())->setCellsList(*(HMdcLayListCells*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdc34ClFinderLayer*) G__getstructoffset())->nextLayerPart((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdc34ClFinderLayer*) G__getstructoffset())->getLayerPart((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdc34ClFinderLayer*) G__getstructoffset())->calcWiresProj(*(HMdcSizesCellsLayer*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, (HMdcProjPlot*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdc34ClFinderLayer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc34ClFinderLayer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdc34ClFinderLayer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdc34ClFinderLayer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderLayer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc34ClFinderLayer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdc34ClFinderLayer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc34ClFinderLayer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_293_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdc34ClFinderLayer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdc34ClFinderLayer G__THMdc34ClFinderLayer;
static int G__MdcTrackDDict_293_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdc34ClFinderLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdc34ClFinderLayer*) (soff+(sizeof(HMdc34ClFinderLayer)*i)))->~G__THMdc34ClFinderLayer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdc34ClFinderLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdc34ClFinderLayer*) (soff))->~G__THMdc34ClFinderLayer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_293_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdc34ClFinderLayer* dest = (HMdc34ClFinderLayer*) G__getstructoffset();
   *dest = *(HMdc34ClFinderLayer*) libp->para[0].ref;
   const HMdc34ClFinderLayer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdc34ClFinderMod */
static int G__MdcTrackDDict_294_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdc34ClFinderMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdc34ClFinderMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdc34ClFinderMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_294_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdc34ClFinderLayer& obj = ((HMdc34ClFinderMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_294_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdc34ClFinderMod*) G__getstructoffset())->getNCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_294_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderMod*) G__getstructoffset())->setCellsList(*(HMdcModListCells*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_294_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdc34ClFinderMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_294_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc34ClFinderMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_294_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdc34ClFinderMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_294_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdc34ClFinderMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_294_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_294_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc34ClFinderMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_294_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdc34ClFinderMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_294_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc34ClFinderMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_294_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdc34ClFinderMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_294_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdc34ClFinderMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdc34ClFinderMod(*(HMdc34ClFinderMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdc34ClFinderMod G__THMdc34ClFinderMod;
static int G__MdcTrackDDict_294_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdc34ClFinderMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdc34ClFinderMod*) (soff+(sizeof(HMdc34ClFinderMod)*i)))->~G__THMdc34ClFinderMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdc34ClFinderMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdc34ClFinderMod*) (soff))->~G__THMdc34ClFinderMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_294_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdc34ClFinderMod* dest = (HMdc34ClFinderMod*) G__getstructoffset();
   *dest = *(HMdc34ClFinderMod*) libp->para[0].ref;
   const HMdc34ClFinderMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdc34ClFinderSec */
static int G__MdcTrackDDict_295_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdc34ClFinderMod& obj = ((HMdc34ClFinderSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->setMinBin((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdc34ClFinderSec*) G__getstructoffset())->notEnoughWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((HMdc34ClFinderSec*) G__getstructoffset())->findClustersSeg2((HMdcClus*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HMdc34ClFinderSec*) G__getstructoffset())->findClustersSeg2((HMdcClus*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((HMdc34ClFinderSec*) G__getstructoffset())->findClustersSeg2((HMdcTrackParam*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HMdc34ClFinderSec*) G__getstructoffset())->findClustersSeg2((HMdcTrackParam*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((HMdc34ClFinderSec*) G__getstructoffset())->getPlot((Char_t*) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((HMdc34ClFinderSec*) G__getstructoffset())->getPlot((Char_t*) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdc34ClFinderSec*) G__getstructoffset())->getPlotSeg2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdc34ClFinderSec*) G__getstructoffset())->getNBinX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdc34ClFinderSec*) G__getstructoffset())->getNBinY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->setTargetF(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->setTargetL(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HMdc34ClFinderSec*) G__getstructoffset())->getTargetF();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HMdc34ClFinderSec*) G__getstructoffset())->getTargetL();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->setTypeClFinder((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdc34ClFinderSec*) G__getstructoffset())->getTypeClFinder());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->setCellsList(*(HMdcSecListCells*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdc34ClFinderSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdc34ClFinderSec(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HMdc34ClFinderSec(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdc34ClFinderSec*) G__getstructoffset())->getTargetArr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((HMdc34ClFinderSec*) G__getstructoffset())->getMSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->setClusCut((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->setKickPlane((HMdcKickPlane*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->setXMinClLines((Short_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->setXMaxClLines((Short_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->setClFnStack((HMdcClFnStack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->setClFnStArr((HMdcClFnStacksArr*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdc34ClFinderSec*) G__getstructoffset())->mdcFlag((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->doMetaMatch((HMdcClusMetaMatch*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdc34ClFinderSec*) G__getstructoffset())->setDxDyCut((TCutG*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->setFakeSupprFlag((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->resetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->setKickCorr((HMdcKickCor*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdc34ClFinderSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc34ClFinderSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdc34ClFinderSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdc34ClFinderSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinderSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc34ClFinderSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdc34ClFinderSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc34ClFinderSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_295_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdc34ClFinderSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_295_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdc34ClFinderSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdc34ClFinderSec(*(HMdc34ClFinderSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_295_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdc34ClFinderSec* dest = (HMdc34ClFinderSec*) G__getstructoffset();
   *dest = *(HMdc34ClFinderSec*) libp->para[0].ref;
   const HMdc34ClFinderSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdc34ClFinder */
static int G__MdcTrackDDict_297_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdc34ClFinder::getExObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdc34ClFinder::getObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdc34ClFinder::deleteCont();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdc34ClFinder::setQuietMode((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdc34ClFinder::getQuietMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdc34ClFinderSec& obj = ((HMdc34ClFinder*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdc34ClFinder*) G__getstructoffset())->initContainer(*(HMdcEvntListCells*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinder*) G__getstructoffset())->setCellsList(*(HMdcEvntListCells*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinder*) G__getstructoffset())->doMetaMatch((HMdcClusMetaMatch*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdc34ClFinder::calcDxDyCutRegion(*(HGeomVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinder*) G__getstructoffset())->printClFinderParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdc34ClFinder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc34ClFinder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdc34ClFinder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdc34ClFinder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc34ClFinder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc34ClFinder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdc34ClFinder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc34ClFinder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_297_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdc34ClFinder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_297_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdc34ClFinder* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdc34ClFinder(*(HMdc34ClFinder*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_297_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdc34ClFinder* dest = (HMdc34ClFinder*) G__getstructoffset();
   *dest = *(HMdc34ClFinder*) libp->para[0].ref;
   const HMdc34ClFinder& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcEff */
static int G__MdcTrackDDict_365_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEff* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcEff[n];
     } else {
       p = new((void*) gvp) HMdcEff[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcEff;
     } else {
       p = new((void*) gvp) HMdcEff;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEff));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((HMdcEff*) G__getstructoffset())->calcEff(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((HMdcEff*) G__getstructoffset())->calcEff(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((HMdcEff*) G__getstructoffset())->calcEff((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEff*) G__getstructoffset())->setTotNhits((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEff*) G__getstructoffset())->setTotNhitsCutS((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEff*) G__getstructoffset())->setTotNhitsNoCut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEff*) G__getstructoffset())->setTotNhitsClus((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcEff*) G__getstructoffset())->getTotNhits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcEff*) G__getstructoffset())->getTotNhitsNoCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcEff*) G__getstructoffset())->getTotNhitsCutS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcEff*) G__getstructoffset())->getTotNhitsClus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getN0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getN1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getN2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getN2m());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getN2b());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getEfficiency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getErrEfficiency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getFracSingle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getErrFracSingle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getP0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getP1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getP2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getErrP0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getErrP1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getErrP2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEff*) G__getstructoffset())->getTotNumTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcEff::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEff::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcEff::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcEff::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEff*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEff::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEff::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEff::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_365_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEff::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_365_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcEff* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcEff(*(HMdcEff*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEff));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcEff G__THMdcEff;
static int G__MdcTrackDDict_365_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcEff*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcEff*) (soff+(sizeof(HMdcEff)*i)))->~G__THMdcEff();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcEff*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcEff*) (soff))->~G__THMdcEff();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_365_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEff* dest = (HMdcEff*) G__getstructoffset();
   *dest = *(HMdcEff*) libp->para[0].ref;
   const HMdcEff& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcEffMod */
static int G__MdcTrackDDict_366_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEffMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcEffMod[n];
     } else {
       p = new((void*) gvp) HMdcEffMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcEffMod;
     } else {
       p = new((void*) gvp) HMdcEffMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEffMod*) G__getstructoffset())->getP0l());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEffMod*) G__getstructoffset())->getP1l());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEffMod*) G__getstructoffset())->getP2l());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEffMod*) G__getstructoffset())->getP3l());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEffMod*) G__getstructoffset())->getP4l());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEffMod*) G__getstructoffset())->getP5l());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcEffMod*) G__getstructoffset())->getP6l());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcEffMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEffMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcEffMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcEffMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEffMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEffMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEffMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_366_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEffMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_366_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcEffMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcEffMod(*(HMdcEffMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcEffMod G__THMdcEffMod;
static int G__MdcTrackDDict_366_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcEffMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcEffMod*) (soff+(sizeof(HMdcEffMod)*i)))->~G__THMdcEffMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcEffMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcEffMod*) (soff))->~G__THMdcEffMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_366_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEffMod* dest = (HMdcEffMod*) G__getstructoffset();
   *dest = *(HMdcEffMod*) libp->para[0].ref;
   const HMdcEffMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcEfficiencyLayer */
static int G__MdcTrackDDict_367_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEfficiencyLayer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcEfficiencyLayer[n];
     } else {
       p = new((void*) gvp) HMdcEfficiencyLayer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcEfficiencyLayer;
     } else {
       p = new((void*) gvp) HMdcEfficiencyLayer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->init((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Short_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->addCellTot((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->addCellCutS((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->addCellClus((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->addCell((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->addCellInClust((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcEfficiencyLayer*) G__getstructoffset())->getNumClCell((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((HMdcEfficiencyLayer*) G__getstructoffset())->getNClCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->add0Hit((Short_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->add1Hit((Short_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->add2Hit((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcEfficiencyLayer*) G__getstructoffset())->getCellStat((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcEfficiencyLayer*) G__getstructoffset())->getNumCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcEfficiencyLayer*) G__getstructoffset())->getN0Hit((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcEfficiencyLayer*) G__getstructoffset())->getN1Hit((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcEfficiencyLayer*) G__getstructoffset())->getN2Hit((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcEfficiencyLayer*) G__getstructoffset())->getEffCells((HMdcEff*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Short_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcEfficiencyLayer*) G__getstructoffset())->getEffCells((HMdcEff*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcEfficiencyLayer*) G__getstructoffset())->getEffCells((HMdcEff*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->getEffXY((HMdcEff*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->getEffXY((HMdcEff*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Short_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->getEffXY((HMdcEff*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Short_t) G__int(libp->para[2]), (Short_t) G__int(libp->para[3])
, (Short_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcEfficiencyLayer*) G__getstructoffset())->getHist((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->fillHists();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->drawTotNhits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->drawRatio();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->drawNHits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->drawHistEff();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->drawHistSing();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->drawProbabilitis();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->updateCanv();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->setListPads((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->drawCanvas();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->delCanvas();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->drawCanvXYlist();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->updateCanvXYlist();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->delCanvXYlist();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->drawCanvXYnHits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->drawCanvXYefficiency();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->drawCanvXYsingle();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->drawCanvXYprob();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->setBiningXY((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcEfficiencyLayer::setTitle((TH1F*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcEfficiencyLayer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEfficiencyLayer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcEfficiencyLayer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcEfficiencyLayer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyLayer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEfficiencyLayer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEfficiencyLayer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEfficiencyLayer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_367_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEfficiencyLayer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_367_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcEfficiencyLayer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcEfficiencyLayer(*(HMdcEfficiencyLayer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcEfficiencyLayer G__THMdcEfficiencyLayer;
static int G__MdcTrackDDict_367_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcEfficiencyLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcEfficiencyLayer*) (soff+(sizeof(HMdcEfficiencyLayer)*i)))->~G__THMdcEfficiencyLayer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcEfficiencyLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcEfficiencyLayer*) (soff))->~G__THMdcEfficiencyLayer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_367_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEfficiencyLayer* dest = (HMdcEfficiencyLayer*) G__getstructoffset();
   *dest = *(HMdcEfficiencyLayer*) libp->para[0].ref;
   const HMdcEfficiencyLayer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcEfficiencyMod */
static int G__MdcTrackDDict_368_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEfficiencyMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcEfficiencyMod((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcEfficiencyMod((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcEfficiencyLayer& obj = ((HMdcEfficiencyMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->add0Hit((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->add1Hit((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->add2Hit((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcEfficiencyMod*) G__getstructoffset())->getBinNum((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcEfficiencyMod*) G__getstructoffset())->getEffMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->getEffXY((HMdcEffMod*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->getEffXY((HMdcEffMod*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Short_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->getEffXY((HMdcEffMod*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Short_t) G__int(libp->para[2]), (Short_t) G__int(libp->para[3])
, (Short_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->setListLayers((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->updateCanv();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->drawHists((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->drawCanvTotNhits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->drawCanvNHits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->drawCanvHistEff();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->drawCanvHistSing();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->drawCanvProbabilitis();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->drawCanvRatio();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->saveCanvases((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->delCanv((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->delCanvTotNhits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->delCanvNHits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->delCanvHistEff();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->delCanvHistSing();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->delCanvProbabilitis();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->delCanvRatio();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->fillHistMb();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->drawCanvEffMb();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->saveCanvEffMb((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->creatCanvEffMb((TCanvas*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->fillCanvEffMb((TCanvas*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->fillCanvPattMb((TCanvas*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->delCanvMb();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->fillTimesAll((HMdcCal1*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->fillTimesAfCut((HMdcCal1*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->fillTimesCls((HMdcCal1*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcEfficiencyMod*) G__getstructoffset())->drawCanvTimes((Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcEfficiencyMod*) G__getstructoffset())->drawCanvTimes((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcEfficiencyMod*) G__getstructoffset())->drawCanvTimes();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->delCanvTimes();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcEfficiencyMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEfficiencyMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcEfficiencyMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcEfficiencyMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencyMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEfficiencyMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEfficiencyMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEfficiencyMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_368_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEfficiencyMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_368_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcEfficiencyMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcEfficiencyMod(*(HMdcEfficiencyMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcEfficiencyMod G__THMdcEfficiencyMod;
static int G__MdcTrackDDict_368_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcEfficiencyMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcEfficiencyMod*) (soff+(sizeof(HMdcEfficiencyMod)*i)))->~G__THMdcEfficiencyMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcEfficiencyMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcEfficiencyMod*) (soff))->~G__THMdcEfficiencyMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_368_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEfficiencyMod* dest = (HMdcEfficiencyMod*) G__getstructoffset();
   *dest = *(HMdcEfficiencyMod*) libp->para[0].ref;
   const HMdcEfficiencyMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcEfficiencySec */
static int G__MdcTrackDDict_369_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEfficiencySec* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcEfficiencySec((Short_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HMdcEfficiencySec((Short_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencySec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcEfficiencyMod& obj = ((HMdcEfficiencySec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcEfficiencySec*) G__getstructoffset())->getPlotAllHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcEfficiencySec*) G__getstructoffset())->getPlotSelHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcEfficiencySec*) G__getstructoffset())->getCanvasProj());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcEfficiencySec*) G__getstructoffset())->getCanvasHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencySec*) G__getstructoffset())->drawCanvProj();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencySec*) G__getstructoffset())->drawCanvHits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencySec*) G__getstructoffset())->delCanvProj();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencySec*) G__getstructoffset())->delCanvHits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencySec*) G__getstructoffset())->saveCanvHits((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencySec*) G__getstructoffset())->creatPlots((HMdcLookUpTbSec*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcEfficiencySec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEfficiencySec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcEfficiencySec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcEfficiencySec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiencySec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEfficiencySec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEfficiencySec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEfficiencySec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_369_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEfficiencySec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_369_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcEfficiencySec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcEfficiencySec(*(HMdcEfficiencySec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencySec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcEfficiencySec G__THMdcEfficiencySec;
static int G__MdcTrackDDict_369_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcEfficiencySec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcEfficiencySec*) (soff+(sizeof(HMdcEfficiencySec)*i)))->~G__THMdcEfficiencySec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcEfficiencySec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcEfficiencySec*) (soff))->~G__THMdcEfficiencySec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_369_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEfficiencySec* dest = (HMdcEfficiencySec*) G__getstructoffset();
   *dest = *(HMdcEfficiencySec*) libp->para[0].ref;
   const HMdcEfficiencySec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcEfficiency */
static int G__MdcTrackDDict_370_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEfficiency* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcEfficiency[n];
     } else {
       p = new((void*) gvp) HMdcEfficiency[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcEfficiency;
     } else {
       p = new((void*) gvp) HMdcEfficiency;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiency));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEfficiency* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcEfficiency((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcEfficiency((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiency));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcEfficiencySec& obj = ((HMdcEfficiency*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcEfficiency*) G__getstructoffset())->drawProjPlotsSec((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcEfficiency*) G__getstructoffset())->drawProjPlotsSec((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcEfficiency*) G__getstructoffset())->drawProjPlots((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcEfficiency*) G__getstructoffset())->drawProjPlots((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiency*) G__getstructoffset())->drawHitsPlots((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiency*) G__getstructoffset())->drawCanvEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiency*) G__getstructoffset())->delCanvEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcEfficiency*) G__getstructoffset())->drawPrPlEvent((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcEfficiency*) G__getstructoffset())->drawPrPlEvent();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcEfficiency*) G__getstructoffset())->drawSummary((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcEfficiency*) G__getstructoffset())->drawSummary();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HMdcEfficiency*) G__getstructoffset())->getEventId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcEfficiency*) G__getstructoffset())->calcEfficiency((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcEfficiency*) G__getstructoffset())->calcEfficiency();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiency*) G__getstructoffset())->drawAllClusters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiency*) G__getstructoffset())->drawGoodClusters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiency*) G__getstructoffset())->drawClusSelCh();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcEfficiency*) G__getstructoffset())->getDrawClusFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiency*) G__getstructoffset())->printClusters((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiency*) G__getstructoffset())->saveHist();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiency*) G__getstructoffset())->saveHist(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      HMdcEfficiency::savePDF((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      HMdcEfficiency::savePDF((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcEfficiency::getFilePointer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcEfficiency::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEfficiency::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcEfficiency::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcEfficiency::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEfficiency*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEfficiency::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEfficiency::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEfficiency::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_370_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEfficiency::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcEfficiency G__THMdcEfficiency;
static int G__MdcTrackDDict_370_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcEfficiency*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcEfficiency*) (soff+(sizeof(HMdcEfficiency)*i)))->~G__THMdcEfficiency();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcEfficiency*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcEfficiency*) (soff))->~G__THMdcEfficiency();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcGeantEvent */
static int G__MdcTrackDDict_371_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeantEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeantEvent[n];
     } else {
       p = new((void*) gvp) HMdcGeantEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeantEvent;
     } else {
       p = new((void*) gvp) HMdcGeantEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcGeantEvent::getExObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcGeantEvent::getObject(*(Bool_t*) G__Boolref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGeantEvent::deleteCont();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcGeantEvent::getMdcTrackInfSim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeantEvent*) G__getstructoffset())->setGeantKineCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantEvent*) G__getstructoffset())->unsetMdc((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantEvent*) G__getstructoffset())->isMdcActive((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcGeantEvent*) G__getstructoffset())->setDebugPrintFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcGeantEvent*) G__getstructoffset())->setDebugPrintFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeantEvent*) G__getstructoffset())->collectTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantEvent*) G__getstructoffset())->getNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcGeantEvent*) G__getstructoffset())->next(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcGeantEvent*) G__getstructoffset())->getGeantTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantEvent*) G__getstructoffset())->isGeantBug());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantEvent*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantEvent*) G__getstructoffset())->clearOSegClus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantEvent*) G__getstructoffset())->clearOClus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantEvent*) G__getstructoffset())->clearOSeg();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcGeantEvent*) G__getstructoffset())->getEventVertex(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcGeantEvent*) G__getstructoffset())->getXvertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcGeantEvent*) G__getstructoffset())->getYvertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcGeantEvent*) G__getstructoffset())->getZvertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantEvent*) G__getstructoffset())->getTargetNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcGeantEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcGeantEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGeantEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeantEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_371_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeantEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcGeantEvent G__THMdcGeantEvent;
static int G__MdcTrackDDict_371_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcGeantEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcGeantEvent*) (soff+(sizeof(HMdcGeantEvent)*i)))->~G__THMdcGeantEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcGeantEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcGeantEvent*) (soff))->~G__THMdcGeantEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackFinder */
static int G__MdcTrackDDict_372_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackFinder((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTrackFinder((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackFinder((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTrackFinder((Bool_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackFinder(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcTrackFinder(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackFinder(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcTrackFinder(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackFinder[n];
     } else {
       p = new((void*) gvp) HMdcTrackFinder[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackFinder;
     } else {
       p = new((void*) gvp) HMdcTrackFinder;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcTrackFinder((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcTrackFinder((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinder*) G__getstructoffset())->setPersistency((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinder*) G__getstructoffset())->setParContainers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinder*) G__getstructoffset())->setNLayers((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinder*) G__getstructoffset())->setLevel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinder*) G__getstructoffset())->setLevelSeg1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinder*) G__getstructoffset())->setLevelSeg2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinder*) G__getstructoffset())->printStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinder*) G__getstructoffset())->calcClFndrLevel();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTrackFinder*) G__getstructoffset())->clFndrBeforField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinder*) G__getstructoffset())->targSegFinderOnly();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackFinder*) G__getstructoffset())->getClusMetaMatch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackFinder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFinder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackFinder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackFinder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFinder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackFinder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFinder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_372_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackFinder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackFinder G__THMdcTrackFinder;
static int G__MdcTrackDDict_372_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackFinder*) (soff+(sizeof(HMdcTrackFinder)*i)))->~G__THMdcTrackFinder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackFinder*) (soff))->~G__THMdcTrackFinder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcClusterToHit */
static int G__MdcTrackDDict_373_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusterToHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusterToHit[n];
     } else {
       p = new((void*) gvp) HMdcClusterToHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusterToHit;
     } else {
       p = new((void*) gvp) HMdcClusterToHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_373_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusterToHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcClusterToHit((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcClusterToHit((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_373_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusterToHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcClusterToHit((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcClusterToHit((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_373_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusterToHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcClusterToHit(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) HMdcClusterToHit(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_373_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusterToHit*) G__getstructoffset())->printStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_373_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClusterToHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_373_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusterToHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_373_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcClusterToHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_373_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcClusterToHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_373_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusterToHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_373_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusterToHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_373_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusterToHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_373_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusterToHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_373_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusterToHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcClusterToHit G__THMdcClusterToHit;
static int G__MdcTrackDDict_373_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcClusterToHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcClusterToHit*) (soff+(sizeof(HMdcClusterToHit)*i)))->~G__THMdcClusterToHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcClusterToHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcClusterToHit*) (soff))->~G__THMdcClusterToHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdc12Fit */
static int G__MdcTrackDDict_374_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdc12Fit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdc12Fit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HMdc12Fit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdc12Fit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdc12Fit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdc12Fit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdc12Fit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdc12Fit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdc12Fit(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Bool_t) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) HMdc12Fit(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Bool_t) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdc12Fit(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) HMdc12Fit(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdc12Fit(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HMdc12Fit(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdc12Fit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdc12Fit((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdc12Fit((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdc12Fit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdc12Fit[n];
     } else {
       p = new((void*) gvp) HMdc12Fit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdc12Fit;
     } else {
       p = new((void*) gvp) HMdc12Fit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12Fit*) G__getstructoffset())->setSignalSpeed((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12Fit*) G__getstructoffset())->setNotFillByClus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12Fit*) G__getstructoffset())->printStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12Fit*) G__getstructoffset())->printStatusM();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdc12Fit*) G__getstructoffset())->setCosmicData((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdc12Fit*) G__getstructoffset())->setCosmicData();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12Fit*) G__getstructoffset())->fillHitSegCat((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdc12Fit*) G__getstructoffset())->useFittedISeg((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdc12Fit*) G__getstructoffset())->useFittedISeg();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcTrackFitInOut& obj = ((HMdc12Fit*) G__getstructoffset())->getFitInOutCont();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdc12Fit::testGeantInf((HMdcSegSim*) G__int(libp->para[0]), (HMdcSegSim*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12Fit*) G__getstructoffset())->setFakeSupprStep1Par((UInt_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12Fit*) G__getstructoffset())->setFakeSupprStep2Par((UInt_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdc12Fit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc12Fit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdc12Fit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdc12Fit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12Fit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc12Fit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdc12Fit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc12Fit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_374_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdc12Fit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdc12Fit G__THMdc12Fit;
static int G__MdcTrackDDict_374_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdc12Fit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdc12Fit*) (soff+(sizeof(HMdc12Fit)*i)))->~G__THMdc12Fit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdc12Fit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdc12Fit*) (soff))->~G__THMdc12Fit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcIdealTracking */
static int G__MdcTrackDDict_375_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcIdealTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcIdealTracking[n];
     } else {
       p = new((void*) gvp) HMdcIdealTracking[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcIdealTracking;
     } else {
       p = new((void*) gvp) HMdcIdealTracking;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcIdealTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcIdealTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcIdealTracking((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcIdealTracking((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcIdealTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcIdealTracking*) G__getstructoffset())->fillParallelCategories();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcIdealTracking*) G__getstructoffset())->setResolutionX((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcIdealTracking*) G__getstructoffset())->setResolutionY((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcIdealTracking*) G__getstructoffset())->setNFiredLayersCuts((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcIdealTracking*) G__getstructoffset())->printStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcIdealTracking::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcIdealTracking::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcIdealTracking::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcIdealTracking::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcIdealTracking*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcIdealTracking::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcIdealTracking::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcIdealTracking::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_375_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcIdealTracking::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcIdealTracking G__THMdcIdealTracking;
static int G__MdcTrackDDict_375_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcIdealTracking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcIdealTracking*) (soff+(sizeof(HMdcIdealTracking)*i)))->~G__THMdcIdealTracking();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcIdealTracking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcIdealTracking*) (soff))->~G__THMdcIdealTracking();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackDSet */
static int G__MdcTrackDDict_376_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackDSet::hMdcTrackFinder((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::useThisTrackFinder((HMdcTrackFinder*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackDSet::hMdcClusterToHit((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackDSet::hMdcClusterToHit((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackDSet::hMdc12Fit((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackDSet::hMdc12Fit(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Bool_t) G__int(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setAnotherFit((HMdc12Fit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::isCoilOff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getClFinderType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::getTrFnLevels(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getNLayersInMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::isModActive((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::isSegActive((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::isSecActive((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getModForSeg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getModForSeg2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getModForSeg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getFitAuthor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getFitVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getFitType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getUseWireOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getMixFitCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getMixClusCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getLevel4((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getLevel5((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) HMdcTrackDSet::getGhostRemovingParamSeg2(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) HMdcTrackDSet::getGhostRemovingFlagSeg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) HMdcTrackDSet::getGhostRemovingFlagSeg2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::getProjectPlotSizeSeg1(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::getProjectPlotSizeSeg2(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::useFloatLevelSeg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::useFloatLevelSeg2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::useSegAmpCutSeg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::useDriftTimeSeg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::useDriftTimeSeg2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::getVertexFinderPar(*(Double_t*) G__Doubleref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::findClustVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HMdcTrackDSet::getZStartDetector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::getDrTimeProjParSeg1(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), (Double_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::getDrTimeProjParSeg2(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::doMetaMatching(*(Bool_t*) G__Boolref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::getDxDyKickCut((TCutG*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) HMdcTrackDSet::getCalcInitValueFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HMdcTrackDSet::getCalcInitValueCut((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::useFittedSeg1ParFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::getUseKickCorFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::getFindOffVertTrkFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getNLayersCutOVT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getNWiresCutOVT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::getNCellsCutOVT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackDSet::getMdcTrackFinder());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::clearPTrackFinder();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackDSet::getMdcClusterToHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::clearPClusterToHit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackDSet::getMdc12Fit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::clearP12Fit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::fNTuple());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcTrackDSet::fPrint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setCoilStatus((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setClFinderType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setTrFnNLayers((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setTrackFinderLevel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setTrFnSegLevel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcTrackDSet::setRemoveGhostsSeg1((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcTrackDSet::setRemoveGhostsSeg1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::writeFakesToTreeSeg1();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcTrackDSet::setRemoveGhostsSeg2((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcTrackDSet::setRemoveGhostsSeg2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::writeFakesToTreeSeg2();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setGhostRemovingParamSeg2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setProjectPlotSizeSeg1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setProjectPlotSizeSeg2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcTrackDSet::setFloatLevelSeg1((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcTrackDSet::setFloatLevelSeg1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcTrackDSet::setFloatLevelSeg2((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcTrackDSet::setFloatLevelSeg2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcTrackDSet::setSegAmpCutSeg1((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcTrackDSet::setSegAmpCutSeg1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setMergeClusSeg1();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setMergeClusSeg2();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcTrackDSet::setUseDriftTimeSeg1((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcTrackDSet::setUseDriftTimeSeg1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcTrackDSet::setUseDriftTimeSeg2((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcTrackDSet::setUseDriftTimeSeg2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcTrackDSet::setVertexFinderFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcTrackDSet::setVertexFinderFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setVertexFinderPar((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setZStarDetector((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setMetaMatchFlag((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setDxDyKickCut((TCutG*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcTrackDSet::setUseKickCorFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcTrackDSet::setUseKickCorFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setDrTimeProjParamSeg1((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setDrTimeCutYCorrSeg1((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setDrTimeCutLCorrSeg1((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setDrTimeProjParamSeg2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setDrTimeCutYCorrSeg2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setDrTimeCutLCorrSeg2((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setFitAuthor((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setFitVersion((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setFitType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setFitOutput((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setMixFitCut((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setMixClusCut((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setMixCuts((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setTrackFinder((HMdcTrackFinder*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setClusterToHit((HMdcClusterToHit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::set12Fit((HMdc12Fit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcTrackDSet::setDxDyCut((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcTrackDSet::setDxDyCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcTrackDSet::setCalcInitialValue((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcTrackDSet::setCalcInitialValue();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setCalcInitialValueSeg1((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setCalcInitialValueSeg2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcTrackDSet::setUseFittedSeg1ParFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcTrackDSet::setUseFittedSeg1ParFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcTrackDSet::setFindOffVertTrkFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcTrackDSet::setFindOffVertTrkFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setNLayersCutOVT((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setNWiresCutOVT((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setNCellsCutOVT((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setTrackParam(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::printStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::printMdc34ClFinderPar();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setMdcTrackFinder((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setTrFnLevel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setTrFnNLayers((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setMdcClusterToHit((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setMdc12Fit((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::setUseWireOffset((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) HMdcTrackDSet::hMdcIdealTracking((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HMdcTrackDSet::hMdcIdealTracking((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackDSet::getMdcIdealTracking());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackDSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackDSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackDSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackDSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcTrackDSet*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackDSet*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackDSet*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackDSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackDSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackDSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_376_0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackDSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_376_0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackDSet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackDSet(*(HMdcTrackDSet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDSet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_376_0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackDSet* dest = (HMdcTrackDSet*) G__getstructoffset();
   *dest = *(HMdcTrackDSet*) libp->para[0].ref;
   const HMdcTrackDSet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcHitSegFiller */
static int G__MdcTrackDDict_378_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcHitSegFiller* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcHitSegFiller[n];
     } else {
       p = new((void*) gvp) HMdcHitSegFiller[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcHitSegFiller;
     } else {
       p = new((void*) gvp) HMdcHitSegFiller;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcHitSegFiller));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSegFiller*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSegFiller*) G__getstructoffset())->setFitParam(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSegFiller*) G__getstructoffset())->setFitParamForSecondSec(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcHitSegFiller*) G__getstructoffset())->calcSegPar((HGeomVector*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcHitSegFiller*) G__getstructoffset())->calcSegPar();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcHitSegFiller*) G__getstructoffset())->getPlane1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcHitSegFiller*) G__getstructoffset())->getPlane2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcHitSegFiller*) G__getstructoffset())->getX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcHitSegFiller*) G__getstructoffset())->getY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcHitSegFiller*) G__getstructoffset())->getZ1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcHitSegFiller*) G__getstructoffset())->getX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcHitSegFiller*) G__getstructoffset())->getZ2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSegFiller*) G__getstructoffset())->setSegParam((HMdcPlane*) G__int(libp->para[0]), (HMdcPlane*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSegFiller*) G__getstructoffset())->setClusParam((HMdcClus*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcHitSegFiller*) G__getstructoffset())->getZm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcHitSegFiller*) G__getstructoffset())->getR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcHitSegFiller*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcHitSegFiller*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSegFiller*) G__getstructoffset())->propogErrToSeg(*(HSymMat4*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSegFiller*) G__getstructoffset())->fillMdcSeg((HMdcSeg*) G__int(libp->para[0]), (HGeomVector*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcHitSegFiller*) G__getstructoffset())->fillMdcSegByClus((HMdcSeg*) G__int(libp->para[0]), (HGeomVector*) G__int(libp->para[1])
, (HMdcTrackParam*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcHitSegFiller*) G__getstructoffset())->fillMdcSegByClus((HMdcSeg*) G__int(libp->para[0]), (HGeomVector*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSegFiller*) G__getstructoffset())->fillMdcHit((HMdcSizesCellsMod*) G__int(libp->para[0]), (HMdcHit*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSegFiller*) G__getstructoffset())->fillMdcHitByClus((HMdcSizesCellsMod*) G__int(libp->para[0]), (HMdcHit*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSegFiller*) G__getstructoffset())->propogErrToFit(*(HSymMat4*) libp->para[0].ref, *(HSymMat4*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcHitSegFiller::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcHitSegFiller::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcHitSegFiller::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcHitSegFiller::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSegFiller*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcHitSegFiller::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcHitSegFiller::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcHitSegFiller::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_378_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcHitSegFiller::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_378_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcHitSegFiller* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcHitSegFiller(*(HMdcHitSegFiller*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcHitSegFiller));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcHitSegFiller G__THMdcHitSegFiller;
static int G__MdcTrackDDict_378_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcHitSegFiller*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcHitSegFiller*) (soff+(sizeof(HMdcHitSegFiller)*i)))->~G__THMdcHitSegFiller();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcHitSegFiller*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcHitSegFiller*) (soff))->~G__THMdcHitSegFiller();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_378_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcHitSegFiller* dest = (HMdcHitSegFiller*) G__getstructoffset();
   *dest = *(HMdcHitSegFiller*) libp->para[0].ref;
   const HMdcHitSegFiller& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcClusInf */
static int G__MdcTrackDDict_381_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusInf* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusInf[n];
     } else {
       p = new((void*) gvp) HMdcClusInf[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusInf;
     } else {
       p = new((void*) gvp) HMdcClusInf;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInf));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setIsFitted();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setIsNotFitted();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setFitStat((const Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setLevelClFinding((const Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setNModInCl((const Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setNModInFit((const Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setClusSize((const Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setNMergClust((const Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setNLayers((const Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setNLayersFitted((const Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setNDrTimes((const Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setNDrTimesFitted((const Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setClusIndex((const Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setClusFitIndex((const Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setSigma1((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setSigma2((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setAlpha((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setShape((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setdedx((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setSigmadedx((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setNWirededx((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setNWireCutdedx((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setXYHit((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->setXYClus((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcClusInf*) G__getstructoffset())->getdedx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcClusInf*) G__getstructoffset())->getSigmadedx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcClusInf*) G__getstructoffset())->getNWirededx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcClusInf*) G__getstructoffset())->getNWireCutdedx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HMdcClusInf*) G__getstructoffset())->getFitStat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HMdcClusInf*) G__getstructoffset())->getLevelClFinding());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HMdcClusInf*) G__getstructoffset())->getNModInCl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HMdcClusInf*) G__getstructoffset())->getNModInFit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcClusInf*) G__getstructoffset())->getClusSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcClusInf*) G__getstructoffset())->getNMergClust());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcClusInf*) G__getstructoffset())->getNLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcClusInf*) G__getstructoffset())->getNLayersFitted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcClusInf*) G__getstructoffset())->getNDrTimes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcClusInf*) G__getstructoffset())->getNDrTimesFitted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcClusInf*) G__getstructoffset())->getClusIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcClusInf*) G__getstructoffset())->getClusFitIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcClusInf*) G__getstructoffset())->getSigma1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcClusInf*) G__getstructoffset())->getSigma2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcClusInf*) G__getstructoffset())->getAlpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->getShape(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcClusInf*) G__getstructoffset())->getRatio());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcClusInf*) G__getstructoffset())->isClParEqual((HMdcClusInf*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcClusInf*) G__getstructoffset())->getXHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcClusInf*) G__getstructoffset())->getYHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcClusInf*) G__getstructoffset())->getXClus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcClusInf*) G__getstructoffset())->getYClus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClusInf*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClusInf::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusInf::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcClusInf::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcClusInf::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInf*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusInf::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusInf::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusInf::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_381_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusInf::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_381_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcClusInf* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcClusInf(*(HMdcClusInf*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInf));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcClusInf G__THMdcClusInf;
static int G__MdcTrackDDict_381_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcClusInf*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcClusInf*) (soff+(sizeof(HMdcClusInf)*i)))->~G__THMdcClusInf();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcClusInf*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcClusInf*) (soff))->~G__THMdcClusInf();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_381_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusInf* dest = (HMdcClusInf*) G__getstructoffset();
   *dest = *(HMdcClusInf*) libp->para[0].ref;
   const HMdcClusInf& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcClusFit */
static int G__MdcTrackDDict_748_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusFit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusFit[n];
     } else {
       p = new((void*) gvp) HMdcClusFit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusFit;
     } else {
       p = new((void*) gvp) HMdcClusFit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setAddress((Char_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (Char_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setSec((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setIOSeg((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setMod((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setFitAuthor((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setFitVersion((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setDistTimeVer((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setFitType((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setNParam((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setFunMin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setNumOfWires((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setNumOfLayers((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setX1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setY1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setZ1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setX2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setY2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setZ2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setNumIter((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setFirstWireFitInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setLastWireFitInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setClustCatIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setExitFlag((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setSigmaChi2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setFitStatus((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setTimeOff((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setErrors((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcClusFit*) G__getstructoffset())->getSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcClusFit*) G__getstructoffset())->getIOSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcClusFit*) G__getstructoffset())->getMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcClusFit*) G__getstructoffset())->getFitAuthor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcClusFit*) G__getstructoffset())->getFitVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcClusFit*) G__getstructoffset())->getDistTimeVer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcClusFit*) G__getstructoffset())->getFitType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcClusFit*) G__getstructoffset())->getNParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getFunMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getTimeOff((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getTimeOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getTimeOffsetMdc1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getTimeOffsetMdc2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getTimeOffsetMdc3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getTimeOffsetMdc4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClusFit*) G__getstructoffset())->getNumOfWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClusFit*) G__getstructoffset())->getTotNumOfWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcClusFit*) G__getstructoffset())->getNumOfLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getZ1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getZ2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getX1err());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getY1err());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getX2err());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getY2err());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClusFit*) G__getstructoffset())->getNumIter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusFit*) G__getstructoffset())->getIndf());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusFit*) G__getstructoffset())->getIndl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusFit*) G__getstructoffset())->getFirstWireFitInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusFit*) G__getstructoffset())->getLastWireFitInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusFit*) G__getstructoffset())->getClustCatIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcClusFit*) G__getstructoffset())->getExitFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getSigmaChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusFit*) G__getstructoffset())->getFitStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClusFit*) G__getstructoffset())->getIndexis(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClusFit*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFit*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusFit*) G__getstructoffset())->getNextIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      ((const HMdcClusFit*) G__getstructoffset())->calcRZtoLineXY(
*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((const HMdcClusFit*) G__getstructoffset())->calcRZtoLineXY(
*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((const HMdcClusFit*) G__getstructoffset())->calcRZtoLineXY(
*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((const HMdcClusFit*) G__getstructoffset())->getRZmin(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((const HMdcClusFit*) G__getstructoffset())->getRZmin(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const HMdcClusFit*) G__getstructoffset())->getRZmin(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->setFakeFlag();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->resetFakeFlag();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusFit*) G__getstructoffset())->isFake());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClusFit*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusFit*) G__getstructoffset())->isGeant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClusFit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusFit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcClusFit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcClusFit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusFit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusFit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusFit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_748_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusFit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_748_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcClusFit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcClusFit(*(HMdcClusFit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcClusFit G__THMdcClusFit;
static int G__MdcTrackDDict_748_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcClusFit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcClusFit*) (soff+(sizeof(HMdcClusFit)*i)))->~G__THMdcClusFit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcClusFit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcClusFit*) (soff))->~G__THMdcClusFit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_748_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusFit* dest = (HMdcClusFit*) G__getstructoffset();
   *dest = *(HMdcClusFit*) libp->para[0].ref;
   const HMdcClusFit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcWireData */
static int G__MdcTrackDDict_749_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcWireData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcWireData[n];
     } else {
       p = new((void*) gvp) HMdcWireData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcWireData;
     } else {
       p = new((void*) gvp) HMdcWireData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->setGradP((Double_t*) G__int(libp->para[0]), (TMatrixD*) G__int(libp->para[1])
, (TMatrixD*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((HMdcWireData*) G__getstructoffset())->setCell(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((HMdcWireData*) G__getstructoffset())->setCell((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HMdcWireData*) G__getstructoffset())->setCell((HMdcCal1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HMdcWireData*) G__getstructoffset())->setCell((HMdcCal1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->setCellsLists((HMdcList24GroupCells*) G__int(libp->para[0]), (HMdcList24GroupCells*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->setNegTdcTimeTo0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->setSignalTimeOffset((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWireData*) G__getstructoffset())->setWeightTo1or0((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->setWeightEq1();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->setWeightEq0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->setWeightAndWtNorm((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->setHitStatus((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->setErrTdcTime((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->setSequentialIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->setUnitWeight();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->setSizesCellsLayer((HMdcSizesCellsLayer*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcWireData::setDriftTimePar((HMdcDriftTimePar*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcWireData::getDriftTimePar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->excludeWire();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWireData*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWireData*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWireData*) G__getstructoffset())->getModIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWireData*) G__getstructoffset())->getLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWireData*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWireData*) G__getstructoffset())->getTimeIndx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcWireData*) G__getstructoffset())->getTdcTimeCal1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcWireData*) G__getstructoffset())->getSignalTimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcWireData*) G__getstructoffset())->getTdcTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcWireData*) G__getstructoffset())->getErrTdcTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcWireData*) G__getstructoffset())->getDrTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcWireData*) G__getstructoffset())->getDev());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcWireData*) G__getstructoffset())->getChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcWireData*) G__getstructoffset())->getDistance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWireData*) G__getstructoffset())->getDistanceSign());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcWireData*) G__getstructoffset())->getAlpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcWireData*) G__getstructoffset())->isInCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcWireData*) G__getstructoffset())->getWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcWireData*) G__getstructoffset())->getHitStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcWireData*) G__getstructoffset())->getOneDErrTdcTime2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcWireData*) G__getstructoffset())->getWtNorm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcWireData*) G__getstructoffset())->getDrTimeDer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWireData*) G__getstructoffset())->getSequentialIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWireData*) G__getstructoffset())->getGeantTrackNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWireData*) G__getstructoffset())->getIsWireUsed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcWireData*) G__getstructoffset())->getSCLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HMdcWireData*) G__getstructoffset())->getAnalytDeriv((Float_t*) G__int(libp->para[0]), (HMdcTrackParam*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HMdcWireData*) G__getstructoffset())->getAnalytDeriv((Float_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcWireData*) G__getstructoffset())->isWireFromSecondSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWireData*) G__getstructoffset())->getSequentialLayNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcWireData*) G__getstructoffset())->getLocation(*(HLocation*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->calcTdcErrors(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->calcTdcErrors();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcWireData*) G__getstructoffset())->isPassedFit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->calcDriftTime(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->calcDriftTimeAndErr(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->calcDriftTimeAndInCell(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->calcDriftTimeAndErrAndInCell(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->calcDriftTimeForDeriv(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcWireData*) G__getstructoffset())->calcDriftTimeForAlign(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->calcDistanceSign(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->recalcFunctional(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->calcFunctional(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->calcFunctionalForDer(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->calcDevAndFunct(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcWireData*) G__getstructoffset())->calcAnalytDeriv(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcWireData*) G__getstructoffset())->calcAnalytDeriv(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->fillLookupTableForDer(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWireData*) G__getstructoffset())->removeIfWeightLess((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcWireData*) G__getstructoffset())->unsetFittedHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcWireData*) G__getstructoffset())->fillWireFitCont((HMdcWireFit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcWireData*) G__getstructoffset())->fillWireFitSimCont((HMdcWireFit*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->removeThisWire();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWireData*) G__getstructoffset())->removeOneTimeIfItDoubleTime((HMdcWireData*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWireData*) G__getstructoffset())->removeIfOneDistOutCell((HMdcWireData*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->calcDriftTimeAndFunct(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->initDTdPar((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->calcDTdPar((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcWireData*) G__getstructoffset())->printIfDeleted();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->subtractWireOffset(*(HMdcTrackParam*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->setHitStatM1toP1();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->addToTOffsetErr(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcWireData*) G__getstructoffset())->printTime((Int_t) G__int(libp->para[0]), *(HMdcTrackParam*) libp->para[1].ref
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcWireData*) G__getstructoffset())->printTime((Int_t) G__int(libp->para[0]), *(HMdcTrackParam*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcWireData*) G__getstructoffset())->setTukeyWeight((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcWireData*) G__getstructoffset())->setTukeyWeight((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWireData*) G__getstructoffset())->isAddressEq((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWireData*) G__getstructoffset())->testWeight1or0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->calcLeftRight(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->reinitWtSt();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HMdcWireData*) G__getstructoffset())->getDirection();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HMdcWireData*) G__getstructoffset())->getPoint((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcWireData*) G__getstructoffset())->dDist(*(HMdcTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcWireData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWireData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcWireData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcWireData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWireData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcWireData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWireData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_749_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcWireData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_749_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcWireData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcWireData(*(HMdcWireData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcWireData G__THMdcWireData;
static int G__MdcTrackDDict_749_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcWireData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcWireData*) (soff+(sizeof(HMdcWireData)*i)))->~G__THMdcWireData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcWireData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcWireData*) (soff))->~G__THMdcWireData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_749_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcWireData* dest = (HMdcWireData*) G__getstructoffset();
   *dest = *(HMdcWireData*) libp->para[0].ref;
   const HMdcWireData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcWireFit */
static int G__MdcTrackDDict_750_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcWireFit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcWireFit[n];
     } else {
       p = new((void*) gvp) HMdcWireFit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcWireFit;
     } else {
       p = new((void*) gvp) HMdcWireFit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setAddress((Char_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (Char_t) G__int(libp->para[2]), (Short_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setSec((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setMod((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setLayer((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setCell((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setTimeNum((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setDev((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setWeight((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setIsUsedFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setDriftTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setFullTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setCal1Time((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setTdcTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setMinDist((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setAlpha((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setIsInCell((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setTdcTimeErr((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setToT((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->setCellPath((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcWireFit*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcWireFit*) G__getstructoffset())->getSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcWireFit*) G__getstructoffset())->getMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcWireFit*) G__getstructoffset())->getLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcWireFit*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcWireFit*) G__getstructoffset())->getTimeNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getDev());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcWireFit*) G__getstructoffset())->isWrUsedInFit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getDriftTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getFullTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getTimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getTdcTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getTdcTimeF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getSignalTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getCal1Time());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getMinDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcWireFit*) G__getstructoffset())->isUnderWire());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcWireFit*) G__getstructoffset())->isOverWire());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getAlpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcWireFit*) G__getstructoffset())->getIsInCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getTdcTimeErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getToT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFit*) G__getstructoffset())->getCellPath());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcWireFit*) G__getstructoffset())->isGeant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcWireFit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWireFit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcWireFit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcWireFit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWireFit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcWireFit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWireFit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_750_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcWireFit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_750_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcWireFit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcWireFit(*(HMdcWireFit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcWireFit G__THMdcWireFit;
static int G__MdcTrackDDict_750_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcWireFit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcWireFit*) (soff+(sizeof(HMdcWireFit)*i)))->~G__THMdcWireFit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcWireFit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcWireFit*) (soff))->~G__THMdcWireFit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_750_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcWireFit* dest = (HMdcWireFit*) G__getstructoffset();
   *dest = *(HMdcWireFit*) libp->para[0].ref;
   const HMdcWireFit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackFitInOut */
static int G__MdcTrackDDict_751_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFitInOut* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackFitInOut[n];
     } else {
       p = new((void*) gvp) HMdcTrackFitInOut[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackFitInOut;
     } else {
       p = new((void*) gvp) HMdcTrackFitInOut;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFitInOut*) G__getstructoffset())->init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFitInOut*) G__getstructoffset())->reinit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setDefaultFitParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setNoTof();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setModuleTof();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setSegmetTof();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setSectorTof();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackFitInOut*) G__getstructoffset())->useWireOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFitInOut*) G__getstructoffset())->isGeant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setUseTukeyFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setTukeyConstants((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setTukeyScale((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setTukeyWtMinSigma((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setMaxNumFilterIter((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setMinTOffsetIter((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setMinWeight((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setMaxMaxChi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setFunCut1((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setStepD1((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setFunCut2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setStepD2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setStepD3((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setTargetScanFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setPrintFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setPrintFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setNEventsPrint((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcTrackFitInOut*) G__getstructoffset())->setChi2PerNdfCut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcTrackFitInOut*) G__getstructoffset())->setChi2PerNdfCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcTrackFitInOut*) G__getstructoffset())->setTotalChi2Cut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcTrackFitInOut*) G__getstructoffset())->setTotalChi2Cut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setSignalSpeed((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->setWeightCut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->excludeLayer((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->excludeModule((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackFitInOut*) G__getstructoffset())->getNewWireFitSlot((Int_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackFitInOut*) G__getstructoffset())->getNewClusFitSlot((Int_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcTrackFitInOut*) G__getstructoffset())->getTukeyConstants(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackFitInOut*) G__getstructoffset())->getSCellsModArr((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackFitInOut*) G__getstructoffset())->getMdcSizesCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackFitInOut*) G__getstructoffset())->getWireFitCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackFitInOut*) G__getstructoffset())->getMdcCal1Cat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackFitInOut*) G__getstructoffset())->getGeantKineCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackFitInOut*) G__getstructoffset())->getGeantMdcCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackFitInOut*) G__getstructoffset())->getDriftTimePar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getWeightCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackFitInOut*) G__getstructoffset())->getTofFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getSignalSpeed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackFitInOut*) G__getstructoffset())->getDrTimeCalcVer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrackFitInOut*) G__getstructoffset())->getTukeyFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrackFitInOut*) G__getstructoffset())->useTukey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getTukeyConstWs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getTukeyConst2s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getTukeyConst4s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitInOut*) G__getstructoffset())->getTukeyScale());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getTukeyWtMinSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getTukeyWtMinSigma2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackFitInOut*) G__getstructoffset())->maxNumFilterIter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getMinTOffsetIter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getMinWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getMaxChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getFunCut1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getStepD1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getFunCut2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getStepD2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getStepD3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getStepDer((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrackFitInOut*) G__getstructoffset())->getPrintFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackFitInOut*) G__getstructoffset())->getPrintStartEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackFitInOut*) G__getstructoffset())->getNEventPrint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrackFitInOut*) G__getstructoffset())->getDoTargScanFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcTrackFitInOut*) G__getstructoffset())->getCalcInitValueFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getMinTimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getMaxTimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackFitInOut*) G__getstructoffset())->getMinCellsNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getTotalChi2Cut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitInOut*) G__getstructoffset())->getChi2PerNdfCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrackFitInOut*) G__getstructoffset())->getChi2CutFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrackFitInOut*) G__getstructoffset())->isLayerExcluded((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackFitInOut*) G__getstructoffset())->getClusFitCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackFitInOut::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitInOut::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackFitInOut::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackFitInOut::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitInOut*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitInOut::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackFitInOut::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitInOut::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_751_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackFitInOut::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_751_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackFitInOut* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackFitInOut(*(HMdcTrackFitInOut*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackFitInOut G__THMdcTrackFitInOut;
static int G__MdcTrackDDict_751_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackFitInOut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackFitInOut*) (soff+(sizeof(HMdcTrackFitInOut)*i)))->~G__THMdcTrackFitInOut();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackFitInOut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackFitInOut*) (soff))->~G__THMdcTrackFitInOut();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_751_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFitInOut* dest = (HMdcTrackFitInOut*) G__getstructoffset();
   *dest = *(HMdcTrackFitInOut*) libp->para[0].ref;
   const HMdcTrackFitInOut& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcDriftTimePar */
static int G__MdcTrackDDict_754_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDriftTimePar::getExObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDriftTimePar::getObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDriftTimePar::deleteCont();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcDriftTimePar*) G__getstructoffset())->getBinDist((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDriftTimePar*) G__getstructoffset())->initContainer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMdcDriftTimePar*) G__getstructoffset())->at((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDriftTimePar*) G__getstructoffset())->calcTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDriftTimePar*) G__getstructoffset())->calcTimeErr((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimePar*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcDriftTimePar*) G__getstructoffset())->getBinTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDriftTimePar*) G__getstructoffset())->calcDistance((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimePar*) G__getstructoffset())->setScalerTime1Err((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDriftTimePar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimePar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcDriftTimePar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDriftTimePar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimePar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimePar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDriftTimePar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimePar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_754_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDriftTimePar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcDriftTimeParBin */
static int G__MdcTrackDDict_755_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDriftTimeParBin* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDriftTimeParBin[n];
     } else {
       p = new((void*) gvp) HMdcDriftTimeParBin[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDriftTimeParBin;
     } else {
       p = new((void*) gvp) HMdcDriftTimeParBin;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParBin*) G__getstructoffset())->setC0((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParBin*) G__getstructoffset())->setC1((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParBin*) G__getstructoffset())->setC2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParBin*) G__getstructoffset())->setC3((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParBin*) G__getstructoffset())->setC0Err((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParBin*) G__getstructoffset())->setC1Err((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParBin*) G__getstructoffset())->setC2Err((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParBin*) G__getstructoffset())->setC3Err((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDriftTimeParBin*) G__getstructoffset())->calcTime((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDriftTimeParBin*) G__getstructoffset())->calcTimeErr((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParBin*) G__getstructoffset())->coeffForDer((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDriftTimeParBin*) G__getstructoffset())->coeffDAlphaDPar((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDriftTimeParBin*) G__getstructoffset())->coeffDDistDPar((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcDriftTimeParBin*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcDriftTimeParBin*) G__getstructoffset())->printTable();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParBin*) G__getstructoffset())->setD0((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParBin*) G__getstructoffset())->setD1((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParBin*) G__getstructoffset())->setD2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParBin*) G__getstructoffset())->setD3((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDriftTimeParBin*) G__getstructoffset())->calcDistance((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDriftTimeParBin::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimeParBin::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcDriftTimeParBin::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDriftTimeParBin::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParBin*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimeParBin::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDriftTimeParBin::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimeParBin::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_755_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDriftTimeParBin::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_755_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcDriftTimeParBin* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcDriftTimeParBin(*(HMdcDriftTimeParBin*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcDriftTimeParBin G__THMdcDriftTimeParBin;
static int G__MdcTrackDDict_755_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcDriftTimeParBin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcDriftTimeParBin*) (soff+(sizeof(HMdcDriftTimeParBin)*i)))->~G__THMdcDriftTimeParBin();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcDriftTimeParBin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcDriftTimeParBin*) (soff))->~G__THMdcDriftTimeParBin();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_755_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDriftTimeParBin* dest = (HMdcDriftTimeParBin*) G__getstructoffset();
   *dest = *(HMdcDriftTimeParBin*) libp->para[0].ref;
   const HMdcDriftTimeParBin& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcWiresArr */
static int G__MdcTrackDDict_756_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcWiresArr* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcWiresArr[n];
     } else {
       p = new((void*) gvp) HMdcWiresArr[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcWiresArr;
     } else {
       p = new((void*) gvp) HMdcWiresArr;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWiresArr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->setNumDriftTimes((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcWiresArr*) G__getstructoffset())->setPrintFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcWiresArr*) G__getstructoffset())->setPrintFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->setXYZClust((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWiresArr*) G__getstructoffset())->getWiresArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWiresArr*) G__getstructoffset())->getWireData((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcWireData& obj = ((HMdcWiresArr*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWiresArr*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWiresArr*) G__getstructoffset())->getSegment());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWiresArr*) G__getstructoffset())->getNDriftTimes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWiresArr*) G__getstructoffset())->getOutputNLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWiresArr*) G__getstructoffset())->getNDrTmFirstSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWiresArr*) G__getstructoffset())->getFirstTimeInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWiresArr*) G__getstructoffset())->getLastTimeInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcWiresArr*) G__getstructoffset())->getNumOfGoodWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcWiresArr*) G__getstructoffset())->getNModulesInFit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcWiresArr*) G__getstructoffset())->getNWiresInFit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcWiresArr*) G__getstructoffset())->getNLayOrientOutput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcWiresArr*) G__getstructoffset())->getNLayOrientInput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWiresArr*) G__getstructoffset())->getFirstWire());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWiresArr*) G__getstructoffset())->getLastWire());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWiresArr*) G__getstructoffset())->getClust1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWiresArr*) G__getstructoffset())->getClust2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWiresArr*) G__getstructoffset())->getClust3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWiresArr*) G__getstructoffset())->getClust4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWiresArr*) G__getstructoffset())->getClust5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWiresArr*) G__getstructoffset())->getClust6());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWiresArr*) G__getstructoffset())->getClust7());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWiresArr*) G__getstructoffset())->getClust8());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcList24GroupCells& obj = ((HMdcWiresArr*) G__getstructoffset())->getOutputListCells();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcList24GroupCells& obj = ((HMdcWiresArr*) G__getstructoffset())->getOutputListCells2();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcList24GroupCells& obj = ((HMdcWiresArr*) G__getstructoffset())->getOutputListCells3();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcList24GroupCells& obj = ((HMdcWiresArr*) G__getstructoffset())->getOutputListCells4();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcList24GroupCells& obj = ((HMdcWiresArr*) G__getstructoffset())->getInputListCells();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcList24GroupCells& obj = ((HMdcWiresArr*) G__getstructoffset())->getInputListCells2();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcList24GroupCells& obj = ((HMdcWiresArr*) G__getstructoffset())->getInputListCells3();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcList24GroupCells& obj = ((HMdcWiresArr*) G__getstructoffset())->getInputListCells4();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->isTwoSectorsData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWiresArr*) G__getstructoffset())->getSector2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWiresArr*) G__getstructoffset())->getSector3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWiresArr*) G__getstructoffset())->getSector4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->fillListHits((HMdcClus*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->fillListHits(
(HMdcClus*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])
, (HMdcClus*) G__int(libp->para[2]), (HMdcClus*) G__int(libp->para[3])
, (HMdcClus*) G__int(libp->para[4]), (HMdcClus*) G__int(libp->para[5])
, (HMdcClus*) G__int(libp->para[6]), (HMdcClus*) G__int(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->fillListHits((HMdcEvntListCells*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])
, (HMdcClus*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->fillListHits((HMdcEvntListCells*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->fillLookupTableForDer(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->setTrackFitInOut((HMdcTrackFitInOut*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->setNegTdcTimeTo0();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcWiresArr*) G__getstructoffset())->testFitResult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->subtractWireOffset(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->setHitStatM1toP1();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HMdcWiresArr*) G__getstructoffset())->switchOff((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HMdcWiresArr*) G__getstructoffset())->switchOff((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcWiresArr*) G__getstructoffset())->switchOff((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcWiresArr*) G__getstructoffset())->unsetHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((HMdcWiresArr*) G__getstructoffset())->getNCellsInInput((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HMdcWiresArr*) G__getstructoffset())->getNCellsInInput((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((HMdcWiresArr*) G__getstructoffset())->getNCellsInInput());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((HMdcWiresArr*) G__getstructoffset())->getNCellsInOutput((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HMdcWiresArr*) G__getstructoffset())->getNCellsInOutput((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((HMdcWiresArr*) G__getstructoffset())->getNCellsInOutput());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->fillClusFitAndWireFit((HMdcClusFit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->fillClusFitSim((HMdcClusFit*) G__int(libp->para[0]), *(HMdcTrackParam*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->calcNGoodWiresAndChi2(*(HMdcTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcWiresArr*) G__getstructoffset())->calcTdcErrorsAndFunct(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcWiresArr*) G__getstructoffset())->calcTdcErrorsAndFunct(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcWiresArr*) G__getstructoffset())->calcTdcErrorsTOff0AndFunct(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcWiresArr*) G__getstructoffset())->calcTdcErrorsTOff0AndFunct(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcWiresArr*) G__getstructoffset())->recalcFunct(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcWiresArr*) G__getstructoffset())->recalcFunct(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->setRegionOfWires((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->setRegionOfWires((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((HMdcWiresArr*) G__getstructoffset())->valueOfFunctional(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((HMdcWiresArr*) G__getstructoffset())->valueOfFunctional(*(HMdcTrackParam*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((HMdcWiresArr*) G__getstructoffset())->valueOfFunctAndErr(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((HMdcWiresArr*) G__getstructoffset())->valueOfFunctAndErr(*(HMdcTrackParam*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((HMdcWiresArr*) G__getstructoffset())->functForDeriv(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((HMdcWiresArr*) G__getstructoffset())->functForDeriv(*(HMdcTrackParam*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->calcTimeOffsetsErr(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcWiresArr*) G__getstructoffset())->getSumOfWeights());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->printTimes((Int_t) G__int(libp->para[0]), *(HMdcTrackParam*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcWiresArr*) G__getstructoffset())->setWeightsTo1or0(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcWiresArr*) G__getstructoffset())->setWeightsTo1or0(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->filterOfHits(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->filterOfHits(*(HMdcTrackParam*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->filterOfHitsV2(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->filterOfHitsV2(*(HMdcTrackParam*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrixD& obj = ((HMdcWiresArr*) G__getstructoffset())->getGrad2Matr();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrixD& obj = ((HMdcWiresArr*) G__getstructoffset())->getMatrH();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->setSizeGrad2Matr(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->calcSecondDeriv(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->calculateErrors(*(HMdcTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->calcDerivatives(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->calcAnalyticDerivatives1(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->calcAnalyticDerivatives2(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->calcErrorsAnalyt(*(HMdcTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcWiresArr*) G__getstructoffset())->calcAGradAnalyt(*(HMdcTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HMdcWiresArr*) G__getstructoffset())->getGrad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcWiresArr*) G__getstructoffset())->getAGrad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->setUnitWeights();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->filterOfHitsConstSig(*(HMdcTrackParam*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcWiresArr*) G__getstructoffset())->getXClst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcWiresArr*) G__getstructoffset())->getYClst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcWiresArr*) G__getstructoffset())->getZClst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->testTukeyWeights(*(HMdcTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->setInitWeghts(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->calcDistanceSign(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->calcFunctional(*(HMdcTrackParam*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcWiresArr*) G__getstructoffset())->calcInitialValue(*(HMdcTrackParam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->getTrack(*(HMdcTrackParam*) libp->para[0].ref, (HMdcWireData*) G__int(libp->para[1])
, (HMdcWireData*) G__int(libp->para[2]), (HMdcWireData*) G__int(libp->para[3])
, (HMdcWireData*) G__int(libp->para[4]), *(HMdcTrackParam*) libp->para[5].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->calcLeftRight(*(HMdcTrackParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->calcTrack(
*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref, *(HGeomVector*) libp->para[3].ref
, *(HGeomVector*) libp->para[4].ref, *(HGeomVector*) libp->para[5].ref
, *(HGeomVector*) libp->para[6].ref, *(HGeomVector*) libp->para[7].ref
, *(HMdcTrackParam*) libp->para[8].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->countFittedWires((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcWiresArr*) G__getstructoffset())->calcTrackChi2((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcWiresArr*) G__getstructoffset())->calcChi2(*(HMdcList12GroupCells*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->reinitWtSt();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcWiresArr::wireOrientInd((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcWiresArr::getComb4layers(
(UInt_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, (Int_t) G__int(libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Int_t*) G__Intref(&libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcWiresArr*) G__getstructoffset())->testRestForTrack((Int_t) G__int(libp->para[0]), *(HMdcLineParam*) libp->para[1].ref
, *(HMdcList12GroupCells*) libp->para[2].ref, (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcWiresArr::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWiresArr::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcWiresArr::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcWiresArr::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWiresArr*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWiresArr::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcWiresArr::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWiresArr::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_756_0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcWiresArr::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_756_0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcWiresArr* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcWiresArr(*(HMdcWiresArr*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWiresArr));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcWiresArr G__THMdcWiresArr;
static int G__MdcTrackDDict_756_0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcWiresArr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcWiresArr*) (soff+(sizeof(HMdcWiresArr)*i)))->~G__THMdcWiresArr();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcWiresArr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcWiresArr*) (soff))->~G__THMdcWiresArr();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_756_0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcWiresArr* dest = (HMdcWiresArr*) G__getstructoffset();
   *dest = *(HMdcWiresArr*) libp->para[0].ref;
   const HMdcWiresArr& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcDriftTimeParAngle */
static int G__MdcTrackDDict_765_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDriftTimeParAngle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDriftTimeParAngle[n];
     } else {
       p = new((void*) gvp) HMdcDriftTimeParAngle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDriftTimeParAngle;
     } else {
       p = new((void*) gvp) HMdcDriftTimeParAngle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParAngle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_765_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcDriftTimeParAngle*) G__getstructoffset())->at((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_765_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDriftTimeParAngle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_765_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimeParAngle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_765_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcDriftTimeParAngle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_765_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDriftTimeParAngle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_765_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParAngle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_765_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimeParAngle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_765_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDriftTimeParAngle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_765_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimeParAngle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_765_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDriftTimeParAngle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_765_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcDriftTimeParAngle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcDriftTimeParAngle(*(HMdcDriftTimeParAngle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParAngle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcDriftTimeParAngle G__THMdcDriftTimeParAngle;
static int G__MdcTrackDDict_765_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcDriftTimeParAngle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcDriftTimeParAngle*) (soff+(sizeof(HMdcDriftTimeParAngle)*i)))->~G__THMdcDriftTimeParAngle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcDriftTimeParAngle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcDriftTimeParAngle*) (soff))->~G__THMdcDriftTimeParAngle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_765_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDriftTimeParAngle* dest = (HMdcDriftTimeParAngle*) G__getstructoffset();
   *dest = *(HMdcDriftTimeParAngle*) libp->para[0].ref;
   const HMdcDriftTimeParAngle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcDriftTimeParMod */
static int G__MdcTrackDDict_766_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDriftTimeParMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDriftTimeParMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcDriftTimeParMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDriftTimeParMod((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcDriftTimeParMod((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcDriftTimeParMod[n];
       } else {
         p = new((void*) gvp) HMdcDriftTimeParMod[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcDriftTimeParMod;
       } else {
         p = new((void*) gvp) HMdcDriftTimeParMod;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcDriftTimeParMod*) G__getstructoffset())->getNAngleBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcDriftTimeParMod*) G__getstructoffset())->getAngleBinSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcDriftTimeParMod*) G__getstructoffset())->getNDistBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcDriftTimeParMod*) G__getstructoffset())->getDistBinSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcDriftTimeParMod*) G__getstructoffset())->getBinDist((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcDriftTimeParMod*) G__getstructoffset())->calcAngleBinInd((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcDriftTimeParMod*) G__getstructoffset())->calcDistBinInd((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDriftTimeParMod*) G__getstructoffset())->calcTime((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDriftTimeParMod*) G__getstructoffset())->calcTimeErr((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcDriftTimeParMod*) G__getstructoffset())->testSizes((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParMod*) G__getstructoffset())->setDistBinSize((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcDriftTimeParMod*) G__getstructoffset())->at((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcDriftTimeParMod*) G__getstructoffset())->getAngBins((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDriftTimeParMod*) G__getstructoffset())->initContainer(*(HMdcCal2ParModSim*) libp->para[0].ref, *(HMdcCal2ParMod*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParMod*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcDriftTimeParMod*) G__getstructoffset())->getNTimeBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcDriftTimeParMod*) G__getstructoffset())->getTimeBinSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcDriftTimeParMod*) G__getstructoffset())->getBinTime((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcDriftTimeParMod*) G__getstructoffset())->calcTimeBinInd((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDriftTimeParMod*) G__getstructoffset())->calcDistance((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParMod*) G__getstructoffset())->setTimeBinSize((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDriftTimeParMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimeParMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcDriftTimeParMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDriftTimeParMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDriftTimeParMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimeParMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDriftTimeParMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDriftTimeParMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_766_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDriftTimeParMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_766_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcDriftTimeParMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcDriftTimeParMod(*(HMdcDriftTimeParMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcDriftTimeParMod G__THMdcDriftTimeParMod;
static int G__MdcTrackDDict_766_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcDriftTimeParMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcDriftTimeParMod*) (soff+(sizeof(HMdcDriftTimeParMod)*i)))->~G__THMdcDriftTimeParMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcDriftTimeParMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcDriftTimeParMod*) (soff))->~G__THMdcDriftTimeParMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_766_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDriftTimeParMod* dest = (HMdcDriftTimeParMod*) G__getstructoffset();
   *dest = *(HMdcDriftTimeParMod*) libp->para[0].ref;
   const HMdcDriftTimeParMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackFitPar */
static int G__MdcTrackDDict_767_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFitPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackFitPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcTrackFitPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackFitPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTrackFitPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackFitPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTrackFitPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTrackFitPar[n];
       } else {
         p = new((void*) gvp) HMdcTrackFitPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTrackFitPar;
       } else {
         p = new((void*) gvp) HMdcTrackFitPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getCutWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTrackFitPar*) G__getstructoffset())->getTofFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFitPar*) G__getstructoffset())->getDoTargScan());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getMinTimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getMaxTimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTrackFitPar*) G__getstructoffset())->getMinCellsNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFitPar*) G__getstructoffset())->getChi2CutFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getTotalChi2Cut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getChi2PerNdfCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFitPar*) G__getstructoffset())->getUseTukeyFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getCnWs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getCn2s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getCn4s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getMinSig2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTrackFitPar*) G__getstructoffset())->getMaxNFilterIter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getMinWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getMaxChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getMinTOffsetIter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getFunCt1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getStepD1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getFunCt2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getStepD2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitPar*) G__getstructoffset())->getStepD3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setCutWeight((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setTofFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setDoTargScan((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setMinTimeOffset((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setMaxTimeOffset((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setMinCellsNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setChi2CutFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setTotalChi2Cut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setChi2PerNdfCut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setUseTukeyFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setCnWs((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setCn2s((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setCn4s((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setMinSig2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setMaxNFilterIter((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setMinWeight((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setMaxChi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setMinTOffsetIter((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setFunCt1((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setStepD1((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setFunCt2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setStepD2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->setStepD3((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackFitPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackFitPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackFitPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackFitPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_767_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackFitPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_767_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackFitPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackFitPar(*(HMdcTrackFitPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackFitPar G__THMdcTrackFitPar;
static int G__MdcTrackDDict_767_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackFitPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackFitPar*) (soff+(sizeof(HMdcTrackFitPar)*i)))->~G__THMdcTrackFitPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackFitPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackFitPar*) (soff))->~G__THMdcTrackFitPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_767_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFitPar* dest = (HMdcTrackFitPar*) G__getstructoffset();
   *dest = *(HMdcTrackFitPar*) libp->para[0].ref;
   const HMdcTrackFitPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackFitter */
static int G__MdcTrackDDict_769_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFitter* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcTrackFitter((HMdcTrackFitInOut*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HMdcTrackFitter((HMdcTrackFitInOut*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((HMdcTrackFitter*) G__getstructoffset())->minimize((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((HMdcTrackFitter*) G__getstructoffset())->minimize());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->fillListHits((HMdcClus*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->fillListHits((HMdcClus*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])
, (HMdcClus*) G__int(libp->para[2]), (HMdcClus*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->fillListHits((HMdcClus*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])
, (HMdcClus*) G__int(libp->para[2]), (HMdcClus*) G__int(libp->para[3])
, (HMdcClus*) G__int(libp->para[4]), (HMdcClus*) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->fillListHits(
(HMdcClus*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])
, (HMdcClus*) G__int(libp->para[2]), (HMdcClus*) G__int(libp->para[3])
, (HMdcClus*) G__int(libp->para[4]), (HMdcClus*) G__int(libp->para[5])
, (HMdcClus*) G__int(libp->para[6]), (HMdcClus*) G__int(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->fillListHits((HMdcEvntListCells*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])
, (HMdcClus*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->fillListHits((HMdcEvntListCells*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitter*) G__getstructoffset())->setPrintFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitter*) G__getstructoffset())->setModuleTof();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitter*) G__getstructoffset())->setSegmentTof();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitter*) G__getstructoffset())->setSectorTof();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->setClustAndFill((HMdcClus*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->setClustAndFill((HMdcClus*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->setClustAndFill(
(HMdcClus*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])
, (HMdcClus*) G__int(libp->para[2]), (HMdcClus*) G__int(libp->para[3])
, (HMdcClus*) G__int(libp->para[4]), (HMdcClus*) G__int(libp->para[5])
, (HMdcClus*) G__int(libp->para[6]), (HMdcClus*) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->setClustAndFill(
(HMdcClus*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])
, (HMdcClus*) G__int(libp->para[2]), (HMdcClus*) G__int(libp->para[3])
, (HMdcClus*) G__int(libp->para[4]), (HMdcClus*) G__int(libp->para[5])
, (HMdcClus*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->setClustAndFill((HMdcClus*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])
, (HMdcClus*) G__int(libp->para[2]), (HMdcClus*) G__int(libp->para[3])
, (HMdcClus*) G__int(libp->para[4]), (HMdcClus*) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->setClustAndFill((HMdcClus*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])
, (HMdcClus*) G__int(libp->para[2]), (HMdcClus*) G__int(libp->para[3])
, (HMdcClus*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->setClustAndFill((HMdcClus*) G__int(libp->para[0]), (HMdcClus*) G__int(libp->para[1])
, (HMdcClus*) G__int(libp->para[2]), (HMdcClus*) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->setClustAndFill(
(HMdcEvntListCells*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitter*) G__getstructoffset())->setFitStatus((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackFitter*) G__getstructoffset())->getNumOfParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitter*) G__getstructoffset())->getFunMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitter*) G__getstructoffset())->getChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackFitter*) G__getstructoffset())->getIterationNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcTrackFitter*) G__getstructoffset())->getExitFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrackFitter*) G__getstructoffset())->getFitStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackFitter*) G__getstructoffset())->getFinalParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackFitter*) G__getstructoffset())->getInitParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackFitter*) G__getstructoffset())->getWiresList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcWiresArr& obj = ((HMdcTrackFitter*) G__getstructoffset())->getWiresArr();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcWireData& obj = ((HMdcTrackFitter*) G__getstructoffset())->getWire((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackFitter*) G__getstructoffset())->getSegIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitter*) G__getstructoffset())->setSegIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackFitter*) G__getstructoffset())->getIndClusFit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackFitter*) G__getstructoffset())->getFunctional());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitter*) G__getstructoffset())->fillOutput();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->fillClusFitCont());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->fitCluster((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HMdcTrackFitter*) G__getstructoffset())->fitCluster());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcTrackFitter*) G__getstructoffset())->refitCluster((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcTrackFitter*) G__getstructoffset())->refitCluster();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcTrackFitter*) G__getstructoffset())->setRegionOfWires((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcTrackFitter*) G__getstructoffset())->setRegionOfWires();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HMdcTrackFitter*) G__getstructoffset())->switchOffWires((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HMdcTrackFitter*) G__getstructoffset())->switchOffWires((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcTrackFitter*) G__getstructoffset())->switchOffWires((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackFitter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackFitter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackFitter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackFitter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_769_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackFitter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_769_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackFitter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackFitter(*(HMdcTrackFitter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackFitter G__THMdcTrackFitter;
static int G__MdcTrackDDict_769_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackFitter*) (soff+(sizeof(HMdcTrackFitter)*i)))->~G__THMdcTrackFitter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackFitter*) (soff))->~G__THMdcTrackFitter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_769_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFitter* dest = (HMdcTrackFitter*) G__getstructoffset();
   *dest = *(HMdcTrackFitter*) libp->para[0].ref;
   const HMdcTrackFitter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackFitterA */
static int G__MdcTrackDDict_770_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFitterA* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcTrackFitterA((HMdcTrackFitInOut*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HMdcTrackFitterA((HMdcTrackFitInOut*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitterA*) G__getstructoffset())->setDefaultParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitterA*) G__getstructoffset())->setInitStepFit((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitterA*) G__getstructoffset())->setLimIter1forFilter((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitterA*) G__getstructoffset())->setLimFunct1to2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitterA*) G__getstructoffset())->setLimDeltaF1to2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitterA*) G__getstructoffset())->setLimGrad1to2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitterA*) G__getstructoffset())->setStepCh((UInt_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitterA*) G__getstructoffset())->setDFunctMax((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitterA*) G__getstructoffset())->setDFunctMin((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitterA*) G__getstructoffset())->setLimGrad2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitterA*) G__getstructoffset())->setLimStep2((UInt_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitterA*) G__getstructoffset())->setLimIter2((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackFitterA*) G__getstructoffset())->getFunctional());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackFitterA::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitterA::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackFitterA::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackFitterA::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitterA*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitterA::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackFitterA::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitterA::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_770_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackFitterA::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_770_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackFitterA* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackFitterA(*(HMdcTrackFitterA*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackFitterA G__THMdcTrackFitterA;
static int G__MdcTrackDDict_770_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackFitterA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackFitterA*) (soff+(sizeof(HMdcTrackFitterA)*i)))->~G__THMdcTrackFitterA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackFitterA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackFitterA*) (soff))->~G__THMdcTrackFitterA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_770_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFitterA* dest = (HMdcTrackFitterA*) G__getstructoffset();
   *dest = *(HMdcTrackFitterA*) libp->para[0].ref;
   const HMdcTrackFitterA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackInfSim */
static int G__MdcTrackDDict_773_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackInfSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackInfSim[n];
     } else {
       p = new((void*) gvp) HMdcTrackInfSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackInfSim;
     } else {
       p = new((void*) gvp) HMdcTrackInfSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackInfSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackInfSim*) G__getstructoffset())->fillClusTrackInf((HMdcClusSim*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackInfSim*) G__getstructoffset())->addClusModTrackInf((HMdcClusSim*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackInfSim*) G__getstructoffset())->fillClusModTrackInf((HMdcClusSim*) G__int(libp->para[0]), (HMdcList12GroupCells*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackInfSim*) G__getstructoffset())->fillSegTrackInf((HMdcSegSim*) G__int(libp->para[0]), (HMdcList24GroupCells*) G__int(libp->para[1])
, (HMdcSegSim*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackInfSim*) G__getstructoffset())->fillHitTrackInf((HMdcHitSim*) G__int(libp->para[0]), (HMdcList24GroupCells*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackInfSim*) G__getstructoffset())->collectTracksInf((UChar_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])
, (HMdcList12GroupCells*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackInfSim*) G__getstructoffset())->testIOMatching((Int_t) G__int(libp->para[0]), (HMdcClusSim*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (HMdcClusSim*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackInfSim*) G__getstructoffset())->testIOMatching((Int_t) G__int(libp->para[0]), (HMdcSegSim*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (HMdcSegSim*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackInfSim*) G__getstructoffset())->getNumTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackInfSim*) G__getstructoffset())->getTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcTrackInfSim*) G__getstructoffset())->getNumWires((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackInfSim*) G__getstructoffset())->isGeantBugEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackInfSim*) G__getstructoffset())->isGeantBugSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackInfSim*) G__getstructoffset())->setWiresArr((HMdcWiresArr*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 98, (long) ((const HMdcTrackInfSim*) G__getstructoffset())->getNumLayers((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 98, (long) ((const HMdcTrackInfSim*) G__getstructoffset())->getNumLayers((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackInfSim*) G__getstructoffset())->getListCells((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackInfSim*) G__getstructoffset())->getMdcGeantSeg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackInfSim*) G__getstructoffset())->getMdcGeantTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackInfSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackInfSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackInfSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackInfSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackInfSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackInfSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackInfSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackInfSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_773_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackInfSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_773_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackInfSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackInfSim(*(HMdcTrackInfSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackInfSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackInfSim G__THMdcTrackInfSim;
static int G__MdcTrackDDict_773_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackInfSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackInfSim*) (soff+(sizeof(HMdcTrackInfSim)*i)))->~G__THMdcTrackInfSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackInfSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackInfSim*) (soff))->~G__THMdcTrackInfSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_773_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackInfSim* dest = (HMdcTrackInfSim*) G__getstructoffset();
   *dest = *(HMdcTrackInfSim*) libp->para[0].ref;
   const HMdcTrackInfSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcFittersArray */
static int G__MdcTrackDDict_774_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcFittersArray* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcFittersArray[n];
     } else {
       p = new((void*) gvp) HMdcFittersArray[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcFittersArray;
     } else {
       p = new((void*) gvp) HMdcFittersArray;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcFittersArray));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcFittersArray*) G__getstructoffset())->init((Int_t) G__int(libp->para[0]), (HMdcTrackFitInOut*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcFittersArray*) G__getstructoffset())->getNewFitter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcFittersArray*) G__getstructoffset())->getFitter((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcFittersArray*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcFittersArray*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcFittersArray*) G__getstructoffset())->getNumObjs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcFittersArray::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcFittersArray::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcFittersArray::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcFittersArray::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcFittersArray*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcFittersArray::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcFittersArray::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcFittersArray::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_774_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcFittersArray::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_774_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcFittersArray* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcFittersArray(*(HMdcFittersArray*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcFittersArray));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcFittersArray G__THMdcFittersArray;
static int G__MdcTrackDDict_774_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcFittersArray*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcFittersArray*) (soff+(sizeof(HMdcFittersArray)*i)))->~G__THMdcFittersArray();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcFittersArray*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcFittersArray*) (soff))->~G__THMdcFittersArray();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_774_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcFittersArray* dest = (HMdcFittersArray*) G__getstructoffset();
   *dest = *(HMdcFittersArray*) libp->para[0].ref;
   const HMdcFittersArray& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcEffMenu */
static int G__MdcTrackDDict_819_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcEffMenu::makeMenu((HMdcEfficiency*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcEffMenu::deleteMenu();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->closeDial();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->setSecMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->setLayer((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->setListPads();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->setListLayer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->drawPlot((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->setPlotType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->drawHist((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->drawXYlayer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->drawTimes();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->drawSummary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->drawHistMb();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->setGroup((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->rebinTimes((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->rebinXY((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->printClusters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcEffMenu*) G__getstructoffset())->doDraw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcEffMenu*) G__getstructoffset())->doDraw();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcEffMenu*) G__getstructoffset())->doPlots((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcEffMenu*) G__getstructoffset())->doPlots();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcEffMenu*) G__getstructoffset())->doEventPlots((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcEffMenu*) G__getstructoffset())->doEventPlots();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->loopEvents((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->calcEff();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->saveHist();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->clustSel();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->stpLoop();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcEffMenu::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEffMenu::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcEffMenu::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcEffMenu::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcEffMenu*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEffMenu::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEffMenu::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcEffMenu::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_819_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcEffMenu::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_819_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcEffMenu* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcEffMenu(*(HMdcEffMenu*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMenu));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_819_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcEffMenu* dest = (HMdcEffMenu*) G__getstructoffset();
   *dest = *(HMdcEffMenu*) libp->para[0].ref;
   const HMdcEffMenu& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTargetMon */
static int G__MdcTrackDDict_822_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTargetMon* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTargetMon((Bool_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTargetMon((Bool_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTargetMon((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTargetMon((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTargetMon[n];
       } else {
         p = new((void*) gvp) HMdcTargetMon[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTargetMon;
       } else {
         p = new((void*) gvp) HMdcTargetMon;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTargetMon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTargetMon* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTargetMon(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcTargetMon(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTargetMon(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcTargetMon(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTargetMon((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTargetMon((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTargetMon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->drawCanvases();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->drawCanvasesRunsSum();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcTargetMon*) G__getstructoffset())->setMode((Bool_t) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcTargetMon*) G__getstructoffset())->setMode((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->setHistPar((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HMdcTargetMon*) G__getstructoffset())->setTargPos((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HMdcTargetMon*) G__getstructoffset())->setTargPos((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->setTimeStep((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->setHistsMode((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->drawDownScalHist();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->drawTrigCondHist();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcTargetMon*) G__getstructoffset())->setFillSegFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcTargetMon*) G__getstructoffset())->setFillSegFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->setRCut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->setDPhiCut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->setDrawEachFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->setDrawSumOfFiles();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->setEachNEventsSave((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->setCollectNRuns((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->addToCanvasName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((HMdcTargetMon*) G__getstructoffset())->setTargetZRegion((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((HMdcTargetMon*) G__getstructoffset())->setTargetZRegion((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((HMdcTargetMon*) G__getstructoffset())->setTargetZRegion((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->setCanvasSize((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->setPathOneRunHits((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->setPathSumRunsHits((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcTargetMon*) G__getstructoffset())->setConvertFormat((const Char_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcTargetMon*) G__getstructoffset())->setConvertFormat((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->selectEventWithTBits((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcTargetMon*) G__getstructoffset())->doNormalization((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcTargetMon*) G__getstructoffset())->doNormalization();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTargetMon*) G__getstructoffset())->getDPhiH());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTargetMon*) G__getstructoffset())->getZ0H());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTargetMon*) G__getstructoffset())->getZVerH());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTargetMon*) G__getstructoffset())->getZVerDscH());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTargetMon*) G__getstructoffset())->getZVerVsEventH());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTargetMon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTargetMon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTargetMon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTargetMon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTargetMon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTargetMon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTargetMon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTargetMon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_822_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTargetMon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTargetMon G__THMdcTargetMon;
static int G__MdcTrackDDict_822_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTargetMon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTargetMon*) (soff+(sizeof(HMdcTargetMon)*i)))->~G__THMdcTargetMon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTargetMon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTargetMon*) (soff))->~G__THMdcTargetMon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcClusInfSim */
static int G__MdcTrackDDict_824_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusInfSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusInfSim[n];
     } else {
       p = new((void*) gvp) HMdcClusInfSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusInfSim;
     } else {
       p = new((void*) gvp) HMdcClusInfSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInfSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_824_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInfSim*) G__getstructoffset())->setTracksList((Int_t) G__int(libp->para[0]), (const Int_t*) G__int(libp->para[1])
, (const Short_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_824_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInfSim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_824_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClusInfSim*) G__getstructoffset())->getNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_824_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusInfSim*) G__getstructoffset())->getTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_824_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClusInfSim*) G__getstructoffset())->getNTimesInTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_824_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClusInfSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_824_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusInfSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_824_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcClusInfSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_824_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcClusInfSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_824_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusInfSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_824_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusInfSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_824_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusInfSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_824_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusInfSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_824_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusInfSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_824_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcClusInfSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcClusInfSim(*(HMdcClusInfSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInfSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcClusInfSim G__THMdcClusInfSim;
static int G__MdcTrackDDict_824_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcClusInfSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcClusInfSim*) (soff+(sizeof(HMdcClusInfSim)*i)))->~G__THMdcClusInfSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcClusInfSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcClusInfSim*) (soff))->~G__THMdcClusInfSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_824_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusInfSim* dest = (HMdcClusInfSim*) G__getstructoffset();
   *dest = *(HMdcClusInfSim*) libp->para[0].ref;
   const HMdcClusInfSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcDGaus */
static int G__MdcTrackDDict_839_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDGaus* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDGaus[n];
     } else {
       p = new((void*) gvp) HMdcDGaus[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDGaus;
     } else {
       p = new((void*) gvp) HMdcDGaus;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_839_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDGaus* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcDGaus(
(const Char_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) HMdcDGaus(
(const Char_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_839_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDGaus*) G__getstructoffset())->setTestCond((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_839_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 105, (long) ((HMdcDGaus*) G__getstructoffset())->histFit((TH1F*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), (Bool_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((HMdcDGaus*) G__getstructoffset())->histFit((TH1F*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_839_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HMdcDGaus::dgaus((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_839_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDGaus::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_839_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDGaus::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_839_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcDGaus::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_839_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDGaus::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_839_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDGaus*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_839_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDGaus::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_839_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDGaus::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_839_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDGaus::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_839_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDGaus::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcDGaus G__THMdcDGaus;
static int G__MdcTrackDDict_839_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcDGaus*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcDGaus*) (soff+(sizeof(HMdcDGaus)*i)))->~G__THMdcDGaus();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcDGaus*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcDGaus*) (soff))->~G__THMdcDGaus();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcRichCorr */
static int G__MdcTrackDDict_840_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRichCorr* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRichCorr[n];
     } else {
       p = new((void*) gvp) HMdcRichCorr[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRichCorr;
     } else {
       p = new((void*) gvp) HMdcRichCorr;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRichCorr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRichCorr* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRichCorr(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcRichCorr(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRichCorr((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcRichCorr((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRichCorr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcRichCorr*) G__getstructoffset())->printStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcRichCorr*) G__getstructoffset())->makeCalibrater1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcRichCorr*) G__getstructoffset())->makeCalibrater1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcRichCorr*) G__getstructoffset())->makeCalibrater1((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcRichCorr*) G__getstructoffset())->makeCalibrater1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRichCorr*) G__getstructoffset())->setNLayers((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRichCorr*) G__getstructoffset())->setTypeClFinder((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRichCorr*) G__getstructoffset())->setLevel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcRichCorr*) G__getstructoffset())->setDThetaCuts((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcRichCorr*) G__getstructoffset())->setDThetaCuts((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcRichCorr*) G__getstructoffset())->setDPhiCuts((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcRichCorr*) G__getstructoffset())->setDPhiCuts((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcRichCorr*) G__getstructoffset())->setDThetaCuts((Float_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcRichCorr*) G__getstructoffset())->setDThetaCuts((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcRichCorr*) G__getstructoffset())->setDPhiCuts((Float_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcRichCorr*) G__getstructoffset())->setDPhiCuts((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcRichCorr*) G__getstructoffset())->setDThetaCutsSig((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcRichCorr*) G__getstructoffset())->setDThetaCutsSig((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcRichCorr*) G__getstructoffset())->setDPhiCutsSig((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcRichCorr*) G__getstructoffset())->setDPhiCutsSig((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcRichCorr*) G__getstructoffset())->setDThetaCuts((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcRichCorr*) G__getstructoffset())->setDThetaCuts((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcRichCorr*) G__getstructoffset())->setDPhiCuts((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcRichCorr*) G__getstructoffset())->setDPhiCuts((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcRichCorr*) G__getstructoffset())->setHistFile((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcRichCorr*) G__getstructoffset())->setHistFile((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRichCorr*) G__getstructoffset())->setTestCond((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRichCorr*) G__getstructoffset())->setSaveFlags((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcRichCorr::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRichCorr::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcRichCorr::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcRichCorr::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRichCorr*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRichCorr::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRichCorr::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRichCorr::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_840_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRichCorr::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcRichCorr G__THMdcRichCorr;
static int G__MdcTrackDDict_840_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcRichCorr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcRichCorr*) (soff+(sizeof(HMdcRichCorr)*i)))->~G__THMdcRichCorr();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcRichCorr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcRichCorr*) (soff))->~G__THMdcRichCorr();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSeqArrBlock */
static int G__MdcTrackDDict_841_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSeqArrBlock* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSeqArrBlock[n];
     } else {
       p = new((void*) gvp) HSeqArrBlock[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSeqArrBlock;
     } else {
       p = new((void*) gvp) HSeqArrBlock;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSeqArrBlock* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HSeqArrBlock((HSeqArrBlock*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HSeqArrBlock((HSeqArrBlock*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrBlock*) G__getstructoffset())->expand());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) HSeqArrBlock::blockIndex((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) HSeqArrBlock::indexInBlock((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HSeqArrBlock*) G__getstructoffset())->getArr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HSeqArrBlock*) G__getstructoffset())->getBlockNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HSeqArrBlock*) G__getstructoffset())->getNextBlock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSeqArrBlock::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSeqArrBlock::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSeqArrBlock::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSeqArrBlock::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArrBlock*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSeqArrBlock::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSeqArrBlock::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSeqArrBlock::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_841_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSeqArrBlock::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_841_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSeqArrBlock* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSeqArrBlock(*(HSeqArrBlock*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSeqArrBlock G__THSeqArrBlock;
static int G__MdcTrackDDict_841_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSeqArrBlock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSeqArrBlock*) (soff+(sizeof(HSeqArrBlock)*i)))->~G__THSeqArrBlock();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSeqArrBlock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSeqArrBlock*) (soff))->~G__THSeqArrBlock();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_841_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSeqArrBlock* dest = (HSeqArrBlock*) G__getstructoffset();
   *dest = *(HSeqArrBlock*) libp->para[0].ref;
   const HSeqArrBlock& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSeqArrIter */
static int G__MdcTrackDDict_843_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSeqArrIter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSeqArrIter[n];
     } else {
       p = new((void*) gvp) HSeqArrIter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSeqArrIter;
     } else {
       p = new((void*) gvp) HSeqArrIter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSeqArrIter* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HSeqArrIter((HSeqArr*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HSeqArrIter((HSeqArr*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArrIter*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->next());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->nextAndExpand());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->setCursor((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->setCursor());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HSeqArrIter*) G__getstructoffset())->getCursor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->set((Char_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->set((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->set((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->set((UShort_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->set((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->set((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->set((Long64_t) G__Longlong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->set((ULong64_t) G__ULonglong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->set((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->set((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->set((Bool_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get(*(Char_t*) G__Charref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get(*(UChar_t*) G__UCharref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get(*(Short_t*) G__Shortref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get(*(UShort_t*) G__UShortref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get(*(UInt_t*) G__UIntref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get(*(Long64_t*) G__Longlongref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get(*(ULong64_t*) G__ULonglongref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get(*(Float_t*) G__Floatref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get(*(Double_t*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get(*(Bool_t*) G__Boolref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get((Char_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get((UChar_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get((Short_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get((UShort_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get((Int_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get((UInt_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get((Long64_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get((ULong64_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get((Float_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get((Double_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->get((Bool_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->setNext((Char_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->setNext((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->setNext((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->setNext((UShort_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->setNext((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->setNext((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->setNext((Long64_t) G__Longlong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->setNext((ULong64_t) G__ULonglong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->setNext((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->setNext((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->setNext((Bool_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext(*(Char_t*) G__Charref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext(*(UChar_t*) G__UCharref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext(*(Short_t*) G__Shortref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext(*(UShort_t*) G__UShortref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext(*(UInt_t*) G__UIntref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext(*(Long64_t*) G__Longlongref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext(*(ULong64_t*) G__ULonglongref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext(*(Float_t*) G__Floatref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext(*(Double_t*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext(*(Bool_t*) G__Boolref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext((Char_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext((UChar_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext((Short_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext((UShort_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext((Int_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext((UInt_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext((Long64_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext((ULong64_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext((Float_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext((Double_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArrIter*) G__getstructoffset())->getNext((Bool_t**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSeqArrIter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSeqArrIter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSeqArrIter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSeqArrIter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArrIter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSeqArrIter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSeqArrIter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSeqArrIter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_843_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSeqArrIter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_843_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSeqArrIter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSeqArrIter(*(HSeqArrIter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSeqArrIter G__THSeqArrIter;
static int G__MdcTrackDDict_843_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSeqArrIter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSeqArrIter*) (soff+(sizeof(HSeqArrIter)*i)))->~G__THSeqArrIter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSeqArrIter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSeqArrIter*) (soff))->~G__THSeqArrIter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_843_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSeqArrIter* dest = (HSeqArrIter*) G__getstructoffset();
   *dest = *(HSeqArrIter*) libp->para[0].ref;
   const HSeqArrIter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSeqArr */
static int G__MdcTrackDDict_845_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSeqArr* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSeqArr[n];
     } else {
       p = new((void*) gvp) HSeqArr[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSeqArr;
     } else {
       p = new((void*) gvp) HSeqArr;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSeqArr* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HSeqArr((ESeqArrType) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HSeqArr((ESeqArrType) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSeqArr* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HSeqArr((Char_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HSeqArr((Char_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->setArrType((ESeqArrType) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HSeqArr*) G__getstructoffset())->getArraySize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HSeqArr*) G__getstructoffset())->getMemSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HSeqArr*) G__getstructoffset())->makeIterator());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HSeqArr*) G__getstructoffset())->isBoundOk((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->rewind();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->addElement());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->setCursor((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->setCursor());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->setElement((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->setElement((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->setElement((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->setElement((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->setElement((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->setElement((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->setElement((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->setElement((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->setElement((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->setElement((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->setElement((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->getElement(*(Char_t*) G__Charref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->getElement(*(UChar_t*) G__UCharref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->getElement(*(Short_t*) G__Shortref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->getElement(*(UShort_t*) G__UShortref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->getElement(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->getElement(*(UInt_t*) G__UIntref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->getElement(*(Long64_t*) G__Longlongref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->getElement(*(ULong64_t*) G__ULonglongref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->getElement(*(Float_t*) G__Floatref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->getElement(*(Double_t*) G__Doubleref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->getElement(*(Bool_t*) G__Boolref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->addNext((Char_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->addNext((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->addNext((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->addNext((UShort_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->addNext((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->addNext((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->addNext((Long64_t) G__Longlong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->addNext((ULong64_t) G__ULonglong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->addNext((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->addNext((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->addNext((Bool_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->getNext(*(Char_t*) G__Charref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->getNext(*(UChar_t*) G__UCharref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->getNext(*(Short_t*) G__Shortref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->getNext(*(UShort_t*) G__UShortref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->getNext(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->getNext(*(UInt_t*) G__UIntref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->getNext(*(Long64_t*) G__Longlongref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->getNext(*(ULong64_t*) G__ULonglongref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->getNext(*(Float_t*) G__Floatref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->getNext(*(Double_t*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->getNext(*(Bool_t*) G__Boolref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HSeqArr*) G__getstructoffset())->getWordLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HSeqArr*) G__getstructoffset())->getFirstBlock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->tpOk((ESeqArrType) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSeqArr*) G__getstructoffset())->addBlock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HSeqArr*) G__getstructoffset())->getArrSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->increaseArrSize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSeqArr::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSeqArr::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSeqArr::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSeqArr::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeqArr*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSeqArr::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSeqArr::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSeqArr::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_845_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSeqArr::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_845_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSeqArr* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSeqArr(*(HSeqArr*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSeqArr G__THSeqArr;
static int G__MdcTrackDDict_845_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSeqArr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSeqArr*) (soff+(sizeof(HSeqArr)*i)))->~G__THSeqArr();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSeqArr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSeqArr*) (soff))->~G__THSeqArr();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_845_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSeqArr* dest = (HSeqArr*) G__getstructoffset();
   *dest = *(HSeqArr*) libp->para[0].ref;
   const HSeqArr& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcStoreWires */
static int G__MdcTrackDDict_846_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcStoreWires* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcStoreWires[n];
     } else {
       p = new((void*) gvp) HMdcStoreWires[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcStoreWires;
     } else {
       p = new((void*) gvp) HMdcStoreWires;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreWires));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreWires*) G__getstructoffset())->setMaxMemSize((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HMdcStoreWires*) G__getstructoffset())->getMemSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcStoreWires*) G__getstructoffset())->testMemSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreWires*) G__getstructoffset())->addWireAddr((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreWires*) G__getstructoffset())->setEndEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreWires*) G__getstructoffset())->resetIter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreWires*) G__getstructoffset())->getNextEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreWires*) G__getstructoffset())->getNextWireAddr(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) HMdcStoreWires::packAddress((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcStoreWires::unpackAddress(*(UShort_t*) G__UShortref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreWires*) G__getstructoffset())->addEvent(*(HMdcEvntListCells*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreWires*) G__getstructoffset())->getNextEvent(*(HMdcEvntListCells*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcStoreWires::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcStoreWires::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcStoreWires::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcStoreWires::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreWires*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcStoreWires::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcStoreWires::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcStoreWires::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_846_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcStoreWires::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_846_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcStoreWires* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcStoreWires(*(HMdcStoreWires*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreWires));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcStoreWires G__THMdcStoreWires;
static int G__MdcTrackDDict_846_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcStoreWires*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcStoreWires*) (soff+(sizeof(HMdcStoreWires)*i)))->~G__THMdcStoreWires();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcStoreWires*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcStoreWires*) (soff))->~G__THMdcStoreWires();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_846_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcStoreWires* dest = (HMdcStoreWires*) G__getstructoffset();
   *dest = *(HMdcStoreWires*) libp->para[0].ref;
   const HMdcStoreWires& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcStoreEvents */
static int G__MdcTrackDDict_847_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcStoreEvents* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcStoreEvents[n];
     } else {
       p = new((void*) gvp) HMdcStoreEvents[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcStoreEvents;
     } else {
       p = new((void*) gvp) HMdcStoreEvents;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreEvents));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreEvents*) G__getstructoffset())->setMaxMemSize((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HMdcStoreEvents*) G__getstructoffset())->getMemSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcStoreEvents*) G__getstructoffset())->testMemSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((HMdcStoreEvents*) G__getstructoffset())->addWire((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((HMdcStoreEvents*) G__getstructoffset())->addWire((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreEvents*) G__getstructoffset())->setEndEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreEvents*) G__getstructoffset())->resetIter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreEvents*) G__getstructoffset())->getNextEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreEvents*) G__getstructoffset())->getNextCell(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreEvents*) G__getstructoffset())->getNextCell(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), *(Bool_t*) G__Boolref(&libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreEvents*) G__getstructoffset())->getNextCell(
*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), *(Bool_t*) G__Boolref(&libp->para[5])
, (UInt_t**) G__int(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 104, (long) HMdcStoreEvents::packCell((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 104, (long) HMdcStoreEvents::packCell((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcStoreEvents::unpackCell(*(UInt_t*) G__UIntref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcStoreEvents::unsetFlag(*(UInt_t*) G__UIntref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcStoreEvents::setFlag(*(UInt_t*) G__UIntref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreEvents*) G__getstructoffset())->addEvent(*(HMdcEvntListCells*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HMdcStoreEvents*) G__getstructoffset())->getNextEvent(*(HMdcEvntListCells*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HMdcStoreEvents*) G__getstructoffset())->getNextEvent(*(HMdcEvntListCells*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcStoreEvents::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcStoreEvents::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcStoreEvents::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcStoreEvents::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreEvents*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcStoreEvents::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcStoreEvents::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcStoreEvents::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_847_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcStoreEvents::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_847_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcStoreEvents* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcStoreEvents(*(HMdcStoreEvents*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreEvents));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcStoreEvents G__THMdcStoreEvents;
static int G__MdcTrackDDict_847_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcStoreEvents*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcStoreEvents*) (soff+(sizeof(HMdcStoreEvents)*i)))->~G__THMdcStoreEvents();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcStoreEvents*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcStoreEvents*) (soff))->~G__THMdcStoreEvents();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_847_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcStoreEvents* dest = (HMdcStoreEvents*) G__getstructoffset();
   *dest = *(HMdcStoreEvents*) libp->para[0].ref;
   const HMdcStoreEvents& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcStoreTracks */
static int G__MdcTrackDDict_848_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcStoreTracks* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcStoreTracks[n];
     } else {
       p = new((void*) gvp) HMdcStoreTracks[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcStoreTracks;
     } else {
       p = new((void*) gvp) HMdcStoreTracks;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreTracks));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HMdcStoreTracks*) G__getstructoffset())->getMemSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreTracks*) G__getstructoffset())->setEndTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcStoreTracks*) G__getstructoffset())->setEndEvent((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcStoreTracks*) G__getstructoffset())->setEndEvent();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((HMdcStoreTracks*) G__getstructoffset())->setTrackPar(
(UChar_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (UChar_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (UChar_t) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((HMdcStoreTracks*) G__getstructoffset())->setTrackPar(
(UChar_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (UChar_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreTracks*) G__getstructoffset())->resetIter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreTracks*) G__getstructoffset())->nextEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreTracks*) G__getstructoffset())->nextTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreTracks*) G__getstructoffset())->getEventFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreTracks*) G__getstructoffset())->getTrackFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcStoreTracks*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcStoreTracks*) G__getstructoffset())->getMod1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcStoreTracks*) G__getstructoffset())->getMod2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcStoreTracks*) G__getstructoffset())->getNumEventTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcStoreTracks*) G__getstructoffset())->getX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcStoreTracks*) G__getstructoffset())->getY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcStoreTracks*) G__getstructoffset())->getZ1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcStoreTracks*) G__getstructoffset())->getX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcStoreTracks*) G__getstructoffset())->getY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcStoreTracks*) G__getstructoffset())->getZ2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcStoreTracks*) G__getstructoffset())->getTrackPar(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcStoreTracks*) G__getstructoffset())->getPoint1(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcStoreTracks*) G__getstructoffset())->getPoint2(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcStoreTracks*) G__getstructoffset())->getPoints(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreTracks*) G__getstructoffset())->resetEventIter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreTracks*) G__getstructoffset())->resetTrackPar((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreTracks*) G__getstructoffset())->resetTrackFlag((Bool_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreTracks*) G__getstructoffset())->resetEventFlag((Bool_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreTracks*) G__getstructoffset())->isEnd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcStoreTracks::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcStoreTracks::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcStoreTracks::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcStoreTracks::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreTracks*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcStoreTracks::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcStoreTracks::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcStoreTracks::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_848_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcStoreTracks::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_848_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcStoreTracks* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcStoreTracks(*(HMdcStoreTracks*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreTracks));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcStoreTracks G__THMdcStoreTracks;
static int G__MdcTrackDDict_848_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcStoreTracks*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcStoreTracks*) (soff+(sizeof(HMdcStoreTracks)*i)))->~G__THMdcStoreTracks();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcStoreTracks*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcStoreTracks*) (soff))->~G__THMdcStoreTracks();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_848_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcStoreTracks* dest = (HMdcStoreTracks*) G__getstructoffset();
   *dest = *(HMdcStoreTracks*) libp->para[0].ref;
   const HMdcStoreTracks& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcStoreClusters */
static int G__MdcTrackDDict_849_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcStoreClusters* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcStoreClusters[n];
     } else {
       p = new((void*) gvp) HMdcStoreClusters[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcStoreClusters;
     } else {
       p = new((void*) gvp) HMdcStoreClusters;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreClusters));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreClusters*) G__getstructoffset())->setEndCluster();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreClusters*) G__getstructoffset())->getNextCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreClusters*) G__getstructoffset())->getNextCell(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreClusters*) G__getstructoffset())->getNextCell(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), *(Bool_t*) G__Boolref(&libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreClusters*) G__getstructoffset())->addClustWires(*(HMdcEvntListCells*) libp->para[0].ref, (HMdcClus*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreClusters*) G__getstructoffset())->addClustWires(*(HMdcEvntListCells*) libp->para[0].ref, (HMdcClus*) G__int(libp->para[1])
, (HMdcClus*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HMdcStoreClusters*) G__getstructoffset())->getNextCluster(*(HMdcEvntListCells*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HMdcStoreClusters*) G__getstructoffset())->getNextCluster(*(HMdcEvntListCells*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreClusters*) G__getstructoffset())->unsetFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcStoreClusters*) G__getstructoffset())->setFlag((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcStoreClusters::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcStoreClusters::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcStoreClusters::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcStoreClusters::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcStoreClusters*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcStoreClusters::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcStoreClusters::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcStoreClusters::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_849_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcStoreClusters::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_849_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcStoreClusters* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcStoreClusters(*(HMdcStoreClusters*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreClusters));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcStoreClusters G__THMdcStoreClusters;
static int G__MdcTrackDDict_849_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcStoreClusters*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcStoreClusters*) (soff+(sizeof(HMdcStoreClusters)*i)))->~G__THMdcStoreClusters();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcStoreClusters*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcStoreClusters*) (soff))->~G__THMdcStoreClusters();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_849_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcStoreClusters* dest = (HMdcStoreClusters*) G__getstructoffset();
   *dest = *(HMdcStoreClusters*) libp->para[0].ref;
   const HMdcStoreClusters& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcDeDx2 */
static int G__MdcTrackDDict_867_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDeDx2* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDeDx2(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcDeDx2(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDeDx2((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcDeDx2((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDeDx2((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcDeDx2((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcDeDx2[n];
       } else {
         p = new((void*) gvp) HMdcDeDx2[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcDeDx2;
       } else {
         p = new((void*) gvp) HMdcDeDx2;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDeDx2*) G__getstructoffset())->initContainer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HMdcDeDx2*) G__getstructoffset())->createMaxPar((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HMdcDeDx2*) G__getstructoffset())->createMaxPar());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcDeDx2*) G__getstructoffset())->printParam(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcDeDx2*) G__getstructoffset())->printParam();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->setFuncPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->setFuncPar((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->setFuncMaxPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->setFuncMaxPar((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->setFuncWidthPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->setFuncWidthPar((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->setFuncGainPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->setFuncGainPar((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->setMinDistCutPar((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->setMinDistCutPar((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HMdcDeDx2*) G__getstructoffset())->getFuncPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->getFuncPar((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->getFuncMaxPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->getFuncMaxPar((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HMdcDeDx2*) G__getstructoffset())->getFuncWidthPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->getFuncWidthPar((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->getFuncGainPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->getFuncGainPar((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->getMinDistCutPar((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->getMinDistCutPar((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDeDx2*) G__getstructoffset())->getN_Param());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDeDx2*) G__getstructoffset())->getN_Shift_Param());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDeDx2*) G__getstructoffset())->getN_Angle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDeDx2*) G__getstructoffset())->getN_Dist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcDeDx2*) G__getstructoffset())->getWindow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->setWindow((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDeDx2*) G__getstructoffset())->getMinimumWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->setMinimumWires((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDeDx2::setDebugMode((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->setUseCalibration((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HMdcDeDx2*) G__getstructoffset())->getArray(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 11:
      G__letdouble(result7, 102, (double) ((HMdcDeDx2*) G__getstructoffset())->calcDeDx(
(HMdcSeg**) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (UChar_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (UChar_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10])));
      break;
   case 10:
      G__letdouble(result7, 102, (double) ((HMdcDeDx2*) G__getstructoffset())->calcDeDx(
(HMdcSeg**) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (UChar_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (UChar_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]), (Float_t) G__double(libp->para[9])));
      break;
   case 9:
      G__letdouble(result7, 102, (double) ((HMdcDeDx2*) G__getstructoffset())->calcDeDx(
(HMdcSeg**) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (UChar_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (UChar_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letdouble(result7, 102, (double) ((HMdcDeDx2*) G__getstructoffset())->calcDeDx(
(HMdcSeg**) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (UChar_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (UChar_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letdouble(result7, 102, (double) ((HMdcDeDx2*) G__getstructoffset())->calcDeDx(
(HMdcSeg**) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (UChar_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (UChar_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letdouble(result7, 102, (double) ((HMdcDeDx2*) G__getstructoffset())->calcDeDx((HMdcSeg**) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (UChar_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (UChar_t*) G__int(libp->para[5])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->toTTodEdX(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->dEdXToToT(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->toTSigma((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->toTSigma((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->normalize(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->findBin((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Int_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->setHeFraction((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->getHeFraction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HMdcDeDx2::beta((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HMdcDeDx2::gamma((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) HMdcDeDx2::energyLoss((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) HMdcDeDx2::energyLoss((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) HMdcDeDx2::energyLossGraph(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) HMdcDeDx2::energyLossGraph((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HMdcDeDx2::energyLossGraph((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HMdcDeDx2::energyLossGraph((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HMdcDeDx2::energyLossGraph((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) HMdcDeDx2::energyLossGraph((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HMdcDeDx2::energyLossGraph((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) HMdcDeDx2::betaGraph((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HMdcDeDx2::betaGraph((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HMdcDeDx2::betaGraph((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HMdcDeDx2::betaGraph((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HMdcDeDx2::betaGraph((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 11:
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->scaledTimeAboveThreshold(
(HGeantKine*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10])));
      break;
   case 10:
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->scaledTimeAboveThreshold(
(HGeantKine*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t) G__double(libp->para[9])));
      break;
   case 9:
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->scaledTimeAboveThreshold(
(HGeantKine*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->scaledTimeAboveThreshold(
(HGeantKine*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->scaledTimeAboveThreshold(
(HGeantKine*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->scaledTimeAboveThreshold((HGeantKine*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->scaledTimeAboveThreshold((HGeantKine*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t*) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->scaledTimeAboveThreshold((HGeantKine*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->scaledTimeAboveThreshold((HGeantKine*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->scaledTimeAboveThreshold((HGeantKine*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->scaledTimeAboveThreshold((HGeantKine*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((HMdcDeDx2*) G__getstructoffset())->scaledTimeAboveThreshold());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDeDx2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDeDx2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcDeDx2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDeDx2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDeDx2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDeDx2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDeDx2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_867_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDeDx2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_867_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcDeDx2* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcDeDx2(*(HMdcDeDx2*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcDeDx2 G__THMdcDeDx2;
static int G__MdcTrackDDict_867_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcDeDx2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcDeDx2*) (soff+(sizeof(HMdcDeDx2)*i)))->~G__THMdcDeDx2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcDeDx2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcDeDx2*) (soff))->~G__THMdcDeDx2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_867_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDeDx2* dest = (HMdcDeDx2*) G__getstructoffset();
   *dest = *(HMdcDeDx2*) libp->para[0].ref;
   const HMdcDeDx2& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcDeDx2Maker */
static int G__MdcTrackDDict_868_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDeDx2Maker* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDeDx2Maker[n];
     } else {
       p = new((void*) gvp) HMdcDeDx2Maker[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDeDx2Maker;
     } else {
       p = new((void*) gvp) HMdcDeDx2Maker;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2Maker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_868_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDeDx2Maker* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcDeDx2Maker((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcDeDx2Maker((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2Maker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_868_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2Maker*) G__getstructoffset())->printStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_868_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDeDx2Maker::setUseModule((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_868_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDeDx2Maker::setFillCase((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_868_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDeDx2Maker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_868_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDeDx2Maker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_868_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcDeDx2Maker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_868_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDeDx2Maker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_868_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDeDx2Maker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_868_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDeDx2Maker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_868_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDeDx2Maker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_868_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDeDx2Maker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_868_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDeDx2Maker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcDeDx2Maker G__THMdcDeDx2Maker;
static int G__MdcTrackDDict_868_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcDeDx2Maker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcDeDx2Maker*) (soff+(sizeof(HMdcDeDx2Maker)*i)))->~G__THMdcDeDx2Maker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcDeDx2Maker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcDeDx2Maker*) (soff))->~G__THMdcDeDx2Maker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackFitterB */
static int G__MdcTrackDDict_869_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFitterB* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcTrackFitterB((HMdcTrackFitInOut*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HMdcTrackFitterB((HMdcTrackFitInOut*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterB));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_869_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackFitterB::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_869_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitterB::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_869_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackFitterB::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_869_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackFitterB::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_869_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFitterB*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_869_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitterB::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_869_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackFitterB::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_869_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFitterB::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_869_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackFitterB::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_869_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackFitterB* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackFitterB(*(HMdcTrackFitterB*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterB));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackFitterB G__THMdcTrackFitterB;
static int G__MdcTrackDDict_869_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackFitterB*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackFitterB*) (soff+(sizeof(HMdcTrackFitterB)*i)))->~G__THMdcTrackFitterB();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackFitterB*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackFitterB*) (soff))->~G__THMdcTrackFitterB();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_869_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFitterB* dest = (HMdcTrackFitterB*) G__getstructoffset();
   *dest = *(HMdcTrackFitterB*) libp->para[0].ref;
   const HMdcTrackFitterB& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcAlignerParam */
static int G__MdcTrackDDict_870_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcAlignerParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcAlignerParam[n];
     } else {
       p = new((void*) gvp) HMdcAlignerParam[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcAlignerParam;
     } else {
       p = new((void*) gvp) HMdcAlignerParam;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcAlignerParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcAlignerParam(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Int_t*) G__int(libp->para[3])
, (HMdcLookUpTb*) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) HMdcAlignerParam(
(Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Int_t*) G__int(libp->para[3])
, (HMdcLookUpTb*) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcAlignerParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcAlignerParam(*(HMdcAlignerParam*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HMdcAlignerParam(*(HMdcAlignerParam*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcAlignerParam*) G__getstructoffset())->getNMinParams());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HMdcAlignerParam*) G__getstructoffset())->getMinParams());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HMdcAlignerParam*) G__getstructoffset())->getMinSteps());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcAlignerParam*) G__getstructoffset())->setNewPosition((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcAlignerParam*) G__getstructoffset())->setNewPosition((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcAlignerParam*) G__getstructoffset())->setNewPosition();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcAlignerParam*) G__getstructoffset())->setPlanes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcAlignerParam*) G__getstructoffset())->printTransforms((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcAlignerParam*) G__getstructoffset())->printTransforms();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->setRootFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HMdcAlignerParam*) G__getstructoffset())->getRootFile();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->setAlignSec((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcAlignerParam*) G__getstructoffset())->getAlignSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->setCluster((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->setScan((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->setOffset((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcAlignerParam*) G__getstructoffset())->getCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcAlignerParam*) G__getstructoffset())->getScan());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcAlignerParam*) G__getstructoffset())->getOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HMdcAlignerParam*) G__getstructoffset())->getTfSysRSec((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcAlignerParam*) G__getstructoffset())->getFirstMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcAlignerParam*) G__getstructoffset())->getLastMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->copyPlanes(*(HMdcAlignerParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->copyAlignParams(*(HMdcAlignerParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->setAlignParams((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->setNewAlignParams((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->copySteps(*(HMdcAlignerParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->setSteps((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->copyFlags(*(HMdcAlignerParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->setFlags((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->copyMinParams(*(HMdcAlignerParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->setMinParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->copyMinSteps(*(HMdcAlignerParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->setOriginalTransforms();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->setActualTransforms();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->copy(*(HMdcAlignerParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->getSecTrackParams(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->getModTrackParams(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])
, *(Double_t*) G__Doubleref(&libp->para[8]), *(Double_t*) G__Doubleref(&libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->print(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcAlignerParam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcAlignerParam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcAlignerParam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcAlignerParam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerParam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcAlignerParam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcAlignerParam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcAlignerParam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_870_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcAlignerParam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcAlignerParam G__THMdcAlignerParam;
static int G__MdcTrackDDict_870_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcAlignerParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcAlignerParam*) (soff+(sizeof(HMdcAlignerParam)*i)))->~G__THMdcAlignerParam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcAlignerParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcAlignerParam*) (soff))->~G__THMdcAlignerParam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcAlignerD */
static int G__MdcTrackDDict_871_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcAlignerD* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcAlignerD((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcAlignerD((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcAlignerD((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcAlignerD((Bool_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcAlignerD* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcAlignerD(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcAlignerD(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcAlignerD(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcAlignerD(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcAlignerD* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcAlignerD[n];
     } else {
       p = new((void*) gvp) HMdcAlignerD[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcAlignerD;
     } else {
       p = new((void*) gvp) HMdcAlignerD;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcAlignerD* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcAlignerD((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcAlignerD((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcAlignerD*) G__getstructoffset())->monitor((HGeomVector*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcAlignerD*) G__getstructoffset())->monitor();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcAlignerD*) G__getstructoffset())->getStoreWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcAlignerD*) G__getstructoffset())->getStoreClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcAlignerD*) G__getstructoffset())->getEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcAlignerD*) G__getstructoffset())->getFitter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcAlignerD*) G__getstructoffset())->getParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcAlignerD::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcAlignerD::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcAlignerD::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcAlignerD::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcAlignerD*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcAlignerD::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcAlignerD::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcAlignerD::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_871_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcAlignerD::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcAlignerD G__THMdcAlignerD;
static int G__MdcTrackDDict_871_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcAlignerD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcAlignerD*) (soff+(sizeof(HMdcAlignerD)*i)))->~G__THMdcAlignerD();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcAlignerD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcAlignerD*) (soff))->~G__THMdcAlignerD();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcClusFitSim */
static int G__MdcTrackDDict_872_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusFitSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusFitSim[n];
     } else {
       p = new((void*) gvp) HMdcClusFitSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusFitSim;
     } else {
       p = new((void*) gvp) HMdcClusFitSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setNumTracks((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setNumTracksClus((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setGeantTrackNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setNumWiresTrack((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setNumWiresTrClus((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setX1Geant((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setY1Geant((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setZ1Geant((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setX2Geant((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setY2Geant((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setZ2Geant((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setPrimaryFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcClusFitSim*) G__getstructoffset())->setFakeTrack((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcClusFitSim*) G__getstructoffset())->setFakeTrack();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setXYZ1Geant((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setXYZ2Geant((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setParticleID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setMomentum((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->setFakeFlag();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClusFitSim*) G__getstructoffset())->getNumTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClusFitSim*) G__getstructoffset())->getNumTracksClus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusFitSim*) G__getstructoffset())->getGeantTrackNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClusFitSim*) G__getstructoffset())->getNumWiresTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcClusFitSim*) G__getstructoffset())->getNumWiresTrClus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->getX1Geant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->getY1Geant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->getZ1Geant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->getX2Geant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->getY2Geant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->getZ2Geant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusFitSim*) G__getstructoffset())->isPrimary());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusFitSim*) G__getstructoffset())->isTrackDirGood());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->getGeantPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->getGeantTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((const HMdcClusFitSim*) G__getstructoffset())->getGeantRZmin(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((const HMdcClusFitSim*) G__getstructoffset())->getGeantRZmin(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const HMdcClusFitSim*) G__getstructoffset())->getGeantRZmin(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcClusFitSim*) G__getstructoffset())->getParticleID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->getMomentum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->dX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->dY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->dZ1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->dX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->dY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->dZ2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcClusFitSim*) G__getstructoffset())->isFakeGeant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->getPurity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcClusFitSim*) G__getstructoffset())->getEfficiency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcClusFitSim*) G__getstructoffset())->printSimVsRec();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClusFitSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusFitSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcClusFitSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcClusFitSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusFitSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusFitSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusFitSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusFitSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_872_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusFitSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_872_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcClusFitSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcClusFitSim(*(HMdcClusFitSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcClusFitSim G__THMdcClusFitSim;
static int G__MdcTrackDDict_872_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcClusFitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcClusFitSim*) (soff+(sizeof(HMdcClusFitSim)*i)))->~G__THMdcClusFitSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcClusFitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcClusFitSim*) (soff))->~G__THMdcClusFitSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_872_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusFitSim* dest = (HMdcClusFitSim*) G__getstructoffset();
   *dest = *(HMdcClusFitSim*) libp->para[0].ref;
   const HMdcClusFitSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcMinimize */
static int G__MdcTrackDDict_874_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcMinimize* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcMinimize[n];
     } else {
       p = new((void*) gvp) HMdcMinimize[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcMinimize;
     } else {
       p = new((void*) gvp) HMdcMinimize;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcMinimize));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMinimize*) G__getstructoffset())->setFCN((TObject*) G__int(libp->para[0]), (Double_t (*)(TObject*, Int_t&, Double_t*)) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcMinimize*) G__getstructoffset())->minimize((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcMinimize*) G__getstructoffset())->minimize2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMinimize*) G__getstructoffset())->calculationOfGradient(
(Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMinimize*) G__getstructoffset())->solutionOfLinearEquationsSystem((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcMinimize*) G__getstructoffset())->minpar2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcMinimize*) G__getstructoffset())->minbar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcMinimize*) G__getstructoffset())->scan((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcMinimize*) G__getstructoffset())->scanXYZ((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcMinimize*) G__getstructoffset())->random((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcMinimize*) G__getstructoffset())->cog((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcMinimize*) G__getstructoffset())->getFunct0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcMinimize*) G__getstructoffset())->getFunctional());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcMinimize::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcMinimize::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcMinimize::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcMinimize::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMinimize*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcMinimize::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcMinimize::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcMinimize::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_874_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcMinimize::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_874_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcMinimize* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcMinimize(*(HMdcMinimize*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcMinimize));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcMinimize G__THMdcMinimize;
static int G__MdcTrackDDict_874_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcMinimize*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcMinimize*) (soff+(sizeof(HMdcMinimize)*i)))->~G__THMdcMinimize();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcMinimize*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcMinimize*) (soff))->~G__THMdcMinimize();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_874_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcMinimize* dest = (HMdcMinimize*) G__getstructoffset();
   *dest = *(HMdcMinimize*) libp->para[0].ref;
   const HMdcMinimize& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcWireFitSim */
static int G__MdcTrackDDict_875_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcWireFitSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcWireFitSim[n];
     } else {
       p = new((void*) gvp) HMdcWireFitSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcWireFitSim;
     } else {
       p = new((void*) gvp) HMdcWireFitSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFitSim*) G__getstructoffset())->setGeantTrackNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFitSim*) G__getstructoffset())->setGeantMinDist((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFitSim*) G__getstructoffset())->setGeantAlpha((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFitSim*) G__getstructoffset())->setDigiTimeErr((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFitSim*) G__getstructoffset())->setGeantTof((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFitSim*) G__getstructoffset())->setClusFitTrFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcWireFitSim*) G__getstructoffset())->getGeantTrackNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFitSim*) G__getstructoffset())->getGeantMinDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFitSim*) G__getstructoffset())->getGeantAlpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFitSim*) G__getstructoffset())->getDigiTimeErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcWireFitSim*) G__getstructoffset())->getGeantTof());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcWireFitSim*) G__getstructoffset())->isClusFitTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcWireFitSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWireFitSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcWireFitSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcWireFitSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireFitSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWireFitSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcWireFitSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWireFitSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_875_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcWireFitSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_875_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcWireFitSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcWireFitSim(*(HMdcWireFitSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcWireFitSim G__THMdcWireFitSim;
static int G__MdcTrackDDict_875_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcWireFitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcWireFitSim*) (soff+(sizeof(HMdcWireFitSim)*i)))->~G__THMdcWireFitSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcWireFitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcWireFitSim*) (soff))->~G__THMdcWireFitSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_875_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcWireFitSim* dest = (HMdcWireFitSim*) G__getstructoffset();
   *dest = *(HMdcWireFitSim*) libp->para[0].ref;
   const HMdcWireFitSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcClustFromSeg */
static int G__MdcTrackDDict_876_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClustFromSeg* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClustFromSeg[n];
     } else {
       p = new((void*) gvp) HMdcClustFromSeg[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClustFromSeg;
     } else {
       p = new((void*) gvp) HMdcClustFromSeg;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustFromSeg));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_876_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClustFromSeg* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcClustFromSeg((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcClustFromSeg((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustFromSeg));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_876_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClustFromSeg* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcClustFromSeg(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (HParamList*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HMdcClustFromSeg(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (HParamList*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustFromSeg));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_876_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClustFromSeg::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_876_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClustFromSeg::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_876_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcClustFromSeg::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_876_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcClustFromSeg::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_876_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClustFromSeg*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_876_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClustFromSeg::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_876_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClustFromSeg::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_876_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClustFromSeg::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_876_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClustFromSeg::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcClustFromSeg G__THMdcClustFromSeg;
static int G__MdcTrackDDict_876_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcClustFromSeg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcClustFromSeg*) (soff+(sizeof(HMdcClustFromSeg)*i)))->~G__THMdcClustFromSeg();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcClustFromSeg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcClustFromSeg*) (soff))->~G__THMdcClustFromSeg();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcGeantSeg */
static int G__MdcTrackDDict_877_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeantSeg* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeantSeg((Short_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcGeantSeg((Short_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcGeantSeg[n];
       } else {
         p = new((void*) gvp) HMdcGeantSeg[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcGeantSeg;
       } else {
         p = new((void*) gvp) HMdcGeantSeg;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantSeg));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->clear((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->setAddress((Char_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->setDirection((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->setWiresAreColl();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->setWiresAreNotColl();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->setMod((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->analyseClust((HMdcClusSim*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->analyseSeg((HMdcSegSim*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(HMdcList12GroupCells*) libp->para[2].ref, (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getIOSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getDirection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getNGMdcHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getNGMdcs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getNGMdcHits((Char_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantSeg*) G__getstructoffset())->areWiresCollected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getFirstLayer12());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getLastLayer12());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getFirstGeantMdcLayer((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getLastGeantMdcLayer((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getFirstAndLastGMdcLayers((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getModIOfGeantTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcGeantSeg*) G__getstructoffset())->getMdcMidPlaneHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcGeantSeg*) G__getstructoffset())->getMdcLayerHit((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) HMdcGeantSeg::dirHit((HGeantMdc*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeantSeg*) G__getstructoffset())->getMdcHitPos((Int_t) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeantSeg*) G__getstructoffset())->getMdcHitPosSec((Int_t) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeantSeg*) G__getstructoffset())->getMdcHitPosLab((Int_t) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((HMdcGeantSeg*) G__getstructoffset())->getLayerHitPos((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(HGeomVector*) libp->para[2].ref, (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HMdcGeantSeg*) G__getstructoffset())->getLayerHitPos((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(HGeomVector*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((HMdcGeantSeg*) G__getstructoffset())->getLayerHitPosSec((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(HGeomVector*) libp->para[2].ref, (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HMdcGeantSeg*) G__getstructoffset())->getLayerHitPosSec((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(HGeomVector*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((HMdcGeantSeg*) G__getstructoffset())->getLayerHitPosLab((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(HGeomVector*) libp->para[2].ref, (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HMdcGeantSeg*) G__getstructoffset())->getLayerHitPosLab((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(HGeomVector*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantSeg*) G__getstructoffset())->isGntTrackOk());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantSeg*) G__getstructoffset())->isGEANTBug());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantSeg*) G__getstructoffset())->isNoMeta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantSeg*) G__getstructoffset())->isTrackNotRec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantSeg*) G__getstructoffset())->isSegNotRec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantSeg*) G__getstructoffset())->is1or2HitsNotRec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->clearClus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->clearSeg();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->setUserFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantSeg*) G__getstructoffset())->getUserFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) HMdcGeantSeg::dirTheta((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->setAnotherHit((HGeantMdc*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeantSeg*) G__getstructoffset())->addHit((HGeantMdc*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->addFirstHit((HGeantMdc*) G__int(libp->para[0]), (Bool_t*) G__int(libp->para[1])
, (Short_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->setStatusFlags(*(UChar_t*) G__UCharref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->setTrackNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcGeantSeg::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantSeg::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcGeantSeg::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGeantSeg::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantSeg*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantSeg::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeantSeg::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantSeg::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_877_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeantSeg::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_877_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcGeantSeg* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcGeantSeg(*(HMdcGeantSeg*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantSeg));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcGeantSeg G__THMdcGeantSeg;
static int G__MdcTrackDDict_877_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcGeantSeg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcGeantSeg*) (soff+(sizeof(HMdcGeantSeg)*i)))->~G__THMdcGeantSeg();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcGeantSeg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcGeantSeg*) (soff))->~G__THMdcGeantSeg();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_877_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeantSeg* dest = (HMdcGeantSeg*) G__getstructoffset();
   *dest = *(HMdcGeantSeg*) libp->para[0].ref;
   const HMdcGeantSeg& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcGeantTrack */
static int G__MdcTrackDDict_878_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeantTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeantTrack[n];
     } else {
       p = new((void*) gvp) HMdcGeantTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeantTrack;
     } else {
       p = new((void*) gvp) HMdcGeantTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeantTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcGeantTrack(
(TObjArray*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HMdcGeantTrack(
(TObjArray*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantTrack*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantTrack*) G__getstructoffset())->setDefault();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeantTrack*) G__getstructoffset())->setMdcCal1Cat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGeantTrack::unsetMdc((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcGeantTrack::isMdcActive((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGeantTrack::testMdcSetup();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcGeantTrack*) G__getstructoffset())->setDebugPrintFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcGeantTrack*) G__getstructoffset())->setDebugPrintFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcGeantTrack*) G__getstructoffset())->testGeantTrack((HGeantKine*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcGeantTrack*) G__getstructoffset())->testGeantTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcGeantTrack*) G__getstructoffset())->getMdcMidPlaneHit((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcGeantTrack*) G__getstructoffset())->getMdcLayerHit((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcGeantTrack*) G__getstructoffset())->getSegment((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantTrack*) G__getstructoffset())->getTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcGeantTrack*) G__getstructoffset())->getMomentum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantTrack*) G__getstructoffset())->isInMdc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantTrack*) G__getstructoffset())->isInRich());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantTrack*) G__getstructoffset())->isInMeta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcGeantTrack*) G__getstructoffset())->getNSegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcGeantTrack*) G__getstructoffset())->getNDigiSegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcGeantTrack*) G__getstructoffset())->getNGeantMdcHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantTrack*) G__getstructoffset())->getNWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcGeantTrack*) G__getstructoffset())->getGeantMdcSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcGeantTrack*) G__getstructoffset())->getDigiMdcSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcGeantTrack*) G__getstructoffset())->getNGeantMdcSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcGeantTrack*) G__getstructoffset())->getNDigiMdcSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantTrack*) G__getstructoffset())->isDirectionGood());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantTrack*) G__getstructoffset())->isGeantBug());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((HMdcGeantTrack*) G__getstructoffset())->getNSegsInMdc((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HMdcGeantTrack*) G__getstructoffset())->getNSegsInMdc((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((HMdcGeantTrack*) G__getstructoffset())->getNSegments((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HMdcGeantTrack*) G__getstructoffset())->getNSegments((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HMdcGeantTrack*) G__getstructoffset())->getSegDirection((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HMdcGeantTrack*) G__getstructoffset())->getSector((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HMdcGeantTrack*) G__getstructoffset())->getIOSeg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HMdcGeantTrack*) G__getstructoffset())->getFirstLayer12((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HMdcGeantTrack*) G__getstructoffset())->getLastLayer12((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HMdcGeantTrack*) G__getstructoffset())->getNGMdcHits((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeantTrack*) G__getstructoffset())->getMdcHitPos((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(HGeomVector*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeantTrack*) G__getstructoffset())->getMdcHitPosSec((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(HGeomVector*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeantTrack*) G__getstructoffset())->getMdcHitPosLab((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(HGeomVector*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((HMdcGeantTrack*) G__getstructoffset())->getLayerHitPos((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(HGeomVector*) libp->para[3].ref
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HMdcGeantTrack*) G__getstructoffset())->getLayerHitPos((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(HGeomVector*) libp->para[3].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((HMdcGeantTrack*) G__getstructoffset())->getLayerHitPosSec((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(HGeomVector*) libp->para[3].ref
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HMdcGeantTrack*) G__getstructoffset())->getLayerHitPosSec((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(HGeomVector*) libp->para[3].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((HMdcGeantTrack*) G__getstructoffset())->getLayerHitPosLab((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(HGeomVector*) libp->para[3].ref
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HMdcGeantTrack*) G__getstructoffset())->getLayerHitPosLab((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(HGeomVector*) libp->para[3].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcGeantTrack*) G__getstructoffset())->getGeantKine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeantTrack*) G__getstructoffset())->isGntTrackOk());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeantTrack*) G__getstructoffset())->isGEANTBug());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeantTrack*) G__getstructoffset())->isNoMeta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeantTrack*) G__getstructoffset())->isTrackNotRec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantTrack*) G__getstructoffset())->setUserFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantTrack*) G__getstructoffset())->getUserFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantTrack*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      HMdcGeantTrack::printDebug((HGeantMdc*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HMdcGeantTrack::printDebug((HGeantMdc*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcGeantTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcGeantTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGeantTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeantTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackDDict_878_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeantTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackDDict_878_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcGeantTrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcGeantTrack(*(HMdcGeantTrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcGeantTrack G__THMdcGeantTrack;
static int G__MdcTrackDDict_878_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcGeantTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcGeantTrack*) (soff+(sizeof(HMdcGeantTrack)*i)))->~G__THMdcGeantTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcGeantTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcGeantTrack*) (soff))->~G__THMdcGeantTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackDDict_878_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeantTrack* dest = (HMdcGeantTrack*) G__getstructoffset();
   *dest = *(HMdcGeantTrack*) libp->para[0].ref;
   const HMdcGeantTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HMdcTrackDContFact */

/* HMdcPointPlane */

/* HMdcTrapPlane */

/* HMdcTrap */

/* HMdcPlane */

/* HMdcPointOnPlane */

/* HMdcLineParam */

/* HMdcGetContainers */

/* HMdcLayerCorrPar */

/* HMdcSizesCellsCell */

/* HMdcSizesCellsMod */

/* HMdcSizesCells */

/* HMdcSizesCellsLayer */

/* HMdcSizesCellsSec */

/* HMdcLayer */

/* HMdcClFnStack */

/* HMdcClFnStacksArr */

/* HMdcTBArray */

/* HMdcBArray */

/* HMdcList12GroupCells */

/* HMdcList24GroupCells */

/* HMdcClus */

/* HMdcClusSim */

/* HMdcSecListCells */

/* HMdcCluster */

/* HMdcClustersArrs */

/* HMdcDriftTimeParSec */

/* HMdcLayListCells */

/* HMdcLookUpTbCell */

/* HMdcLookUpTbLayer */

/* HMdcLookUpTbMod */

/* HMdcLookUpTbSec */

/* HMdcLookUpTb */

/* HMdcModListCells */

/* HMdcEvntListCells */

/* HMdcKickPlane */

/* HMdcClusMetaMatch */

/* HMdcTrackParam */

/* HMdcKickCor */

/* HMdcProjPlot */

/* HMdc34ClFinderLayer */

/* HMdc34ClFinderMod */

/* HMdc34ClFinderSec */

/* HMdc34ClFinder */

/* HMdcEff */

/* HMdcEffMod */

/* HMdcEfficiencyLayer */

/* HMdcEfficiencyMod */

/* HMdcEfficiencySec */

/* HMdcEfficiency */

/* HMdcGeantEvent */

/* HMdcTrackFinder */

/* HMdcClusterToHit */

/* HMdc12Fit */

/* HMdcIdealTracking */

/* HMdcTrackDSet */

/* HMdcHitSegFiller */

/* HMdcClusInf */

/* HMdcClusFit */

/* HMdcWireData */

/* HMdcWireFit */

/* HMdcTrackFitInOut */

/* HMdcDriftTimePar */

/* HMdcDriftTimeParBin */

/* HMdcWiresArr */

/* HMdcDriftTimeParAngle */

/* HMdcDriftTimeParMod */

/* HMdcTrackFitPar */

/* HMdcTrackFitter */

/* HMdcTrackFitterA */

/* HMdcTrackInfSim */

/* HMdcFittersArray */

/* HMdcEffMenu */

/* HMdcTargetMon */

/* HMdcClusInfSim */

/* HMdcDGaus */

/* HMdcRichCorr */

/* HSeqArrBlock */

/* HSeqArrIter */

/* HSeqArr */

/* HMdcStoreWires */

/* HMdcStoreEvents */

/* HMdcStoreTracks */

/* HMdcStoreClusters */

/* HMdcDeDx2 */

/* HMdcDeDx2Maker */

/* HMdcTrackFitterB */

/* HMdcAlignerParam */

/* HMdcAlignerD */

/* HMdcClusFitSim */

/* HMdcMinimize */

/* HMdcWireFitSim */

/* HMdcClustFromSeg */

/* HMdcGeantSeg */

/* HMdcGeantTrack */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMdcTrackDDict {
 public:
  G__Sizep2memfuncMdcTrackDDict(): p(&G__Sizep2memfuncMdcTrackDDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMdcTrackDDict::*p)();
};

size_t G__get_sizep2memfuncMdcTrackDDict()
{
  G__Sizep2memfuncMdcTrackDDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMdcTrackDDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDContFact))) {
     HMdcTrackDContFact *G__Lderived;
     G__Lderived=(HMdcTrackDContFact*)0x1000;
     {
       HContFact *G__Lpbase=(HContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDContFact),G__get_linked_tagnum(&G__MdcTrackDDictLN_HContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDContFact),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDContFact),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointPlane))) {
     HMdcPointPlane *G__Lderived;
     G__Lderived=(HMdcPointPlane*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointPlane),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrapPlane))) {
     HMdcTrapPlane *G__Lderived;
     G__Lderived=(HMdcTrapPlane*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrapPlane),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrap))) {
     HMdcTrap *G__Lderived;
     G__Lderived=(HMdcTrap*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrap),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane))) {
     HMdcPlane *G__Lderived;
     G__Lderived=(HMdcPlane*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane))) {
     HMdcPointOnPlane *G__Lderived;
     G__Lderived=(HMdcPointOnPlane*)0x1000;
     {
       HGeomVector *G__Lpbase=(HGeomVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane),G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLineParam))) {
     HMdcLineParam *G__Lderived;
     G__Lderived=(HMdcLineParam*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLineParam),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers))) {
     HMdcGetContainers *G__Lderived;
     G__Lderived=(HMdcGetContainers*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar))) {
     HMdcLayerCorrPar *G__Lderived;
     G__Lderived=(HMdcLayerCorrPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar),G__get_linked_tagnum(&G__MdcTrackDDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar),G__get_linked_tagnum(&G__MdcTrackDDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsCell))) {
     HMdcSizesCellsCell *G__Lderived;
     G__Lderived=(HMdcSizesCellsCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsCell),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod))) {
     HMdcSizesCellsMod *G__Lderived;
     G__Lderived=(HMdcSizesCellsMod*)0x1000;
     {
       HMdcPlane *G__Lpbase=(HMdcPlane*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells))) {
     HMdcSizesCells *G__Lderived;
     G__Lderived=(HMdcSizesCells*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer))) {
     HMdcSizesCellsLayer *G__Lderived;
     G__Lderived=(HMdcSizesCellsLayer*)0x1000;
     {
       HMdcPlane *G__Lpbase=(HMdcPlane*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsSec))) {
     HMdcSizesCellsSec *G__Lderived;
     G__Lderived=(HMdcSizesCellsSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsSec),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayer))) {
     HMdcLayer *G__Lderived;
     G__Lderived=(HMdcLayer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayer),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack))) {
     HMdcClFnStack *G__Lderived;
     G__Lderived=(HMdcClFnStack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStacksArr))) {
     HMdcClFnStacksArr *G__Lderived;
     G__Lderived=(HMdcClFnStacksArr*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStacksArr),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells))) {
     HMdcList12GroupCells *G__Lderived;
     G__Lderived=(HMdcList12GroupCells*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells))) {
     HMdcList24GroupCells *G__Lderived;
     G__Lderived=(HMdcList24GroupCells*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus))) {
     HMdcClus *G__Lderived;
     G__Lderived=(HMdcClus*)0x1000;
     {
       HMdcList12GroupCells *G__Lpbase=(HMdcList12GroupCells*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim))) {
     HMdcClusSim *G__Lderived;
     G__Lderived=(HMdcClusSim*)0x1000;
     {
       HMdcClus *G__Lpbase=(HMdcClus*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HMdcList12GroupCells *G__Lpbase=(HMdcList12GroupCells*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells))) {
     HMdcSecListCells *G__Lderived;
     G__Lderived=(HMdcSecListCells*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster))) {
     HMdcCluster *G__Lderived;
     G__Lderived=(HMdcCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustersArrs))) {
     HMdcClustersArrs *G__Lderived;
     G__Lderived=(HMdcClustersArrs*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustersArrs),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParSec))) {
     HMdcDriftTimeParSec *G__Lderived;
     G__Lderived=(HMdcDriftTimeParSec*)0x1000;
     {
       TObjArray *G__Lpbase=(TObjArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParSec),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSeqCollection *G__Lpbase=(TSeqCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParSec),G__get_linked_tagnum(&G__MdcTrackDDictLN_TSeqCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParSec),G__get_linked_tagnum(&G__MdcTrackDDictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParSec),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCells))) {
     HMdcLayListCells *G__Lderived;
     G__Lderived=(HMdcLayListCells*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCells),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbCell))) {
     HMdcLookUpTbCell *G__Lderived;
     G__Lderived=(HMdcLookUpTbCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbCell),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayer))) {
     HMdcLookUpTbLayer *G__Lderived;
     G__Lderived=(HMdcLookUpTbLayer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayer),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbMod))) {
     HMdcLookUpTbMod *G__Lderived;
     G__Lderived=(HMdcLookUpTbMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbMod),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbSec))) {
     HMdcLookUpTbSec *G__Lderived;
     G__Lderived=(HMdcLookUpTbSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbSec),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb))) {
     HMdcLookUpTb *G__Lderived;
     G__Lderived=(HMdcLookUpTb*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb),G__get_linked_tagnum(&G__MdcTrackDDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcModListCells))) {
     HMdcModListCells *G__Lderived;
     G__Lderived=(HMdcModListCells*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcModListCells),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells))) {
     HMdcEvntListCells *G__Lderived;
     G__Lderived=(HMdcEvntListCells*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickPlane))) {
     HMdcKickPlane *G__Lderived;
     G__Lderived=(HMdcKickPlane*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickPlane),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatch))) {
     HMdcClusMetaMatch *G__Lderived;
     G__Lderived=(HMdcClusMetaMatch*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatch),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam))) {
     HMdcTrackParam *G__Lderived;
     G__Lderived=(HMdcTrackParam*)0x1000;
     {
       HMdcLineParam *G__Lpbase=(HMdcLineParam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLineParam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickCor))) {
     HMdcKickCor *G__Lderived;
     G__Lderived=(HMdcKickCor*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickCor),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcProjPlot))) {
     HMdcProjPlot *G__Lderived;
     G__Lderived=(HMdcProjPlot*)0x1000;
     {
       HMdcPlane *G__Lpbase=(HMdcPlane*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcProjPlot),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcProjPlot),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer))) {
     HMdc34ClFinderLayer *G__Lderived;
     G__Lderived=(HMdc34ClFinderLayer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderMod))) {
     HMdc34ClFinderMod *G__Lderived;
     G__Lderived=(HMdc34ClFinderMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderMod),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderSec))) {
     HMdc34ClFinderSec *G__Lderived;
     G__Lderived=(HMdc34ClFinderSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderSec),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder))) {
     HMdc34ClFinder *G__Lderived;
     G__Lderived=(HMdc34ClFinder*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder),G__get_linked_tagnum(&G__MdcTrackDDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEff))) {
     HMdcEff *G__Lderived;
     G__Lderived=(HMdcEff*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEff),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMod))) {
     HMdcEffMod *G__Lderived;
     G__Lderived=(HMdcEffMod*)0x1000;
     {
       HMdcEff *G__Lpbase=(HMdcEff*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMod),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEff),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMod),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyLayer))) {
     HMdcEfficiencyLayer *G__Lderived;
     G__Lderived=(HMdcEfficiencyLayer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyLayer),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyMod))) {
     HMdcEfficiencyMod *G__Lderived;
     G__Lderived=(HMdcEfficiencyMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyMod),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencySec))) {
     HMdcEfficiencySec *G__Lderived;
     G__Lderived=(HMdcEfficiencySec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencySec),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiency))) {
     HMdcEfficiency *G__Lderived;
     G__Lderived=(HMdcEfficiency*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiency),G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiency),G__get_linked_tagnum(&G__MdcTrackDDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiency),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiency),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantEvent))) {
     HMdcGeantEvent *G__Lderived;
     G__Lderived=(HMdcGeantEvent*)0x1000;
     {
       TObjArray *G__Lpbase=(TObjArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantEvent),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSeqCollection *G__Lpbase=(TSeqCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantEvent),G__get_linked_tagnum(&G__MdcTrackDDictLN_TSeqCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantEvent),G__get_linked_tagnum(&G__MdcTrackDDictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantEvent),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder))) {
     HMdcTrackFinder *G__Lderived;
     G__Lderived=(HMdcTrackFinder*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder),G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder),G__get_linked_tagnum(&G__MdcTrackDDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit))) {
     HMdcClusterToHit *G__Lderived;
     G__Lderived=(HMdcClusterToHit*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit),G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit),G__get_linked_tagnum(&G__MdcTrackDDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit))) {
     HMdc12Fit *G__Lderived;
     G__Lderived=(HMdc12Fit*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit),G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit),G__get_linked_tagnum(&G__MdcTrackDDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcIdealTracking))) {
     HMdcIdealTracking *G__Lderived;
     G__Lderived=(HMdcIdealTracking*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcIdealTracking),G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcIdealTracking),G__get_linked_tagnum(&G__MdcTrackDDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcIdealTracking),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcIdealTracking),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcHitSegFiller))) {
     HMdcHitSegFiller *G__Lderived;
     G__Lderived=(HMdcHitSegFiller*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcHitSegFiller),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInf))) {
     HMdcClusInf *G__Lderived;
     G__Lderived=(HMdcClusInf*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInf),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFit))) {
     HMdcClusFit *G__Lderived;
     G__Lderived=(HMdcClusFit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFit),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData))) {
     HMdcWireData *G__Lderived;
     G__Lderived=(HMdcWireData*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFit))) {
     HMdcWireFit *G__Lderived;
     G__Lderived=(HMdcWireFit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFit),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut))) {
     HMdcTrackFitInOut *G__Lderived;
     G__Lderived=(HMdcTrackFitInOut*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar))) {
     HMdcDriftTimePar *G__Lderived;
     G__Lderived=(HMdcDriftTimePar*)0x1000;
     {
       TObjArray *G__Lpbase=(TObjArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSeqCollection *G__Lpbase=(TSeqCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar),G__get_linked_tagnum(&G__MdcTrackDDictLN_TSeqCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar),G__get_linked_tagnum(&G__MdcTrackDDictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin))) {
     HMdcDriftTimeParBin *G__Lderived;
     G__Lderived=(HMdcDriftTimeParBin*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWiresArr))) {
     HMdcWiresArr *G__Lderived;
     G__Lderived=(HMdcWiresArr*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWiresArr),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParAngle))) {
     HMdcDriftTimeParAngle *G__Lderived;
     G__Lderived=(HMdcDriftTimeParAngle*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParAngle),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParMod))) {
     HMdcDriftTimeParMod *G__Lderived;
     G__Lderived=(HMdcDriftTimeParMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParMod),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitPar))) {
     HMdcTrackFitPar *G__Lderived;
     G__Lderived=(HMdcTrackFitPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitPar),G__get_linked_tagnum(&G__MdcTrackDDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitPar),G__get_linked_tagnum(&G__MdcTrackDDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitPar),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitPar),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter))) {
     HMdcTrackFitter *G__Lderived;
     G__Lderived=(HMdcTrackFitter*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterA))) {
     HMdcTrackFitterA *G__Lderived;
     G__Lderived=(HMdcTrackFitterA*)0x1000;
     {
       HMdcTrackFitter *G__Lpbase=(HMdcTrackFitter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterA),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterA),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackInfSim))) {
     HMdcTrackInfSim *G__Lderived;
     G__Lderived=(HMdcTrackInfSim*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackInfSim),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcFittersArray))) {
     HMdcFittersArray *G__Lderived;
     G__Lderived=(HMdcFittersArray*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcFittersArray),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HParCond))) {
     HParCond *G__Lderived;
     G__Lderived=(HParCond*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HParCond),G__get_linked_tagnum(&G__MdcTrackDDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HParCond),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HParCond),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMenu))) {
     HMdcEffMenu *G__Lderived;
     G__Lderived=(HMdcEffMenu*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMenu),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTargetMon))) {
     HMdcTargetMon *G__Lderived;
     G__Lderived=(HMdcTargetMon*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTargetMon),G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTargetMon),G__get_linked_tagnum(&G__MdcTrackDDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTargetMon),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTargetMon),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInfSim))) {
     HMdcClusInfSim *G__Lderived;
     G__Lderived=(HMdcClusInfSim*)0x1000;
     {
       HMdcClusInf *G__Lpbase=(HMdcClusInf*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInfSim),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInf),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInfSim),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus))) {
     HMdcDGaus *G__Lderived;
     G__Lderived=(HMdcDGaus*)0x1000;
     {
       TF1 *G__Lpbase=(TF1*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus),G__get_linked_tagnum(&G__MdcTrackDDictLN_TF1),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TFormula *G__Lpbase=(TFormula*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus),G__get_linked_tagnum(&G__MdcTrackDDictLN_TFormula),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus),G__get_linked_tagnum(&G__MdcTrackDDictLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus),G__get_linked_tagnum(&G__MdcTrackDDictLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus),G__get_linked_tagnum(&G__MdcTrackDDictLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRichCorr))) {
     HMdcRichCorr *G__Lderived;
     G__Lderived=(HMdcRichCorr*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRichCorr),G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRichCorr),G__get_linked_tagnum(&G__MdcTrackDDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRichCorr),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRichCorr),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock))) {
     HSeqArrBlock *G__Lderived;
     G__Lderived=(HSeqArrBlock*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter))) {
     HSeqArrIter *G__Lderived;
     G__Lderived=(HSeqArrIter*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr))) {
     HSeqArr *G__Lderived;
     G__Lderived=(HSeqArr*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreWires))) {
     HMdcStoreWires *G__Lderived;
     G__Lderived=(HMdcStoreWires*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreWires),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreEvents))) {
     HMdcStoreEvents *G__Lderived;
     G__Lderived=(HMdcStoreEvents*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreEvents),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreTracks))) {
     HMdcStoreTracks *G__Lderived;
     G__Lderived=(HMdcStoreTracks*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreTracks),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreClusters))) {
     HMdcStoreClusters *G__Lderived;
     G__Lderived=(HMdcStoreClusters*)0x1000;
     {
       HMdcStoreTracks *G__Lpbase=(HMdcStoreTracks*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreClusters),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreTracks),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreClusters),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2))) {
     HMdcDeDx2 *G__Lderived;
     G__Lderived=(HMdcDeDx2*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2),G__get_linked_tagnum(&G__MdcTrackDDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2),G__get_linked_tagnum(&G__MdcTrackDDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2Maker))) {
     HMdcDeDx2Maker *G__Lderived;
     G__Lderived=(HMdcDeDx2Maker*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2Maker),G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2Maker),G__get_linked_tagnum(&G__MdcTrackDDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2Maker),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2Maker),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterB))) {
     HMdcTrackFitterB *G__Lderived;
     G__Lderived=(HMdcTrackFitterB*)0x1000;
     {
       HMdcTrackFitterA *G__Lpbase=(HMdcTrackFitterA*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterB),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterA),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HMdcTrackFitter *G__Lpbase=(HMdcTrackFitter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterB),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterB),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerParam))) {
     HMdcAlignerParam *G__Lderived;
     G__Lderived=(HMdcAlignerParam*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerParam),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD))) {
     HMdcAlignerD *G__Lderived;
     G__Lderived=(HMdcAlignerD*)0x1000;
     {
       HMdcTrackFinder *G__Lpbase=(HMdcTrackFinder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD),G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD),G__get_linked_tagnum(&G__MdcTrackDDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFitSim))) {
     HMdcClusFitSim *G__Lderived;
     G__Lderived=(HMdcClusFitSim*)0x1000;
     {
       HMdcClusFit *G__Lpbase=(HMdcClusFit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFitSim),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFitSim),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcMinimize))) {
     HMdcMinimize *G__Lderived;
     G__Lderived=(HMdcMinimize*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcMinimize),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFitSim))) {
     HMdcWireFitSim *G__Lderived;
     G__Lderived=(HMdcWireFitSim*)0x1000;
     {
       HMdcWireFit *G__Lpbase=(HMdcWireFit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFitSim),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFitSim),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustFromSeg))) {
     HMdcClustFromSeg *G__Lderived;
     G__Lderived=(HMdcClustFromSeg*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustFromSeg),G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustFromSeg),G__get_linked_tagnum(&G__MdcTrackDDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustFromSeg),G__get_linked_tagnum(&G__MdcTrackDDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustFromSeg),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantSeg))) {
     HMdcGeantSeg *G__Lderived;
     G__Lderived=(HMdcGeantSeg*)0x1000;
     {
       HMdcList12GroupCells *G__Lpbase=(HMdcList12GroupCells*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantSeg),G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantSeg),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack))) {
     HMdcGeantTrack *G__Lderived;
     G__Lderived=(HMdcGeantTrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack),G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMdcTrackDDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("ULong64_t",109,-1,0,-1);
   G__setnewtype(-1,"Portable unsigned long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcTrackDDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcTrackDDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcTrackDDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcTrackDDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Int_t (*)[4]",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixD",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcTrackDDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcTrackDDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__MdcTrackDDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Double_t (*)(TObject*, Int_t&, Double_t*)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HMdcTrackDContFact */
static void G__setup_memvarHMdcTrackDContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDContFact));
   { HMdcTrackDContFact *p; p=(HMdcTrackDContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcPointPlane */
static void G__setup_memvarHMdcPointPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointPlane));
   { HMdcPointPlane *p; p=(HMdcPointPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrapPlane */
static void G__setup_memvarHMdcTrapPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrapPlane));
   { HMdcTrapPlane *p; p=(HMdcTrapPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointPlane),-1,-1,2,"points[16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nPoints=",0,"number points");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"xMinPoint=",0,"point number with minimal x");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"xMaxPoint=",0,"point number with maximal x");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"yMinPoint=",0,"point number with minimal y");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"yMaxPoint=",0,"point number with maximal y");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"dir=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrap */
static void G__setup_memvarHMdcTrap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrap));
   { HMdcTrap *p; p=(HMdcTrap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"points[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"dbPoint=",0,"double point");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcPlane */
static void G__setup_memvarHMdcPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane));
   { HMdcPlane *p; p=(HMdcPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"parA=",0,"Plane: parA*x+parB*y+c*z=parD  (c=1 !!!)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"parB=",0,"parA*parA+parB*parB+c*c must be > 0 and c != 0 !!!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"parD=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcPointOnPlane */
static void G__setup_memvarHMdcPointOnPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane));
   { HMdcPointOnPlane *p; p=(HMdcPointOnPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane),-1,-1,2,"pl=",0,"plane");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLineParam */
static void G__setup_memvarHMdcLineParam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLineParam));
   { HMdcLineParam *p; p=(HMdcLineParam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane),-1,-1,2,"point1=",0,"First point on the line");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane),-1,-1,2,"point2=",0,"Second point on the line");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"dir=",0,"Line direction");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sec=",0,"line in coor.sys. of this sector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mod=",0,"line in coor.sys. of this module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcGetContainers */
static void G__setup_memvarHMdcGetContainers(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers));
   { HMdcGetContainers *p; p=(HMdcGetContainers*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers),-1,-2,2,"fMdcGetContainers=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pMdcCal1Cat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pGeantKineCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pGeantMdcCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pMdcClusCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pMdcClusFitCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pMdcWireFitCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pMdcClusInfCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pMdcTrkCandCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HRuntimeDb),-1,-1,2,"rtdb=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isRtdb=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSpectrometer),-1,-1,2,"spectr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerGeomPar),-1,-1,2,"fMdcLayerGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isMdcLayerGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeomPar),-1,-1,2,"fMdcGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isMdcGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDetector),-1,-1,2,"fMdcDetector=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isMdcDetector=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSpecGeomPar),-1,-1,2,"fSpecGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isSpecGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeomStruct),-1,-1,2,"fMdcGeomStruct=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isMdcGeomStruct=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRawStruct),-1,-1,2,"fMdcRawStruct=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isMdcRawStruct=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookupGeom),-1,-1,2,"fMdcLookupGeom=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isMdcLookupGeom=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar),-1,-1,2,"fMdcLayerCorrPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isMdcLayerCorrPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isMdcSetupInited=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"modSetup[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"segSetup[6][2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"numMods[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"isSimulation=",0,"0-real data, 1-sim.data, 2-merge");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLayerCorrPar */
static void G__setup_memvarHMdcLayerCorrPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar));
   { HMdcLayerCorrPar *p; p=(HMdcLayerCorrPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"firstWire[72]=",0,"first cell in shifted part of layer");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"shift[72]=",0,"shift value (in mkm!)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"wireOrientCorr[72]=",0,"correction for wire orientation (in deg!)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nMdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nLay=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numCorrLayers=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcSizesCellsCell */
static void G__setup_memvarHMdcSizesCellsCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsCell));
   { HMdcSizesCellsCell *p; p=(HMdcSizesCellsCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"wirePnt1=",0,"wire geometry, 2-poins in sector coor.sys.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"wirePnt2=",0,"first p. connected to readout");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"status=",0,"=kTRUE if wire conected to readout");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"readOutSide=",0,"Wire readout side:");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xReadout=",0,"position of the wire point connected to readout");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"length=",0,"wire length");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"yWirePos=",0,"y[mm] wire position in rotated layer coor.sys.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcSizesCellsMod */
static void G__setup_memvarHMdcSizesCellsMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod));
   { HMdcSizesCellsMod *p; p=(HMdcSizesCellsMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"sector=",0,"Address");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"module=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform),-1,-1,2,"sysRSec=",0,"Transformation sector<->module");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"tSysRSec[12]=",0,"---");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"tSysRSecOp[12]=",0,"Optimized version of tSysRSec");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"ct[6]=",0,"Lookup table for funct. calcMdcHit, ...");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer),-1,-1,2,"mdcSCLayers[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsSec),-1,-1,2,"pToSec=",0,"Pointer to corresponding sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcSizesCells */
static void G__setup_memvarHMdcSizesCells(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells));
   { HMdcSizesCells *p; p=(HMdcSizesCells*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells),-1,-2,2,"fMdcSizesCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers),-1,-1,2,"fGetCont=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerGeomPar),-1,-1,2,"fLayerGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"verLayerGeomPar[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeomPar),-1,-1,2,"fGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"verGeomPar[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"mdcStatus[6][4]=",0,"kTRUE - mdc exist");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nModsSeg[6][2]=",0,"number of mdc per segment");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeomStruct),-1,-1,2,"fMdcGeomStruct=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookupRaw),-1,-1,2,"fMdcLookupRaw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"verLookupRaw[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRawStruct),-1,-1,2,"fMdcRawStruct=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSpecGeomPar),-1,-1,2,"fSpecGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar),-1,-1,2,"fLayerCorrPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers to HMdcSizesCellsSec");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"changed=",0,"kTRUE if SizesCells was recalculated");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"geomModified=",0,"kTRUE if mdc geom. was changed by user");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numTargets=",0,"number of targets");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"targets=",0,"targets");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"tarHalfThick=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"targ3p[3]=",0,"[0] First point of target in lab.sys.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcSizesCellsLayer */
static void G__setup_memvarHMdcSizesCellsLayer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer));
   { HMdcSizesCellsLayer *p; p=(HMdcSizesCellsLayer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"sector=",0,"Address:           ");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"module=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"layer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerGeomParLay),-1,-1,2,"pLayerGeomParLay=",0,"Layer parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVolume),-1,-1,2,"pGeomVol=",0,"Layer geometry");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nCells=",0,"Number of wires in layer");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"halfCatDist=",0,"Half of cathodes distance");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"pitch=",0,"Distance between wires");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"invPitch=",0,"= 1./pitch");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"halfPitch=",0,"Half of \"pitch\"");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"halfCDsDivPitch=",0,"halfCatDist/pitch");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"maxDriftDist=",0,"= sqrt(halfPitch^2+halfCatDist^2)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform),-1,-1,2,"sysRSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"tSysRSec[12]=",0,"Transformation sector <-> layer");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform),-1,-1,2,"sysRMod=",0,"Transformation module<->layer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsCell),-1,-1,2,"cellsArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod),-1,-1,2,"pToMod=",0,"Pointer to corresponding module");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"wireOrient=",0,"Wire orientation in deg.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"wireOffset=",0,"= (CentralWireNr()-1.)*pitch");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cellOffset=",0,"= CentralWireNr()-0.5");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cosWireOr=",0,"Cosine of wire orientation");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"sinWireOr=",0,"Sine of wire orientation angle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"zModule=",0,"z of module plane in coor.sys. layer");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform),-1,-1,2,"rotLaySysRMod=",0,"Transformation module <->");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform),-1,-1,2,"rotLaySysRSec=",0,"Transformation sector <->");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"tRLaySysRSec[12]=",0,"layer sys. rotated along WireOr.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"pntToCell[4]=",0,"Calc. cell# by point in sector coor.system ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"firstCellPart2=",0,"First cell of the layer second part");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"wireOrientPart2=",0,"Wire orientation in deg.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"wireOffsetPart2=",0,"= wireOffset - shift");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cellOffsetPart2=",0,"= cellOffset - shift/pitch");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cosWireOrPart2=",0,"Cosine of wire orientation");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"sinWireOrPart2=",0,"Sine of wire orientation angle");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform),-1,-1,2,"rotLaySysRModPart2=",0,"Transformation module <->");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform),-1,-1,2,"rotLaySysRSecPart2=",0,"Transformation sector <->");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"tRLaySysRSecPart2[12]=",0,"rotated on WireOr deg. layer");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"sensWiresThick=",0,"sensitive wires thickness");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"zGeantHit=",0,"z position of geant hits");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform),-1,-1,2,"geantSysRMod=",0,"Transf. mdc <-> geantHitsPlane");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform),-1,-1,2,"geantSysRSec=",0,"Transf. sector <-> geantHitsPlane");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane),-1,-1,2,"geantPlane=",0,"geant hits plane in sec.sys.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcSizesCellsSec */
static void G__setup_memvarHMdcSizesCellsSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsSec));
   { HMdcSizesCellsSec *p; p=(HMdcSizesCellsSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"sector=",0,"Address                                         ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),-1,-1,2,"array=",0,"HMdcSizesCellsMod array                         ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform),-1,-1,2,"sysRLab=",0,"Transformation sector<->lab.sys.     ");
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,2,"mdcStatSec=",0,"kTRUE - mdc exist ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numTargets=",0,"number of targets");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"targets=",0,"targets in coor.sys. of sector");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"targ3p[3]=",0,"[0] First point of target in sector coor.sys.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells),-1,-1,2,"pToSC=",0,"Pointer to HMdcSizesCells object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLayer */
static void G__setup_memvarHMdcLayer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayer));
   { HMdcLayer *p; p=(HMdcLayer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TVector2),-1,-1,4,"layerP[6][4][6][4]=",0,"4 corner points for each layer          (layer sys)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TVector2),-1,-1,4,"layerPcrop[6][4][6][4]=",0,"4 corner points for each croped layer   (layer sys)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"xcrop[4][2]=",0,"module wise x at lower and upper edge  (symmetric)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ycrop[4][2]=",0,"module wise y low and up");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,4,"targetMidPoint=",0,"lab sys");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane),-1,-1,4,"plMdc[6]=",0,"lab sys");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcClFnStack */
static void G__setup_memvarHMdcClFnStack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack));
   { HMdcClFnStack *p; p=(HMdcClFnStack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"stack=",0,"stack array");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"stackEnd=",0,"address of end stack");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"stackPos=",0,"address of stack position");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"stackSize=",0,"stackSize;");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indexInArr=",0,"index in HMdcClFnStacksArr == clusterAmplitude - 1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcClFnStacksArr */
static void G__setup_memvarHMdcClFnStacksArr(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStacksArr));
   { HMdcClFnStacksArr *p; p=(HMdcClFnStacksArr*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack),-1,-1,2,"stacksArr[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"amplitude=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTBArray */
static void G__setup_memvarHMdcTBArray(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTBArray));
   { HMdcTBArray *p; p=(HMdcTBArray*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"nTBitLookUp[256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"pTBitLookUp[4][256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"nextTBit[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"prevTBit[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcBArray */
static void G__setup_memvarHMdcBArray(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcBArray));
   { HMdcBArray *p; p=(HMdcBArray*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"nBitLookUp[256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"setBitLUp[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"unsetBitLUp[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"pBitLookUp[8][256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"highBit[256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"nextBit[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"prevBit[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"nLayOrientation[64]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"is40degCross[64]=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcList12GroupCells */
static void G__setup_memvarHMdcList12GroupCells(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells));
   { HMdcList12GroupCells *p; p=(HMdcList12GroupCells*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCellscLcLdA),-1,-2,4,"laySz=12LL",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"arr[144]=",0,"144= 12bytes * 12layers");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"firstCell[12]=",0,"firstCell[layer] - first cell in layer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcList24GroupCells */
static void G__setup_memvarHMdcList24GroupCells(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells));
   { HMdcList24GroupCells *p; p=(HMdcList24GroupCells*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCellscLcLdA),-1,-2,4,"laySz=12LL",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"arr[288]=",0,"288= 12bytes * 24layers ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"firstCell[24]=",0,"firstCell[layer] - first cell in layer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcClus */
static void G__setup_memvarHMdcClus(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus));
   { HMdcClus *p; p=(HMdcClus*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"sec=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"seg=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"typeClFinder=",0,"=0 - finding in all mdc in sec.");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"mod=",0,"=-1 if typeClFinder=0");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"index=",0,">=0 - OWN index in clus.cat");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"x=",0,"x-coordinate of cluster");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"y=",0,"y-coordinate of cluster");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xTarg=",0,"x-target(Mdc1-2) or point on kick plane (Mdc3-4)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yTarg=",0,"y-target(Mdc1-2) or point on kick plane (Mdc3-4)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zTarg=",0,"z-target(Mdc1-2) or point on kick plane (Mdc3-4)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"errX=",0,"Error of x-coordinate of cluster");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"errY=",0,"Error of y-coordinate of cluster");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"errXTarg=",0,"Error of xTarg(Mdc1-2) or point on kickplane (Mdc3-4)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"errYTarg=",0,"Error of yTarg(Mdc1-2) or point on kickplane (Mdc3-4)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"errZTarg=",0,"Error of zTarg(Mdc1-2) or point on kickplane (Mdc3-4)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sumWt=",0,"Sum. of bins' weights in cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nBins=",0,"Num. of bins in cluster");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"minCl1=",0,"minCl1 mdc 1or3, minCl2 mdc 2or4 (depending on seg.)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"minCl2=",0,"clusters with bin content >= maxCl were searched");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"realLevel=",0,"real level of cluster finder for this cluster");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nMergedClus=",0,"Number of merged clusters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indexPar=",0,"index of parent cluster in catMdcClus (def.: =-1)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indCh1=",0,"indexes region of childs in catMdcClus (def.: = -1)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indCh2=",0,"(def.: = -2)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"parA=",0,"Project plane: parA*x+parB*y+z=parD");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"parB=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"parD=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"status=",0,"user var.");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fakeFlag=",0,"Flag of fake suppression code");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"clFnLevelM1=",0,"level of cluster finder in mod.1");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"clusSizeM1=",0,"number of bins in mod.1 cluster");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nDrTimesM1=",0,"number of drift times in cluster ");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nMergClusM1=",0,"number of merged clusters ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma1M1=",0,"cluster shape mod.1:");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma2M1=",0,"sigma1 - long axis, sigma2 - short axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"alphaM1=",0,"angle (deg.) of long axis and X axis");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"clFnLevelM2=",0,"level of cluster finder in mod.2");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"clusSizeM2=",0,"Num. of bins in mod.2 cluster");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nDrTimesM2=",0,"number of drift times in cluster ");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nMergClusM2=",0,"number of merged clusters");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma1M2=",0,"cluster shape mod.2:");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma2M2=",0,"sigma1 - long axis, sigma2 - short axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"alphaM2=",0,"angle (deg.) of long axis and X axis");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"segIndex=",0,"index of HMdcSeg object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcClusSim */
static void G__setup_memvarHMdcClusSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim));
   { HMdcClusSim *p; p=(HMdcClusSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTracks=",0,"num. of GEANT tracks in cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"listTr[5]=",0,"list of tracks");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nTimes[5]=",0,"num. of hits in cluster from track");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"nLayers[5][2]=",0,"list of layers with hits from track (bits array)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"nDigiTimes[5]=",0,"num. of digitized dr.times in segment (or module)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"trackStatus[5]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xGeant[5]=",0,"GEANT hit position on the proj.plane");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yGeant[5]=",0,"GEANT hit position on the proj.plane");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"nNotFakeTracks=",0,"Number of tracks with non fake contribution");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"ioSMatchStatus=",0,"> 0 - num. of not fake tracks with IOseg matching");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTracksM[2]=",0,"! [mod] num. of GEANT tracks in cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"listTrM[2][5]=",0,"! list of tracks");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nTimesM[2][5]=",0,"! num. of hits in cluster from track");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcSecListCells */
static void G__setup_memvarHMdcSecListCells(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells));
   { HMdcSecListCells *p; p=(HMdcSecListCells*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcModListCells),-1,-1,2,"list[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCluster */
static void G__setup_memvarHMdcCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster));
   { HMdcCluster *p; p=(HMdcCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells),-1,-1,2,"lCells1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells),-1,-1,2,"lCells2=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"segment=",0,"=0-lCells1 is used; =1-lCells2; -1 - lCells1&2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numCells1=",0,"number of cells in lCells1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numCells2=",0,"number of cells in lCells2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nLayers1=",0,"number of layers in lCells1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nLayers2=",0,"number of layers in lCells2");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"status=",0,"=kFALSE - removed by merging");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"flag=",0,"for combined clusters, >0 - cluster saved");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster),-1,-1,2,"clusMerg=",0,"clusMerg=0 if status=kTRUE else -merged cluster");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nMergedClus=",0,"Number of merged clusters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nBins=",0,"num. of bins in cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sumWt=",0,"sum weights of bins");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"meanX=",0,"var. for calculation of cluster shape");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"meanY=",0,"-/-");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"meanXX=",0,"-/-");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"meanYY=",0,"-/-");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"meanYX=",0,"-/-");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"meanXWt=",0,"position of cluster (calc. with weights)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"meanYWt=",0,"-/-");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"meanXXWt=",0,"X dispersion");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"meanYYWt=",0,"Y dispersion");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"minWt=",0,"minimal value of Wt");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iXFirst=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iYFirst=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"x0=",0,"x of the first bin");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"y0=",0,"y of the first bin");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xSt=",0,"bin size");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ySt=",0,"bin size");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"fakeFlag=",0,"flag of fake suppression code");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"realFlag=",0,"flag of fake suppression code");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"x=",0,"cluster position");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"y=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"errX=",0,"position errors");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"errY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma1=",0,"cluster shape");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"alpha=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster),-1,-1,2,"clusMod1=",0,"mod.1 cluster address");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster),-1,-1,2,"clusMod2=",0,"mod.2 cluster address");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcClustersArrs */
static void G__setup_memvarHMdcClustersArrs(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustersArrs));
   { HMdcClustersArrs *p; p=(HMdcClustersArrs*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustersArrs),-1,-2,2,"pMdcClustersArrs=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster),-1,-1,2,"clusArr[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"arrSize[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dXWind1=",0,"window for clusters comparison in seg.1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dYWind1=",0,"window for clusters comparison in seg.1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dXWind2=",0,"window for clusters comparison in seg.1\\2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dYWind2=",0,"window for clusters comparison in seg.2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcDriftTimeParSec */
static void G__setup_memvarHMdcDriftTimeParSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParSec));
   { HMdcDriftTimeParSec *p; p=(HMdcDriftTimeParSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLayListCells */
static void G__setup_memvarHMdcLayListCells(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCells));
   { HMdcLayListCells *p; p=(HMdcLayListCells*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCellscLcLdA),-1,-2,2,"arrSize=56LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCellscLcLdA),-1,-2,2,"maxCells=224LL",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"arr[56]=",0,"cells lis (two bits per wire)");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-1,2,"arrEnd=",0,"pointer of last element in \"arr\"");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"drTime1=",0,"array of drift times (time1!)");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"drTime2=",0,"array of drift times (time2!)");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"tof1=",0,"array of TOFs (time1!)");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"tof2=",0,"array of TOFs (time2!)");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-1,2,"nClust=",0,"array of cluster counters");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-1,2,"nRClust=",0,"array of \"real\" cluster counters");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-1,2,"nFitted=",0,"array of fitted wires counters");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-1,2,"nRFitted=",0,"array of \"real\" fitted wires counters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nFittedTot=",0,"total amount of fitted wires in layer");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"gnTrackNum1=",0,"array of geant track num. (time1!)");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"gnTrackNum2=",0,"array of geant track num. (time2!)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookUpTbCell */
static void G__setup_memvarHMdcLookUpTbCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbCell));
   { HMdcLookUpTbCell *p; p=(HMdcLookUpTbCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"nLines=",0,"Number of lines (Y-dir.) in cell projections ");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"line=",0,"Counter of lines. After filling should be eq.nLines");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"yBinMin=",0,"First line in the projection");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"yBinMax=",0,"Last line in the projection");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"xBinMin=",0,"First X bin in the projection for each Y line");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"xBinMax=",0,"Last X bin in the projection for each Y line");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"alphaMean=",0,"[deg.] Mean value for impact angle");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"distCutFT=",0,"[mm] Full target projection. =yPrUncerFTarg*dDistCut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"distCut1T=",0,"[mm] One or piece target pr..=yPrUncer1Targ*dDistCut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"distCutVF=",0,"[mm] For vertex finder.      =yPrUncer1Targ*dDistCutVF");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDistMinCut=",0,"= tdcTDist - yProjUncer1T*dDistCut");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDistMaxCut=",0,"= tdcTDist + yProjUncer1T*dDistCut");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDistMinCut2VF=",0,"= (tdcTDist - yProjUncer1T*dDistCutVF)^2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDistMaxCut2VF=",0,"= (tdcTDist + yProjUncer1T*dDistCutVF)^2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookUpTbLayer */
static void G__setup_memvarHMdcLookUpTbLayer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayer));
   { HMdcLookUpTbLayer *p; p=(HMdcLookUpTbLayer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer),-1,-1,2,"pSCellLay=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbCell),-1,-1,2,"pLTCellArr=",0,"max 208");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nCells=",0,"Number of cells in layer");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayercLcLDistCalcLuTb),-1,-1,2,"layPart1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayercLcLDistCalcLuTb),-1,-1,2,"layPart2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayercLcLDistCalcLuTb),-1,-1,2,"currLayPart=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"lTargPnt=",0,"Num_of_elements_in_arrays");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"yWirePos=",0,"= HMdcSizesCellsCell::getWirePos() for the current cell");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDmin=",0,"= HMdcLookUpTbCell::dDistMinCut for the current cell");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDmax=",0,"= HMdcLookUpTbCell::dDistMaxCut for the current cell");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookUpTbMod */
static void G__setup_memvarHMdcLookUpTbMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbMod));
   { HMdcLookUpTbMod *p; p=(HMdcLookUpTbMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),-1,-1,2,"array=",0,"Array of HMdcLookUpTbLayer objects");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nLayers=",0,"Number of working layers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookUpTbSec */
static void G__setup_memvarHMdcLookUpTbSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbSec));
   { HMdcLookUpTbSec *p; p=(HMdcLookUpTbSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"sector number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"segment=",0,"=0 -inner segment, -1 inner&outer");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nSegments=",0,"num. of segments for clus. finder");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nModules=",0,"num. of modules for cluster finder.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxNModules=",0,"num. of modules (eq.2 or 4)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isCoilOff=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nBinX=",0,"num.bins along axis X,");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"xLow=",0,"low edge of X");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"xUp=",0,"upper edge of X");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"xStep=",0,"step X = (xUp-xLow)/nBinX");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nBinY=",0,"num.bins along axis Y");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"yLow=",0,"low edge of Y");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"yUp=",0,"upper edge of Y");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"yStep=",0,"step Y= (yUp-yLow)/nBinY");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xFirstBin=",0,"x of first bin");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yFirstBin=",0,"y of first bin");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"xBinsPos=",0,"Bins positions");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"yBinsPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"size=",0,"project plot size");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-2,2,"hPlMod[4]=",0,"hPlMod[0] - mod.1, ...");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"hPlModsSize=",0,"real length of hPlMod[mod] (can be >size)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sizeBAr=",0,"Size of the bit array plotBAr (in bytes)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"sizeBArSt=",0,"sizeBArSt>=sizeBAr;");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-2,2,"plotBArSc=",0,"Bit array (1 bit - 1 bin) (for scaning).");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"maxBinBAr4Sc=",0,"regiong of bins for scaning");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"minBinBAr4Sc=",0,(char*)NULL);
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-2,2,"plotBArM[4]=",0,"Bit arraies for MDC's.");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"maxBinBAr4M[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"minBinBAr4M[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,2,"xMin[4]=",0,"for cleaning proj. plots");
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,2,"xMax[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack),-1,-1,2,"stack=",0,"stack");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStacksArr),-1,-1,2,"stacksArr=",0,"array of stacks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcLookUpTbMod");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fClusCat=",0,"category of clusters");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locClus=",0,"location of cluster category");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isGeant=",0,"=kTRUE - geant data");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"trackListFlag=",0,"=kTRUE - filling tracks list in ClusSim");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"noFiredCells=",0,"=kTRUE if no fired cells");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxAmp[4]=",0,"number of fired layes in MDC");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells),-1,-1,2,"pListCells=",0,"list of fired wires in current event");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"minAmp[4]=",0,"max.clus. for mdc1,2,3,4");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nMods=",0,"num. of modules in sector for cl.finding");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"typeClFinder=",0,"=0 - finding in all mdc in sec.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"neighbBins[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane),-1,-1,2,"prPlane=",0,"Projections plane");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"target[3]=",0,"target");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"eTarg[3]=",0,"errors of target position");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"targVc[3]=",0,"[0] First target point in sec.coor.sys.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"doVertexFn=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDistCutVF=",0,"As dDistCut but fo vertex finder. <0. no vertex finder.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"levelVertF=",0,"Level for vertex finder.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"levelVertFPP=",0,"Level for vertex finder project plot.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"lTargPnt=",0,"Num. of target points for vertex finder.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indFirstTPnt=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indLastTPnt=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"targetPnts[250]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"vertZErr=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"vertexStat=",0,"It is HMdcLookUpTb::vertexStat");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"vertexPoint=",0,"Result of vertex finder");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nClusters=",0,"counter of clusters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2C),-1,-1,2,"hist=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"plBining=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustersArrs),-1,-1,2,"pClustersArrs=",0,"clusters arraies");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nModSeg[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"clusArrSize=",0,"size of clusArr,clusArrM1,clusArrM2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster),-1,-1,2,"clusArr=",0,"array of clusters parameters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nClsArr=",0,"counter of clusters in array");
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-2,2,"clusIndM1=",0,"array of MDC1 clusters indexis");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"clIndArrSzM1=",0,"clusIndM1 array size");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster),-1,-1,2,"clusArrM1=",0,"array of clusters parameters in MDC1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nClsArrM1=",0,"counter of clusters in MDC1");
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-2,2,"clusIndM2=",0,"array of MDC2 clusters indexis");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"clIndArrSzM2=",0,"clusIndM2 array size");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster),-1,-1,2,"clusArrM2=",0,"array of clusters parameters in MDC2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nClsArrM2=",0,"counter of clusters in MDC2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"clusArrInd=",0,"current clus.array index:");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster),-1,-1,2,"cClusArr=",0,"current clusters array");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"cNClusArr=",0,"current clusters array counter");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cSeg=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cMod1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cMod2=",0,(char*)NULL);
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-1,2,"cPlModF=",0,(char*)NULL);
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-1,2,"cPlModS=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cMod=",0,(char*)NULL);
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-1,2,"cPlMod=",0,(char*)NULL);
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,2,"clusInd=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbMod),-1,-1,2,"cFMod=",0,"current module");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-1,2,"cHPlModM=",0,"current mod.pr.plot");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster),-1,-1,2,"clus=",0,"current cluster");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isClstrInited=",0,"flag for \"clus\" object");
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,2,"cXMinM=",0,"current xMin[mod]");
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,2,"cXMaxM=",0,"current xMax[mod]");
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,2,"pXMinM=",0,"xMin[mod] for previous mdc");
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,2,"pXMaxM=",0,"xMax[mod] for previous mdc");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-1,2,"cPlotBAr=",0,"current bit array");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nLMaxCl=",0,"cluster region on proj.plane (bins)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nLMinCl=",0,"nLMinCl-nLMaxCl region of lines");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"xMaxCl=",0,"regions of x bins for each line");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"xMinCl=",0,"in nLMinCl-nLMaxCl region");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus),-1,-1,2,"fClus=",0,"pointer to cluster;");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nFirstClust=",0,"needed for clusters merger");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isSlotAv[2]=",0,"=kFALSE if cluster slot not available");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"layerOrder[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"current MDC module");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"layer=",0,"layer");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"cell");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tdcTime=",0,"and time");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"add=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCells),-1,-1,2,"pLayLCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayer),-1,-1,2,"pLUTLayer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbCell),-1,-1,2,"pLUTCell=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsSec),-1,-1,2,"pSCellSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParSec),-1,-1,2,"pDriftTimeParSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"constUncert=",0,"Constant part in LookUpTbCell::yProjUncer");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDCutCorr[4][6]=",0,"Correction for layer cut ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDistCut=",0,"Cut:  dDist/yProjUncer < dDistCut*dDCutCorr[mod][layer]");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"yDDistCorr=",0,"Cut correction for y-bins");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useDriftTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fakeSuppFlag=",0,"0-don't do; 1-do; 2-set flag only (don't remove obj.)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookUpTb */
static void G__setup_memvarHMdcLookUpTb(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb));
   { HMdcLookUpTb *p; p=(HMdcLookUpTb*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb),-1,-2,2,"fMdcLookUpTb=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),-1,-1,2,"array=",0,"array of HMdcLookUpTbSec objects");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isCoilOff=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"typeClFinder=",0,"=0 - finding in all mdc in sec.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers),-1,-1,2,"fGetCont=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells),-1,-1,2,"fSizesCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeomPar),-1,-1,2,"fMdcGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSpecGeomPar),-1,-1,2,"fSpecGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerGeomPar),-1,-1,2,"fLayerGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HStart2GeomPar),-1,-1,2,"fStartGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fMdcClusCat=",0,"category of clusters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"targLenInc[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"quietMode=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack),-1,-1,2,"stack=",0,"stack");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStacksArr),-1,-1,2,"stacksArr=",0,"array of stacks");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useDriftTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"constUncert=",0,"Const. part for LookUpTbCell::distCut...");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDCutCorr[4][6]=",0,"Correction for layer cut ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDistCut=",0,"Cut:  dDist/yProjUncer < dDistCut*dDCutCorr[mod][lay]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDistYCorr=",0,"Cut correction vs Ybin");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numVFPoins=",0,"Num. of points for the vertex finder");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"use3PointMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"targetPnts[250]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"vertZErr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"vertexStat[250]=",0,"???");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numStartDPoints=",0,"Num. of points of start detector for the vertex finder");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcModListCells */
static void G__setup_memvarHMdcModListCells(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcModListCells));
   { HMdcModListCells *p; p=(HMdcModListCells*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCells),-1,-1,2,"list[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcEvntListCells */
static void G__setup_memvarHMdcEvntListCells(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells));
   { HMdcEvntListCells *p; p=(HMdcEvntListCells*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells),-1,-1,2,"list[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pMdcCal1Cat=",0,"category MdcCal1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,2,"iterMdcCal1=",0,"iterator for MdcCal1 category");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isGeant=",0,"=kTRUE for GEANT data.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTimeCut),-1,-1,2,"pDrTimeCut=",0,"drift time cuts ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells),-1,-2,2,"pGlobalLCells=",0,"pointer to the global object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcKickPlane */
static void G__setup_memvarHMdcKickPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickPlane));
   { HMdcKickPlane *p; p=(HMdcKickPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDzLimit[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDz[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fC[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"parA[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"parB[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"parD[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcClusMetaMatch */
static void G__setup_memvarHMdcClusMetaMatch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatch));
   { HMdcClusMetaMatch *p; p=(HMdcClusMetaMatch*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HTofGeomPar),-1,-1,4,"pTofGeometry=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"pCatTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,4,"iterTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"pCatTofCluster=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,4,"iterTofCluster=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HRpcGeomPar),-1,-1,4,"pRpcGeometry=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"pCatRpc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,4,"iterRpc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HShowerGeometry),-1,-1,4,"pShrGeometry=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"pCatShower=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,4,"iterShower=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isGeant=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMetaMatchPar),-1,-1,4,"pMatchPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qualityMulp2=",0,"Incr.qual.cut by sqrt(qualityMulp2)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2TofXi[6]=",0,"=1./sigmaTofX^2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2TofYi[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"offsetTofX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"offsetTofY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"quality2TofCut[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2RpcX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2RpcY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"offsetRpcX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"offsetRpcY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"quality2RpcCut[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2ShrX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2ShrY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"offsetShrX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"offsetShrY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"quality2ShrCut[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"rpcSecModTrans[6][12]=",0,"One module is used only");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"shrSecModTrans[6][12]=",0,"One module is used only");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tofSecModTrans[6][8][12]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tofLabModTrans[6][8][12]=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"nRpcHits[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatchcLcLRpcHit),-1,-1,4,"rpcHitArr[6][200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"nShowerHits[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatchcLcLShowerHit),-1,-1,4,"shrHitArr[6][200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"nTofHits[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatchcLcLTofHit),-1,-1,4,"tofHitArr[6][100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fillPlots=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2F),-1,-1,4,"rpcPlots[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2F),-1,-1,4,"shrPlots[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2F),-1,-1,4,"tofPlots[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackParam */
static void G__setup_memvarHMdcTrackParam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam));
   { HMdcTrackParam *p; p=(HMdcTrackParam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"funct=",0,"functional");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"oldFunct=",0,"previous value of functional");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"sumWeight=",0,"sum of weights");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nParam=",0,"number of parameters");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSymMat4),-1,-1,2,"errMatr=",0,"Matrix of errors");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nMods=",0,"=4 - normal data; =8 - cosmic two sectors");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numOfGoodWires=",0,"number of wires passed fit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"chi2perDF=",0,"=funct/(numOfGoodWires-nParam+1)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iterNumb=",0,"number of iteration");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"timeOffsetFlag=",0,"1 - calc. time offset for each MDC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"timeOffset[16]=",0,"time offsets for each MDC in sec.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"errTimeOffset[16]=",0,"errors of time offsets for each MDC in sec.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"isTmoffFixed=",0,"if bit 0-15 eq.1 timeOffset for mdc is fixed");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"sDev[16]=",0,"For timeOffset calculation.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"sWht[16]=",0,"[4] - for each module.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dTdPar[4][16]=",0,"[nParam!][nMod]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcKickCor */
static void G__setup_memvarHMdcKickCor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickCor));
   { HMdcKickCor *p; p=(HMdcKickCor*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"nThetaMax=10LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"iPhiMax=8LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"parMax=6LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"layerMax=6LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"mdcSetMax=4LL",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"theta0Mdc[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y0Mdc[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"z0Mdc[4]=",0,"position of mdc's in sector coordinate system");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"thetaPar[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phiPar[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"drParPos[4][6][6][8][10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"drParNeg[4][6][6][8][10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rMaxPar[2][7][4]=",0,"max deflection distance pos. charges, phi, theta mdc &layer bins");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tmpKickPar[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tmpPhiPar[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"par[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dThetaPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dThetaLow=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dThetaHigh=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dPhiPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dPhiLow=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dPhiHigh=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rad2deg=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indexOffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcProjPlot */
static void G__setup_memvarHMdcProjPlot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcProjPlot));
   { HMdcProjPlot *p; p=(HMdcProjPlot*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->yMin)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"yMin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yMax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"yMax=",0,"The sizes of the plot.");
   G__memvar_setup((void*)((long)(&p->xMin)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xMin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xMax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xMax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xMinD)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xMinD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xMaxD)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xMaxD=",0,"The small side of the MDC's proj.");
   G__memvar_setup((void*)((long)(&p->nBinX)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"nBinX=",0,"num.bins along axis X (xMin-xMax)");
   G__memvar_setup((void*)((long)(&p->stX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"stX=",0,"step X = (xMax-xMin)/nBinX");
   G__memvar_setup((void*)((long)(&p->nBinY)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"nBinY=",0,"num.bins along axis Y");
   G__memvar_setup((void*)((long)(&p->stY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"stY=",0,"step Y= (yMax-yMin)/nBinY");
   G__memvar_setup((void*)((long)(&p->xMinL)-(long)(p)),83,0,0,-1,G__defined_typename("Short_t"),-1,1,"xMinL=",0,"In units of bin X num.");
   G__memvar_setup((void*)((long)(&p->xMaxL)-(long)(p)),83,0,0,-1,G__defined_typename("Short_t"),-1,1,"xMaxL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yMinL)-(long)(p)),83,0,0,-1,G__defined_typename("Short_t"),-1,1,"yMinL=",0,"yMaxL[nx]=nBinY-1");
   G__memvar_setup((void*)((long)(&p->xBinsPos)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"xBinsPos=",0,"Bins positions");
   G__memvar_setup((void*)((long)(&p->yBinsPos)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"yBinsPos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xFirstBin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"xFirstBin=",0,"= xBinsPos[0]");
   G__memvar_setup((void*)((long)(&p->yFirstBin)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"yFirstBin=",0,"= yBinsPos[0]");
   G__memvar_setup((void*)((long)(&p->size)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"size=",0,"The size of the plModF[] and plModS[]");
   G__memvar_setup((void*)(&HMdcProjPlot::weights),66,0,0,-1,G__defined_typename("UChar_t"),-2,1,"weights=",0,"array of pr.plot bins weights");
   G__memvar_setup((void*)(&HMdcProjPlot::weights3),66,0,0,-1,G__defined_typename("UChar_t"),-2,1,"weights3=",0,"- first half \"weights\" array");
   G__memvar_setup((void*)(&HMdcProjPlot::weights4),66,0,0,-1,G__defined_typename("UChar_t"),-2,1,"weights4=",0,"- second half \"weights\" array");
   G__memvar_setup((void*)(&HMdcProjPlot::wtArrSize),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"wtArrSize=",0,"weights array size");
   G__memvar_setup((void*)(&HMdcProjPlot::nBitsLuTb),98,0,0,-1,G__defined_typename("UChar_t"),-2,1,"nBitsLuTb[64]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rootPlot)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2C),-1,-1,1,"rootPlot=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdc34ClFinderLayer */
static void G__setup_memvarHMdc34ClFinderLayer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer));
   { HMdc34ClFinderLayer *p; p=(HMdc34ClFinderLayer*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->module)-(long)(p)),98,0,0,-1,G__defined_typename("UChar_t"),-1,1,"module=",0,"For diagnostic print is used only");
   G__memvar_setup((void*)((long)(&p->layer)-(long)(p)),98,0,0,-1,G__defined_typename("UChar_t"),-1,1,"layer=",0,"For diagnostic print is used only");
   G__memvar_setup((void*)((long)(&p->pSCLay)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer),-1,-1,1,"pSCLay=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cells)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCells),-1,-1,1,"cells=",0,"list of fired wires");
   G__memvar_setup((void*)((long)(&p->nCells)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nCells=",0,"num.of cells in layer");
   G__memvar_setup((void*)((long)(&p->nBinX)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"nBinX=",0,"projection of wire (one for layer)");
   G__memvar_setup((void*)((long)(&p->yBin)-(long)(p)),83,0,0,-1,G__defined_typename("Short_t"),-1,1,"yBin=",0,"Y bins for X bins  0 - nBinX");
   G__memvar_setup((void*)((long)(&p->yFirst)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"yFirst=",0,"yFirst=yBin[0] or [nBinx-1]");
   G__memvar_setup((void*)((long)(&p->nYLines)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nYLines=",0,"num. of lines");
   G__memvar_setup((void*)((long)(&p->wOrType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"wOrType=",0,"wires orientation type");
   G__memvar_setup((void*)((long)(&p->xBin1)-(long)(p)),83,0,0,-1,G__defined_typename("Short_t"),-1,1,"xBin1=",0,"size of xBin array = nYLines + 1");
   G__memvar_setup((void*)((long)(&p->xBin2)-(long)(p)),83,0,0,-1,G__defined_typename("Short_t"),-1,1,"xBin2=",0,"size of xBin array = nYLines + 1");
   G__memvar_setup((void*)((long)(&p->tgY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tgY=",0,"(y1-y2)/(x1-x2) one for all cells");
   G__memvar_setup((void*)((long)(&p->tgZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tgZ=",0,"(z1-z2)/(x1-x2) one for all cells");
   G__memvar_setup((void*)((long)(&p->y0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"y0[2]=",0,"If x,y,z - point on the kick plane, then:");
   G__memvar_setup((void*)((long)(&p->z0)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"z0[2]=",0,"y'=tgY*x+nCell*yStep+y0[n] n=0 left rib (nearest to tag)");
   G__memvar_setup((void*)((long)(&p->yStep)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"yStep=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zStep)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"zStep=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nPSegOnKick)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nPSegOnKick[2][2]=",0,"first index [0]-up rib; [1]-down rib;");
   G__memvar_setup((void*)((long)(&p->maxDrDist)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"maxDrDist=",0,"max. drift distance");
   G__memvar_setup((void*)((long)(&p->y0w)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"y0w=",0,"As y0[] but for wire");
   G__memvar_setup((void*)((long)(&p->z0w)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"z0w=",0,"As z0[] but for wire");
   G__memvar_setup((void*)((long)(&p->xWirDir)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xWirDir=",0,"Wire vector (not nomalized)");
   G__memvar_setup((void*)((long)(&p->yWirDir)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"yWirDir=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zWirDir)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"zWirDir=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yCross)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"yCross=",0,"For MDCIV is filled and used only!");
   G__memvar_setup((void*)((long)(&p->layerPart)-(long)(p)),98,0,0,-1,G__defined_typename("UChar_t"),-1,1,"layerPart=",0,"layer part numer (0,1,...)");
   G__memvar_setup((void*)((long)(&p->nextPartFCell)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nextPartFCell=",0,"First cell of the layer next part");
   G__memvar_setup((void*)((long)(&p->layerNextPart)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer),-1,-1,1,"layerNextPart=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdc34ClFinderMod */
static void G__setup_memvarHMdc34ClFinderMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderMod));
   { HMdc34ClFinderMod *p; p=(HMdc34ClFinderMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),-1,-1,2,"array=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdc34ClFinderSec */
static void G__setup_memvarHMdc34ClFinderSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderSec));
   { HMdc34ClFinderSec *p; p=(HMdc34ClFinderSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),-1,-1,2,"array=",0,"array of HMdc34ClFinderMod objects");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatch),-1,-1,2,"pMetaMatch=",0,"!=NULL - do meta matching cut");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"lMods[4]=",0,"list of mdc's");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"mSeg[2]=",0,"mSeg[0,1] -segment 0,1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickPlane),-1,-1,2,"fkick=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"target[2]=",0,"Target in sec.coor.sys.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcProjPlot),-1,-1,2,"prPlotSeg2=",0,"pr.plot of MDC3-4");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"seg1=",0,"[0-3] -region, [4] - hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"dirSeg1=",0,"directions");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"segRegOnKick[4]=",0,"region of HMdcSeg-hit on the kickpl.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"segOnKick=",0,"cross point of inner segment with kickplane");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"errSegOnKick=",0,"error of segOnKick");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"al[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"bl[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cl[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nbX[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"minAmp[4]=",0,"minAmp[2]-mdc3, minAmp[3]-mdc4");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxAmp[4]=",0,"number of fired layes in MDC's");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"notEnoughWrs=",0,"=kTRUE - not enough fired wires");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nearbyBins[8]=",0,"Lookuptab. for finding of nearby bins");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack),-1,-1,2,"stack=",0,"stack");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStacksArr),-1,-1,2,"stacksArr=",0,"array of stacks");
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,2,"xMinClLines=",0,(char*)NULL);
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,2,"xMaxClLines=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nLMinCl=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nLMaxCl=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isClstrInited=",0,"flag for \"clus\" object");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indexPar=",0,"Index parent track");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indexFCh=",0,"Index first child");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indexLCh=",0,"Index last child");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"xCMin=",0,"for cleaning proj. plots");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"xCMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderMod),-1,-1,2,"cFMod=",0,"current module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer),-1,-1,2,"cFLay=",0,"current layer");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nBinX=",0,"X size of plot");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"var. for making layers proj.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"var. for making layers proj.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"layInd=",0,"= (module-2)*6 + layer;");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"tdcTDist=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nBinYM2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"shUp=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"shDown=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nYLinesL=",0,(char*)NULL);
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,2,"xBin1L=",0,(char*)NULL);
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,2,"xBin2L=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ny1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ny2=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nbL=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nbF=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"oneArrLay[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,2,"oneArr=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"bitsSetLay[6]=",0,"Bits set for each layer (01010101h,02020202h,...)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"bitsSet=",0,"Bits set for current layer");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"sUAr[12][420]=",0,"[(mod-2)*6 + layer][210*2]");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"sDAr[12][420]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"cNum[12][420]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer),-1,-1,2,"pLayPar[12][420]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nPRg[12]=",0,"number of filled elements in arrays");
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,2,"shUpArr=",0,"= sUAr[layer_index][region]");
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,2,"shDnArr=",0,"= sDAr[layer_index][region]");
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,2,"cellNum=",0,"= cNum[layer_index][region]");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"numPrRegs=",0,"= &(nPRg[layer_index])");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer),-1,-1,2,"cFLayArr=",0,"= pLayPar[layer_index]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"regInd=",0,"current index in arrayss");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"shDownMax=",0,"to prevent to fill one bin twice from one layer");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-1,2,"weightsArr=",0,"current array of bin weights");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"seg2MinAmpCut=",0,"current amp.cut");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells),-1,-1,2,"pListCells=",0,"list of fired wires in current event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fClusCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locClus=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isGeant=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"typeClFinder=",0,"<2 - cl.finding cut for each mdc");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"realTypeClFinder=",0,"=2,3 or 0");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustersArrs),-1,-1,2,"pClustersArrs=",0,"clusters arraies");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"clusArrSize=",0,"size of clusArr,clusArrM1,clusArrM2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster),-1,-1,2,"clusArr=",0,"array of clusters parameters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nClsArr=",0,"counter of clusters in array pClustersArrs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster),-1,-1,2,"cluster=",0,"current cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParSec),-1,-1,2,"pDriftTimeParSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDistCut=",0,"Cut:  dDist < dDistCut*dDCutCorr[mod][lay]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDistYCorr=",0,"Cut correction for y-bins");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDCutCorr[12]=",0,"Correction for layer cut");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useDriftTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"useDxDyCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TCutG),-1,-1,2,"cutDxDyArr[36]=",0,"36 regions of cut");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderSeccLcLDxDyBinsCut),-1,-1,2,"cutXBins[36]=",0,"36 - number of regions");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nYLinesInCut[36]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"yLineMin[36]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"yLineMax[36]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x0=",0,"Coor. of cross point of inner segment/cluster");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y0=",0,"with PrPlotSeg2.");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"xBin0=",0,"Bin number which cross current");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"yBin0=",0,"inner segment/cluster on PrPlotSeg2.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"dXdYCutReg=",0,"Cut region number (0-8)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"yMinDxDyCut=",0,"In project plot bins");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"yMaxDxDyCut=",0,"In project plot bins");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"yBinToDxDyInd=",0,"= yBin0+yLineMin[dXdYCutReg]");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fakeSuppFlag=",0,"0-don't do; 1-do; 2-set flag only (don't remove obj.)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"wLev=",0,"weight of cluster finder level");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"wBin=",0,"weight of bins number in cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"wLay=",0,"weight of cluster amplitude");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"dWtCut=",0,"cut");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickCor),-1,-1,2,"pKickCor=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdc34ClFinder */
static void G__setup_memvarHMdc34ClFinder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder));
   { HMdc34ClFinder *p; p=(HMdc34ClFinder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder),-1,-2,2,"fMdc34ClFinder=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),-1,-1,2,"array=",0,"array of HMdc34ClFinderSec objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers),-1,-1,2,"fGetCont=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSpecGeomPar),-1,-1,2,"fSpecGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells),-1,-1,2,"fSizesCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickPlane),-1,-1,2,"kickPlane=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeomPar),-1,-1,2,"fMdcGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fMdcClusCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,2,"xMinClLines=",0,(char*)NULL);
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,2,"xMaxClLines=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack),-1,-1,2,"stack=",0,"stack");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStacksArr),-1,-1,2,"stacksArr=",0,"array of stacks");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"quietMode=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatch),-1,-1,2,"pMetaMatch=",0,"!=NULL - do meta matching cut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TCutG),-1,-1,2,"cutDxDyArr[36]=",0,"36 regions of cut");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useDxDyCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useKickCor=",0,"kTRUE - use correction from HMdcKickCor class");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickCor),-1,-1,2,"pKickCor=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcEff */
static void G__setup_memvarHMdcEff(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEff));
   { HMdcEff *p; p=(HMdcEff*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tNhits=",0,"total num. of hits (used for eff. cells only)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tNhitsCutS=",0,"total num. of hits (cut for time1&time2 only)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tNhitsNoCut=",0,"total num. of hits (no cut)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tNhitsClus=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"n0=",0,"num. times cells was not fired");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"errN0=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"n1=",0,"num.of single hits (neighbouring cells not fired)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"errN1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"n2m=",0,"num. of double hits ( two fired close cell)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"errN2m=",0,"at calculation of eff. of N wires (from Nf to Nl)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"n2b=",0,"n2m = double hits num.for pairs Nf:Nf+1 ... Nl-1:Nl");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"errN2b=",0,"n2b = double hits num.for pairs Nf-1:Nf and Nl:Nl+1");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"feff=",0,"efficiency");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"errEff=",0,"error of efficiency");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"eM=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"errM=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"single=",0,"fraction of track wich go through one cell only");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"errSingle=",0,"error ...");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"p0=",0,"probability to have 0 hits in layer");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"errP0=",0,"error ...");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"p1=",0,"probability to have 1 hits in layer");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"errP1=",0,"error ...");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"p2=",0,"probability to have 2 hits in layer");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"errP2=",0,"error ...");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"totNumTr=",0,"for M=1 or efficiency of MDC totNumTr=n0+n1+n2m");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcEffMod */
static void G__setup_memvarHMdcEffMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMod));
   { HMdcEffMod *p; p=(HMdcEffMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"p0l=",0,"probability to have not fired wires in 6 layers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"p1l=",0,"probability to have fired wires in 1 layer only");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"p2l=",0,"probability to have fired wires in 2 layers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"p3l=",0,"probability to have fired wires in 3 layers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"p4l=",0,"probability to have fired wires in 4 layers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"p5l=",0,"probability to have fired wires in 5 layers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"p6l=",0,"probability to have fired wires in 6 layers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcEfficiencyLayer */
static void G__setup_memvarHMdcEfficiencyLayer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyLayer));
   { HMdcEfficiencyLayer *p; p=(HMdcEfficiencyLayer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"module=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"layer=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"is=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"nCellTot=",0,"Total num. times cell was fired (no timecuts)");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"nCellCutS=",0,"Total num. times cell was fired (common stop cut)");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"nCellStat=",0,"Total num. times cell was fired (after cuts)");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"nCellsClus=",0,"Cells which have a part in clusters");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"n0=",0,"n0[cell number] num. times cell was not fired");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"n1=",0,"n1[cell number] num. single hits (the cell was");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"n2=",0,"n2[cell number] num. double hits (this cell and");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEff),-1,-1,2,"eff=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"hists[14]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nPads=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"listPads[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TCanvas),-1,-1,2,"canvEff=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"nameCanv=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"titleCanv=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEff),-1,-1,2,"effXY=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TCanvas),-1,-1,2,"canvXY[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"nameCanvXY[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"titleCanvXY[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TPaveText),-1,-1,2,"titlePadXY[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indDrawTitXY[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nBinsSumXY=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"n0xy[256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"n1xy[256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"n2xy[256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TPaveText),-1,-1,2,"pvTxEffXY[3][256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"indDrawPv[3][256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("UChar_t"),-1,2,"nClustCell=",0,"nClustCell[nCell] - num. of clusters for cell=nCell");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"fileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcEfficiencyMod */
static void G__setup_memvarHMdcEfficiencyMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyMod));
   { HMdcEfficiencyMod *p; p=(HMdcEfficiencyMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"module=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"n0=",0,"n0 num. times a layer was not fired");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"n1=",0,"n1 num. single hits");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"n2=",0,"n2 num. double hits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xLow=",0,"Low and up bordes of project plane");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xUp=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dX=",0,"step of plot of efficiency");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yLow=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yUp=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dY=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"n0xy[256]=",0,"arrays for keeping of inform. about eff.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"n1xy[256]=",0,"of MDC regions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"n2xy[256]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyLayer),-1,-1,2,"mdcEffLay[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"listLayers[6]=",0,"The list of layers for drawing of hists");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nPads=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TCanvas),-1,-1,2,"canvases[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"nameCanv[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"titleCanv[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEff),-1,-1,2,"eff=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMod),-1,-1,2,"effMod=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookupGMod),-1,-1,2,"flookupGMod=",0,"pointer to cont. HMdcLookupGeom[sec][mod]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRawModStru),-1,-1,2,"frawModStru=",0,"pointer to cont. HMdcLookupRaw[sec][mod]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nChannels=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TCanvas),-1,-1,2,"canvasMb=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"nameCanvMb=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"titleCanvMb=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TSlider),-1,-1,2,"mbSlider=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Text_t"),-1,2,"nameSliderMb[20]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"hsEffMb=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"hsEffMb4=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"hsPattMbNoCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"hsPattMbCutS=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"hsPattMbAfCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"hsPattMbClust=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"hsTimes[9]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"drHsTimes[15]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2F),-1,-1,2,"plToTvsT1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2F),-1,-1,2,"drPlToTvsT1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TBox),-1,-1,2,"tCutBox=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TBox),-1,-1,2,"tCutBox2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"minTimeBin[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"maxTimeBin[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"nameCanvTimes=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"titleCanvTimes=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"biningTimes=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"fileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcEfficiencySec */
static void G__setup_memvarHMdcEfficiencySec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencySec));
   { HMdcEfficiencySec *p; p=(HMdcEfficiencySec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcEfficiencyMod");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TCanvas),-1,-1,2,"canvPlotProj=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"nameCanvProj=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"titleCanvProj=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TCanvas),-1,-1,2,"canvPlotsHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"nameCanvHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"titleCanvHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2F),-1,-1,2,"plotHits[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"fileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcEfficiency */
static void G__setup_memvarHMdcEfficiency(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiency));
   { HMdcEfficiency *p; p=(HMdcEfficiency*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isCreated=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),-1,-1,4,"array=",0,"array of pointers to HMdcEfficiencySec");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"fCalCat=",0,"pointer to cal data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"fClusCat=",0,"pointer to MdcClus data category  ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,4,"loc=",0,"location for new object");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isGeant=",0,"=kTRUE for GEANT data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,4,"iter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,4,"iterClus=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb),-1,-1,4,"fLookUpTb=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers),-1,-1,4,"fGetCont=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells),-1,-1,4,"fSizesCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HEventHeader),-1,-1,4,"evHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"eventId=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"typePrPlot[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TCanvas),-1,-1,4,"canvEventProj=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"drawGoodClus=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"nameCanvEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"nameCanvEventCurr=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"titleCanvEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"firstEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"fileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"fileId=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTimeCut),-1,-1,4,"fcut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TCanvas),-1,-1,4,"canvasSummary=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,4,"histSummary=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TFile),-1,-2,4,"fRootOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcGeantEvent */
static void G__setup_memvarHMdcGeantEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantEvent));
   { HMdcGeantEvent *p; p=(HMdcGeantEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantEvent),-1,-2,2,"pGlobalGEvent=",0,"pointer to the global object");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"size=",0,"size of TObjArray");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xVertex=",0,"x of event vertex  (in mm)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yVertex=",0,"y (from first primary track)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zVertex=",0,"z");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"targNum=",0,"target numer (0,1,...) of vertex");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pGeantKineCat=",0,"category GeantKine");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pGeantMdcCat=",0,"category GeantMdc");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"geantBugFlag=",0,"=kTRUE if geant bug was found");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"debugPrintFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),-1,-1,2,"geantSegments=",0,"array of HMdcGeantSeg objects");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nGSegments=",0,"num.of HMdcGeantSeg objects in event");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sizeGSegArr=",0,"size of geantSegments array");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTracks=",0,"number of tracks in array");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells),-1,-1,2,"pMdcListCells=",0,"object keep list of fired wires");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isMdcLCellsOwn=",0,"=kTRUE if MdcListCells is own");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackInfSim),-1,-1,2,"mdcTrackInfSim=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackFinder */
static void G__setup_memvarHMdcTrackFinder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder));
   { HMdcTrackFinder *p; p=(HMdcTrackFinder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb),-1,-1,2,"fLookUpTb=",0,"MDC1&2 clus.finder (+3&4 for type=1)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder),-1,-1,2,"p34ClFinder=",0,"Clusters finder for MDC3&4");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatch),-1,-1,2,"pClusMetaMatch=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nModules[6]=",0,"[s] - number of MDCs for HMdcLookUpTb");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numLayers[6][4]=",0,"[s][m] - number of layers in MDC mod.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"typeClFinder=",0,"=0 - finding in all mdc in sec.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isClustToHit=",0,"kTRUE -> Cl.ToHit;  kFALSE->12Fit;");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fClusCat=",0,"pointer to HMdcClus data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fSegCat=",0,"pointer to Segment data category");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"perMdcClus=",0,"=kTRUE - write HMdcClus to file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locClus=",0,"loc. for HMdcClus category");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locNewCl=",0,"loc. for HMdcClus category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,2,"iterClus=",0,"iterator for fClusCat");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells),-1,-1,2,"event=",0,"list of fired wires in current event");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isMdcLCellsOwn=",0,"=kTRUE if MdcEvntListCells is own");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantEvent),-1,-1,2,"geantEvent=",0,"mdc geant tracks collection");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isGeantEventOwn=",0,"=kTRUE if HMdcGeantEvent is own");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"level4[2]=",0,"[seg] - level for 4-layers finding");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"level5[2]=",0,"[seg] - level for 5-layers finding");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"clFndrLevel[6][4]=",0,"[s][m] - level for current event");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"prntSt=",0,"kTRUE - status printed already");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"tarSFinderOnly=",0,"kTRUE - do vertex finder only (no clust.finder)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcClusterToHit */
static void G__setup_memvarHMdcClusterToHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit));
   { HMdcClusterToHit *p; p=(HMdcClusterToHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,4,"locHit=",0,"location for new \"hit\" object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,4,"locSeg=",0,"location for new \"segment\" object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,4,"loc=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,4,"locTrkCand=",0,"location for new HMdcTrkCand object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"fHitCat=",0,"pointer to HMdcHit data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"fSegCat=",0,"pointer to HMdcSeg data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"fClusInfCat=",0,"pointer to HMdcSeg data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"fTrkCandCat=",0,"pointer to HMdcTrkCand data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,4,"iter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"fClustCat=",0,"pointer to Cluster data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDetector),-1,-1,4,"fMdcDet=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers),-1,-1,4,"fGetCont=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells),-1,-1,4,"fSizesCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus),-1,-1,4,"fClst=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"clusIndex=",0,"index of fClst in catMdcClus");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcHit),-1,-1,4,"fHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSeg),-1,-1,4,"fSeg=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrkCand),-1,-1,4,"fTrkCand=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcHitSegFiller),-1,-1,4,"hitSegFiller=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isGeant=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"slotNotAv=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"tFillSeg[2]=",0,"[0]-segment 1, [1]-segment 2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nMdcs=",0,"Numb. mdc's in cluster");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"prntSt=",0,"kTRUE - status printed already");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdc12Fit */
static void G__setup_memvarHMdc12Fit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit));
   { HMdc12Fit *p; p=(HMdc12Fit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut),-1,-1,2,"fitpar=",0,"obj. keep pointer to param. and categ.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcFittersArray),-1,-1,2,"fittersArr[2]=",0,"arrays of HMdcTrackFitterH or A fitters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter),-1,-1,2,"fitter=",0,"carrent fitter.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fClusCat=",0,"pointer to MdcClus data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,2,"iterClus=",0,"iterator for catMdcClus");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fSegCat=",0,"pointer to Segment data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fHitCat=",0,"pointer to HMdcHit data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fClusInfCat=",0,"pointer to HMdcSeg data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fTrkCandCat=",0,"pointer to HMdcTrkCand data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fClusFitCat=",0,"pointer to HMdcClusFit data category");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indFirstSeg[6]=",0,"[sector] index of the first segment in fSegCat");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indLastSeg[6]=",0,"[sector] index of the last segment in fSegCat");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indFstTrCand[6]=",0,"[sector] index of the first segment in fSegCat");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indLstTrCand[6]=",0,"[sector] index of the last segment in fSegCat");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locSeg=",0,"location for new \"segment\" object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locHit=",0,"location for new \"hit\" object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locTrkCand=",0,"location for new HMdcTrkCand object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locClus=",0,"location for HMdcClus object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locClInf=",0,"location for new \"HMdcWireFit\" object");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isGeant=",0,"kTRUE for GEANT data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"modForSeg[2]=",0,"num. module for filling HMdcSeg");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nFitedTimes=",0,"Num. of hits with hitStatus==1");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isFitted=",0,"Fit result");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"prntSt=",0,"kTRUE - status printed already");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"notFillByClus=",0,"kTRUE - don't fill HMdcHit&HMdcSeg by cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"clusFitAlg=",0,"clusters fitting algorithm");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isCosmicData=",0,"=kTRUE for cosmic data");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fillHitSeg=",0,"=kFALSE - don't fill HMdcHit and HMdcSeg category");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useFitted=",0,"=kTRUE - use fitted inner seg. only for finding outer seg.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useFittedTrPar=",0,"=kTRUE - use fitted track param. of i.seg. for finding outer seg.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"currSeg=",0,"Current segment");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indFirst=",0,"= indFirstSeg[currSec]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indLast=",0,"= indLastSeg[currSec]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indFirstTrCand=",0,"= indFstTrCand[currSec]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indLastTrCand=",0,"= indLstTrCand[currSec]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells),-1,-1,2,"pSecListCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcHitSegFiller),-1,-1,2,"hitSegFiller=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder),-1,-1,2,"f34ClFinder=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackInfSim),-1,-1,2,"pTrackInfSim=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nSharedLayersCut[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nLayerOrientCut[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nDCellsMinCut[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nDCellsCut[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cutForReal[2][13]=",0,"Cut for \"real\" segments");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cutForFake[2][13]=",0,"Cut for \"fake\" segments");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"findOffVertTrk=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nLayersCutOVT=",0,"Minimal number of fired layers");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nWiresCutOVT=",0,"Maximal number of wires per mdc");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12FitcLcLdA),-1,-2,2,"kFake=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12FitcLcLdA),-1,-2,2,"kInFittedList=32768LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12FitcLcLdA),-1,-2,2,"kKeep=65536LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12FitcLcLdA),-1,-2,2,"kReal=131072LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12FitcLcLdA),-1,-2,2,"kRealKeep=196608LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12FitcLcLdA),-1,-2,2,"kAllTypes=212992LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcIdealTracking */
static void G__setup_memvarHMdcIdealTracking(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcIdealTracking));
   { HMdcIdealTracking *p; p=(HMdcIdealTracking*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"pGeantKineCat=",0,"pointer to the category catGeantKine");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"pGeantMdcCat=",0,"pointer to the category catMdcGeantRaw");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"pMdcCal1Cat=",0,"pointer to the category catMdcCal1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,4,"iterGeantKine=",0,"iterator for catGeantKine");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,4,"locCal1=",0,"location of HMdcCal1Sim object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"pMdcSegCat=",0,"pointer to the category catMdcSeg");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"pMdcHitCat=",0,"pointer to the category catMdcHit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"pMdcTrkCandCat=",0,"pointer to the category catMdcTrkCand    ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,4,"locSeg=",0,"location for new \"segment\" object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,4,"locHit=",0,"location for new \"hit\" object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,4,"locTrkCand=",0,"location for new HMdcTrkCand object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells),-1,-1,4,"pMSizesCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isMdcActive[6][4]=",0,"[sec][mod] =kTRUE if MDC is active");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nFiredLayersSeg1cut=",0,"minimal number of fired layers in inner segment");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nFiredLayersSeg2cut=",0,"minimal number of fired layers in outer segment");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"trackNumber=",0,"track number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"trackSector=",0,"sector number of track");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeantMdc),-1,-1,4,"geantHitMod[4]=",0,"geant hits in 4 modules of sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeantMdc),-1,-1,4,"geantHitLay[4][6]=",0,"geant hits in 24 layers of sector");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"nGeantMdcLay[4]=",0,"num. of HGeantMdc or HMdcCal1 hits in each module");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"x1[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"y1[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"z1[4]=",0,"x1,y1,z1 - x2,y2,z2 track piece param.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"x2[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"y2[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"z2[4]=",0,"in sector coor.sys. for each module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells),-1,-1,4,"lCells=",0,"list of fired cells from this track");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fillParallel=",0,"switch : kTRUE will fill HMdcHitSim,HMdcSegSim and HMdcTrkCand to ideal categories");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"sigX[4]=",0,"sigma for gaussian resolution for MDC in x [mm]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"sigY[4]=",0,"sigma for gaussian resolution for MDC in y [mm]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackDSet */
static void G__setup_memvarHMdcTrackDSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDSet));
   { HMdcTrackDSet *p; p=(HMdcTrackDSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder),-1,-2,2,"pTrackFinder=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"trFndrIsAdded=",0,"kTRUE - HMdcTrackFinder added already");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"isCoiloff=",0,"kTRUE=magnetoff,kFALSE=magneton");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"clFinderType=",0,"=0 - segment finder, =1 - mdc finder");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"level4[2]=",0,"[seg] levels for 4-layers finding");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"level5[2]=",0,"[seg] levels for 5-layers finding");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"nLayersInMod[6][4]=",0,"num.of layers in modules");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"findVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,2,"dDistCutVF=",0,"Cut:  dDist/yProjUncer < dDistCut");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"levelVertF=",0,"Level is used in HMdcLookUpTbSec::testBinForVertexF(...)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"levelVertPPlot=",0,"Level of project plot filling");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,2,"zStartDetertor=",0,"If <0. - position of the start detector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"nBinXSeg1=",0,"Project plot size;");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"nBinYSeg1=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"useFloatLevSeg1=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"useAmpCutSeg1=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-2,2,"fakeSuppFlSeg1=",0,"-1-mergeClust., 0-no suppr.; 1-doSuppr; 2-set flag only");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"useDrTimeSeg1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,2,"constUncertSeg1=",0,"Const. part for LookUpTbCell::distCut...");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,2,"dDistCutSeg1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,2,"dDistCutYcorSeg1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,2,"dDistCorrLaySeg1[4][6]=",0,"[mod][layer]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"nBinXSeg2=",0,"Project plot size;");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"nBinYSeg2=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"useFloatLevSeg2=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-2,2,"fakeSuppFlSeg2=",0,"-1-mergeClust., 0-no suppr.; 1-doSuppr; 2-set flag only");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"wLevSeg2=",0,"weight of cluster finder level");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"wBinSeg2=",0,"weight of bins number in cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"wLaySeg2=",0,"weight of cluster amplitude");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"dWtCutSeg2=",0,"cut");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"useDrTimeSeg2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,2,"dDistCutSeg2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,2,"dDistCutYcorSeg2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,2,"dDistCorrLaySeg2[2][6]=",0,"[mod-2][layer]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"useFittedSeg1Par=",0,"kTRUE - use seg1 fitted track param. for finding seg2");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"useDxDyCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TCutG),-1,-2,2,"cutDxDyArr[36]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"isDxDyInited=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"useKickCor=",0,"kTRUE - use HMdcKickCor for outer segment finder");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"doMetaMatch=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"doMMPlots=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit),-1,-2,2,"pClusterToHit=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"modForSeg1=",0,"-1 - don't fill HMdcSeg for segment 1.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"modForSeg2=",0,"-1 - don't fill HMdcSeg for segment 2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit),-1,-2,2,"p12Fit=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"useAnotherFit=",0,"another fit MUST be inherited from HMdc12Fit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"fitAuthor=",0,"1-Alexander's fit, 2-modified version 1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"distTimeVer=",0,"0-calc.time by polin., 1-by J.Market's fun.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"fitType=",0,"0-segment fit, 1-mdc fit");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"fntuple=",0,"kTRUE-create and fill catClusFit&catWireFit");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"fprint=",0,"kTRUE-print debug");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"useWireOffset=",0,"remove signal time on wire from drift time");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"mixFitCut=",0,"mixed cluster finder cut");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"mixClusCut=",0,"mixed cluster finder cut");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"findOffVertTrk=",0,"kTRUE - offVertex tracking ON");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"nLayersCutOVT=",0,"Minimal number of fired layers in MDCI+II");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"nWiresCutOVT=",0,"Mum.wires cut: nWrMdcI*nWrMdcII < nWiresCutOVT^2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"nCellsCutOVT=",0,"MDCII window (+/-,in cells) for combining wires with MDCI");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"calcInitValue=",0,"=0 don't calculate initial track parameters.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,2,"cInitValCutSeg1=",0,"Cut for the HMdcWireArr::calcInitialValue");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,2,"cInitValCutSeg2=",0,"Cut for the HMdcWireArr::calcInitialValue");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcIdealTracking),-1,-2,2,"pIdealTracking=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"isSetCall=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcHitSegFiller */
static void G__setup_memvarHMdcHitSegFiller(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcHitSegFiller));
   { HMdcHitSegFiller *p; p=(HMdcHitSegFiller*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dP2dP1[4][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane),-1,-1,2,"plane1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"A1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"B1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane),-1,-1,2,"plane2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"A2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"B2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSymMat4),-1,-1,2,"covMatr=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"timeOffSet[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"errTimeOffSet[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"z1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"z2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"typeClusVert=",0,"0 - target, 1 - kick plane");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSymMat4),-1,-1,2,"clusErrMatr=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"z=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"r=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"theta=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dP1dP2[4][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"zPrime=",0,"z coordinate wrt axis centered on target position");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"rPrime=",0,"r coordinate wrt axis centered on target position");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"xTarget=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"yTarget=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"xDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"yDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSymMat4),-1,-1,2,"hitErr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcClusInf */
static void G__setup_memvarHMdcClusInf(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInf));
   { HMdcClusInf *p; p=(HMdcClusInf*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fitStatus=",0,"0 - HMdcHit filled by cluster, 1 - by fit");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"levelClFinding=",0,"level of cl.finding (minimal num. of layers)");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"nModsClus=",0,"number of modules in cluster");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"nModsFit=",0,"number of modules in fit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"clusSize=",0,"number of bins in cluster");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nMergClus=",0,"number of merged clusters");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nLayers=",0,"number of layers in cluster");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nLayersFitted=",0,"number of layers which contributed to fit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nDrTimes=",0,"number of drift times in cluster");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nDrTimesFitted=",0,"number of drift times which contributed to fit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"indClus=",0,"index of HMdcClus container");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"indClusFit=",0,"index of HMdcClusFit container");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma1=",0,"sigma1,sigma2,alpha - cluster shape");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma2=",0,"sigma1 - long axis, sigma2 - short axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"alpha=",0,"alpha - angle between long axis of cluster and X");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xHit=",0,"x-coord.of hit in MDC coor.sys. (== x in HMdcHit)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yHit=",0,"y-coord.of hit in MDC coor.sys. (== y in HMdcHit)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xClus=",0,"x-coord.of comb. cluster on the proj.plane");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yClus=",0,"y-coord.of comb. cluster on the proj.plane");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dedx=",0,"mean value of t2-t1 for segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dedxSigma=",0,"sigma of t2-t1 distribution in segment");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"dedxNWire=",0,"number of wires in segment before truncated mean procedure");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"dedxNWireCut=",0,"number of wires in segment cutted by truncated mean procedure");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcClusFit */
static void G__setup_memvarHMdcClusFit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFit));
   { HMdcClusFit *p; p=(HMdcClusFit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"sec=",0,"sector [0-5]");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"seg=",0,"=0 or 1 segment fit, =3 sector fit");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"mod=",0,"=0,1,2,3 - module; =-1 - segment fit");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fitAuthor=",0,"fit version, =1 - old Alexander's fit version");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"distTimeVer=",0,"0-calc. time by polinom., 1-by J.Market's func.");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fitType=",0,"0 - segment fit, 1 - mdc fit ");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"nParam=",0,"number of parameters");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"functional=",0,"value of functional");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"timeOffMdc1=",0,"time offset for each MDC in sec. [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"timeOffMdc2=",0,"if timeOff==-1000. no wires in this mod.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"timeOffMdc3=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"timeOffMdc4=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"numOfWires=",0,"Num. of wires with weight > weight_min");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"numOfLayers=",0,"Num. of layers with wire weight > weight_min");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"x1=",0,"Track parameters: [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"y1=",0,"Track is line (x1,y1,z1) - (x2,y2,z2)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"z1=",0,"in sector coor. system.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"x2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"y2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"z2=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"numIter=",0,"number of iterations");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indf=",0,"index of the first HMdcWireFit obj. in catMdcWireFit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indl=",0,"index of the last HMdcWireFit obj. in catMdcWireFit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"clustIndex=",0,">=0 - cluster index in clus.category");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"exitFlag=",0,"flag of track fitter exit [1-3]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigmaChi2=",0,"final sigma of chi2 distr. which was");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fitStatus=",0,"kTRUE if fit result is accepted");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dx1=",0,"x1 error");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dy1=",0,"y1 error");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dx2=",0,"x2 error");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dy2=",0,"y2 error");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFitcLcLdA),-1,-2,2,"kIsFake=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcWireData */
static void G__setup_memvarHMdcWireData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData));
   { HMdcWireData *p; p=(HMdcWireData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"MDC sector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"MDC module");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"layer=",0,"MDC layer");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"MDC cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"timeIndx=",0,"=1->time1, =2->time2 in HMdcCal1");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"tdcTimeCal1=",0,"drift time from HMdcCal1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCal1),-1,-1,2,"fMdcCal1=",0,"pointer to the corresponding HMdcCal1 obj.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells),-1,-1,2,"lInCl=",0,"lInputCells object in HMdcWireData");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells),-1,-1,2,"lOutCl=",0,"lInputCells object in HMdcWireData");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"secInd=",0,"=0, 1,2,3 - index of sector (up to 4 sectors in cosmic data)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"modInd=",0,"= mod+4*secInd");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useInFit=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"signalTimeOffset=",0,"signal time offset (signal_path/signal_speed)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"tdcTime=",0,"= tdcTimeCal1 - signal_time_offset");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"errTdcTime=",0,"drift time error");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"driftTime=",0,"calculated drift time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dev0=",0,"= driftTime - tdcTime");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dev=",0,"deviation = driftTime + time_offset - tdcTime");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"chi2=",0,"deviation^2 = (dev/errTdcTime)^2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"distance=",0,"distance from track to wire");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"distanceSign=",0,"Is calculated at the filling HMdcClusFit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"alpha=",0,"impact angle of track");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"inCell=",0,"=kTRUE - track cross this cell");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"weight=",0,"weight of this hit in fit");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isWireUsed=",0,"kTRUE if wires is used on final fit step");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isWireUsedPr=",0,"kTRUE if wires was used on the prev. step");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"hitStatus=",0,"=1 hit is used in fit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sequentialIndex=",0,"this object index in array");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"grad=",0,"pointer to grad in HMdcWireArr");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,2,"grad2=",0,"pointer to grad2 in HMdcWireArr");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,2,"matrH=",0,"pointer to matrH in HMdcWireArr");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y=",0,"track parameters in wires coor. system.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"z=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dirY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dirZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dYdP[4]=",0,"dY/dX1,dY/dY1,dY/dX2,dY/dY2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dZdP[4]=",0,"dZ/dX1,dZ/dY1,dZ/dX2,dZ/dY2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDirYdP[4]=",0,"dDirY/dX1,dDirY/dY1,dDirY/dX2,dDirY/dY2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDirZdP[4]=",0,"dDirZ/dX1,dDirZ/dY1,dDirZ/dX2,dDirZ/dY2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cd2DsdP2[4]=",0,"coeff. for d2Dist/dPar(x1,y1,x2,y2)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cd2DsdPkdPl[6]=",0,"coeff. for d2Dist/dPkdPl, dVk/dPkdPl and");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cdVkdPl[6]=",0,"dUk/dPkdPl. [i] is element in sym.matrix (4,4)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cdUkdPl[6]=",0,"[0-5] => (1,0),(2,0),(2,1),(3,0),(3,1),(3,2)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"oneDErrTdcTime2=",0,"1./(errTdcTime^2)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"wtNorm=",0,"= weight/errTdcTime^2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dTdP[4]=",0,"deriv. of Tcalc for track parameters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"driftTimeDer=",0,"calculated drift time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"devDer=",0,"deviation");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dTdPar[4]=",0,"[4] for 4 parameters of track");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer),-1,-1,2,"pSCLayer=",0,"HMdcSizesCells[sector][module][layer]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin),-1,-1,2,"pDrTimeParBin=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar),-1,-2,2,"pDrTimePar=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"geantTrackNum=",0,"geant track number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tof=",0,"geant time offset ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"dir=",0,"vectors needed for calculation");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"pL=",0,"of initial weight");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"pR=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"drTimeDist=",0,"for calcInitialValue only");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcWireFit */
static void G__setup_memvarHMdcWireFit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFit));
   { HMdcWireFit *p; p=(HMdcWireFit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"sec=",0,"sector");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"mod=",0,"MDC module");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"layer=",0,"MDC layer");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"cell=",0,"MDC wire");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"timeNum=",0,"=1 or 2 (time1 or time2 from HMdcCal1)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tdcTimeCal1=",0,"drift time from HMdcCal1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tdcTime=",0,"tdcTimeCal1 minus time of wire offset");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dev=",0,"fullTime-tdcTime");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"weight=",0,"wire weight. =0 if wire was excluded from fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"driftTime=",0,"calculated drift time");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fullTime=",0,"driftTime + time offset");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"minDist=",0,"min.distance from track to wire with SIGN.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"alpha=",0,"impact angle in cell system");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isInCell=",0,"=kFALSE if track don't cross cell");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tdcTimeErr=",0,"error of drift time.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isUsedInFit=",0,"kTRUE if wire was used in fit (for alignment investigation)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tot=",0,"time above threshold (t2-t1)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cellPath=",0,"track path in this cell");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackFitInOut */
static void G__setup_memvarHMdcTrackFitInOut(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut));
   { HMdcTrackFitInOut *p; p=(HMdcTrackFitInOut*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"version=",0,"=0 - old version of drift time calc.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar),-1,-1,2,"fDriftTimePar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitPar),-1,-1,2,"fitPar=",0,"fit parameters container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fCalCat=",0,"pointer to MdcCal1 category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fClusFitCat=",0,"cat. for debuging inform.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fWireFitCat=",0,"-/-");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fGeantKineCat=",0,"pointer to HGeantKine category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fGeantMdcCat=",0,"pointer to HGeantMdc category");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locClusFit=",0,"location for new \"HMdcClusFit\" object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locWireFit=",0,"location for new \"HMdcWireFit\" object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"loc=",0,"location for HMdcCal1 object");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"geantFlag=",0,"=kTRUE for GEANT data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"wireOffsetFlag=",0,"remove signal time on wire from drift time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDigitPar),-1,-1,2,"fDigitPar=",0,"\"phys\" digitization parameters");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"signalSpeed=",0,"speed of signal on the wire (ns/mm)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fprint=",0,"flag for control print-out");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"printStartEv=",0,"start to print from this event number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nEventPrint=",0,"print this number of events (def=1000000000)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells),-1,-1,2,"fSizesCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod),-1,-1,2,"fSCModAr[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useRndbPar=",0,"kFALSE - use default parameters, kTRUE - RnDb");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cutWeight=",0,"cut for Tukey weight");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tofFlag=",0,"=1 - calculate tof for each module");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useRtdbTofFlag=",0,"=kFALSE - tofFlag is setted in macro");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"minTimeOffset=",0,"cut on minimal value of time offset");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"maxTimeOffset=",0,"cut on maximal value of time offset");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"minCellsNum=",0,"cut on the min.number of wires passed fit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"totalChi2Cut=",0,"cut on value of functional");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"chi2PerNdfCut=",0,"cut on value of functional/NDF");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"chi2CutFlag=",0,"if kTRUE - functional<totalChi2Cut");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useTukeyFlag=",0,"flag for using or not Tukey weights.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useRtdbTFlag=",0,"=kFALSE if it setted in macro");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cnWs=",0,"if     (chi2<cnWs*sig2) wt=(1-(chi2/(cn4s*sig2))^2)^2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cn2s=",0,"else if(chi2<cn2s*sig2) wt=(1- chi2/(cn2s*sig2)   )^2");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cn4s=",0,"else wt=0.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"tukeyScale=",0,"scaling of chi2 for tukey weight");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"minSig2=",0,"minimal value of sugma^2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxNFilterIter=",0,"max. number of iterations in wires filtering");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"minWeight=",0,"weight=(weight<minWeight) ? 0.:1.;");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"maxChi2=",0,"weight=(chi2[time]>maxChi2) ? 0.:1.;");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"doTargScan=",0,"HMdcTrackFitterB use this flag");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useRtdbTScFlag=",0,"=kFALSE if it setted in macro");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"calcInitValue=",0,"=0 don't calculate initial track parameters.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"minTOffsetIter=",0,"time offset cut for intermediate iterations");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"funCt1=",0,"if functional < funCt1 stepD1 will used");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"stepD1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"funCt2=",0,"else if functional < funCt2 stepD2 will used");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"stepD2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"stepD3=",0,"else stepD3 will used");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"exclLay[6][4][6]=",0,"exclud layer from fit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcDriftTimePar */
static void G__setup_memvarHMdcDriftTimePar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar));
   { HMdcDriftTimePar *p; p=(HMdcDriftTimePar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar),-1,-2,2,"fMdcDriftTimePar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCal2ParSim),-1,-1,2,"pCal2ParSim=",0,"pointer to the HMdcCal2ParSim parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCal2Par),-1,-1,2,"pCal2Par=",0,"pointer to the HMdcCal2Par parameters");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isInited=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"scaleError[4]=",0,"! scaler for error of time per module type");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcDriftTimeParBin */
static void G__setup_memvarHMdcDriftTimeParBin(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin));
   { HMdcDriftTimeParBin *p; p=(HMdcDriftTimeParBin*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"c0=",0,"Parametrization on drift time versus distance (HMdcCal2ParSim)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"c1=",0,"and impact angle (alpha):");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"c2=",0,"driftTime = c0 + c1*alpha + c2*dist + c3*alpha*dist");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"c3=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"c0err=",0,"Parametrization on drift time error versus distance");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"c1err=",0,"and impact angle (alpha):");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"c2err=",0,"driftTimeErr =");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"c3err=",0,"c0err + c1err*alpha + c2err*dist + c3err*alpha*dist");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"d0=",0,"Parametrization on distance versus drift time (HMdcCal2Par)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"d1=",0,"and impact angle (alpha):");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"d2=",0,"distance = d0 + d1*alpha + d2*dist + d3*alpha*driftTime");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"d3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcWiresArr */
static void G__setup_memvarHMdcWiresArr(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWiresArr));
   { HMdcWiresArr *p; p=(HMdcWiresArr*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData),-1,-1,2,"wires=",0,"Array of HMdcWireData objects");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"arraySize=",0,"Size of \"wires\" array");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nDriftTimes=",0,"Number of drift times in track");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus),-1,-1,2,"fClst1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus),-1,-1,2,"fClst2=",0,"is used for sector track(magnet off)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"segment=",0,"segment (0,1 or 3)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"sector");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xClst=",0,"cluster position on");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yClst=",0,"the project plane");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zClst=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut),-1,-1,2,"fitInOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells),-1,-1,2,"lInputCells=",0,"sells list for fitting (input)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells),-1,-1,2,"lOutputCells=",0,"cells list passed fit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nMdcTimes[16]=",0,"Num. of hits in MDC's ([4-7]-cosmic)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"firstTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"lastTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData),-1,-1,2,"firstWire=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData),-1,-1,2,"lastWire=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nModsInFit=",0,"number of modules in this fit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numOfGoodWires=",0,"number of wires passed fit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"sigma2=",0,"last sigma^2 of chi2 distr. which");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells),-1,-1,2,"event=",0,"list of fired wires in current event");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locCal1=",0,"location of HMdcCal1 object");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fprint=",0,"debuging print flag");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"grad[4]=",0,"Gradient of downhill direction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"agrad=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,2,"grad2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,2,"matrH=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData),-1,-1,2,"firstWireInLay[96]=",0,"first wire in layer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData),-1,-1,2,"lastWireInLay[96]=",0,"last wire in layer");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nDrTmFirstSec=",0,"number of dr.time in first sector (for param.planes)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nClTimes=",0,"wires counter");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"segment2=",0,"segment (0,1 or 3)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector2=",0,"sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus),-1,-1,2,"fClst3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus),-1,-1,2,"fClst4=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells),-1,-1,2,"lInputCells2=",0,"sells list for fitting (input)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells),-1,-1,2,"lOutputCells2=",0,"cells list passed fit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"segment3=",0,"segment (0,1 or 3)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector3=",0,"sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus),-1,-1,2,"fClst5=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus),-1,-1,2,"fClst6=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells),-1,-1,2,"lInputCells3=",0,"sells list for fitting (input)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells),-1,-1,2,"lOutputCells3=",0,"cells list passed fit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"segment4=",0,"segment (0,1 or 3)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector4=",0,"sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus),-1,-1,2,"fClst7=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus),-1,-1,2,"fClst8=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells),-1,-1,2,"lInputCells4=",0,"sells list for fitting (input)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells),-1,-1,2,"lOutputCells4=",0,"cells list passed fit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trackNum[200]=",0,"track numbers");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numWiresClus[200]=",0,"num.of wires in cluster for each tr.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numWiresFit[200]=",0,"num.of wires passed fit for each tr.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dDistCut=",0,"Cut for the deviation mesured and calc.drift distance");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useNewParam=",0,"=kTRUE if calcInitialValue found better param.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"meanDDist=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxNGoodWires=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells),-1,-1,2,"newListCells=",0,"New list of cells");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells),-1,-1,2,"tmpList=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxAddWr=",0,"Max.num. of wires added to the list");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcDriftTimeParAngle */
static void G__setup_memvarHMdcDriftTimeParAngle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParAngle));
   { HMdcDriftTimeParAngle *p; p=(HMdcDriftTimeParAngle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin),-1,-1,2,"arr[100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcDriftTimeParMod */
static void G__setup_memvarHMdcDriftTimeParMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParMod));
   { HMdcDriftTimeParMod *p; p=(HMdcDriftTimeParMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParAngle),-1,-1,2,"arr[18]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nAngleBins=",0,"number of angle bins");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"lAngleBin=",0,"index of last bin in angle array (= nAngleBins-1)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"angleBinSize=",0,"angle bin size");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"invAngleBinSize=",0,"1./angle bin size");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"lastAngleBin=",0,"= lAngleBin*nAngleBins");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nDistBins=",0,"number of distance bins");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"lDistBin=",0,"index of last bin in dist. array (= nDistBins-1)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"distBinSize=",0,"distance bin size");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"invDistBinSize=",0,"1./distance bin size");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"lastBinDist=",0,"distance for last bin (=lDistBin*distBinSize)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"slopeOutside=",0,"slope for outside of table tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"timeBinSize=",0,"time bin size");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"invTimeBinSize=",0,"1./time bin size");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"lastBinTime=",0,"time for last bin (=lTimeBin*distBinSize)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackFitPar */
static void G__setup_memvarHMdcTrackFitPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitPar));
   { HMdcTrackFitPar *p; p=(HMdcTrackFitPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cutWeight=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tofFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"doTargScan=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"minTimeOffset=",0,"Time offset cut");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"maxTimeOffset=",0,"-/-");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"minCellsNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"chi2CutFlag=",0,"kTRUE - do cut for funct., else for chi2/ndf");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"totalChi2Cut=",0,"default value for funct. cut");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"chi2PerNdfCut=",0,"default value for chi2/ndf cut");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"useTukeyFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cnWs=",0,"2.54*2.54;");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cn2s=",0,"4.19*4.19;");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"cn4s=",0,"3.26*3.26;");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"minSig2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxNFilterIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"minWeight=",0,"wt[time]=(wt[time]<minWeight) ? 0.:1.;");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"maxChi2=",0,"36.;6.0*/ // wt[time]=(chi2[time]>maxChi2) ? 0.:1.;");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"minTOffsetIter=",0,"if(timeOffset<minTOffsetIter) timeOffset=minTOffsetIter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"funCt1=",0,"if(fun0 < funCt1)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"stepD1=",0,"stepD = stepD1;");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"funCt2=",0,"else if(fun0 < funCt2)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"stepD2=",0,"stepD = stepD2;");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"stepD3=",0,"else stepD = stepD3;");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackFitter */
static void G__setup_memvarHMdcTrackFitter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter));
   { HMdcTrackFitter *p; p=(HMdcTrackFitter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut),-1,-1,2,"fitInOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indClusFit=",0,"HMdcClusFit object index");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWiresArr),-1,-1,2,"wires=",0,"array of wires for fit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam),-1,-1,2,"initParam=",0,"initial track parameters");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam),-1,-1,2,"finalParam=",0,"final track parameters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iteration=",0,"counter of iterations");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxIteration=",0,"maximum number of interations for fit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tofFlag=",0,"see HMdcTrackFitInOut");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fprint=",0,"flag for control print-out");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"exitFlag=",0,"flag of track fitter exit (=1,2,3,4,5)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fitStatus=",0,"=kTRUE if cluster fit accepted");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"segIndex=",0,"HMdcSeg index");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackFitterA */
static void G__setup_memvarHMdcTrackFitterA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterA));
   { HMdcTrackFitterA *p; p=(HMdcTrackFitterA*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"initStepFit=",0,"init value of stepFit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"limIter1forFilter=",0,"max. number of iter. at the filtering");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"limFunct1to2=",0,"limit for functional");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"limDeltaF1to2=",0,"limit for functional");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"limGrad1to2=",0,"limit for functional");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"stepCh[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dFunctMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dFunctMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"limGrad2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"limStep2[10]=",0,"limit for diff. old-new param.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"limIter2=",0,"max. number of iter.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"stepFit=",0,"current value of step for gradient dowhill");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iterAfterFilter=",0,"counter of iter.number after filtering");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"return2to1=",0,"counter of method2->method1 switching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam),-1,-1,2,"pari=",0,"track fit parameters for inner purpose");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam),-1,-1,2,"parMin=",0,"track fit parameters for inner purpose");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam),-1,-1,2,"tmpPar=",0,"track fit parameters for inner purpose");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackInfSim */
static void G__setup_memvarHMdcTrackInfSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackInfSim));
   { HMdcTrackInfSim *p; p=(HMdcTrackInfSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"segment=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"modInd=",0,"0,1 or <0(for two mdc segment)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nWiresTot=",0,"number of wires in current cluster or segment");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isWrCollected=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numTracks=",0,"for tracks list calculation");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackInfSimcLcLdA),-1,-2,2,"aSize=20LL",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"numWires[21]=",0,"-/-");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells),-1,-1,2,"wiresList[21]=",0,"-/-");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack),-1,-1,2,"gntTrackList[20]=",0,"-/-");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantSeg),-1,-1,2,"gntSegList[20]=",0,"-/-");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"segIngGTrack[20]=",0,"index of segment in HMdcGeantTrack");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tracksNum[20]=",0,"-/-");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sortedInd[20]=",0,"-/-");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"embedInd=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"noiseInd=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells),-1,-1,2,"listTmp=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWiresArr),-1,-1,2,"pWiresArr=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isGntBugEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"isGntBugSeg=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcFittersArray */
static void G__setup_memvarHMdcFittersArray(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcFittersArray));
   { HMdcFittersArray *p; p=(HMdcFittersArray*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter),-1,-1,4,"fitterArr=",0,"array of point. to HMdcTrackFitterA(B) obj.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"size=",0,"size of fitterArr");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nObj=",0,"number of objects in fitterArr");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut),-1,-1,4,"fitpar=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fitAuthor=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcEffMenu */
static void G__setup_memvarHMdcEffMenu(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMenu));
   { HMdcEffMenu *p; p=(HMdcEffMenu*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTransientFrame),-1,-1,2,"fDialog=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TList),-1,-1,2,"fWidgets=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"width=",0,"dialog frame size ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"height=",0,"dialog frame size");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sHeight=",0,"start pozition for buttons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"dHeight=",0,"step size for buttons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sWidth=",0,"start pozition for buttons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"dWidth=",0,"step size for buttons");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"stopLoop=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMenu),-1,-2,2,"fEffMenu=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiency),-1,-1,2,"mdcEff=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencySec),-1,-1,2,"feffSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyMod),-1,-1,2,"feffMod=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyLayer),-1,-1,2,"feffLay=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextButton),-1,-1,2,"bSecMod[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextButton),-1,-1,2,"bLayer[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextButton),-1,-1,2,"bGroupMdcLay[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextButton),-1,-1,2,"button[30]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextButton),-1,-1,2,"bPlot[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextButton),-1,-1,2,"bTypePlot[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextButton),-1,-1,2,"bDrClSel=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextButton),-1,-1,2,"bHist[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextButton),-1,-1,2,"bHistMb=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextButton),-1,-1,2,"bXYlayer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextButton),-1,-1,2,"bTimes=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextButton),-1,-1,2,"bSummary=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indSec[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indMod[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indLay[6]=",0,"for all selected modules");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numLay=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indPlot[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"typePlot=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indHist[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indHistMb=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numHists=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indXYlayers=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indTimes=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indSummary=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indGroup[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sumBnXY=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sumBnTimes=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextEntry),-1,-1,2,"pvLSumXY=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextEntry),-1,-1,2,"pvLSumTimes=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"name[100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"doThis[100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TText),-1,-1,2,"text=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"totModsSel=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTotEv=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"calcEffFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"eventLoopFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nEvLoopAdd=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"endOfData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGLabel),-1,-1,2,"lbEvTot=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TGLabel),-1,-1,2,"lbEvLoop=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTargetMon */
static void G__setup_memvarHMdcTargetMon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTargetMon));
   { HMdcTargetMon *p; p=(HMdcTargetMon*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"mode=",0,"kTRUE - show canvases ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"typePrintFile=",0,"\"\" - ps, \".gif\", ...");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"formatEpsTo=",0,"format for converting eps to");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"deleteEpsFile=",0,"delete *.eps file after conv.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fMdcHitCat=",0,"HMdcHit data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,2,"iterMdcHit=",0,"iterator for MdcHitCat");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locHit=",0,"location for MdcHitCat");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HEventHeader),-1,-1,2,"evHeader=",0,"event header");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector),-1,-1,2,"target[6]=",0,"target middle point for each sector");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useRtdbTarger[6]=",0,"target param from Rtdb (for each sector)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HldGrepFileSource),-1,-1,2,"pHldGrepFSrc=",0,"!=0 - HldGrepFileSource is used");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HldRemoteSource),-1,-1,2,"pHldRemoteSrc=",0,"!=0 - HldRemoteSource is used");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isCoilOff=",0,"kTRUE - magnet off");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"firstEvent=",0,"=kTRUE - befor first ev.");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"dateFEvent=",0,"date of first event");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"timeFEvent=",0,"time of first event");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"dateLEvent=",0,"date of last event");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"timeLEvent=",0,"time of last event");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"runId=",0,"runId of current run");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"fileName=",0,"list of file names");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"fileNameR=",0,"file name of current run");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"dateTime=",0,"string with date and time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform),-1,-1,2,"transf[24]=",0,"mdc mod. <-> lab. transfor.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nPads[6]=",0,"[comb] - pads num. in canvas");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TPad),-1,-1,2,"fPads[6][18]=",0,"[comb][pad]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TPaveLabel),-1,-1,2,"label=",0,"canvas label: fileName+...");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mdcInSec[6]=",0,"[sec] - mdcs num. in sector");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"listMdc[24]=",0,"mdcs list");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"selectEvByTBits=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"phi[24][1000]=",0,"phi(deg.) for each hit in lab.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x[24][1000]=",0,"x(mm) hits positions in lab.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y[24][1000]=",0,"y(mm) hits positions in lab.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"z[24][1000]=",0,"z(mm) hits positions in lab.");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nhits[24]=",0,"hits num. in each mdc");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTargetMoncLcLTrackPar),-1,-1,2,"trArr[10000]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"normalizeHists=",0,"fill with wt=1./nTracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dPhiCut=",0,"dPhi cut");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"r0Cut=",0,"r0 cut");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"combToMdc[6][2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"dPhiH[6]=",0,"[6] - combinations of MDC,s:");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"r0H[6]=",0,"1-2,1-3,1-4,2-3,2-4,3-4");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"zVerH[6][6]=",0,"[sec][comb]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"zVerDscH[6][6][10]=",0,"[s][c][Downsc.fl.|| trig.Cond]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2F),-1,-1,2,"zVerVsEventH[6][6]=",0,"[sec][comb]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"histsMode=",0,"=0 - one hist., ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nZmBins=",0,"histogramms parameters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"zmin=",0,"...");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"zmax=",0,"...");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"canvasWidth=",0,"canvas width in pixels");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"canvasHeight=",0,"canvas height in pixels");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"cnComb[6][100]=",0,"canvases names");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"ctComb[6][100]=",0,"canvases titles");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TCanvas),-1,-1,2,"canvs[6]=",0,"pointers to canvases");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"addCnName=",0,"users part of canvas title");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TStopwatch),-1,-1,2,"timer=",0,"timer");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"plotType=",0,"plot type (1,2 or 3)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"timeStep=",0,"canvases updating time step");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Stat_t"),-1,2,"stat=",0,"num.tracks added to hist.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"sumOfFiles=",0,"=kTRUE - all runs in one hist.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"eventCounter=",0,"number of calculated events ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numEventsSave=",0,"save canv. each ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numRunEvents=",0,"number of calculated events in one run ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numNRunsEvents=",0,"number of calculated events in collectNRuns runs");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"collectNRuns=",0,"collect and save ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"runsCounter=",0,"counter of runs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"firstRunName=",0,"fileName of the first run");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"lastRunName=",0,"fileName of the last run");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"dPhiForNR[6]=",0,"[6] - combinations of MDC,s:");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"r0ForNR[6]=",0,"1-2,1-3,1-4,2-3,2-4,3-4");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"zVerForNR[6][6]=",0,"[sec][comb]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"zVerDscForNR[6][6][10]=",0,"[s][c][Downsc.fl.|| trig.Cond]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2F),-1,-1,2,"zVerVsEventForNR[6][6]=",0,"-/-");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TCanvas),-1,-1,2,"canvsForNR[6]=",0,"pointers to canvases");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"cnCombForNR[6][100]=",0,"canvases names");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"ctCombForNR[6][100]=",0,"canvases titles");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TPad),-1,-1,2,"fPadsForNR[6][12]=",0,"[comb][pad]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"drawInOutTracks=",0,"=kTRUE - do this hist.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nRunsDraw=",0,"num.of runs in hist.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"firstTarPnt[6]=",0,"[sec] Z region of target");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"lastTarPnt[6]=",0,"[sec] ...");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"inTargetArr=",0,"n.tracks in target region");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"allTargetArr=",0,"totale num. of tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"inOutTargCurrRun=",0,"counter of runs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,2,"inOutTargetHist=",0,"histogram");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"pathHistOneRun=",0,"path for histogram");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"pathHistSumRun=",0,"path for histogram");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fillSeg=",0,"kTRUE - fill HMdcSeg category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"fSegCat=",0,"HMdcSeg category");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locSeg=",0,"location for HMdcSeg object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TCanvas),-1,-1,2,"currCanvas=",0,"current canvas");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TPad),-1,-1,2,"currPad=",0,"current pad");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"pad=",0,"current pad number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"comb=",0,"current combination");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcClusInfSim */
static void G__setup_memvarHMdcClusInfSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInfSim));
   { HMdcClusInfSim *p; p=(HMdcClusInfSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nTracks=",0,"num. of sim. tracks in chamber cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"listTr[5]=",0,"list of tracks");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nTimes[5]=",0,"num. of hits in chamber cluster from track");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcDGaus */
static void G__setup_memvarHMdcDGaus(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus));
   { HMdcDGaus *p; p=(HMdcDGaus*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"condMean=",0,"if abs(new_mean-old_mean)<condMean*old_sigma -ok.!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"condSig1=",0,"if (new_sig-old_sig)<condSig1*old_sigma-ok.!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"condSig2=",0,"if (old_sig-new_sig)<condSig2*old_sigma-ok.!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcRichCorr */
static void G__setup_memvarHMdcRichCorr(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRichCorr));
   { HMdcRichCorr *p; p=(HMdcRichCorr*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"fileName=",0,"input file name with extension");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"flNmWoExt=",0,"input file name without extension");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"runId=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"eventDate=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"eventTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCalibrater1),-1,-1,4,"fCalib1=",0,"pointer to mdc calibrater1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells),-1,-1,4,"pListCells=",0,"list of fired wires in current event");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isMdcLCellsOwn=",0,"=kTRUE if MdcEvntListCells is own");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"fClusCat=",0,"pointer to HMdcClus data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,4,"iterMdcClus=",0,"iterator");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nMdcHits[6]=",0,"num. of mdc hits in [sector]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,4,"fRichHitCat=",0,"pointer to HMatchURich or HRichHit categ.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,4,"iterRichHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nRichHits[6]=",0,"num. of rich hits in [sector]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"richTheta[6][400]=",0,"rings param.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"richPhi[6][400]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nMdcHitRing[6][400]=",0,"kTRUE - ring");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"radToDeg=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb),-1,-1,4,"fLookUpTb=",0,"clus. finder for MDC1&2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"level4=",0,"Level[seg] of 4-layers finding");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"level5=",0,"Level[seg] of 5-layers finding");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nLayers[6][4]=",0,"Number of layers in modules [sec][mod]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"clFinderType=",0,"Cluster finder type");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nRingsCut=",0,"Cut for number of matched rings");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dThCuts[6][2][2]=",0,"[sec][mod][] dTheta bounds (rich-mdc)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dPhCuts[6][2][2]=",0,"[sec][mod][] dPhi bounds (rich-mdc)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"numSigTh=",0,"+/-sig. cut for dTheta");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"numSigPh=",0,"+/-sig. cut for dPhi");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"planeMeanDTh[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"planeSigmaDTh[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"planeMeanDPh[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"planeSigmaDPh[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nEvents=",0,"Total number of events.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nRingEvents=",0,"Number of events with rings");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nMatchedEvents=",0,"Number of matched events");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nMatchedEvents1R=",0,"Number of events with 1 matched rings");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"histFileDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"histFileSuffix=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"histFileOption=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"histFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,4,"psFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,4,"hDThAll[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,4,"hDPhAll[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,4,"hDTh[6][2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,4,"hDPh[6][2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,4,"hNRings=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,4,"hNMRings=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F),-1,-1,4,"hNEvents=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"saveHist=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"saveCanv=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"savePSFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus),-1,-1,4,"funDGaus=",0,"fit function");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fitStatDTh[6][2]=",0,"0-ok.!, 1-mean and/or sigma shifted, ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fitStatDPh[6][2]=",0,"2-fit corrupted");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSeqArrBlock */
static void G__setup_memvarHSeqArrBlock(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock));
   { HSeqArrBlock *p; p=(HSeqArrBlock*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlockcLcLdA),-1,-2,2,"blockSize=262144LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlockcLcLdA),-1,-2,2,"nBits=18LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlockcLcLdA),-1,-2,2,"bitMask=262143LL",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"arr[262144]=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"blockNumber=",0,"array block number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock),-1,-1,2,"nextBlock=",0,"pointer to the next array block");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSeqArrIter */
static void G__setup_memvarHSeqArrIter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter));
   { HSeqArrIter *p; p=(HSeqArrIter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr),-1,-1,2,"array=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock),-1,-1,2,"block=",0,"pointer to the current HSeqArrBlock object");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"index=",0,"current index of element in full array (0-size)");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,2,"cElem=",0,"pointer to the current element");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isFrst=",0,"???");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSeqArr */
static void G__setup_memvarHSeqArr(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr));
   { HSeqArr *p; p=(HSeqArr*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_ESeqArrType),-1,-1,2,"type=",0,"array type");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock),-1,-1,2,"firstBlock=",0,"pinter to the first block of array");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock),-1,-1,2,"lastBlock=",0,"pinter to the last block of array");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"wordLength=",0,"length of word in array");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"size=",0,"total size of array in bytes");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"nBlocks=",0,"number of blocks in array");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"blockLength=",0,"size of HSeqArrBlock object in bytes");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock),-1,-1,2,"block=",0,"pointer to the current HSeqArrBlock object");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"index=",0,"current index of element in full array (0-size)");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,2,"cElem=",0,"pointer to the current element");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isFrst=",0,"???");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcStoreWires */
static void G__setup_memvarHMdcStoreWires(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreWires));
   { HMdcStoreWires *p; p=(HMdcStoreWires*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr),-1,-1,2,"nDTPerEvent=",0,"array of indexis of events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter),-1,-1,2,"iterEvents=",0,"pointer to iterator of events");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr),-1,-1,2,"mdcWireAddr=",0,"array of addresses of fired wires");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter),-1,-1,2,"iterWires=",0,"pointer to iterator of wires in event");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"maxMemSize=",0,"upper limit for memory");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"nEvents=",0,"number of events in array (for filling only)  ");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"nDrTimes=",0,"number of wires in current event (for filling)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"nDrTmPerEv=",0,"number of wires in current event (for reading)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"nRdEvents=",0,"number of read events  (for reading)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"nRdDrTimes=",0,"number of read wires  (for reading)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcStoreEvents */
static void G__setup_memvarHMdcStoreEvents(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreEvents));
   { HMdcStoreEvents *p; p=(HMdcStoreEvents*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr),-1,-1,2,"nDTPerEvent=",0,"array of indexis of events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter),-1,-1,2,"iterEvents=",0,"pointer to iterator of events");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr),-1,-1,2,"mdcCells=",0,"array of addresses & dr.times of fired wires");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter),-1,-1,2,"iterWires=",0,"pointer to iterator of wires in event");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"maxMemSize=",0,"upper limit for memory");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"nEvents=",0,"number of events in array (for filling only)  ");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"nDrTimes=",0,"number of wires in current event (for filling)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"nDrTmPerEv=",0,"number of wires in current event (for reading)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"nRdEvents=",0,"number of read events  (for reading)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"nRdDrTimes=",0,"number of read wires  (for reading)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcStoreTracks */
static void G__setup_memvarHMdcStoreTracks(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreTracks));
   { HMdcStoreTracks *p; p=(HMdcStoreTracks*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr),-1,-1,2,"address=",0,"keep sector and mod.for x1,y1 (mod1)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr),-1,-1,2,"trackPos=",0,"array of cluster positions");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr),-1,-1,2,"nTracksEvent=",0,"array of numbers of tracks per event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter),-1,-1,2,"iterAddress=",0,"pointer to iterator of track address");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter),-1,-1,2,"iterTrackPos=",0,"pointer to iterator of clusters positions");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter),-1,-1,2,"iterNTrckEv=",0,"pointer to iterator of num.of clusters/event");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"flagAddress=",0,"trackFlag and address for current track");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"x1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"y1=",0,"current cluster parameters:");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"x2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"y2=",0,"two points in coor.sys. mdc's");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"nEventTracks=",0,"num. tracks in one event (<=32767)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"nReadTracks=",0,"counter of the read tracks in this event");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"eventFlag=",0,"event flag");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"arrayEnd=",0,"end of array flag");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcStoreClusters */
static void G__setup_memvarHMdcStoreClusters(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreClusters));
   { HMdcStoreClusters *p; p=(HMdcStoreClusters*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreEvents),-1,-1,2,"wires=",0,"storage of cluster(track) wires");
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,2,"wiresListPack[1200]=",0,"list of packed wires for current cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numWires=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcDeDx2 */
static void G__setup_memvarHMdcDeDx2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2));
   { HMdcDeDx2 *p; p=(HMdcDeDx2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"par[6][4][18][40][4]=",0,"fitparams  for tot->dedx");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"shiftpar[6][4][18][40][2]=",0,"width of tot distribution");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"parMax[6][4][18][40]=",0,"max val for tot in tot->dEdx");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"pargaincorr[6][4][6][220]=",0,"gain correction per wire");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"parmindistcut[4]=",0,"max value for mindist used for calculate dEdx");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"MaxMdcMinDist[4]=",0,"max value for mindist");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"MinDistStep[4]=",0,"step size for mindist");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"AngleStep=",0,"step size for angle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"hefr=",0,"fraction of helium of the gas mix");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"minimumWires=",0,"minimum required wires");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"window=",0,"window for truncating arround mean (units of sigma)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells),-1,-1,2,"sizescells=",0,"! pointer to HMdcSizesCells container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"catcal=",0,"! pointer to mdc cal1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"cathit=",0,"! pointer to mdc hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"catclusinf=",0,"! pointer to mdc clusinf");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"catclus=",0,"! pointer to mdc clusinf");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"loccal=",0,"! location object of cal1");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isInitialized=",0,"! flag after init");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"method=",0,"! method switch for filling input");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"! method switch for filling input for module 1/2 of segment");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TArrayD),-1,-1,2,"measurements=",0,"! array of measurements");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useCalibration=",0,"! use/don't use normalization table");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ctskipmod0=",0,"! counter for wires skipped with t2<=-998 in mod0 of seg");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ctskipmod1=",0,"! counter for wires skipped with t2<=-998 in mod1 of seg");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"debug=",0,"! kTRUE print infos of trun mean");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcDeDx2Maker */
static void G__setup_memvarHMdcDeDx2Maker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2Maker));
   { HMdcDeDx2Maker *p; p=(HMdcDeDx2Maker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"trkcandCat=",0,"! pointer to the HMdcTrkCand data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"segCat=",0,"! pointer to the HMdcSeg data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"clsCat=",0,"! pointer to the HMdcClus data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"clsInfCat=",0,"! pointer to the HMdcInfClus data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"cal1Cat=",0,"! pointer to the HMdcCal1 data");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"hasPrinted=",0,"flag is set if printStatus is called");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,2,"trkcanditer=",0,"! iterator on HMdcTrkCand data.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2),-1,-1,2,"mdcdedx=",0,"! dedx calculation parameters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"module=",0,"switch for caldedx()  = 0 first mod in seg,");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"fillCase=",0,"0 = combined (default) , 1 = combined+seg, 2 = combined+seg+mod");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackFitterB */
static void G__setup_memvarHMdcTrackFitterB(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterB));
   { HMdcTrackFitterB *p; p=(HMdcTrackFitterB*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"recalcTdcError=",0,"kTRUE - TDC errors will not change during minimization");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcAlignerParam */
static void G__setup_memvarHMdcAlignerParam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerParam));
   { HMdcAlignerParam *p; p=(HMdcAlignerParam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"alignSec=",0,"sector to align");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"firstFile=",0,"flag to avoid reinizalisation of original transform");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"cluster=",0,"flag to make alignment by cluster");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"scan=",0,"flag to choose fitter with or without target scan");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"offset=",0,"flag to switch between chamber alignment layer offsets and layer orientation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nMinParams=",0,"number of parameters to iterate");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TString),-1,-1,2,"rootFile=",0,"name of root file to keep monitor NTuple");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"alignParams[24]=",0,"alignmet parameters:  additional 3 transition and 3 rotation to initial");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"steps[24]=",0,"iteration step for each parameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"flags[24]=",0,"flag for each parameter: 0 - module don't included to alignment;");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"minParams[24]=",0,"parameters to iterate");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"minSteps[24]=",0,"steps of parameters to iterate");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"minIndex[24]=",0,"indexes of parameters tp iterate");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb),-1,-1,2,"fLookUpTb=",0,"clus. finder for MDC1&2 (and 3&4 for type=1)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod),-1,-1,2,"fSizesCellsFirstMod=",0,"pointer to middle plane of first aligned mdc ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod),-1,-1,2,"fSizesCellsLastMod=",0,"pointer to middle plane of last aligned mdc ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"firstMod=",0,"first module");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"lastMod=",0,"last module");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform),-1,-1,2,"sysRSecOrg[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform),-1,-1,2,"sysRSec[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,1,-1,G__defined_typename("Double_t"),-1,2,"tfSysRSec[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcAlignerD */
static void G__setup_memvarHMdcAlignerD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD));
   { HMdcAlignerD *p; p=(HMdcAlignerD*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells),-1,-1,2,"event=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreEvents),-1,-1,2,"storeWires=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreClusters),-1,-1,2,"storeClusters=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut),-1,-1,2,"fitpar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter),-1,-1,2,"fitter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerParam),-1,-1,2,"param=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcClusFitSim */
static void G__setup_memvarHMdcClusFitSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFitSim));
   { HMdcClusFitSim *p; p=(HMdcClusFitSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nTracks=",0,"number of GEANT tracks passed fit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nTracksClus=",0,"number of GEANT tracks in input of fit (in cluster)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"geantTrack=",0,"geant track number which has max.num. of wires passed fit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nTrWires=",0,"number of wires passed fit from track num.=geantTrack");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nTrWiresClus=",0,"number of wires in cluster from track num.=geantTrack");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"primary=",0,"=kTRUE if \"geantTrack\" is primary track");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"x1geant=",0,"GEANT track parameters on the same");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"y1geant=",0,"planes as x1,y1,z1,x2,y2,z2 in HMdcClusFit [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"z1geant=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"x2geant=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"y2geant=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"z2geant=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"direction=",0,"=KTRUE if track direction is from target to meta");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"particleID=",0,"GEANT particle ID number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"momentum=",0,"GEANT particle momentum (in MeV/c)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcMinimize */
static void G__setup_memvarHMdcMinimize(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcMinimize));
   { HMdcMinimize *p; p=(HMdcMinimize*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"parIn[200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"parBest[200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"grad[200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"grad2[200][200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"scalePar[200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"funct0=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"functIn=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"functOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"functBest=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TObject),-1,-1,2,"fObjectFit=",0,"Pointer to object being fitted ");
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Double_t (*)(TObject* obj, Int_t&nPar, Double_t* par)"),-1,2,"fFCN=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcWireFitSim */
static void G__setup_memvarHMdcWireFitSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFitSim));
   { HMdcWireFitSim *p; p=(HMdcWireFitSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trackNum=",0,"geant track number (track number from HMdcCal1Sim)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"alphaGeant=",0,"impact angle in cell system [deg.]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"minDistGeant=",0,"minimum distance to track [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"timeErrDigi=",0,"error of drift time used digitizer [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tofGeant=",0,"tof of track [ns]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"clusFitTrackFl=",0,"=kTRUE if trackNum==HMdcClusFitSim::geantTrack");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcClustFromSeg */
static void G__setup_memvarHMdcClustFromSeg(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustFromSeg));
   { HMdcClustFromSeg *p; p=(HMdcClustFromSeg*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pCatMetaMatch=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,2,"iterMetaMatch=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pCatSplineTrack=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pCatMdcTrkCand=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pCatMdcSeg=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pCatMdcHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pCatMdcClusInf=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells),-1,-1,2,"pSizesCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locClus=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pCatMdcClus=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLineParam),-1,-1,2,"trackLine=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMinMomentum=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMinBeta=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMaxBeta=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPolarity=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fInnerChi2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fOuterChi2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcGeantSeg */
static void G__setup_memvarHMdcGeantSeg(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantSeg));
   { HMdcGeantSeg *p; p=(HMdcGeantSeg*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"sec=",0,"address of each mdc segment");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"ioseg=",0,"...");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"mod=",0,"mod = -2 for two mdc segment");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trackNumber=",0,"GEANT track number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeantMdc),-1,-1,2,"geantLay[2][7]=",0,"[mod%2][lay] lay=6 - mid-plane mdc");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"segNumber=",0,"segment sequential number in track");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"nHitsMdc[2]=",0,"num. of geant hits in each mdc (layers only!)");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"direction=",0,"segment direction (+1 - good one)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"areWiresColl=",0,"=kTRUE if wires are collected");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"segmentStatus=",0,"bits array (see hmdcgeanttrack.cc)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim),-1,-1,2,"pClusBest=",0,"the best cluster for this geant seg.");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"trIndBest=",0,"index of track in HMdcClusSim");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dX=",0,"Xgeant-Xcluster");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dY=",0,"Ygeant-Ycluster");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nLayers=",0,"number of track layers in cluster");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"nWires=",0,"number of track wires in cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim),-1,-1,2,"pClusBestCh[2]=",0,"For chamber clusters");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"trIndBestCh[2]=",0,"index of track in HMdcClusSim");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dXCh[2]=",0,"Xgeant-Xcluster");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dYCh[2]=",0,"Ygeant-Ycluster");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nLayersCh[2]=",0,"number of track layers in cluster");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"nWiresCh[2]=",0,"number of track wires in cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSegSim),-1,-1,2,"pSegBest=",0,"the best MdcSeg for this geant seg.");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"sTrIndBest=",0,"index of track in HMdcSegSim");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"chi2=",0,"chi2");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"sNLayers=",0,"number of track layers in segment");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"sNWires=",0,"number of track wires in segment");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nRestWires=",0,"Num.WiresInSegment - sNWires");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"userFlag=",0,"User's flag");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcGeantTrack */
static void G__setup_memvarHMdcGeantTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack));
   { HMdcGeantTrack *p; p=(HMdcGeantTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory),-1,-1,2,"pMdcCal1Cat=",0,"category MdcCal1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HIterator),-1,-1,2,"iterMdcCal1=",0,"iterator for MdcCal1 category");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HLocation),-1,-1,2,"locMdcCal1=",0,"location of HMdcCal1Sim object");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"mdcSetup[6][4]=",0,"[sec][mod]=kFALSE - skip this MDC");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeantKine),-1,-1,2,"pGeantKine=",0,"pointer to HGeantKine object");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trackNumber=",0,"GEANT track number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"mom=",0,"momentum (in MeV/c)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isInMdcFlag=",0,"=kTRUE if GEANT track has hits in MDC's");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isInRichFlag=",0,"=kTRUE if GEANT track has hits in RICH");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isInMetaFlag=",0,"=kTRUE if GEANT track reach META");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TObjArray),-1,-1,2,"segments=",0,"array of HMdcGeantSeg objects");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"arrSizeLoc=",0,"size of segments array");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"arrSize=",0,"size of segments array");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"arrOffset=",0,"offset of this track first segment in array");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"arrGlobOffset=",0,"global offset in array for this track");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nGeantMdcHits=",0,"number HGeantMdc hits in track");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nSegments=",0,"number of segments");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nWires=",0,"number of wires in track (=-1 no MdcCal1Cat)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nWSegments=",0,"number of segments with wires from track");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"mdcSector=",0,"if <0 - num.of crossed sectors");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"mdcWSector=",0,"the same as mdcSector but num.of wires>0");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"nIOSeg=",0,"=1,2,3 - inner seg.only, outer only, both");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"nWIOSeg=",0,"the same as nIOSeg but num.of wires>0");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"directionFlag=",0,"=kTRUE if all segments have dir.=+1");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"geantBugFlag=",0,"=kTRUE if geant bug was found");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"trackStatus=",0,"bits array (see hmdcgeanttrack.cc)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"debugPrintFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeantMdc),-1,-1,2,"pGeantMdc=",0,"current GeantMdc hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeantMdc),-1,-1,2,"pGeantMdcPrev=",0,"previous GeantMdc hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantSeg),-1,-1,2,"segment=",0,"pointer to current segment");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"userFlag=",0,"User's flag");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMdcTrackDDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHMdcTrackDContFact(void) {
   /* HMdcTrackDContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTrackDContFact",1703,G__MdcTrackDDict_196_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HParSet), -1, 0, 1, 1, 1, 0, "U 'HContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_196_0_4, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackDContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_196_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackDContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_196_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackDContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_196_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackDContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_196_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_196_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackDContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_196_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackDContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_196_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackDContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_196_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackDContFact::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackDContFact", 1703, G__MdcTrackDDict_196_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDContFact), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackDContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackDContFact", 1829, G__MdcTrackDDict_196_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_196_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDContFact), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackDContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcPointPlane(void) {
   /* HMdcPointPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointPlane));
   G__memfunc_setup("HMdcPointPlane",1366,G__MdcTrackDDict_205_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointPlane), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '0' xi d - 'Double_t' 0 '0' yi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_205_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copy",443,G__MdcTrackDDict_205_0_3, 121, -1, -1, 0, 1, 1, 1, 8, "u 'HMdcPointPlane' - 1 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__MdcTrackDDict_205_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - xn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__MdcTrackDDict_205_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - yn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_205_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcPointPlane' - 11 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_205_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - xo d - 'Double_t' 0 - yo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVector",959,G__MdcTrackDDict_205_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - vc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__MdcTrackDDict_205_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__MdcTrackDDict_205_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_205_0_11, 121, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - xo d - 'Double_t' 1 - yo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVector",947,G__MdcTrackDDict_205_0_12, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - vc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_205_0_13, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_205_0_14, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcPointPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_205_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcPointPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_205_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcPointPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_205_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcPointPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_205_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_205_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcPointPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_205_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcPointPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_205_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcPointPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_205_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcPointPlane::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcPointPlane", 1366, G__MdcTrackDDict_205_0_26, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointPlane), -1, 0, 1, 1, 1, 0, "u 'HMdcPointPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcPointPlane", 1492, G__MdcTrackDDict_205_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_205_0_28, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointPlane), -1, 1, 1, 1, 1, 0, "u 'HMdcPointPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrapPlane(void) {
   /* HMdcTrapPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrapPlane));
   G__memfunc_setup("HMdcTrapPlane",1251,G__MdcTrackDDict_206_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrapPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTrapPlane",1251,G__MdcTrackDDict_206_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrapPlane), -1, 0, 1, 1, 1, 0, "u 'HMdcTrapPlane' - 11 - otrap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_206_0_3, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointPlane), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_206_0_4, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copy",443,G__MdcTrackDDict_206_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrapPlane' - 1 - otrap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_206_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrapPlane' - 11 - otrap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_206_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearNPoints",1234,G__MdcTrackDDict_206_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addPoint",819,G__MdcTrackDDict_206_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addPoint",819,G__MdcTrackDDict_206_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcPointPlane' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNPoints",1035,G__MdcTrackDDict_206_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXYMinMax",1083,G__MdcTrackDDict_206_0_12, 121, -1, -1, 0, 4, 1, 1, 8, 
"i - 'Int_t' 1 - xMin i - 'Int_t' 1 - xMax "
"i - 'Int_t' 1 - yMin i - 'Int_t' 1 - yMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLineInd",995,G__MdcTrackDDict_206_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - line i - 'Int_t' 1 - p1 "
"i - 'Int_t' 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXCross",930,G__MdcTrackDDict_206_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - line d - 'Double_t' 0 - y "
"d - 'Double_t' 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXminXmax",1146,G__MdcTrackDDict_206_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - y d - 'Double_t' 1 - x1 "
"d - 'Double_t' 1 - x2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXminXmax",1146,G__MdcTrackDDict_206_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - y1i d - 'Double_t' 0 - y2i "
"d - 'Double_t' 1 - x1 d - 'Double_t' 1 - x2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXMinPoint",1222,G__MdcTrackDDict_206_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXMaxPoint",1224,G__MdcTrackDDict_206_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYMinPoint",1223,G__MdcTrackDDict_206_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYMaxPoint",1225,G__MdcTrackDDict_206_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXMin",700,G__MdcTrackDDict_206_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXMax",702,G__MdcTrackDDict_206_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYMin",701,G__MdcTrackDDict_206_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYMax",703,G__MdcTrackDDict_206_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDir",690,G__MdcTrackDDict_206_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("twoContoursSum",1516,G__MdcTrackDDict_206_0_26, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'HMdcTrapPlane' - 11 - c1i u 'HMdcTrapPlane' - 11 - c2i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcX",491,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 2, 8, 
"i - 'Int_t' 0 - ip1 i - 'Int_t' 0 - ip2 "
"d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextP",527,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("prevP",525,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextXMaxP",909,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextXMinP",907,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("prevXMaxP",907,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("prevXMinP",905,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_206_0_34, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrapPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_206_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrapPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_206_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrapPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_206_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrapPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_206_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_206_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrapPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_206_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrapPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_206_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrapPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_206_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrapPlane::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrapPlane", 1377, G__MdcTrackDDict_206_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_206_0_47, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrapPlane), -1, 1, 1, 1, 1, 0, "u 'HMdcTrapPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrap(void) {
   /* HMdcTrap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrap));
   G__memfunc_setup("HMdcTrap",755,G__MdcTrackDDict_207_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTrap",755,G__MdcTrackDDict_207_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrap), -1, 0, 1, 1, 1, 0, "u 'HMdcTrap' - 11 - otrap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_207_0_3, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_207_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copy",443,G__MdcTrackDDict_207_0_5, 121, -1, -1, 0, 1, 1, 1, 8, "u 'HMdcTrap' - 1 - otrap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_207_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrap' - 11 - otrap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_207_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transFrom",956,G__MdcTrackDDict_207_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomTransform' - 11 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transTo",747,G__MdcTrackDDict_207_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomTransform' - 11 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRibInd",888,G__MdcTrackDDict_207_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - rib i - 'Int_t' 1 - ind1 "
"i - 'Int_t' 1 - ind2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDbPointNum",1324,G__MdcTrackDDict_207_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDbPointNum",1312,G__MdcTrackDDict_207_0_12, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRibInXYContour",1711,G__MdcTrackDDict_207_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - rib i - 'Int_t' 1 - i "
"i - 'Int_t' 1 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXYContour",1243,G__MdcTrackDDict_207_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'HMdcTrapPlane' - 1 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextPoint",969,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_207_0_16, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_207_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_207_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_207_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_207_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_207_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_207_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_207_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_207_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrap::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrap", 881, G__MdcTrackDDict_207_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_207_0_29, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrap), -1, 1, 1, 1, 1, 0, "u 'HMdcTrap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcPlane(void) {
   /* HMdcPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane));
   G__memfunc_setup("HMdcPlane",844,G__MdcTrackDDict_208_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MdcTrackDDict_208_0_2, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane), -1, 1, 1, 1, 1, 0, "u 'HMdcPlane' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_208_0_3, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPlanePar",1119,G__MdcTrackDDict_208_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcPlane' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPlanePar",1119,G__MdcTrackDDict_208_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - al d - 'Double_t' 0 - bl "
"d - 'Double_t' 0 - cl d - 'Double_t' 0 - dl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPlanePar",1119,G__MdcTrackDDict_208_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomTransform' - 11 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A",65,G__MdcTrackDDict_208_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("B",66,G__MdcTrackDDict_208_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("C",67,G__MdcTrackDDict_208_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("D",68,G__MdcTrackDDict_208_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZOnPlane",1095,G__MdcTrackDDict_208_0_11, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYOnPlane",1094,G__MdcTrackDDict_208_0_12, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXOnPlane",1093,G__MdcTrackDDict_208_0_13, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - y d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dZdX",378,G__MdcTrackDDict_208_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dZdY",379,G__MdcTrackDDict_208_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMinDistance",1506,G__MdcTrackDDict_208_0_16, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMinDistance",1506,G__MdcTrackDDict_208_0_17, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'HGeomVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMinDistanceAndErr",2078,G__MdcTrackDDict_208_0_18, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"u 'HGeomVector' - 11 - p u 'HGeomVector' - 11 - dp "
"d - 'Double_t' 1 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("normalLength",1259,G__MdcTrackDDict_208_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNormalVector",1564,G__MdcTrackDDict_208_0_20, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNormalUnitVector",1980,G__MdcTrackDDict_208_0_21, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transTo",747,G__MdcTrackDDict_208_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomTransform' - 10 - trans", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transFrom",956,G__MdcTrackDDict_208_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomTransform' - 10 - trans", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlanePar",1107,G__MdcTrackDDict_208_0_24, 121, -1, -1, 0, 1, 1, 1, 8, "u 'HMdcPlane' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlanePar",1107,G__MdcTrackDDict_208_0_25, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - a d - 'Double_t' 1 - b "
"d - 'Double_t' 1 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcIntersection",1674,G__MdcTrackDDict_208_0_26, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'HGeomVector' - 11 - r u 'HGeomVector' - 11 - dir "
"u 'HGeomVector' - 1 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcIntersection",1674,G__MdcTrackDDict_208_0_27, 121, -1, -1, 0, 4, 1, 1, 8, 
"u 'HGeomVector' - 11 - r u 'HGeomVector' - 11 - dir "
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcIntersection",1674,G__MdcTrackDDict_208_0_28, 121, -1, -1, 0, 9, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSegIntersec",1519,G__MdcTrackDDict_208_0_29, 121, -1, -1, 0, 7, 1, 1, 8, 
"f - 'Float_t' 0 - z1 f - 'Float_t' 0 - r "
"f - 'Float_t' 0 - theta f - 'Float_t' 0 - phi "
"f - 'Float_t' 1 - x f - 'Float_t' 1 - y "
"f - 'Float_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSegIntersec",1519,G__MdcTrackDDict_208_0_30, 121, -1, -1, 0, 7, 1, 1, 8, 
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - r "
"d - 'Double_t' 0 - theta d - 'Double_t' 0 - phi "
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_208_0_31, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_208_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_208_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_208_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_208_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_208_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_208_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_208_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_208_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcPlane::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcPlane", 844, G__MdcTrackDDict_208_0_43, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane), -1, 0, 1, 1, 1, 0, "u 'HMdcPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcPlane", 970, G__MdcTrackDDict_208_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcPointOnPlane(void) {
   /* HMdcPointOnPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane));
   G__memfunc_setup("HMdcPointOnPlane",1555,G__MdcTrackDDict_209_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcPointOnPlane",1555,G__MdcTrackDDict_209_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane), -1, 0, 1, 1, 1, 0, "U 'HMdcPlane' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcPointOnPlane",1555,G__MdcTrackDDict_209_0_3, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane), -1, 0, 1, 1, 1, 0, "u 'HMdcPointOnPlane' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPlane",828,G__MdcTrackDDict_209_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcPlane' - 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__MdcTrackDDict_209_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - xi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__MdcTrackDDict_209_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - yi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXY",509,G__MdcTrackDDict_209_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - xi d - 'Double_t' 0 - yi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXY",509,G__MdcTrackDDict_209_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcPointOnPlane' - 11 - pi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYZ",599,G__MdcTrackDDict_209_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcPointOnPlane' - 11 - pi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToX",580,G__MdcTrackDDict_209_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - xa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToY",581,G__MdcTrackDDict_209_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ya", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToXY",669,G__MdcTrackDDict_209_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - xa d - 'Double_t' 0 - ya", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("subFromXY",911,G__MdcTrackDDict_209_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - xs d - 'Double_t' 0 - ys", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcPoint",925,G__MdcTrackDDict_209_0_14, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transTo",747,G__MdcTrackDDict_209_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomTransform' - 10 - trans", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transFrom",956,G__MdcTrackDDict_209_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomTransform' - 10 - trans", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcPoint",925,G__MdcTrackDDict_209_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HGeomVector' - 11 - pnt u 'HGeomVector' - 11 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVector",947,G__MdcTrackDDict_209_0_18, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlane",816,G__MdcTrackDDict_209_0_19, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__MdcTrackDDict_209_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__MdcTrackDDict_209_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ",410,G__MdcTrackDDict_209_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__MdcTrackDDict_209_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__MdcTrackDDict_209_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Z",90,G__MdcTrackDDict_209_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dZdX",378,G__MdcTrackDDict_209_0_26, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dZdY",379,G__MdcTrackDDict_209_0_27, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVector",947,G__MdcTrackDDict_209_0_28, 121, -1, -1, 0, 1, 1, 1, 8, "u 'HGeomVector' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MdcTrackDDict_209_0_29, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane), -1, 1, 1, 1, 1, 0, "u 'HMdcPointOnPlane' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_209_0_30, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcZ",493,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_209_0_32, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcPointOnPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_209_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcPointOnPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_209_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcPointOnPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_209_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcPointOnPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_209_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_209_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcPointOnPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_209_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcPointOnPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_209_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcPointOnPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_209_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcPointOnPlane::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcPointOnPlane", 1681, G__MdcTrackDDict_209_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLineParam(void) {
   /* HMdcLineParam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLineParam));
   G__memfunc_setup("HMdcLineParam",1237,G__MdcTrackDDict_210_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLineParam), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParam",829,G__MdcTrackDDict_210_0_2, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - x1i d - 'Double_t' 0 - y1i "
"d - 'Double_t' 0 - z1i d - 'Double_t' 0 - x2i "
"d - 'Double_t' 0 - y2i d - 'Double_t' 0 - z2i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParam",829,G__MdcTrackDDict_210_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HGeomVector' - 11 - point u 'HGeomVector' - 11 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCoorSys",1054,G__MdcTrackDDict_210_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 '-1' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFirstPlane",1348,G__MdcTrackDDict_210_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcPlane' - 0 - fp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSecondPlane",1432,G__MdcTrackDDict_210_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcPlane' - 0 - sp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyPlanes",1054,G__MdcTrackDDict_210_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcLineParam' - 1 - lp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyParam",940,G__MdcTrackDDict_210_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcLineParam' - 11 - lp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__MdcTrackDDict_210_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'HMdcLineParam' - 11 - tp D - 'Double_t' 0 - lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__MdcTrackDDict_210_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'HMdcLineParam' - 11 - tp D - 'Double_t' 0 - lim "
"d - 'Double_t' 0 - fac", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParam",829,G__MdcTrackDDict_210_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ip d - 'Double_t' 0 - val", "ip>=0 && ip<=3", (void*) NULL, 0);
   G__memfunc_setup("addToParam",989,G__MdcTrackDDict_210_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ip d - 'Double_t' 0 - add", "ip>=0 && ip<=3", (void*) NULL, 0);
   G__memfunc_setup("addToParam",989,G__MdcTrackDDict_210_0_13, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ip1 d - 'Double_t' 0 - add1 "
"i - 'Int_t' 0 - ip2 d - 'Double_t' 0 - add2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScParam",1011,G__MdcTrackDDict_210_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 10 - v1 d - 'Double_t' 0 - s "
"D - 'Double_t' 10 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScParam",1011,G__MdcTrackDDict_210_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'HMdcLineParam' - 11 - tp D - 'Double_t' 10 - v1 "
"d - 'Double_t' 0 - s D - 'Double_t' 10 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLinePar",1003,G__MdcTrackDDict_210_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSegmentLine",1447,G__MdcTrackDDict_210_0_17, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - r d - 'Double_t' 0 - z "
"d - 'Double_t' 0 - theta d - 'Double_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MdcTrackDDict_210_0_18, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLineParam), -1, 1, 1, 1, 1, 0, "u 'HMdcLineParam' - 1 - lp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transTo",747,G__MdcTrackDDict_210_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomTransform' - 10 - tr i - 'Int_t' 0 '-3' sec "
"i - 'Int_t' 0 '-3' mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transFrom",956,G__MdcTrackDDict_210_0_20, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomTransform' - 10 - tr i - 'Int_t' 0 '-3' sec "
"i - 'Int_t' 0 '-3' mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSec",603,G__MdcTrackDDict_210_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMod",608,G__MdcTrackDDict_210_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstPlane",1336,G__MdcTrackDDict_210_0_23, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSecondPlane",1420,G__MdcTrackDDict_210_0_24, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFisrtPoint",1362,G__MdcTrackDDict_210_0_25, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSecondPoint",1446,G__MdcTrackDDict_210_0_26, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPointOnPlane), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDir",607,G__MdcTrackDDict_210_0_27, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x1",169,G__MdcTrackDDict_210_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y1",170,G__MdcTrackDDict_210_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("z1",171,G__MdcTrackDDict_210_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x2",170,G__MdcTrackDDict_210_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y2",171,G__MdcTrackDDict_210_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("z2",172,G__MdcTrackDDict_210_0_33, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dX",188,G__MdcTrackDDict_210_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dY",189,G__MdcTrackDDict_210_0_35, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dZ",190,G__MdcTrackDDict_210_0_36, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaRad",1101,G__MdcTrackDDict_210_0_37, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiRad",888,G__MdcTrackDDict_210_0_38, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaDeg",1094,G__MdcTrackDDict_210_0_39, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiDeg",881,G__MdcTrackDDict_210_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dZ1dX1",476,G__MdcTrackDDict_210_0_41, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dZ2dX2",478,G__MdcTrackDDict_210_0_42, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dZ1dY1",477,G__MdcTrackDDict_210_0_43, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dZ2dY2",479,G__MdcTrackDDict_210_0_44, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dDirXdX1",712,G__MdcTrackDDict_210_0_45, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dDirXdX2",713,G__MdcTrackDDict_210_0_46, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dDirYdY1",714,G__MdcTrackDDict_210_0_47, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dDirYdY2",715,G__MdcTrackDDict_210_0_48, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dDirZdX1",714,G__MdcTrackDDict_210_0_49, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dDirZdX2",715,G__MdcTrackDDict_210_0_50, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dDirZdY1",715,G__MdcTrackDDict_210_0_51, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dDirZdY2",716,G__MdcTrackDDict_210_0_52, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDir",690,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDirXZ",868,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDirYZ",869,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dXY",277,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_210_0_57, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLineParam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_210_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLineParam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_210_0_59, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLineParam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_210_0_60, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLineParam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_210_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_210_0_65, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLineParam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_210_0_66, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLineParam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_210_0_67, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLineParam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_210_0_68, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLineParam::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLineParam", 1237, G__MdcTrackDDict_210_0_69, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLineParam), -1, 0, 1, 1, 1, 0, "u 'HMdcLineParam' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLineParam", 1363, G__MdcTrackDDict_210_0_70, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcGetContainers(void) {
   /* HMdcGetContainers */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers));
   G__memfunc_setup("isInited",825,G__MdcTrackDDict_212_0_1, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'HParSet' - 0 - par", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParSet*))(&HMdcGetContainers::isInited) ), 0);
   G__memfunc_setup("getObject",919,G__MdcTrackDDict_212_0_2, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcGetContainers* (*)())(&HMdcGetContainers::getObject) ), 0);
   G__memfunc_setup("deleteCont",1031,G__MdcTrackDDict_212_0_3, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcGetContainers::deleteCont) ), 0);
   G__memfunc_setup("getMdcLayerGeomPar",1788,G__MdcTrackDDict_212_0_4, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerGeomPar), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcLayerCorrPar",1802,G__MdcTrackDDict_212_0_5, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcGeomPar",1279,G__MdcTrackDDict_212_0_6, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeomPar), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcDetector",1422,G__MdcTrackDDict_212_0_7, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDetector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSpecGeomPar",1398,G__MdcTrackDDict_212_0_8, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HSpecGeomPar), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcGeomStruct",1633,G__MdcTrackDDict_212_0_9, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeomStruct), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcRawStruct",1539,G__MdcTrackDDict_212_0_10, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRawStruct), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcLookupGeom",1622,G__MdcTrackDDict_212_0_11, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookupGeom), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModGeomPar",1291,G__MdcTrackDDict_212_0_12, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HModGeomPar), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeomCompositeVolume",2291,G__MdcTrackDDict_212_0_13, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomCompositeVolume), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - mod g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcLayerGeomParLay",2082,G__MdcTrackDDict_212_0_14, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerGeomParLay), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabTransSec",1394,G__MdcTrackDDict_212_0_15, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 1, 2, 1, 1, 1, 
"i - 'Int_t' 0 - sec g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabTransSec",1394,G__MdcTrackDDict_212_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'HGeomTransform' - 1 - trans i - 'Int_t' 0 - sec "
"g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabTransMod",1399,G__MdcTrackDDict_212_0_17, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 1, 3, 1, 1, 1, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabTransMod",1399,G__MdcTrackDDict_212_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'HGeomTransform' - 1 - trans i - 'Int_t' 0 - sec "
"i - 'Int_t' 0 - mod g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSecTransMod",1411,G__MdcTrackDDict_212_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'HGeomTransform' - 1 - trans i - 'Int_t' 0 - sec "
"i - 'Int_t' 0 - mod g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabTransLayer",1620,G__MdcTrackDDict_212_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"u 'HGeomTransform' - 1 - trans i - 'Int_t' 0 - sec "
"i - 'Int_t' 0 - mod i - 'Int_t' 0 - lay "
"g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSecTransLayer",1632,G__MdcTrackDDict_212_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"u 'HGeomTransform' - 1 - trans i - 'Int_t' 0 - sec "
"i - 'Int_t' 0 - mod i - 'Int_t' 0 - lay "
"g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModTransLayer",1637,G__MdcTrackDDict_212_0_22, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 1, 4, 1, 1, 1, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSecTransCathLayer",2016,G__MdcTrackDDict_212_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"u 'HGeomTransform' - 1 - trans1 u 'HGeomTransform' - 1 - trans2 "
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabTransLayerZ0",1758,G__MdcTrackDDict_212_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"u 'HGeomTransform' - 1 - trans i - 'Int_t' 0 - sec "
"i - 'Int_t' 0 - mod i - 'Int_t' 0 - lay "
"g - 'Bool_t' 0 'kFALSE' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSensWireThick",1635,G__MdcTrackDDict_212_0_25, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - mod i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModTransGeantLayer",2132,G__MdcTrackDDict_212_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'HGeomTransform' - 1 - trans i - 'Int_t' 0 - sec "
"i - 'Int_t' 0 - mod i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabTransGeantLayer",2115,G__MdcTrackDDict_212_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'HGeomTransform' - 1 - trans i - 'Int_t' 0 - sec "
"i - 'Int_t' 0 - mod i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSecTransGeantLayer",2127,G__MdcTrackDDict_212_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'HGeomTransform' - 1 - trans i - 'Int_t' 0 - sec "
"i - 'Int_t' 0 - mod i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModList",1032,G__MdcTrackDDict_212_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "1 - 'Int_t (*)[4]' 10 - modList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isModActive",1112,G__MdcTrackDDict_212_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - sec h - 'UInt_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSegActive",1111,G__MdcTrackDDict_212_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - sec h - 'UInt_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSecActive",1107,G__MdcTrackDDict_212_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumModulesInSec",1819,G__MdcTrackDDict_212_0_33, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCatMdcCal1",1197,G__MdcTrackDDict_212_0_34, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCatGeantKine",1486,G__MdcTrackDDict_212_0_35, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCatGeantMdc",1371,G__MdcTrackDDict_212_0_36, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCatMdcClus",1283,G__MdcTrackDDict_212_0_37, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' create", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCatMdcClusFit",1574,G__MdcTrackDDict_212_0_38, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' create", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCatMdcWireFit",1574,G__MdcTrackDDict_212_0_39, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' create", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCatMdcClusInf",1568,G__MdcTrackDDict_212_0_40, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' create", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCatMdcTrkCand",1555,G__MdcTrackDDict_212_0_41, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' create", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCatMdcCal1",1209,G__MdcTrackDDict_212_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - cat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCatGeantKine",1498,G__MdcTrackDDict_212_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - cat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCatGeantMdc",1383,G__MdcTrackDDict_212_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - cat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCatMdcClus",1295,G__MdcTrackDDict_212_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - cat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCatMdcClusFit",1586,G__MdcTrackDDict_212_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - cat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCatMdcWireFit",1586,G__MdcTrackDDict_212_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - cat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCatMdcClusInf",1580,G__MdcTrackDDict_212_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - cat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCatMdcTrkCand",1567,G__MdcTrackDDict_212_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - cat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGeant",715,G__MdcTrackDDict_212_0_50, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HMdcGetContainers::isGeant) ), 0);
   G__memfunc_setup("getFileName",1089,G__MdcTrackDDict_212_0_51, 121, -1, -1, 0, 1, 3, 1, 0, "u 'TString' - 1 - fileName", (char*)NULL, (void*) G__func2void( (void (*)(TString&))(&HMdcGetContainers::getFileName) ), 0);
   G__memfunc_setup("getFileNameWInd",1459,G__MdcTrackDDict_212_0_52, 121, -1, -1, 0, 1, 3, 1, 0, "u 'TString' - 1 - fileName", (char*)NULL, (void*) G__func2void( (void (*)(TString&))(&HMdcGetContainers::getFileNameWInd) ), 0);
   G__memfunc_setup("getRunId",802,G__MdcTrackDDict_212_0_53, 121, -1, -1, 0, 1, 3, 1, 0, "u 'TString' - 1 - runId", (char*)NULL, (void*) G__func2void( (void (*)(TString&))(&HMdcGetContainers::getRunId) ), 0);
   G__memfunc_setup("getEventDate",1216,G__MdcTrackDDict_212_0_54, 121, -1, -1, 0, 1, 3, 1, 0, "u 'TString' - 1 - eventDate", (char*)NULL, (void*) G__func2void( (void (*)(TString&))(&HMdcGetContainers::getEventDate) ), 0);
   G__memfunc_setup("getEventTime",1233,G__MdcTrackDDict_212_0_55, 121, -1, -1, 0, 1, 3, 1, 0, "u 'TString' - 1 - eventTime", (char*)NULL, (void*) G__func2void( (void (*)(TString&))(&HMdcGetContainers::getEventTime) ), 0);
   G__memfunc_setup("isSimData",895,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCont",840,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'HParSet' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initMdcSetup",1241,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcGetContainers",1682,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_212_0_60, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcGetContainers::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_212_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGetContainers::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_212_0_62, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcGetContainers::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_212_0_63, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcGetContainers::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_212_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_212_0_68, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGetContainers::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_212_0_69, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGetContainers::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_212_0_70, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGetContainers::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_212_0_71, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGetContainers::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcGetContainers", 1682, G__MdcTrackDDict_212_0_72, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers), -1, 0, 1, 1, 1, 0, "u 'HMdcGetContainers' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_212_0_73, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGetContainers), -1, 1, 1, 1, 1, 0, "u 'HMdcGetContainers' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLayerCorrPar(void) {
   /* HMdcLayerCorrPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar));
   G__memfunc_setup("HMdcLayerCorrPar",1554,G__MdcTrackDDict_220_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcLayerCorrPar\"' name C - 'Char_t' 10 '\"parameters for Mdc layer correction\"' title "
"C - 'Char_t' 10 '\"MdcLayerCorrProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__MdcTrackDDict_220_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 '0' set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addLayerShift",1316,G__MdcTrackDDict_220_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - fstWr "
"f - 'Float_t' 0 - sh f - 'Float_t' 0 '0.' orCorr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefaultPar",1332,G__MdcTrackDDict_220_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerCorrPar",1526,G__MdcTrackDDict_220_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 8, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 1 - fstWr "
"f - 'Float_t' 1 - sh f - 'Float_t' 1 - orCorr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSecOk",689,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isModOk",694,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isLayOk",700,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isAddOk",671,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 4, 8, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_220_0_14, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLayerCorrPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_220_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerCorrPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_220_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLayerCorrPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_220_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLayerCorrPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_220_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_220_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerCorrPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_220_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLayerCorrPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_220_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerCorrPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_220_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLayerCorrPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLayerCorrPar", 1554, G__MdcTrackDDict_220_0_26, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar), -1, 0, 1, 1, 1, 0, "u 'HMdcLayerCorrPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLayerCorrPar", 1680, G__MdcTrackDDict_220_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_220_0_28, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerCorrPar), -1, 1, 1, 1, 1, 0, "u 'HMdcLayerCorrPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcSizesCellsCell(void) {
   /* HMdcSizesCellsCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsCell));
   G__memfunc_setup("HMdcSizesCellsCell",1757,G__MdcTrackDDict_222_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWirePoint",1249,G__MdcTrackDDict_222_0_2, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 0, 1, 1, 1, 9, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus",976,G__MdcTrackDDict_222_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - stat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus",964,G__MdcTrackDDict_222_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireLength",1337,G__MdcTrackDDict_222_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getReadoutSide",1433,G__MdcTrackDDict_222_0_6, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXReadout",1132,G__MdcTrackDDict_222_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWirePos",1033,G__MdcTrackDDict_222_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_222_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSignPath",1118,G__MdcTrackDDict_222_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWirePnt1",1082,G__MdcTrackDDict_222_0_11, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWirePnt2",1083,G__MdcTrackDDict_222_0_12, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setReadoutSide",1445,G__MdcTrackDDict_222_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - rs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireLength",1349,G__MdcTrackDDict_222_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - wl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXReadout",1144,G__MdcTrackDDict_222_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - xr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWirePos",1045,G__MdcTrackDDict_222_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_222_0_17, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcSizesCellsCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_222_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCellsCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_222_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcSizesCellsCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_222_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcSizesCellsCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_222_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_222_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCellsCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_222_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSizesCellsCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_222_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCellsCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_222_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSizesCellsCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcSizesCellsCell", 1757, G__MdcTrackDDict_222_0_29, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsCell), -1, 0, 1, 1, 1, 0, "u 'HMdcSizesCellsCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcSizesCellsCell", 1883, G__MdcTrackDDict_222_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_222_0_31, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsCell), -1, 1, 1, 1, 1, 0, "u 'HMdcSizesCellsCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcSizesCellsMod(void) {
   /* HMdcSizesCellsMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod));
   G__memfunc_setup("HMdcSizesCellsMod",1661,G__MdcTrackDDict_223_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod), -1, 0, 2, 1, 1, 0, 
"U 'HMdcSizesCellsSec' - 0 - pSec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_223_0_2, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSecTrans",1135,G__MdcTrackDDict_223_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HGeomTransform' - 10 '0' alignTrans i - 'Int_t' 0 '0' sysOfAlignTrans", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSec",603,G__MdcTrackDDict_223_0_4, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMod",608,G__MdcTrackDDict_223_0_5, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSizesCells",1345,G__MdcTrackDDict_223_0_6, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSecTrans",1123,G__MdcTrackDDict_223_0_7, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transTo",747,G__MdcTrackDDict_223_0_8, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 10 - v D - 'Double_t' 0 - vo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transTo",747,G__MdcTrackDDict_223_0_9, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transFrom",956,G__MdcTrackDDict_223_0_10, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transFromZ0",1094,G__MdcTrackDDict_223_0_11, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transFromZ0",1094,G__MdcTrackDDict_223_0_12, 121, -1, -1, 0, 3, 1, 1, 8, 
"f - 'Float_t' 1 - x f - 'Float_t' 1 - y "
"f - 'Float_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotVectTo",938,G__MdcTrackDDict_223_0_13, 121, -1, -1, 0, 6, 1, 1, 8, 
"d - 'Double_t' 0 - xi d - 'Double_t' 0 - yi "
"d - 'Double_t' 0 - zi d - 'Double_t' 1 - xo "
"d - 'Double_t' 1 - yo d - 'Double_t' 1 - zo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcInterTrMod",1403,G__MdcTrackDDict_223_0_14, 121, -1, -1, 0, 8, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMdcHit",972,G__MdcTrackDDict_223_0_15, 121, -1, -1, 0, 10, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - xDir d - 'Double_t' 1 - yDir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMdcHit",972,G__MdcTrackDDict_223_0_16, 121, -1, -1, 0, 23, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"d - 'Double_t' 0 - eX1 d - 'Double_t' 0 - eY1 "
"d - 'Double_t' 0 - eZ1 d - 'Double_t' 0 - eX2 "
"d - 'Double_t' 0 - eY2 d - 'Double_t' 0 - dZ1dX1 "
"d - 'Double_t' 0 - dZ1dY1 d - 'Double_t' 0 - dZ2dX2 "
"d - 'Double_t' 0 - dZ2dY2 d - 'Double_t' 1 - x "
"d - 'Double_t' 1 - eX d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - eY d - 'Double_t' 1 - xDir "
"d - 'Double_t' 1 - eXDir d - 'Double_t' 1 - yDir "
"d - 'Double_t' 1 - eYDir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTfSysRSec",1190,G__MdcTrackDDict_223_0_17, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcHitLookupTb",1705,G__MdcTrackDDict_223_0_18, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_223_0_19, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcSizesCellsMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_223_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCellsMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_223_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcSizesCellsMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_223_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcSizesCellsMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_223_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_223_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCellsMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_223_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSizesCellsMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_223_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCellsMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_223_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSizesCellsMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcSizesCellsMod", 1661, G__MdcTrackDDict_223_0_31, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod), -1, 0, 1, 1, 1, 0, "u 'HMdcSizesCellsMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcSizesCellsMod", 1787, G__MdcTrackDDict_223_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_223_0_33, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod), -1, 1, 1, 1, 1, 0, "u 'HMdcSizesCellsMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcSizesCells(void) {
   /* HMdcSizesCells */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells));
   G__memfunc_setup("getObject",919,G__MdcTrackDDict_224_0_1, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcSizesCells* (*)())(&HMdcSizesCells::getObject) ), 0);
   G__memfunc_setup("getExObject",1108,G__MdcTrackDDict_224_0_2, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcSizesCells* (*)())(&HMdcSizesCells::getExObject) ), 0);
   G__memfunc_setup("deleteCont",1031,G__MdcTrackDDict_224_0_3, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcSizesCells::deleteCont) ), 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_224_0_4, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsSec), -1, 1, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcTrackDDict_224_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initContainer",1367,G__MdcTrackDDict_224_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasChanged",998,G__MdcTrackDDict_224_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_224_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellVol",1009,G__MdcTrackDDict_224_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 8, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell "
"u 'HMdcTrap' - 1 - volCell d - 'Double_t' 0 '-1.' sizeFactor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findReadOutSide",1498,G__MdcTrackDDict_224_0_10, 99, -1, G__defined_typename("Char_t"), 0, 4, 1, 1, 8, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("modStatus",964,G__MdcTrackDDict_224_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nModInSeg",868,G__MdcTrackDDict_224_0_12, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillModCont",1115,G__MdcTrackDDict_224_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"U 'HGeomTransform' - 0 '0' alignTrans i - 'Int_t' 0 '0' sysOfAlignTrans", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillModCont",1115,G__MdcTrackDDict_224_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"D - 'Double_t' 0 - corr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetFirstPoint",1977,G__MdcTrackDDict_224_0_15, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetMiddlePoint",2048,G__MdcTrackDDict_224_0_16, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetLastPoint",1861,G__MdcTrackDDict_224_0_17, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcRZToTargLine",1560,G__MdcTrackDDict_224_0_18, 121, -1, -1, 0, 8, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"d - 'Double_t' 1 - zm d - 'Double_t' 1 - r0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumOfTargets",1535,G__MdcTrackDDict_224_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargets",1050,G__MdcTrackDDict_224_0_20, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTarHalfThick",1493,G__MdcTrackDDict_224_0_21, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxTargHThick",1583,G__MdcTrackDDict_224_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNotGeomModified",1830,G__MdcTrackDDict_224_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMdcSeg",966,G__MdcTrackDDict_224_0_24, 121, -1, -1, 0, 10, 3, 1, 0, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"d - 'Double_t' 1 - zm d - 'Double_t' 1 - r0 "
"d - 'Double_t' 1 - theta d - 'Double_t' 1 - phi", (char*)NULL, (void*) G__func2void( (void (*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t&, Double_t&, Double_t&, Double_t&))(&HMdcSizesCells::calcMdcSeg) ), 0);
   G__memfunc_setup("setTransform",1288,G__MdcTrackDDict_224_0_25, 121, -1, -1, 0, 2, 3, 1, 0, 
"D - 'Double_t' 0 - par u 'HGeomTransform' - 1 - trans", (char*)NULL, (void*) G__func2void( (void (*)(Double_t*, HGeomTransform&))(&HMdcSizesCells::setTransform) ), 0);
   G__memfunc_setup("copyTransfToArr",1553,G__MdcTrackDDict_224_0_26, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'HGeomTransform' - 11 - trans D - 'Double_t' 0 - arr", (char*)NULL, (void*) G__func2void( (void (*)(const HGeomTransform&, Double_t*))(&HMdcSizesCells::copyTransfToArr) ), 0);
   G__memfunc_setup("calcRZToLineXY",1339,G__MdcTrackDDict_224_0_27, 121, -1, -1, 0, 10, 3, 1, 0, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"d - 'Double_t' 0 - xBeam d - 'Double_t' 0 - yBeam "
"d - 'Double_t' 1 - zm d - 'Double_t' 1 - r0", (char*)NULL, (void*) G__func2void( (void (*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t&, Double_t&))(&HMdcSizesCells::calcRZToLineXY) ), 0);
   G__memfunc_setup("calcMdcSeg",966,G__MdcTrackDDict_224_0_28, 121, -1, -1, 0, 23, 3, 1, 0, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"d - 'Double_t' 0 - eX1 d - 'Double_t' 0 - eY1 "
"d - 'Double_t' 0 - eZ1 d - 'Double_t' 0 - eX2 "
"d - 'Double_t' 0 - eY2 d - 'Double_t' 0 - dZ1dX1 "
"d - 'Double_t' 0 - dZ1dY1 d - 'Double_t' 0 - dZ2dX2 "
"d - 'Double_t' 0 - dZ2dY2 d - 'Double_t' 1 - zm "
"d - 'Double_t' 1 - eZm d - 'Double_t' 1 - r0 "
"d - 'Double_t' 1 - eR0 d - 'Double_t' 1 - theta "
"d - 'Double_t' 1 - eTheta d - 'Double_t' 1 - phi "
"d - 'Double_t' 1 - ePhi", (char*)NULL, (void*) G__func2void( (void (*)(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&))(&HMdcSizesCells::calcMdcSeg) ), 0);
   G__memfunc_setup("rotateYZ",834,G__MdcTrackDDict_224_0_29, 121, -1, -1, 0, 6, 3, 1, 0, 
"u 'HGeomRotation' - 11 - rot d - 'Double_t' 0 - xi "
"d - 'Double_t' 0 - yi d - 'Double_t' 0 - zi "
"d - 'Double_t' 1 - yo d - 'Double_t' 1 - zo", (char*)NULL, (void*) G__func2void( (void (*)(const HGeomRotation&, Double_t, Double_t, Double_t, Double_t&, Double_t&))(&HMdcSizesCells::rotateYZ) ), 0);
   G__memfunc_setup("rotateXYZ",922,G__MdcTrackDDict_224_0_30, 121, -1, -1, 0, 7, 3, 1, 0, 
"u 'HGeomRotation' - 11 - rot d - 'Double_t' 0 - xi "
"d - 'Double_t' 0 - yi d - 'Double_t' 0 - zi "
"d - 'Double_t' 1 - xo d - 'Double_t' 1 - yo "
"d - 'Double_t' 1 - zo", (char*)NULL, (void*) G__func2void( (void (*)(const HGeomRotation&, Double_t, Double_t, Double_t, Double_t&, Double_t&, Double_t&))(&HMdcSizesCells::rotateXYZ) ), 0);
   G__memfunc_setup("rotateDir",942,G__MdcTrackDDict_224_0_31, 121, -1, -1, 0, 4, 3, 1, 0, 
"u 'HGeomRotation' - 11 - rot u 'HGeomVector' - 11 - d "
"d - 'Double_t' 1 - dy d - 'Double_t' 1 - dz", (char*)NULL, (void*) G__func2void( (void (*)(const HGeomRotation&, const HGeomVector&, Double_t&, Double_t&))(&HMdcSizesCells::rotateDir) ), 0);
   G__memfunc_setup("rotateDir",942,G__MdcTrackDDict_224_0_32, 121, -1, -1, 0, 5, 3, 1, 0, 
"u 'HGeomRotation' - 11 - rot u 'HGeomVector' - 11 - d "
"d - 'Double_t' 1 - dx d - 'Double_t' 1 - dy "
"d - 'Double_t' 1 - dz", (char*)NULL, (void*) G__func2void( (void (*)(const HGeomRotation&, const HGeomVector&, Double_t&, Double_t&, Double_t&))(&HMdcSizesCells::rotateDir) ), 0);
   G__memfunc_setup("transLineToOtherSec",1936,G__MdcTrackDDict_224_0_33, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'HMdcLineParam' - 11 - ln i - 'Int_t' 0 - sec "
"u 'HGeomVector' - 1 - p1 u 'HGeomVector' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transLineToAnotherSec",2143,G__MdcTrackDDict_224_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HMdcLineParam' - 1 - ln i - 'Int_t' 0 - anotherSec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTargNum",1105,G__MdcTrackDDict_224_0_35, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - z D - 'Double_t' 0 '0' dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeomModifiedFlag",1903,G__MdcTrackDDict_224_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("modStatusArr",1257,G__MdcTrackDDict_224_0_37, 71, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nCells",609,G__MdcTrackDDict_224_0_38, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetP",1015,G__MdcTrackDDict_224_0_39, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcSizesCells",1373,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCont",827,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTargetPos",1344,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'HGeomVector' - 0 '0' targetShift", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("secOk",501,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("segOk",505,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - sg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("modOk",506,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_224_0_46, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcSizesCells::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_224_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCells::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_224_0_48, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcSizesCells::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_224_0_49, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcSizesCells::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_224_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_224_0_54, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCells::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_224_0_55, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSizesCells::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_224_0_56, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCells::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_224_0_57, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSizesCells::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcSizesCells", 1373, G__MdcTrackDDict_224_0_58, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells), -1, 0, 1, 1, 1, 0, "u 'HMdcSizesCells' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_224_0_59, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells), -1, 1, 1, 1, 1, 0, "u 'HMdcSizesCells' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcSizesCellsLayer(void) {
   /* HMdcSizesCellsLayer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer));
   G__memfunc_setup("HMdcSizesCellsLayer",1882,G__MdcTrackDDict_225_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_225_0_2, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsCell), -1, 1, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSecTrans",1135,G__MdcTrackDDict_225_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0.' corZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillLayerCont",1336,G__MdcTrackDDict_225_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HMdcLayerCorrPar' - 10 - fLayCorrPar D - 'Double_t' 10 '0' corr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerGeomParLay",1806,G__MdcTrackDDict_225_0_5, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayerGeomParLay), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeomVolume",1344,G__MdcTrackDDict_225_0_6, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVolume), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSizesCells",1345,G__MdcTrackDDict_225_0_7, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSec",603,G__MdcTrackDDict_225_0_8, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMod",608,G__MdcTrackDDict_225_0_9, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayer",829,G__MdcTrackDDict_225_0_10, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCatDist",1004,G__MdcTrackDDict_225_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHalfCatDist",1383,G__MdcTrackDDict_225_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPitch",824,G__MdcTrackDDict_225_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInvPitch",1125,G__MdcTrackDDict_225_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHalfPitch",1203,G__MdcTrackDDict_225_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxDriftDist",1523,G__MdcTrackDDict_225_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCosWireOr",1213,G__MdcTrackDDict_225_0_17, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSinWireOr",1218,G__MdcTrackDDict_225_0_18, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTanWireOr",1211,G__MdcTrackDDict_225_0_19, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireOffset",1342,G__MdcTrackDDict_225_0_20, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellOffset",1319,G__MdcTrackDDict_225_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellOffsetPart2",1776,G__MdcTrackDDict_225_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCells",897,G__MdcTrackDDict_225_0_23, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSecTrans",1123,G__MdcTrackDDict_225_0_24, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModTrans",1128,G__MdcTrackDDict_225_0_25, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstCellPart2",1681,G__MdcTrackDDict_225_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerNParts",1429,G__MdcTrackDDict_225_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerPart",1236,G__MdcTrackDDict_225_0_28, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRotLayP1SysRSec",1736,G__MdcTrackDDict_225_0_29, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRotLayP2SysRSec",1737,G__MdcTrackDDict_225_0_30, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRotLayP1SysRMod",1741,G__MdcTrackDDict_225_0_31, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRotLayP2SysRMod",1742,G__MdcTrackDDict_225_0_32, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRotLaySysRSec",1607,G__MdcTrackDDict_225_0_33, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRLSysRSec",1162,G__MdcTrackDDict_225_0_34, 68, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 9, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRLP1SysRSec",1291,G__MdcTrackDDict_225_0_35, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRLP2SysRSec",1292,G__MdcTrackDDict_225_0_36, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transSecToRotLayer",1848,G__MdcTrackDDict_225_0_37, 121, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - c u 'HGeomVector' - 1 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCellNum",1091,G__MdcTrackDDict_225_0_38, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCell",787,G__MdcTrackDDict_225_0_39, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCrCellsGeantMdc",1854,G__MdcTrackDDict_225_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 8, 
"f - 'Float_t' 1 - x f - 'Float_t' 1 - y "
"f - 'Float_t' 0 - theta f - 'Float_t' 0 - phi "
"i - 'Int_t' 1 - c1 i - 'Int_t' 1 - c2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCrossedCells",1625,G__MdcTrackDDict_225_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"f - 'Float_t' 1 - cell1 f - 'Float_t' 1 - cell2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCrossedCells",1625,G__MdcTrackDDict_225_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 11, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"i - 'Int_t' 1 - firstCell i - 'Int_t' 1 - lastCell "
"f - 'Float_t' 1 - firstCellPath f - 'Float_t' 1 - midCellPath "
"f - 'Float_t' 1 - lastCellPath", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSegCrossCells",1711,G__MdcTrackDDict_225_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 9, 1, 1, 8, 
"d - 'Double_t' 0 - z d - 'Double_t' 0 - r "
"d - 'Double_t' 0 - theta d - 'Double_t' 0 - phi "
"i - 'Int_t' 1 - firstCell i - 'Int_t' 1 - lastCell "
"f - 'Float_t' 1 - firstCellPath f - 'Float_t' 1 - midCellPath "
"f - 'Float_t' 1 - lastCellPath", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCrossedCells",1625,G__MdcTrackDDict_225_0_44, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"u 'HMdcLineParam' - 11 - ln f - 'Float_t' 1 - cell1 "
"f - 'Float_t' 1 - cell2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlpha",806,G__MdcTrackDDict_225_0_45, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - c u 'HGeomVector' - 11 - p1 "
"u 'HGeomVector' - 11 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDist",724,G__MdcTrackDDict_225_0_46, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"u 'HGeomVector' - 11 - p1 u 'HGeomVector' - 11 - p2 "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDist",724,G__MdcTrackDDict_225_0_47, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYZinWireSys",1440,G__MdcTrackDDict_225_0_48, 121, -1, -1, 0, 6, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z i - 'Int_t' 0 - cell "
"d - 'Double_t' 1 - yw d - 'Double_t' 1 - zw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistToZero",1335,G__MdcTrackDDict_225_0_49, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 0 - y1 d - 'Double_t' 0 - z1 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImpactToZero",1537,G__MdcTrackDDict_225_0_50, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 8, 
"d - 'Double_t' 0 - y1 d - 'Double_t' 0 - z1 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"d - 'Double_t' 1 - alpha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImpact",926,G__MdcTrackDDict_225_0_51, 100, -1, G__defined_typename("Double_t"), 0, 8, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"i - 'Int_t' 0 - cell d - 'Double_t' 1 - alphaPerp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImpact",926,G__MdcTrackDDict_225_0_52, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"u 'HMdcLineParam' - 11 - ln i - 'Int_t' 0 - cell "
"d - 'Double_t' 1 - alpha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDist",724,G__MdcTrackDDict_225_0_53, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'HMdcLineParam' - 11 - ln i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlpha",806,G__MdcTrackDDict_225_0_54, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'HMdcLineParam' - 11 - ln i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImpact",926,G__MdcTrackDDict_225_0_55, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 1, 8, 
"u 'HMdcLineParam' - 11 - ln i - 'Int_t' 0 - cell "
"d - 'Double_t' 1 - alpha d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - z d - 'Double_t' 1 - dy "
"d - 'Double_t' 1 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImpact",926,G__MdcTrackDDict_225_0_56, 121, -1, -1, 0, 5, 1, 1, 8, 
"u 'HGeomVector' - 11 - p1 u 'HGeomVector' - 11 - p2 "
"i - 'Int_t' 0 - cell d - 'Double_t' 1 - alpha "
"d - 'Double_t' 1 - per", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImpactLSys",1321,G__MdcTrackDDict_225_0_57, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 8, 
"u 'HGeomVector' - 11 - p1l u 'HGeomVector' - 11 - p2l "
"i - 'Int_t' 0 - cell d - 'Double_t' 1 - alpha "
"i - 'Int_t' 1 - distSign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImpact",926,G__MdcTrackDDict_225_0_58, 103, -1, G__defined_typename("Bool_t"), 0, 9, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"i - 'Int_t' 0 - cell d - 'Double_t' 1 - alphaDrDist "
"d - 'Double_t' 1 - driftDist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImpact",926,G__MdcTrackDDict_225_0_59, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"u 'HMdcLineParam' - 11 - ln i - 'Int_t' 0 - cell "
"d - 'Double_t' 1 - alpha d - 'Double_t' 1 - minDist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImpact",926,G__MdcTrackDDict_225_0_60, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 8, 
"u 'HMdcLineParam' - 11 - ln i - 'Int_t' 0 - cell "
"d - 'Double_t' 1 - alpha d - 'Double_t' 1 - minDist "
"d - 'Double_t' 1 - y d - 'Double_t' 1 - z "
"d - 'Double_t' 1 - dy d - 'Double_t' 1 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distanceSign",1244,G__MdcTrackDDict_225_0_61, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"u 'HMdcLineParam' - 11 - ln i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDriftDist",1229,G__MdcTrackDDict_225_0_62, 103, -1, G__defined_typename("Bool_t"), 0, 9, 1, 1, 8, 
"d - 'Double_t' 0 - xP1 d - 'Double_t' 0 - yP1 "
"d - 'Double_t' 0 - zP1 d - 'Double_t' 0 - xP2 "
"d - 'Double_t' 0 - yP2 d - 'Double_t' 0 - zP2 "
"i - 'Int_t' 0 - cell d - 'Double_t' 1 - alphaDrDist "
"d - 'Double_t' 1 - driftDist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXSign",809,G__MdcTrackDDict_225_0_63, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXSign",809,G__MdcTrackDDict_225_0_64, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'HMdcLineParam' - 11 - ln i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSignPath",1118,G__MdcTrackDDict_225_0_65, 102, -1, G__defined_typename("Float_t"), 0, 7, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSignPath",1118,G__MdcTrackDDict_225_0_66, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'HMdcLineParam' - 11 - ln i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSignPath",1118,G__MdcTrackDDict_225_0_67, 102, -1, G__defined_typename("Float_t"), 0, 8, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"i - 'Int_t' 0 - cell f - 'Float_t' 1 - outside", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transTo",747,G__MdcTrackDDict_225_0_68, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transFrom",956,G__MdcTrackDDict_225_0_69, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotVectToLay",1232,G__MdcTrackDDict_225_0_70, 121, -1, -1, 0, 6, 1, 1, 8, 
"d - 'Double_t' 0 - xi d - 'Double_t' 0 - yi "
"d - 'Double_t' 0 - zi d - 'Double_t' 1 - xo "
"d - 'Double_t' 1 - yo d - 'Double_t' 1 - zo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXinRotLay",1226,G__MdcTrackDDict_225_0_71, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - c d - 'Double_t' 0 - xi "
"d - 'Double_t' 0 - yi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYinRotLay",1227,G__MdcTrackDDict_225_0_72, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - c d - 'Double_t' 0 - xi "
"d - 'Double_t' 0 - yi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcInnerSegCell",1582,G__MdcTrackDDict_225_0_73, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcInnerSegCell",1582,G__MdcTrackDDict_225_0_74, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'HGeomVector' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPntToCell",1205,G__MdcTrackDDict_225_0_75, 121, -1, -1, 0, 1, 1, 1, 8, "D - 'Double_t' 0 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_225_0_76, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSensWiresThickness",2191,G__MdcTrackDDict_225_0_77, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZGeantHits",1313,G__MdcTrackDDict_225_0_78, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSecTransGeant",1618,G__MdcTrackDDict_225_0_79, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModTransGeant",1623,G__MdcTrackDDict_225_0_80, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantHitsPlane",1719,G__MdcTrackDDict_225_0_81, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCrossedCellsPar",1916,G__MdcTrackDDict_225_0_82, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 8, 
"D - 'Double_t' 10 - v d - 'Double_t' 0 - extendCells "
"i - 'Int_t' 1 - c1 i - 'Int_t' 1 - c2 "
"i - 'Int_t' 1 - c3 D - 'Double_t' 0 - al "
"D - 'Double_t' 0 - md D - 'Double_t' 0 - st", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRotLSysForOtherSecSys",2435,G__MdcTrackDDict_225_0_83, 121, -1, -1, 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - othSec i - 'Int_t' 0 - cell "
"u 'HGeomTransform' - 1 - trans", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCrossedCellsPar",1916,G__MdcTrackDDict_225_0_84, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 8, 
"u 'HMdcLineParam' - 11 - ln d - 'Double_t' 0 - extendCells "
"i - 'Int_t' 1 - c1 i - 'Int_t' 1 - c2 "
"i - 'Int_t' 1 - c3 D - 'Double_t' 0 - al "
"D - 'Double_t' 0 - md D - 'Double_t' 0 - st", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcAlphaImpact",1495,G__MdcTrackDDict_225_0_85, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "d - 'Double_t' 0 - dydz", (char*)NULL, (void*) G__func2void( (Float_t (*)(Double_t))(&HMdcSizesCellsLayer::calcAlphaImpact) ), 0);
   G__memfunc_setup("getWireOrient",1352,G__MdcTrackDDict_225_0_86, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcWireY",899,G__MdcTrackDDict_225_0_87, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initLayer",945,G__MdcTrackDDict_225_0_88, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcSizesCellsMod' - 0 - pMod i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParamCont",1221,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcWire",810,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcInOtherSecSys",1702,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 4, 8, 
"u 'HMdcLineParam' - 11 - ln i - 'Int_t' 0 - cell "
"d - 'Double_t' 1 - y d - 'Double_t' 1 - z "
"d - 'Double_t' 1 - dy d - 'Double_t' 1 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateTo",850,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 3, 4, 0, 
"D - 'Double_t' 10 - trans d - 'Double_t' 0 - xi "
"d - 'Double_t' 0 - yi d - 'Double_t' 0 - zi "
"d - 'Double_t' 1 - yo d - 'Double_t' 1 - zo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateTo",850,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 7, 3, 4, 0, 
"D - 'Double_t' 10 - trans d - 'Double_t' 0 - xi "
"d - 'Double_t' 0 - yi d - 'Double_t' 0 - zi "
"d - 'Double_t' 1 - xo d - 'Double_t' 1 - yo "
"d - 'Double_t' 1 - zo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateTo",850,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 3, 4, 0, 
"D - 'Double_t' 10 - trans u 'HGeomVector' - 11 - d "
"d - 'Double_t' 1 - yo d - 'Double_t' 1 - zo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateTo",850,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 3, 4, 0, 
"D - 'Double_t' 10 - trans u 'HGeomVector' - 11 - d "
"d - 'Double_t' 1 - xo d - 'Double_t' 1 - yo "
"d - 'Double_t' 1 - zo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcImpactParam",1506,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 8, 
"u 'HMdcLineParam' - 11 - ln d - 'Double_t' 1 - tanAlpha "
"g - 'Bool_t' 0 'kTRUE' isLayerFirstPart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_225_0_97, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcSizesCellsLayer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_225_0_98, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCellsLayer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_225_0_99, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcSizesCellsLayer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_225_0_100, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcSizesCellsLayer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_225_0_104, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_225_0_105, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCellsLayer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_225_0_106, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSizesCellsLayer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_225_0_107, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCellsLayer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_225_0_108, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSizesCellsLayer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcSizesCellsLayer", 1882, G__MdcTrackDDict_225_0_109, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer), -1, 0, 1, 1, 1, 0, "u 'HMdcSizesCellsLayer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcSizesCellsLayer", 2008, G__MdcTrackDDict_225_0_110, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_225_0_111, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer), -1, 1, 1, 1, 1, 0, "u 'HMdcSizesCellsLayer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcSizesCellsSec(void) {
   /* HMdcSizesCellsSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsSec));
   G__memfunc_setup("HMdcSizesCellsSec",1656,G__MdcTrackDDict_226_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsSec), -1, 0, 2, 1, 1, 0, 
"U 'HMdcSizesCells' - 0 - pSC i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_226_0_2, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod), -1, 1, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcTrackDDict_226_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabTrans",1111,G__MdcTrackDDict_226_0_4, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcTrackDDict_226_0_5, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("modStatus",964,G__MdcTrackDDict_226_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSizesCells",1345,G__MdcTrackDDict_226_0_7, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetFirstPoint",1977,G__MdcTrackDDict_226_0_8, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetMiddlePoint",2048,G__MdcTrackDDict_226_0_9, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetLastPoint",1861,G__MdcTrackDDict_226_0_10, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcRZToTargLine",1560,G__MdcTrackDDict_226_0_11, 121, -1, -1, 0, 8, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"d - 'Double_t' 1 - zm d - 'Double_t' 1 - r0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumOfTargets",1535,G__MdcTrackDDict_226_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargets",1050,G__MdcTrackDDict_226_0_13, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTarget",935,G__MdcTrackDDict_226_0_14, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabTransform",1547,G__MdcTrackDDict_226_0_15, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomTransform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumOfTargets",1547,G__MdcTrackDDict_226_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeomVector' - 0 - targ3pLab i - 'Int_t' 0 - nt "
"U 'HGeomVector' - 0 - targetsLab", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_226_0_17, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcSizesCellsSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_226_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCellsSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_226_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcSizesCellsSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_226_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcSizesCellsSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_226_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_226_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCellsSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_226_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSizesCellsSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_226_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSizesCellsSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_226_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSizesCellsSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcSizesCellsSec", 1656, G__MdcTrackDDict_226_0_29, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsSec), -1, 0, 1, 1, 1, 0, "u 'HMdcSizesCellsSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcSizesCellsSec", 1782, G__MdcTrackDDict_226_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_226_0_31, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsSec), -1, 1, 1, 1, 1, 0, "u 'HMdcSizesCellsSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLayer(void) {
   /* HMdcLayer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayer));
   G__memfunc_setup("HMdcLayer",857,G__MdcTrackDDict_228_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMDCCrop",948,G__MdcTrackDDict_228_0_2, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - m d - 'Double_t' 0 - xlowcrop "
"d - 'Double_t' 0 - xupcrop d - 'Double_t' 0 - ylowcrop "
"d - 'Double_t' 0 - yupcrop", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillLayerPoints",1569,G__MdcTrackDDict_228_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcSizesCells' - 0 - fSizesCells g - 'Bool_t' 0 'kFALSE' secsys", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCropedLayer",1517,G__MdcTrackDDict_228_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayersEdge",1317,G__MdcTrackDDict_228_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 12, 1, 1, 0, 
"u 'TVector2' - 1 - p i - 'Int_t' 0 - s "
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"d - 'Double_t' 1 - xmin d - 'Double_t' 1 - xmax "
"d - 'Double_t' 1 - ymin d - 'Double_t' 1 - ymax "
"d - 'Double_t' 1 - xmincrop d - 'Double_t' 1 - xmaxcrop "
"d - 'Double_t' 1 - ymincrop d - 'Double_t' 1 - ymaxcrop", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayersEdge",1317,G__MdcTrackDDict_228_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 0, 
"u 'TVector2' - 1 - p i - 'Int_t' 0 - s "
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"d - 'Double_t' 1 - xmin d - 'Double_t' 1 - xmax "
"d - 'Double_t' 1 - ymin d - 'Double_t' 1 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCropedLayersEdge",1922,G__MdcTrackDDict_228_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 0, 
"u 'TVector2' - 1 - p i - 'Int_t' 0 - s "
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"d - 'Double_t' 1 - xmin d - 'Double_t' 1 - xmax "
"d - 'Double_t' 1 - ymin d - 'Double_t' 1 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isCroped",825,G__MdcTrackDDict_228_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'TVector2' - 1 - p i - 'Int_t' 0 - s "
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerPoints",1466,G__MdcTrackDDict_228_0_9, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l u 'TVector2' - 1 - p0 "
"u 'TVector2' - 1 - p1 u 'TVector2' - 1 - p2 "
"u 'TVector2' - 1 - p3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCropedLayerPoints",2071,G__MdcTrackDDict_228_0_10, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l u 'TVector2' - 1 - p0 "
"u 'TVector2' - 1 - p1 u 'TVector2' - 1 - p2 "
"u 'TVector2' - 1 - p3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printLayer",1066,G__MdcTrackDDict_228_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCropedLayer",1671,G__MdcTrackDDict_228_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillRKPlane",1076,G__MdcTrackDDict_228_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcSizesCells' - 0 - fSizesCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetMidPoint",1739,G__MdcTrackDDict_228_0_14, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcPlane",1092,G__MdcTrackDDict_228_0_15, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane), -1, 1, 1, 1, 1, 1, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcPlanes",1207,G__MdcTrackDDict_228_0_16, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_228_0_17, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLayer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_228_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_228_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLayer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_228_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLayer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_228_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_228_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_228_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLayer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_228_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_228_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLayer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLayer", 857, G__MdcTrackDDict_228_0_29, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayer), -1, 0, 1, 1, 1, 0, "u 'HMdcLayer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLayer", 983, G__MdcTrackDDict_228_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_228_0_31, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayer), -1, 1, 1, 1, 1, 0, "u 'HMdcLayer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcClFnStack(void) {
   /* HMdcClFnStack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack));
   G__memfunc_setup("HMdcClFnStack",1205,G__MdcTrackDDict_229_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '20' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSize",743,G__MdcTrackDDict_229_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__MdcTrackDDict_229_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push",448,G__MdcTrackDDict_229_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop",335,G__MdcTrackDDict_229_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkSize",921,G__MdcTrackDDict_229_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIndex",836,G__MdcTrackDDict_229_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("create",628,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseStack",1344,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_229_0_10, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcClFnStack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_229_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClFnStack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_229_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcClFnStack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_229_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcClFnStack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_229_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_229_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClFnStack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_229_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClFnStack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_229_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClFnStack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_229_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClFnStack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcClFnStack", 1205, G__MdcTrackDDict_229_0_22, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack), -1, 0, 1, 1, 1, 0, "u 'HMdcClFnStack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcClFnStack", 1331, G__MdcTrackDDict_229_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_229_0_24, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack), -1, 1, 1, 1, 1, 0, "u 'HMdcClFnStack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcClFnStacksArr(void) {
   /* HMdcClFnStacksArr */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStacksArr));
   G__memfunc_setup("HMdcClFnStacksArr",1613,G__MdcTrackDDict_230_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStacksArr), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1000' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__MdcTrackDDict_230_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 '24' maxAmp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push",448,G__MdcTrackDDict_230_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n b - 'UChar_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop",335,G__MdcTrackDDict_230_0_4, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 1 - binNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOneStack",1112,G__MdcTrackDDict_230_0_5, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_230_0_6, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcClFnStacksArr::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_230_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClFnStacksArr::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_230_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcClFnStacksArr::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_230_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcClFnStacksArr::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_230_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_230_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClFnStacksArr::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_230_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClFnStacksArr::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_230_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClFnStacksArr::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_230_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClFnStacksArr::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcClFnStacksArr", 1613, G__MdcTrackDDict_230_0_18, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStacksArr), -1, 0, 1, 1, 1, 0, "u 'HMdcClFnStacksArr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcClFnStacksArr", 1739, G__MdcTrackDDict_230_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_230_0_20, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClFnStacksArr), -1, 1, 1, 1, 1, 0, "u 'HMdcClFnStacksArr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTBArray(void) {
   /* HMdcTBArray */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTBArray));
   G__memfunc_setup("clear",519,G__MdcTrackDDict_231_0_1, 121, -1, -1, 0, 2, 3, 1, 0, 
"B - 'UChar_t' 0 - pF B - 'UChar_t' 0 - pL", (char*)NULL, (void*) G__func2void( (void (*)(UChar_t*, UChar_t*))(&HMdcTBArray::clear) ), 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_231_0_2, 121, -1, -1, 0, 3, 3, 1, 0, 
"B - 'UChar_t' 0 - pF i - 'Int_t' 0 - pos "
"b - 'UChar_t' 0 - cont", (char*)NULL, (void*) G__func2void( (void (*)(UChar_t*, Int_t, UChar_t))(&HMdcTBArray::set) ), 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_231_0_3, 98, -1, G__defined_typename("UChar_t"), 0, 2, 3, 1, 0, 
"B - 'UChar_t' 10 - pF i - 'Int_t' 0 - pos", (char*)NULL, (void*) G__func2void( (UChar_t (*)(const UChar_t*, Int_t))(&HMdcTBArray::get) ), 0);
   G__memfunc_setup("unset",559,G__MdcTrackDDict_231_0_4, 121, -1, -1, 0, 3, 3, 1, 0, 
"B - 'UChar_t' 0 - pF i - 'Int_t' 0 - pos "
"b - 'UChar_t' 0 - cont", (char*)NULL, (void*) G__func2void( (void (*)(UChar_t*, Int_t, UChar_t))(&HMdcTBArray::unset) ), 0);
   G__memfunc_setup("getNSet",698,G__MdcTrackDDict_231_0_5, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"B - 'UChar_t' 10 - pF B - 'UChar_t' 10 - pL", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*))(&HMdcTBArray::getNSet) ), 0);
   G__memfunc_setup("position",885,G__MdcTrackDDict_231_0_6, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"B - 'UChar_t' 10 - pF B - 'UChar_t' 10 - pL "
"i - 'Int_t' 0 - idx", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*, Int_t))(&HMdcTBArray::position) ), 0);
   G__memfunc_setup("first",552,G__MdcTrackDDict_231_0_7, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"B - 'UChar_t' 10 - pF B - 'UChar_t' 10 - pL", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*))(&HMdcTBArray::first) ), 0);
   G__memfunc_setup("last",436,G__MdcTrackDDict_231_0_8, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"B - 'UChar_t' 10 - pF B - 'UChar_t' 10 - pL", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*))(&HMdcTBArray::last) ), 0);
   G__memfunc_setup("shiftRight",1052,G__MdcTrackDDict_231_0_9, 121, -1, -1, 0, 3, 3, 1, 0, 
"B - 'UChar_t' 0 - pF B - 'UChar_t' 0 - pL "
"B - 'UChar_t' 0 - pS", (char*)NULL, (void*) G__func2void( (void (*)(UChar_t*, UChar_t*, UChar_t*))(&HMdcTBArray::shiftRight) ), 0);
   G__memfunc_setup("shiftLeft",937,G__MdcTrackDDict_231_0_10, 121, -1, -1, 0, 3, 3, 1, 0, 
"B - 'UChar_t' 0 - pT B - 'UChar_t' 0 - pL "
"B - 'UChar_t' 0 - pS", (char*)NULL, (void*) G__func2void( (void (*)(UChar_t*, UChar_t*, UChar_t*))(&HMdcTBArray::shiftLeft) ), 0);
   G__memfunc_setup("compare",743,G__MdcTrackDDict_231_0_11, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"B - 'UChar_t' 10 - pF1 B - 'UChar_t' 10 - pF2 "
"i - 'Int_t' 0 - nBytes", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*, Int_t))(&HMdcTBArray::compare) ), 0);
   G__memfunc_setup("andArr",600,G__MdcTrackDDict_231_0_12, 105, -1, G__defined_typename("Int_t"), 0, 4, 3, 1, 0, 
"B - 'UChar_t' 10 - pF1 B - 'UChar_t' 10 - pF2 "
"i - 'Int_t' 0 - nBytes B - 'UChar_t' 0 - pOut", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*, Int_t, UChar_t*))(&HMdcTBArray::andArr) ), 0);
   G__memfunc_setup("xorArr",638,G__MdcTrackDDict_231_0_13, 105, -1, G__defined_typename("Int_t"), 0, 4, 3, 1, 0, 
"B - 'UChar_t' 10 - pF1 B - 'UChar_t' 10 - pF2 "
"i - 'Int_t' 0 - nBytes B - 'UChar_t' 0 - pOut", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*, Int_t, UChar_t*))(&HMdcTBArray::xorArr) ), 0);
   G__memfunc_setup("andArrAndUnset",1402,G__MdcTrackDDict_231_0_14, 105, -1, G__defined_typename("Int_t"), 0, 4, 3, 1, 0, 
"B - 'UChar_t' 0 - pNoId B - 'UChar_t' 10 - pEx "
"i - 'Int_t' 0 - nBytes B - 'UChar_t' 0 - pIdnt", (char*)NULL, (void*) G__func2void( (Int_t (*)(UChar_t*, const UChar_t*, Int_t, UChar_t*))(&HMdcTBArray::andArrAndUnset) ), 0);
   G__memfunc_setup("isIdenBits",1006,G__MdcTrackDDict_231_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"B - 'UChar_t' 10 - pF1 B - 'UChar_t' 10 - pF2 "
"i - 'Int_t' 0 - nBytes", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const UChar_t*, const UChar_t*, Int_t))(&HMdcTBArray::isIdenBits) ), 0);
   G__memfunc_setup("next",447,G__MdcTrackDDict_231_0_16, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"B - 'UChar_t' 10 - pF B - 'UChar_t' 10 - pL "
"i - 'Int_t' 0 - prPos", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*, Int_t))(&HMdcTBArray::next) ), 0);
   G__memfunc_setup("previous",893,G__MdcTrackDDict_231_0_17, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"B - 'UChar_t' 10 - pF B - 'UChar_t' 10 - pL "
"i - 'Int_t' 0 - prPos", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*, Int_t))(&HMdcTBArray::previous) ), 0);
   G__memfunc_setup("next2Bits",899,G__MdcTrackDDict_231_0_18, 98, -1, G__defined_typename("UChar_t"), 0, 3, 3, 1, 0, 
"B - 'UChar_t' 10 - pF B - 'UChar_t' 10 - pL "
"i - 'Int_t' 1 - pos", (char*)NULL, (void*) G__func2void( (UChar_t (*)(const UChar_t*, const UChar_t*, Int_t&))(&HMdcTBArray::next2Bits) ), 0);
   G__memfunc_setup("HMdcTBArray",1009,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTBArray), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_231_0_20, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTBArray::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_231_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTBArray::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_231_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTBArray::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_231_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTBArray::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__MdcTrackDDict_231_0_24, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MdcTrackDDict_231_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MdcTrackDDict_231_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_231_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_231_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTBArray::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_231_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTBArray::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_231_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTBArray::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_231_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTBArray::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTBArray", 1009, G__MdcTrackDDict_231_0_32, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTBArray), -1, 0, 1, 1, 1, 0, "u 'HMdcTBArray' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_231_0_33, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTBArray), -1, 1, 1, 1, 1, 0, "u 'HMdcTBArray' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcBArray(void) {
   /* HMdcBArray */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcBArray));
   G__memfunc_setup("clear",519,G__MdcTrackDDict_232_0_1, 121, -1, -1, 0, 2, 3, 1, 0, 
"B - 'UChar_t' 0 - pF B - 'UChar_t' 0 - pL", (char*)NULL, (void*) G__func2void( (void (*)(UChar_t*, UChar_t*))(&HMdcBArray::clear) ), 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_232_0_2, 121, -1, -1, 0, 2, 3, 1, 0, 
"B - 'UChar_t' 0 - pF i - 'Int_t' 0 - pos", (char*)NULL, (void*) G__func2void( (void (*)(UChar_t*, Int_t))(&HMdcBArray::set) ), 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_232_0_3, 98, -1, G__defined_typename("UChar_t"), 0, 2, 3, 1, 0, 
"B - 'UChar_t' 10 - pF i - 'Int_t' 0 - pos", (char*)NULL, (void*) G__func2void( (UChar_t (*)(const UChar_t*, Int_t))(&HMdcBArray::get) ), 0);
   G__memfunc_setup("unset",559,G__MdcTrackDDict_232_0_4, 121, -1, -1, 0, 2, 3, 1, 0, 
"B - 'UChar_t' 0 - pF i - 'Int_t' 0 - pos", (char*)NULL, (void*) G__func2void( (void (*)(UChar_t*, Int_t))(&HMdcBArray::unset) ), 0);
   G__memfunc_setup("testAndUnset",1250,G__MdcTrackDDict_232_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"B - 'UChar_t' 0 - pF i - 'Int_t' 0 - pos", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UChar_t*, Int_t))(&HMdcBArray::testAndUnset) ), 0);
   G__memfunc_setup("getNSet",698,G__MdcTrackDDict_232_0_6, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"B - 'UChar_t' 10 - pF B - 'UChar_t' 10 - pL", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*))(&HMdcBArray::getNSet) ), 0);
   G__memfunc_setup("getNSet",698,G__MdcTrackDDict_232_0_7, 98, -1, G__defined_typename("UChar_t"), 0, 1, 3, 1, 0, "B - 'UChar_t' 10 - pF", "One byte", (void*) G__func2void( (UChar_t (*)(const UChar_t*))(&HMdcBArray::getNSet) ), 0);
   G__memfunc_setup("getNSet",698,G__MdcTrackDDict_232_0_8, 98, -1, G__defined_typename("UChar_t"), 0, 1, 3, 1, 0, "b - 'UChar_t' 10 - byte", "One byte", (void*) G__func2void( (UChar_t (*)(const UChar_t))(&HMdcBArray::getNSet) ), 0);
   G__memfunc_setup("getNLayOrientation",1856,G__MdcTrackDDict_232_0_9, 98, -1, G__defined_typename("UChar_t"), 0, 1, 3, 1, 0, "b - 'UChar_t' 0 - list", (char*)NULL, (void*) G__func2void( (UChar_t (*)(UChar_t))(&HMdcBArray::getNLayOrientation) ), 0);
   G__memfunc_setup("is40DegWireCross",1521,G__MdcTrackDDict_232_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "b - 'UChar_t' 0 - list", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UChar_t))(&HMdcBArray::is40DegWireCross) ), 0);
   G__memfunc_setup("getNSet2B",814,G__MdcTrackDDict_232_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "B - 'UChar_t' 10 - pF", "Two bytes", (void*) G__func2void( (Int_t (*)(const UChar_t*))(&HMdcBArray::getNSet2B) ), 0);
   G__memfunc_setup("position",885,G__MdcTrackDDict_232_0_12, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"B - 'UChar_t' 10 - pF B - 'UChar_t' 10 - pL "
"i - 'Int_t' 0 - idx", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*, Int_t))(&HMdcBArray::position) ), 0);
   G__memfunc_setup("first",552,G__MdcTrackDDict_232_0_13, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"B - 'UChar_t' 10 - pF B - 'UChar_t' 10 - pL", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*))(&HMdcBArray::first) ), 0);
   G__memfunc_setup("last",436,G__MdcTrackDDict_232_0_14, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"B - 'UChar_t' 10 - pF B - 'UChar_t' 10 - pL", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*))(&HMdcBArray::last) ), 0);
   G__memfunc_setup("next",447,G__MdcTrackDDict_232_0_15, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"B - 'UChar_t' 10 - pF B - 'UChar_t' 10 - pL "
"i - 'Int_t' 0 - prPos", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*, Int_t))(&HMdcBArray::next) ), 0);
   G__memfunc_setup("nextAndUnset",1249,G__MdcTrackDDict_232_0_16, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"B - 'UChar_t' 0 - pF B - 'UChar_t' 0 - pL "
"i - 'Int_t' 0 - prPos", (char*)NULL, (void*) G__func2void( (Int_t (*)(UChar_t*, UChar_t*, Int_t))(&HMdcBArray::nextAndUnset) ), 0);
   G__memfunc_setup("previous",893,G__MdcTrackDDict_232_0_17, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"B - 'UChar_t' 10 - pF B - 'UChar_t' 10 - pL "
"i - 'Int_t' 0 - prPos", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*, Int_t))(&HMdcBArray::previous) ), 0);
   G__memfunc_setup("prevAndUnset",1247,G__MdcTrackDDict_232_0_18, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"B - 'UChar_t' 0 - pF B - 'UChar_t' 0 - pL "
"i - 'Int_t' 0 - prPos", (char*)NULL, (void*) G__func2void( (Int_t (*)(UChar_t*, UChar_t*, Int_t))(&HMdcBArray::prevAndUnset) ), 0);
   G__memfunc_setup("shiftRight",1052,G__MdcTrackDDict_232_0_19, 121, -1, -1, 0, 3, 3, 1, 0, 
"B - 'UChar_t' 0 - pF B - 'UChar_t' 0 - pL "
"B - 'UChar_t' 0 - pS", (char*)NULL, (void*) G__func2void( (void (*)(UChar_t*, UChar_t*, UChar_t*))(&HMdcBArray::shiftRight) ), 0);
   G__memfunc_setup("shiftLeft",937,G__MdcTrackDDict_232_0_20, 121, -1, -1, 0, 3, 3, 1, 0, 
"B - 'UChar_t' 0 - pT B - 'UChar_t' 0 - pL "
"B - 'UChar_t' 0 - pS", (char*)NULL, (void*) G__func2void( (void (*)(UChar_t*, UChar_t*, UChar_t*))(&HMdcBArray::shiftLeft) ), 0);
   G__memfunc_setup("compare",743,G__MdcTrackDDict_232_0_21, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"B - 'UChar_t' 10 - pF1 B - 'UChar_t' 10 - pF2 "
"i - 'Int_t' 0 - nBytes", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*, Int_t))(&HMdcBArray::compare) ), 0);
   G__memfunc_setup("andArr",600,G__MdcTrackDDict_232_0_22, 105, -1, G__defined_typename("Int_t"), 0, 4, 3, 1, 0, 
"B - 'UChar_t' 10 - pF1 B - 'UChar_t' 10 - pF2 "
"i - 'Int_t' 0 - nBytes B - 'UChar_t' 0 - pOut", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*, Int_t, UChar_t*))(&HMdcBArray::andArr) ), 0);
   G__memfunc_setup("xorArr",638,G__MdcTrackDDict_232_0_23, 105, -1, G__defined_typename("Int_t"), 0, 4, 3, 1, 0, 
"B - 'UChar_t' 10 - pF1 B - 'UChar_t' 10 - pF2 "
"i - 'Int_t' 0 - nBytes B - 'UChar_t' 0 - pOut", (char*)NULL, (void*) G__func2void( (Int_t (*)(const UChar_t*, const UChar_t*, Int_t, UChar_t*))(&HMdcBArray::xorArr) ), 0);
   G__memfunc_setup("andArrAndUnset",1402,G__MdcTrackDDict_232_0_24, 105, -1, G__defined_typename("Int_t"), 0, 4, 3, 1, 0, 
"B - 'UChar_t' 0 - pNoId B - 'UChar_t' 10 - pEx "
"i - 'Int_t' 0 - nBytes B - 'UChar_t' 0 - pIdnt", (char*)NULL, (void*) G__func2void( (Int_t (*)(UChar_t*, const UChar_t*, Int_t, UChar_t*))(&HMdcBArray::andArrAndUnset) ), 0);
   G__memfunc_setup("HMdcBArray",925,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcBArray), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_232_0_26, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcBArray::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_232_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcBArray::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_232_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcBArray::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_232_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcBArray::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__MdcTrackDDict_232_0_30, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MdcTrackDDict_232_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MdcTrackDDict_232_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_232_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_232_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcBArray::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_232_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcBArray::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_232_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcBArray::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_232_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcBArray::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcBArray", 925, G__MdcTrackDDict_232_0_38, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcBArray), -1, 0, 1, 1, 1, 0, "u 'HMdcBArray' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_232_0_39, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcBArray), -1, 1, 1, 1, 1, 0, "u 'HMdcBArray' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcList12GroupCells(void) {
   /* HMdcList12GroupCells */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells));
   G__memfunc_setup("HMdcList12GroupCells",1883,G__MdcTrackDDict_233_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MdcTrackDDict_233_0_2, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells), -1, 1, 1, 1, 1, 0, "u 'HMdcList12GroupCells' - 11 - lst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_233_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__MdcTrackDDict_233_0_4, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell "
"b - 'UChar_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__MdcTrackDDict_233_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HMdcList12GroupCells' - 0 - lst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delTime",708,G__MdcTrackDDict_233_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell "
"b - 'UChar_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCells",897,G__MdcTrackDDict_233_0_7, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 '-1' layEnd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCells",897,G__MdcTrackDDict_233_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Total num.of hits", (void*) NULL, 0);
   G__memfunc_setup("getMaxNCellsPerLay",1780,G__MdcTrackDDict_233_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Max.number of cells per layer", (void*) NULL, 0);
   G__memfunc_setup("getNDrTimes",1094,G__MdcTrackDDict_233_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDrTimes",1094,G__MdcTrackDDict_233_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDrTimes",1094,G__MdcTrackDDict_233_0_12, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay1 i - 'Int_t' 0 - lay2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDrTimesMod",1382,G__MdcTrackDDict_233_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayers",1022,G__MdcTrackDDict_233_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Num. of layers with fired wires", (void*) NULL, 0);
   G__memfunc_setup("getNLayers",1022,G__MdcTrackDDict_233_0_15, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - imod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayersMod",1310,G__MdcTrackDDict_233_0_16, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - mod", "-/- in module", (void*) NULL, 0);
   G__memfunc_setup("getListLayers",1356,G__MdcTrackDDict_233_0_17, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '-1' imod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__MdcTrackDDict_233_0_18, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstCell",1224,G__MdcTrackDDict_233_0_19, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastCell",1108,G__MdcTrackDDict_233_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getActiveModule",1538,G__MdcTrackDDict_233_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get4FirstCells",1391,G__MdcTrackDDict_233_0_22, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay I - 'Int_t' 0 - list", "for Hit&Seg", (void*) NULL, 0);
   G__memfunc_setup("getOneLayerGroup",1644,G__MdcTrackDDict_233_0_23, 114, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("next",447,G__MdcTrackDDict_233_0_24, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - prCell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("next",447,G__MdcTrackDDict_233_0_25, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - prCell "
"b - 'UChar_t' 1 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_233_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay i - 'Int_t' 1 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextCell",1119,G__MdcTrackDDict_233_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 1 - lay i - 'Int_t' 1 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("previous",893,G__MdcTrackDDict_233_0_28, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - prCell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__MdcTrackDDict_233_0_29, 98, -1, G__defined_typename("UChar_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__MdcTrackDDict_233_0_30, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 8, 
"U 'HMdcList12GroupCells' - 10 - lst i - 'Int_t' 0 '-1' l1 "
"i - 'Int_t' 0 '-1' l2 U 'HMdcList12GroupCells' - 0 '0' lstIdent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compareAndUnset",1545,G__MdcTrackDDict_233_0_31, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"U 'HMdcList12GroupCells' - 10 - lst U 'HMdcList12GroupCells' - 0 - lstIdent "
"i - 'Int_t' 0 '-1' modi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isIncluded",1028,G__MdcTrackDDict_233_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"u 'HMdcList12GroupCells' - 11 - lst i - 'Int_t' 0 '0' l1 "
"i - 'Int_t' 0 '11' l2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nIdentDrTimes",1306,G__MdcTrackDDict_233_0_33, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"U 'HMdcList12GroupCells' - 10 - lst i - 'Int_t' 0 '0' l1 "
"i - 'Int_t' 0 '11' l2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_233_0_34, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_233_0_35, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArr",613,G__MdcTrackDDict_233_0_36, 66, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstCell",1224,G__MdcTrackDDict_233_0_37, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findOverlap",1146,G__MdcTrackDDict_233_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 1 - c1 i - 'Int_t' 1 - c2", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t&, Int_t&))(&HMdcList12GroupCells::findOverlap) ), 0);
   G__memfunc_setup("copyData",821,G__MdcTrackDDict_233_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"B - 'UChar_t' 10 - a I - 'Int_t' 10 - fc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInBounds",1134,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"i - 'Int_t' 1 - l1 i - 'Int_t' 1 - l2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isLayOk",700,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("shiftLeft",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("layAddr",705,(G__InterfaceMethod) NULL, 66, -1, G__defined_typename("UChar_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cellAddr",795,(G__InterfaceMethod) NULL, 66, -1, G__defined_typename("UChar_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("layAddrC",772,(G__InterfaceMethod) NULL, 66, -1, G__defined_typename("UChar_t"), 0, 1, 1, 4, 9, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cellAddrC",862,(G__InterfaceMethod) NULL, 66, -1, G__defined_typename("UChar_t"), 0, 2, 1, 4, 9, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_233_0_47, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcList12GroupCells::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_233_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcList12GroupCells::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_233_0_49, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcList12GroupCells::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_233_0_50, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcList12GroupCells::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_233_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_233_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcList12GroupCells::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_233_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcList12GroupCells::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_233_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcList12GroupCells::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_233_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcList12GroupCells::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcList12GroupCells", 1883, G__MdcTrackDDict_233_0_59, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells), -1, 0, 1, 1, 1, 0, "u 'HMdcList12GroupCells' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcList12GroupCells", 2009, G__MdcTrackDDict_233_0_60, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcList24GroupCells(void) {
   /* HMdcList24GroupCells */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells));
   G__memfunc_setup("HMdcList24GroupCells",1886,G__MdcTrackDDict_235_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MdcTrackDDict_235_0_2, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells), -1, 1, 1, 1, 1, 0, "u 'HMdcList24GroupCells' - 11 - lst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_235_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSeg1",668,G__MdcTrackDDict_235_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcList12GroupCells' - 10 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSeg2",669,G__MdcTrackDDict_235_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcList12GroupCells' - 10 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_235_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcList12GroupCells' - 10 - seg1 U 'HMdcList12GroupCells' - 10 - seg2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__MdcTrackDDict_235_0_7, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell "
"b - 'UChar_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__MdcTrackDDict_235_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HMdcList24GroupCells' - 0 - lst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delTime",708,G__MdcTrackDDict_235_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell "
"b - 'UChar_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCells",897,G__MdcTrackDDict_235_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCellsMod",1185,G__MdcTrackDDict_235_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCells",897,G__MdcTrackDDict_235_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Total num.of cells", (void*) NULL, 0);
   G__memfunc_setup("getMaxNCellsPerLay",1780,G__MdcTrackDDict_235_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Max. numb.of cells/layer", (void*) NULL, 0);
   G__memfunc_setup("getNDrTimes",1094,G__MdcTrackDDict_235_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDrTimes",1094,G__MdcTrackDDict_235_0_15, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDrTimes",1094,G__MdcTrackDDict_235_0_16, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay1 i - 'Int_t' 0 - lay2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDrTimesMod",1382,G__MdcTrackDDict_235_0_17, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayers",1022,G__MdcTrackDDict_235_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Num. fired layers", (void*) NULL, 0);
   G__memfunc_setup("getNLayersMod",1310,G__MdcTrackDDict_235_0_19, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - mod", "-/- in module", (void*) NULL, 0);
   G__memfunc_setup("getListLayers",1356,G__MdcTrackDDict_235_0_20, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '-1' imod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__MdcTrackDDict_235_0_21, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstCell",1224,G__MdcTrackDDict_235_0_22, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastCell",1108,G__MdcTrackDDict_235_0_23, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get4FirstCells",1391,G__MdcTrackDDict_235_0_24, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay I - 'Int_t' 0 - list", "for Hit&Seg", (void*) NULL, 0);
   G__memfunc_setup("getOneLayerGroup",1644,G__MdcTrackDDict_235_0_25, 114, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("next",447,G__MdcTrackDDict_235_0_26, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - prCell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_235_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay i - 'Int_t' 1 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextCell",1119,G__MdcTrackDDict_235_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 1 - lay i - 'Int_t' 1 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("previous",893,G__MdcTrackDDict_235_0_29, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - prCell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__MdcTrackDDict_235_0_30, 98, -1, G__defined_typename("UChar_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSeg",607,G__MdcTrackDDict_235_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'HMdcList12GroupCells' - 1 - fSeg i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__MdcTrackDDict_235_0_32, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"U 'HMdcList24GroupCells' - 0 - lst i - 'Int_t' 0 '-1' l1 "
"i - 'Int_t' 0 '-1' l2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compareAndUnset",1545,G__MdcTrackDDict_235_0_33, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'HMdcList24GroupCells' - 10 - lst U 'HMdcList24GroupCells' - 0 - lstIdent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isIncluded",1028,G__MdcTrackDDict_235_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"u 'HMdcList24GroupCells' - 1 - lst i - 'Int_t' 0 '0' l1 "
"i - 'Int_t' 0 '23' l2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nIdentDrTimes",1306,G__MdcTrackDDict_235_0_35, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"U 'HMdcList24GroupCells' - 0 - lst i - 'Int_t' 0 '0' l1 "
"i - 'Int_t' 0 '23' l2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_235_0_36, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_235_0_37, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInBounds",1134,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"i - 'Int_t' 1 - l1 i - 'Int_t' 1 - l2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isLayOk",700,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isModOk",694,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("shiftLeft",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("layAddrC",772,(G__InterfaceMethod) NULL, 66, -1, G__defined_typename("UChar_t"), 0, 1, 1, 4, 9, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cellAddrC",862,(G__InterfaceMethod) NULL, 66, -1, G__defined_typename("UChar_t"), 0, 2, 1, 4, 9, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("layAddr",705,(G__InterfaceMethod) NULL, 66, -1, G__defined_typename("UChar_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cellAddr",795,(G__InterfaceMethod) NULL, 66, -1, G__defined_typename("UChar_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_235_0_46, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcList24GroupCells::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_235_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcList24GroupCells::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_235_0_48, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcList24GroupCells::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_235_0_49, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcList24GroupCells::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_235_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_235_0_54, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcList24GroupCells::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_235_0_55, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcList24GroupCells::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_235_0_56, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcList24GroupCells::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_235_0_57, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcList24GroupCells::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcList24GroupCells", 1886, G__MdcTrackDDict_235_0_58, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells), -1, 0, 1, 1, 1, 0, "u 'HMdcList24GroupCells' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcList24GroupCells", 2012, G__MdcTrackDDict_235_0_59, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcClus(void) {
   /* HMdcClus */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus));
   G__memfunc_setup("HMdcClus",755,G__MdcTrackDDict_245_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcClus",755,G__MdcTrackDDict_245_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus), -1, 0, 1, 1, 1, 0, "u 'HMdcList12GroupCells' - 1 - lcells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGeant",715,G__MdcTrackDDict_245_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_245_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefValues",1227,G__MdcTrackDDict_245_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearMod1Par",1147,G__MdcTrackDDict_245_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearMod2Par",1148,G__MdcTrackDDict_245_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSec",615,G__MdcTrackDDict_245_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMod",620,G__MdcTrackDDict_245_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIOSeg",771,G__MdcTrackDDict_245_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOwnIndex",1144,G__MdcTrackDDict_245_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSecSegInd",1185,G__MdcTrackDDict_245_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sc i - 'Int_t' 0 - sg "
"i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinCl",799,G__MdcTrackDDict_245_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - m1or3 i - 'Int_t' 0 - m2or4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSumWt",844,G__MdcTrackDDict_245_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - swt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRealLevel",1224,G__MdcTrackDDict_245_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - rl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNBins",806,G__MdcTrackDDict_245_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nBn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIndexParent",1454,G__MdcTrackDDict_245_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - lp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIndexChilds",1435,G__MdcTrackDDict_245_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - l1 i - 'Int_t' 0 - l2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTypeClFinder",1525,G__MdcTrackDDict_245_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNMergClust",1328,G__MdcTrackDDict_245_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - nmrc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXY",509,G__MdcTrackDDict_245_0_21, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - xl f - 'Float_t' 0 - errx "
"f - 'Float_t' 0 - yl f - 'Float_t' 0 - erry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXTarg",818,G__MdcTrackDDict_245_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - xl f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setYTarg",819,G__MdcTrackDDict_245_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - yl f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZTarg",820,G__MdcTrackDDict_245_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - zl f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTarg",730,G__MdcTrackDDict_245_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - xl f - 'Float_t' 0 - yl "
"f - 'Float_t' 0 - zl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTarg",730,G__MdcTrackDDict_245_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setErrTarg",1027,G__MdcTrackDDict_245_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTarget",947,G__MdcTrackDDict_245_0_28, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - 'Float_t' 0 - xl f - 'Float_t' 0 - ex "
"f - 'Float_t' 0 - yl f - 'Float_t' 0 - ey "
"f - 'Float_t' 0 - zl f - 'Float_t' 0 - ez", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPrPlane",1022,G__MdcTrackDDict_245_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - a f - 'Float_t' 0 - b "
"f - 'Float_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClFnLevelM1",1317,G__MdcTrackDDict_245_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - lv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusSizeM1",1276,G__MdcTrackDDict_245_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - clSz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNDrTimesM1",1232,G__MdcTrackDDict_245_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - nDrTm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNMergClustM1",1454,G__MdcTrackDDict_245_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - nmrc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShapeM1",955,G__MdcTrackDDict_245_0_34, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - s1 f - 'Float_t' 0 - s2 "
"f - 'Float_t' 0 - al", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClFnLevelM2",1318,G__MdcTrackDDict_245_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - lv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusSizeM2",1277,G__MdcTrackDDict_245_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - clSz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNDrTimesM2",1233,G__MdcTrackDDict_245_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - nDrTm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNMergClustM2",1455,G__MdcTrackDDict_245_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - nmrc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShapeM2",956,G__MdcTrackDDict_245_0_39, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - s1 f - 'Float_t' 0 - s2 "
"f - 'Float_t' 0 - al", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSegIndex",1123,G__MdcTrackDDict_245_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - si", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFakeFlag",1085,G__MdcTrackDDict_245_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMod",608,G__MdcTrackDDict_245_0_42, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTypeClFinder",1513,G__MdcTrackDDict_245_0_43, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSec",603,G__MdcTrackDDict_245_0_44, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIOSeg",759,G__MdcTrackDDict_245_0_45, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOwnIndex",1132,G__MdcTrackDDict_245_0_46, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinCl",787,G__MdcTrackDDict_245_0_47, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinCl",787,G__MdcTrackDDict_245_0_48, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRealLevel",1212,G__MdcTrackDDict_245_0_49, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__MdcTrackDDict_245_0_50, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__MdcTrackDDict_245_0_51, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ",410,G__MdcTrackDDict_245_0_52, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXTarg",806,G__MdcTrackDDict_245_0_53, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYTarg",807,G__MdcTrackDDict_245_0_54, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZTarg",808,G__MdcTrackDDict_245_0_55, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrX",705,G__MdcTrackDDict_245_0_56, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrY",706,G__MdcTrackDDict_245_0_57, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrXTarg",1103,G__MdcTrackDDict_245_0_58, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrYTarg",1104,G__MdcTrackDDict_245_0_59, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrZTarg",1105,G__MdcTrackDDict_245_0_60, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__MdcTrackDDict_245_0_61, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__MdcTrackDDict_245_0_62, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumWt",832,G__MdcTrackDDict_245_0_63, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNBins",794,G__MdcTrackDDict_245_0_64, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPoint",842,G__MdcTrackDDict_245_0_65, 121, -1, -1, 0, 1, 1, 1, 8, "u 'HGeomVector' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTarg",718,G__MdcTrackDDict_245_0_66, 121, -1, -1, 0, 1, 1, 1, 8, "u 'HGeomVector' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndexParent",1442,G__MdcTrackDDict_245_0_67, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndexRegChilds",1709,G__MdcTrackDDict_245_0_68, 121, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 1 - first i - 'Int_t' 1 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextIndexChild",1723,G__MdcTrackDDict_245_0_69, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNMergClust",1316,G__MdcTrackDDict_245_0_70, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("A",65,G__MdcTrackDDict_245_0_71, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("B",66,G__MdcTrackDDict_245_0_72, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("C",67,G__MdcTrackDDict_245_0_73, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("D",68,G__MdcTrackDDict_245_0_74, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZOnPrPlane",1289,G__MdcTrackDDict_245_0_75, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYOnPrPlane",1288,G__MdcTrackDDict_245_0_76, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextWire",1142,G__MdcTrackDDict_245_0_77, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 1 - mod i - 'Int_t' 1 - lay "
"i - 'Int_t' 1 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextWire",1142,G__MdcTrackDDict_245_0_78, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusSizeM1",1264,G__MdcTrackDDict_245_0_79, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDrTimesM1",1220,G__MdcTrackDDict_245_0_80, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNMergClustM1",1442,G__MdcTrackDDict_245_0_81, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShapeM1",943,G__MdcTrackDDict_245_0_82, 121, -1, -1, 0, 3, 1, 1, 8, 
"f - 'Float_t' 1 - s1 f - 'Float_t' 1 - s2 "
"f - 'Float_t' 1 - al", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClFnLevelM1",1305,G__MdcTrackDDict_245_0_83, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlphaM1",932,G__MdcTrackDDict_245_0_84, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigma1M1",992,G__MdcTrackDDict_245_0_85, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigma2M1",993,G__MdcTrackDDict_245_0_86, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRatioM1",957,G__MdcTrackDDict_245_0_87, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClFnLevelM2",1306,G__MdcTrackDDict_245_0_88, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusSizeM2",1265,G__MdcTrackDDict_245_0_89, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDrTimesM2",1221,G__MdcTrackDDict_245_0_90, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNMergClustM2",1443,G__MdcTrackDDict_245_0_91, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShapeM2",944,G__MdcTrackDDict_245_0_92, 121, -1, -1, 0, 3, 1, 1, 8, 
"f - 'Float_t' 1 - s1 f - 'Float_t' 1 - s2 "
"f - 'Float_t' 1 - al", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlphaM2",933,G__MdcTrackDDict_245_0_93, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigma1M2",993,G__MdcTrackDDict_245_0_94, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigma2M2",994,G__MdcTrackDDict_245_0_95, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRatioM2",958,G__MdcTrackDDict_245_0_96, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSegIndex",1111,G__MdcTrackDDict_245_0_97, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFakeFlag",1073,G__MdcTrackDDict_245_0_98, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_245_0_99, 121, -1, -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printPos",863,G__MdcTrackDDict_245_0_100, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCont",961,G__MdcTrackDDict_245_0_101, 121, -1, -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 0 - fl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setStatus",976,G__MdcTrackDDict_245_0_102, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - st", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus",964,G__MdcTrackDDict_245_0_103, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBParKickPl",1251,G__MdcTrackDDict_245_0_104, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFixedLevel",1220,G__MdcTrackDDict_245_0_105, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSegmentAmpCut",1529,G__MdcTrackDDict_245_0_106, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcIntersection",1674,G__MdcTrackDDict_245_0_107, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'HGeomVector' - 11 - r u 'HGeomVector' - 11 - dir "
"u 'HGeomVector' - 1 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcIntersection",1674,G__MdcTrackDDict_245_0_108, 121, -1, -1, 0, 4, 1, 1, 8, 
"u 'HGeomVector' - 11 - p1 u 'HGeomVector' - 11 - p2 "
"f - 'Float_t' 1 - x f - 'Float_t' 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcIntersection",1674,G__MdcTrackDDict_245_0_109, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'HGeomVector' - 11 - p f - 'Float_t' 1 - x "
"f - 'Float_t' 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillErrMatClus",1417,G__MdcTrackDDict_245_0_110, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 - isCoilOff u 'HSymMat4' - 1 - errMatClus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_245_0_111, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcClus::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_245_0_112, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClus::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_245_0_113, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcClus::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_245_0_114, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcClus::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_245_0_118, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_245_0_119, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClus::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_245_0_120, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClus::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_245_0_121, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClus::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_245_0_122, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClus::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcClus", 755, G__MdcTrackDDict_245_0_123, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus), -1, 0, 1, 1, 1, 0, "u 'HMdcClus' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcClus", 881, G__MdcTrackDDict_245_0_124, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_245_0_125, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus), -1, 1, 1, 1, 1, 0, "u 'HMdcClus' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcClusSim(void) {
   /* HMdcClusSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim));
   G__memfunc_setup("HMdcClusSim",1052,G__MdcTrackDDict_246_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcClusSim",1052,G__MdcTrackDDict_246_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim), -1, 0, 1, 1, 1, 0, "u 'HMdcList12GroupCells' - 1 - lcells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDef",603,G__MdcTrackDDict_246_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTracks",1026,G__MdcTrackDDict_246_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nTrs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cleanRest",929,G__MdcTrackDDict_246_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_246_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTrack",798,G__MdcTrackDDict_246_0_7, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - tr s - 'Short_t' 0 - nTm "
"b - 'UChar_t' 0 - lM1 b - 'UChar_t' 0 - lM2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetTrack",1048,G__MdcTrackDDict_246_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - ind i - 'Int_t' 0 - tr "
"s - 'Short_t' 0 - nTm b - 'UChar_t' 0 - lM1 "
"b - 'UChar_t' 0 - lM2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTracksM",1103,G__MdcTrackDDict_246_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - modi i - 'Int_t' 0 - nTrs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackM",910,G__MdcTrackDDict_246_0_10, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - modi i - 'Int_t' 0 - ind "
"i - 'Int_t' 0 - tr s - 'Short_t' 0 - nTm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNDigiTimes",1305,G__MdcTrackDDict_246_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ind i - 'Int_t' 0 - nt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackStatus",1477,G__MdcTrackDDict_246_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ind b - 'UChar_t' 0 - status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYGeant",1004,G__MdcTrackDDict_246_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - ind f - 'Float_t' 0 - xg "
"f - 'Float_t' 0 - yg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTrList",1013,G__MdcTrackDDict_246_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTrListMod",1301,G__MdcTrackDDict_246_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HMdcList12GroupCells' - 1 - list i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortTrListByContr",1771,G__MdcTrackDDict_246_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGeant",715,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTrackList",1233,G__MdcTrackDDict_246_0_18, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumWires",1146,G__MdcTrackDDict_246_0_19, 83, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDigiTimes",1293,G__MdcTrackDDict_246_0_20, 66, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackStatus",1465,G__MdcTrackDDict_246_0_21, 66, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArrsSize",1139,G__MdcTrackDDict_246_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTracks",1014,G__MdcTrackDDict_246_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNNotFakeTracks",1694,G__MdcTrackDDict_246_0_24, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNMatchedTracks",1708,G__MdcTrackDDict_246_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__MdcTrackDDict_246_0_26, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - indx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTimesInTrack",1596,G__MdcTrackDDict_246_0_27, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - indx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayersInTrack",1706,G__MdcTrackDDict_246_0_28, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - indx i - 'Int_t' 0 '-1' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayListForMod",1609,G__MdcTrackDDict_246_0_29, 98, -1, G__defined_typename("UChar_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - indx i - 'Int_t' 0 - mi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayOrientation",1856,G__MdcTrackDDict_246_0_30, 98, -1, G__defined_typename("UChar_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - indx i - 'Int_t' 0 '-1' mi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("is40degCross",1146,G__MdcTrackDDict_246_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - indx i - 'Int_t' 0 '-1' mi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDigiTimesInTrack",1977,G__MdcTrackDDict_246_0_32, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - indx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTracksMod",1302,G__MdcTrackDDict_246_0_33, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackMod",1109,G__MdcTrackDDict_246_0_34, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - indx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTimesInMod",1383,G__MdcTrackDDict_246_0_35, 115, -1, G__defined_typename("Short_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - indx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackIndex",1325,G__MdcTrackDDict_246_0_36, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseIndex",1334,G__MdcTrackDDict_246_0_37, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getListTrM",1007,G__MdcTrackDDict_246_0_38, 73, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 9, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTimesM",989,G__MdcTrackDDict_246_0_39, 83, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 9, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackStatus",1465,G__MdcTrackDDict_246_0_40, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXYGeant",992,G__MdcTrackDDict_246_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - i f - 'Float_t' 1 - xg "
"f - 'Float_t' 1 - yg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXGeant",903,G__MdcTrackDDict_246_0_42, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYGeant",904,G__MdcTrackDDict_246_0_43, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dX",188,G__MdcTrackDDict_246_0_44, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dY",189,G__MdcTrackDDict_246_0_45, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGntTrackOk",1204,G__MdcTrackDDict_246_0_46, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isIOSegMatch",1152,G__MdcTrackDDict_246_0_47, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("noIOSegMatch",1153,G__MdcTrackDDict_246_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFakeContribution",1875,G__MdcTrackDDict_246_0_49, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isClFnLevelTooHigh",1769,G__MdcTrackDDict_246_0_50, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("is1or2HitsNotRec",1539,G__MdcTrackDDict_246_0_51, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSegNotRec",1094,G__MdcTrackDDict_246_0_52, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTrackNotRec",1308,G__MdcTrackDDict_246_0_53, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNoMeta",800,G__MdcTrackDDict_246_0_54, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGEANTBug",873,G__MdcTrackDDict_246_0_55, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIOSegMatchingStatus",2214,G__MdcTrackDDict_246_0_56, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCont",961,G__MdcTrackDDict_246_0_57, 121, -1, -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("indOk",501,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trackBits",935,(G__InterfaceMethod) NULL, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testBit",735,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 8, 
"i - 'Int_t' 0 - i b - 'UChar_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("exchangeTrPos",1339,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - t1 i - 'Int_t' 0 - t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_246_0_62, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcClusSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_246_0_63, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_246_0_64, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcClusSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_246_0_65, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcClusSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_246_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_246_0_70, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_246_0_71, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_246_0_72, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_246_0_73, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcClusSim", 1052, G__MdcTrackDDict_246_0_74, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim), -1, 0, 1, 1, 1, 0, "u 'HMdcClusSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcClusSim", 1178, G__MdcTrackDDict_246_0_75, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_246_0_76, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusSim), -1, 1, 1, 1, 1, 0, "u 'HMdcClusSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcSecListCells(void) {
   /* HMdcSecListCells */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells));
   G__memfunc_setup("HMdcSecListCells",1542,G__MdcTrackDDict_247_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_247_0_2, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcModListCells), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_247_0_3, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcModListCells), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_247_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearClustCounter",1778,G__MdcTrackDDict_247_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearFitWiresCounter",2068,G__MdcTrackDDict_247_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__MdcTrackDDict_247_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - c b - 'UChar_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delTime",708,G__MdcTrackDDict_247_0_8, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - c b - 'UChar_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCells",897,G__MdcTrackDDict_247_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCell",831,G__MdcTrackDDict_247_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 1 - m i - 'Int_t' 1 - l "
"i - 'Int_t' 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__MdcTrackDDict_247_0_11, 98, -1, G__defined_typename("UChar_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayers",1022,G__MdcTrackDDict_247_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_247_0_13, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTime1",745,G__MdcTrackDDict_247_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - c f - 'Float_t' 0 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextTime",846,G__MdcTrackDDict_247_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"i - 'Int_t' 1 - m i - 'Int_t' 1 - l "
"i - 'Int_t' 1 - c f - 'Float_t' 1 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeValue",1228,G__MdcTrackDDict_247_0_16, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCell",681,G__MdcTrackDDict_247_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - c b - 'UChar_t' 0 - tm "
"f - 'Float_t' 0 - dt1 f - 'Float_t' 0 - dt2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCellSim",978,G__MdcTrackDDict_247_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 10, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - c b - 'UChar_t' 0 - tm "
"f - 'Float_t' 0 - dt1 f - 'Float_t' 0 - dt2 "
"i - 'Int_t' 0 - tr1 i - 'Int_t' 0 - tr2 "
"f - 'Float_t' 0 - tf1 f - 'Float_t' 0 - tf2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCell",831,G__MdcTrackDDict_247_0_19, 98, -1, G__defined_typename("UChar_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 1 - m i - 'Int_t' 1 - l "
"i - 'Int_t' 1 - c f - 'Float_t' 1 - dt1 "
"f - 'Float_t' 1 - dt2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCellSim",1128,G__MdcTrackDDict_247_0_20, 98, -1, G__defined_typename("UChar_t"), 0, 9, 1, 1, 8, 
"i - 'Int_t' 1 - m i - 'Int_t' 1 - l "
"i - 'Int_t' 1 - c f - 'Float_t' 1 - dt1 "
"f - 'Float_t' 1 - dt2 i - 'Int_t' 1 - tr1 "
"i - 'Int_t' 1 - tr2 f - 'Float_t' 1 - tf1 "
"f - 'Float_t' 1 - tf2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCellSim",1128,G__MdcTrackDDict_247_0_21, 98, -1, G__defined_typename("UChar_t"), 0, 7, 1, 1, 8, 
"i - 'Int_t' 1 - m i - 'Int_t' 1 - l "
"i - 'Int_t' 1 - c i - 'Int_t' 1 - tr1 "
"i - 'Int_t' 1 - tr2 f - 'Float_t' 1 - tf1 "
"f - 'Float_t' 1 - tf2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseClusCount",1770,G__MdcTrackDDict_247_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseRClusCount",1852,G__MdcTrackDDict_247_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseFittedCount",1971,G__MdcTrackDDict_247_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseRFittedCount",2053,G__MdcTrackDDict_247_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseFittedAndRealCount",2634,G__MdcTrackDDict_247_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseClusCount",1756,G__MdcTrackDDict_247_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseRClusCount",1838,G__MdcTrackDDict_247_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseFittedCount",1957,G__MdcTrackDDict_247_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseRFittedCount",2039,G__MdcTrackDDict_247_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseFittedAndRealCount",2620,G__MdcTrackDDict_247_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNClusters",1251,G__MdcTrackDDict_247_0_32, 98, -1, G__defined_typename("UChar_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNRClusters",1333,G__MdcTrackDDict_247_0_33, 98, -1, G__defined_typename("UChar_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFitted",1006,G__MdcTrackDDict_247_0_34, 98, -1, G__defined_typename("UChar_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNRFitted",1088,G__MdcTrackDDict_247_0_35, 98, -1, G__defined_typename("UChar_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToClusCounters",1750,G__MdcTrackDDict_247_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg u 'HMdcList12GroupCells' - 1 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToRClusCounters",1832,G__MdcTrackDDict_247_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg u 'HMdcList12GroupCells' - 1 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("subFrClusCounters",1772,G__MdcTrackDDict_247_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg u 'HMdcList12GroupCells' - 1 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("subFrRClusCounters",1854,G__MdcTrackDDict_247_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg u 'HMdcList12GroupCells' - 1 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("subFittedCounters",1789,G__MdcTrackDDict_247_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("subRFittedCounters",1871,G__MdcTrackDDict_247_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("subFittedAndRealCounters",2452,G__MdcTrackDDict_247_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNUniqueWires",1551,G__MdcTrackDDict_247_0_43, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - seg u 'HMdcList12GroupCells' - 1 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNUniqueWires2",1601,G__MdcTrackDDict_247_0_44, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - seg u 'HMdcList12GroupCells' - 1 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNUniqueWires",1551,G__MdcTrackDDict_247_0_45, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - seg u 'HMdcList12GroupCells' - 1 - listCells "
"i - 'Int_t' 1 - nLays", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNUniqueWires2",1601,G__MdcTrackDDict_247_0_46, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - seg u 'HMdcList12GroupCells' - 1 - listCells "
"i - 'Int_t' 1 - nLays", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNUniqueAndRWires",1908,G__MdcTrackDDict_247_0_47, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - seg u 'HMdcList12GroupCells' - 1 - listCells "
"i - 'Int_t' 1 - nWInReal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNUniqueAndRWires2",1958,G__MdcTrackDDict_247_0_48, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - seg u 'HMdcList12GroupCells' - 1 - listCells "
"i - 'Int_t' 1 - nWInReal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToNFittedCounters",2029,G__MdcTrackDDict_247_0_49, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToNRFittedCounters",2111,G__MdcTrackDDict_247_0_50, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToFittedAndRealCounters",2614,G__MdcTrackDDict_247_0_51, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFittedUnWires",1723,G__MdcTrackDDict_247_0_52, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFittedUnWires2",1773,G__MdcTrackDDict_247_0_53, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFittedUnLayers",1825,G__MdcTrackDDict_247_0_54, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFittedUnAndRWires",2080,G__MdcTrackDDict_247_0_55, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells "
"i - 'Int_t' 1 - nWInReal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFittedUnAndRWires2",2130,G__MdcTrackDDict_247_0_56, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells "
"i - 'Int_t' 1 - nWInReal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSegmentWeight",1659,G__MdcTrackDDict_247_0_57, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 8, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells "
"i - 'Int_t' 1 - nWInReal g - 'Bool_t' 0 'kTRUE' isAdded", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nModOk",584,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFittedUnWires",1723,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 8, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells "
"b - 'UChar_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFittedUnAndRWires",2080,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 2, 8, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells "
"i - 'Int_t' 1 - nWInReal b - 'UChar_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFittedUnLayers",1825,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 8, 
"i - 'Int_t' 0 - seg U 'HMdcCellGroup12' - 0 - listCells "
"b - 'UChar_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_247_0_62, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcSecListCells::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_247_0_63, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSecListCells::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_247_0_64, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcSecListCells::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_247_0_65, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcSecListCells::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_247_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_247_0_70, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSecListCells::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_247_0_71, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSecListCells::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_247_0_72, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSecListCells::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_247_0_73, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSecListCells::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcSecListCells", 1542, G__MdcTrackDDict_247_0_74, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells), -1, 0, 1, 1, 1, 0, "u 'HMdcSecListCells' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcSecListCells", 1668, G__MdcTrackDDict_247_0_75, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_247_0_76, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells), -1, 1, 1, 1, 1, 0, "u 'HMdcSecListCells' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCluster(void) {
   /* HMdcCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster));
   G__memfunc_setup("HMdcCluster",1086,G__MdcTrackDDict_248_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__MdcTrackDDict_248_0_2, 121, -1, -1, 0, 6, 1, 1, 0, 
"c - 'Char_t' 0 - sec c - 'Char_t' 0 - seg "
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - sx f - 'Float_t' 0 - sy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearBinStat",1212,G__MdcTrackDDict_248_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addBin",578,G__MdcTrackDDict_248_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nx i - 'Int_t' 0 - ny "
"b - 'UChar_t' 0 - wt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcXY",580,G__MdcTrackDDict_248_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addClus",704,G__MdcTrackDDict_248_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcCluster' - 1 - clst2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sumClus",748,G__MdcTrackDDict_248_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HMdcCluster' - 1 - clst1 u 'HMdcCluster' - 1 - clst2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcClusParam",1307,G__MdcTrackDDict_248_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillClus",830,G__MdcTrackDDict_248_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HMdcClus' - 0 - clus i - 'Int_t' 0 - nLst "
"g - 'Bool_t' 0 - fillTrList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_248_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModCluster",1358,G__MdcTrackDDict_248_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - im U 'HMdcCluster' - 0 - cl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSegment",1043,G__MdcTrackDDict_248_0_12, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModCluster",1346,G__MdcTrackDDict_248_0_13, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - im", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMod1Clus",1064,G__MdcTrackDDict_248_0_14, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMod2Clus",1065,G__MdcTrackDDict_248_0_15, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIOSeg",759,G__MdcTrackDDict_248_0_16, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNBins",794,G__MdcTrackDDict_248_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMod1Clus",1076,G__MdcTrackDDict_248_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcCluster' - 0 - cl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMod2Clus",1077,G__MdcTrackDDict_248_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcCluster' - 0 - cl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusMerg",1122,G__MdcTrackDDict_248_0_20, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusMerg",1134,G__MdcTrackDDict_248_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcCluster' - 0 - cl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incFlag",692,G__MdcTrackDDict_248_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLCells1",944,G__MdcTrackDDict_248_0_23, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLCells2",945,G__MdcTrackDDict_248_0_24, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus",964,G__MdcTrackDDict_248_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus",976,G__MdcTrackDDict_248_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - st", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFlag",698,G__MdcTrackDDict_248_0_27, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlag",710,G__MdcTrackDDict_248_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__MdcTrackDDict_248_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__MdcTrackDDict_248_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinWt",815,G__MdcTrackDDict_248_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRealLevel",1212,G__MdcTrackDDict_248_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testForInclude",1451,G__MdcTrackDDict_248_0_33, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'HMdcCluster' - 1 - cl2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testForInc34CFnd",1475,G__MdcTrackDDict_248_0_34, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'HMdcCluster' - 1 - cl2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testNLayersSeg1",1486,G__MdcTrackDDict_248_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testNLayersSeg2",1487,G__MdcTrackDDict_248_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFakeFlag",1085,G__MdcTrackDDict_248_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFakeFlagAndStatus",2004,G__MdcTrackDDict_248_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFakeFlag",1073,G__MdcTrackDDict_248_0_39, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fakeFlagS",868,G__MdcTrackDDict_248_0_40, 98, -1, G__defined_typename("UChar_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRealFlag",1086,G__MdcTrackDDict_248_0_41, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("realFlagS",881,G__MdcTrackDDict_248_0_42, 98, -1, G__defined_typename("UChar_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMod1ClusSkipMerg",1878,G__MdcTrackDDict_248_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcCluster' - 0 - clusM1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMod2ClusSkipMerg",1879,G__MdcTrackDDict_248_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcCluster' - 0 - clusM2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isModClusNotTheSame",1899,G__MdcTrackDDict_248_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HMdcCluster' - 1 - cls2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNUniqueWiresSeg1",1887,G__MdcTrackDDict_248_0_46, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HMdcSecListCells' - 0 - pListCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNUniqueAndRWiresSeg1",2244,G__MdcTrackDDict_248_0_47, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'HMdcSecListCells' - 0 - pListCells i - 'Int_t' 1 - nRWires", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isClusterAmpEq",1426,G__MdcTrackDDict_248_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetFakeFlagSeg1",1636,G__MdcTrackDDict_248_0_49, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 - fake U 'HMdcSecListCells' - 0 - pListCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetRealFlagSeg1",1649,G__MdcTrackDDict_248_0_50, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 - real U 'HMdcSecListCells' - 0 - pListCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("correctContent",1485,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - iXf i - 'Int_t' 0 - iYf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_248_0_52, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_248_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_248_0_54, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_248_0_55, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_248_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_248_0_60, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_248_0_61, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_248_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_248_0_63, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCluster::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCluster", 1086, G__MdcTrackDDict_248_0_64, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 1, 1, 1, 0, "u 'HMdcCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCluster", 1212, G__MdcTrackDDict_248_0_65, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_248_0_66, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 1, 1, 1, 1, 0, "u 'HMdcCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcClustersArrs(void) {
   /* HMdcClustersArrs */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustersArrs));
   G__memfunc_setup("getExObject",1108,G__MdcTrackDDict_249_0_1, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustersArrs), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcClustersArrs* (*)())(&HMdcClustersArrs::getExObject) ), 0);
   G__memfunc_setup("getObject",919,G__MdcTrackDDict_249_0_2, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustersArrs), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcClustersArrs* (*)())(&HMdcClustersArrs::getObject) ), 0);
   G__memfunc_setup("deleteCont",1031,G__MdcTrackDDict_249_0_3, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcClustersArrs::deleteCont) ), 0);
   G__memfunc_setup("HMdcClustersArrs",1609,G__MdcTrackDDict_249_0_4, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustersArrs), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createAllArrays",1535,G__MdcTrackDDict_249_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '500' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createArray1",1188,G__MdcTrackDDict_249_0_6, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '500' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createArray2",1189,G__MdcTrackDDict_249_0_7, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '500' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createArray3",1190,G__MdcTrackDDict_249_0_8, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '500' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray1",880,G__MdcTrackDDict_249_0_9, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray2",881,G__MdcTrackDDict_249_0_10, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray3",882,G__MdcTrackDDict_249_0_11, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray1Size",1291,G__MdcTrackDDict_249_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray2Size",1292,G__MdcTrackDDict_249_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray3Size",1293,G__MdcTrackDDict_249_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArr1Cluster",1400,G__MdcTrackDDict_249_0_15, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArr2Cluster",1401,G__MdcTrackDDict_249_0_16, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArr3Cluster",1402,G__MdcTrackDDict_249_0_17, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDXDYWindow",1277,G__MdcTrackDDict_249_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - dx f - 'Float_t' 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setM34DXDYWindow",1457,G__MdcTrackDDict_249_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - dx f - 'Float_t' 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testCluster",1186,G__MdcTrackDDict_249_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - indArr i - 'Int_t' 0 - indClus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testMdc34Cluster",1565,G__MdcTrackDDict_249_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - indArr i - 'Int_t' 0 - indClus "
"i - 'Int_t' 0 '0' firstClst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createArray",1139,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - ind i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCluster",1058,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcCluster), -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - indarr i - 'Int_t' 0 - indClus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_249_0_24, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcClustersArrs::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_249_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClustersArrs::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_249_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcClustersArrs::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_249_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcClustersArrs::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_249_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_249_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClustersArrs::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_249_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClustersArrs::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_249_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClustersArrs::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_249_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClustersArrs::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcClustersArrs", 1609, G__MdcTrackDDict_249_0_36, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustersArrs), -1, 0, 1, 1, 1, 0, "u 'HMdcClustersArrs' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcClustersArrs", 1735, G__MdcTrackDDict_249_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_249_0_38, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustersArrs), -1, 1, 1, 1, 1, 0, "u 'HMdcClustersArrs' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcDriftTimeParSec(void) {
   /* HMdcDriftTimeParSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParSec));
   G__memfunc_setup("HMdcDriftTimeParSec",1826,G__MdcTrackDDict_253_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParSec), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBinDist",1005,G__MdcTrackDDict_253_0_2, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m d - 'Double_t' 0 - a "
"d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initContainer",1367,G__MdcTrackDDict_253_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"u 'HMdcCal2ParSecSim' - 1 - fC2PSecS u 'HMdcCal2ParSec' - 1 - fC2PSec "
"i - 'Int_t' 0 - sec d - 'Double_t' 0 - slOut "
"D - 'Double_t' 0 - scaleError", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__MdcTrackDDict_253_0_4, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParMod), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTime",802,G__MdcTrackDDict_253_0_5, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m d - 'Double_t' 0 - a "
"d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTimeErr",1099,G__MdcTrackDDict_253_0_6, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m d - 'Double_t' 0 - a "
"d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_253_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBinTime",1000,G__MdcTrackDDict_253_0_8, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m d - 'Double_t' 0 - a "
"d - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDistance",1214,G__MdcTrackDDict_253_0_9, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m d - 'Double_t' 0 - a "
"d - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_253_0_10, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcDriftTimeParSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_253_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimeParSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_253_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcDriftTimeParSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_253_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcDriftTimeParSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_253_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_253_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimeParSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_253_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDriftTimeParSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_253_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimeParSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_253_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDriftTimeParSec::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcDriftTimeParSec", 1952, G__MdcTrackDDict_253_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLayListCells(void) {
   /* HMdcLayListCells */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCells));
   G__memfunc_setup("HMdcLayListCells",1553,G__MdcTrackDDict_254_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCells), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyListOfCells",1535,G__MdcTrackDDict_254_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcLayListCells' - 1 - lst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_254_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearClustCounter",1778,G__MdcTrackDDict_254_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearFitWiresCounter",2068,G__MdcTrackDDict_254_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__MdcTrackDDict_254_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - cell b - 'UChar_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delTime",708,G__MdcTrackDDict_254_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - cell b - 'UChar_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCells",897,G__MdcTrackDDict_254_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__MdcTrackDDict_254_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstCell",1224,G__MdcTrackDDict_254_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastCell",1108,G__MdcTrackDDict_254_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrack",1316,G__MdcTrackDDict_254_0_12, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - cell b - 'UChar_t' 0 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("next",447,G__MdcTrackDDict_254_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - prCell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCell",831,G__MdcTrackDDict_254_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 1 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextNonFittedCell",1738,G__MdcTrackDDict_254_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 1 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("previousNonFittedCell",2184,G__MdcTrackDDict_254_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 1 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("previous",893,G__MdcTrackDDict_254_0_17, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - prCell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("previousCell",1277,G__MdcTrackDDict_254_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 1 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__MdcTrackDDict_254_0_19, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isCell",604,G__MdcTrackDDict_254_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_254_0_21, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCellInfo",1337,G__MdcTrackDDict_254_0_22, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTime1",745,G__MdcTrackDDict_254_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - cell f - 'Float_t' 0 - timeValue", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextTime",846,G__MdcTrackDDict_254_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 1 - cell f - 'Float_t' 1 - timeValue", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeValue",1228,G__MdcTrackDDict_254_0_25, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCell",681,G__MdcTrackDDict_254_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - c b - 'UChar_t' 0 - tm "
"f - 'Float_t' 0 - dt1 f - 'Float_t' 0 - dt2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCellSim",978,G__MdcTrackDDict_254_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - c b - 'UChar_t' 0 - tm "
"f - 'Float_t' 0 - dt1 f - 'Float_t' 0 - dt2 "
"i - 'Int_t' 0 - tr1 i - 'Int_t' 0 - tr2 "
"f - 'Float_t' 0 - tf1 f - 'Float_t' 0 - tf2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCell",831,G__MdcTrackDDict_254_0_28, 98, -1, G__defined_typename("UChar_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 1 - c f - 'Float_t' 1 - dt1 "
"f - 'Float_t' 1 - dt2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCellSim",1128,G__MdcTrackDDict_254_0_29, 98, -1, G__defined_typename("UChar_t"), 0, 7, 1, 1, 8, 
"i - 'Int_t' 1 - c f - 'Float_t' 1 - dt1 "
"f - 'Float_t' 1 - dt2 i - 'Int_t' 1 - tr1 "
"i - 'Int_t' 1 - tr2 f - 'Float_t' 1 - tf1 "
"f - 'Float_t' 1 - tf2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCellSim",1128,G__MdcTrackDDict_254_0_30, 98, -1, G__defined_typename("UChar_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 1 - c i - 'Int_t' 1 - tr1 "
"i - 'Int_t' 1 - tr2 f - 'Float_t' 1 - tf1 "
"f - 'Float_t' 1 - tf2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseClusCount",1770,G__MdcTrackDDict_254_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseRClusCount",1852,G__MdcTrackDDict_254_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseFittedCount",1971,G__MdcTrackDDict_254_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseRFittedCount",2053,G__MdcTrackDDict_254_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseFittedAndRealCount",2634,G__MdcTrackDDict_254_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseClusCount",1756,G__MdcTrackDDict_254_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseRClusCount",1838,G__MdcTrackDDict_254_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseFittedCount",1957,G__MdcTrackDDict_254_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseRFittedCount",2039,G__MdcTrackDDict_254_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseFittedAndRealCount",2620,G__MdcTrackDDict_254_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNClusters",1251,G__MdcTrackDDict_254_0_41, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNRClusters",1333,G__MdcTrackDDict_254_0_42, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFitted",1006,G__MdcTrackDDict_254_0_43, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNRFitted",1088,G__MdcTrackDDict_254_0_44, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumNotFitted",1537,G__MdcTrackDDict_254_0_45, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Return number of not fitted wires", (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boundsOk",837,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_254_0_48, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLayListCells::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_254_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayListCells::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_254_0_50, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLayListCells::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_254_0_51, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLayListCells::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_254_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_254_0_56, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayListCells::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_254_0_57, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLayListCells::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_254_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayListCells::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_254_0_59, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLayListCells::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLayListCells", 1553, G__MdcTrackDDict_254_0_60, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCells), -1, 0, 1, 1, 1, 0, "u 'HMdcLayListCells' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLayListCells", 1679, G__MdcTrackDDict_254_0_61, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_254_0_62, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCells), -1, 1, 1, 1, 1, 0, "u 'HMdcLayListCells' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookUpTbCell(void) {
   /* HMdcLookUpTbCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbCell));
   G__memfunc_setup("HMdcLookUpTbCell",1516,G__MdcTrackDDict_256_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_256_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__MdcTrackDDict_256_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - yBinMinT i - 'Int_t' 0 - yBinMaxT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addLine",689,G__MdcTrackDDict_256_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"r - 'UShort_t' 0 - nc1 r - 'UShort_t' 0 - nc2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLines",905,G__MdcTrackDDict_256_0_5, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYBinMin",982,G__MdcTrackDDict_256_0_6, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYBinMax",984,G__MdcTrackDDict_256_0_7, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXBinMin",981,G__MdcTrackDDict_256_0_8, 114, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - yb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXBinMax",983,G__MdcTrackDDict_256_0_9, 114, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - yb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAlphaMean",1203,G__MdcTrackDDict_256_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - al", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlphaMean",1191,G__MdcTrackDDict_256_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistCutFT",1190,G__MdcTrackDDict_256_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ct", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistCut1T",1169,G__MdcTrackDDict_256_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ct", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistCut1TVF",1325,G__MdcTrackDDict_256_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ct", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdcTDistAndCuts1T",1926,G__MdcTrackDDict_256_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdcTDistAndCutsFT",1947,G__MdcTrackDDict_256_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDDistMinCut",1384,G__MdcTrackDDict_256_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDDistMaxCut",1386,G__MdcTrackDDict_256_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDDistMinCut2VF",1590,G__MdcTrackDDict_256_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDDistMaxCut2VF",1592,G__MdcTrackDDict_256_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_256_0_21, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookUpTbCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_256_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTbCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_256_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookUpTbCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_256_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookUpTbCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_256_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_256_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTbCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_256_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookUpTbCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_256_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTbCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_256_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookUpTbCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookUpTbCell", 1516, G__MdcTrackDDict_256_0_33, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbCell), -1, 0, 1, 1, 1, 0, "u 'HMdcLookUpTbCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLookUpTbCell", 1642, G__MdcTrackDDict_256_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_256_0_35, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbCell), -1, 1, 1, 1, 1, 0, "u 'HMdcLookUpTbCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookUpTbLayer(void) {
   /* HMdcLookUpTbLayer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayer));
   G__memfunc_setup("HMdcLookUpTbLayer",1641,G__MdcTrackDDict_257_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayer), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_257_0_2, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbCell), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcTrackDDict_257_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinDistLUTb",1371,G__MdcTrackDDict_257_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - lPart u 'HGeomVector' - 1 - t "
"D - 'Double_t' 0 - carr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTargPnts",1229,G__MdcTrackDDict_257_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYTargetArr",1317,G__MdcTrackDDict_257_0_6, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZTargetArr",1318,G__MdcTrackDDict_257_0_7, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYTargetArrP2",1447,G__MdcTrackDDict_257_0_8, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZTargetArrP2",1448,G__MdcTrackDDict_257_0_9, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVertexPoint",1492,G__MdcTrackDDict_257_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - vp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCurrentCell",1455,G__MdcTrackDDict_257_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drTmTest",823,G__MdcTrackDDict_257_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - xb d - 'Double_t' 0 - yb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drTmTest2",873,G__MdcTrackDDict_257_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - xb d - 'Double_t' 0 - yb "
"d - 'Double_t' 0 '0.' corr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transToRotLay",1350,G__MdcTrackDDict_257_0_14, 121, -1, -1, 0, 4, 1, 1, 8, 
"d - 'Double_t' 0 - xb d - 'Double_t' 0 - yb "
"d - 'Double_t' 1 - ybl d - 'Double_t' 1 - zbl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerPart2Par",1577,G__MdcTrackDDict_257_0_15, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayercLcLDistCalcLuTb), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_257_0_16, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookUpTbLayer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_257_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTbLayer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_257_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookUpTbLayer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_257_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookUpTbLayer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_257_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_257_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTbLayer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_257_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookUpTbLayer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_257_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTbLayer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_257_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookUpTbLayer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookUpTbLayer", 1641, G__MdcTrackDDict_257_0_28, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayer), -1, 0, 1, 1, 1, 0, "u 'HMdcLookUpTbLayer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLookUpTbLayer", 1767, G__MdcTrackDDict_257_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_257_0_30, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayer), -1, 1, 1, 1, 1, 0, "u 'HMdcLookUpTbLayer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookUpTbMod(void) {
   /* HMdcLookUpTbMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbMod));
   G__memfunc_setup("HMdcLookUpTbMod",1420,G__MdcTrackDDict_259_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbMod), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_259_0_2, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbLayer), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcTrackDDict_259_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNLayers",1034,G__MdcTrackDDict_259_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayers",1022,G__MdcTrackDDict_259_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_259_0_6, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookUpTbMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_259_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTbMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_259_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookUpTbMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_259_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookUpTbMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_259_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_259_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTbMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_259_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookUpTbMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_259_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTbMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_259_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookUpTbMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookUpTbMod", 1420, G__MdcTrackDDict_259_0_18, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbMod), -1, 0, 1, 1, 1, 0, "u 'HMdcLookUpTbMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLookUpTbMod", 1546, G__MdcTrackDDict_259_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_259_0_20, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbMod), -1, 1, 1, 1, 1, 0, "u 'HMdcLookUpTbMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookUpTbSec(void) {
   /* HMdcLookUpTbSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbSec));
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_260_0_1, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcTrackDDict_260_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNClusters",1251,G__MdcTrackDDict_260_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxClus",1021,G__MdcTrackDDict_260_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '-1' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNBinX",767,G__MdcTrackDDict_260_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXlow",746,G__MdcTrackDDict_260_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXup",637,G__MdcTrackDDict_260_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNBinY",768,G__MdcTrackDDict_260_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYlow",747,G__MdcTrackDDict_260_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYup",638,G__MdcTrackDDict_260_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearwk",745,G__MdcTrackDDict_260_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findClusters",1270,G__MdcTrackDDict_260_0_12, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "I - 'Int_t' 0 - imax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParPlane",1119,G__MdcTrackDDict_260_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcPlane' - 11 - plane", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTargetF",1017,G__MdcTrackDDict_260_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 11 - vec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTargetL",1023,G__MdcTrackDDict_260_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 11 - vec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPrPlane",1010,G__MdcTrackDDict_260_0_16, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetF",1005,G__MdcTrackDDict_260_0_17, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetL",1011,G__MdcTrackDDict_260_0_18, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTH2C",696,G__MdcTrackDDict_260_0_19, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2C), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title "
"i - 'Int_t' 0 '0' type i - 'Int_t' 0 '2' bining", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTypeClFinder",1525,G__MdcTrackDDict_260_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTypeClFinder",1513,G__MdcTrackDDict_260_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xBinNum",705,G__MdcTrackDDict_260_0_22, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yBinNum",706,G__MdcTrackDDict_260_0_23, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xBinNumInBounds",1507,G__MdcTrackDDict_260_0_24, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yBinNumInBounds",1508,G__MdcTrackDDict_260_0_25, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcXYBounds",1199,G__MdcTrackDDict_260_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"d - 'Double_t' 1 - xL d - 'Double_t' 1 - xU "
"d - 'Double_t' 1 - yL d - 'Double_t' 1 - yU", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPrPlotSize",1352,G__MdcTrackDDict_260_0_27, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - xL d - 'Double_t' 0 - xU "
"d - 'Double_t' 0 - yL d - 'Double_t' 0 - yU", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcLookUpTbSec",1415,G__MdcTrackDDict_260_0_28, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbSec), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - nSegs "
"i - 'Int_t' 0 - inBinX i - 'Int_t' 0 - inBinY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusCat",1019,G__MdcTrackDDict_260_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - cat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStack",834,G__MdcTrackDDict_260_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcClFnStack' - 0 - st", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStacksArr",1242,G__MdcTrackDDict_260_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcClFnStacksArr' - 0 - sA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCoilFlag",1101,G__MdcTrackDDict_260_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTarget",1018,G__MdcTrackDDict_260_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - targLenInc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcLookUpTb",1187,G__MdcTrackDDict_260_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - quiet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTrackList",1336,G__MdcTrackDDict_260_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTdcDrDist",1272,G__MdcTrackDDict_260_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findVertex",1055,G__MdcTrackDDict_260_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findSecVertex",1338,G__MdcTrackDDict_260_0_38, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVertexStat",1382,G__MdcTrackDDict_260_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - vs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVertexFnTarg",1619,G__MdcTrackDDict_260_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nTrPnts U 'HGeomVector' - 0 - trPnts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVertexPoint",1492,G__MdcTrackDDict_260_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - vp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVertexZErr",1357,G__MdcTrackDDict_260_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - vze", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcLookUpTbSec",1415,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbSec), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillLookUpTb",1207,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"u 'HMdcTrapPlane' - 1 - cellPr u 'HMdcLookUpTbCell' - 1 - fCell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearPrArrs",1121,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearPrMod",1001,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearPrMod",1001,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearPrModInSec",1467,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDrTimeCutYCorr",1708,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "d - 'Double_t' 0 - corr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillClusCat",1110,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"i - 'Int_t' 0 - mod i - 'Int_t' 0 - segp "
"i - 'Int_t' 0 - tpClFndr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findClusInSeg",1294,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findClusInSec",1290,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findClusInMod",1295,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterSlot",1476,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - seg u 'HMdcList12GroupCells' - 1 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillModWiresList",1645,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - mod u 'HMdcList12GroupCells' - 1 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillModCluster",1449,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillSegCluster",1448,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillSecCluster",1444,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeModPlot",1117,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeSPlot",912,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeS1PlotAmpCut",1547,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeLayProjV0",1253,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeLayProjV1",1254,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeLayProjV1b",1352,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeLayProjV2",1255,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findClusInSeg1",1343,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mergeClusInMod",1406,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mergeClusMod1to2",1549,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mergeClusInSeg",1405,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mergeClusInSec",1401,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testClusMod12toSeg",1756,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scanPlotInMod",1307,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMixedClusterFixedLevel",2644,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMixedClusterFloatLevel",2650,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scanPlotInSeg1",1355,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - seg B - 'UChar_t' 0 - plotBAr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcClusterInSecFixedLevel",2607,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcClusterInSecFloatLevel",2613,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcClusterInSegFixedLevel",2611,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcClusterInSegFloatLevel",2617,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcClusterInSeg1FixedLevel",2660,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcClusterInSeg1FloatLevel",2666,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testSeg1ModClMatching",2058,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcClusterInModFixedLevel",2612,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcClusterInModFloatLevel",2618,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcClParam",1075,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCluster",1174,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reinitCluster",1389,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCluster",1174,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - nBin b - 'UChar_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reinitCluster",1389,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - nBin b - 'UChar_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addBinInCluster",1499,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - nBin b - 'UChar_t' 0 - wt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initClusterT2",1308,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - nBin b - 'UChar_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reinitClusterT2",1523,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - nBin b - 'UChar_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addBinInClusterT2",1633,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - nBin b - 'UChar_t' 0 - wt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseClusterNum",1884,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayerVar",1138,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNextCell",1131,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeGhosts",1286,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testBinForVertexF",1732,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - bx i - 'Int_t' 0 - by", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testBinForVertex",1662,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - bx i - 'Int_t' 0 - by", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToClusCounter",1635,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - clusAmp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("markFakesNBins",1391,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"i - 'Int_t' 0 - clusAmp i - 'Int_t' 0 - arrSize "
"I - 'Int_t' 0 - nUnWiresCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("markFakes",917,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"i - 'Int_t' 0 - clusAmp i - 'Int_t' 0 - arrSize "
"I - 'Int_t' 0 - nRlWiresCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("markReals",930,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"i - 'Int_t' 0 - clusAmp i - 'Int_t' 0 - arrSize "
"I - 'Int_t' 10 - nUnWiresCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCurrentArraySec",1865,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCurrentArrayMod1",1919,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCurrentArrayMod2",1920,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_260_0_107, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookUpTbSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_260_0_108, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTbSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_260_0_109, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookUpTbSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_260_0_110, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookUpTbSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_260_0_114, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_260_0_115, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTbSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_260_0_116, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookUpTbSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_260_0_117, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTbSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_260_0_118, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookUpTbSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookUpTbSec", 1415, G__MdcTrackDDict_260_0_119, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbSec), -1, 0, 1, 1, 1, 0, "u 'HMdcLookUpTbSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_260_0_120, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbSec), -1, 1, 1, 1, 1, 0, "u 'HMdcLookUpTbSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookUpTb(void) {
   /* HMdcLookUpTb */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb));
   G__memfunc_setup("getExObject",1108,G__MdcTrackDDict_261_0_1, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcLookUpTb* (*)())(&HMdcLookUpTb::getExObject) ), 0);
   G__memfunc_setup("getObject",919,G__MdcTrackDDict_261_0_2, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcLookUpTb* (*)())(&HMdcLookUpTb::getObject) ), 0);
   G__memfunc_setup("deleteCont",1031,G__MdcTrackDDict_261_0_3, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookUpTb::deleteCont) ), 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_261_0_4, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTbSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcTrackDDict_261_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initContainer",1367,G__MdcTrackDDict_261_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setTargLenInc",1299,G__MdcTrackDDict_261_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - lf d - 'Double_t' 0 - rt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTypeClFinder",1525,G__MdcTrackDDict_261_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsCoilOffFlag",1572,G__MdcTrackDDict_261_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQuietMode",1241,G__MdcTrackDDict_261_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' md", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTrackList",1336,G__MdcTrackDDict_261_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTdcDrDist",1272,G__MdcTrackDDict_261_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findVertex",1055,G__MdcTrackDDict_261_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNVertexPnts",1457,G__MdcTrackDDict_261_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVertexStat",1370,G__MdcTrackDDict_261_0_17, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVertexPnts",1379,G__MdcTrackDDict_261_0_18, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcLookUpTb",1132,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb), -1, 0, 3, 1, 2, 0, 
"C - 'Char_t' 10 '\"MdcLookUpTb\"' name C - 'Char_t' 10 '\"Cluster finder for MDC plane I&II\"' title "
"C - 'Char_t' 10 '\"\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcPrPlane",1093,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcPlotSize",1229,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcTarget",1018,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVertexFnTarg",1619,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_261_0_24, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookUpTb::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_261_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTb::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_261_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookUpTb::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_261_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookUpTb::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_261_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_261_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTb::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_261_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookUpTb::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_261_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookUpTb::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_261_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookUpTb::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookUpTb", 1132, G__MdcTrackDDict_261_0_36, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb), -1, 0, 1, 1, 1, 0, "u 'HMdcLookUpTb' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_261_0_37, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLookUpTb), -1, 1, 1, 1, 1, 0, "u 'HMdcLookUpTb' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcModListCells(void) {
   /* HMdcModListCells */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcModListCells));
   G__memfunc_setup("HMdcModListCells",1547,G__MdcTrackDDict_264_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcModListCells), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_264_0_2, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCells), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_264_0_3, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcLayListCells), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_264_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearClustCounter",1778,G__MdcTrackDDict_264_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearFitWiresCounter",2068,G__MdcTrackDDict_264_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__MdcTrackDDict_264_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell "
"b - 'UChar_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delTime",708,G__MdcTrackDDict_264_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell "
"b - 'UChar_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCells",897,G__MdcTrackDDict_264_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCell",831,G__MdcTrackDDict_264_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 1 - lay i - 'Int_t' 1 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__MdcTrackDDict_264_0_11, 98, -1, G__defined_typename("UChar_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isCell",604,G__MdcTrackDDict_264_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayers",1022,G__MdcTrackDDict_264_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_264_0_14, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTime1",745,G__MdcTrackDDict_264_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"f - 'Float_t' 0 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextTime",846,G__MdcTrackDDict_264_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"f - 'Float_t' 1 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeValue",1228,G__MdcTrackDDict_264_0_17, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCell",681,G__MdcTrackDDict_264_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"b - 'UChar_t' 0 - tm f - 'Float_t' 0 - dt1 "
"f - 'Float_t' 0 - dt2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCellSim",978,G__MdcTrackDDict_264_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"b - 'UChar_t' 0 - tm f - 'Float_t' 0 - dt1 "
"f - 'Float_t' 0 - dt2 i - 'Int_t' 0 - tr1 "
"i - 'Int_t' 0 - tr2 f - 'Float_t' 0 - tf1 "
"f - 'Float_t' 0 - tf2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCell",831,G__MdcTrackDDict_264_0_20, 98, -1, G__defined_typename("UChar_t"), 0, 4, 1, 1, 8, 
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"f - 'Float_t' 1 - dt1 f - 'Float_t' 1 - dt2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCellSim",1128,G__MdcTrackDDict_264_0_21, 98, -1, G__defined_typename("UChar_t"), 0, 8, 1, 1, 8, 
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"f - 'Float_t' 1 - dt1 f - 'Float_t' 1 - dt2 "
"i - 'Int_t' 1 - tr1 i - 'Int_t' 1 - tr2 "
"f - 'Float_t' 1 - tf1 f - 'Float_t' 1 - tf2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCellSim",1128,G__MdcTrackDDict_264_0_22, 98, -1, G__defined_typename("UChar_t"), 0, 6, 1, 1, 8, 
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"i - 'Int_t' 1 - tr1 i - 'Int_t' 1 - tr2 "
"f - 'Float_t' 1 - tf1 f - 'Float_t' 1 - tf2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseClusCount",1770,G__MdcTrackDDict_264_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseRClusCount",1852,G__MdcTrackDDict_264_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseFittedCount",1971,G__MdcTrackDDict_264_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseRFittedCount",2053,G__MdcTrackDDict_264_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseFittedAndRealCount",2634,G__MdcTrackDDict_264_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseClusCount",1756,G__MdcTrackDDict_264_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseRClusCount",1838,G__MdcTrackDDict_264_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseFittedCount",1957,G__MdcTrackDDict_264_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseRFittedCount",2039,G__MdcTrackDDict_264_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decreaseFittedAndRealCount",2620,G__MdcTrackDDict_264_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNClusters",1251,G__MdcTrackDDict_264_0_33, 98, -1, G__defined_typename("UChar_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNRClusters",1333,G__MdcTrackDDict_264_0_34, 98, -1, G__defined_typename("UChar_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFitted",1006,G__MdcTrackDDict_264_0_35, 98, -1, G__defined_typename("UChar_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNRFitted",1088,G__MdcTrackDDict_264_0_36, 98, -1, G__defined_typename("UChar_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("genNumNotFittedLayers",2155,G__MdcTrackDDict_264_0_37, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("genNumNotFittedLayers",2155,G__MdcTrackDDict_264_0_38, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 1 - nNFCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nLayOk",590,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_264_0_40, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcModListCells::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_264_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcModListCells::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_264_0_42, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcModListCells::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_264_0_43, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcModListCells::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_264_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_264_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcModListCells::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_264_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcModListCells::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_264_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcModListCells::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_264_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcModListCells::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcModListCells", 1547, G__MdcTrackDDict_264_0_52, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcModListCells), -1, 0, 1, 1, 1, 0, "u 'HMdcModListCells' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcModListCells", 1673, G__MdcTrackDDict_264_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_264_0_54, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcModListCells), -1, 1, 1, 1, 1, 0, "u 'HMdcModListCells' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcEvntListCells(void) {
   /* HMdcEvntListCells */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells));
   G__memfunc_setup("HMdcEvntListCells",1672,G__MdcTrackDDict_267_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExObject",1108,G__MdcTrackDDict_267_0_2, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcEvntListCells* (*)())(&HMdcEvntListCells::getExObject) ), 0);
   G__memfunc_setup("getObject",919,G__MdcTrackDDict_267_0_3, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells), -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 1 - isCreated", (char*)NULL, (void*) G__func2void( (HMdcEvntListCells* (*)(Bool_t&))(&HMdcEvntListCells::getObject) ), 0);
   G__memfunc_setup("deleteCont",1031,G__MdcTrackDDict_267_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcEvntListCells::deleteCont) ), 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_267_0_5, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_267_0_6, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSecListCells), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcCal1Cat",1209,G__MdcTrackDDict_267_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectWires",1264,G__MdcTrackDDict_267_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_267_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__MdcTrackDDict_267_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"b - 'UChar_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delTime",708,G__MdcTrackDDict_267_0_11, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"b - 'UChar_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCells",897,G__MdcTrackDDict_267_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCell",831,G__MdcTrackDDict_267_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCell",831,G__MdcTrackDDict_267_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"b - 'UChar_t' 1 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__MdcTrackDDict_267_0_15, 98, -1, G__defined_typename("UChar_t"), 0, 4, 1, 1, 8, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_267_0_16, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTime1",745,G__MdcTrackDDict_267_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"f - 'Float_t' 0 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextTime",846,G__MdcTrackDDict_267_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 8, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"f - 'Float_t' 1 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeValue",1228,G__MdcTrackDDict_267_0_19, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 8, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCell",681,G__MdcTrackDDict_267_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"b - 'UChar_t' 0 - tm f - 'Float_t' 0 - dt1 "
"f - 'Float_t' 0 - dt2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCellSim",978,G__MdcTrackDDict_267_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 11, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"b - 'UChar_t' 0 - tm f - 'Float_t' 0 - dt1 "
"f - 'Float_t' 0 - dt2 i - 'Int_t' 0 - tr1 "
"i - 'Int_t' 0 - tr2 f - 'Float_t' 0 - tf1 "
"f - 'Float_t' 0 - tf2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCell",831,G__MdcTrackDDict_267_0_22, 98, -1, G__defined_typename("UChar_t"), 0, 6, 1, 1, 8, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"f - 'Float_t' 1 - dt1 f - 'Float_t' 1 - dt2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCellSim",1128,G__MdcTrackDDict_267_0_23, 98, -1, G__defined_typename("UChar_t"), 0, 10, 1, 1, 8, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"f - 'Float_t' 1 - dt1 f - 'Float_t' 1 - dt2 "
"i - 'Int_t' 1 - tr1 i - 'Int_t' 1 - tr2 "
"f - 'Float_t' 1 - tf1 f - 'Float_t' 1 - tf2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextCellSim",1128,G__MdcTrackDDict_267_0_24, 98, -1, G__defined_typename("UChar_t"), 0, 8, 1, 1, 8, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"i - 'Int_t' 1 - tr1 i - 'Int_t' 1 - tr2 "
"f - 'Float_t' 1 - tf1 f - 'Float_t' 1 - tf2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearClustCounter",1778,G__MdcTrackDDict_267_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearFitWiresCounter",2068,G__MdcTrackDDict_267_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseFittedCount",1971,G__MdcTrackDDict_267_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseRFittedCount",2053,G__MdcTrackDDict_267_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseFittedAndRealCount",2634,G__MdcTrackDDict_267_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nSecOk",579,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_267_0_31, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcEvntListCells::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_267_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEvntListCells::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_267_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcEvntListCells::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_267_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcEvntListCells::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_267_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_267_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEvntListCells::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_267_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEvntListCells::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_267_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEvntListCells::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_267_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEvntListCells::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcEvntListCells", 1672, G__MdcTrackDDict_267_0_43, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells), -1, 0, 1, 1, 1, 0, "u 'HMdcEvntListCells' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcEvntListCells", 1798, G__MdcTrackDDict_267_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_267_0_45, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells), -1, 1, 1, 1, 1, 0, "u 'HMdcEvntListCells' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcKickPlane(void) {
   /* HMdcKickPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickPlane));
   G__memfunc_setup("setDefaultParam",1538,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcKickPlane",1230,G__MdcTrackDDict_269_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcIntersection",1674,G__MdcTrackDDict_269_0_3, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'HGeomVector' - 11 - p u 'HGeomVector' - 11 - dir "
"u 'HGeomVector' - 1 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSegIntersec",1519,G__MdcTrackDDict_269_0_4, 121, -1, -1, 0, 5, 1, 1, 8, 
"d - 'Double_t' 0 - z0 d - 'Double_t' 0 - r0 "
"d - 'Double_t' 0 - theta d - 'Double_t' 0 - phi "
"u 'HGeomVector' - 1 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcIntersection",1674,G__MdcTrackDDict_269_0_5, 121, -1, -1, 0, 9, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcIntersection",1674,G__MdcTrackDDict_269_0_6, 121, -1, -1, 0, 7, 1, 1, 8, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"u 'HGeomVector' - 1 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSegIntersec",1519,G__MdcTrackDDict_269_0_7, 121, -1, -1, 0, 7, 1, 1, 8, 
"f - 'Float_t' 0 - z0 f - 'Float_t' 0 - r0 "
"f - 'Float_t' 0 - theta f - 'Float_t' 0 - phi "
"u 'HGeomVector' - 1 - p u 'HGeomVector' - 1 - dir "
"u 'HGeomVector' - 1 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSegIntersec",1519,G__MdcTrackDDict_269_0_8, 121, -1, -1, 0, 10, 1, 1, 8, 
"f - 'Float_t' 0 - z0 f - 'Float_t' 0 - r0 "
"f - 'Float_t' 0 - theta f - 'Float_t' 0 - phi "
"u 'HSymMat' - 1 - m u 'HGeomVector' - 1 - p "
"u 'HGeomVector' - 1 - dir u 'HGeomVector' - 1 - out "
"d - 'Double_t' 1 - errX d - 'Double_t' 1 - errY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSegIntersec",1519,G__MdcTrackDDict_269_0_9, 121, -1, -1, 0, 5, 1, 1, 8, 
"U 'HMdcSeg' - 0 - seg1 u 'HGeomVector' - 1 - p "
"u 'HGeomVector' - 1 - dir u 'HGeomVector' - 1 - out "
"U 'HGeomVector' - 0 - sOnKick", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSegIntersec",1519,G__MdcTrackDDict_269_0_10, 121, -1, -1, 0, 2, 1, 1, 8, 
"U 'HMdcSeg' - 0 - seg u 'HGeomVector' - 1 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_269_0_11, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcKickPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_269_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcKickPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_269_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcKickPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_269_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcKickPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_269_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_269_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcKickPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_269_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcKickPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_269_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcKickPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_269_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcKickPlane::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcKickPlane", 1230, G__MdcTrackDDict_269_0_23, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickPlane), -1, 0, 1, 1, 1, 0, "u 'HMdcKickPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcKickPlane", 1356, G__MdcTrackDDict_269_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_269_0_25, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickPlane), -1, 1, 1, 1, 1, 0, "u 'HMdcKickPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcClusMetaMatch(void) {
   /* HMdcClusMetaMatch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatch));
   G__memfunc_setup("HMdcClusMetaMatch",1639,G__MdcTrackDDict_289_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__MdcTrackDDict_289_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reinit",651,G__MdcTrackDDict_289_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFillPlotsFlag",1631,G__MdcTrackDDict_289_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectMetaHits",1541,G__MdcTrackDDict_289_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasClusMathToMeta",1703,G__MdcTrackDDict_289_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec u 'HGeomVector' - 11 - targ "
"d - 'Double_t' 0 - xcl d - 'Double_t' 0 - ycl "
"d - 'Double_t' 0 - zcl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcPlot",1028,G__MdcTrackDDict_289_0_7, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShrPlot",1036,G__MdcTrackDDict_289_0_8, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofPlot",1032,G__MdcTrackDDict_289_0_9, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deletePlots",1157,G__MdcTrackDDict_289_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("savePlots",961,G__MdcTrackDDict_289_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQualMultp",1265,G__MdcTrackDDict_289_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - mp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInitParam",1233,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectRpcClusters",1888,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectShowerHits",1782,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectTofHits",1447,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTofHit",887,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HTofHit' - 0 - pTofHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testAndFill",1114,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 4, 0, 
"i - 'Int_t' 0 - sec u 'HGeomVector' - 11 - targ "
"d - 'Double_t' 0 - xcl d - 'Double_t' 0 - ycl "
"d - 'Double_t' 0 - zcl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_289_0_19, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcClusMetaMatch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_289_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusMetaMatch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_289_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcClusMetaMatch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_289_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcClusMetaMatch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_289_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_289_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusMetaMatch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_289_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusMetaMatch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_289_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusMetaMatch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_289_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusMetaMatch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcClusMetaMatch", 1639, G__MdcTrackDDict_289_0_31, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatch), -1, 0, 1, 1, 1, 0, "u 'HMdcClusMetaMatch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcClusMetaMatch", 1765, G__MdcTrackDDict_289_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_289_0_33, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatch), -1, 1, 1, 1, 1, 0, "u 'HMdcClusMetaMatch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackParam(void) {
   /* HMdcTrackParam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam));
   G__memfunc_setup("HMdcTrackParam",1346,G__MdcTrackDDict_290_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParam",1054,G__MdcTrackDDict_290_0_2, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printFunctChange",1651,G__MdcTrackDDict_290_0_3, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printErrors",1194,G__MdcTrackDDict_290_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyLine",835,G__MdcTrackDDict_290_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyTimeOffsets",1572,G__MdcTrackDDict_290_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 11 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyAllParam",1221,G__MdcTrackDDict_290_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 11 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeOffsets",1461,G__MdcTrackDDict_290_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - tos i - 'Int_t' 0 '4' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyNewParam",1238,G__MdcTrackDDict_290_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 11 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOneSecData",1283,G__MdcTrackDDict_290_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTwoSecData",1307,G__MdcTrackDDict_290_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNMods",813,G__MdcTrackDDict_290_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyNMods",924,G__MdcTrackDDict_290_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyPlanes",1054,G__MdcTrackDDict_290_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIterNumb",1138,G__MdcTrackDDict_290_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' it", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incIterNumb",1120,G__MdcTrackDDict_290_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIterNumb",1126,G__MdcTrackDDict_290_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumParam",1121,G__MdcTrackDDict_290_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOldFunct",1131,G__MdcTrackDDict_290_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", "for print !?", (void*) NULL, 0);
   G__memfunc_setup("saveFunct",943,G__MdcTrackDDict_290_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", "for print !?", (void*) NULL, 0);
   G__memfunc_setup("clearFunct",1031,G__MdcTrackDDict_290_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToSumsDevWt",1406,G__MdcTrackDDict_290_0_22, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - mod d - 'Double_t' 0 - dev "
"d - 'Double_t' 0 - wtNorm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTimeOffsets",1532,G__MdcTrackDDict_290_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - tofFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("correctMinTimeOffsets",2175,G__MdcTrackDDict_290_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - minTos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeOffset",1334,G__MdcTrackDDict_290_0_25, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeOffset",1334,G__MdcTrackDDict_290_0_26, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isMdcTimeOffsetFixed",2006,G__MdcTrackDDict_290_0_27, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSegTimeOffsetFixed",2017,G__MdcTrackDDict_290_0_28, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTrackTimeOffsetFixed",2231,G__MdcTrackDDict_290_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeOffsetDer",1617,G__MdcTrackDDict_290_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - der", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToTOffsetErr",1488,G__MdcTrackDDict_290_0_31, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m D - 'Double_t' 0 - dTdA "
"d - 'Double_t' 0 - wtNorm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearTOffsetDer",1501,G__MdcTrackDDict_290_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToTOffsetDer",1474,G__MdcTrackDDict_290_0_33, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - k "
"d - 'Double_t' 0 - add", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTimeOffsetDer1",1643,G__MdcTrackDDict_290_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMatrixT<double>' 'TMatrixD' 1 - grad2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTimeOffsetDer2",1644,G__MdcTrackDDict_290_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMatrixT<double>' 'TMatrixD' 1 - grad2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumWtNorm",1244,G__MdcTrackDDict_290_0_36, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTimeOffsetsErr",1829,G__MdcTrackDDict_290_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillErrorsMatr",1464,G__MdcTrackDDict_290_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMatrixT<double>' 'TMatrixD' 1 - matrH", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToFunct",1004,G__MdcTrackDDict_290_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - add d - 'Double_t' 0 - wt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumWeight",1245,G__MdcTrackDDict_290_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyParAndAdd",1274,G__MdcTrackDDict_290_0_41, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'HMdcTrackParam' - 11 - tp i - 'Int_t' 0 - ip "
"d - 'Double_t' 0 - add", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyParAndAdd",1274,G__MdcTrackDDict_290_0_42, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'HMdcTrackParam' - 11 - tp i - 'Int_t' 0 - ip1 "
"d - 'Double_t' 0 - add1 i - 'Int_t' 0 - ip2 "
"d - 'Double_t' 0 - add2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrTimeOffset",1631,G__MdcTrackDDict_290_0_43, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrMatr",1021,G__MdcTrackDDict_290_0_44, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HSymMat4), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParErr",908,G__MdcTrackDDict_290_0_45, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("functional",1075,G__MdcTrackDDict_290_0_46, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNormFunctional",1775,G__MdcTrackDDict_290_0_47, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("oldFunctional",1362,G__MdcTrackDDict_290_0_48, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumOfGoodWires",1720,G__MdcTrackDDict_290_0_49, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcChi2PerDF",1162,G__MdcTrackDDict_290_0_50, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' nGWires", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2",646,G__MdcTrackDDict_290_0_51, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillClusFit",1121,G__MdcTrackDDict_290_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcClusFit' - 0 - fClusFit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__MdcTrackDDict_290_0_53, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'HMdcTrackParam' - 11 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__MdcTrackDDict_290_0_54, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'HMdcTrackParam' - 11 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__MdcTrackDDict_290_0_55, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__MdcTrackDDict_290_0_56, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__MdcTrackDDict_290_0_57, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam), -1, 1, 3, 1, 1, 0, 
"u 'HMdcTrackParam' - 11 - tp i - 'Int_t' 0 - ip "
"d - 'Double_t' 0 - add", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__MdcTrackDDict_290_0_58, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam), -1, 1, 5, 1, 1, 0, 
"u 'HMdcTrackParam' - 11 - tp i - 'Int_t' 0 - ip1 "
"d - 'Double_t' 0 - add1 i - 'Int_t' 0 - ip2 "
"d - 'Double_t' 0 - add2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFunctRelChangLess",1911,G__MdcTrackDDict_290_0_59, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testParameters",1492,G__MdcTrackDDict_290_0_60, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - tosMin d - 'Double_t' 0 - tosMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFixedTimeOffset",1842,G__MdcTrackDDict_290_0_61, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - o1 d - 'Double_t' 0 - o2 "
"d - 'Double_t' 0 - o3 d - 'Double_t' 0 - o4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unfixTimeOffset",1568,G__MdcTrackDDict_290_0_62, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTosErr",1010,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTosErr",1010,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - m1 i - 'Int_t' 0 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTosErr",1010,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTosErr",1010,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 0, 
"d - 'Double_t' 0 - sc1 d - 'Double_t' 0 - sc2 "
"d - 'Double_t' 0 - erri2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cleanTO",678,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_290_0_68, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackParam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_290_0_69, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackParam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_290_0_70, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackParam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_290_0_71, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackParam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_290_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_290_0_76, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackParam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_290_0_77, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackParam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_290_0_78, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackParam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_290_0_79, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackParam::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackParam", 1346, G__MdcTrackDDict_290_0_80, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackParam", 1472, G__MdcTrackDDict_290_0_81, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_290_0_82, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackParam' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcKickCor(void) {
   /* HMdcKickCor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickCor));
   G__memfunc_setup("HMdcKickCor",1026,G__MdcTrackDDict_291_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickCor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("interpolateAngles",1793,G__MdcTrackDDict_291_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - theta f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCorrection",1451,G__MdcTrackDDict_291_0_3, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - rKick i - 'Int_t' 10 - mdcNo "
"i - 'Int_t' 10 - layerNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initParam",933,G__MdcTrackDDict_291_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYMdc",685,G__MdcTrackDDict_291_0_5, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mdcNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZMdc",686,G__MdcTrackDDict_291_0_6, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mdcNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaMdc",1098,G__MdcTrackDDict_291_0_7, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mdcNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_291_0_8, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcKickCor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_291_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcKickCor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_291_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcKickCor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_291_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcKickCor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_291_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_291_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcKickCor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_291_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcKickCor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_291_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcKickCor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_291_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcKickCor::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcKickCor", 1026, G__MdcTrackDDict_291_0_20, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickCor), -1, 0, 1, 1, 1, 0, "u 'HMdcKickCor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcKickCor", 1152, G__MdcTrackDDict_291_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_291_0_22, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcKickCor), -1, 1, 1, 1, 1, 0, "u 'HMdcKickCor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcProjPlot(void) {
   /* HMdcProjPlot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcProjPlot));
   G__memfunc_setup("HMdcProjPlot",1174,G__MdcTrackDDict_292_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcProjPlot), -1, 0, 3, 1, 1, 0, 
"b - 'UChar_t' 0 - mSeg i - 'Int_t' 0 - inBinX "
"i - 'Int_t' 0 - inBinY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEdges",820,G__MdcTrackDDict_292_0_2, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - iyMin d - 'Double_t' 0 - ixMinD "
"d - 'Double_t' 0 - ixMaxD d - 'Double_t' 0 - iyMax "
"d - 'Double_t' 0 - ixMin d - 'Double_t' 0 - ixMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_292_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xbin",433,G__MdcTrackDDict_292_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ybin",434,G__MdcTrackDDict_292_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xBnPos",602,G__MdcTrackDDict_292_0_6, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yBnPos",603,G__MdcTrackDDict_292_0_7, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("binX",401,G__MdcTrackDDict_292_0_8, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("binY",402,G__MdcTrackDDict_292_0_9, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCrossBin",1206,G__MdcTrackDDict_292_0_10, 121, -1, -1, 0, 4, 1, 1, 8, 
"u 'HGeomVector' - 11 - r u 'HGeomVector' - 11 - dir "
"s - 'Short_t' 1 - xb s - 'Short_t' 1 - yb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlot",735,G__MdcTrackDDict_292_0_11, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2C), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 0 - name C - 'Char_t' 0 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("binAmplitude",1246,G__MdcTrackDDict_292_0_12, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - nb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearBin",800,G__MdcTrackDDict_292_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBinAmplAndClear",1757,G__MdcTrackDDict_292_0_14, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcProjPlot",1174,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcProjPlot), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_292_0_16, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcProjPlot::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_292_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcProjPlot::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_292_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcProjPlot::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_292_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcProjPlot::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_292_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_292_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcProjPlot::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_292_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcProjPlot::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_292_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcProjPlot::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_292_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcProjPlot::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcProjPlot", 1174, G__MdcTrackDDict_292_0_28, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcProjPlot), -1, 0, 1, 1, 1, 0, "u 'HMdcProjPlot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcProjPlot", 1300, G__MdcTrackDDict_292_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_292_0_30, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcProjPlot), -1, 1, 1, 1, 1, 0, "u 'HMdcProjPlot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdc34ClFinderLayer(void) {
   /* HMdc34ClFinderLayer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer));
   G__memfunc_setup("HMdc34ClFinderLayer",1735,G__MdcTrackDDict_293_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdc34ClFinderLayer",1735,G__MdcTrackDDict_293_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer), -1, 0, 1, 1, 1, 0, "u 'HMdc34ClFinderLayer' - 1 - prevPart", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createArrayBins",1535,G__MdcTrackDDict_293_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - nBins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellsList",1243,G__MdcTrackDDict_293_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcLayListCells' - 1 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextLayerPart",1363,G__MdcTrackDDict_293_0_5, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nPartFCell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerPart",1236,G__MdcTrackDDict_293_0_6, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcWiresProj",1336,G__MdcTrackDDict_293_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'HMdcSizesCellsLayer' - 1 - fSCellsLay u 'HGeomVector' - 1 - pKick "
"U 'HMdcProjPlot' - 0 - prPlotSeg2 i - 'Int_t' 0 - firstCell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_293_0_8, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdc34ClFinderLayer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_293_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc34ClFinderLayer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_293_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdc34ClFinderLayer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_293_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdc34ClFinderLayer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_293_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_293_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc34ClFinderLayer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_293_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdc34ClFinderLayer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_293_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc34ClFinderLayer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_293_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdc34ClFinderLayer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdc34ClFinderLayer", 1861, G__MdcTrackDDict_293_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_293_0_21, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer), -1, 1, 1, 1, 1, 0, "u 'HMdc34ClFinderLayer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdc34ClFinderMod(void) {
   /* HMdc34ClFinderMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderMod));
   G__memfunc_setup("HMdc34ClFinderMod",1514,G__MdcTrackDDict_294_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderMod), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_294_0_2, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderLayer), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCells",897,G__MdcTrackDDict_294_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellsList",1243,G__MdcTrackDDict_294_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcModListCells' - 1 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_294_0_5, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdc34ClFinderMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_294_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc34ClFinderMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_294_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdc34ClFinderMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_294_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdc34ClFinderMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_294_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_294_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc34ClFinderMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_294_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdc34ClFinderMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_294_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc34ClFinderMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_294_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdc34ClFinderMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdc34ClFinderMod", 1514, G__MdcTrackDDict_294_0_17, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderMod), -1, 0, 1, 1, 1, 0, "u 'HMdc34ClFinderMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdc34ClFinderMod", 1640, G__MdcTrackDDict_294_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_294_0_19, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderMod), -1, 1, 1, 1, 1, 0, "u 'HMdc34ClFinderMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdc34ClFinderSec(void) {
   /* HMdc34ClFinderSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderSec));
   G__memfunc_setup("HMdc34ClFinderSec",1509,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderSec), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeModS2Plot",1250,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeSeg2PlotAmpCut",1752,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcYbin",805,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"i - 'Int_t' 0 - upDo i - 'Int_t' 0 - leRi "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scanPlotSeg2",1173,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcClusterSeg2FixedLevel",2478,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - nBin b - 'UChar_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcClusterSeg2FloatLevel",2484,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - nBin b - 'UChar_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillClusterSeg2",1498,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findClustersSeg2",1607,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCluster",1174,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - nBin b - 'UChar_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reinitCluster",1389,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - nBin b - 'UChar_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addBinInCluster",1499,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - nBin b - 'UChar_t' 0 - wt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseClusterNum",1884,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mergeClustSeg2",1388,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillClusCat",1110,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcLayerProjVar",1620,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRegionVar",1241,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeLayProjV1",1254,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeLayProjV2",1255,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearPrSeg2",1050,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testMaxAmp",1028,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcYbinDrTm",1180,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "d - 'Double_t' 0 - dDCutYCellCorr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setArrays",958,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDriftDist",1312,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcKickCor",1081,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeGhosts",1286,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkMetaMatch",1394,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFirstLayerPart",1768,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayerPart",1248,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcXBinsCut",1187,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - nReg u 'TCutG' - 1 - cutDxDy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCrosses",1141,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"u 'TCutG' - 1 - cutDxDy d - 'Double_t' 0 - yb "
"u 'HMdc34ClFinderSec::DxDyBinsCut' - 1 - cutB", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillBins",819,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - ny", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_295_0_33, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_295_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinBin",905,G__MdcTrackDDict_295_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - mBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("notEnoughWires",1473,G__MdcTrackDDict_295_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findClustersSeg2",1607,G__MdcTrackDDict_295_0_37, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'HMdcClus' - 0 - pClus I - 'Int_t' 0 '0' mBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findClustersSeg2",1607,G__MdcTrackDDict_295_0_38, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"U 'HMdcTrackParam' - 0 - tSeg1 U 'HMdcClus' - 0 - pClus "
"I - 'Int_t' 0 '0' mBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlot",735,G__MdcTrackDDict_295_0_39, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2C), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 0 - name C - 'Char_t' 0 - title "
"i - 'Int_t' 0 '0' ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlotSeg2",1072,G__MdcTrackDDict_295_0_40, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcProjPlot), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNBinX",767,G__MdcTrackDDict_295_0_41, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNBinY",768,G__MdcTrackDDict_295_0_42, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTargetF",1017,G__MdcTrackDDict_295_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 11 - vec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTargetL",1023,G__MdcTrackDDict_295_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 11 - vec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetF",1005,G__MdcTrackDDict_295_0_45, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetL",1011,G__MdcTrackDDict_295_0_46, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTypeClFinder",1525,G__MdcTrackDDict_295_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTypeClFinder",1513,G__MdcTrackDDict_295_0_48, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellsList",1243,G__MdcTrackDDict_295_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcSecListCells' - 1 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdc34ClFinderSec",1509,G__MdcTrackDDict_295_0_50, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderSec), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - inBinX "
"i - 'Int_t' 0 - inBinY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetArr",1228,G__MdcTrackDDict_295_0_51, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMSeg",684,G__MdcTrackDDict_295_0_52, 66, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusCut",1039,G__MdcTrackDDict_295_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pClCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setKickPlane",1214,G__MdcTrackDDict_295_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcKickPlane' - 0 - pkick", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXMinClLines",1394,G__MdcTrackDDict_295_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "S - 'Short_t' 0 - xMin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXMaxClLines",1396,G__MdcTrackDDict_295_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "S - 'Short_t' 0 - xMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClFnStack",1189,G__MdcTrackDDict_295_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcClFnStack' - 0 - pst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClFnStArr",1179,G__MdcTrackDDict_295_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcClFnStacksArr' - 0 - psa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mdcFlag",686,G__MdcTrackDDict_295_0_59, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doMetaMatch",1095,G__MdcTrackDDict_295_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcClusMetaMatch' - 0 - pMM", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDxDyCut",1009,G__MdcTrackDDict_295_0_61, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TCutG' - 0 - cutR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFakeSupprFlag",1623,G__MdcTrackDDict_295_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounter",1283,G__MdcTrackDDict_295_0_63, 121, -1, -1, 0, 0, 1, 1, 0, "", "nClsArr = 0;}", (void*) NULL, 0);
   G__memfunc_setup("setKickCorr",1124,G__MdcTrackDDict_295_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcKickCor' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_295_0_65, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdc34ClFinderSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_295_0_66, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc34ClFinderSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_295_0_67, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdc34ClFinderSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_295_0_68, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdc34ClFinderSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_295_0_72, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_295_0_73, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc34ClFinderSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_295_0_74, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdc34ClFinderSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_295_0_75, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc34ClFinderSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_295_0_76, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdc34ClFinderSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdc34ClFinderSec", 1509, G__MdcTrackDDict_295_0_77, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderSec), -1, 0, 1, 1, 1, 0, "u 'HMdc34ClFinderSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_295_0_78, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderSec), -1, 1, 1, 1, 1, 0, "u 'HMdc34ClFinderSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdc34ClFinder(void) {
   /* HMdc34ClFinder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder));
   G__memfunc_setup("getExObject",1108,G__MdcTrackDDict_297_0_1, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdc34ClFinder* (*)())(&HMdc34ClFinder::getExObject) ), 0);
   G__memfunc_setup("getObject",919,G__MdcTrackDDict_297_0_2, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdc34ClFinder* (*)())(&HMdc34ClFinder::getObject) ), 0);
   G__memfunc_setup("deleteCont",1031,G__MdcTrackDDict_297_0_3, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdc34ClFinder::deleteCont) ), 0);
   G__memfunc_setup("setQuietMode",1241,G__MdcTrackDDict_297_0_4, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - quiet", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdc34ClFinder::setQuietMode) ), 0);
   G__memfunc_setup("getQuietMode",1229,G__MdcTrackDDict_297_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HMdc34ClFinder::getQuietMode) ), 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_297_0_6, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinderSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initContainer",1367,G__MdcTrackDDict_297_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HMdcEvntListCells' - 1 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellsList",1243,G__MdcTrackDDict_297_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcEvntListCells' - 1 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("doMetaMatch",1095,G__MdcTrackDDict_297_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcClusMetaMatch' - 0 - pMM", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDxDyCutRegion",1692,G__MdcTrackDDict_297_0_12, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "u 'HGeomVector' - 11 - pnt", (char*)NULL, (void*) G__func2void( (Int_t (*)(const HGeomVector&))(&HMdc34ClFinder::calcDxDyCutRegion) ), 0);
   G__memfunc_setup("printClFinderParam",1829,G__MdcTrackDDict_297_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdc34ClFinder",1226,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder), -1, 0, 3, 1, 2, 0, 
"C - 'Char_t' 10 '\"Mdc34ClFinder\"' name C - 'Char_t' 10 '\"Cluster finder for outer MDCs\"' title "
"C - 'Char_t' 10 '\"\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTarget",1018,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcProjPlaneSeg2",1647,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSizePlotSeg2",1566,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcWiresProj",1336,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCrossLines",1432,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"u 'HGeomVector' - 1 - p1l1 u 'HGeomVector' - 1 - p2l1 "
"u 'HGeomVector' - 1 - p1l2 u 'HGeomVector' - 1 - p2l2 "
"u 'HGeomVector' - 1 - cross", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xLine",512,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 2, 0, 
"u 'HGeomVector' - 1 - p1 u 'HGeomVector' - 1 - p2 "
"d - 'Double_t' 0 - yi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_297_0_21, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdc34ClFinder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_297_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc34ClFinder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_297_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdc34ClFinder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_297_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdc34ClFinder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_297_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_297_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc34ClFinder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_297_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdc34ClFinder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_297_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc34ClFinder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_297_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdc34ClFinder::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdc34ClFinder", 1226, G__MdcTrackDDict_297_0_33, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder), -1, 0, 1, 1, 1, 0, "u 'HMdc34ClFinder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_297_0_34, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc34ClFinder), -1, 1, 1, 1, 1, 0, "u 'HMdc34ClFinder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcEff(void) {
   /* HMdcEff */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEff));
   G__memfunc_setup("HMdcEff",621,G__MdcTrackDDict_365_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEff), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcEff",676,G__MdcTrackDDict_365_0_2, 121, -1, -1, 0, 8, 1, 1, 0, 
"d - 'Double_t' 0 - iN0 d - 'Double_t' 0 - eN0 "
"d - 'Double_t' 0 - iN1 d - 'Double_t' 0 - eN1 "
"d - 'Double_t' 0 - iN2m d - 'Double_t' 0 - eN2m "
"d - 'Double_t' 0 '0.' iN2b d - 'Double_t' 0 '0.' eN2b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setTotNhits",1161,G__MdcTrackDDict_365_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - nHits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTotNhitsCutS",1544,G__MdcTrackDDict_365_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - nHits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTotNhitsNoCut",1650,G__MdcTrackDDict_365_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - nHits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTotNhitsClus",1568,G__MdcTrackDDict_365_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - nHits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTotNhits",1149,G__MdcTrackDDict_365_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTotNhitsNoCut",1638,G__MdcTrackDDict_365_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTotNhitsCutS",1532,G__MdcTrackDDict_365_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTotNhitsClus",1556,G__MdcTrackDDict_365_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getN0",446,G__MdcTrackDDict_365_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getN1",447,G__MdcTrackDDict_365_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getN2",448,G__MdcTrackDDict_365_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getN2m",557,G__MdcTrackDDict_365_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getN2b",546,G__MdcTrackDDict_365_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEfficiency",1333,G__MdcTrackDDict_365_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrEfficiency",1630,G__MdcTrackDDict_365_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFracSingle",1310,G__MdcTrackDDict_365_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrFracSingle",1607,G__MdcTrackDDict_365_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getP0",448,G__MdcTrackDDict_365_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getP1",449,G__MdcTrackDDict_365_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getP2",450,G__MdcTrackDDict_365_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrP0",745,G__MdcTrackDDict_365_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrP1",746,G__MdcTrackDDict_365_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrP2",747,G__MdcTrackDDict_365_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTotNumTracks",1551,G__MdcTrackDDict_365_0_26, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculation",1167,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("efficiency",1045,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 2, 0, 
"d - 'Double_t' 0 - n0T d - 'Double_t' 0 - n1T "
"d - 'Double_t' 0 - n2mT d - 'Double_t' 0 '0.' n2bT", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fractSingle",1138,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 2, 0, 
"d - 'Double_t' 0 - effT d - 'Double_t' 0 - n0T "
"d - 'Double_t' 0 - n1T d - 'Double_t' 0 - n2mT "
"d - 'Double_t' 0 '0.' n2bT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_365_0_30, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcEff::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_365_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEff::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_365_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcEff::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_365_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcEff::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_365_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_365_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEff::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_365_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEff::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_365_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEff::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_365_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEff::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcEff", 621, G__MdcTrackDDict_365_0_42, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEff), -1, 0, 1, 1, 1, 0, "u 'HMdcEff' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcEff", 747, G__MdcTrackDDict_365_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_365_0_44, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEff), -1, 1, 1, 1, 1, 0, "u 'HMdcEff' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcEffMod(void) {
   /* HMdcEffMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMod));
   G__memfunc_setup("HMdcEffMod",909,G__MdcTrackDDict_366_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcEff",676,(G__InterfaceMethod) NULL,121, -1, -1, 0, 8, 1, 1, 0, 
"d - 'Double_t' 0 - iN0 d - 'Double_t' 0 - eN0 "
"d - 'Double_t' 0 - iN1 d - 'Double_t' 0 - eN1 "
"d - 'Double_t' 0 - iN2m d - 'Double_t' 0 - eN2m "
"d - 'Double_t' 0 '0.' iN2b d - 'Double_t' 0 '0.' eN2b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getP0l",556,G__MdcTrackDDict_366_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getP1l",557,G__MdcTrackDDict_366_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getP2l",558,G__MdcTrackDDict_366_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getP3l",559,G__MdcTrackDDict_366_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getP4l",560,G__MdcTrackDDict_366_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getP5l",561,G__MdcTrackDDict_366_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getP6l",562,G__MdcTrackDDict_366_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("efficiency",1045,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 2, 0, 
"d - 'Double_t' 0 - n0 d - 'Double_t' 0 - n1 "
"d - 'Double_t' 0 - n2m d - 'Double_t' 0 '0.' n2b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_366_0_11, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcEffMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_366_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEffMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_366_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcEffMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_366_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcEffMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_366_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_366_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEffMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_366_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEffMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_366_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEffMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_366_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEffMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcEffMod", 909, G__MdcTrackDDict_366_0_23, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMod), -1, 0, 1, 1, 1, 0, "u 'HMdcEffMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcEffMod", 1035, G__MdcTrackDDict_366_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_366_0_25, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMod), -1, 1, 1, 1, 1, 0, "u 'HMdcEffMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcEfficiencyLayer(void) {
   /* HMdcEfficiencyLayer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyLayer));
   G__memfunc_setup("HMdcEfficiencyLayer",1870,G__MdcTrackDDict_367_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyLayer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__MdcTrackDDict_367_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"s - 'Short_t' 0 - sec s - 'Short_t' 0 - mod "
"s - 'Short_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_367_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCellTot",992,G__MdcTrackDDict_367_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCellCutS",1064,G__MdcTrackDDict_367_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCellClus",1088,G__MdcTrackDDict_367_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCell",681,G__MdcTrackDDict_367_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCellInClust",1387,G__MdcTrackDDict_367_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumClCell",1183,G__MdcTrackDDict_367_0_9, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNClCell",957,G__MdcTrackDDict_367_0_10, 66, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add0Hit",638,G__MdcTrackDDict_367_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"s - 'Short_t' 0 - cell i - 'Int_t' 0 - nB", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add1Hit",639,G__MdcTrackDDict_367_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"s - 'Short_t' 0 - cell i - 'Int_t' 0 - nB", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add2Hit",640,G__MdcTrackDDict_367_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"s - 'Short_t' 0 - cell1 s - 'Short_t' 0 - cell2 "
"i - 'Int_t' 0 - nB", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellStat",1116,G__MdcTrackDDict_367_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumCells",1123,G__MdcTrackDDict_367_0_15, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getN0Hit",739,G__MdcTrackDDict_367_0_16, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getN1Hit",740,G__MdcTrackDDict_367_0_17, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getN2Hit",741,G__MdcTrackDDict_367_0_18, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEffCells",1092,G__MdcTrackDDict_367_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HMdcEff' - 0 - efficiency s - 'Short_t' 0 '-1000' fCell "
"s - 'Short_t' 0 '1000' lCell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEffXY",770,G__MdcTrackDDict_367_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcEff' - 0 - efficiency", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEffXY",770,G__MdcTrackDDict_367_0_21, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HMdcEff' - 0 - efficiency s - 'Short_t' 0 - xBin "
"s - 'Short_t' 0 - yBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEffXY",770,G__MdcTrackDDict_367_0_22, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'HMdcEff' - 0 - efficiency s - 'Short_t' 0 - fXbin "
"s - 'Short_t' 0 - lXbin s - 'Short_t' 0 - fYbin "
"s - 'Short_t' 0 - lYbin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHist",728,G__MdcTrackDDict_367_0_23, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - hsNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHists",946,G__MdcTrackDDict_367_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawTotNhits",1259,G__MdcTrackDDict_367_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawRatio",941,G__MdcTrackDDict_367_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawNHits",916,G__MdcTrackDDict_367_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawHistEff",1111,G__MdcTrackDDict_367_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawHistSing",1239,G__MdcTrackDDict_367_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawProbabilitis",1682,G__MdcTrackDDict_367_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateCanv",1035,G__MdcTrackDDict_367_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setListPads",1136,G__MdcTrackDDict_367_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - listPad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvas",1034,G__MdcTrackDDict_367_0_33, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delCanvas",913,G__MdcTrackDDict_367_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvXYlist",1443,G__MdcTrackDDict_367_0_35, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateCanvXYlist",1656,G__MdcTrackDDict_367_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delCanvXYlist",1322,G__MdcTrackDDict_367_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvXYnHits",1517,G__MdcTrackDDict_367_0_38, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvXYefficiency",2044,G__MdcTrackDDict_367_0_39, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvXYsingle",1641,G__MdcTrackDDict_367_0_40, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvXYprob",1434,G__MdcTrackDDict_367_0_41, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBiningXY",1108,G__MdcTrackDDict_367_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nBinsSum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTitle",846,G__MdcTrackDDict_367_0_43, 121, -1, -1, 0, 2, 3, 1, 0, 
"U 'TH1F' - 0 - hist C - 'Char_t' 10 - nm", (char*)NULL, (void*) G__func2void( (void (*)(TH1F*, const Char_t*))(&HMdcEfficiencyLayer::setTitle) ), 0);
   G__memfunc_setup("drawLineTot",1133,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"U 'TH1F' - 0 - hst i - 'Int_t' 0 - color "
"f - 'Float_t' 0 - effL f - 'Float_t' 0 - errEff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPads",724,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("creatCanvas",1131,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createHists",1151,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPavesXY",1020,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvXY",999,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nPl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillPaveXYnHits",1514,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nPv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillPaveXYeff",1301,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nPv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillPaveXYsing",1429,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nPv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayerPadParam",1615,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - hs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_367_0_54, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcEfficiencyLayer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_367_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEfficiencyLayer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_367_0_56, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcEfficiencyLayer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_367_0_57, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcEfficiencyLayer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_367_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_367_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEfficiencyLayer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_367_0_63, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEfficiencyLayer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_367_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEfficiencyLayer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_367_0_65, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEfficiencyLayer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcEfficiencyLayer", 1870, G__MdcTrackDDict_367_0_66, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyLayer), -1, 0, 1, 1, 1, 0, "u 'HMdcEfficiencyLayer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcEfficiencyLayer", 1996, G__MdcTrackDDict_367_0_67, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_367_0_68, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyLayer), -1, 1, 1, 1, 1, 0, "u 'HMdcEfficiencyLayer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcEfficiencyMod(void) {
   /* HMdcEfficiencyMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyMod));
   G__memfunc_setup("HMdcEfficiencyMod",1649,G__MdcTrackDDict_368_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyMod), -1, 0, 2, 1, 1, 0, 
"s - 'Short_t' 0 - sec s - 'Short_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_368_0_2, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyLayer), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_368_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add0Hit",638,G__MdcTrackDDict_368_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nB", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add1Hit",639,G__MdcTrackDDict_368_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nB", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add2Hit",640,G__MdcTrackDDict_368_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nB", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBinNum",905,G__MdcTrackDDict_368_0_7, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEffMod",881,G__MdcTrackDDict_368_0_8, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMod), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEffXY",770,G__MdcTrackDDict_368_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcEffMod' - 0 - efficiency", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEffXY",770,G__MdcTrackDDict_368_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HMdcEffMod' - 0 - efficiency s - 'Short_t' 0 - xBin "
"s - 'Short_t' 0 - yBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEffXY",770,G__MdcTrackDDict_368_0_11, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'HMdcEffMod' - 0 - efficiency s - 'Short_t' 0 - fXbin "
"s - 'Short_t' 0 - lXbin s - 'Short_t' 0 - fYbin "
"s - 'Short_t' 0 - lYbin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setListLayers",1368,G__MdcTrackDDict_368_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - listLay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateCanv",1035,G__MdcTrackDDict_368_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawHists",953,G__MdcTrackDDict_368_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nCanv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvTotNhits",1651,G__MdcTrackDDict_368_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvNHits",1308,G__MdcTrackDDict_368_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvHistEff",1503,G__MdcTrackDDict_368_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvHistSing",1631,G__MdcTrackDDict_368_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvProbabilitis",2074,G__MdcTrackDDict_368_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvRatio",1333,G__MdcTrackDDict_368_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveCanvases",1251,G__MdcTrackDDict_368_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - saveAs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delCanv",701,G__MdcTrackDDict_368_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nCanv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delCanvTotNhits",1530,G__MdcTrackDDict_368_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delCanvNHits",1187,G__MdcTrackDDict_368_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delCanvHistEff",1382,G__MdcTrackDDict_368_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delCanvHistSing",1510,G__MdcTrackDDict_368_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delCanvProbabilitis",1953,G__MdcTrackDDict_368_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delCanvRatio",1212,G__MdcTrackDDict_368_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHistMb",1006,G__MdcTrackDDict_368_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvEffMb",1270,G__MdcTrackDDict_368_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveCanvEffMb",1271,G__MdcTrackDDict_368_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - saveAs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("creatCanvEffMb",1367,G__MdcTrackDDict_368_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TCanvas' - 0 - canv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCanvEffMb",1263,G__MdcTrackDDict_368_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TCanvas' - 0 - canv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCanvPattMb",1399,G__MdcTrackDDict_368_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TCanvas' - 0 - canv i - 'Int_t' 0 - pad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delCanvMb",876,G__MdcTrackDDict_368_0_35, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fillTimesAll",1218,G__MdcTrackDDict_368_0_37, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcCal1' - 0 - cal g - 'Bool_t' 0 - isGnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTimesAfCut",1404,G__MdcTrackDDict_368_0_38, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcCal1' - 0 - cal g - 'Bool_t' 0 - isGnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTimesCls",1227,G__MdcTrackDDict_368_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcCal1' - 0 - cal g - 'Bool_t' 0 - isGnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvTimes",1336,G__MdcTrackDDict_368_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '-1' bining h - 'UInt_t' 0 '0' saveAs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delCanvTimes",1215,G__MdcTrackDDict_368_0_41, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTimes",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"U 'HMdcCal1' - 0 - cal g - 'Bool_t' 0 - isGnt "
"i - 'Int_t' 0 - nHist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNameCanv",1109,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("creatCanvas",1131,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nCanv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("creatCanvasMb",1306,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPads",724,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TCanvas' - 0 - canv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawLineGrMb",1182,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TH1F' - 0 - hst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawLineEffMb",1270,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TH1F' - 0 - hst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_368_0_49, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcEfficiencyMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_368_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEfficiencyMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_368_0_51, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcEfficiencyMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_368_0_52, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcEfficiencyMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_368_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_368_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEfficiencyMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_368_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEfficiencyMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_368_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEfficiencyMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_368_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEfficiencyMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcEfficiencyMod", 1649, G__MdcTrackDDict_368_0_61, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyMod), -1, 0, 1, 1, 1, 0, "u 'HMdcEfficiencyMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcEfficiencyMod", 1775, G__MdcTrackDDict_368_0_62, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_368_0_63, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyMod), -1, 1, 1, 1, 1, 0, "u 'HMdcEfficiencyMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcEfficiencySec(void) {
   /* HMdcEfficiencySec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencySec));
   G__memfunc_setup("HMdcEfficiencySec",1644,G__MdcTrackDDict_369_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencySec), -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_369_0_2, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencyMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlotAllHits",1424,G__MdcTrackDDict_369_0_3, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlotSelHits",1435,G__MdcTrackDDict_369_0_4, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCanvasProj",1335,G__MdcTrackDDict_369_0_5, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TCanvas), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCanvasHits",1332,G__MdcTrackDDict_369_0_6, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TCanvas), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvProj",1233,G__MdcTrackDDict_369_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvHits",1230,G__MdcTrackDDict_369_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delCanvProj",1112,G__MdcTrackDDict_369_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delCanvHits",1109,G__MdcTrackDDict_369_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveCanvHits",1231,G__MdcTrackDDict_369_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - saveAs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("creatPlots",1057,G__MdcTrackDDict_369_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcLookUpTbSec' - 0 - flookupTbSec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_369_0_13, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcEfficiencySec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_369_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEfficiencySec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_369_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcEfficiencySec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_369_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcEfficiencySec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_369_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_369_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEfficiencySec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_369_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEfficiencySec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_369_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEfficiencySec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_369_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEfficiencySec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcEfficiencySec", 1644, G__MdcTrackDDict_369_0_25, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencySec), -1, 0, 1, 1, 1, 0, "u 'HMdcEfficiencySec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcEfficiencySec", 1770, G__MdcTrackDDict_369_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_369_0_27, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencySec), -1, 1, 1, 1, 1, 0, "u 'HMdcEfficiencySec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcEfficiency(void) {
   /* HMdcEfficiency */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiency));
   G__memfunc_setup("HMdcEfficiency",1361,G__MdcTrackDDict_370_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiency), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcEfficiency",1361,G__MdcTrackDDict_370_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiency), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_370_0_3, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEfficiencySec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("drawProjPlotsSec",1654,G__MdcTrackDDict_370_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawProjPlots",1371,G__MdcTrackDDict_370_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawHitsPlots",1368,G__MdcTrackDDict_370_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvEvent",1336,G__MdcTrackDDict_370_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delCanvEvent",1215,G__MdcTrackDDict_370_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawPrPlEvent",1326,G__MdcTrackDDict_370_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawSummary",1180,G__MdcTrackDDict_370_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventId",1007,G__MdcTrackDDict_370_0_15, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcEfficiency",1416,G__MdcTrackDDict_370_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawAllClusters",1564,G__MdcTrackDDict_370_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawGoodClusters",1676,G__MdcTrackDDict_370_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawClusSelCh",1300,G__MdcTrackDDict_370_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDrawClusFlag",1503,G__MdcTrackDDict_370_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printClusters",1410,G__MdcTrackDDict_370_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveHist",839,G__MdcTrackDDict_370_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveHist",839,G__MdcTrackDDict_370_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - outputDir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("savePDF",649,G__MdcTrackDDict_370_0_24, 121, -1, -1, 0, 2, 3, 1, 0, 
"C - 'Char_t' 10 - fileName C - 'Char_t' 10 '\"Pattern\"' type", (char*)NULL, (void*) G__func2void( (void (*)(const Char_t*, const Char_t*))(&HMdcEfficiency::savePDF) ), 0);
   G__memfunc_setup("getFilePointer",1441,G__MdcTrackDDict_370_0_25, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TFile), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TFile* (*)())(&HMdcEfficiency::getFilePointer) ), 0);
   G__memfunc_setup("initSecArray",1230,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("extractFileInfo",1543,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawTofShowerHits",1767,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveAs",611,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 3, 4, 0, 
"C - 'Char_t' 10 - fileName C - 'Char_t' 10 '\"Pattern\"' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makePDF",632,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 3, 4, 0, "C - 'Char_t' 10 - psFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_370_0_31, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcEfficiency::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_370_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEfficiency::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_370_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcEfficiency::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_370_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcEfficiency::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_370_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_370_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEfficiency::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_370_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEfficiency::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_370_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEfficiency::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_370_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEfficiency::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcEfficiency", 1487, G__MdcTrackDDict_370_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcGeantEvent(void) {
   /* HMdcGeantEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantEvent));
   G__memfunc_setup("HMdcGeantEvent",1357,G__MdcTrackDDict_371_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExObject",1108,G__MdcTrackDDict_371_0_2, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantEvent), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcGeantEvent* (*)())(&HMdcGeantEvent::getExObject) ), 0);
   G__memfunc_setup("getObject",919,G__MdcTrackDDict_371_0_3, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantEvent), -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 1 - isCreated", (char*)NULL, (void*) G__func2void( (HMdcGeantEvent* (*)(Bool_t&))(&HMdcGeantEvent::getObject) ), 0);
   G__memfunc_setup("deleteCont",1031,G__MdcTrackDDict_371_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcGeantEvent::deleteCont) ), 0);
   G__memfunc_setup("getMdcTrackInfSim",1679,G__MdcTrackDDict_371_0_5, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackInfSim), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcTrackInfSim* (*)())(&HMdcGeantEvent::getMdcTrackInfSim) ), 0);
   G__memfunc_setup("setGeantKineCat",1498,G__MdcTrackDDict_371_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetMdc",835,G__MdcTrackDDict_371_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isMdcActive",1100,G__MdcTrackDDict_371_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebugPrintFlag",1722,G__MdcTrackDDict_371_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' fg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectTracks",1358,G__MdcTrackDDict_371_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTracks",1014,G__MdcTrackDDict_371_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("next",447,G__MdcTrackDDict_371_0_12, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrack",1316,G__MdcTrackDDict_371_0_13, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGeantBug",1001,G__MdcTrackDDict_371_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_371_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearOSegClus",1292,G__MdcTrackDDict_371_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearOClus",1005,G__MdcTrackDDict_371_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearOSeg",885,G__MdcTrackDDict_371_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventVertex",1472,G__MdcTrackDDict_371_0_19, 121, -1, -1, 0, 3, 1, 1, 8, 
"f - 'Float_t' 1 - ax f - 'Float_t' 1 - ay "
"f - 'Float_t' 1 - az", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXvertex",1078,G__MdcTrackDDict_371_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYvertex",1079,G__MdcTrackDDict_371_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZvertex",1080,G__MdcTrackDDict_371_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetNum",1239,G__MdcTrackDDict_371_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_371_0_24, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcGeantEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_371_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_371_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcGeantEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_371_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcGeantEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_371_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_371_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_371_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeantEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_371_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_371_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeantEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcGeantEvent", 1483, G__MdcTrackDDict_371_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackFinder(void) {
   /* HMdcTrackFinder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder));
   G__memfunc_setup("HMdcTrackFinder",1449,G__MdcTrackDDict_372_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder), -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 - isCOff i - 'Int_t' 0 '0' typeClFn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTrackFinder",1449,G__MdcTrackDDict_372_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder), -1, 0, 4, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"g - 'Bool_t' 0 - isCOff i - 'Int_t' 0 '0' typeClFn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTrackFinder",1449,G__MdcTrackDDict_372_0_3, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTrackFinder",1449,G__MdcTrackDDict_372_0_4, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setPersistency",1509,G__MdcTrackDDict_372_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - perCl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParContainers",1669,G__MdcTrackDDict_372_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNLayers",1034,G__MdcTrackDDict_372_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - lst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLevel",836,G__MdcTrackDDict_372_0_12, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - l4s1 i - 'Int_t' 0 - l5s1 "
"i - 'Int_t' 0 - l4s2 i - 'Int_t' 0 - l5s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLevelSeg1",1172,G__MdcTrackDDict_372_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - l4 i - 'Int_t' 0 - l5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLevelSeg2",1173,G__MdcTrackDDict_372_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - l4 i - 'Int_t' 0 - l5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printStatus",1201,G__MdcTrackDDict_372_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcClFndrLevel",1476,G__MdcTrackDDict_372_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clFndrBeforField",1579,G__MdcTrackDDict_372_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("targSegFinderOnly",1735,G__MdcTrackDDict_372_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusMetaMatch",1611,G__MdcTrackDDict_372_0_19, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusMetaMatch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findOuterSegClusters",2084,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMod34Levels",1342,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortTracksInClusters",2108,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initMetaMatch",1320,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_372_0_24, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackFinder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_372_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFinder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_372_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackFinder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_372_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackFinder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_372_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_372_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFinder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_372_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackFinder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_372_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFinder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_372_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackFinder::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackFinder", 1575, G__MdcTrackDDict_372_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcClusterToHit(void) {
   /* HMdcClusterToHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit));
   G__memfunc_setup("fillSeg",710,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHit",716,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "s - 'Short_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParContainers",1669,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillClusInf",1115,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInf), -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - iMod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillContainers",1469,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTrkCandISeg",1462,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"s - 'Short_t' 0 - sec i - 'Int_t' 0 - indexSeg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTrkCandOSeg",1468,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"s - 'Short_t' 0 - sec i - 'Int_t' 0 - indexSeg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTrkCandOSeg",1468,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - indexSeg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcClusterToHit",1574,G__MdcTrackDDict_373_0_9, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcClusterToHit",1574,G__MdcTrackDDict_373_0_10, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcClusterToHit",1574,G__MdcTrackDDict_373_0_11, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - fSeg1 i - 'Int_t' 0 - fSeg2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcClusterToHit",1574,G__MdcTrackDDict_373_0_12, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit), -1, 0, 4, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"i - 'Int_t' 0 - fSeg1 i - 'Int_t' 0 - fSeg2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printStatus",1201,G__MdcTrackDDict_373_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_373_0_18, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcClusterToHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_373_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusterToHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_373_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcClusterToHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_373_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcClusterToHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_373_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_373_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusterToHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_373_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusterToHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_373_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusterToHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_373_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusterToHit::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcClusterToHit", 1700, G__MdcTrackDDict_373_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdc12Fit(void) {
   /* HMdc12Fit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit));
   G__memfunc_setup("HMdc12Fit",738,G__MdcTrackDDict_374_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - type i - 'Int_t' 0 - ver "
"i - 'Int_t' 0 - indep g - 'Bool_t' 0 'kFALSE' hst "
"g - 'Bool_t' 0 'kFALSE' prnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdc12Fit",738,G__MdcTrackDDict_374_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit), -1, 0, 7, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"i - 'Int_t' 0 - type i - 'Int_t' 0 - ver "
"i - 'Int_t' 0 - indep g - 'Bool_t' 0 'kFALSE' hst "
"g - 'Bool_t' 0 'kFALSE' prnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdc12Fit",738,G__MdcTrackDDict_374_0_3, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdc12Fit",738,G__MdcTrackDDict_374_0_4, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setSignalSpeed",1435,G__MdcTrackDDict_374_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNotFillByClus",1622,G__MdcTrackDDict_374_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printStatus",1201,G__MdcTrackDDict_374_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printStatusM",1278,G__MdcTrackDDict_374_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCosmicData",1316,G__MdcTrackDDict_374_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' fHSCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHitSegCat",1283,G__MdcTrackDDict_374_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useFittedISeg",1301,G__MdcTrackDDict_374_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitInOutCont",1510,G__MdcTrackDDict_374_0_16, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testGeantInf",1228,G__MdcTrackDDict_374_0_17, 121, -1, -1, 0, 2, 3, 1, 0, 
"U 'HMdcSegSim' - 0 - segFake U 'HMdcSegSim' - 0 - segGood", (char*)NULL, (void*) G__func2void( (void (*)(HMdcSegSim*, HMdcSegSim*))(&HMdc12Fit::testGeantInf) ), 0);
   G__memfunc_setup("setFakeSupprStep1Par",1997,G__MdcTrackDDict_374_0_18, 121, -1, -1, 0, 5, 1, 1, 0, 
"h - 'UInt_t' 0 - seg i - 'Int_t' 0 - n1 "
"i - 'Int_t' 0 - n2 i - 'Int_t' 0 - n3 "
"i - 'Int_t' 0 - n4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFakeSupprStep2Par",1998,G__MdcTrackDDict_374_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - seg F - 'Float_t' 0 - cutReal "
"F - 'Float_t' 0 - cutFake", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParContainers",1669,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitAlgorithm1",1307,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitAlgorithm2",1308,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitAlgorithm3",1309,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitAlgorithm3b",1407,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitAlgorithm4",1310,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitMod",611,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"U 'HMdcClus' - 0 - fClst i - 'Int_t' 0 '0' arrInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitSeg",610,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"U 'HMdcClus' - 0 - fClst i - 'Int_t' 0 '0' arrInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitSec",606,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"U 'HMdcClus' - 0 - fClst1 U 'HMdcClus' - 0 - fClst2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fit2Sectors",1112,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 2, 0, 
"U 'HMdcClus' - 0 - fClst1 U 'HMdcClus' - 0 - fClst2 "
"U 'HMdcClus' - 0 - fClst3 U 'HMdcClus' - 0 - fClst4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitNSectors",1140,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 2, 0, 
"U 'HMdcClus' - 0 - cl1 U 'HMdcClus' - 0 - cl2 "
"U 'HMdcClus' - 0 - cl3 U 'HMdcClus' - 0 - cl4 "
"U 'HMdcClus' - 0 - cl5 U 'HMdcClus' - 0 - cl6 "
"U 'HMdcClus' - 0 - cl7 U 'HMdcClus' - 0 - cl8", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitCombClusIndFit",1689,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"U 'HMdcClus' - 0 - fClst i - 'Int_t' 0 '0' arrInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitChambClus",1205,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"U 'HMdcClus' - 0 - fClst i - 'Int_t' 0 '0' arrInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitMixedClus",1233,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"U 'HMdcClus' - 0 - fClst i - 'Int_t' 0 '0' arrInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHitByFit",1194,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHitSegByFit",1481,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 '-99' iMod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHitByClus",1310,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHitSegByClus",1597,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 '-99' iMod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillSegBy2Hits",1355,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - ind1 i - 'Int_t' 0 - ind2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillClusInf",1115,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'HMdcSeg' - 0 - fSeg g - 'Bool_t' 0 'kFALSE' secondSec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillClusInf",1115,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"U 'HMdcHit' - 0 - fHit i - 'Int_t' 0 - iMod "
"c - 'Char_t' 0 - fitSt i - 'Int_t' 0 '-1' indClusFit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVertexDist",1445,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 9, 1, 2, 0, 
"d - 'Double_t' 0 - x0 d - 'Double_t' 0 - y0 "
"d - 'Double_t' 0 - z0 d - 'Double_t' 0 - x1 "
"d - 'Double_t' 0 - y1 d - 'Double_t' 0 - z1 "
"d - 'Double_t' 0 - x2 d - 'Double_t' 0 - y2 "
"d - 'Double_t' 0 - z2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMinFunctional",1738,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitSlot",1031,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcHit), -1, 0, 3, 1, 2, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 1 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSegSlot",1025,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSeg), -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGroup",857,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"U 'HMdcList24GroupCells' - 0 - lCl U 'HMdcSeg' - 0 - fSeg "
"i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGroup",857,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"U 'HMdcList24GroupCells' - 0 - lCl U 'HMdcHit' - 0 - fHit "
"i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findSeg2Clusters",1607,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "U 'HMdcTrackFitter' - 0 - fitter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copySignId",1017,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"U 'HMdcHit' - 0 - hit i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay U 'HMdcSeg' - 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTrkCandISeg",1462,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrkCand), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTrkCandOSeg",1468,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrkCand), -1, 0, 1, 1, 2, 0, "U 'HMdcTrkCand' - 0 - fTrkCand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortGeantInf",1236,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("suppressFakes",1391,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFake",707,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'HMdcSeg' - 0 - segFake", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFakeInd",990,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInnerSegment",1551,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSeg), -1, 0, 1, 1, 2, 8, "i - 'Int_t' 0 - clIndPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInnerClusInd",1518,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 8, 
"U 'HMdcSeg' - 0 - outerSegment U 'HMdcClus' - 1 - outerClus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFakeFlageAndIndexis",2185,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"U 'HMdcSeg' - 0 - segOFake i - 'Int_t' 0 - indFakeSeg "
"U 'HMdcSeg' - 0 - segOGood i - 'Int_t' 0 - indGoodSeg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToNFittedCounter",1914,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcWeight",1019,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 2, 8, 
"U 'HMdcSeg' - 0 - pSeg F - 'Float_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("markFakes",917,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - cutNMarked", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("markReals",930,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - cutNMarked", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testRestOfWires",1565,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_374_0_63, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdc12Fit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_374_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc12Fit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_374_0_65, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdc12Fit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_374_0_66, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdc12Fit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_374_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_374_0_71, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc12Fit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_374_0_72, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdc12Fit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_374_0_73, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc12Fit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_374_0_74, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdc12Fit::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdc12Fit", 864, G__MdcTrackDDict_374_0_75, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcIdealTracking(void) {
   /* HMdcIdealTracking */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcIdealTracking));
   G__memfunc_setup("HMdcIdealTracking",1646,G__MdcTrackDDict_375_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcIdealTracking), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcIdealTracking",1646,G__MdcTrackDDict_375_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcIdealTracking), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillParallelCategories",2266,G__MdcTrackDDict_375_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setResolutionX",1496,G__MdcTrackDDict_375_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - x0 d - 'Double_t' 0 - x1 "
"d - 'Double_t' 0 - x2 d - 'Double_t' 0 - x3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setResolutionY",1497,G__MdcTrackDDict_375_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - y0 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - y3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setNFiredLayersCuts",1939,G__MdcTrackDDict_375_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - c1 i - 'Int_t' 0 - c2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printStatus",1201,G__MdcTrackDDict_375_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testTrack",949,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'HGeantKine' - 0 - pGeantKine", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHitsSeg",1118,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - segment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSegSlot",1025,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSegSim), -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - segment i - 'Int_t' 1 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHit",716,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - module", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitSlot",1031,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcHitSim), -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - module i - 'Int_t' 1 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTrkCandISeg",1462,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrkCand), -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - segIndex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTrkCandOSeg",1468,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrkCand), -1, 0, 2, 1, 4, 0, 
"U 'HMdcTrkCand' - 0 - fTCand i - 'Int_t' 0 - segIndex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectWires",1264,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l U 'HGeantMdc' - 0 - pGeantMdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWires",854,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'HMdcSegSim' - 0 - pMdcSeg i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWires",854,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'HMdcHitSim' - 0 - pMdcHit i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_375_0_23, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcIdealTracking::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_375_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcIdealTracking::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_375_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcIdealTracking::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_375_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcIdealTracking::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_375_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_375_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcIdealTracking::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_375_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcIdealTracking::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_375_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcIdealTracking::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_375_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcIdealTracking::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcIdealTracking", 1772, G__MdcTrackDDict_375_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackDSet(void) {
   /* HMdcTrackDSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDSet));
   G__memfunc_setup("hMdcTrackFinder",1481,G__MdcTrackDDict_376_0_1, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor), -1, 0, 2, 3, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title", (char*)NULL, (void*) G__func2void( (HReconstructor* (*)(const Char_t*, const Char_t*))(&HMdcTrackDSet::hMdcTrackFinder) ), 0);
   G__memfunc_setup("useThisTrackFinder",1842,G__MdcTrackDDict_376_0_2, 121, -1, -1, 0, 1, 3, 1, 0, "U 'HMdcTrackFinder' - 0 - trFndr", (char*)NULL, (void*) G__func2void( (void (*)(HMdcTrackFinder*))(&HMdcTrackDSet::useThisTrackFinder) ), 0);
   G__memfunc_setup("hMdcClusterToHit",1606,G__MdcTrackDDict_376_0_3, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor), -1, 0, 2, 3, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title", (char*)NULL, (void*) G__func2void( (HReconstructor* (*)(const Char_t*, const Char_t*))(&HMdcTrackDSet::hMdcClusterToHit) ), 0);
   G__memfunc_setup("hMdcClusterToHit",1606,G__MdcTrackDDict_376_0_4, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor), -1, 0, 4, 3, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title "
"i - 'Int_t' 0 - mSeg1 i - 'Int_t' 0 - mSeg2", (char*)NULL, (void*) G__func2void( (HReconstructor* (*)(const Char_t*, const Char_t*, Int_t, Int_t))(&HMdcTrackDSet::hMdcClusterToHit) ), 0);
   G__memfunc_setup("hMdc12Fit",770,G__MdcTrackDDict_376_0_5, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor), -1, 0, 2, 3, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title", (char*)NULL, (void*) G__func2void( (HReconstructor* (*)(const Char_t*, const Char_t*))(&HMdcTrackDSet::hMdc12Fit) ), 0);
   G__memfunc_setup("hMdc12Fit",770,G__MdcTrackDDict_376_0_6, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor), -1, 0, 7, 3, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title "
"i - 'Int_t' 0 - author i - 'Int_t' 0 - version "
"i - 'Int_t' 0 - indep g - 'Bool_t' 0 - nTuple "
"g - 'Bool_t' 0 - prnt", (char*)NULL, (void*) G__func2void( (HReconstructor* (*)(const Char_t*, const Char_t*, Int_t, Int_t, Int_t, Bool_t, Bool_t))(&HMdcTrackDSet::hMdc12Fit) ), 0);
   G__memfunc_setup("setAnotherFit",1344,G__MdcTrackDDict_376_0_7, 121, -1, -1, 0, 1, 3, 1, 0, "U 'HMdc12Fit' - 0 - fit", (char*)NULL, (void*) G__func2void( (void (*)(HMdc12Fit*))(&HMdcTrackDSet::setAnotherFit) ), 0);
   G__memfunc_setup("isCoilOff",894,G__MdcTrackDDict_376_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HMdcTrackDSet::isCoilOff) ), 0);
   G__memfunc_setup("getClFinderType",1513,G__MdcTrackDDict_376_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&HMdcTrackDSet::getClFinderType) ), 0);
   G__memfunc_setup("getTrFnLevels",1317,G__MdcTrackDDict_376_0_10, 121, -1, -1, 0, 4, 3, 1, 0, 
"i - 'Int_t' 1 - l4s1 i - 'Int_t' 1 - l5s1 "
"i - 'Int_t' 1 - l4s2 i - 'Int_t' 1 - l5s2", (char*)NULL, (void*) G__func2void( (void (*)(Int_t&, Int_t&, Int_t&, Int_t&))(&HMdcTrackDSet::getTrFnLevels) ), 0);
   G__memfunc_setup("getNLayersInMod",1493,G__MdcTrackDDict_376_0_11, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, Int_t))(&HMdcTrackDSet::getNLayersInMod) ), 0);
   G__memfunc_setup("isModActive",1112,G__MdcTrackDDict_376_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"h - 'UInt_t' 0 - sec h - 'UInt_t' 0 - mod", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UInt_t, UInt_t))(&HMdcTrackDSet::isModActive) ), 0);
   G__memfunc_setup("isSegActive",1111,G__MdcTrackDDict_376_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"h - 'UInt_t' 0 - sec h - 'UInt_t' 0 - seg", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UInt_t, UInt_t))(&HMdcTrackDSet::isSegActive) ), 0);
   G__memfunc_setup("isSecActive",1107,G__MdcTrackDDict_376_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "h - 'UInt_t' 0 - sec", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UInt_t))(&HMdcTrackDSet::isSecActive) ), 0);
   G__memfunc_setup("getModForSeg1",1239,G__MdcTrackDDict_376_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&HMdcTrackDSet::getModForSeg1) ), 0);
   G__memfunc_setup("getModForSeg2",1240,G__MdcTrackDDict_376_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&HMdcTrackDSet::getModForSeg2) ), 0);
   G__memfunc_setup("getModForSeg",1190,G__MdcTrackDDict_376_0_17, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - sg", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t))(&HMdcTrackDSet::getModForSeg) ), 0);
   G__memfunc_setup("getFitAuthor",1238,G__MdcTrackDDict_376_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&HMdcTrackDSet::getFitAuthor) ), 0);
   G__memfunc_setup("getFitVersion",1353,G__MdcTrackDDict_376_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&HMdcTrackDSet::getFitVersion) ), 0);
   G__memfunc_setup("getFitType",1029,G__MdcTrackDDict_376_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&HMdcTrackDSet::getFitType) ), 0);
   G__memfunc_setup("getUseWireOffset",1643,G__MdcTrackDDict_376_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&HMdcTrackDSet::getUseWireOffset) ), 0);
   G__memfunc_setup("getMixFitCut",1213,G__MdcTrackDDict_376_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&HMdcTrackDSet::getMixFitCut) ), 0);
   G__memfunc_setup("getMixClusCut",1329,G__MdcTrackDDict_376_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&HMdcTrackDSet::getMixClusCut) ), 0);
   G__memfunc_setup("getLevel4",876,G__MdcTrackDDict_376_0_24, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - iseg", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t))(&HMdcTrackDSet::getLevel4) ), 0);
   G__memfunc_setup("getLevel5",877,G__MdcTrackDDict_376_0_25, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - iseg", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t))(&HMdcTrackDSet::getLevel5) ), 0);
   G__memfunc_setup("getGhostRemovingParamSeg2",2510,G__MdcTrackDDict_376_0_26, 99, -1, G__defined_typename("Char_t"), 0, 4, 3, 1, 0, 
"i - 'Int_t' 1 - wlev i - 'Int_t' 1 - wbin "
"i - 'Int_t' 1 - wlay i - 'Int_t' 1 - dWtCut", (char*)NULL, (void*) G__func2void( (Char_t (*)(Int_t&, Int_t&, Int_t&, Int_t&))(&HMdcTrackDSet::getGhostRemovingParamSeg2) ), 0);
   G__memfunc_setup("getGhostRemovingFlagSeg1",2390,G__MdcTrackDDict_376_0_27, 99, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Char_t (*)())(&HMdcTrackDSet::getGhostRemovingFlagSeg1) ), 0);
   G__memfunc_setup("getGhostRemovingFlagSeg2",2391,G__MdcTrackDDict_376_0_28, 99, -1, G__defined_typename("Char_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Char_t (*)())(&HMdcTrackDSet::getGhostRemovingFlagSeg2) ), 0);
   G__memfunc_setup("getProjectPlotSizeSeg1",2209,G__MdcTrackDDict_376_0_29, 121, -1, -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 1 - xb i - 'Int_t' 1 - yb", (char*)NULL, (void*) G__func2void( (void (*)(Int_t&, Int_t&))(&HMdcTrackDSet::getProjectPlotSizeSeg1) ), 0);
   G__memfunc_setup("getProjectPlotSizeSeg2",2210,G__MdcTrackDDict_376_0_30, 121, -1, -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 1 - xb i - 'Int_t' 1 - yb", (char*)NULL, (void*) G__func2void( (void (*)(Int_t&, Int_t&))(&HMdcTrackDSet::getProjectPlotSizeSeg2) ), 0);
   G__memfunc_setup("useFloatLevelSeg1",1675,G__MdcTrackDDict_376_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HMdcTrackDSet::useFloatLevelSeg1) ), 0);
   G__memfunc_setup("useFloatLevelSeg2",1676,G__MdcTrackDDict_376_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HMdcTrackDSet::useFloatLevelSeg2) ), 0);
   G__memfunc_setup("useSegAmpCutSeg1",1542,G__MdcTrackDDict_376_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HMdcTrackDSet::useSegAmpCutSeg1) ), 0);
   G__memfunc_setup("useDriftTimeSeg1",1573,G__MdcTrackDDict_376_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HMdcTrackDSet::useDriftTimeSeg1) ), 0);
   G__memfunc_setup("useDriftTimeSeg2",1574,G__MdcTrackDDict_376_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HMdcTrackDSet::useDriftTimeSeg2) ), 0);
   G__memfunc_setup("getVertexFinderPar",1849,G__MdcTrackDDict_376_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"d - 'Double_t' 1 - d i - 'Int_t' 1 - l "
"i - 'Int_t' 1 - lp", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Double_t&, Int_t&, Int_t&))(&HMdcTrackDSet::getVertexFinderPar) ), 0);
   G__memfunc_setup("findClustVertex",1578,G__MdcTrackDDict_376_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HMdcTrackDSet::findClustVertex) ), 0);
   G__memfunc_setup("getZStartDetector",1762,G__MdcTrackDDict_376_0_38, 100, -1, G__defined_typename("Double_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Double_t (*)())(&HMdcTrackDSet::getZStartDetector) ), 0);
   G__memfunc_setup("getDrTimeProjParSeg1",1939,G__MdcTrackDDict_376_0_39, 121, -1, -1, 0, 4, 3, 1, 0, 
"d - 'Double_t' 1 - uns d - 'Double_t' 1 - cut "
"d - 'Double_t' 1 - ycor D - 'Double_t' 0 - lcor", (char*)NULL, (void*) G__func2void( (void (*)(Double_t&, Double_t&, Double_t&, Double_t*))(&HMdcTrackDSet::getDrTimeProjParSeg1) ), 0);
   G__memfunc_setup("getDrTimeProjParSeg2",1940,G__MdcTrackDDict_376_0_40, 121, -1, -1, 0, 3, 3, 1, 0, 
"d - 'Double_t' 1 - cut d - 'Double_t' 1 - ycor "
"D - 'Double_t' 0 - lcor", (char*)NULL, (void*) G__func2void( (void (*)(Double_t&, Double_t&, Double_t*))(&HMdcTrackDSet::getDrTimeProjParSeg2) ), 0);
   G__memfunc_setup("doMetaMatching",1413,G__MdcTrackDDict_376_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "g - 'Bool_t' 1 - mp", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Bool_t&))(&HMdcTrackDSet::doMetaMatching) ), 0);
   G__memfunc_setup("getDxDyKickCut",1383,G__MdcTrackDDict_376_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'TCutG' - 0 - cutR", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TCutG*))(&HMdcTrackDSet::getDxDyKickCut) ), 0);
   G__memfunc_setup("getCalcInitValueFlag",1982,G__MdcTrackDDict_376_0_43, 98, -1, G__defined_typename("UChar_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (UChar_t (*)())(&HMdcTrackDSet::getCalcInitValueFlag) ), 0);
   G__memfunc_setup("getCalcInitValueCut",1904,G__MdcTrackDDict_376_0_44, 100, -1, G__defined_typename("Double_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - seg", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t))(&HMdcTrackDSet::getCalcInitValueCut) ), 0);
   G__memfunc_setup("useFittedSeg1ParFlag",1946,G__MdcTrackDDict_376_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HMdcTrackDSet::useFittedSeg1ParFlag) ), 0);
   G__memfunc_setup("getUseKickCorFlag",1677,G__MdcTrackDDict_376_0_46, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HMdcTrackDSet::getUseKickCorFlag) ), 0);
   G__memfunc_setup("getFindOffVertTrkFlag",2088,G__MdcTrackDDict_376_0_47, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HMdcTrackDSet::getFindOffVertTrkFlag) ), 0);
   G__memfunc_setup("getNLayersCutOVT",1571,G__MdcTrackDDict_376_0_48, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&HMdcTrackDSet::getNLayersCutOVT) ), 0);
   G__memfunc_setup("getNWiresCutOVT",1469,G__MdcTrackDDict_376_0_49, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&HMdcTrackDSet::getNWiresCutOVT) ), 0);
   G__memfunc_setup("getNCellsCutOVT",1446,G__MdcTrackDDict_376_0_50, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&HMdcTrackDSet::getNCellsCutOVT) ), 0);
   G__memfunc_setup("getMdcTrackFinder",1697,G__MdcTrackDDict_376_0_51, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFinder), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcTrackFinder* (*)())(&HMdcTrackDSet::getMdcTrackFinder) ), 0);
   G__memfunc_setup("clearPTrackFinder",1700,G__MdcTrackDDict_376_0_52, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackDSet::clearPTrackFinder) ), 0);
   G__memfunc_setup("getMdcClusterToHit",1822,G__MdcTrackDDict_376_0_53, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusterToHit), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcClusterToHit* (*)())(&HMdcTrackDSet::getMdcClusterToHit) ), 0);
   G__memfunc_setup("clearPClusterToHit",1825,G__MdcTrackDDict_376_0_54, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackDSet::clearPClusterToHit) ), 0);
   G__memfunc_setup("getMdc12Fit",986,G__MdcTrackDDict_376_0_55, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdc12Fit), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdc12Fit* (*)())(&HMdcTrackDSet::getMdc12Fit) ), 0);
   G__memfunc_setup("clearP12Fit",989,G__MdcTrackDDict_376_0_56, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackDSet::clearP12Fit) ), 0);
   G__memfunc_setup("fNTuple",702,G__MdcTrackDDict_376_0_57, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HMdcTrackDSet::fNTuple) ), 0);
   G__memfunc_setup("fPrint",627,G__MdcTrackDDict_376_0_58, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HMdcTrackDSet::fPrint) ), 0);
   G__memfunc_setup("setCoilStatus",1367,G__MdcTrackDDict_376_0_59, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - stat", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcTrackDSet::setCoilStatus) ), 0);
   G__memfunc_setup("setClFinderType",1525,G__MdcTrackDDict_376_0_60, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HMdcTrackDSet::setClFinderType) ), 0);
   G__memfunc_setup("setTrFnNLayers",1412,G__MdcTrackDDict_376_0_61, 121, -1, -1, 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - nl", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t, Int_t))(&HMdcTrackDSet::setTrFnNLayers) ), 0);
   G__memfunc_setup("setTrackFinderLevel",1937,G__MdcTrackDDict_376_0_62, 121, -1, -1, 0, 4, 3, 1, 0, 
"i - 'Int_t' 0 - l4s1 i - 'Int_t' 0 - l5s1 "
"i - 'Int_t' 0 - l4s2 i - 'Int_t' 0 - l5s2", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t, Int_t, Int_t))(&HMdcTrackDSet::setTrackFinderLevel) ), 0);
   G__memfunc_setup("setTrFnSegLevel",1501,G__MdcTrackDDict_376_0_63, 121, -1, -1, 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - seg i - 'Int_t' 0 - l4 "
"i - 'Int_t' 0 - l5", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t, Int_t))(&HMdcTrackDSet::setTrFnSegLevel) ), 0);
   G__memfunc_setup("setRemoveGhostsSeg1",1922,G__MdcTrackDDict_376_0_64, 121, -1, -1, 0, 1, 3, 1, 0, "c - 'Char_t' 0 '1' fl", (char*)NULL, (void*) G__func2void( (void (*)(Char_t))(&HMdcTrackDSet::setRemoveGhostsSeg1) ), 0);
   G__memfunc_setup("writeFakesToTreeSeg1",1976,G__MdcTrackDDict_376_0_65, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackDSet::writeFakesToTreeSeg1) ), 0);
   G__memfunc_setup("setRemoveGhostsSeg2",1923,G__MdcTrackDDict_376_0_66, 121, -1, -1, 0, 1, 3, 1, 0, "c - 'Char_t' 0 '1' fl", (char*)NULL, (void*) G__func2void( (void (*)(Char_t))(&HMdcTrackDSet::setRemoveGhostsSeg2) ), 0);
   G__memfunc_setup("writeFakesToTreeSeg2",1977,G__MdcTrackDDict_376_0_67, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackDSet::writeFakesToTreeSeg2) ), 0);
   G__memfunc_setup("setGhostRemovingParamSeg2",2522,G__MdcTrackDDict_376_0_68, 121, -1, -1, 0, 4, 3, 1, 0, 
"i - 'Int_t' 0 - wlev i - 'Int_t' 0 - wbin "
"i - 'Int_t' 0 - wlay i - 'Int_t' 0 - dWtCut", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t, Int_t, Int_t))(&HMdcTrackDSet::setGhostRemovingParamSeg2) ), 0);
   G__memfunc_setup("setProjectPlotSizeSeg1",2221,G__MdcTrackDDict_376_0_69, 121, -1, -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - xb i - 'Int_t' 0 - yb", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t))(&HMdcTrackDSet::setProjectPlotSizeSeg1) ), 0);
   G__memfunc_setup("setProjectPlotSizeSeg2",2222,G__MdcTrackDDict_376_0_70, 121, -1, -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - xb i - 'Int_t' 0 - yb", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t))(&HMdcTrackDSet::setProjectPlotSizeSeg2) ), 0);
   G__memfunc_setup("setFloatLevelSeg1",1674,G__MdcTrackDDict_376_0_71, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcTrackDSet::setFloatLevelSeg1) ), 0);
   G__memfunc_setup("setFloatLevelSeg2",1675,G__MdcTrackDDict_376_0_72, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcTrackDSet::setFloatLevelSeg2) ), 0);
   G__memfunc_setup("setSegAmpCutSeg1",1541,G__MdcTrackDDict_376_0_73, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcTrackDSet::setSegAmpCutSeg1) ), 0);
   G__memfunc_setup("setMergeClusSeg1",1571,G__MdcTrackDDict_376_0_74, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackDSet::setMergeClusSeg1) ), 0);
   G__memfunc_setup("setMergeClusSeg2",1572,G__MdcTrackDDict_376_0_75, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackDSet::setMergeClusSeg2) ), 0);
   G__memfunc_setup("setUseDriftTimeSeg1",1873,G__MdcTrackDDict_376_0_76, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcTrackDSet::setUseDriftTimeSeg1) ), 0);
   G__memfunc_setup("setUseDriftTimeSeg2",1874,G__MdcTrackDDict_376_0_77, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcTrackDSet::setUseDriftTimeSeg2) ), 0);
   G__memfunc_setup("setVertexFinderFlag",1948,G__MdcTrackDDict_376_0_78, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcTrackDSet::setVertexFinderFlag) ), 0);
   G__memfunc_setup("setVertexFinderPar",1861,G__MdcTrackDDict_376_0_79, 121, -1, -1, 0, 3, 3, 1, 0, 
"d - 'Double_t' 0 - dc i - 'Int_t' 0 - lv "
"i - 'Int_t' 0 - lp", (char*)NULL, (void*) G__func2void( (void (*)(Double_t, Int_t, Int_t))(&HMdcTrackDSet::setVertexFinderPar) ), 0);
   G__memfunc_setup("setZStarDetector",1658,G__MdcTrackDDict_376_0_80, 121, -1, -1, 0, 1, 3, 1, 0, "d - 'Double_t' 0 - zs", (char*)NULL, (void*) G__func2void( (void (*)(Double_t))(&HMdcTrackDSet::setZStarDetector) ), 0);
   G__memfunc_setup("setMetaMatchFlag",1594,G__MdcTrackDDict_376_0_81, 121, -1, -1, 0, 2, 3, 1, 0, 
"g - 'Bool_t' 0 - mf g - 'Bool_t' 0 - mp", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t, Bool_t))(&HMdcTrackDSet::setMetaMatchFlag) ), 0);
   G__memfunc_setup("setDxDyKickCut",1395,G__MdcTrackDDict_376_0_82, 121, -1, -1, 0, 1, 3, 1, 0, "U 'TCutG' - 0 - cutR", (char*)NULL, (void*) G__func2void( (void (*)(TCutG*))(&HMdcTrackDSet::setDxDyKickCut) ), 0);
   G__memfunc_setup("setUseKickCorFlag",1689,G__MdcTrackDDict_376_0_83, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcTrackDSet::setUseKickCorFlag) ), 0);
   G__memfunc_setup("setDrTimeProjParamSeg1",2157,G__MdcTrackDDict_376_0_84, 121, -1, -1, 0, 2, 3, 1, 0, 
"d - 'Double_t' 0 - cUns d - 'Double_t' 0 - cut", (char*)NULL, (void*) G__func2void( (void (*)(Double_t, Double_t))(&HMdcTrackDSet::setDrTimeProjParamSeg1) ), 0);
   G__memfunc_setup("setDrTimeCutYCorrSeg1",2044,G__MdcTrackDDict_376_0_85, 121, -1, -1, 0, 1, 3, 1, 0, "d - 'Double_t' 0 - corr", (char*)NULL, (void*) G__func2void( (void (*)(Double_t))(&HMdcTrackDSet::setDrTimeCutYCorrSeg1) ), 0);
   G__memfunc_setup("setDrTimeCutLCorrSeg1",2031,G__MdcTrackDDict_376_0_86, 121, -1, -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - m D - 'Double_t' 0 - corr", "corr array for 6 layers", (void*) G__func2void( (void (*)(Int_t, Double_t*))(&HMdcTrackDSet::setDrTimeCutLCorrSeg1) ), 0);
   G__memfunc_setup("setDrTimeProjParamSeg2",2158,G__MdcTrackDDict_376_0_87, 121, -1, -1, 0, 1, 3, 1, 0, "d - 'Double_t' 0 - cut", (char*)NULL, (void*) G__func2void( (void (*)(Double_t))(&HMdcTrackDSet::setDrTimeProjParamSeg2) ), 0);
   G__memfunc_setup("setDrTimeCutYCorrSeg2",2045,G__MdcTrackDDict_376_0_88, 121, -1, -1, 0, 1, 3, 1, 0, "d - 'Double_t' 0 - corr", (char*)NULL, (void*) G__func2void( (void (*)(Double_t))(&HMdcTrackDSet::setDrTimeCutYCorrSeg2) ), 0);
   G__memfunc_setup("setDrTimeCutLCorrSeg2",2032,G__MdcTrackDDict_376_0_89, 121, -1, -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - m D - 'Double_t' 0 - corr", "corr array for 6 layers", (void*) G__func2void( (void (*)(Int_t, Double_t*))(&HMdcTrackDSet::setDrTimeCutLCorrSeg2) ), 0);
   G__memfunc_setup("setFitAuthor",1250,G__MdcTrackDDict_376_0_90, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - author", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HMdcTrackDSet::setFitAuthor) ), 0);
   G__memfunc_setup("setFitVersion",1365,G__MdcTrackDDict_376_0_91, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - ver", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HMdcTrackDSet::setFitVersion) ), 0);
   G__memfunc_setup("setFitType",1041,G__MdcTrackDDict_376_0_92, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HMdcTrackDSet::setFitType) ), 0);
   G__memfunc_setup("setFitOutput",1280,G__MdcTrackDDict_376_0_93, 121, -1, -1, 0, 2, 3, 1, 0, 
"g - 'Bool_t' 0 - nTuple g - 'Bool_t' 0 - prnt", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t, Bool_t))(&HMdcTrackDSet::setFitOutput) ), 0);
   G__memfunc_setup("setMixFitCut",1225,G__MdcTrackDDict_376_0_94, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - cut", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HMdcTrackDSet::setMixFitCut) ), 0);
   G__memfunc_setup("setMixClusCut",1341,G__MdcTrackDDict_376_0_95, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - cut", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HMdcTrackDSet::setMixClusCut) ), 0);
   G__memfunc_setup("setMixCuts",1049,G__MdcTrackDDict_376_0_96, 121, -1, -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - cutFit i - 'Int_t' 0 - cutClus", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t))(&HMdcTrackDSet::setMixCuts) ), 0);
   G__memfunc_setup("setTrackFinder",1433,G__MdcTrackDDict_376_0_97, 121, -1, -1, 0, 1, 3, 1, 0, "U 'HMdcTrackFinder' - 0 - tr", (char*)NULL, (void*) G__func2void( (void (*)(HMdcTrackFinder*))(&HMdcTrackDSet::setTrackFinder) ), 0);
   G__memfunc_setup("setClusterToHit",1558,G__MdcTrackDDict_376_0_98, 121, -1, -1, 0, 1, 3, 1, 0, "U 'HMdcClusterToHit' - 0 - cl", (char*)NULL, (void*) G__func2void( (void (*)(HMdcClusterToHit*))(&HMdcTrackDSet::setClusterToHit) ), 0);
   G__memfunc_setup("set12Fit",722,G__MdcTrackDDict_376_0_99, 121, -1, -1, 0, 1, 3, 1, 0, "U 'HMdc12Fit' - 0 - fit", (char*)NULL, (void*) G__func2void( (void (*)(HMdc12Fit*))(&HMdcTrackDSet::set12Fit) ), 0);
   G__memfunc_setup("setDxDyCut",1009,G__MdcTrackDDict_376_0_100, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcTrackDSet::setDxDyCut) ), 0);
   G__memfunc_setup("setCalcInitialValue",1926,G__MdcTrackDDict_376_0_101, 121, -1, -1, 0, 1, 3, 1, 0, "b - 'UChar_t' 0 '1' fl", (char*)NULL, (void*) G__func2void( (void (*)(UChar_t))(&HMdcTrackDSet::setCalcInitialValue) ), 0);
   G__memfunc_setup("setCalcInitialValueSeg1",2262,G__MdcTrackDDict_376_0_102, 121, -1, -1, 0, 1, 3, 1, 0, "d - 'Double_t' 0 - c", (char*)NULL, (void*) G__func2void( (void (*)(Double_t))(&HMdcTrackDSet::setCalcInitialValueSeg1) ), 0);
   G__memfunc_setup("setCalcInitialValueSeg2",2263,G__MdcTrackDDict_376_0_103, 121, -1, -1, 0, 1, 3, 1, 0, "d - 'Double_t' 0 - c", (char*)NULL, (void*) G__func2void( (void (*)(Double_t))(&HMdcTrackDSet::setCalcInitialValueSeg2) ), 0);
   G__memfunc_setup("setUseFittedSeg1ParFlag",2246,G__MdcTrackDDict_376_0_104, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcTrackDSet::setUseFittedSeg1ParFlag) ), 0);
   G__memfunc_setup("setFindOffVertTrkFlag",2100,G__MdcTrackDDict_376_0_105, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcTrackDSet::setFindOffVertTrkFlag) ), 0);
   G__memfunc_setup("setNLayersCutOVT",1583,G__MdcTrackDDict_376_0_106, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HMdcTrackDSet::setNLayersCutOVT) ), 0);
   G__memfunc_setup("setNWiresCutOVT",1481,G__MdcTrackDDict_376_0_107, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HMdcTrackDSet::setNWiresCutOVT) ), 0);
   G__memfunc_setup("setNCellsCutOVT",1458,G__MdcTrackDDict_376_0_108, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HMdcTrackDSet::setNCellsCutOVT) ), 0);
   G__memfunc_setup("setTrackParam",1330,G__MdcTrackDDict_376_0_109, 121, -1, -1, 0, 1, 3, 1, 0, "u 'TString' - 0 - beamtime", (char*)NULL, (void*) G__func2void( (void (*)(TString))(&HMdcTrackDSet::setTrackParam) ), 0);
   G__memfunc_setup("printStatus",1201,G__MdcTrackDDict_376_0_110, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackDSet::printStatus) ), 0);
   G__memfunc_setup("printMdc34ClFinderPar",2002,G__MdcTrackDDict_376_0_111, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackDSet::printMdc34ClFinderPar) ), 0);
   G__memfunc_setup("setMdcTrackFinder",1709,G__MdcTrackDDict_376_0_112, 121, -1, -1, 0, 2, 3, 1, 0, 
"g - 'Bool_t' 0 - coilSt i - 'Int_t' 0 - type", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t, Int_t))(&HMdcTrackDSet::setMdcTrackFinder) ), 0);
   G__memfunc_setup("setTrFnLevel",1214,G__MdcTrackDDict_376_0_113, 121, -1, -1, 0, 4, 3, 1, 0, 
"i - 'Int_t' 0 - l4s1 i - 'Int_t' 0 - l5s1 "
"i - 'Int_t' 0 - l4s2 i - 'Int_t' 0 - l5s2", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t, Int_t, Int_t))(&HMdcTrackDSet::setTrFnLevel) ), 0);
   G__memfunc_setup("setTrFnNLayers",1412,G__MdcTrackDDict_376_0_114, 121, -1, -1, 0, 1, 3, 1, 0, "I - 'Int_t' 10 - lst", (char*)NULL, (void*) G__func2void( (void (*)(const Int_t*))(&HMdcTrackDSet::setTrFnNLayers) ), 0);
   G__memfunc_setup("setMdcClusterToHit",1834,G__MdcTrackDDict_376_0_115, 121, -1, -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - mSeg1 i - 'Int_t' 0 - mSeg2", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t))(&HMdcTrackDSet::setMdcClusterToHit) ), 0);
   G__memfunc_setup("setMdc12Fit",998,G__MdcTrackDDict_376_0_116, 121, -1, -1, 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - author i - 'Int_t' 0 - version "
"i - 'Int_t' 0 - indep g - 'Bool_t' 0 - nTuple "
"g - 'Bool_t' 0 - prnt", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t, Int_t, Bool_t, Bool_t))(&HMdcTrackDSet::setMdc12Fit) ), 0);
   G__memfunc_setup("setUseWireOffset",1655,G__MdcTrackDDict_376_0_117, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - off", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcTrackDSet::setUseWireOffset) ), 0);
   G__memfunc_setup("hMdcIdealTracking",1678,G__MdcTrackDDict_376_0_118, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HReconstructor), -1, 0, 3, 3, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title "
"g - 'Bool_t' 0 'kFALSE' fillParallel", (char*)NULL, (void*) G__func2void( (HReconstructor* (*)(const Char_t*, const Char_t*, Bool_t))(&HMdcTrackDSet::hMdcIdealTracking) ), 0);
   G__memfunc_setup("getMdcIdealTracking",1894,G__MdcTrackDDict_376_0_119, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcIdealTracking), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcIdealTracking* (*)())(&HMdcTrackDSet::getMdcIdealTracking) ), 0);
   G__memfunc_setup("exitSetup",971,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 3, 2, 0, 
"C - 'Char_t' 10 - funNm i - 'Int_t' 0 - npar "
"C - 'Char_t' 10 - use i - 'Int_t' 0 - inst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("exitSetup",971,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 3, 2, 0, 
"C - 'Char_t' 10 - funNm C - 'Char_t' 10 - className", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefParam",1100,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 3, 2, 0, "", "default parameters", (void*) NULL, 0);
   G__memfunc_setup("setDefParAu15Au",1360,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 3, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackParamAug11",1713,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 3, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackParamApr12",1720,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 3, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackParamJul14",1730,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 3, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initDxDyCutAug11",1496,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 3, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initDxDyCutApr12",1503,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 3, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTrackDSet",1217,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDSet), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_376_0_130, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackDSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_376_0_131, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackDSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_376_0_132, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackDSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_376_0_133, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackDSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__MdcTrackDDict_376_0_134, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MdcTrackDDict_376_0_135, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MdcTrackDDict_376_0_136, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_376_0_137, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_376_0_138, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackDSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_376_0_139, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackDSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_376_0_140, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackDSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_376_0_141, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackDSet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackDSet", 1217, G__MdcTrackDDict_376_0_142, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDSet), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackDSet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_376_0_143, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackDSet), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackDSet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcHitSegFiller(void) {
   /* HMdcHitSegFiller */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcHitSegFiller));
   G__memfunc_setup("HMdcHitSegFiller",1534,G__MdcTrackDDict_378_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcHitSegFiller), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_378_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitParam",1120,G__MdcTrackDDict_378_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitParamForSecondSec",2302,G__MdcTrackDDict_378_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSegPar",981,G__MdcTrackDDict_378_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVector' - 10 '0' targ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlane1",865,G__MdcTrackDDict_378_0_6, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlane2",866,G__MdcTrackDDict_378_0_7, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX1",457,G__MdcTrackDDict_378_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY1",458,G__MdcTrackDDict_378_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ1",459,G__MdcTrackDDict_378_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX2",458,G__MdcTrackDDict_378_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ2",460,G__MdcTrackDDict_378_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSegParam",1116,G__MdcTrackDDict_378_0_13, 121, -1, -1, 0, 6, 1, 1, 0, 
"U 'HMdcPlane' - 0 - pl1 U 'HMdcPlane' - 0 - pl2 "
"d - 'Double_t' 0 - zm d - 'Double_t' 0 - r0 "
"d - 'Double_t' 0 - th d - 'Double_t' 0 - ph", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusParam",1236,G__MdcTrackDDict_378_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcClus' - 0 - clus g - 'Bool_t' 0 - isCoilOff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZm",519,G__MdcTrackDDict_378_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getR",402,G__MdcTrackDDict_378_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__MdcTrackDDict_378_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__MdcTrackDDict_378_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("propogErrToSeg",1442,G__MdcTrackDDict_378_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HSymMat4' - 1 - errMatOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMdcSeg",986,G__MdcTrackDDict_378_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcSeg' - 0 - mdcSeg U 'HGeomVector' - 10 - targ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMdcSegByClus",1580,G__MdcTrackDDict_378_0_21, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HMdcSeg' - 0 - mdcSeg U 'HGeomVector' - 10 - targ "
"U 'HMdcTrackParam' - 0 '0' trPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMdcHit",992,G__MdcTrackDDict_378_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcSizesCellsMod' - 0 - fSCMod U 'HMdcHit' - 0 - mdcHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMdcHitByClus",1586,G__MdcTrackDDict_378_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcSizesCellsMod' - 0 - fSCMod U 'HMdcHit' - 0 - mdcHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("propogErrToFit",1446,G__MdcTrackDDict_378_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HSymMat4' - 1 - errMatIn u 'HSymMat4' - 1 - errMatOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDerMatrToSeg",1572,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDerMatrClus1ToSeg",2028,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDerMatrToFit",1576,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcFitPar",985,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillSegPar",1001,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HMdcSeg' - 0 - mdcSeg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_378_0_30, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcHitSegFiller::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_378_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcHitSegFiller::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_378_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcHitSegFiller::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_378_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcHitSegFiller::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_378_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_378_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcHitSegFiller::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_378_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcHitSegFiller::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_378_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcHitSegFiller::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_378_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcHitSegFiller::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcHitSegFiller", 1534, G__MdcTrackDDict_378_0_42, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcHitSegFiller), -1, 0, 1, 1, 1, 0, "u 'HMdcHitSegFiller' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcHitSegFiller", 1660, G__MdcTrackDDict_378_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_378_0_44, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcHitSegFiller), -1, 1, 1, 1, 1, 0, "u 'HMdcHitSegFiller' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcClusInf(void) {
   /* HMdcClusInf */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInf));
   G__memfunc_setup("HMdcClusInf",1040,G__MdcTrackDDict_381_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInf), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_381_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsFitted",1128,G__MdcTrackDDict_381_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsNotFitted",1433,G__MdcTrackDDict_381_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitStat",1035,G__MdcTrackDDict_381_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 10 - st", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLevelClFinding",1714,G__MdcTrackDDict_381_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 10 - lv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNModInCl",1056,G__MdcTrackDDict_381_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 10 - nm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNModInFit",1172,G__MdcTrackDDict_381_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 10 - nm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusSize",1150,G__MdcTrackDDict_381_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 10 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNMergClust",1328,G__MdcTrackDDict_381_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 10 - nmc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNLayers",1034,G__MdcTrackDDict_381_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 10 - nl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNLayersFitted",1642,G__MdcTrackDDict_381_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 10 - nlf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNDrTimes",1106,G__MdcTrackDDict_381_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 10 - ndt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNDrTimesFitted",1714,G__MdcTrackDDict_381_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 10 - nwf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusIndex",1243,G__MdcTrackDDict_381_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 10 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusFitIndex",1534,G__MdcTrackDDict_381_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 10 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigma1",878,G__MdcTrackDDict_381_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigma2",879,G__MdcTrackDDict_381_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAlpha",818,G__MdcTrackDDict_381_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - al", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShape",829,G__MdcTrackDDict_381_0_20, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 - s1 f - 'Float_t' 10 - s2 "
"f - 'Float_t' 10 - al", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setdedx",753,G__MdcTrackDDict_381_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dedxval", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmadedx",1250,G__MdcTrackDDict_381_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNWirededx",1238,G__MdcTrackDDict_381_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - nw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNWireCutdedx",1538,G__MdcTrackDDict_381_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - nw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYHit",802,G__MdcTrackDDict_381_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYClus",916,G__MdcTrackDDict_381_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getdedx",741,G__MdcTrackDDict_381_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmadedx",1238,G__MdcTrackDDict_381_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWirededx",1226,G__MdcTrackDDict_381_0_29, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWireCutdedx",1526,G__MdcTrackDDict_381_0_30, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitStat",1023,G__MdcTrackDDict_381_0_31, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLevelClFinding",1702,G__MdcTrackDDict_381_0_32, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNModInCl",1044,G__MdcTrackDDict_381_0_33, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNModInFit",1160,G__MdcTrackDDict_381_0_34, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusSize",1138,G__MdcTrackDDict_381_0_35, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNMergClust",1316,G__MdcTrackDDict_381_0_36, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayers",1022,G__MdcTrackDDict_381_0_37, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayersFitted",1630,G__MdcTrackDDict_381_0_38, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDrTimes",1094,G__MdcTrackDDict_381_0_39, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDrTimesFitted",1702,G__MdcTrackDDict_381_0_40, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusIndex",1231,G__MdcTrackDDict_381_0_41, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusFitIndex",1522,G__MdcTrackDDict_381_0_42, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigma1",866,G__MdcTrackDDict_381_0_43, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigma2",867,G__MdcTrackDDict_381_0_44, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlpha",806,G__MdcTrackDDict_381_0_45, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShape",817,G__MdcTrackDDict_381_0_46, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 1 - s1 f - 'Float_t' 1 - s2 "
"f - 'Float_t' 1 - al", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRatio",831,G__MdcTrackDDict_381_0_47, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isClParEqual",1190,G__MdcTrackDDict_381_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcClusInf' - 0 - cf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXHit",701,G__MdcTrackDDict_381_0_49, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYHit",702,G__MdcTrackDDict_381_0_50, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXClus",815,G__MdcTrackDDict_381_0_51, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYClus",816,G__MdcTrackDDict_381_0_52, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_381_0_53, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_381_0_54, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcClusInf::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_381_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusInf::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_381_0_56, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcClusInf::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_381_0_57, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcClusInf::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_381_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_381_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusInf::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_381_0_63, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusInf::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_381_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusInf::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_381_0_65, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusInf::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcClusInf", 1040, G__MdcTrackDDict_381_0_66, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInf), -1, 0, 1, 1, 1, 0, "u 'HMdcClusInf' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcClusInf", 1166, G__MdcTrackDDict_381_0_67, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_381_0_68, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInf), -1, 1, 1, 1, 1, 0, "u 'HMdcClusInf' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcClusFit(void) {
   /* HMdcClusFit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFit));
   G__memfunc_setup("HMdcClusFit",1046,G__MdcTrackDDict_748_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_748_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__MdcTrackDDict_748_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"c - 'Char_t' 0 - sc c - 'Char_t' 0 - sg "
"c - 'Char_t' 0 - md", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSec",615,G__MdcTrackDDict_748_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - sc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIOSeg",771,G__MdcTrackDDict_748_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - sg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMod",620,G__MdcTrackDDict_748_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitAuthor",1250,G__MdcTrackDDict_748_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitVersion",1365,G__MdcTrackDDict_748_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistTimeVer",1436,G__MdcTrackDDict_748_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitType",1041,G__MdcTrackDDict_748_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNParam",907,G__MdcTrackDDict_748_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFunMin",921,G__MdcTrackDDict_748_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumOfWires",1339,G__MdcTrackDDict_748_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumOfLayers",1441,G__MdcTrackDDict_748_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX1",469,G__MdcTrackDDict_748_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY1",470,G__MdcTrackDDict_748_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ1",471,G__MdcTrackDDict_748_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX2",470,G__MdcTrackDDict_748_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY2",471,G__MdcTrackDDict_748_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ2",472,G__MdcTrackDDict_748_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumIter",1040,G__MdcTrackDDict_748_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFirstWireFitInd",1833,G__MdcTrackDDict_748_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLastWireFitInd",1717,G__MdcTrackDDict_748_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClustCatIndex",1639,G__MdcTrackDDict_748_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExitFlag",1120,G__MdcTrackDDict_748_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaChi2",1155,G__MdcTrackDDict_748_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitStatus",1267,G__MdcTrackDDict_748_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - stat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeOff",1014,G__MdcTrackDDict_748_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - tos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setErrors",969,G__MdcTrackDDict_748_0_29, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - x1e f - 'Float_t' 0 - y1e "
"f - 'Float_t' 0 - x2e f - 'Float_t' 0 - y2e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSec",603,G__MdcTrackDDict_748_0_30, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIOSeg",759,G__MdcTrackDDict_748_0_31, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMod",608,G__MdcTrackDDict_748_0_32, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitAuthor",1238,G__MdcTrackDDict_748_0_33, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitVersion",1353,G__MdcTrackDDict_748_0_34, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistTimeVer",1424,G__MdcTrackDDict_748_0_35, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitType",1029,G__MdcTrackDDict_748_0_36, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNParam",895,G__MdcTrackDDict_748_0_37, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFunMin",909,G__MdcTrackDDict_748_0_38, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeOff",1002,G__MdcTrackDDict_748_0_39, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeOffset",1334,G__MdcTrackDDict_748_0_40, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeOffsetMdc1",1659,G__MdcTrackDDict_748_0_41, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeOffsetMdc2",1660,G__MdcTrackDDict_748_0_42, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeOffsetMdc3",1661,G__MdcTrackDDict_748_0_43, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeOffsetMdc4",1662,G__MdcTrackDDict_748_0_44, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumOfWires",1327,G__MdcTrackDDict_748_0_45, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTotNumOfWires",1638,G__MdcTrackDDict_748_0_46, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumOfLayers",1429,G__MdcTrackDDict_748_0_47, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX1",457,G__MdcTrackDDict_748_0_48, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY1",458,G__MdcTrackDDict_748_0_49, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ1",459,G__MdcTrackDDict_748_0_50, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX2",458,G__MdcTrackDDict_748_0_51, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY2",459,G__MdcTrackDDict_748_0_52, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ2",460,G__MdcTrackDDict_748_0_53, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX1err",786,G__MdcTrackDDict_748_0_54, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY1err",787,G__MdcTrackDDict_748_0_55, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX2err",787,G__MdcTrackDDict_748_0_56, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY2err",788,G__MdcTrackDDict_748_0_57, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumIter",1028,G__MdcTrackDDict_748_0_58, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndf",705,G__MdcTrackDDict_748_0_59, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndl",711,G__MdcTrackDDict_748_0_60, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstWireFitInd",1821,G__MdcTrackDDict_748_0_61, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastWireFitInd",1705,G__MdcTrackDDict_748_0_62, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClustCatIndex",1627,G__MdcTrackDDict_748_0_63, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__MdcTrackDDict_748_0_64, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExitFlag",1108,G__MdcTrackDDict_748_0_65, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaChi2",1143,G__MdcTrackDDict_748_0_66, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitStatus",1255,G__MdcTrackDDict_748_0_67, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2",646,G__MdcTrackDDict_748_0_68, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndexis",1044,G__MdcTrackDDict_748_0_69, 121, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 1 - indexf i - 'Int_t' 1 - indexl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__MdcTrackDDict_748_0_70, 121, -1, -1, 0, 3, 1, 1, 8, 
"i - 'Int_t' 1 - sc i - 'Int_t' 1 - sg "
"i - 'Int_t' 1 - md", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__MdcTrackDDict_748_0_71, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextIndex",1239,G__MdcTrackDDict_748_0_72, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcRZtoLineXY",1371,G__MdcTrackDDict_748_0_73, 121, -1, -1, 0, 10, 1, 1, 8, 
"f - 'Float_t' 1 - zm f - 'Float_t' 1 - r0 "
"f - 'Float_t' 0 - x1 f - 'Float_t' 0 - y1 "
"f - 'Float_t' 0 - z1 f - 'Float_t' 0 - x2 "
"f - 'Float_t' 0 - y2 f - 'Float_t' 0 - z2 "
"f - 'Float_t' 0 '0.' xBeam f - 'Float_t' 0 '0.' yBeam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRZmin",816,G__MdcTrackDDict_748_0_74, 121, -1, -1, 0, 4, 1, 1, 8, 
"f - 'Float_t' 1 - zm f - 'Float_t' 1 - r0 "
"f - 'Float_t' 0 '0.' xBm f - 'Float_t' 0 '0.' yBm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFakeFlag",1085,G__MdcTrackDDict_748_0_75, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetFakeFlag",1300,G__MdcTrackDDict_748_0_76, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFake",595,G__MdcTrackDDict_748_0_77, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_748_0_78, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("isGeant",715,G__MdcTrackDDict_748_0_79, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_748_0_80, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcClusFit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_748_0_81, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusFit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_748_0_82, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcClusFit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_748_0_83, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcClusFit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_748_0_87, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_748_0_88, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusFit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_748_0_89, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusFit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_748_0_90, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusFit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_748_0_91, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusFit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcClusFit", 1046, G__MdcTrackDDict_748_0_92, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFit), -1, 0, 1, 1, 1, 0, "u 'HMdcClusFit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcClusFit", 1172, G__MdcTrackDDict_748_0_93, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_748_0_94, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFit), -1, 1, 1, 1, 1, 0, "u 'HMdcClusFit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcWireData(void) {
   /* HMdcWireData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData));
   G__memfunc_setup("HMdcWireData",1133,G__MdcTrackDDict_749_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGradP",794,G__MdcTrackDDict_749_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - gr U 'TMatrixT<double>' 'TMatrixD' 0 - gr2 "
"U 'TMatrixT<double>' 'TMatrixD' 0 - mH", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__MdcTrackDDict_749_0_3, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"i - 'Int_t' 0 - it f - 'Float_t' 0 - t "
"i - 'Int_t' 0 '0' si", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__MdcTrackDDict_749_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'HMdcCal1' - 0 - cal1 i - 'Int_t' 0 - it "
"g - 'Bool_t' 0 - isGeant i - 'Int_t' 0 '0' si", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellsLists",1358,G__MdcTrackDDict_749_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcList24GroupCells' - 0 - ils U 'HMdcList24GroupCells' - 0 - ols", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNegTdcTimeTo0",1539,G__MdcTrackDDict_749_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSignalTimeOffset",1952,G__MdcTrackDDict_749_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - offset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWeightTo1or0",1465,G__MdcTrackDDict_749_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - maxChi2 d - 'Double_t' 0 - minWeight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWeightEq1",1179,G__MdcTrackDDict_749_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWeightEq0",1178,G__MdcTrackDDict_749_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWeightAndWtNorm",1838,G__MdcTrackDDict_749_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - wt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitStatus",1269,G__MdcTrackDDict_749_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - st", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setErrTdcTime",1311,G__MdcTrackDDict_749_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSequentialIndex",1887,G__MdcTrackDDict_749_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUnitWeight",1364,G__MdcTrackDDict_749_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSizesCellsLayer",1866,G__MdcTrackDDict_749_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcSizesCellsLayer' - 0 - fscl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDriftTimePar",1527,G__MdcTrackDDict_749_0_17, 121, -1, -1, 0, 1, 3, 1, 0, "U 'HMdcDriftTimePar' - 0 - par", (char*)NULL, (void*) G__func2void( (void (*)(HMdcDriftTimePar*))(&HMdcWireData::setDriftTimePar) ), 0);
   G__memfunc_setup("getDriftTimePar",1515,G__MdcTrackDDict_749_0_18, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcDriftTimePar* (*)())(&HMdcWireData::getDriftTimePar) ), 0);
   G__memfunc_setup("excludeWire",1153,G__MdcTrackDDict_749_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__MdcTrackDDict_749_0_20, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"i - 'Int_t' 1 - it", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcTrackDDict_749_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__MdcTrackDDict_749_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModIndex",1112,G__MdcTrackDDict_749_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayer",829,G__MdcTrackDDict_749_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__MdcTrackDDict_749_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeIndx",1122,G__MdcTrackDDict_749_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdcTimeCal1",1323,G__MdcTrackDDict_749_0_27, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSignalTimeOffset",1940,G__MdcTrackDDict_749_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdcTime",1002,G__MdcTrackDDict_749_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrTdcTime",1299,G__MdcTrackDDict_749_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDrTime",901,G__MdcTrackDDict_749_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDev",607,G__MdcTrackDDict_749_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2",646,G__MdcTrackDDict_749_0_33, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistance",1131,G__MdcTrackDDict_749_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistanceSign",1532,G__MdcTrackDDict_749_0_35, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlpha",806,G__MdcTrackDDict_749_0_36, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInCell",787,G__MdcTrackDDict_749_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWeight",936,G__MdcTrackDDict_749_0_38, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitStatus",1257,G__MdcTrackDDict_749_0_39, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOneDErrTdcTime2",1707,G__MdcTrackDDict_749_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWtNorm",935,G__MdcTrackDDict_749_0_41, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDrTimeDer",1184,G__MdcTrackDDict_749_0_42, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSequentialIndex",1875,G__MdcTrackDDict_749_0_43, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrackNum",1620,G__MdcTrackDDict_749_0_44, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsWireUsed",1316,G__MdcTrackDDict_749_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSCLayer",979,G__MdcTrackDDict_749_0_46, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsLayer), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAnalytDeriv",1443,G__MdcTrackDDict_749_0_47, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - der U 'HMdcTrackParam' - 0 '0' par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isWireFromSecondSec",1918,G__MdcTrackDDict_749_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSequentialLayNum",1969,G__MdcTrackDDict_749_0_49, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLocation",1145,G__MdcTrackDDict_749_0_50, 121, -1, -1, 0, 1, 1, 1, 8, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTdcErrors",1323,G__MdcTrackDDict_749_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTdcErrors",1323,G__MdcTrackDDict_749_0_52, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isPassedFit",1119,G__MdcTrackDDict_749_0_53, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDriftTime",1307,G__MdcTrackDDict_749_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDriftTimeAndErr",1879,G__MdcTrackDDict_749_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDriftTimeAndInCell",2149,G__MdcTrackDDict_749_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDriftTimeAndErrAndInCell",2721,G__MdcTrackDDict_749_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDriftTimeForDeriv",2108,G__MdcTrackDDict_749_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDriftTimeForAlign",2093,G__MdcTrackDDict_749_0_59, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"u 'HGeomVector' - 11 - p1 u 'HGeomVector' - 11 - p2 "
"i - 'Int_t' 1 - distSign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDistanceSign",1615,G__MdcTrackDDict_749_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("recalcFunctional",1661,G__MdcTrackDDict_749_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcFunctional",1446,G__MdcTrackDDict_749_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcFunctionalForDer",2024,G__MdcTrackDDict_749_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDevAndFunct",1477,G__MdcTrackDDict_749_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcAnalytDeriv",1526,G__MdcTrackDDict_749_0_65, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 '0' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillLookupTableForDer",2123,G__MdcTrackDDict_749_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeIfWeightLess",1852,G__MdcTrackDDict_749_0_67, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - wtCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetFittedHit",1460,G__MdcTrackDDict_749_0_68, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillWireFitCont",1525,G__MdcTrackDDict_749_0_69, 121, -1, -1, 0, 1, 1, 1, 8, "U 'HMdcWireFit' - 0 - fWireFit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillWireFitSimCont",1822,G__MdcTrackDDict_749_0_70, 121, -1, -1, 0, 2, 1, 1, 8, 
"U 'HMdcWireFit' - 0 - fWireFit i - 'Int_t' 0 - trackNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeThisWire",1469,G__MdcTrackDDict_749_0_71, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeOneTimeIfItDoubleTime",2709,G__MdcTrackDDict_749_0_72, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcWireData' - 0 - time1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeIfOneDistOutCell",2219,G__MdcTrackDDict_749_0_73, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcWireData' - 0 - wire2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDriftTimeAndFunct",2094,G__MdcTrackDDict_749_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initDTdPar",979,G__MdcTrackDDict_749_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDTdPar",946,G__MdcTrackDDict_749_0_76, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - par d - 'Double_t' 0 - oneDv2Step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printIfDeleted",1427,G__MdcTrackDDict_749_0_77, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("subtractWireOffset",1894,G__MdcTrackDDict_749_0_78, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par d - 'Double_t' 0 - sigSpeed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitStatM1toP1",1519,G__MdcTrackDDict_749_0_79, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToTOffsetErr",1488,G__MdcTrackDDict_749_0_80, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printTime",956,G__MdcTrackDDict_749_0_81, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - iflag u 'HMdcTrackParam' - 1 - par "
"g - 'Bool_t' 0 'kFALSE' isGeant", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTukeyWeight",1478,G__MdcTrackDDict_749_0_82, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - cwSig d - 'Double_t' 0 - c2Sig "
"d - 'Double_t' 0 - c4Sig d - 'Double_t' 0 - tukeyScale "
"d - 'Double_t' 1 - sumWt d - 'Double_t' 1 - funct", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTukeyWeight",1478,G__MdcTrackDDict_749_0_83, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - cwSig d - 'Double_t' 0 - c2Sig "
"d - 'Double_t' 0 - c4Sig d - 'Double_t' 0 - tukeyScale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isAddressEq",1112,G__MdcTrackDDict_749_0_84, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testWeight1or0",1386,G__MdcTrackDDict_749_0_85, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcLeftRight",1308,G__MdcTrackDDict_749_0_86, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reinitWtSt",1053,G__MdcTrackDDict_749_0_87, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDirection",1249,G__MdcTrackDDict_749_0_88, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPoint",842,G__MdcTrackDDict_749_0_89, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeomVector), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dDist",504,G__MdcTrackDDict_749_0_90, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'HMdcTrackParam' - 11 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInitVal",1027,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillLookupTableForDer",2123,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'HGeomTransform' - 11 - trans u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_749_0_93, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcWireData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_749_0_94, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWireData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_749_0_95, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcWireData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_749_0_96, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcWireData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_749_0_100, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_749_0_101, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWireData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_749_0_102, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcWireData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_749_0_103, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWireData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_749_0_104, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcWireData::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcWireData", 1133, G__MdcTrackDDict_749_0_105, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData), -1, 0, 1, 1, 1, 0, "u 'HMdcWireData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcWireData", 1259, G__MdcTrackDDict_749_0_106, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_749_0_107, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData), -1, 1, 1, 1, 1, 0, "u 'HMdcWireData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcWireFit(void) {
   /* HMdcWireFit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFit));
   G__memfunc_setup("HMdcWireFit",1046,G__MdcTrackDDict_750_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_750_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__MdcTrackDDict_750_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"c - 'Char_t' 0 - s c - 'Char_t' 0 - m "
"c - 'Char_t' 0 - l s - 'Short_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSec",615,G__MdcTrackDDict_750_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMod",620,G__MdcTrackDDict_750_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayer",841,G__MdcTrackDDict_750_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__MdcTrackDDict_750_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeNum",1035,G__MdcTrackDDict_750_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDev",619,G__MdcTrackDDict_750_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWeight",948,G__MdcTrackDDict_750_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsUsedFlag",1299,G__MdcTrackDDict_750_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDriftTime",1236,G__MdcTrackDDict_750_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFullTime",1134,G__MdcTrackDDict_750_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCal1Time",1052,G__MdcTrackDDict_750_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdcTime",1014,G__MdcTrackDDict_750_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinDist",1028,G__MdcTrackDDict_750_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAlpha",818,G__MdcTrackDDict_750_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsInCell",1087,G__MdcTrackDDict_750_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdcTimeErr",1311,G__MdcTrackDDict_750_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setToT",611,G__MdcTrackDDict_750_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellPath",1113,G__MdcTrackDDict_750_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__MdcTrackDDict_750_0_22, 121, -1, -1, 0, 4, 1, 1, 8, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSec",603,G__MdcTrackDDict_750_0_23, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMod",608,G__MdcTrackDDict_750_0_24, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayer",829,G__MdcTrackDDict_750_0_25, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__MdcTrackDDict_750_0_26, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeNum",1023,G__MdcTrackDDict_750_0_27, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDev",607,G__MdcTrackDDict_750_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWeight",936,G__MdcTrackDDict_750_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isWrUsedInFit",1296,G__MdcTrackDDict_750_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDriftTime",1224,G__MdcTrackDDict_750_0_31, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFullTime",1122,G__MdcTrackDDict_750_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeOffset",1334,G__MdcTrackDDict_750_0_33, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdcTime",1002,G__MdcTrackDDict_750_0_34, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdcTimeF",1072,G__MdcTrackDDict_750_0_35, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSignalTime",1325,G__MdcTrackDDict_750_0_36, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1Time",1040,G__MdcTrackDDict_750_0_37, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinDist",1016,G__MdcTrackDDict_750_0_38, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isUnderWire",1137,G__MdcTrackDDict_750_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOverWire",1039,G__MdcTrackDDict_750_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlpha",806,G__MdcTrackDDict_750_0_41, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsInCell",1075,G__MdcTrackDDict_750_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdcTimeErr",1299,G__MdcTrackDDict_750_0_43, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2",646,G__MdcTrackDDict_750_0_44, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getToT",599,G__MdcTrackDDict_750_0_45, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellPath",1101,G__MdcTrackDDict_750_0_46, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGeant",715,G__MdcTrackDDict_750_0_47, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,G__MdcTrackDDict_750_0_48, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_750_0_49, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcWireFit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_750_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWireFit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_750_0_51, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcWireFit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_750_0_52, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcWireFit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_750_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_750_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWireFit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_750_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcWireFit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_750_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWireFit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_750_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcWireFit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcWireFit", 1046, G__MdcTrackDDict_750_0_61, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFit), -1, 0, 1, 1, 1, 0, "u 'HMdcWireFit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcWireFit", 1172, G__MdcTrackDDict_750_0_62, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_750_0_63, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFit), -1, 1, 1, 1, 1, 0, "u 'HMdcWireFit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackFitInOut(void) {
   /* HMdcTrackFitInOut */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut));
   G__memfunc_setup("HMdcTrackFitInOut",1635,G__MdcTrackDDict_751_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__MdcTrackDDict_751_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reinit",651,G__MdcTrackDDict_751_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefaultFitParam",1829,G__MdcTrackDDict_751_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoTof",818,G__MdcTrackDDict_751_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModuleTof",1243,G__MdcTrackDDict_751_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSegmetTof",1242,G__MdcTrackDDict_751_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSectorTof",1253,G__MdcTrackDDict_751_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useWireOffset",1355,G__MdcTrackDDict_751_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGeant",715,G__MdcTrackDDict_751_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseTukeyFlag",1541,G__MdcTrackDDict_751_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTukeyConstants",1819,G__MdcTrackDDict_751_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - cw d - 'Double_t' 0 - c2 "
"d - 'Double_t' 0 - c4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTukeyScale",1350,G__MdcTrackDDict_751_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - tS", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTukeyWtMinSigma",1854,G__MdcTrackDDict_751_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxNumFilterIter",1948,G__MdcTrackDDict_751_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ni", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinTOffsetIter",1727,G__MdcTrackDDict_751_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - mt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinWeight",1240,G__MdcTrackDDict_751_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - mw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxMaxChi2",1246,G__MdcTrackDDict_751_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - mc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFunCut1",978,G__MdcTrackDDict_751_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - fc1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStepD1",861,G__MdcTrackDDict_751_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - sd1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFunCut2",979,G__MdcTrackDDict_751_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - fc2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStepD2",862,G__MdcTrackDDict_751_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - sd2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStepD3",863,G__MdcTrackDDict_751_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - sd3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTargetScanFlag",1714,G__MdcTrackDDict_751_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPrintFlag",1235,G__MdcTrackDDict_751_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - prnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPrintFlag",1235,G__MdcTrackDDict_751_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - currentEvent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNEventsPrint",1564,G__MdcTrackDDict_751_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - start i - 'Int_t' 0 - nev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChi2PerNdfCut",1533,G__MdcTrackDDict_751_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '50.' cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTotalChi2Cut",1474,G__MdcTrackDDict_751_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '300.' cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSignalSpeed",1435,G__MdcTrackDDict_751_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ss", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWeightCut",1248,G__MdcTrackDDict_751_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - wc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("excludeLayer",1255,G__MdcTrackDDict_751_0_32, 121, -1, -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - s h - 'UInt_t' 0 - m "
"h - 'UInt_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("excludeModule",1360,G__MdcTrackDDict_751_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - s h - 'UInt_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNewWireFitSlot",1734,G__MdcTrackDDict_751_0_34, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFit), -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - indWireFit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNewClusFitSlot",1734,G__MdcTrackDDict_751_0_35, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFit), -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - indClusFit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTukeyConstants",1807,G__MdcTrackDDict_751_0_36, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 1 - cw d - 'Double_t' 1 - c2 "
"d - 'Double_t' 1 - c4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSCellsModArr",1483,G__MdcTrackDDict_751_0_37, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCellsMod), -1, 2, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcSizesCells",1621,G__MdcTrackDDict_751_0_38, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcSizesCells), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireFitCat",1298,G__MdcTrackDDict_751_0_39, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcCal1Cat",1197,G__MdcTrackDDict_751_0_40, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantKineCat",1486,G__MdcTrackDDict_751_0_41, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantMdcCat",1371,G__MdcTrackDDict_751_0_42, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDriftTimePar",1515,G__MdcTrackDDict_751_0_43, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWeightCut",1236,G__MdcTrackDDict_751_0_44, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofFlag",995,G__MdcTrackDDict_751_0_45, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSignalSpeed",1423,G__MdcTrackDDict_751_0_46, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDrTimeCalcVer",1573,G__MdcTrackDDict_751_0_47, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTukeyFlag",1228,G__MdcTrackDDict_751_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useTukey",863,G__MdcTrackDDict_751_0_49, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTukeyConstWs",1571,G__MdcTrackDDict_751_0_50, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTukeyConst2s",1534,G__MdcTrackDDict_751_0_51, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTukeyConst4s",1536,G__MdcTrackDDict_751_0_52, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTukeyScale",1338,G__MdcTrackDDict_751_0_53, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTukeyWtMinSigma",1842,G__MdcTrackDDict_751_0_54, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTukeyWtMinSigma2",1892,G__MdcTrackDDict_751_0_55, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxNumFilterIter",1648,G__MdcTrackDDict_751_0_56, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinTOffsetIter",1715,G__MdcTrackDDict_751_0_57, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinWeight",1228,G__MdcTrackDDict_751_0_58, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxChi2",940,G__MdcTrackDDict_751_0_59, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFunCut1",966,G__MdcTrackDDict_751_0_60, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStepD1",849,G__MdcTrackDDict_751_0_61, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFunCut2",967,G__MdcTrackDDict_751_0_62, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStepD2",850,G__MdcTrackDDict_751_0_63, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStepD3",851,G__MdcTrackDDict_751_0_64, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStepDer",1015,G__MdcTrackDDict_751_0_65, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - funct", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPrintFlag",1223,G__MdcTrackDDict_751_0_66, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPrintStartEvent",1885,G__MdcTrackDDict_751_0_67, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNEventPrint",1437,G__MdcTrackDDict_751_0_68, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDoTargScanFlag",1664,G__MdcTrackDDict_751_0_69, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCalcInitValueFlag",1982,G__MdcTrackDDict_751_0_70, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinTimeOffset",1626,G__MdcTrackDDict_751_0_71, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxTimeOffset",1628,G__MdcTrackDDict_751_0_72, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinCellsNum",1415,G__MdcTrackDDict_751_0_73, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTotalChi2Cut",1462,G__MdcTrackDDict_751_0_74, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2PerNdfCut",1521,G__MdcTrackDDict_751_0_75, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2CutFlag",1324,G__MdcTrackDDict_751_0_76, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isLayerExcluded",1543,G__MdcTrackDDict_751_0_77, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusFitCat",1298,G__MdcTrackDDict_751_0_78, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_751_0_79, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackFitInOut::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_751_0_80, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitInOut::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_751_0_81, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackFitInOut::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_751_0_82, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackFitInOut::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_751_0_86, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_751_0_87, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitInOut::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_751_0_88, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackFitInOut::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_751_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitInOut::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_751_0_90, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackFitInOut::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackFitInOut", 1635, G__MdcTrackDDict_751_0_91, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackFitInOut' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackFitInOut", 1761, G__MdcTrackDDict_751_0_92, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_751_0_93, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitInOut), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackFitInOut' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcDriftTimePar(void) {
   /* HMdcDriftTimePar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar));
   G__memfunc_setup("getExObject",1108,G__MdcTrackDDict_754_0_1, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcDriftTimePar* (*)())(&HMdcDriftTimePar::getExObject) ), 0);
   G__memfunc_setup("getObject",919,G__MdcTrackDDict_754_0_2, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcDriftTimePar* (*)())(&HMdcDriftTimePar::getObject) ), 0);
   G__memfunc_setup("deleteCont",1031,G__MdcTrackDDict_754_0_3, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcDriftTimePar::deleteCont) ), 0);
   G__memfunc_setup("getBinDist",1005,G__MdcTrackDDict_754_0_4, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"d - 'Double_t' 0 - a d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initContainer",1367,G__MdcTrackDDict_754_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__MdcTrackDDict_754_0_6, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParSec), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTime",802,G__MdcTrackDDict_754_0_7, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"d - 'Double_t' 0 - a d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTimeErr",1099,G__MdcTrackDDict_754_0_8, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"d - 'Double_t' 0 - a d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_754_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBinTime",1000,G__MdcTrackDDict_754_0_10, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"d - 'Double_t' 0 - a d - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDistance",1214,G__MdcTrackDDict_754_0_11, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"d - 'Double_t' 0 - a d - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScalerTime1Err",1679,G__MdcTrackDDict_754_0_12, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - m0 d - 'Double_t' 0 - m1 "
"d - 'Double_t' 0 - m2 d - 'Double_t' 0 - m3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcDriftTimePar",1543,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimePar), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_754_0_14, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcDriftTimePar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_754_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimePar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_754_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcDriftTimePar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_754_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcDriftTimePar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_754_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_754_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimePar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_754_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDriftTimePar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_754_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimePar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_754_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDriftTimePar::DeclFileLine) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcDriftTimeParBin(void) {
   /* HMdcDriftTimeParBin */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin));
   G__memfunc_setup("HMdcDriftTimeParBin",1824,G__MdcTrackDDict_755_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setC0",447,G__MdcTrackDDict_755_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setC1",448,G__MdcTrackDDict_755_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setC2",449,G__MdcTrackDDict_755_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setC3",450,G__MdcTrackDDict_755_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setC0Err",744,G__MdcTrackDDict_755_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setC1Err",745,G__MdcTrackDDict_755_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setC2Err",746,G__MdcTrackDDict_755_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setC3Err",747,G__MdcTrackDDict_755_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTime",802,G__MdcTrackDDict_755_0_10, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTimeErr",1099,G__MdcTrackDDict_755_0_11, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("coeffForDer",1093,G__MdcTrackDDict_755_0_12, 121, -1, -1, 0, 5, 1, 1, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - d "
"d - 'Double_t' 1 - coeffDAlpha d - 'Double_t' 1 - coeffDDist "
"d - 'Double_t' 1 - coeffDAlphaDDist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("coeffDAlphaDPar",1428,G__MdcTrackDDict_755_0_13, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("coeffDDistDPar",1346,G__MdcTrackDDict_755_0_14, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_755_0_15, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printTable",1045,G__MdcTrackDDict_755_0_16, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setD0",448,G__MdcTrackDDict_755_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setD1",449,G__MdcTrackDDict_755_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setD2",450,G__MdcTrackDDict_755_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setD3",451,G__MdcTrackDDict_755_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDistance",1214,G__MdcTrackDDict_755_0_21, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_755_0_22, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcDriftTimeParBin::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_755_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimeParBin::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_755_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcDriftTimeParBin::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_755_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcDriftTimeParBin::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_755_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_755_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimeParBin::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_755_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDriftTimeParBin::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_755_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimeParBin::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_755_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDriftTimeParBin::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcDriftTimeParBin", 1824, G__MdcTrackDDict_755_0_34, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin), -1, 0, 1, 1, 1, 0, "u 'HMdcDriftTimeParBin' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcDriftTimeParBin", 1950, G__MdcTrackDDict_755_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_755_0_36, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin), -1, 1, 1, 1, 1, 0, "u 'HMdcDriftTimeParBin' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcWiresArr(void) {
   /* HMdcWiresArr */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWiresArr));
   G__memfunc_setup("HMdcWiresArr",1163,G__MdcTrackDDict_756_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWiresArr), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumDriftTimes",1655,G__MdcTrackDDict_756_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nDrTm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPrintFlag",1235,G__MdcTrackDDict_756_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYZClust",1122,G__MdcTrackDDict_756_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWiresArray",1353,G__MdcTrackDDict_756_0_5, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireData",1105,G__MdcTrackDDict_756_0_6, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_756_0_7, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcTrackDDict_756_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSegment",1043,G__MdcTrackDDict_756_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDriftTimes",1417,G__MdcTrackDDict_756_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOutputNLayers",1679,G__MdcTrackDDict_756_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDrTmFirstSec",1576,G__MdcTrackDDict_756_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstTimeInd",1522,G__MdcTrackDDict_756_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastTimeInd",1406,G__MdcTrackDDict_756_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumOfGoodWires",1720,G__MdcTrackDDict_756_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNModulesInFit",1601,G__MdcTrackDDict_756_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWiresInFit",1394,G__MdcTrackDDict_756_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayOrientOutput",1974,G__MdcTrackDDict_756_0_18, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayOrientInput",1845,G__MdcTrackDDict_756_0_19, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstWire",1247,G__MdcTrackDDict_756_0_20, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastWire",1131,G__MdcTrackDDict_756_0_21, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClust1",892,G__MdcTrackDDict_756_0_22, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClust2",893,G__MdcTrackDDict_756_0_23, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClust3",894,G__MdcTrackDDict_756_0_24, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClust4",895,G__MdcTrackDDict_756_0_25, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClust5",896,G__MdcTrackDDict_756_0_26, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClust6",897,G__MdcTrackDDict_756_0_27, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClust7",898,G__MdcTrackDDict_756_0_28, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClust8",899,G__MdcTrackDDict_756_0_29, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOutputListCells",1888,G__MdcTrackDDict_756_0_30, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOutputListCells2",1938,G__MdcTrackDDict_756_0_31, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOutputListCells3",1939,G__MdcTrackDDict_756_0_32, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOutputListCells4",1940,G__MdcTrackDDict_756_0_33, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInputListCells",1759,G__MdcTrackDDict_756_0_34, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInputListCells2",1809,G__MdcTrackDDict_756_0_35, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInputListCells3",1810,G__MdcTrackDDict_756_0_36, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInputListCells4",1811,G__MdcTrackDDict_756_0_37, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList24GroupCells), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTwoSectorsData",1651,G__MdcTrackDDict_756_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector2",994,G__MdcTrackDDict_756_0_39, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector3",995,G__MdcTrackDDict_756_0_40, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector4",996,G__MdcTrackDDict_756_0_41, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillListHits",1243,G__MdcTrackDDict_756_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HMdcClus' - 0 - fCl1 U 'HMdcClus' - 0 - fCl2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillListHits",1243,G__MdcTrackDDict_756_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 0, 
"U 'HMdcClus' - 0 - fCl1 U 'HMdcClus' - 0 - fCl2 "
"U 'HMdcClus' - 0 - fCl3 U 'HMdcClus' - 0 - fCl4 "
"U 'HMdcClus' - 0 - fCl5 U 'HMdcClus' - 0 - fCl6 "
"U 'HMdcClus' - 0 - fCl7 U 'HMdcClus' - 0 - fCl8", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillListHits",1243,G__MdcTrackDDict_756_0_44, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'HMdcEvntListCells' - 0 - store U 'HMdcClus' - 0 - fCl1 "
"U 'HMdcClus' - 0 - fCl2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillListHits",1243,G__MdcTrackDDict_756_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcEvntListCells' - 0 - store", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillLookupTableForDer",2123,G__MdcTrackDDict_756_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackFitInOut",1619,G__MdcTrackDDict_756_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcTrackFitInOut' - 0 - pfio", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNegTdcTimeTo0",1539,G__MdcTrackDDict_756_0_48, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testFitResult",1378,G__MdcTrackDDict_756_0_49, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("subtractWireOffset",1894,G__MdcTrackDDict_756_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitStatM1toP1",1519,G__MdcTrackDDict_756_0_51, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("switchOff",941,G__MdcTrackDDict_756_0_52, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 '-1' lay i - 'Int_t' 0 '-1' cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetHits",967,G__MdcTrackDDict_756_0_53, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCellsInInput",1608,G__MdcTrackDDict_756_0_54, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '-1' mod i - 'Int_t' 0 '-1' isec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCellsInOutput",1737,G__MdcTrackDDict_756_0_55, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '-1' mod i - 'Int_t' 0 '-1' isec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillClusFitAndWireFit",2094,G__MdcTrackDDict_756_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcClusFit' - 0 - fClusFit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillClusFitSim",1418,G__MdcTrackDDict_756_0_57, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcClusFit' - 0 - fClusFit u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcNGoodWiresAndChi2",1997,G__MdcTrackDDict_756_0_58, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTdcErrorsAndFunct",2110,G__MdcTrackDDict_756_0_59, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 '0' iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTdcErrorsTOff0AndFunct",2525,G__MdcTrackDDict_756_0_60, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 '0' iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("recalcFunct",1130,G__MdcTrackDDict_756_0_61, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 '0' iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRegionOfWires",1647,G__MdcTrackDDict_756_0_62, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - mod i - 'Int_t' 0 '-1' isec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("valueOfFunctional",1765,G__MdcTrackDDict_756_0_63, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 '0' iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("valueOfFunctAndErr",1806,G__MdcTrackDDict_756_0_64, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 '0' iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("functForDeriv",1345,G__MdcTrackDDict_756_0_65, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 '0' iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTimeOffsetsErr",1829,G__MdcTrackDDict_756_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumOfWeights",1541,G__MdcTrackDDict_756_0_67, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printTimes",1071,G__MdcTrackDDict_756_0_68, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - iflag u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWeightsTo1or0",1580,G__MdcTrackDDict_756_0_69, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 '0' iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("filterOfHits",1235,G__MdcTrackDDict_756_0_70, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 '0' iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("filterOfHitsV2",1371,G__MdcTrackDDict_756_0_71, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 '0' iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGrad2Matr",1156,G__MdcTrackDDict_756_0_72, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTlEdoublegR), G__defined_typename("TMatrixD"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatrH",796,G__MdcTrackDDict_756_0_73, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_TMatrixTlEdoublegR), G__defined_typename("TMatrixD"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSizeGrad2Matr",1579,G__MdcTrackDDict_756_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSecondDeriv",1513,G__MdcTrackDDict_756_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculateErrors",1579,G__MdcTrackDDict_756_0_76, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDerivatives",1561,G__MdcTrackDDict_756_0_77, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 - iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcAnalyticDerivatives1",2431,G__MdcTrackDDict_756_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcAnalyticDerivatives2",2432,G__MdcTrackDDict_756_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcErrorsAnalyt",1657,G__MdcTrackDDict_756_0_80, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcAGradAnalyt",1467,G__MdcTrackDDict_756_0_81, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGrad",702,G__MdcTrackDDict_756_0_82, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAGrad",767,G__MdcTrackDDict_756_0_83, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUnitWeights",1479,G__MdcTrackDDict_756_0_84, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("filterOfHitsConstSig",2045,G__MdcTrackDDict_756_0_85, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par d - 'Double_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXClst",814,G__MdcTrackDDict_756_0_86, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYClst",815,G__MdcTrackDDict_756_0_87, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZClst",816,G__MdcTrackDDict_756_0_88, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testTukeyWeights",1709,G__MdcTrackDDict_756_0_89, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInitWeghts",1362,G__MdcTrackDDict_756_0_90, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDistanceSign",1615,G__MdcTrackDDict_756_0_91, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcFunctional",1446,G__MdcTrackDDict_756_0_92, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 - iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcInitialValue",1626,G__MdcTrackDDict_756_0_93, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__MdcTrackDDict_756_0_94, 121, -1, -1, 0, 6, 1, 1, 0, 
"u 'HMdcTrackParam' - 1 - par U 'HMdcWireData' - 0 - w1 "
"U 'HMdcWireData' - 0 - w2 U 'HMdcWireData' - 0 - w3 "
"U 'HMdcWireData' - 0 - w4 u 'HMdcTrackParam' - 1 - minPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcLeftRight",1308,G__MdcTrackDDict_756_0_95, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTrack",904,G__MdcTrackDDict_756_0_96, 121, -1, -1, 0, 9, 1, 1, 0, 
"u 'HGeomVector' - 1 - P1 u 'HGeomVector' - 1 - V1 "
"u 'HGeomVector' - 1 - P2 u 'HGeomVector' - 1 - V2 "
"u 'HGeomVector' - 1 - P3 u 'HGeomVector' - 1 - V3 "
"u 'HGeomVector' - 1 - P4 u 'HGeomVector' - 1 - V4 "
"u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("countFittedWires",1683,G__MdcTrackDDict_756_0_97, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - chi2cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTrackChi2",1230,G__MdcTrackDDict_756_0_98, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackNum", "trackNum - geant track numer", (void*) NULL, 0);
   G__memfunc_setup("calcChi2",729,G__MdcTrackDDict_756_0_99, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'HMdcList12GroupCells' - 1 - listCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reinitWtSt",1053,G__MdcTrackDDict_756_0_100, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wireOrientInd",1347,G__MdcTrackDDict_756_0_101, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - layer", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t))(&HMdcWiresArr::wireOrientInd) ), 0);
   G__memfunc_setup("getComb4layers",1413,G__MdcTrackDDict_756_0_102, 103, -1, G__defined_typename("Bool_t"), 0, 7, 3, 1, 0, 
"h - 'UInt_t' 0 - c i - 'Int_t' 0 - add12 "
"i - 'Int_t' 1 - l1 i - 'Int_t' 1 - l2 "
"i - 'Int_t' 0 - add34 i - 'Int_t' 1 - l3 "
"i - 'Int_t' 1 - l4", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UInt_t, Int_t, Int_t&, Int_t&, Int_t, Int_t&, Int_t&))(&HMdcWiresArr::getComb4layers) ), 0);
   G__memfunc_setup("testRestForTrack",1658,G__MdcTrackDDict_756_0_103, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec u 'HMdcLineParam' - 1 - lineParam "
"u 'HMdcList12GroupCells' - 1 - listCells i - 'Int_t' 0 - nLayersMax "
"i - 'Int_t' 0 - nWiresMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("recalcFunctional",1661,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 '0' iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setListCells",1243,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 8, 1, 4, 0, 
"U 'HMdcClus' - 0 - fCl1 U 'HMdcClus' - 0 - fCl2 "
"U 'HMdcClus' - 0 '0' fCl3 U 'HMdcClus' - 0 '0' fCl4 "
"U 'HMdcClus' - 0 '0' fCl5 U 'HMdcClus' - 0 '0' fCl6 "
"U 'HMdcClus' - 0 '0' fCl7 U 'HMdcClus' - 0 '0' fCl8", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setListCells",1243,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HMdcEvntListCells' - 0 - store", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTukeyWeights",1593,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "d - 'Double_t' 0 - sigma2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTukeyWeightsAndCalcSigma2",2786,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 0, "d - 'Double_t' 0 - sigma2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDriftTime",1307,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 - iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDriftTimeAndErr",1879,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 0 - iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcErrs",815,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initDTdPar",979,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDTdPar",946,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - k d - 'Double_t' 0 - oneDv2StepD", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWeightsTo1or0",1580,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"d - 'Double_t' 0 - maxChi2 d - 'Double_t' 0 - minWeight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantHitPoint",1630,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"U 'HMdcWireData' - 0 - w U 'HGeantMdc' - 0 - hit "
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findMinChi2",1035,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findNewSigm2",1165,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - ntm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillListHits",1243,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 4, 0, 
"i - 'Int_t' 0 - isec i - 'Int_t' 0 - sec "
"u 'HMdcList24GroupCells' - 1 - lInCells u 'HMdcList24GroupCells' - 1 - lOutCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findGoodComb",1195,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'HMdcTrackParam' - 1 - par u 'HMdcTrackParam' - 1 - minPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectAllWires",1545,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'HMdcTrackParam' - 1 - par i - 'Int_t' 1 - nAddWires "
"d - 'Double_t' 1 - dDistSum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reinitWireArr",1351,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_756_0_122, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcWiresArr::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_756_0_123, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWiresArr::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_756_0_124, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcWiresArr::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_756_0_125, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcWiresArr::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_756_0_129, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_756_0_130, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWiresArr::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_756_0_131, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcWiresArr::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_756_0_132, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWiresArr::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_756_0_133, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcWiresArr::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcWiresArr", 1163, G__MdcTrackDDict_756_0_134, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWiresArr), -1, 0, 1, 1, 1, 0, "u 'HMdcWiresArr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcWiresArr", 1289, G__MdcTrackDDict_756_0_135, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_756_0_136, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWiresArr), -1, 1, 1, 1, 1, 0, "u 'HMdcWiresArr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcDriftTimeParAngle(void) {
   /* HMdcDriftTimeParAngle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParAngle));
   G__memfunc_setup("HMdcDriftTimeParAngle",2030,G__MdcTrackDDict_765_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParAngle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__MdcTrackDDict_765_0_2, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_765_0_3, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcDriftTimeParAngle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_765_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimeParAngle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_765_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcDriftTimeParAngle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_765_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcDriftTimeParAngle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_765_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_765_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimeParAngle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_765_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDriftTimeParAngle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_765_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimeParAngle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_765_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDriftTimeParAngle::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcDriftTimeParAngle", 2030, G__MdcTrackDDict_765_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParAngle), -1, 0, 1, 1, 1, 0, "u 'HMdcDriftTimeParAngle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcDriftTimeParAngle", 2156, G__MdcTrackDDict_765_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_765_0_17, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParAngle), -1, 1, 1, 1, 1, 0, "u 'HMdcDriftTimeParAngle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcDriftTimeParMod(void) {
   /* HMdcDriftTimeParMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParMod));
   G__memfunc_setup("HMdcDriftTimeParMod",1831,G__MdcTrackDDict_766_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParMod), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '18' nAnBins i - 'Int_t' 0 '100' nDsBins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNAngleBins",1281,G__MdcTrackDDict_766_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAngleBinSize",1499,G__MdcTrackDDict_766_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDistBins",1198,G__MdcTrackDDict_766_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistBinSize",1416,G__MdcTrackDDict_766_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBinDist",1005,G__MdcTrackDDict_766_0_6, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcAngleBinInd",1454,G__MdcTrackDDict_766_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDistBinInd",1371,G__MdcTrackDDict_766_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTime",802,G__MdcTrackDDict_766_0_9, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTimeErr",1099,G__MdcTrackDDict_766_0_10, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testSizes",974,G__MdcTrackDDict_766_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - anSz i - 'Int_t' 0 - dsSz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistBinSize",1428,G__MdcTrackDDict_766_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dBSize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__MdcTrackDDict_766_0_13, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParAngle), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAngBins",994,G__MdcTrackDDict_766_0_14, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParAngle), -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - al", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initContainer",1367,G__MdcTrackDDict_766_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'HMdcCal2ParModSim' - 1 - fC2PModS u 'HMdcCal2ParMod' - 1 - fC2PMod "
"d - 'Double_t' 0 - slOut d - 'Double_t' 0 - scaleErr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_766_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTimeBins",1193,G__MdcTrackDDict_766_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeBinSize",1411,G__MdcTrackDDict_766_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBinTime",1000,G__MdcTrackDDict_766_0_19, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParBin), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTimeBinInd",1366,G__MdcTrackDDict_766_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDistance",1214,G__MdcTrackDDict_766_0_21, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - a d - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeBinSize",1423,G__MdcTrackDDict_766_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - tBSize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillDriftTime",1327,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"u 'HMdcCal2ParAngleSim' - 1 - rAng1 u 'HMdcCal2ParAngleSim' - 1 - rAng2 "
"U 'HMdcDriftTimeParBin' - 0 - bin i - 'Int_t' 0 - anBin "
"i - 'Int_t' 0 - dsBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillDriftTimeErr",1624,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 4, 0, 
"u 'HMdcCal2ParAngleSim' - 1 - rAng1 u 'HMdcCal2ParAngleSim' - 1 - rAng2 "
"U 'HMdcDriftTimeParBin' - 0 - bin i - 'Int_t' 0 - anBin "
"i - 'Int_t' 0 - dsBin d - 'Double_t' 0 - scaleErr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillDriftDist",1332,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"u 'HMdcCal2ParAngle' - 1 - rAng1 u 'HMdcCal2ParAngle' - 1 - rAng2 "
"U 'HMdcDriftTimeParBin' - 0 - bin i - 'Int_t' 0 - anBin "
"i - 'Int_t' 0 - tmBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_766_0_26, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcDriftTimeParMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_766_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimeParMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_766_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcDriftTimeParMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_766_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcDriftTimeParMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_766_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_766_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimeParMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_766_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDriftTimeParMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_766_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDriftTimeParMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_766_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDriftTimeParMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcDriftTimeParMod", 1831, G__MdcTrackDDict_766_0_38, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParMod), -1, 0, 1, 1, 1, 0, "u 'HMdcDriftTimeParMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcDriftTimeParMod", 1957, G__MdcTrackDDict_766_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_766_0_40, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDriftTimeParMod), -1, 1, 1, 1, 1, 0, "u 'HMdcDriftTimeParMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackFitPar(void) {
   /* HMdcTrackFitPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitPar));
   G__memfunc_setup("HMdcTrackFitPar",1431,G__MdcTrackDDict_767_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcTrackFitPar\"' name C - 'Char_t' 10 '\"parameters for Dubna track fitter\"' title "
"C - 'Char_t' 10 '\"MdcTrackFitParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutWeight",1236,G__MdcTrackDDict_767_0_2, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofFlag",995,G__MdcTrackDDict_767_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDoTargScan",1286,G__MdcTrackDDict_767_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinTimeOffset",1626,G__MdcTrackDDict_767_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxTimeOffset",1628,G__MdcTrackDDict_767_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinCellsNum",1415,G__MdcTrackDDict_767_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2CutFlag",1324,G__MdcTrackDDict_767_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTotalChi2Cut",1462,G__MdcTrackDDict_767_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2PerNdfCut",1521,G__MdcTrackDDict_767_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUseTukeyFlag",1529,G__MdcTrackDDict_767_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCnWs",699,G__MdcTrackDDict_767_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCn2s",662,G__MdcTrackDDict_767_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCn4s",664,G__MdcTrackDDict_767_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinSig2",953,G__MdcTrackDDict_767_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxNFilterIter",1710,G__MdcTrackDDict_767_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinWeight",1228,G__MdcTrackDDict_767_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxChi2",940,G__MdcTrackDDict_767_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinTOffsetIter",1715,G__MdcTrackDDict_767_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFunCt1",849,G__MdcTrackDDict_767_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStepD1",849,G__MdcTrackDDict_767_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFunCt2",850,G__MdcTrackDDict_767_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStepD2",850,G__MdcTrackDDict_767_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStepD3",851,G__MdcTrackDDict_767_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutWeight",1248,G__MdcTrackDDict_767_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofFlag",1007,G__MdcTrackDDict_767_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoTargScan",1298,G__MdcTrackDDict_767_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - scan", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinTimeOffset",1638,G__MdcTrackDDict_767_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - off", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxTimeOffset",1640,G__MdcTrackDDict_767_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - off", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinCellsNum",1427,G__MdcTrackDDict_767_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChi2CutFlag",1336,G__MdcTrackDDict_767_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTotalChi2Cut",1474,G__MdcTrackDDict_767_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChi2PerNdfCut",1533,G__MdcTrackDDict_767_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseTukeyFlag",1541,G__MdcTrackDDict_767_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCnWs",711,G__MdcTrackDDict_767_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCn2s",674,G__MdcTrackDDict_767_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCn4s",676,G__MdcTrackDDict_767_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinSig2",965,G__MdcTrackDDict_767_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxNFilterIter",1722,G__MdcTrackDDict_767_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinWeight",1240,G__MdcTrackDDict_767_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxChi2",952,G__MdcTrackDDict_767_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinTOffsetIter",1727,G__MdcTrackDDict_767_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFunCt1",861,G__MdcTrackDDict_767_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStepD1",861,G__MdcTrackDDict_767_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFunCt2",862,G__MdcTrackDDict_767_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStepD2",862,G__MdcTrackDDict_767_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStepD3",863,G__MdcTrackDDict_767_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcTrackDDict_767_0_51, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_767_0_52, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackFitPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_767_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_767_0_54, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackFitPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_767_0_55, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackFitPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_767_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_767_0_60, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_767_0_61, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackFitPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_767_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_767_0_63, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackFitPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackFitPar", 1431, G__MdcTrackDDict_767_0_64, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitPar), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackFitPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackFitPar", 1557, G__MdcTrackDDict_767_0_65, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_767_0_66, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitPar), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackFitPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackFitter(void) {
   /* HMdcTrackFitter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter));
   G__memfunc_setup("HMdcTrackFitter",1471,G__MdcTrackDDict_769_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter), -1, 0, 1, 1, 1, 0, "U 'HMdcTrackFitInOut' - 0 - fIO", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("minimize",866,G__MdcTrackDDict_769_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' iter", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fillListHits",1243,G__MdcTrackDDict_769_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HMdcClus' - 0 - cl1 U 'HMdcClus' - 0 - cl2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillListHits",1243,G__MdcTrackDDict_769_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"U 'HMdcClus' - 0 - cl1 U 'HMdcClus' - 0 - cl2 "
"U 'HMdcClus' - 0 - cl3 U 'HMdcClus' - 0 - cl4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillListHits",1243,G__MdcTrackDDict_769_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"U 'HMdcClus' - 0 - cl1 U 'HMdcClus' - 0 - cl2 "
"U 'HMdcClus' - 0 - cl3 U 'HMdcClus' - 0 - cl4 "
"U 'HMdcClus' - 0 - cl5 U 'HMdcClus' - 0 - cl6", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillListHits",1243,G__MdcTrackDDict_769_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 0, 
"U 'HMdcClus' - 0 - cl1 U 'HMdcClus' - 0 - cl2 "
"U 'HMdcClus' - 0 - cl3 U 'HMdcClus' - 0 - cl4 "
"U 'HMdcClus' - 0 - cl5 U 'HMdcClus' - 0 - cl6 "
"U 'HMdcClus' - 0 - cl7 U 'HMdcClus' - 0 - cl8", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillListHits",1243,G__MdcTrackDDict_769_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'HMdcEvntListCells' - 0 - store U 'HMdcClus' - 0 - clus1 "
"U 'HMdcClus' - 0 - clus2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillListHits",1243,G__MdcTrackDDict_769_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcEvntListCells' - 0 - store", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPrintFlag",1235,G__MdcTrackDDict_769_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - prnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModuleTof",1243,G__MdcTrackDDict_769_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", "tof for each module", (void*) NULL, 0);
   G__memfunc_setup("setSegmentTof",1352,G__MdcTrackDDict_769_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", "tof for each segment", (void*) NULL, 0);
   G__memfunc_setup("setSectorTof",1253,G__MdcTrackDDict_769_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", "one tof for all modules", (void*) NULL, 0);
   G__memfunc_setup("setClustAndFill",1521,G__MdcTrackDDict_769_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HMdcClus' - 0 - cl1 U 'HMdcClus' - 0 '0' cl2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClustAndFill",1521,G__MdcTrackDDict_769_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 0, 
"U 'HMdcClus' - 0 - cl1 U 'HMdcClus' - 0 - cl2 "
"U 'HMdcClus' - 0 - cl3 U 'HMdcClus' - 0 - cl4 "
"U 'HMdcClus' - 0 '0' cl5 U 'HMdcClus' - 0 '0' cl6 "
"U 'HMdcClus' - 0 '0' cl7 U 'HMdcClus' - 0 '0' cl8", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClustAndFill",1521,G__MdcTrackDDict_769_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"U 'HMdcEvntListCells' - 0 - store d - 'Double_t' 0 - x1 "
"d - 'Double_t' 0 - y1 d - 'Double_t' 0 - z1 "
"d - 'Double_t' 0 - x2 d - 'Double_t' 0 - y2 "
"d - 'Double_t' 0 - z2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitStatus",1267,G__MdcTrackDDict_769_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - st", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumOfParam",1302,G__MdcTrackDDict_769_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFunMin",909,G__MdcTrackDDict_769_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2",646,G__MdcTrackDDict_769_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIterationNumber",1880,G__MdcTrackDDict_769_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExitFlag",1108,G__MdcTrackDDict_769_0_21, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitStatus",1255,G__MdcTrackDDict_769_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFinalParam",1307,G__MdcTrackDDict_769_0_23, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInitParam",1221,G__MdcTrackDDict_769_0_24, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackParam), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWiresList",1254,G__MdcTrackDDict_769_0_25, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWiresArr",1135,G__MdcTrackDDict_769_0_26, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWiresArr), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWire",727,G__MdcTrackDDict_769_0_27, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireData), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSegIndex",1111,G__MdcTrackDDict_769_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSegIndex",1123,G__MdcTrackDDict_769_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - si", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndClusFit",1301,G__MdcTrackDDict_769_0_30, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFunctional",1363,G__MdcTrackDDict_769_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fillOutput",1080,G__MdcTrackDDict_769_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillClusFitCont",1525,G__MdcTrackDDict_769_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitCluster",1061,G__MdcTrackDDict_769_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' fittingMod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("refitCluster",1276,G__MdcTrackDDict_769_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' fittingMod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRegionOfWires",1647,G__MdcTrackDDict_769_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("switchOffWires",1463,G__MdcTrackDDict_769_0_37, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 '-1' lay i - 'Int_t' 0 '-1' cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPlanes",943,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testChi2Cut",1074,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fit",323,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 '-1' fittingMod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_769_0_42, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackFitter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_769_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_769_0_44, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackFitter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_769_0_45, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackFitter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_769_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_769_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_769_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackFitter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_769_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_769_0_53, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackFitter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackFitter", 1471, G__MdcTrackDDict_769_0_54, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackFitter", 1597, G__MdcTrackDDict_769_0_55, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_769_0_56, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackFitterA(void) {
   /* HMdcTrackFitterA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterA));
   G__memfunc_setup("HMdcTrackFitterA",1536,G__MdcTrackDDict_770_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterA), -1, 0, 1, 1, 1, 0, "U 'HMdcTrackFitInOut' - 0 - fIO", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("minimize",866,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' iter", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setDefaultParam",1538,G__MdcTrackDDict_770_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInitStepFit",1439,G__MdcTrackDDict_770_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - vl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLimIter1forFilter",2016,G__MdcTrackDDict_770_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - vl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLimFunct1to2",1460,G__MdcTrackDDict_770_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - vl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLimDeltaF1to2",1508,G__MdcTrackDDict_770_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - vl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLimGrad1to2",1330,G__MdcTrackDDict_770_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - vl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStepCh",915,G__MdcTrackDDict_770_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - i d - 'Double_t' 0 - vl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDFunctMax",1206,G__MdcTrackDDict_770_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - vl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDFunctMin",1204,G__MdcTrackDDict_770_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - vl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLimGrad2",1054,G__MdcTrackDDict_770_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - vl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLimStep2",1084,G__MdcTrackDDict_770_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - i d - 'Double_t' 0 - vl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLimIter2",1076,G__MdcTrackDDict_770_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - vl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFunctional",1363,G__MdcTrackDDict_770_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printResult",1196,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printResult",1196,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"C - 'Char_t' 10 - status u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printStep",969,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"C - 'Char_t' 10 - cond d - 'Double_t' 0 - fun "
"d - 'Double_t' 0 - step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("solutionOfLinearEquationsSystem",3275,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("downhillOnGradient",1868,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("firstMethod",1161,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("secondMethod",1245,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcScaledAGrad",1438,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 2, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doMinimization",1483,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_770_0_25, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackFitterA::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_770_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitterA::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_770_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackFitterA::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_770_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackFitterA::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_770_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_770_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitterA::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_770_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackFitterA::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_770_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitterA::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_770_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackFitterA::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackFitterA", 1536, G__MdcTrackDDict_770_0_37, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterA), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackFitterA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackFitterA", 1662, G__MdcTrackDDict_770_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_770_0_39, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterA), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackFitterA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackInfSim(void) {
   /* HMdcTrackInfSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackInfSim));
   G__memfunc_setup("HMdcTrackInfSim",1431,G__MdcTrackDDict_773_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackInfSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillClusTrackInf",1616,G__MdcTrackDDict_773_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcClusSim' - 0 - pClusSim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addClusModTrackInf",1778,G__MdcTrackDDict_773_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcClusSim' - 0 - pClusSim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillClusModTrackInf",1904,G__MdcTrackDDict_773_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HMdcClusSim' - 0 - pClusSim U 'HMdcList12GroupCells' - 0 - wrLst "
"i - 'Int_t' 0 - modi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillSegTrackInf",1496,G__MdcTrackDDict_773_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HMdcSegSim' - 0 - pSegSim U 'HMdcList24GroupCells' - 0 - wrLst "
"U 'HMdcSegSim' - 0 - pSegPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHitTrackInf",1502,G__MdcTrackDDict_773_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcHitSim' - 0 - pHitSim U 'HMdcList24GroupCells' - 0 - wrLst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectTracksInf",1643,G__MdcTrackDDict_773_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"b - 'UChar_t' 0 - sec b - 'UChar_t' 0 - seg "
"U 'HMdcList12GroupCells' - 0 - wrLst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testIOMatching",1411,G__MdcTrackDDict_773_0_8, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ind U 'HMdcClusSim' - 0 - pClusSim "
"i - 'Int_t' 0 - bin U 'HMdcClusSim' - 0 - pClusSimPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testIOMatching",1411,G__MdcTrackDDict_773_0_9, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ind U 'HMdcSegSim' - 0 - pSegSim "
"i - 'Int_t' 0 - bin U 'HMdcSegSim' - 0 - pSegPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumTracks",1240,G__MdcTrackDDict_773_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__MdcTrackDDict_773_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - trInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumWires",1146,G__MdcTrackDDict_773_0_12, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - trInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGeantBugEvent",1515,G__MdcTrackDDict_773_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGeantBugSeg",1288,G__MdcTrackDDict_773_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWiresArr",1147,G__MdcTrackDDict_773_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcWiresArr' - 0 - wl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumLayers",1248,G__MdcTrackDDict_773_0_16, 98, -1, G__defined_typename("UChar_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - trInd i - 'Int_t' 0 '-2' modi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getListCells",1231,G__MdcTrackDDict_773_0_17, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcList12GroupCells), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcGeantSeg",1378,G__MdcTrackDDict_773_0_18, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantSeg), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcGeantTrack",1592,G__MdcTrackDDict_773_0_19, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTrIndOk",887,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectTracksInf",1643,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_773_0_22, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackInfSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_773_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackInfSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_773_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackInfSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_773_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackInfSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_773_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_773_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackInfSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_773_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackInfSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_773_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackInfSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_773_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackInfSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackInfSim", 1431, G__MdcTrackDDict_773_0_34, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackInfSim), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackInfSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackInfSim", 1557, G__MdcTrackDDict_773_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_773_0_36, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackInfSim), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackInfSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcFittersArray(void) {
   /* HMdcFittersArray */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcFittersArray));
   G__memfunc_setup("HMdcFittersArray",1596,G__MdcTrackDDict_774_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcFittersArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__MdcTrackDDict_774_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - fitAut U 'HMdcTrackFitInOut' - 0 - fpar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNewFitter",1240,G__MdcTrackDDict_774_0_3, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitter",942,G__MdcTrackDDict_774_0_4, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcTrackDDict_774_0_5, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__MdcTrackDDict_774_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumObjs",1022,G__MdcTrackDDict_774_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("expand",640,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_774_0_9, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcFittersArray::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_774_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcFittersArray::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_774_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcFittersArray::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_774_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcFittersArray::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_774_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_774_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcFittersArray::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_774_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcFittersArray::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_774_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcFittersArray::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_774_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcFittersArray::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcFittersArray", 1596, G__MdcTrackDDict_774_0_21, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcFittersArray), -1, 0, 1, 1, 1, 0, "u 'HMdcFittersArray' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcFittersArray", 1722, G__MdcTrackDDict_774_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_774_0_23, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcFittersArray), -1, 1, 1, 1, 1, 0, "u 'HMdcFittersArray' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcEffMenu(void) {
   /* HMdcEffMenu */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMenu));
   G__memfunc_setup("HMdcEffMenu",1026,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMenu), -1, 0, 1, 1, 2, 0, "U 'HMdcEfficiency' - 0 - feff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("menu",437,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawTextLine",1243,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextEntry), -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"C - 'Char_t' 10 - name i - 'Int_t' 0 - textColor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawLabel",910,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TGLabel), -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"C - 'Char_t' 10 - name i - 'Int_t' 0 - textColor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawButton",1066,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextButton), -1, 0, 5, 1, 2, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"C - 'Char_t' 10 - name C - 'Char_t' 10 - doThis "
"i - 'Int_t' 0 - textColor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawButtonXp",1266,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TGTextButton), -1, 0, 5, 1, 2, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - - "
"C - 'Char_t' 10 - name C - 'Char_t' 10 - doThis "
"i - 'Int_t' 0 - textColor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInitPoint",1258,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - sw i - 'Int_t' 0 - dw "
"i - 'Int_t' 0 - sh i - 'Int_t' 0 - dh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawNEvents",1137,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nEv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeMenu",819,G__MdcTrackDDict_819_0_9, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMenu), -1, 0, 1, 3, 1, 0, "U 'HMdcEfficiency' - 0 - feff", (char*)NULL, (void*) G__func2void( (HMdcEffMenu* (*)(HMdcEfficiency*))(&HMdcEffMenu::makeMenu) ), 0);
   G__memfunc_setup("deleteMenu",1032,G__MdcTrackDDict_819_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcEffMenu::deleteMenu) ), 0);
   G__memfunc_setup("closeDial",912,G__MdcTrackDDict_819_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSecMod",903,G__MdcTrackDDict_819_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayer",841,G__MdcTrackDDict_819_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setListPads",1136,G__MdcTrackDDict_819_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setListLayer",1253,G__MdcTrackDDict_819_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawPlot",845,G__MdcTrackDDict_819_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPlotType",1165,G__MdcTrackDDict_819_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawHist",838,G__MdcTrackDDict_819_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawXYlayer",1148,G__MdcTrackDDict_819_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawTimes",944,G__MdcTrackDDict_819_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawSummary",1180,G__MdcTrackDDict_819_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawHistMb",1013,G__MdcTrackDDict_819_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGroup",857,G__MdcTrackDDict_819_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rebinTimes",1042,G__MdcTrackDDict_819_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rebinXY",705,G__MdcTrackDDict_819_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printClusters",1410,G__MdcTrackDDict_819_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doDraw",609,G__MdcTrackDDict_819_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doPlots",741,G__MdcTrackDDict_819_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doEventPlots",1255,G__MdcTrackDDict_819_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loopEvents",1071,G__MdcTrackDDict_819_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nEv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcEff",676,G__MdcTrackDDict_819_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveHist",839,G__MdcTrackDDict_819_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clustSel",847,G__MdcTrackDDict_819_0_33, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("stpLoop",753,G__MdcTrackDDict_819_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_819_0_35, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcEffMenu::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_819_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEffMenu::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_819_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcEffMenu::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_819_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcEffMenu::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_819_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_819_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEffMenu::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_819_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEffMenu::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_819_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcEffMenu::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_819_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcEffMenu::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcEffMenu", 1026, G__MdcTrackDDict_819_0_47, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMenu), -1, 0, 1, 1, 1, 0, "u 'HMdcEffMenu' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_819_0_48, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEffMenu), -1, 1, 1, 1, 1, 0, "u 'HMdcEffMenu' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTargetMon(void) {
   /* HMdcTargetMon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTargetMon));
   G__memfunc_setup("HMdcTargetMon",1261,G__MdcTrackDDict_822_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTargetMon), -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 'kFALSE' isClOff h - 'UInt_t' 0 '0' pt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTargetMon",1261,G__MdcTrackDDict_822_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTargetMon), -1, 0, 4, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"g - 'Bool_t' 0 'kFALSE' isClOff h - 'UInt_t' 0 '0' pt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("drawCanvases",1250,G__MdcTrackDDict_822_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCanvasesRunsSum",1983,G__MdcTrackDDict_822_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMode",721,G__MdcTrackDDict_822_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 - m C - 'Char_t' 10 '0' fileType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHistPar",1031,G__MdcTrackDDict_822_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nb d - 'Double_t' 0 - z1 "
"d - 'Double_t' 0 - z2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTargPos",1036,G__MdcTrackDDict_822_0_11, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - xt d - 'Double_t' 0 - yt "
"d - 'Double_t' 0 - zt i - 'Int_t' 0 '-1' sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeStep",1143,G__MdcTrackDDict_822_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - tst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHistsMode",1244,G__MdcTrackDDict_822_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - hMode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawDownScalHist",1633,G__MdcTrackDDict_822_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawTrigCondHist",1632,G__MdcTrackDDict_822_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFillSegFlag",1388,G__MdcTrackDDict_822_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRCut",714,G__MdcTrackDDict_822_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - rCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDPhiCut",989,G__MdcTrackDDict_822_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dPh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDrawEachFile",1483,G__MdcTrackDDict_822_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDrawSumOfFiles",1719,G__MdcTrackDDict_822_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEachNEventsSave",1807,G__MdcTrackDDict_822_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCollectNRuns",1544,G__MdcTrackDDict_822_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addToCanvasName",1481,G__MdcTrackDDict_822_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - add", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTargetZRegion",1649,G__MdcTrackDDict_822_0_24, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F), -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - fpoint d - 'Double_t' 0 - lpoint "
"i - 'Int_t' 0 '100' nRuns i - 'Int_t' 0 '-1' sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCanvasSize",1347,G__MdcTrackDDict_822_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ww i - 'Int_t' 0 - wh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPathOneRunHits",1736,G__MdcTrackDDict_822_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPathSumRunsHits",1870,G__MdcTrackDDict_822_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setConvertFormat",1686,G__MdcTrackDDict_822_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - p g - 'Bool_t' 0 'kFALSE' delEps", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectEventWithTBits",2052,G__MdcTrackDDict_822_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - tb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doNormalization",1594,G__MdcTrackDDict_822_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDPhiH",749,G__MdcTrackDDict_822_0_31, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F), -1, 2, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ0H",530,G__MdcTrackDDict_822_0_32, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F), -1, 2, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZVerH",783,G__MdcTrackDDict_822_0_33, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F), -1, 2, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZVerDscH",1065,G__MdcTrackDDict_822_0_34, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH1F), -1, 2, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZVerVsEventH",1498,G__MdcTrackDDict_822_0_35, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TH2F), -1, 2, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefParam",1100,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "h - 'UInt_t' 0 '0' pt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initHists",959,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initRunsSumHists",1692,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("extractFileInfo",1543,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillDateTime",1204,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCanvName",1109,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCanvNameForNR",1564,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eventTime",945,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveCanvases",1251,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveCanvasesForNR",1706,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveCanvas",1035,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'TCanvas' - 0 - canv u 'TString' - 1 - path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetHists",1070,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetHistsRunsSum",1803,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makePDF",632,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Char_t' 10 - psFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHistsToRunsSum",1748,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("shiftArrays",1168,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillInOutTargetHist",1941,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillInOutTarHistBin",1902,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEntriesInOutTHist",2049,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawPad",707,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - x2 d - 'Double_t' 0 - y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawPadS",790,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - x2 d - 'Double_t' 0 - y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_822_0_57, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTargetMon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_822_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTargetMon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_822_0_59, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTargetMon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_822_0_60, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTargetMon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_822_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_822_0_65, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTargetMon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_822_0_66, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTargetMon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_822_0_67, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTargetMon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_822_0_68, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTargetMon::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTargetMon", 1387, G__MdcTrackDDict_822_0_69, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcClusInfSim(void) {
   /* HMdcClusInfSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInfSim));
   G__memfunc_setup("HMdcClusInfSim",1337,G__MdcTrackDDict_824_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInfSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTracksList",1360,G__MdcTrackDDict_824_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nTr I - 'Int_t' 10 - list "
"S - 'Short_t' 10 - nTm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_824_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNTracks",1014,G__MdcTrackDDict_824_0_5, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__MdcTrackDDict_824_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - indx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTimesInTrack",1596,G__MdcTrackDDict_824_0_7, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - indx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_824_0_8, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcClusInfSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_824_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusInfSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_824_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcClusInfSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_824_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcClusInfSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_824_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_824_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusInfSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_824_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusInfSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_824_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusInfSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_824_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusInfSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcClusInfSim", 1337, G__MdcTrackDDict_824_0_20, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInfSim), -1, 0, 1, 1, 1, 0, "u 'HMdcClusInfSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcClusInfSim", 1463, G__MdcTrackDDict_824_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_824_0_22, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusInfSim), -1, 1, 1, 1, 1, 0, "u 'HMdcClusInfSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcDGaus(void) {
   /* HMdcDGaus */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus));
   G__memfunc_setup("HMdcDGaus",816,G__MdcTrackDDict_839_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcDGaus",816,G__MdcTrackDDict_839_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDGaus), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - name d - 'Double_t' 0 - xmin "
"d - 'Double_t' 0 - xmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTestCond",1136,G__MdcTrackDDict_839_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - cM f - 'Float_t' 0 - cS1 "
"f - 'Float_t' 0 - cS2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("histFit",731,G__MdcTrackDDict_839_0_4, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 1, 0, 
"U 'TH1F' - 0 - hst f - 'Float_t' 0 - oMean "
"f - 'Float_t' 0 - oSig f - 'Float_t' 1 - nMean "
"f - 'Float_t' 1 - nSig g - 'Bool_t' 0 'kTRUE' doTest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dgaus",532,G__MdcTrackDDict_839_0_5, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&HMdcDGaus::dgaus) ), 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_839_0_6, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcDGaus::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_839_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDGaus::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_839_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcDGaus::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_839_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcDGaus::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_839_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_839_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDGaus::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_839_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDGaus::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_839_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDGaus::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_839_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDGaus::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcDGaus", 942, G__MdcTrackDDict_839_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcRichCorr(void) {
   /* HMdcRichCorr */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRichCorr));
   G__memfunc_setup("HMdcRichCorr",1144,G__MdcTrackDDict_840_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRichCorr), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcRichCorr",1144,G__MdcTrackDDict_840_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcRichCorr), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"i - 'Int_t' 0 '1' nRCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printStatus",1201,G__MdcTrackDDict_840_0_7, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeCalibrater1",1480,G__MdcTrackDDict_840_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '1' vers i - 'Int_t' 0 '1' cut "
"i - 'Int_t' 0 '0' domerge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNLayers",1034,G__MdcTrackDDict_840_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - lst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTypeClFinder",1525,G__MdcTrackDDict_840_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLevel",836,G__MdcTrackDDict_840_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - l4s1 i - 'Int_t' 0 - l5s1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDThetaCuts",1317,G__MdcTrackDDict_840_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - dTh1 f - 'Float_t' 0 - dTh2 "
"f - 'Float_t' 0 '3.' nSig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDPhiCuts",1104,G__MdcTrackDDict_840_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - dPh1 f - 'Float_t' 0 - dPh2 "
"f - 'Float_t' 0 '3.' nSig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDThetaCuts",1317,G__MdcTrackDDict_840_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - dTh f - 'Float_t' 0 '3.' nSig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDPhiCuts",1104,G__MdcTrackDDict_840_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 10 - dPh f - 'Float_t' 0 '3.' nSig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDThetaCutsSig",1608,G__MdcTrackDDict_840_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - mDTh f - 'Float_t' 0 - sDTh "
"f - 'Float_t' 0 '3.' nSig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDPhiCutsSig",1395,G__MdcTrackDDict_840_0_17, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - mDPh f - 'Float_t' 0 - sDPh "
"f - 'Float_t' 0 '3.' nSig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDThetaCuts",1317,G__MdcTrackDDict_840_0_18, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 10 - mDTh F - 'Float_t' 10 - sDTh "
"f - 'Float_t' 0 '3.' nSig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDPhiCuts",1104,G__MdcTrackDDict_840_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 10 - mDPh F - 'Float_t' 10 - sDPh "
"f - 'Float_t' 0 '3.' nSig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHistFile",1124,G__MdcTrackDDict_840_0_20, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - dir C - 'Char_t' 10 - suf "
"C - 'Char_t' 10 '\"NEW\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTestCond",1136,G__MdcTrackDDict_840_0_21, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - cM f - 'Float_t' 0 - cS1 "
"f - 'Float_t' 0 - cS2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSaveFlags",1224,G__MdcTrackDDict_840_0_22, 121, -1, -1, 0, 3, 1, 1, 0, 
"g - 'Bool_t' 0 - hist g - 'Bool_t' 0 - canv "
"g - 'Bool_t' 0 - psfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setup",561,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillListByRichHit",1705,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reinitMdcFinder",1527,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findMdcClusters",1546,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeHist",822,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openHistFile",1226,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TFile), -1, 0, 1, 1, 4, 0, "C - 'Char_t' 10 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("meanDTh",673,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("meanDPh",669,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sigmaDTh",785,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sigmaDPh",781,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcAvMnSg",959,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCut",730,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 4, 0, 
"U 'TLine' - 0 - ln f - 'Float_t' 0 - mean "
"f - 'Float_t' 0 - sigma f - 'Float_t' 0 - nSig "
"i - 'Int_t' 0 - color d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_840_0_35, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcRichCorr::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_840_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRichCorr::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_840_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcRichCorr::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_840_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcRichCorr::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_840_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_840_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRichCorr::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_840_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRichCorr::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_840_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRichCorr::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_840_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRichCorr::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcRichCorr", 1270, G__MdcTrackDDict_840_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSeqArrBlock(void) {
   /* HSeqArrBlock */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock));
   G__memfunc_setup("HSeqArrBlock",1153,G__MdcTrackDDict_841_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSeqArrBlock",1153,G__MdcTrackDDict_841_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock), -1, 0, 1, 1, 1, 0, "U 'HSeqArrBlock' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("expand",640,G__MdcTrackDDict_841_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("blockIndex",1027,G__MdcTrackDDict_841_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 1, 3, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) G__func2void( (UInt_t (*)(UInt_t))(&HSeqArrBlock::blockIndex) ), 0);
   G__memfunc_setup("indexInBlock",1210,G__MdcTrackDDict_841_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 1, 3, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) G__func2void( (UInt_t (*)(UInt_t))(&HSeqArrBlock::indexInBlock) ), 0);
   G__memfunc_setup("getArr",613,G__MdcTrackDDict_841_0_6, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBlockNumber",1428,G__MdcTrackDDict_841_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextBlock",1226,G__MdcTrackDDict_841_0_8, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_841_0_9, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSeqArrBlock::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_841_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSeqArrBlock::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_841_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSeqArrBlock::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_841_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSeqArrBlock::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_841_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_841_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSeqArrBlock::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_841_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSeqArrBlock::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_841_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSeqArrBlock::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_841_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSeqArrBlock::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSeqArrBlock", 1153, G__MdcTrackDDict_841_0_21, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock), -1, 0, 1, 1, 1, 0, "u 'HSeqArrBlock' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSeqArrBlock", 1279, G__MdcTrackDDict_841_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_841_0_23, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock), -1, 1, 1, 1, 1, 0, "u 'HSeqArrBlock' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSeqArrIter(void) {
   /* HSeqArrIter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter));
   G__memfunc_setup("next",447,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i 'ESeqArrType' - 0 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextAExp",813,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i 'ESeqArrType' - 0 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNotFirst",1157,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSeqArrIter",1066,G__MdcTrackDDict_843_0_4, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter), -1, 0, 0, 1, 1, 0, "", "NOT for user!!!", (void*) NULL, 0);
   G__memfunc_setup("HSeqArrIter",1066,G__MdcTrackDDict_843_0_5, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter), -1, 0, 1, 1, 1, 0, "U 'HSeqArr' - 0 - arr", "NOT for user!!!", (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__MdcTrackDDict_843_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("next",447,G__MdcTrackDDict_843_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextAndExpand",1330,G__MdcTrackDDict_843_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCursor",970,G__MdcTrackDDict_843_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' indArr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCursor",958,G__MdcTrackDDict_843_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_843_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "c - 'Char_t' 0 - e", "Set element in cursor position", (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_843_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_843_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_843_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_843_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_843_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_843_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_843_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_843_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_843_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcTrackDDict_843_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "c - 'Char_t' 1 - e", "Get element from cursor position", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "b - 'UChar_t' 1 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 1 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "r - 'UShort_t' 1 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 1 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 1 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 1 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "m - 'ULong64_t' 1 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 1 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 1 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 1 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 2 - e", "Get element from cursor position", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "B - 'UChar_t' 2 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "S - 'Short_t' 2 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 2 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "I - 'Int_t' 2 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "H - 'UInt_t' 2 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "N - 'Long64_t' 2 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "M - 'ULong64_t' 2 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "F - 'Float_t' 2 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "D - 'Double_t' 2 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("get",320,G__MdcTrackDDict_843_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "G - 'Bool_t' 2 - e", "...", (void*) NULL, 0);
   G__memfunc_setup("setNext",747,G__MdcTrackDDict_843_0_44, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "c - 'Char_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNext",747,G__MdcTrackDDict_843_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNext",747,G__MdcTrackDDict_843_0_46, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNext",747,G__MdcTrackDDict_843_0_47, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNext",747,G__MdcTrackDDict_843_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNext",747,G__MdcTrackDDict_843_0_49, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNext",747,G__MdcTrackDDict_843_0_50, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNext",747,G__MdcTrackDDict_843_0_51, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNext",747,G__MdcTrackDDict_843_0_52, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNext",747,G__MdcTrackDDict_843_0_53, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNext",747,G__MdcTrackDDict_843_0_54, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_55, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "c - 'Char_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_56, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "b - 'UChar_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_57, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_58, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "r - 'UShort_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_59, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_60, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_61, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_62, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "m - 'ULong64_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_63, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_64, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_65, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_66, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 2 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_67, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "B - 'UChar_t' 2 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_68, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "S - 'Short_t' 2 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_69, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 2 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_70, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "I - 'Int_t' 2 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_71, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "H - 'UInt_t' 2 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_72, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "N - 'Long64_t' 2 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_73, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "M - 'ULong64_t' 2 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_74, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "F - 'Float_t' 2 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_75, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "D - 'Double_t' 2 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_843_0_76, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "G - 'Bool_t' 2 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_843_0_77, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSeqArrIter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_843_0_78, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSeqArrIter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_843_0_79, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSeqArrIter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_843_0_80, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSeqArrIter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_843_0_84, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_843_0_85, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSeqArrIter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_843_0_86, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSeqArrIter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_843_0_87, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSeqArrIter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_843_0_88, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSeqArrIter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSeqArrIter", 1066, G__MdcTrackDDict_843_0_89, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter), -1, 0, 1, 1, 1, 0, "u 'HSeqArrIter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSeqArrIter", 1192, G__MdcTrackDDict_843_0_90, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_843_0_91, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter), -1, 1, 1, 1, 1, 0, "u 'HSeqArrIter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSeqArr(void) {
   /* HSeqArr */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr));
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i 'ESeqArrType' - 0 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCurrBlock",1235,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("err",329,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i 'ESeqArrType' - 0 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNotFirst",1157,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("next",447,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i 'ESeqArrType' - 0 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextAExp",813,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i 'ESeqArrType' - 0 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "c - 'Char_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "b - 'UChar_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "s - 'Short_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "r - 'UShort_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "h - 'UInt_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "n - 'Long64_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "m - 'ULong64_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "f - 'Float_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "d - 'Double_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "g - 'Bool_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "c - 'Char_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "b - 'UChar_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "s - 'Short_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "r - 'UShort_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "h - 'UInt_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "n - 'Long64_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "m - 'ULong64_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "f - 'Float_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "d - 'Double_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "g - 'Bool_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSeqArr",662,G__MdcTrackDDict_845_0_29, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSeqArr",662,G__MdcTrackDDict_845_0_30, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr), -1, 0, 1, 1, 1, 0, "i 'ESeqArrType' - 0 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSeqArr",662,G__MdcTrackDDict_845_0_31, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr), -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setArrType",1043,G__MdcTrackDDict_845_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i 'ESeqArrType' - 0 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArraySize",1242,G__MdcTrackDDict_845_0_33, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMemSize",1018,G__MdcTrackDDict_845_0_34, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeIterator",1256,G__MdcTrackDDict_845_0_35, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrIter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isBoundOk",910,G__MdcTrackDDict_845_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rewind",649,G__MdcTrackDDict_845_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addElement",1011,G__MdcTrackDDict_845_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", "adding new element and setting cursor", (void*) NULL, 0);
   G__memfunc_setup("setCursor",970,G__MdcTrackDDict_845_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' indArr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__MdcTrackDDict_845_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__MdcTrackDDict_845_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__MdcTrackDDict_845_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__MdcTrackDDict_845_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__MdcTrackDDict_845_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__MdcTrackDDict_845_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__MdcTrackDDict_845_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__MdcTrackDDict_845_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__MdcTrackDDict_845_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__MdcTrackDDict_845_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__MdcTrackDDict_845_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__MdcTrackDDict_845_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__MdcTrackDDict_845_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__MdcTrackDDict_845_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__MdcTrackDDict_845_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__MdcTrackDDict_845_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__MdcTrackDDict_845_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__MdcTrackDDict_845_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__MdcTrackDDict_845_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__MdcTrackDDict_845_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__MdcTrackDDict_845_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__MdcTrackDDict_845_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNext",712,G__MdcTrackDDict_845_0_62, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "c - 'Char_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNext",712,G__MdcTrackDDict_845_0_63, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNext",712,G__MdcTrackDDict_845_0_64, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNext",712,G__MdcTrackDDict_845_0_65, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNext",712,G__MdcTrackDDict_845_0_66, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNext",712,G__MdcTrackDDict_845_0_67, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNext",712,G__MdcTrackDDict_845_0_68, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNext",712,G__MdcTrackDDict_845_0_69, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNext",712,G__MdcTrackDDict_845_0_70, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNext",712,G__MdcTrackDDict_845_0_71, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNext",712,G__MdcTrackDDict_845_0_72, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_845_0_73, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "c - 'Char_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_845_0_74, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "b - 'UChar_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_845_0_75, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "s - 'Short_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_845_0_76, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "r - 'UShort_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_845_0_77, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_845_0_78, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_845_0_79, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_845_0_80, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "m - 'ULong64_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_845_0_81, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_845_0_82, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNext",735,G__MdcTrackDDict_845_0_83, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 1 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWordLength",1342,G__MdcTrackDDict_845_0_84, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstBlock",1331,G__MdcTrackDDict_845_0_85, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArrBlock), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tpOk",414,G__MdcTrackDDict_845_0_86, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i 'ESeqArrType' - 0 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addBlock",788,G__MdcTrackDDict_845_0_87, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArrSize",1024,G__MdcTrackDDict_845_0_88, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("increaseArrSize",1546,G__MdcTrackDDict_845_0_89, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_845_0_90, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSeqArr::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_845_0_91, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSeqArr::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_845_0_92, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSeqArr::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_845_0_93, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSeqArr::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_845_0_97, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_845_0_98, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSeqArr::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_845_0_99, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSeqArr::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_845_0_100, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSeqArr::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_845_0_101, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSeqArr::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSeqArr", 662, G__MdcTrackDDict_845_0_102, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr), -1, 0, 1, 1, 1, 0, "u 'HSeqArr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSeqArr", 788, G__MdcTrackDDict_845_0_103, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_845_0_104, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HSeqArr), -1, 1, 1, 1, 1, 0, "u 'HSeqArr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcStoreWires(void) {
   /* HMdcStoreWires */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreWires));
   G__memfunc_setup("HMdcStoreWires",1395,G__MdcTrackDDict_846_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreWires), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxMemSize",1324,G__MdcTrackDDict_846_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - mSize", "mSize - in Mb!", (void*) NULL, 0);
   G__memfunc_setup("getMemSize",1018,G__MdcTrackDDict_846_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("testMemSize",1146,G__MdcTrackDDict_846_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addWireAddr",1083,G__MdcTrackDDict_846_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEndEvent",1125,G__MdcTrackDDict_846_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetIter",951,G__MdcTrackDDict_846_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNextEvent",1249,G__MdcTrackDDict_846_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextWireAddr",1521,G__MdcTrackDDict_846_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("packAddress",1125,G__MdcTrackDDict_846_0_10, 114, -1, G__defined_typename("UShort_t"), 0, 4, 3, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c", (char*)NULL, (void*) G__func2void( (UShort_t (*)(Int_t, Int_t, Int_t, Int_t))(&HMdcStoreWires::packAddress) ), 0);
   G__memfunc_setup("unpackAddress",1352,G__MdcTrackDDict_846_0_11, 121, -1, -1, 0, 5, 3, 1, 0, 
"r - 'UShort_t' 1 - addr i - 'Int_t' 1 - s "
"i - 'Int_t' 1 - m i - 'Int_t' 1 - l "
"i - 'Int_t' 1 - c", (char*)NULL, (void*) G__func2void( (void (*)(UShort_t&, Int_t&, Int_t&, Int_t&, Int_t&))(&HMdcStoreWires::unpackAddress) ), 0);
   G__memfunc_setup("addEvent",811,G__MdcTrackDDict_846_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcEvntListCells' - 11 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextEvent",1249,G__MdcTrackDDict_846_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HMdcEvntListCells' - 1 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_846_0_14, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcStoreWires::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_846_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcStoreWires::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_846_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcStoreWires::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_846_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcStoreWires::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_846_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_846_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcStoreWires::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_846_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcStoreWires::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_846_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcStoreWires::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_846_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcStoreWires::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcStoreWires", 1395, G__MdcTrackDDict_846_0_26, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreWires), -1, 0, 1, 1, 1, 0, "u 'HMdcStoreWires' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcStoreWires", 1521, G__MdcTrackDDict_846_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_846_0_28, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreWires), -1, 1, 1, 1, 1, 0, "u 'HMdcStoreWires' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcStoreEvents(void) {
   /* HMdcStoreEvents */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreEvents));
   G__memfunc_setup("HMdcStoreEvents",1502,G__MdcTrackDDict_847_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreEvents), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxMemSize",1324,G__MdcTrackDDict_847_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - mSize", "mSize - in Mb!", (void*) NULL, 0);
   G__memfunc_setup("getMemSize",1018,G__MdcTrackDDict_847_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("testMemSize",1146,G__MdcTrackDDict_847_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addWire",704,G__MdcTrackDDict_847_0_5, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"f - 'Float_t' 0 - tm g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEndEvent",1125,G__MdcTrackDDict_847_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetIter",951,G__MdcTrackDDict_847_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNextEvent",1249,G__MdcTrackDDict_847_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextCell",1119,G__MdcTrackDDict_847_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"f - 'Float_t' 1 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextCell",1119,G__MdcTrackDDict_847_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"f - 'Float_t' 1 - tm g - 'Bool_t' 1 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextCell",1119,G__MdcTrackDDict_847_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"f - 'Float_t' 1 - tm g - 'Bool_t' 1 - flag "
"H - 'UInt_t' 2 - addr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("packCell",799,G__MdcTrackDDict_847_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 6, 3, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"f - 'Float_t' 0 - tm g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) G__func2void( (UInt_t (*)(Int_t, Int_t, Int_t, Int_t, Float_t, Bool_t))(&HMdcStoreEvents::packCell) ), 0);
   G__memfunc_setup("unpackCell",1026,G__MdcTrackDDict_847_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 6, 3, 1, 0, 
"h - 'UInt_t' 1 - addr i - 'Int_t' 1 - s "
"i - 'Int_t' 1 - m i - 'Int_t' 1 - l "
"i - 'Int_t' 1 - c f - 'Float_t' 1 - tm", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UInt_t&, Int_t&, Int_t&, Int_t&, Int_t&, Float_t&))(&HMdcStoreEvents::unpackCell) ), 0);
   G__memfunc_setup("unsetFlag",937,G__MdcTrackDDict_847_0_14, 121, -1, -1, 0, 1, 3, 1, 0, "h - 'UInt_t' 1 - addr", (char*)NULL, (void*) G__func2void( (void (*)(UInt_t&))(&HMdcStoreEvents::unsetFlag) ), 0);
   G__memfunc_setup("setFlag",710,G__MdcTrackDDict_847_0_15, 121, -1, -1, 0, 1, 3, 1, 0, "h - 'UInt_t' 1 - addr", "0x10000=1<<16;", (void*) G__func2void( (void (*)(UInt_t&))(&HMdcStoreEvents::setFlag) ), 0);
   G__memfunc_setup("addEvent",811,G__MdcTrackDDict_847_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcEvntListCells' - 11 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextEvent",1249,G__MdcTrackDDict_847_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'HMdcEvntListCells' - 1 - event g - 'Bool_t' 0 'kFALSE' checkFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_847_0_18, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcStoreEvents::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_847_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcStoreEvents::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_847_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcStoreEvents::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_847_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcStoreEvents::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_847_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_847_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcStoreEvents::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_847_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcStoreEvents::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_847_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcStoreEvents::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_847_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcStoreEvents::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcStoreEvents", 1502, G__MdcTrackDDict_847_0_30, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreEvents), -1, 0, 1, 1, 1, 0, "u 'HMdcStoreEvents' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcStoreEvents", 1628, G__MdcTrackDDict_847_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_847_0_32, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreEvents), -1, 1, 1, 1, 1, 0, "u 'HMdcStoreEvents' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcStoreTracks(void) {
   /* HMdcStoreTracks */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreTracks));
   G__memfunc_setup("HMdcStoreTracks",1489,G__MdcTrackDDict_848_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreTracks), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMemSize",1018,G__MdcTrackDDict_848_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setEndTrack",1112,G__MdcTrackDDict_848_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEndEvent",1125,G__MdcTrackDDict_848_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackPar",1124,G__MdcTrackDDict_848_0_5, 121, -1, -1, 0, 8, 1, 1, 0, 
"b - 'UChar_t' 0 - s b - 'UChar_t' 0 - m1 "
"f - 'Float_t' 0 - xf f - 'Float_t' 0 - yf "
"b - 'UChar_t' 0 - m2 f - 'Float_t' 0 - xl "
"f - 'Float_t' 0 - yl b - 'UChar_t' 0 '1' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetIter",951,G__MdcTrackDDict_848_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", "must be called ones per clusters loop", (void*) NULL, 1);
   G__memfunc_setup("nextEvent",961,G__MdcTrackDDict_848_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextTrack",948,G__MdcTrackDDict_848_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventFlag",1212,G__MdcTrackDDict_848_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackFlag",1199,G__MdcTrackDDict_848_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcTrackDDict_848_0_11, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMod1",657,G__MdcTrackDDict_848_0_12, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMod2",658,G__MdcTrackDDict_848_0_13, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumEventTracks",1754,G__MdcTrackDDict_848_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX1",457,G__MdcTrackDDict_848_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY1",458,G__MdcTrackDDict_848_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ1",459,G__MdcTrackDDict_848_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX2",458,G__MdcTrackDDict_848_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY2",459,G__MdcTrackDDict_848_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ2",460,G__MdcTrackDDict_848_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackPar",1112,G__MdcTrackDDict_848_0_21, 121, -1, -1, 0, 4, 1, 1, 8, 
"f - 'Float_t' 1 - xf f - 'Float_t' 1 - yf "
"f - 'Float_t' 1 - xl f - 'Float_t' 1 - yl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPoint1",891,G__MdcTrackDDict_848_0_22, 121, -1, -1, 0, 1, 1, 1, 8, "u 'HGeomVector' - 1 - p1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPoint2",892,G__MdcTrackDDict_848_0_23, 121, -1, -1, 0, 1, 1, 1, 8, "u 'HGeomVector' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPoints",957,G__MdcTrackDDict_848_0_24, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'HGeomVector' - 1 - p1 u 'HGeomVector' - 1 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetEventIter",1465,G__MdcTrackDDict_848_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", "for reading the same event again", (void*) NULL, 0);
   G__memfunc_setup("resetTrackPar",1339,G__MdcTrackDDict_848_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - xt f - 'Float_t' 0 - yt "
"f - 'Float_t' 0 - xp f - 'Float_t' 0 - yp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetTrackFlag",1426,G__MdcTrackDDict_848_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetEventFlag",1439,G__MdcTrackDDict_848_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isEnd",499,G__MdcTrackDDict_848_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackPar",1112,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_848_0_32, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcStoreTracks::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_848_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcStoreTracks::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_848_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcStoreTracks::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_848_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcStoreTracks::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_848_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_848_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcStoreTracks::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_848_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcStoreTracks::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_848_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcStoreTracks::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_848_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcStoreTracks::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcStoreTracks", 1489, G__MdcTrackDDict_848_0_44, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreTracks), -1, 0, 1, 1, 1, 0, "u 'HMdcStoreTracks' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcStoreTracks", 1615, G__MdcTrackDDict_848_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_848_0_46, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreTracks), -1, 1, 1, 1, 1, 0, "u 'HMdcStoreTracks' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcStoreClusters(void) {
   /* HMdcStoreClusters */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreClusters));
   G__memfunc_setup("HMdcStoreClusters",1726,G__MdcTrackDDict_849_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreClusters), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMemSize",1018,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setEndCluster",1349,G__MdcTrackDDict_849_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetIter",951,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "must be called ones per clusters loop", (void*) NULL, 1);
   G__memfunc_setup("getNextCluster",1473,G__MdcTrackDDict_849_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextCell",1119,G__MdcTrackDDict_849_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"f - 'Float_t' 1 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextCell",1119,G__MdcTrackDDict_849_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c "
"f - 'Float_t' 1 - tm g - 'Bool_t' 1 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addClustWires",1342,G__MdcTrackDDict_849_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HMdcEvntListCells' - 11 - event U 'HMdcClus' - 10 - cl", "store wires list only", (void*) NULL, 0);
   G__memfunc_setup("addClustWires",1342,G__MdcTrackDDict_849_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'HMdcEvntListCells' - 11 - event U 'HMdcClus' - 10 - cl1 "
"U 'HMdcClus' - 10 - cl2", "store wires list only", (void*) NULL, 0);
   G__memfunc_setup("getNextCluster",1473,G__MdcTrackDDict_849_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'HMdcEvntListCells' - 1 - event g - 'Bool_t' 0 'kFALSE' checkFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetFlag",937,G__MdcTrackDDict_849_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - si i - 'Int_t' 0 - mi "
"i - 'Int_t' 0 - li i - 'Int_t' 0 - ci", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlag",710,G__MdcTrackDDict_849_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - si i - 'Int_t' 0 - mi "
"i - 'Int_t' 0 - li i - 'Int_t' 0 - ci", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_849_0_13, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcStoreClusters::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_849_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcStoreClusters::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_849_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcStoreClusters::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_849_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcStoreClusters::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_849_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_849_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcStoreClusters::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_849_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcStoreClusters::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_849_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcStoreClusters::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_849_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcStoreClusters::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcStoreClusters", 1726, G__MdcTrackDDict_849_0_25, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreClusters), -1, 0, 1, 1, 1, 0, "u 'HMdcStoreClusters' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcStoreClusters", 1852, G__MdcTrackDDict_849_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_849_0_27, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreClusters), -1, 1, 1, 1, 1, 0, "u 'HMdcStoreClusters' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcDeDx2(void) {
   /* HMdcDeDx2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2));
   G__memfunc_setup("sort",456,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillingInput",1269,(G__InterfaceMethod) NULL, 98, -1, G__defined_typename("UChar_t"), 0, 2, 1, 2, 0, 
"U 'HMdcSeg' - 2 - seg i - 'Int_t' 0 '0' inputselect", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("select",640,(G__InterfaceMethod) NULL, 98, -1, G__defined_typename("UChar_t"), 0, 4, 1, 2, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"b - 'UChar_t' 0 - - f - 'Float_t' 0 '-99.' wind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSegPoints",1327,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 7, 1, 2, 0, 
"U 'HMdcSeg' - 0 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcLength",1013,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 2, 0, 
"i - 'Int_t' 0 - m d - 'Double_t' 0 - angle "
"d - 'Double_t' 0 - dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcDeDx2",755,G__MdcTrackDDict_867_0_6, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcDeDx2\"' name C - 'Char_t' 10 '\"Mdc lookup for MDC dEdX calculation\"' title "
"C - 'Char_t' 10 '\"MdcDeDx2Production\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initContainer",1367,G__MdcTrackDDict_867_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createMaxPar",1213,G__MdcTrackDDict_867_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcTrackDDict_867_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"all\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFuncPar",1019,G__MdcTrackDDict_867_0_13, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - abin i - 'Int_t' 0 - dbin "
"D - 'Double_t' 0 - p i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFuncPar",1019,G__MdcTrackDDict_867_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFuncMaxPar",1313,G__MdcTrackDDict_867_0_15, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - abin i - 'Int_t' 0 - dbin "
"d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFuncMaxPar",1313,G__MdcTrackDDict_867_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFuncWidthPar",1531,G__MdcTrackDDict_867_0_17, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - abin i - 'Int_t' 0 - dbin "
"D - 'Double_t' 0 - p i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFuncWidthPar",1531,G__MdcTrackDDict_867_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFuncGainPar",1402,G__MdcTrackDDict_867_0_19, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"d - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFuncGainPar",1402,G__MdcTrackDDict_867_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinDistCutPar",1619,G__MdcTrackDDict_867_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - m d - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinDistCutPar",1619,G__MdcTrackDDict_867_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFuncPar",1007,G__MdcTrackDDict_867_0_23, 68, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - abin i - 'Int_t' 0 - dbin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFuncPar",1007,G__MdcTrackDDict_867_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFuncMaxPar",1301,G__MdcTrackDDict_867_0_25, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - abin i - 'Int_t' 0 - dbin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFuncMaxPar",1301,G__MdcTrackDDict_867_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFuncWidthPar",1519,G__MdcTrackDDict_867_0_27, 68, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - abin i - 'Int_t' 0 - dbin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFuncWidthPar",1519,G__MdcTrackDDict_867_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFuncGainPar",1390,G__MdcTrackDDict_867_0_29, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFuncGainPar",1390,G__MdcTrackDDict_867_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinDistCutPar",1607,G__MdcTrackDDict_867_0_31, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - m d - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinDistCutPar",1607,G__MdcTrackDDict_867_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getN_Param",990,G__MdcTrackDDict_867_0_33, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getN_Shift_Param",1595,G__MdcTrackDDict_867_0_34, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getN_Angle",980,G__MdcTrackDDict_867_0_35, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getN_Dist",897,G__MdcTrackDDict_867_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWindow",952,G__MdcTrackDDict_867_0_37, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWindow",964,G__MdcTrackDDict_867_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - win", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinimumWires",1574,G__MdcTrackDDict_867_0_39, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinimumWires",1586,G__MdcTrackDDict_867_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - minwires", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebugMode",1208,G__MdcTrackDDict_867_0_41, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - dodebug", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcDeDx2::setDebugMode) ), 0);
   G__memfunc_setup("setUseCalibration",1761,G__MdcTrackDDict_867_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - ok", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray",831,G__MdcTrackDDict_867_0_43, 68, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 1 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDeDx",760,G__MdcTrackDDict_867_0_44, 102, -1, G__defined_typename("Float_t"), 0, 11, 1, 1, 0, 
"U 'HMdcSeg' - 2 - seg F - 'Float_t' 0 - - "
"F - 'Float_t' 0 - - B - 'UChar_t' 0 - - "
"F - 'Float_t' 0 - - B - 'UChar_t' 0 - - "
"i - 'Int_t' 0 '2' vers i - 'Int_t' 0 '2' mod "
"g - 'Bool_t' 0 'kTRUE' useTruncMean f - 'Float_t' 0 '-99.' truncMeanWindow "
"i - 'Int_t' 0 '0' inputselect", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("toTTodEdX",863,G__MdcTrackDDict_867_0_45, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"d - 'Double_t' 0 - angle d - 'Double_t' 0 - mindist "
"d - 'Double_t' 0 - ToT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dEdXToToT",831,G__MdcTrackDDict_867_0_46, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"d - 'Double_t' 0 - angle d - 'Double_t' 0 - mindist "
"d - 'Double_t' 0 - dEdX", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("toTSigma",808,G__MdcTrackDDict_867_0_47, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"d - 'Double_t' 0 - angle d - 'Double_t' 0 - mindist "
"i - 'Int_t' 0 '0' shift", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("normalize",977,G__MdcTrackDDict_867_0_48, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"d - 'Double_t' 0 - angle d - 'Double_t' 0 - mindist "
"d - 'Double_t' 0 - ToT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findBin",698,G__MdcTrackDDict_867_0_49, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - m D - 'Double_t' 0 - angle "
"D - 'Double_t' 0 - mindist I - 'Int_t' 0 - abin "
"I - 'Int_t' 0 - dbin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHeFraction",1327,G__MdcTrackDDict_867_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - fr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHeFraction",1315,G__MdcTrackDDict_867_0_51, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("beta",412,G__MdcTrackDDict_867_0_52, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - id d - 'Double_t' 0 - p", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t))(&HMdcDeDx2::beta) ), 0);
   G__memfunc_setup("gamma",515,G__MdcTrackDDict_867_0_53, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - id d - 'Double_t' 0 - p", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t))(&HMdcDeDx2::gamma) ), 0);
   G__memfunc_setup("energyLoss",1067,G__MdcTrackDDict_867_0_54, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - id d - 'Double_t' 0 - p "
"d - 'Double_t' 0 '0.6' hefr", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t, Double_t))(&HMdcDeDx2::energyLoss) ), 0);
   G__memfunc_setup("energyLossGraph",1565,G__MdcTrackDDict_867_0_55, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TGraph), -1, 0, 7, 3, 1, 0, 
"i - 'Int_t' 0 - id d - 'Double_t' 0 '0.6' hefr "
"u 'TString' - 0 '\"p\"' opt g - 'Bool_t' 0 'kFALSE' exchange "
"i - 'Int_t' 0 '8' markerstyle i - 'Int_t' 0 '2' markercolor "
"f - 'Float_t' 0 '0.7' markersize", (char*)NULL, (void*) G__func2void( (TGraph* (*)(Int_t, Double_t, TString, Bool_t, Int_t, Int_t, Float_t))(&HMdcDeDx2::energyLossGraph) ), 0);
   G__memfunc_setup("betaGraph",910,G__MdcTrackDDict_867_0_56, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TGraph), -1, 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - id i - 'Int_t' 0 '1' opt "
"i - 'Int_t' 0 '8' markerstyle i - 'Int_t' 0 '2' markercolor "
"f - 'Float_t' 0 '0.7' markersize", (char*)NULL, (void*) G__func2void( (TGraph* (*)(Int_t, Int_t, Int_t, Int_t, Float_t))(&HMdcDeDx2::betaGraph) ), 0);
   G__memfunc_setup("scaledTimeAboveThreshold",2453,G__MdcTrackDDict_867_0_57, 100, -1, G__defined_typename("Double_t"), 0, 11, 1, 1, 0, 
"U 'HGeantKine' - 0 '0' kine d - 'Double_t' 0 '-1' p "
"f - 'Float_t' 0 '-999' t1 f - 'Float_t' 0 '-999' t2 "
"F - 'Float_t' 0 '0' t2err i - 'Int_t' 0 '0' s "
"i - 'Int_t' 0 '0' m i - 'Int_t' 0 '0' l "
"i - 'Int_t' 0 '0' c d - 'Double_t' 0 '0' alpha "
"d - 'Double_t' 0 '0' mindist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_867_0_58, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcDeDx2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_867_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDeDx2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_867_0_60, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcDeDx2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_867_0_61, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcDeDx2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_867_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_867_0_66, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDeDx2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_867_0_67, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDeDx2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_867_0_68, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDeDx2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_867_0_69, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDeDx2::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcDeDx2", 755, G__MdcTrackDDict_867_0_70, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2), -1, 0, 1, 1, 1, 0, "u 'HMdcDeDx2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcDeDx2", 881, G__MdcTrackDDict_867_0_71, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_867_0_72, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2), -1, 1, 1, 1, 1, 0, "u 'HMdcDeDx2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcDeDx2Maker(void) {
   /* HMdcDeDx2Maker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2Maker));
   G__memfunc_setup("initParameters",1480,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParContainers",1669,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcDeDx2Maker",1251,G__MdcTrackDDict_868_0_3, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2Maker), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcDeDx2Maker",1251,G__MdcTrackDDict_868_0_4, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcDeDx2Maker), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printStatus",1201,G__MdcTrackDDict_868_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setUseModule",1247,G__MdcTrackDDict_868_0_9, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - m", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HMdcDeDx2Maker::setUseModule) ), 0);
   G__memfunc_setup("setFillCase",1103,G__MdcTrackDDict_868_0_10, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - fcase", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HMdcDeDx2Maker::setFillCase) ), 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_868_0_11, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcDeDx2Maker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_868_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDeDx2Maker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_868_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcDeDx2Maker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_868_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcDeDx2Maker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_868_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_868_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDeDx2Maker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_868_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDeDx2Maker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_868_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDeDx2Maker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_868_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDeDx2Maker::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcDeDx2Maker", 1377, G__MdcTrackDDict_868_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackFitterB(void) {
   /* HMdcTrackFitterB */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterB));
   G__memfunc_setup("HMdcTrackFitterB",1537,G__MdcTrackDDict_869_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterB), -1, 0, 1, 1, 1, 0, "U 'HMdcTrackFitInOut' - 0 - fIO", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("minimize",866,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' iter", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("targetScan",1036,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "g - 'Bool_t' 0 'kFALSE' useTukeyInScan", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("solutionOfLinearEquationsSystem",3275,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'HMdcTrackParam' - 1 - par", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("firstMethod",1161,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("secondMethod",1245,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("doMinimization",1483,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_869_0_8, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackFitterB::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_869_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitterB::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_869_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackFitterB::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_869_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackFitterB::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_869_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_869_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitterB::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_869_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackFitterB::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_869_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFitterB::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_869_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackFitterB::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackFitterB", 1537, G__MdcTrackDDict_869_0_20, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterB), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackFitterB' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackFitterB", 1663, G__MdcTrackDDict_869_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_869_0_22, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitterB), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackFitterB' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcAlignerParam(void) {
   /* HMdcAlignerParam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerParam));
   G__memfunc_setup("HMdcAlignerParam",1551,G__MdcTrackDDict_870_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerParam), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcAlignerParam",1551,G__MdcTrackDDict_870_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerParam), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - alignSec D - 'Double_t' 0 - params "
"D - 'Double_t' 0 - steps I - 'Int_t' 0 - flags "
"U 'HMdcLookUpTb' - 0 - fLookUpTb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcAlignerParam",1551,G__MdcTrackDDict_870_0_3, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerParam), -1, 0, 1, 1, 1, 0, "u 'HMdcAlignerParam' - 11 - tp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__MdcTrackDDict_870_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNMinParams",1302,G__MdcTrackDDict_870_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinParams",1224,G__MdcTrackDDict_870_0_6, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinSteps",1139,G__MdcTrackDDict_870_0_7, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNewPosition",1483,G__MdcTrackDDict_870_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 '0' minParams i - 'Int_t' 0 '0' offset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPlanes",943,G__MdcTrackDDict_870_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printTransforms",1628,G__MdcTrackDDict_870_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 '0' targetParams", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRootFile",1136,G__MdcTrackDDict_870_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRootFile",1124,G__MdcTrackDDict_870_0_12, 117, G__get_linked_tagnum(&G__MdcTrackDDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAlignSec",1106,G__MdcTrackDDict_870_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aSec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlignSec",1094,G__MdcTrackDDict_870_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCluster",1070,G__MdcTrackDDict_870_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - clus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScan",721,G__MdcTrackDDict_870_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - scn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffset",947,G__MdcTrackDDict_870_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - off", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCluster",1058,G__MdcTrackDDict_870_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getScan",709,G__MdcTrackDDict_870_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffset",935,G__MdcTrackDDict_870_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTfSysRSec",1190,G__MdcTrackDDict_870_0_21, 68, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstMod",1128,G__MdcTrackDDict_870_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastMod",1012,G__MdcTrackDDict_870_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyPlanes",1054,G__MdcTrackDDict_870_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcAlignerParam' - 11 - ap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyAlignParams",1546,G__MdcTrackDDict_870_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcAlignerParam' - 11 - ap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAlignParams",1435,G__MdcTrackDDict_870_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNewAlignParams",1733,G__MdcTrackDDict_870_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - minPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copySteps",970,G__MdcTrackDDict_870_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcAlignerParam' - 11 - ap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSteps",859,G__MdcTrackDDict_870_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - st", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyFlags",936,G__MdcTrackDDict_870_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcAlignerParam' - 11 - ap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlags",825,G__MdcTrackDDict_870_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyMinParams",1347,G__MdcTrackDDict_870_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcAlignerParam' - 11 - ap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinParams",1236,G__MdcTrackDDict_870_0_33, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyMinSteps",1262,G__MdcTrackDDict_870_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcAlignerParam' - 11 - ap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOriginalTransforms",2224,G__MdcTrackDDict_870_0_35, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setActualTransforms",2005,G__MdcTrackDDict_870_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copy",443,G__MdcTrackDDict_870_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcAlignerParam' - 11 - ap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSecTrackParams",1716,G__MdcTrackDDict_870_0_38, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 1 - x1 d - 'Double_t' 1 - y1 "
"d - 'Double_t' 1 - z1 d - 'Double_t' 1 - x2 "
"d - 'Double_t' 1 - y2 d - 'Double_t' 1 - z2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModTrackParams",1721,G__MdcTrackDDict_870_0_39, 121, -1, -1, 0, 10, 1, 1, 0, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - z1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2 d - 'Double_t' 0 - z2 "
"d - 'Double_t' 1 - xFirstMod d - 'Double_t' 1 - yFirstMod "
"d - 'Double_t' 1 - xLastMod d - 'Double_t' 1 - yLastMod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_870_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - header", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_870_0_41, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcAlignerParam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_870_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcAlignerParam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_870_0_43, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcAlignerParam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_870_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcAlignerParam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_870_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_870_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcAlignerParam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_870_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcAlignerParam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_870_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcAlignerParam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_870_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcAlignerParam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcAlignerParam", 1677, G__MdcTrackDDict_870_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcAlignerD(void) {
   /* HMdcAlignerD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD));
   G__memfunc_setup("HMdcAlignerD",1122,G__MdcTrackDDict_871_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD), -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 - isCOff i - 'Int_t' 0 '0' typeClFn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcAlignerD",1122,G__MdcTrackDDict_871_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD), -1, 0, 4, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"g - 'Bool_t' 0 - isCOff i - 'Int_t' 0 '0' typeClFn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcAlignerD",1122,G__MdcTrackDDict_871_0_3, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcAlignerD",1122,G__MdcTrackDDict_871_0_4, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerD), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("monitor",776,G__MdcTrackDDict_871_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomVector' - 0 '0' target", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStoreWires",1367,G__MdcTrackDDict_871_0_10, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreEvents), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStoreClusters",1698,G__MdcTrackDDict_871_0_11, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcStoreClusters), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvent",834,G__MdcTrackDDict_871_0_12, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcEvntListCells), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitter",942,G__MdcTrackDDict_871_0_13, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcTrackFitter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParam",817,G__MdcTrackDDict_871_0_14, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcAlignerParam), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCluster",1295,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'HMdcClus' - 0 - fClst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_871_0_16, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcAlignerD::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_871_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcAlignerD::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_871_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcAlignerD::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_871_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcAlignerD::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_871_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_871_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcAlignerD::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_871_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcAlignerD::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_871_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcAlignerD::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_871_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcAlignerD::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcAlignerD", 1248, G__MdcTrackDDict_871_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcClusFitSim(void) {
   /* HMdcClusFitSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFitSim));
   G__memfunc_setup("HMdcClusFitSim",1343,G__MdcTrackDDict_872_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFitSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumTracks",1252,G__MdcTrackDDict_872_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumTracksClus",1659,G__MdcTrackDDict_872_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantTrackNum",1632,G__MdcTrackDDict_872_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumWiresTrack",1659,G__MdcTrackDDict_872_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumWiresTrClus",1763,G__MdcTrackDDict_872_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX1Geant",964,G__MdcTrackDDict_872_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY1Geant",965,G__MdcTrackDDict_872_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ1Geant",966,G__MdcTrackDDict_872_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX2Geant",965,G__MdcTrackDDict_872_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY2Geant",966,G__MdcTrackDDict_872_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ2Geant",967,G__MdcTrackDDict_872_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPrimaryFlag",1450,G__MdcTrackDDict_872_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFakeTrack",1208,G__MdcTrackDDict_872_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYZ1Geant",1143,G__MdcTrackDDict_872_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYZ2Geant",1144,G__MdcTrackDDict_872_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParticleID",1293,G__MdcTrackDDict_872_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMomentum",1182,G__MdcTrackDDict_872_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFakeFlag",1085,G__MdcTrackDDict_872_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumTracks",1240,G__MdcTrackDDict_872_0_20, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumTracksClus",1647,G__MdcTrackDDict_872_0_21, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrackNum",1620,G__MdcTrackDDict_872_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumWiresTrack",1647,G__MdcTrackDDict_872_0_23, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumWiresTrClus",1751,G__MdcTrackDDict_872_0_24, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX1Geant",952,G__MdcTrackDDict_872_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY1Geant",953,G__MdcTrackDDict_872_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ1Geant",954,G__MdcTrackDDict_872_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX2Geant",953,G__MdcTrackDDict_872_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY2Geant",954,G__MdcTrackDDict_872_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ2Geant",955,G__MdcTrackDDict_872_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isPrimary",960,G__MdcTrackDDict_872_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTrackDirGood",1401,G__MdcTrackDDict_872_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantPhi",1104,G__MdcTrackDDict_872_0_33, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTheta",1317,G__MdcTrackDDict_872_0_34, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantRZmin",1311,G__MdcTrackDDict_872_0_35, 121, -1, -1, 0, 4, 1, 1, 8, 
"f - 'Float_t' 1 - zm f - 'Float_t' 1 - r0 "
"f - 'Float_t' 0 '0.' xBm f - 'Float_t' 0 '0.' yBm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParticleID",1281,G__MdcTrackDDict_872_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMomentum",1170,G__MdcTrackDDict_872_0_37, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dX1",237,G__MdcTrackDDict_872_0_38, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dY1",238,G__MdcTrackDDict_872_0_39, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dZ1",239,G__MdcTrackDDict_872_0_40, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dX2",238,G__MdcTrackDDict_872_0_41, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dY2",239,G__MdcTrackDDict_872_0_42, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dZ2",240,G__MdcTrackDDict_872_0_43, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFakeGeant",1090,G__MdcTrackDDict_872_0_44, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPurity",973,G__MdcTrackDDict_872_0_45, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEfficiency",1333,G__MdcTrackDDict_872_0_46, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printSimVsRec",1337,G__MdcTrackDDict_872_0_47, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("isGeant",715,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_872_0_50, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcClusFitSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_872_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusFitSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_872_0_52, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcClusFitSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_872_0_53, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcClusFitSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_872_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_872_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusFitSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_872_0_59, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusFitSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_872_0_60, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusFitSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_872_0_61, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusFitSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcClusFitSim", 1343, G__MdcTrackDDict_872_0_62, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFitSim), -1, 0, 1, 1, 1, 0, "u 'HMdcClusFitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcClusFitSim", 1469, G__MdcTrackDDict_872_0_63, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_872_0_64, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClusFitSim), -1, 1, 1, 1, 1, 0, "u 'HMdcClusFitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcMinimize(void) {
   /* HMdcMinimize */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcMinimize));
   G__memfunc_setup("HMdcMinimize",1182,G__MdcTrackDDict_874_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcMinimize), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFCN",547,G__MdcTrackDDict_874_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TObject' - 0 - obj 1 - 'Double_t (*)(TObject*, Int_t&, Double_t*)' 0 - fcn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("minimize",866,G__MdcTrackDDict_874_0_3, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - maxIter i - 'Int_t' 0 - nParIn "
"D - 'Double_t' 0 - par0 D - 'Double_t' 0 - stepPar "
"D - 'Double_t' 0 - parOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("minimize2",916,G__MdcTrackDDict_874_0_4, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - maxIter i - 'Int_t' 0 - nParIn "
"D - 'Double_t' 0 - par0 D - 'Double_t' 0 - stepPar "
"D - 'Double_t' 0 - parOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculationOfGradient",2162,G__MdcTrackDDict_874_0_5, 121, -1, -1, 0, 7, 1, 1, 0, 
"d - 'Double_t' 0 - fun0 D - 'Double_t' 0 - par "
"D - 'Double_t' 0 - stepPar i - 'Int_t' 0 - nPar "
"d - 'Double_t' 1 - agrad D - 'Double_t' 0 - cosgrad "
"i - 'Int_t' 0 - iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("solutionOfLinearEquationsSystem",3275,G__MdcTrackDDict_874_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - par i - 'Int_t' 0 - nmOfPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("minpar2",697,G__MdcTrackDDict_874_0_7, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - maxIter i - 'Int_t' 0 - nParIn "
"D - 'Double_t' 0 - par0 D - 'Double_t' 0 - stepPar "
"D - 'Double_t' 0 - parOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("minbar",633,G__MdcTrackDDict_874_0_8, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - maxIter i - 'Int_t' 0 - nParIn "
"D - 'Double_t' 0 - par0 D - 'Double_t' 0 - stepPar "
"D - 'Double_t' 0 - parOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scan",421,G__MdcTrackDDict_874_0_9, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - maxIter i - 'Int_t' 0 - nParIn "
"D - 'Double_t' 0 - par0 D - 'Double_t' 0 - parOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scanXYZ",688,G__MdcTrackDDict_874_0_10, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - maxIter i - 'Int_t' 0 - nParIn "
"D - 'Double_t' 0 - par0 D - 'Double_t' 0 - parOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("random",641,G__MdcTrackDDict_874_0_11, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - maxIter i - 'Int_t' 0 - nParIn "
"D - 'Double_t' 0 - par0 D - 'Double_t' 0 - parOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cog",313,G__MdcTrackDDict_874_0_12, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - maxIter i - 'Int_t' 0 - nParIn "
"D - 'Double_t' 0 - par0 D - 'Double_t' 0 - parOut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFunct0",880,G__MdcTrackDDict_874_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFunctional",1363,G__MdcTrackDDict_874_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_874_0_15, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcMinimize::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_874_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcMinimize::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_874_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcMinimize::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_874_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcMinimize::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_874_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_874_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcMinimize::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_874_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcMinimize::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_874_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcMinimize::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_874_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcMinimize::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcMinimize", 1182, G__MdcTrackDDict_874_0_27, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcMinimize), -1, 0, 1, 1, 1, 0, "u 'HMdcMinimize' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcMinimize", 1308, G__MdcTrackDDict_874_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_874_0_29, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcMinimize), -1, 1, 1, 1, 1, 0, "u 'HMdcMinimize' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcWireFitSim(void) {
   /* HMdcWireFitSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFitSim));
   G__memfunc_setup("HMdcWireFitSim",1343,G__MdcTrackDDict_875_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFitSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantTrackNum",1632,G__MdcTrackDDict_875_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantMinDist",1523,G__MdcTrackDDict_875_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantAlpha",1313,G__MdcTrackDDict_875_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDigiTimeErr",1409,G__MdcTrackDDict_875_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantTof",1124,G__MdcTrackDDict_875_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusFitTrFlag",1606,G__MdcTrackDDict_875_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrackNum",1620,G__MdcTrackDDict_875_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantMinDist",1511,G__MdcTrackDDict_875_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantAlpha",1301,G__MdcTrackDDict_875_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDigiTimeErr",1397,G__MdcTrackDDict_875_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTof",1112,G__MdcTrackDDict_875_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isClusFitTrack",1419,G__MdcTrackDDict_875_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGeant",715,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_875_0_16, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcWireFitSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_875_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWireFitSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_875_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcWireFitSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_875_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcWireFitSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_875_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_875_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWireFitSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_875_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcWireFitSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_875_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWireFitSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_875_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcWireFitSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcWireFitSim", 1343, G__MdcTrackDDict_875_0_28, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFitSim), -1, 0, 1, 1, 1, 0, "u 'HMdcWireFitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcWireFitSim", 1469, G__MdcTrackDDict_875_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_875_0_30, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcWireFitSim), -1, 1, 1, 1, 1, 0, "u 'HMdcWireFitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcClustFromSeg(void) {
   /* HMdcClustFromSeg */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustFromSeg));
   G__memfunc_setup("HMdcClustFromSeg",1562,G__MdcTrackDDict_876_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustFromSeg), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcClustFromSeg",1562,G__MdcTrackDDict_876_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustFromSeg), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcClustFromSeg",1562,G__MdcTrackDDict_876_0_3, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClustFromSeg), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"U 'HParamList' - 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCut",736,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HParamList' - 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCluster",1161,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "s - 'Short_t' 0 - segInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterSlot",1476,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcClus), -1, 0, 1, 1, 4, 0, "U 'HMdcSeg' - 0 - pSeg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_876_0_12, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcClustFromSeg::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_876_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClustFromSeg::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_876_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcClustFromSeg::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_876_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcClustFromSeg::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_876_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_876_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClustFromSeg::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_876_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClustFromSeg::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_876_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClustFromSeg::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_876_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClustFromSeg::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcClustFromSeg", 1688, G__MdcTrackDDict_876_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcGeantSeg(void) {
   /* HMdcGeantSeg */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantSeg));
   G__memfunc_setup("HMdcGeantSeg",1130,G__MdcTrackDDict_877_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantSeg), -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 '-1' ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_877_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__MdcTrackDDict_877_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"c - 'Char_t' 0 - sc c - 'Char_t' 0 - ios", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDirection",1261,G__MdcTrackDDict_877_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - hitDir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWiresAreColl",1528,G__MdcTrackDDict_877_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWiresAreNotColl",1833,G__MdcTrackDDict_877_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMod",620,G__MdcTrackDDict_877_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("analyseClust",1272,G__MdcTrackDDict_877_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HMdcClusSim' - 0 - pClus i - 'Int_t' 0 - trInd "
"i - 'Int_t' 0 - modICl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("analyseSeg",1036,G__MdcTrackDDict_877_0_9, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'HMdcSegSim' - 0 - pSeg i - 'Int_t' 0 - trInd "
"u 'HMdcList12GroupCells' - 1 - wrList f - 'Float_t' 0 - ch2 "
"i - 'Int_t' 0 - nR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSec",603,G__MdcTrackDDict_877_0_10, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIOSeg",759,G__MdcTrackDDict_877_0_11, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMod",608,G__MdcTrackDDict_877_0_12, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__MdcTrackDDict_877_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDirection",1249,G__MdcTrackDDict_877_0_14, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNGMdcHits",1153,G__MdcTrackDDict_877_0_15, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNGMdcs",860,G__MdcTrackDDict_877_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNGMdcHits",1153,G__MdcTrackDDict_877_0_17, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 8, "c - 'Char_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus",964,G__MdcTrackDDict_877_0_18, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("areWiresCollected",1745,G__MdcTrackDDict_877_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstLayer12",1448,G__MdcTrackDDict_877_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastLayer12",1332,G__MdcTrackDDict_877_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstGeantMdcLayer",2120,G__MdcTrackDDict_877_0_22, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastGeantMdcLayer",2004,G__MdcTrackDDict_877_0_23, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstAndLastGMdcLayers",2490,G__MdcTrackDDict_877_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - m i - 'Int_t' 1 - lFisrt "
"i - 'Int_t' 1 - lLast", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModIOfGeantTrack",1858,G__MdcTrackDDict_877_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcMidPlaneHit",1667,G__MdcTrackDDict_877_0_26, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeantMdc), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcLayerHit",1398,G__MdcTrackDDict_877_0_27, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeantMdc), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_877_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dirHit",612,G__MdcTrackDDict_877_0_29, 99, -1, G__defined_typename("Char_t"), 0, 1, 3, 1, 0, "U 'HGeantMdc' - 0 - pGeantMdc", (char*)NULL, (void*) G__func2void( (Char_t (*)(HGeantMdc*))(&HMdcGeantSeg::dirHit) ), 0);
   G__memfunc_setup("getMdcHitPos",1195,G__MdcTrackDDict_877_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - m u 'HGeomVector' - 1 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcHitPosSec",1478,G__MdcTrackDDict_877_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - m u 'HGeomVector' - 1 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcHitPosLab",1466,G__MdcTrackDDict_877_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - m u 'HGeomVector' - 1 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerHitPos",1428,G__MdcTrackDDict_877_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"u 'HGeomVector' - 1 - hit g - 'Bool_t' 0 'kTRUE' extrFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerHitPosSec",1711,G__MdcTrackDDict_877_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"u 'HGeomVector' - 1 - hit g - 'Bool_t' 0 'kTRUE' extrFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerHitPosLab",1699,G__MdcTrackDDict_877_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l "
"u 'HGeomVector' - 1 - hit g - 'Bool_t' 0 'kTRUE' extrFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGntTrackOk",1204,G__MdcTrackDDict_877_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGEANTBug",873,G__MdcTrackDDict_877_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNoMeta",800,G__MdcTrackDDict_877_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTrackNotRec",1308,G__MdcTrackDDict_877_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSegNotRec",1094,G__MdcTrackDDict_877_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("is1or2HitsNotRec",1539,G__MdcTrackDDict_877_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearClus",926,G__MdcTrackDDict_877_0_42, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearSeg",806,G__MdcTrackDDict_877_0_43, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUserFlag",1125,G__MdcTrackDDict_877_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUserFlag",1113,G__MdcTrackDDict_877_0_45, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dirTheta",821,G__MdcTrackDDict_877_0_46, 99, -1, G__defined_typename("Char_t"), 0, 1, 3, 1, 0, "f - 'Float_t' 0 - th", (char*)NULL, (void*) G__func2void( (Char_t (*)(Float_t))(&HMdcGeantSeg::dirTheta) ), 0);
   G__memfunc_setup("setAnotherHit",1346,G__MdcTrackDDict_877_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeantMdc' - 0 - pGeantMdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHit",590,G__MdcTrackDDict_877_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeantMdc' - 0 - pGeantMdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addFirstHit",1110,G__MdcTrackDDict_877_0_49, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HGeantMdc' - 0 - pGeantMdc G - 'Bool_t' 0 - mdcSecSetup "
"s - 'Short_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatusFlags",1469,G__MdcTrackDDict_877_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 1 - trackStatus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackNumber",1450,G__MdcTrackDDict_877_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nMdcOk",572,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mdcInd",591,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMdcHitPos",1278,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"i - 'Int_t' 0 - modI i - 'Int_t' 0 - lay1 "
"i - 'Int_t' 0 - lay2 u 'HGeomVector' - 1 - hit "
"i - 'Int_t' 0 '6' lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testBit",735,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 8, "b - 'UChar_t' 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSegClusBetter",1528,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"U 'HMdcClusSim' - 0 - pClus i - 'Int_t' 0 - trInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isModClusBetter",1529,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 2, 0, 
"U 'HMdcClusSim' - 0 - pClus i - 'Int_t' 0 - trInd "
"i - 'Int_t' 0 - mInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModClustPos",1449,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"U 'HMdcClusSim' - 0 - pMdcClusSim i - 'Int_t' 0 - indtr "
"i - 'Int_t' 0 - mInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSegClustPos",1448,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"U 'HMdcClusSim' - 0 - pMdcClusSim i - 'Int_t' 0 - indtr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSegBetter",1121,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 2, 0, 
"U 'HMdcSegSim' - 0 - pSeg i - 'Int_t' 0 - trInd "
"i - 'Int_t' 0 - nLayersN f - 'Float_t' 0 - chi2N "
"i - 'Int_t' 0 - nR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_877_0_61, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcGeantSeg::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_877_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantSeg::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_877_0_63, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcGeantSeg::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_877_0_64, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcGeantSeg::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_877_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_877_0_69, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantSeg::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_877_0_70, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeantSeg::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_877_0_71, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantSeg::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_877_0_72, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeantSeg::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcGeantSeg", 1130, G__MdcTrackDDict_877_0_73, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantSeg), -1, 0, 1, 1, 1, 0, "u 'HMdcGeantSeg' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcGeantSeg", 1256, G__MdcTrackDDict_877_0_74, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_877_0_75, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantSeg), -1, 1, 1, 1, 1, 0, "u 'HMdcGeantSeg' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcGeantTrack(void) {
   /* HMdcGeantTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack));
   G__memfunc_setup("HMdcGeantTrack",1344,G__MdcTrackDDict_878_0_1, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcGeantTrack",1344,G__MdcTrackDDict_878_0_2, 105, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack), -1, 0, 3, 1, 1, 0, 
"U 'TObjArray' - 0 - arr I - 'Int_t' 0 - size "
"I - 'Int_t' 0 - offst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackDDict_878_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefault",1041,G__MdcTrackDDict_878_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcCal1Cat",1209,G__MdcTrackDDict_878_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetMdc",835,G__MdcTrackDDict_878_0_6, 121, -1, -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t))(&HMdcGeantTrack::unsetMdc) ), 0);
   G__memfunc_setup("isMdcActive",1100,G__MdcTrackDDict_878_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t, Int_t))(&HMdcGeantTrack::isMdcActive) ), 0);
   G__memfunc_setup("testMdcSetup",1253,G__MdcTrackDDict_878_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcGeantTrack::testMdcSetup) ), 0);
   G__memfunc_setup("setDebugPrintFlag",1722,G__MdcTrackDDict_878_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' fg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testGeantTrack",1444,G__MdcTrackDDict_878_0_10, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 0, "U 'HGeantKine' - 0 - pGK", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testGeantTrack",1444,G__MdcTrackDDict_878_0_11, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcMidPlaneHit",1667,G__MdcTrackDDict_878_0_12, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeantMdc), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nseg i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcLayerHit",1398,G__MdcTrackDDict_878_0_13, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeantMdc), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nseg i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSegment",1043,G__MdcTrackDDict_878_0_14, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantSeg), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__MdcTrackDDict_878_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMomentum",1170,G__MdcTrackDDict_878_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInMdc",679,G__MdcTrackDDict_878_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInRich",793,G__MdcTrackDDict_878_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInMeta",794,G__MdcTrackDDict_878_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNSegments",1236,G__MdcTrackDDict_878_0_20, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDigiSegments",1617,G__MdcTrackDDict_878_0_21, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNGeantMdcHits",1577,G__MdcTrackDDict_878_0_22, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWires",920,G__MdcTrackDDict_878_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantMdcSector",1715,G__MdcTrackDDict_878_0_24, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDigiMdcSector",1601,G__MdcTrackDDict_878_0_25, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNGeantMdcSectors",1908,G__MdcTrackDDict_878_0_26, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDigiMdcSectors",1794,G__MdcTrackDDict_878_0_27, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isDirectionGood",1542,G__MdcTrackDDict_878_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGeantBug",1001,G__MdcTrackDDict_878_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNSegsInMdc",1259,G__MdcTrackDDict_878_0_30, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 '-1' sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNSegments",1236,G__MdcTrackDDict_878_0_31, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg i - 'Int_t' 0 '-1' sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSegDirection",1536,G__MdcTrackDDict_878_0_32, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcTrackDDict_878_0_33, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIOSeg",759,G__MdcTrackDDict_878_0_34, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstLayer12",1448,G__MdcTrackDDict_878_0_35, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastLayer12",1332,G__MdcTrackDDict_878_0_36, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNGMdcHits",1153,G__MdcTrackDDict_878_0_37, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcHitPos",1195,G__MdcTrackDDict_878_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - ns i - 'Int_t' 0 - m "
"u 'HGeomVector' - 1 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcHitPosSec",1478,G__MdcTrackDDict_878_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - ns i - 'Int_t' 0 - m "
"u 'HGeomVector' - 1 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcHitPosLab",1466,G__MdcTrackDDict_878_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - ns i - 'Int_t' 0 - m "
"u 'HGeomVector' - 1 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerHitPos",1428,G__MdcTrackDDict_878_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - ns i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l u 'HGeomVector' - 1 - hit "
"g - 'Bool_t' 0 'kTRUE' extrFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerHitPosSec",1711,G__MdcTrackDDict_878_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - ns i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l u 'HGeomVector' - 1 - hit "
"g - 'Bool_t' 0 'kTRUE' extrFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerHitPosLab",1699,G__MdcTrackDDict_878_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - ns i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l u 'HGeomVector' - 1 - hit "
"g - 'Bool_t' 0 'kTRUE' extrFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantKine",1206,G__MdcTrackDDict_878_0_44, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_HGeantKine), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGntTrackOk",1204,G__MdcTrackDDict_878_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGEANTBug",873,G__MdcTrackDDict_878_0_46, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNoMeta",800,G__MdcTrackDDict_878_0_47, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTrackNotRec",1308,G__MdcTrackDDict_878_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUserFlag",1125,G__MdcTrackDDict_878_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUserFlag",1113,G__MdcTrackDDict_878_0_50, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackDDict_878_0_51, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printDebug",1044,G__MdcTrackDDict_878_0_52, 121, -1, -1, 0, 3, 3, 1, 0, 
"U 'HGeantMdc' - 0 - pGeantMdc i - 'Int_t' 0 - i "
"C - 'Char_t' 10 '0' st", (char*)NULL, (void*) G__func2void( (void (*)(HGeantMdc*, Int_t, const Char_t*))(&HMdcGeantTrack::printDebug) ), 0);
   G__memfunc_setup("nSegOk",583,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "s - 'Short_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nSecOk",579,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - ns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nMdcOk",572,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - nm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testHitsInDetectors",1980,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testMdcHits",1132,(G__InterfaceMethod) NULL, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSegAtAndExpand",1648,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "s - 'Short_t' 0 - segNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSegment",1020,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectWires",1264,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 4, 0, 
"c - 'Char_t' 0 - sec c - 'Char_t' 0 - mod "
"c - 'Char_t' 0 - lay f - 'Float_t' 0 - atof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGeantBug1",1050,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "f - 'Float_t' 0 - momLay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGeantBug2",1051,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 4, 0, 
"c - 'Char_t' 0 - sec c - 'Char_t' 0 - dMod "
"c - 'Char_t' 0 - dLay c - 'Char_t' 0 - hitDir "
"f - 'Float_t' 0 - dTof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGeantBug3",1052,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mayBeGeantBug",1275,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "f - 'Float_t' 0 - dMom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printDebug",1044,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"f - 'Float_t' 0 - dMom c - 'Char_t' 10 - dMod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dirDLayer",896,(G__InterfaceMethod) NULL, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 4, 0, "c - 'Char_t' 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcNSectors",1220,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatusFlags",1469,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcLay14",798,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 4, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testBit",735,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "b - 'UChar_t' 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackDDict_878_0_71, 85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcGeantTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackDDict_878_0_72, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackDDict_878_0_73, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcGeantTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackDDict_878_0_74, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcGeantTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackDDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackDDict_878_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackDDict_878_0_79, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackDDict_878_0_80, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeantTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackDDict_878_0_81, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackDDict_878_0_82, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeantTrack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcGeantTrack", 1344, G__MdcTrackDDict_878_0_83, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack), -1, 0, 1, 1, 1, 0, "u 'HMdcGeantTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcGeantTrack", 1470, G__MdcTrackDDict_878_0_84, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackDDict_878_0_85, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackDDictLN_HMdcGeantTrack), -1, 1, 1, 1, 1, 0, "u 'HMdcGeantTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMdcTrackDDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
   G__memvar_setup((void*)(&catMdcClus),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcClus=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcClusFit),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcClusFit=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcWireFit),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcWireFit=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcClusInf),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcClusInf=",0,(char*)NULL);
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMdcTrackDDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMdcTrackDDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MdcTrackDDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TSeqCollection = { "TSeqCollection" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HParSet = { "HParSet" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HContainer = { "HContainer" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HContFact = { "HContFact" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTrackDContFact = { "HMdcTrackDContFact" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HGeomVector = { "HGeomVector" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HGeomRotation = { "HGeomRotation" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HGeomTransform = { "HGeomTransform" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcPointPlane = { "HMdcPointPlane" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTrapPlane = { "HMdcTrapPlane" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTrap = { "HMdcTrap" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcPlane = { "HMdcPlane" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcPointOnPlane = { "HMdcPointOnPlane" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLineParam = { "HMdcLineParam" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcGetContainers = { "HMdcGetContainers" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLayerGeomPar = { "HMdcLayerGeomPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcGeomPar = { "HMdcGeomPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcGeomStruct = { "HMdcGeomStruct" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcRawStruct = { "HMdcRawStruct" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLookupRaw = { "HMdcLookupRaw" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HSpecGeomPar = { "HSpecGeomPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLayerGeomParLay = { "HMdcLayerGeomParLay" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLayerCorrPar = { "HMdcLayerCorrPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HGeomVolume = { "HGeomVolume" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcSizesCellsCell = { "HMdcSizesCellsCell" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcSizesCellsMod = { "HMdcSizesCellsMod" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcSizesCells = { "HMdcSizesCells" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcSizesCellsLayer = { "HMdcSizesCellsLayer" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcSizesCellsSec = { "HMdcSizesCellsSec" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TVector2 = { "TVector2" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLayer = { "HMdcLayer" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClFnStack = { "HMdcClFnStack" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClFnStacksArr = { "HMdcClFnStacksArr" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTBArray = { "HMdcTBArray" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcBArray = { "HMdcBArray" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcList12GroupCells = { "HMdcList12GroupCells" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcList12GroupCellscLcLdA = { "HMdcList12GroupCells::$" , 101 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcList24GroupCells = { "HMdcList24GroupCells" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcList24GroupCellscLcLdA = { "HMdcList24GroupCells::$" , 101 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HSymMat = { "HSymMat" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HSymMat4 = { "HSymMat4" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClus = { "HMdcClus" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClusSim = { "HMdcClusSim" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcSecListCells = { "HMdcSecListCells" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcCluster = { "HMdcCluster" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClustersArrs = { "HMdcClustersArrs" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HParIo = { "HParIo" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TH2C = { "TH2C" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcDriftTimeParSec = { "HMdcDriftTimeParSec" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLayListCells = { "HMdcLayListCells" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HStart2GeomPar = { "HStart2GeomPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLookUpTbCell = { "HMdcLookUpTbCell" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLookUpTbLayer = { "HMdcLookUpTbLayer" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLookUpTbLayercLcLDistCalcLuTb = { "HMdcLookUpTbLayer::DistCalcLuTb" , 115 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLookUpTbMod = { "HMdcLookUpTbMod" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLookUpTbSec = { "HMdcLookUpTbSec" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLookUpTb = { "HMdcLookUpTb" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcCellGroup12 = { "HMdcCellGroup12" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLayListCellscLcLdA = { "HMdcLayListCells::$" , 101 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcModListCells = { "HMdcModListCells" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HIterator = { "HIterator" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTimeCut = { "HMdcTimeCut" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcEvntListCells = { "HMdcEvntListCells" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcSeg = { "HMdcSeg" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcKickPlane = { "HMdcKickPlane" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TAttMarker = { "TAttMarker" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TCutG = { "TCutG" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClusMetaMatch = { "HMdcClusMetaMatch" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTrackParam = { "HMdcTrackParam" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcKickCor = { "HMdcKickCor" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcProjPlot = { "HMdcProjPlot" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdc34ClFinderLayer = { "HMdc34ClFinderLayer" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdc34ClFinderMod = { "HMdc34ClFinderMod" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdc34ClFinderSec = { "HMdc34ClFinderSec" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdc34ClFinderSeccLcLDxDyBinsCut = { "HMdc34ClFinderSec::DxDyBinsCut" , 115 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdc34ClFinder = { "HMdc34ClFinder" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HTask = { "HTask" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TStopwatch = { "TStopwatch" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HReconstructor = { "HReconstructor" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TBox = { "TBox" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TText = { "TText" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TLine = { "TLine" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TPaveText = { "TPaveText" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcCal1 = { "HMdcCal1" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TSlider = { "TSlider" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLookupGMod = { "HMdcLookupGMod" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcRawModStru = { "HMdcRawModStru" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HEventHeader = { "HEventHeader" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcEff = { "HMdcEff" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcEffMod = { "HMdcEffMod" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcEfficiencyLayer = { "HMdcEfficiencyLayer" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcEfficiencyMod = { "HMdcEfficiencyMod" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcEfficiencySec = { "HMdcEfficiencySec" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcEfficiency = { "HMdcEfficiency" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcGeantEvent = { "HMdcGeantEvent" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTrackFinder = { "HMdcTrackFinder" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClusterToHit = { "HMdcClusterToHit" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdc12Fit = { "HMdc12Fit" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcIdealTracking = { "HMdcIdealTracking" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTrackDSet = { "HMdcTrackDSet" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcHit = { "HMdcHit" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcHitSegFiller = { "HMdcHitSegFiller" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcDetector = { "HMdcDetector" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTrkCand = { "HMdcTrkCand" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClusInf = { "HMdcClusInf" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HRuntimeDb = { "HRuntimeDb" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HSpectrometer = { "HSpectrometer" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcLookupGeom = { "HMdcLookupGeom" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HGeomCompositeVolume = { "HGeomCompositeVolume" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HModGeomPar = { "HModGeomPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClusFit = { "HMdcClusFit" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcWireData = { "HMdcWireData" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcWireFit = { "HMdcWireFit" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTrackFitInOut = { "HMdcTrackFitInOut" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HGeantMdc = { "HGeantMdc" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcDriftTimePar = { "HMdcDriftTimePar" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcDriftTimeParBin = { "HMdcDriftTimeParBin" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcWiresArr = { "HMdcWiresArr" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcCal2ParSim = { "HMdcCal2ParSim" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcCal2ParSecSim = { "HMdcCal2ParSecSim" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcCal2ParModSim = { "HMdcCal2ParModSim" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcCal2ParAngleSim = { "HMdcCal2ParAngleSim" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcCal2Par = { "HMdcCal2Par" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcCal2ParSec = { "HMdcCal2ParSec" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcCal2ParMod = { "HMdcCal2ParMod" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcCal2ParAngle = { "HMdcCal2ParAngle" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcDriftTimeParAngle = { "HMdcDriftTimeParAngle" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcDriftTimeParMod = { "HMdcDriftTimeParMod" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTrackFitPar = { "HMdcTrackFitPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcDigitPar = { "HMdcDigitPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTrackFitter = { "HMdcTrackFitter" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTrackFitterA = { "HMdcTrackFitterA" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcSegSim = { "HMdcSegSim" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTrackInfSim = { "HMdcTrackInfSim" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcFittersArray = { "HMdcFittersArray" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdc12FitcLcLdA = { "HMdc12Fit::$" , 101 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HParamList = { "HParamList" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HParCond = { "HParCond" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClusFitcLcLdA = { "HMdcClusFit::$" , 101 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TPad = { "TPad" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TPaveLabel = { "TPaveLabel" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TGTransientFrame = { "TGTransientFrame" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TGLabel = { "TGLabel" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TGTextEntry = { "TGTextEntry" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TGTextButton = { "TGTextButton" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcEffMenu = { "HMdcEffMenu" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HldGrepFileSource = { "HldGrepFileSource" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HldRemoteSource = { "HldRemoteSource" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTargetMon = { "HMdcTargetMon" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTargetMoncLcLTrackPar = { "HMdcTargetMon::TrackPar" , 115 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClusInfSim = { "HMdcClusInfSim" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_TFormula = { "TFormula" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcCalibrater1 = { "HMdcCalibrater1" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcDGaus = { "HMdcDGaus" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcRichCorr = { "HMdcRichCorr" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HSeqArrBlock = { "HSeqArrBlock" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HSeqArrBlockcLcLdA = { "HSeqArrBlock::$" , 101 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HSeqArrIter = { "HSeqArrIter" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_ESeqArrType = { "ESeqArrType" , 101 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HSeqArr = { "HSeqArr" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcStoreWires = { "HMdcStoreWires" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcStoreEvents = { "HMdcStoreEvents" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcStoreTracks = { "HMdcStoreTracks" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcStoreClusters = { "HMdcStoreClusters" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HGeantKine = { "HGeantKine" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcDeDx2 = { "HMdcDeDx2" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcDeDx2Maker = { "HMdcDeDx2Maker" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTrackFitterB = { "HMdcTrackFitterB" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcAlignerParam = { "HMdcAlignerParam" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcAlignerD = { "HMdcAlignerD" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClusFitSim = { "HMdcClusFitSim" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcHitSim = { "HMdcHitSim" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcMinimize = { "HMdcMinimize" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcWireFitSim = { "HMdcWireFitSim" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClustFromSeg = { "HMdcClustFromSeg" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcGeantSeg = { "HMdcGeantSeg" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcGeantTrack = { "HMdcGeantTrack" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcTrackInfSimcLcLdA = { "HMdcTrackInfSim::$" , 101 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HTofHit = { "HTofHit" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HTofGeomPar = { "HTofGeomPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HRpcGeomPar = { "HRpcGeomPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HShowerGeometry = { "HShowerGeometry" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMetaMatchPar = { "HMetaMatchPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClusMetaMatchcLcLTofHit = { "HMdcClusMetaMatch::TofHit" , 115 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClusMetaMatchcLcLRpcHit = { "HMdcClusMetaMatch::RpcHit" , 115 , -1 };
G__linked_taginfo G__MdcTrackDDictLN_HMdcClusMetaMatchcLcLShowerHit = { "HMdcClusMetaMatch::ShowerHit" , 115 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMdcTrackDDict() {
  G__MdcTrackDDictLN_TClass.tagnum = -1 ;
  G__MdcTrackDDictLN_TBuffer.tagnum = -1 ;
  G__MdcTrackDDictLN_TMemberInspector.tagnum = -1 ;
  G__MdcTrackDDictLN_TObject.tagnum = -1 ;
  G__MdcTrackDDictLN_TNamed.tagnum = -1 ;
  G__MdcTrackDDictLN_TCollection.tagnum = -1 ;
  G__MdcTrackDDictLN_TString.tagnum = -1 ;
  G__MdcTrackDDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MdcTrackDDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MdcTrackDDictLN_TList.tagnum = -1 ;
  G__MdcTrackDDictLN_TObjArray.tagnum = -1 ;
  G__MdcTrackDDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MdcTrackDDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MdcTrackDDictLN_TSeqCollection.tagnum = -1 ;
  G__MdcTrackDDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__MdcTrackDDictLN_HParSet.tagnum = -1 ;
  G__MdcTrackDDictLN_HContainer.tagnum = -1 ;
  G__MdcTrackDDictLN_HContFact.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTrackDContFact.tagnum = -1 ;
  G__MdcTrackDDictLN_HGeomVector.tagnum = -1 ;
  G__MdcTrackDDictLN_HGeomRotation.tagnum = -1 ;
  G__MdcTrackDDictLN_HGeomTransform.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcPointPlane.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTrapPlane.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTrap.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcPlane.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcPointOnPlane.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLineParam.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcGetContainers.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLayerGeomPar.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcGeomPar.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcGeomStruct.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcRawStruct.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLookupRaw.tagnum = -1 ;
  G__MdcTrackDDictLN_HSpecGeomPar.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLayerGeomParLay.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLayerCorrPar.tagnum = -1 ;
  G__MdcTrackDDictLN_HGeomVolume.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcSizesCellsCell.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcSizesCellsMod.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcSizesCells.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcSizesCellsLayer.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcSizesCellsSec.tagnum = -1 ;
  G__MdcTrackDDictLN_TVector2.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLayer.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClFnStack.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClFnStacksArr.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTBArray.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcBArray.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcList12GroupCells.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcList12GroupCellscLcLdA.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcList24GroupCells.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcList24GroupCellscLcLdA.tagnum = -1 ;
  G__MdcTrackDDictLN_HLocation.tagnum = -1 ;
  G__MdcTrackDDictLN_HSymMat.tagnum = -1 ;
  G__MdcTrackDDictLN_HSymMat4.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClus.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClusSim.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcSecListCells.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcCluster.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClustersArrs.tagnum = -1 ;
  G__MdcTrackDDictLN_HParIo.tagnum = -1 ;
  G__MdcTrackDDictLN_TH2C.tagnum = -1 ;
  G__MdcTrackDDictLN_HCategory.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcDriftTimeParSec.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLayListCells.tagnum = -1 ;
  G__MdcTrackDDictLN_HStart2GeomPar.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLookUpTbCell.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLookUpTbLayer.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLookUpTbLayercLcLDistCalcLuTb.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLookUpTbMod.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLookUpTbSec.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLookUpTb.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcCellGroup12.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLayListCellscLcLdA.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcModListCells.tagnum = -1 ;
  G__MdcTrackDDictLN_HIterator.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTimeCut.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcEvntListCells.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcSeg.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcKickPlane.tagnum = -1 ;
  G__MdcTrackDDictLN_TAttLine.tagnum = -1 ;
  G__MdcTrackDDictLN_TAttFill.tagnum = -1 ;
  G__MdcTrackDDictLN_TAttMarker.tagnum = -1 ;
  G__MdcTrackDDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MdcTrackDDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TH1F.tagnum = -1 ;
  G__MdcTrackDDictLN_TF1.tagnum = -1 ;
  G__MdcTrackDDictLN_TGraph.tagnum = -1 ;
  G__MdcTrackDDictLN_TCutG.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClusMetaMatch.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTrackParam.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcKickCor.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcProjPlot.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdc34ClFinderLayer.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdc34ClFinderMod.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdc34ClFinderSec.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdc34ClFinderSeccLcLDxDyBinsCut.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdc34ClFinder.tagnum = -1 ;
  G__MdcTrackDDictLN_HTask.tagnum = -1 ;
  G__MdcTrackDDictLN_TStopwatch.tagnum = -1 ;
  G__MdcTrackDDictLN_HReconstructor.tagnum = -1 ;
  G__MdcTrackDDictLN_TFile.tagnum = -1 ;
  G__MdcTrackDDictLN_TCanvas.tagnum = -1 ;
  G__MdcTrackDDictLN_TBox.tagnum = -1 ;
  G__MdcTrackDDictLN_TText.tagnum = -1 ;
  G__MdcTrackDDictLN_TLine.tagnum = -1 ;
  G__MdcTrackDDictLN_TPaveText.tagnum = -1 ;
  G__MdcTrackDDictLN_TH2F.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcCal1.tagnum = -1 ;
  G__MdcTrackDDictLN_TSlider.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLookupGMod.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcRawModStru.tagnum = -1 ;
  G__MdcTrackDDictLN_HEventHeader.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcEff.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcEffMod.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcEfficiencyLayer.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcEfficiencyMod.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcEfficiencySec.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcEfficiency.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcGeantEvent.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTrackFinder.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClusterToHit.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdc12Fit.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcIdealTracking.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTrackDSet.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcHit.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcHitSegFiller.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcDetector.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTrkCand.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClusInf.tagnum = -1 ;
  G__MdcTrackDDictLN_TArrayD.tagnum = -1 ;
  G__MdcTrackDDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__MdcTrackDDictLN_HRuntimeDb.tagnum = -1 ;
  G__MdcTrackDDictLN_HSpectrometer.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcLookupGeom.tagnum = -1 ;
  G__MdcTrackDDictLN_HGeomCompositeVolume.tagnum = -1 ;
  G__MdcTrackDDictLN_HModGeomPar.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClusFit.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcWireData.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcWireFit.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTrackFitInOut.tagnum = -1 ;
  G__MdcTrackDDictLN_HGeantMdc.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcDriftTimePar.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcDriftTimeParBin.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcWiresArr.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcCal2ParSim.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcCal2ParSecSim.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcCal2ParModSim.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcCal2ParAngleSim.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcCal2Par.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcCal2ParSec.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcCal2ParMod.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcCal2ParAngle.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcDriftTimeParAngle.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcDriftTimeParMod.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTrackFitPar.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcDigitPar.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTrackFitter.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTrackFitterA.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcSegSim.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTrackInfSim.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcFittersArray.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdc12FitcLcLdA.tagnum = -1 ;
  G__MdcTrackDDictLN_HParamList.tagnum = -1 ;
  G__MdcTrackDDictLN_HParCond.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClusFitcLcLdA.tagnum = -1 ;
  G__MdcTrackDDictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__MdcTrackDDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__MdcTrackDDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MdcTrackDDictLN_TPad.tagnum = -1 ;
  G__MdcTrackDDictLN_TPaveLabel.tagnum = -1 ;
  G__MdcTrackDDictLN_TGTransientFrame.tagnum = -1 ;
  G__MdcTrackDDictLN_TGLabel.tagnum = -1 ;
  G__MdcTrackDDictLN_TGTextEntry.tagnum = -1 ;
  G__MdcTrackDDictLN_TGTextButton.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcEffMenu.tagnum = -1 ;
  G__MdcTrackDDictLN_HldGrepFileSource.tagnum = -1 ;
  G__MdcTrackDDictLN_HldRemoteSource.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTargetMon.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTargetMoncLcLTrackPar.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClusInfSim.tagnum = -1 ;
  G__MdcTrackDDictLN_TFormula.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcCalibrater1.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcDGaus.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcRichCorr.tagnum = -1 ;
  G__MdcTrackDDictLN_HSeqArrBlock.tagnum = -1 ;
  G__MdcTrackDDictLN_HSeqArrBlockcLcLdA.tagnum = -1 ;
  G__MdcTrackDDictLN_HSeqArrIter.tagnum = -1 ;
  G__MdcTrackDDictLN_ESeqArrType.tagnum = -1 ;
  G__MdcTrackDDictLN_HSeqArr.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcStoreWires.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcStoreEvents.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcStoreTracks.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcStoreClusters.tagnum = -1 ;
  G__MdcTrackDDictLN_HGeantKine.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcDeDx2.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcDeDx2Maker.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTrackFitterB.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcAlignerParam.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcAlignerD.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClusFitSim.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcHitSim.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcMinimize.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcWireFitSim.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClustFromSeg.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcGeantSeg.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcGeantTrack.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcTrackInfSimcLcLdA.tagnum = -1 ;
  G__MdcTrackDDictLN_HTofHit.tagnum = -1 ;
  G__MdcTrackDDictLN_HTofGeomPar.tagnum = -1 ;
  G__MdcTrackDDictLN_HRpcGeomPar.tagnum = -1 ;
  G__MdcTrackDDictLN_HShowerGeometry.tagnum = -1 ;
  G__MdcTrackDDictLN_HMetaMatchPar.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClusMetaMatchcLcLTofHit.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClusMetaMatchcLcLRpcHit.tagnum = -1 ;
  G__MdcTrackDDictLN_HMdcClusMetaMatchcLcLShowerHit.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMdcTrackDDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TCollection);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TString);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TList);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TSeqCollection);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HParSet);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HContainer);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTrackDContFact),sizeof(HMdcTrackDContFact),-1,62720,"Factory for all Dubna tracking parameter containers",G__setup_memvarHMdcTrackDContFact,G__setup_memfuncHMdcTrackDContFact);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HGeomVector);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HGeomRotation);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HGeomTransform);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcPointPlane),sizeof(HMdcPointPlane),-1,29952,(char*)NULL,G__setup_memvarHMdcPointPlane,G__setup_memfuncHMdcPointPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTrapPlane),sizeof(HMdcTrapPlane),-1,30464,(char*)NULL,G__setup_memvarHMdcTrapPlane,G__setup_memfuncHMdcTrapPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTrap),sizeof(HMdcTrap),-1,30464,(char*)NULL,G__setup_memvarHMdcTrap,G__setup_memfuncHMdcTrap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcPlane),sizeof(HMdcPlane),-1,32000,(char*)NULL,G__setup_memvarHMdcPlane,G__setup_memfuncHMdcPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcPointOnPlane),sizeof(HMdcPointOnPlane),-1,65280,(char*)NULL,G__setup_memvarHMdcPointOnPlane,G__setup_memfuncHMdcPointOnPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLineParam),sizeof(HMdcLineParam),-1,32000,(char*)NULL,G__setup_memvarHMdcLineParam,G__setup_memfuncHMdcLineParam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcGetContainers),sizeof(HMdcGetContainers),-1,29952,(char*)NULL,G__setup_memvarHMdcGetContainers,G__setup_memfuncHMdcGetContainers);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLayerGeomPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcGeomPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcGeomStruct);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcRawStruct);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLookupRaw);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HSpecGeomPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLayerGeomParLay);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLayerCorrPar),sizeof(HMdcLayerCorrPar),-1,62720,"Parameter container layer correction",G__setup_memvarHMdcLayerCorrPar,G__setup_memfuncHMdcLayerCorrPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HGeomVolume);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcSizesCellsCell),sizeof(HMdcSizesCellsCell),-1,29952,(char*)NULL,G__setup_memvarHMdcSizesCellsCell,G__setup_memfuncHMdcSizesCellsCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcSizesCellsMod),sizeof(HMdcSizesCellsMod),-1,62464,(char*)NULL,G__setup_memvarHMdcSizesCellsMod,G__setup_memfuncHMdcSizesCellsMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcSizesCells),sizeof(HMdcSizesCells),-1,29952,(char*)NULL,G__setup_memvarHMdcSizesCells,G__setup_memfuncHMdcSizesCells);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcSizesCellsLayer),sizeof(HMdcSizesCellsLayer),-1,29952,(char*)NULL,G__setup_memvarHMdcSizesCellsLayer,G__setup_memfuncHMdcSizesCellsLayer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcSizesCellsSec),sizeof(HMdcSizesCellsSec),-1,62464,(char*)NULL,G__setup_memvarHMdcSizesCellsSec,G__setup_memfuncHMdcSizesCellsSec);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TVector2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLayer),sizeof(HMdcLayer),-1,28928,(char*)NULL,G__setup_memvarHMdcLayer,G__setup_memfuncHMdcLayer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClFnStack),sizeof(HMdcClFnStack),-1,29952,(char*)NULL,G__setup_memvarHMdcClFnStack,G__setup_memfuncHMdcClFnStack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClFnStacksArr),sizeof(HMdcClFnStacksArr),-1,29952,(char*)NULL,G__setup_memvarHMdcClFnStacksArr,G__setup_memfuncHMdcClFnStacksArr);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTBArray),sizeof(HMdcTBArray),-1,1280,"A group of cells in layers",G__setup_memvarHMdcTBArray,G__setup_memfuncHMdcTBArray);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcBArray),sizeof(HMdcBArray),-1,1280,"A group of cells in layers",G__setup_memvarHMdcBArray,G__setup_memfuncHMdcBArray);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcList12GroupCells),sizeof(HMdcList12GroupCells),-1,32000,"List of all cells in layer",G__setup_memvarHMdcList12GroupCells,G__setup_memfuncHMdcList12GroupCells);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcList12GroupCellscLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcList24GroupCells),sizeof(HMdcList24GroupCells),-1,32000,"List of all cells in layer",G__setup_memvarHMdcList24GroupCells,G__setup_memfuncHMdcList24GroupCells);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcList24GroupCellscLcLdA);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HLocation);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HSymMat);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HSymMat4);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClus),sizeof(HMdcClus),-1,62720,(char*)NULL,G__setup_memvarHMdcClus,G__setup_memfuncHMdcClus);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClusSim),sizeof(HMdcClusSim),-1,62720,(char*)NULL,G__setup_memvarHMdcClusSim,G__setup_memfuncHMdcClusSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcSecListCells),sizeof(HMdcSecListCells),-1,29952,"List of all cells in layer",G__setup_memvarHMdcSecListCells,G__setup_memfuncHMdcSecListCells);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcCluster),sizeof(HMdcCluster),-1,29952,(char*)NULL,G__setup_memvarHMdcCluster,G__setup_memfuncHMdcCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClustersArrs),sizeof(HMdcClustersArrs),-1,29952,(char*)NULL,G__setup_memvarHMdcClustersArrs,G__setup_memfuncHMdcClustersArrs);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HParIo);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TH2C);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HCategory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcDriftTimeParSec),sizeof(HMdcDriftTimeParSec),-1,29952,"array of HMdcDriftTimeParMod objects",G__setup_memvarHMdcDriftTimeParSec,G__setup_memfuncHMdcDriftTimeParSec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLayListCells),sizeof(HMdcLayListCells),-1,29952,"List of all cells in layer",G__setup_memvarHMdcLayListCells,G__setup_memfuncHMdcLayListCells);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HStart2GeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLookUpTbCell),sizeof(HMdcLookUpTbCell),-1,29952,(char*)NULL,G__setup_memvarHMdcLookUpTbCell,G__setup_memfuncHMdcLookUpTbCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLookUpTbLayer),sizeof(HMdcLookUpTbLayer),-1,62464,(char*)NULL,G__setup_memvarHMdcLookUpTbLayer,G__setup_memfuncHMdcLookUpTbLayer);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLookUpTbLayercLcLDistCalcLuTb);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLookUpTbMod),sizeof(HMdcLookUpTbMod),-1,62464,(char*)NULL,G__setup_memvarHMdcLookUpTbMod,G__setup_memfuncHMdcLookUpTbMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLookUpTbSec),sizeof(HMdcLookUpTbSec),-1,62720,(char*)NULL,G__setup_memvarHMdcLookUpTbSec,G__setup_memfuncHMdcLookUpTbSec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLookUpTb),sizeof(HMdcLookUpTb),-1,62720,(char*)NULL,G__setup_memvarHMdcLookUpTb,G__setup_memfuncHMdcLookUpTb);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcCellGroup12);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLayListCellscLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcModListCells),sizeof(HMdcModListCells),-1,29952,"List of all cells in layer",G__setup_memvarHMdcModListCells,G__setup_memfuncHMdcModListCells);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HIterator);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTimeCut);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcEvntListCells),sizeof(HMdcEvntListCells),-1,29952,"List of all cells in layer",G__setup_memvarHMdcEvntListCells,G__setup_memfuncHMdcEvntListCells);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcSeg);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcKickPlane),sizeof(HMdcKickPlane),-1,29952,"Defines a plane surface",G__setup_memvarHMdcKickPlane,G__setup_memfuncHMdcKickPlane);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TAttLine);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TAttFill);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TAttMarker);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TF1);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TGraph);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TCutG);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClusMetaMatch),sizeof(HMdcClusMetaMatch),-1,29952,(char*)NULL,G__setup_memvarHMdcClusMetaMatch,G__setup_memfuncHMdcClusMetaMatch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTrackParam),sizeof(HMdcTrackParam),-1,29952,"Track piece parameters for Dubna fitter",G__setup_memvarHMdcTrackParam,G__setup_memfuncHMdcTrackParam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcKickCor),sizeof(HMdcKickCor),-1,29952,"Calculate correction to outgoing kickplane hits in MDC plane III and IV",G__setup_memvarHMdcKickCor,G__setup_memfuncHMdcKickCor);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcProjPlot),sizeof(HMdcProjPlot),-1,62720,(char*)NULL,G__setup_memvarHMdcProjPlot,G__setup_memfuncHMdcProjPlot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdc34ClFinderLayer),sizeof(HMdc34ClFinderLayer),-1,62976,(char*)NULL,G__setup_memvarHMdc34ClFinderLayer,G__setup_memfuncHMdc34ClFinderLayer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdc34ClFinderMod),sizeof(HMdc34ClFinderMod),-1,62464,(char*)NULL,G__setup_memvarHMdc34ClFinderMod,G__setup_memfuncHMdc34ClFinderMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdc34ClFinderSec),sizeof(HMdc34ClFinderSec),-1,62720,(char*)NULL,G__setup_memvarHMdc34ClFinderSec,G__setup_memfuncHMdc34ClFinderSec);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdc34ClFinderSeccLcLDxDyBinsCut);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdc34ClFinder),sizeof(HMdc34ClFinder),-1,62720,(char*)NULL,G__setup_memvarHMdc34ClFinder,G__setup_memfuncHMdc34ClFinder);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HTask);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TStopwatch);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HReconstructor);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TBox);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TText);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TLine);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TPaveText);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TH2F);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcCal1);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TSlider);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLookupGMod);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcRawModStru);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcEff),sizeof(HMdcEff),-1,28928,(char*)NULL,G__setup_memvarHMdcEff,G__setup_memfuncHMdcEff);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcEffMod),sizeof(HMdcEffMod),-1,28928,(char*)NULL,G__setup_memvarHMdcEffMod,G__setup_memfuncHMdcEffMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcEfficiencyLayer),sizeof(HMdcEfficiencyLayer),-1,29952,(char*)NULL,G__setup_memvarHMdcEfficiencyLayer,G__setup_memfuncHMdcEfficiencyLayer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcEfficiencyMod),sizeof(HMdcEfficiencyMod),-1,62464,(char*)NULL,G__setup_memvarHMdcEfficiencyMod,G__setup_memfuncHMdcEfficiencyMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcEfficiencySec),sizeof(HMdcEfficiencySec),-1,62464,(char*)NULL,G__setup_memvarHMdcEfficiencySec,G__setup_memfuncHMdcEfficiencySec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcEfficiency),sizeof(HMdcEfficiency),-1,62720,(char*)NULL,G__setup_memvarHMdcEfficiency,G__setup_memfuncHMdcEfficiency);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcGeantEvent),sizeof(HMdcGeantEvent),-1,29952,"Mdc GEANT segments collection for one event",G__setup_memvarHMdcGeantEvent,G__setup_memfuncHMdcGeantEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTrackFinder),sizeof(HMdcTrackFinder),-1,62720,"Cluster finder manager class.",G__setup_memvarHMdcTrackFinder,G__setup_memfuncHMdcTrackFinder);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClusterToHit),sizeof(HMdcClusterToHit),-1,62720,(char*)NULL,G__setup_memvarHMdcClusterToHit,G__setup_memfuncHMdcClusterToHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdc12Fit),sizeof(HMdc12Fit),-1,62720,"Manager class for Dubna track straight piece fitter.",G__setup_memvarHMdc12Fit,G__setup_memfuncHMdc12Fit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcIdealTracking),sizeof(HMdcIdealTracking),-1,62720,"Filling HMdcSeg, HMdcHit and HMdcTrkCand by GEANT hits",G__setup_memvarHMdcIdealTracking,G__setup_memfuncHMdcIdealTracking);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTrackDSet),sizeof(HMdcTrackDSet),-1,1280,"Set of tasks",G__setup_memvarHMdcTrackDSet,G__setup_memfuncHMdcTrackDSet);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcHitSegFiller),sizeof(HMdcHitSegFiller),-1,29952,(char*)NULL,G__setup_memvarHMdcHitSegFiller,G__setup_memfuncHMdcHitSegFiller);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcDetector);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTrkCand);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClusInf),sizeof(HMdcClusInf),-1,29952,"information about clusters in MDC",G__setup_memvarHMdcClusInf,G__setup_memfuncHMdcClusInf);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HRuntimeDb);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HSpectrometer);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcLookupGeom);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HGeomCompositeVolume);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HModGeomPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TMatrixTSparseDiaglEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClusFit),sizeof(HMdcClusFit),-1,95488,"track fit result",G__setup_memvarHMdcClusFit,G__setup_memfuncHMdcClusFit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcWireData),sizeof(HMdcWireData),-1,29952,"One wire data for track piece fitter",G__setup_memvarHMdcWireData,G__setup_memfuncHMdcWireData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcWireFit),sizeof(HMdcWireFit),-1,95488,"track fit result for one wire",G__setup_memvarHMdcWireFit,G__setup_memfuncHMdcWireFit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTrackFitInOut),sizeof(HMdcTrackFitInOut),-1,29952,"Service class for for Dubna track piece fitters",G__setup_memvarHMdcTrackFitInOut,G__setup_memfuncHMdcTrackFitInOut);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HGeantMdc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcDriftTimePar),sizeof(HMdcDriftTimePar),-1,29952,"array of HMdcDriftTimeParSec objects",G__setup_memvarHMdcDriftTimePar,G__setup_memfuncHMdcDriftTimePar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcDriftTimeParBin),sizeof(HMdcDriftTimeParBin),-1,29952,"parametrization of one bin",G__setup_memvarHMdcDriftTimeParBin,G__setup_memfuncHMdcDriftTimeParBin);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcWiresArr),sizeof(HMdcWiresArr),-1,29952,"Array of HMdcWireData objects",G__setup_memvarHMdcWiresArr,G__setup_memfuncHMdcWiresArr);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcCal2ParSim);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcCal2ParSecSim);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcCal2ParModSim);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcCal2ParAngleSim);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcCal2Par);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcCal2ParSec);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcCal2ParMod);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcCal2ParAngle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcDriftTimeParAngle),sizeof(HMdcDriftTimeParAngle),-1,29952,"array of HMdcDriftTimeParBin objects",G__setup_memvarHMdcDriftTimeParAngle,G__setup_memfuncHMdcDriftTimeParAngle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcDriftTimeParMod),sizeof(HMdcDriftTimeParMod),-1,29952,"array of HMdcDriftTimeParAngle objects",G__setup_memvarHMdcDriftTimeParMod,G__setup_memfuncHMdcDriftTimeParMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTrackFitPar),sizeof(HMdcTrackFitPar),-1,62720,"Container for the MDC Digitizer parameters",G__setup_memvarHMdcTrackFitPar,G__setup_memfuncHMdcTrackFitPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcDigitPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTrackFitter),sizeof(HMdcTrackFitter),-1,62464,"Base class for Dubna track piece fitter",G__setup_memvarHMdcTrackFitter,G__setup_memfuncHMdcTrackFitter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTrackFitterA),sizeof(HMdcTrackFitterA),-1,62464,"Dubna track piece fitter. Version A.",G__setup_memvarHMdcTrackFitterA,G__setup_memfuncHMdcTrackFitterA);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcSegSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTrackInfSim),sizeof(HMdcTrackInfSim),-1,29952,"Mdc GEANT segments collection for one event",G__setup_memvarHMdcTrackInfSim,G__setup_memfuncHMdcTrackInfSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcFittersArray),sizeof(HMdcFittersArray),-1,29952,"Array of HMdcTrackFitterA(B,...) objects",G__setup_memvarHMdcFittersArray,G__setup_memfuncHMdcFittersArray);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdc12FitcLcLdA);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HParamList);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HParCond);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClusFitcLcLdA);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TPad);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TPaveLabel);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TGTransientFrame);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TGLabel);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TGTextEntry);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TGTextButton);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcEffMenu),sizeof(HMdcEffMenu),-1,62464,"Digitizes MDC data.",G__setup_memvarHMdcEffMenu,G__setup_memfuncHMdcEffMenu);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HldGrepFileSource);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HldRemoteSource);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTargetMon),sizeof(HMdcTargetMon),-1,62720,(char*)NULL,G__setup_memvarHMdcTargetMon,G__setup_memfuncHMdcTargetMon);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTargetMoncLcLTrackPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClusInfSim),sizeof(HMdcClusInfSim),-1,29952,(char*)NULL,G__setup_memvarHMdcClusInfSim,G__setup_memfuncHMdcClusInfSim);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_TFormula);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcCalibrater1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcDGaus),sizeof(HMdcDGaus),-1,61696,(char*)NULL,G__setup_memvarHMdcDGaus,G__setup_memfuncHMdcDGaus);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcRichCorr),sizeof(HMdcRichCorr),-1,62720,(char*)NULL,G__setup_memvarHMdcRichCorr,G__setup_memfuncHMdcRichCorr);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HSeqArrBlock),sizeof(HSeqArrBlock),-1,62720,(char*)NULL,G__setup_memvarHSeqArrBlock,G__setup_memfuncHSeqArrBlock);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HSeqArrBlockcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HSeqArrIter),sizeof(HSeqArrIter),-1,62720,(char*)NULL,G__setup_memvarHSeqArrIter,G__setup_memfuncHSeqArrIter);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_ESeqArrType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HSeqArr),sizeof(HSeqArr),-1,62720,(char*)NULL,G__setup_memvarHSeqArr,G__setup_memfuncHSeqArr);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcStoreWires),sizeof(HMdcStoreWires),-1,29952,(char*)NULL,G__setup_memvarHMdcStoreWires,G__setup_memfuncHMdcStoreWires);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcStoreEvents),sizeof(HMdcStoreEvents),-1,29952,(char*)NULL,G__setup_memvarHMdcStoreEvents,G__setup_memfuncHMdcStoreEvents);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcStoreTracks),sizeof(HMdcStoreTracks),-1,29952,"storage of track parameters",G__setup_memvarHMdcStoreTracks,G__setup_memfuncHMdcStoreTracks);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcStoreClusters),sizeof(HMdcStoreClusters),-1,29952,"storage of track param. and wires",G__setup_memvarHMdcStoreClusters,G__setup_memfuncHMdcStoreClusters);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HGeantKine);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcDeDx2),sizeof(HMdcDeDx2),-1,62720,"MDC lookup table (dedx2 normalization parameters)",G__setup_memvarHMdcDeDx2,G__setup_memfuncHMdcDeDx2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcDeDx2Maker),sizeof(HMdcDeDx2Maker),-1,62720,"cal1 t2-t1 -> dEdx for Mdc data",G__setup_memvarHMdcDeDx2Maker,G__setup_memfuncHMdcDeDx2Maker);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTrackFitterB),sizeof(HMdcTrackFitterB),-1,62464,"Dubna track piece fitter",G__setup_memvarHMdcTrackFitterB,G__setup_memfuncHMdcTrackFitterB);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcAlignerParam),sizeof(HMdcAlignerParam),-1,63232,(char*)NULL,G__setup_memvarHMdcAlignerParam,G__setup_memfuncHMdcAlignerParam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcAlignerD),sizeof(HMdcAlignerD),-1,62720,"Digitizes MDC data.",G__setup_memvarHMdcAlignerD,G__setup_memfuncHMdcAlignerD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClusFitSim),sizeof(HMdcClusFitSim),-1,29952,"geant data for HMdcClusFit",G__setup_memvarHMdcClusFitSim,G__setup_memfuncHMdcClusFitSim);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcHitSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcMinimize),sizeof(HMdcMinimize),-1,29952,(char*)NULL,G__setup_memvarHMdcMinimize,G__setup_memfuncHMdcMinimize);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcWireFitSim),sizeof(HMdcWireFitSim),-1,29952,"geant and digitizer data for HMdcWireFit",G__setup_memvarHMdcWireFitSim,G__setup_memfuncHMdcWireFitSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClustFromSeg),sizeof(HMdcClustFromSeg),-1,62720,(char*)NULL,G__setup_memvarHMdcClustFromSeg,G__setup_memfuncHMdcClustFromSeg);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcGeantSeg),sizeof(HMdcGeantSeg),-1,29952,"Mdc GEANT segments",G__setup_memvarHMdcGeantSeg,G__setup_memfuncHMdcGeantSeg);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcGeantTrack),sizeof(HMdcGeantTrack),-1,62720,"Mdc GEANT segments collection for one track",G__setup_memvarHMdcGeantTrack,G__setup_memfuncHMdcGeantTrack);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcTrackInfSimcLcLdA);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HTofHit);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HTofGeomPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HRpcGeomPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HShowerGeometry);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMetaMatchPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClusMetaMatchcLcLTofHit);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClusMetaMatchcLcLRpcHit);
   G__get_linked_tagnum_fwd(&G__MdcTrackDDictLN_HMdcClusMetaMatchcLcLShowerHit);
}
extern "C" void G__cpp_setupMdcTrackDDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMdcTrackDDict()");
  G__set_cpp_environmentMdcTrackDDict();
  G__cpp_setup_tagtableMdcTrackDDict();

  G__cpp_setup_inheritanceMdcTrackDDict();

  G__cpp_setup_typetableMdcTrackDDict();

  G__cpp_setup_memvarMdcTrackDDict();

  G__cpp_setup_memfuncMdcTrackDDict();
  G__cpp_setup_globalMdcTrackDDict();
  G__cpp_setup_funcMdcTrackDDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMdcTrackDDict();
  return;
}
class G__cpp_setup_initMdcTrackDDict {
  public:
    G__cpp_setup_initMdcTrackDDict() { G__add_setup_func("MdcTrackDDict",(G__incsetup)(&G__cpp_setupMdcTrackDDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMdcTrackDDict() { G__remove_setup_func("MdcTrackDDict"); }
};
G__cpp_setup_initMdcTrackDDict G__cpp_setup_initializerMdcTrackDDict;


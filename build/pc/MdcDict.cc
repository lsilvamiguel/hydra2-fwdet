//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:46:24 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIMdcDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MdcDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HMdcRaw_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcRaw(void *p = 0);
   static void *newArray_HMdcRaw(Long_t size, void *p);
   static void delete_HMdcRaw(void *p);
   static void deleteArray_HMdcRaw(void *p);
   static void destruct_HMdcRaw(void *p);
   static void streamer_HMdcRaw(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcRaw*)
   {
      ::HMdcRaw *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcRaw >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcRaw", ::HMdcRaw::Class_Version(), "././hmdcraw.h", 10,
                  typeid(::HMdcRaw), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcRaw::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcRaw) );
      instance.SetNew(&new_HMdcRaw);
      instance.SetNewArray(&newArray_HMdcRaw);
      instance.SetDelete(&delete_HMdcRaw);
      instance.SetDeleteArray(&deleteArray_HMdcRaw);
      instance.SetDestructor(&destruct_HMdcRaw);
      instance.SetStreamerFunc(&streamer_HMdcRaw);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcRaw*)
   {
      return GenerateInitInstanceLocal((::HMdcRaw*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcRaw*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcRawCor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcRawCor(void *p = 0);
   static void *newArray_HMdcRawCor(Long_t size, void *p);
   static void delete_HMdcRawCor(void *p);
   static void deleteArray_HMdcRawCor(void *p);
   static void destruct_HMdcRawCor(void *p);
   static void streamer_HMdcRawCor(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcRawCor*)
   {
      ::HMdcRawCor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcRawCor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcRawCor", ::HMdcRawCor::Class_Version(), "././hmdcrawcor.h", 13,
                  typeid(::HMdcRawCor), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcRawCor::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcRawCor) );
      instance.SetNew(&new_HMdcRawCor);
      instance.SetNewArray(&newArray_HMdcRawCor);
      instance.SetDelete(&delete_HMdcRawCor);
      instance.SetDeleteArray(&deleteArray_HMdcRawCor);
      instance.SetDestructor(&destruct_HMdcRawCor);
      instance.SetStreamerFunc(&streamer_HMdcRawCor);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcRawCor*)
   {
      return GenerateInitInstanceLocal((::HMdcRawCor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcRawCor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcRawEventHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcRawEventHeader(void *p = 0);
   static void *newArray_HMdcRawEventHeader(Long_t size, void *p);
   static void delete_HMdcRawEventHeader(void *p);
   static void deleteArray_HMdcRawEventHeader(void *p);
   static void destruct_HMdcRawEventHeader(void *p);
   static void streamer_HMdcRawEventHeader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcRawEventHeader*)
   {
      ::HMdcRawEventHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcRawEventHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcRawEventHeader", ::HMdcRawEventHeader::Class_Version(), "././hmdcraweventheader.h", 7,
                  typeid(::HMdcRawEventHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcRawEventHeader::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcRawEventHeader) );
      instance.SetNew(&new_HMdcRawEventHeader);
      instance.SetNewArray(&newArray_HMdcRawEventHeader);
      instance.SetDelete(&delete_HMdcRawEventHeader);
      instance.SetDeleteArray(&deleteArray_HMdcRawEventHeader);
      instance.SetDestructor(&destruct_HMdcRawEventHeader);
      instance.SetStreamerFunc(&streamer_HMdcRawEventHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcRawEventHeader*)
   {
      return GenerateInitInstanceLocal((::HMdcRawEventHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcRawEventHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcGeomPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcGeomPar(void *p = 0);
   static void *newArray_HMdcGeomPar(Long_t size, void *p);
   static void delete_HMdcGeomPar(void *p);
   static void deleteArray_HMdcGeomPar(void *p);
   static void destruct_HMdcGeomPar(void *p);
   static void streamer_HMdcGeomPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcGeomPar*)
   {
      ::HMdcGeomPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcGeomPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcGeomPar", ::HMdcGeomPar::Class_Version(), "././hmdcgeompar.h", 8,
                  typeid(::HMdcGeomPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcGeomPar::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcGeomPar) );
      instance.SetNew(&new_HMdcGeomPar);
      instance.SetNewArray(&newArray_HMdcGeomPar);
      instance.SetDelete(&delete_HMdcGeomPar);
      instance.SetDeleteArray(&deleteArray_HMdcGeomPar);
      instance.SetDestructor(&destruct_HMdcGeomPar);
      instance.SetStreamerFunc(&streamer_HMdcGeomPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcGeomPar*)
   {
      return GenerateInitInstanceLocal((::HMdcGeomPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcGeomPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcDetector(void *p = 0);
   static void *newArray_HMdcDetector(Long_t size, void *p);
   static void delete_HMdcDetector(void *p);
   static void deleteArray_HMdcDetector(void *p);
   static void destruct_HMdcDetector(void *p);
   static void streamer_HMdcDetector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcDetector*)
   {
      ::HMdcDetector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcDetector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcDetector", ::HMdcDetector::Class_Version(), "././hmdcdetector.h", 8,
                  typeid(::HMdcDetector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcDetector::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcDetector) );
      instance.SetNew(&new_HMdcDetector);
      instance.SetNewArray(&newArray_HMdcDetector);
      instance.SetDelete(&delete_HMdcDetector);
      instance.SetDeleteArray(&deleteArray_HMdcDetector);
      instance.SetDestructor(&destruct_HMdcDetector);
      instance.SetStreamerFunc(&streamer_HMdcDetector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcDetector*)
   {
      return GenerateInitInstanceLocal((::HMdcDetector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcDetector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcBitFlipCorPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcBitFlipCorPar(void *p = 0);
   static void *newArray_HMdcBitFlipCorPar(Long_t size, void *p);
   static void delete_HMdcBitFlipCorPar(void *p);
   static void deleteArray_HMdcBitFlipCorPar(void *p);
   static void destruct_HMdcBitFlipCorPar(void *p);
   static void streamer_HMdcBitFlipCorPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcBitFlipCorPar*)
   {
      ::HMdcBitFlipCorPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcBitFlipCorPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcBitFlipCorPar", ::HMdcBitFlipCorPar::Class_Version(), "././hmdcbitflipcorpar.h", 8,
                  typeid(::HMdcBitFlipCorPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcBitFlipCorPar::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcBitFlipCorPar) );
      instance.SetNew(&new_HMdcBitFlipCorPar);
      instance.SetNewArray(&newArray_HMdcBitFlipCorPar);
      instance.SetDelete(&delete_HMdcBitFlipCorPar);
      instance.SetDeleteArray(&deleteArray_HMdcBitFlipCorPar);
      instance.SetDestructor(&destruct_HMdcBitFlipCorPar);
      instance.SetStreamerFunc(&streamer_HMdcBitFlipCorPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcBitFlipCorPar*)
   {
      return GenerateInitInstanceLocal((::HMdcBitFlipCorPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcBitFlipCorPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcBitFlipCor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcBitFlipCor(void *p = 0);
   static void *newArray_HMdcBitFlipCor(Long_t size, void *p);
   static void delete_HMdcBitFlipCor(void *p);
   static void deleteArray_HMdcBitFlipCor(void *p);
   static void destruct_HMdcBitFlipCor(void *p);
   static void streamer_HMdcBitFlipCor(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcBitFlipCor*)
   {
      ::HMdcBitFlipCor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcBitFlipCor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcBitFlipCor", ::HMdcBitFlipCor::Class_Version(), "././hmdcbitflipcor.h", 29,
                  typeid(::HMdcBitFlipCor), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcBitFlipCor::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcBitFlipCor) );
      instance.SetNew(&new_HMdcBitFlipCor);
      instance.SetNewArray(&newArray_HMdcBitFlipCor);
      instance.SetDelete(&delete_HMdcBitFlipCor);
      instance.SetDeleteArray(&deleteArray_HMdcBitFlipCor);
      instance.SetDestructor(&destruct_HMdcBitFlipCor);
      instance.SetStreamerFunc(&streamer_HMdcBitFlipCor);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcBitFlipCor*)
   {
      return GenerateInitInstanceLocal((::HMdcBitFlipCor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcBitFlipCor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCal1_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCal1(void *p = 0);
   static void *newArray_HMdcCal1(Long_t size, void *p);
   static void delete_HMdcCal1(void *p);
   static void deleteArray_HMdcCal1(void *p);
   static void destruct_HMdcCal1(void *p);
   static void streamer_HMdcCal1(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCal1*)
   {
      ::HMdcCal1 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCal1 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCal1", ::HMdcCal1::Class_Version(), "././hmdccal1.h", 6,
                  typeid(::HMdcCal1), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCal1::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCal1) );
      instance.SetNew(&new_HMdcCal1);
      instance.SetNewArray(&newArray_HMdcCal1);
      instance.SetDelete(&delete_HMdcCal1);
      instance.SetDeleteArray(&deleteArray_HMdcCal1);
      instance.SetDestructor(&destruct_HMdcCal1);
      instance.SetStreamerFunc(&streamer_HMdcCal1);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCal1*)
   {
      return GenerateInitInstanceLocal((::HMdcCal1*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCal1*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCal1Sim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCal1Sim(void *p = 0);
   static void *newArray_HMdcCal1Sim(Long_t size, void *p);
   static void delete_HMdcCal1Sim(void *p);
   static void deleteArray_HMdcCal1Sim(void *p);
   static void destruct_HMdcCal1Sim(void *p);
   static void streamer_HMdcCal1Sim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCal1Sim*)
   {
      ::HMdcCal1Sim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCal1Sim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCal1Sim", ::HMdcCal1Sim::Class_Version(), "././hmdccal1sim.h", 6,
                  typeid(::HMdcCal1Sim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCal1Sim::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCal1Sim) );
      instance.SetNew(&new_HMdcCal1Sim);
      instance.SetNewArray(&newArray_HMdcCal1Sim);
      instance.SetDelete(&delete_HMdcCal1Sim);
      instance.SetDeleteArray(&deleteArray_HMdcCal1Sim);
      instance.SetDestructor(&destruct_HMdcCal1Sim);
      instance.SetStreamerFunc(&streamer_HMdcCal1Sim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCal1Sim*)
   {
      return GenerateInitInstanceLocal((::HMdcCal1Sim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCal1Sim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCal2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCal2(void *p = 0);
   static void *newArray_HMdcCal2(Long_t size, void *p);
   static void delete_HMdcCal2(void *p);
   static void deleteArray_HMdcCal2(void *p);
   static void destruct_HMdcCal2(void *p);
   static void streamer_HMdcCal2(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCal2*)
   {
      ::HMdcCal2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCal2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCal2", ::HMdcCal2::Class_Version(), "././hmdccal2.h", 6,
                  typeid(::HMdcCal2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCal2::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCal2) );
      instance.SetNew(&new_HMdcCal2);
      instance.SetNewArray(&newArray_HMdcCal2);
      instance.SetDelete(&delete_HMdcCal2);
      instance.SetDeleteArray(&deleteArray_HMdcCal2);
      instance.SetDestructor(&destruct_HMdcCal2);
      instance.SetStreamerFunc(&streamer_HMdcCal2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCal2*)
   {
      return GenerateInitInstanceLocal((::HMdcCal2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCal2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCal2ParSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCal2ParSim(void *p = 0);
   static void *newArray_HMdcCal2ParSim(Long_t size, void *p);
   static void delete_HMdcCal2ParSim(void *p);
   static void deleteArray_HMdcCal2ParSim(void *p);
   static void destruct_HMdcCal2ParSim(void *p);
   static void streamer_HMdcCal2ParSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCal2ParSim*)
   {
      ::HMdcCal2ParSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCal2ParSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCal2ParSim", ::HMdcCal2ParSim::Class_Version(), "././hmdccal2parsim.h", 170,
                  typeid(::HMdcCal2ParSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCal2ParSim::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcCal2ParSim) );
      instance.SetNew(&new_HMdcCal2ParSim);
      instance.SetNewArray(&newArray_HMdcCal2ParSim);
      instance.SetDelete(&delete_HMdcCal2ParSim);
      instance.SetDeleteArray(&deleteArray_HMdcCal2ParSim);
      instance.SetDestructor(&destruct_HMdcCal2ParSim);
      instance.SetStreamerFunc(&streamer_HMdcCal2ParSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCal2ParSim*)
   {
      return GenerateInitInstanceLocal((::HMdcCal2ParSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCal2ParSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCal2ParAngle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCal2ParAngle(void *p = 0);
   static void *newArray_HMdcCal2ParAngle(Long_t size, void *p);
   static void delete_HMdcCal2ParAngle(void *p);
   static void deleteArray_HMdcCal2ParAngle(void *p);
   static void destruct_HMdcCal2ParAngle(void *p);
   static void streamer_HMdcCal2ParAngle(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCal2ParAngle*)
   {
      ::HMdcCal2ParAngle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCal2ParAngle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCal2ParAngle", ::HMdcCal2ParAngle::Class_Version(), "././hmdccal2par.h", 12,
                  typeid(::HMdcCal2ParAngle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCal2ParAngle::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCal2ParAngle) );
      instance.SetNew(&new_HMdcCal2ParAngle);
      instance.SetNewArray(&newArray_HMdcCal2ParAngle);
      instance.SetDelete(&delete_HMdcCal2ParAngle);
      instance.SetDeleteArray(&deleteArray_HMdcCal2ParAngle);
      instance.SetDestructor(&destruct_HMdcCal2ParAngle);
      instance.SetStreamerFunc(&streamer_HMdcCal2ParAngle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCal2ParAngle*)
   {
      return GenerateInitInstanceLocal((::HMdcCal2ParAngle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCal2ParAngle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCal2ParSecSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCal2ParSecSim(void *p = 0);
   static void *newArray_HMdcCal2ParSecSim(Long_t size, void *p);
   static void delete_HMdcCal2ParSecSim(void *p);
   static void deleteArray_HMdcCal2ParSecSim(void *p);
   static void destruct_HMdcCal2ParSecSim(void *p);
   static void streamer_HMdcCal2ParSecSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCal2ParSecSim*)
   {
      ::HMdcCal2ParSecSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCal2ParSecSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCal2ParSecSim", ::HMdcCal2ParSecSim::Class_Version(), "././hmdccal2parsim.h", 156,
                  typeid(::HMdcCal2ParSecSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCal2ParSecSim::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCal2ParSecSim) );
      instance.SetNew(&new_HMdcCal2ParSecSim);
      instance.SetNewArray(&newArray_HMdcCal2ParSecSim);
      instance.SetDelete(&delete_HMdcCal2ParSecSim);
      instance.SetDeleteArray(&deleteArray_HMdcCal2ParSecSim);
      instance.SetDestructor(&destruct_HMdcCal2ParSecSim);
      instance.SetStreamerFunc(&streamer_HMdcCal2ParSecSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCal2ParSecSim*)
   {
      return GenerateInitInstanceLocal((::HMdcCal2ParSecSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCal2ParSecSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCal2ParModSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCal2ParModSim(void *p = 0);
   static void *newArray_HMdcCal2ParModSim(Long_t size, void *p);
   static void delete_HMdcCal2ParModSim(void *p);
   static void deleteArray_HMdcCal2ParModSim(void *p);
   static void destruct_HMdcCal2ParModSim(void *p);
   static void streamer_HMdcCal2ParModSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCal2ParModSim*)
   {
      ::HMdcCal2ParModSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCal2ParModSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCal2ParModSim", ::HMdcCal2ParModSim::Class_Version(), "././hmdccal2parsim.h", 142,
                  typeid(::HMdcCal2ParModSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCal2ParModSim::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCal2ParModSim) );
      instance.SetNew(&new_HMdcCal2ParModSim);
      instance.SetNewArray(&newArray_HMdcCal2ParModSim);
      instance.SetDelete(&delete_HMdcCal2ParModSim);
      instance.SetDeleteArray(&deleteArray_HMdcCal2ParModSim);
      instance.SetDestructor(&destruct_HMdcCal2ParModSim);
      instance.SetStreamerFunc(&streamer_HMdcCal2ParModSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCal2ParModSim*)
   {
      return GenerateInitInstanceLocal((::HMdcCal2ParModSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCal2ParModSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCal2Par_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCal2Par(void *p = 0);
   static void *newArray_HMdcCal2Par(Long_t size, void *p);
   static void delete_HMdcCal2Par(void *p);
   static void deleteArray_HMdcCal2Par(void *p);
   static void destruct_HMdcCal2Par(void *p);
   static void streamer_HMdcCal2Par(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCal2Par*)
   {
      ::HMdcCal2Par *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCal2Par >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCal2Par", ::HMdcCal2Par::Class_Version(), "././hmdccal2par.h", 111,
                  typeid(::HMdcCal2Par), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCal2Par::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCal2Par) );
      instance.SetNew(&new_HMdcCal2Par);
      instance.SetNewArray(&newArray_HMdcCal2Par);
      instance.SetDelete(&delete_HMdcCal2Par);
      instance.SetDeleteArray(&deleteArray_HMdcCal2Par);
      instance.SetDestructor(&destruct_HMdcCal2Par);
      instance.SetStreamerFunc(&streamer_HMdcCal2Par);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCal2Par*)
   {
      return GenerateInitInstanceLocal((::HMdcCal2Par*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCal2Par*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCal2ParSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCal2ParSec(void *p = 0);
   static void *newArray_HMdcCal2ParSec(Long_t size, void *p);
   static void delete_HMdcCal2ParSec(void *p);
   static void deleteArray_HMdcCal2ParSec(void *p);
   static void destruct_HMdcCal2ParSec(void *p);
   static void streamer_HMdcCal2ParSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCal2ParSec*)
   {
      ::HMdcCal2ParSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCal2ParSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCal2ParSec", ::HMdcCal2ParSec::Class_Version(), "././hmdccal2par.h", 97,
                  typeid(::HMdcCal2ParSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCal2ParSec::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCal2ParSec) );
      instance.SetNew(&new_HMdcCal2ParSec);
      instance.SetNewArray(&newArray_HMdcCal2ParSec);
      instance.SetDelete(&delete_HMdcCal2ParSec);
      instance.SetDeleteArray(&deleteArray_HMdcCal2ParSec);
      instance.SetDestructor(&destruct_HMdcCal2ParSec);
      instance.SetStreamerFunc(&streamer_HMdcCal2ParSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCal2ParSec*)
   {
      return GenerateInitInstanceLocal((::HMdcCal2ParSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCal2ParSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCal2ParMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCal2ParMod(void *p = 0);
   static void *newArray_HMdcCal2ParMod(Long_t size, void *p);
   static void delete_HMdcCal2ParMod(void *p);
   static void deleteArray_HMdcCal2ParMod(void *p);
   static void destruct_HMdcCal2ParMod(void *p);
   static void streamer_HMdcCal2ParMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCal2ParMod*)
   {
      ::HMdcCal2ParMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCal2ParMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCal2ParMod", ::HMdcCal2ParMod::Class_Version(), "././hmdccal2par.h", 83,
                  typeid(::HMdcCal2ParMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCal2ParMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCal2ParMod) );
      instance.SetNew(&new_HMdcCal2ParMod);
      instance.SetNewArray(&newArray_HMdcCal2ParMod);
      instance.SetDelete(&delete_HMdcCal2ParMod);
      instance.SetDeleteArray(&deleteArray_HMdcCal2ParMod);
      instance.SetDestructor(&destruct_HMdcCal2ParMod);
      instance.SetStreamerFunc(&streamer_HMdcCal2ParMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCal2ParMod*)
   {
      return GenerateInitInstanceLocal((::HMdcCal2ParMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCal2ParMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCal2ParAngleSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCal2ParAngleSim(void *p = 0);
   static void *newArray_HMdcCal2ParAngleSim(Long_t size, void *p);
   static void delete_HMdcCal2ParAngleSim(void *p);
   static void deleteArray_HMdcCal2ParAngleSim(void *p);
   static void destruct_HMdcCal2ParAngleSim(void *p);
   static void streamer_HMdcCal2ParAngleSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCal2ParAngleSim*)
   {
      ::HMdcCal2ParAngleSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCal2ParAngleSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCal2ParAngleSim", ::HMdcCal2ParAngleSim::Class_Version(), "././hmdccal2parsim.h", 13,
                  typeid(::HMdcCal2ParAngleSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCal2ParAngleSim::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCal2ParAngleSim) );
      instance.SetNew(&new_HMdcCal2ParAngleSim);
      instance.SetNewArray(&newArray_HMdcCal2ParAngleSim);
      instance.SetDelete(&delete_HMdcCal2ParAngleSim);
      instance.SetDeleteArray(&deleteArray_HMdcCal2ParAngleSim);
      instance.SetDestructor(&destruct_HMdcCal2ParAngleSim);
      instance.SetStreamerFunc(&streamer_HMdcCal2ParAngleSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCal2ParAngleSim*)
   {
      return GenerateInitInstanceLocal((::HMdcCal2ParAngleSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCal2ParAngleSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCal2Sim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCal2Sim(void *p = 0);
   static void *newArray_HMdcCal2Sim(Long_t size, void *p);
   static void delete_HMdcCal2Sim(void *p);
   static void deleteArray_HMdcCal2Sim(void *p);
   static void destruct_HMdcCal2Sim(void *p);
   static void streamer_HMdcCal2Sim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCal2Sim*)
   {
      ::HMdcCal2Sim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCal2Sim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCal2Sim", ::HMdcCal2Sim::Class_Version(), "././hmdccal2sim.h", 6,
                  typeid(::HMdcCal2Sim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCal2Sim::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCal2Sim) );
      instance.SetNew(&new_HMdcCal2Sim);
      instance.SetNewArray(&newArray_HMdcCal2Sim);
      instance.SetDelete(&delete_HMdcCal2Sim);
      instance.SetDeleteArray(&deleteArray_HMdcCal2Sim);
      instance.SetDestructor(&destruct_HMdcCal2Sim);
      instance.SetStreamerFunc(&streamer_HMdcCal2Sim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCal2Sim*)
   {
      return GenerateInitInstanceLocal((::HMdcCal2Sim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCal2Sim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCalParRaw_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCalParRaw(void *p = 0);
   static void *newArray_HMdcCalParRaw(Long_t size, void *p);
   static void delete_HMdcCalParRaw(void *p);
   static void deleteArray_HMdcCalParRaw(void *p);
   static void destruct_HMdcCalParRaw(void *p);
   static void streamer_HMdcCalParRaw(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCalParRaw*)
   {
      ::HMdcCalParRaw *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCalParRaw >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCalParRaw", ::HMdcCalParRaw::Class_Version(), "././hmdccalparraw.h", 99,
                  typeid(::HMdcCalParRaw), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCalParRaw::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcCalParRaw) );
      instance.SetNew(&new_HMdcCalParRaw);
      instance.SetNewArray(&newArray_HMdcCalParRaw);
      instance.SetDelete(&delete_HMdcCalParRaw);
      instance.SetDeleteArray(&deleteArray_HMdcCalParRaw);
      instance.SetDestructor(&destruct_HMdcCalParRaw);
      instance.SetStreamerFunc(&streamer_HMdcCalParRaw);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCalParRaw*)
   {
      return GenerateInitInstanceLocal((::HMdcCalParRaw*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCalParRaw*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookupGeom_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLookupGeom(void *p = 0);
   static void *newArray_HMdcLookupGeom(Long_t size, void *p);
   static void delete_HMdcLookupGeom(void *p);
   static void deleteArray_HMdcLookupGeom(void *p);
   static void destruct_HMdcLookupGeom(void *p);
   static void streamer_HMdcLookupGeom(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookupGeom*)
   {
      ::HMdcLookupGeom *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookupGeom >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookupGeom", ::HMdcLookupGeom::Class_Version(), "././hmdclookupgeom.h", 93,
                  typeid(::HMdcLookupGeom), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookupGeom::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLookupGeom) );
      instance.SetNew(&new_HMdcLookupGeom);
      instance.SetNewArray(&newArray_HMdcLookupGeom);
      instance.SetDelete(&delete_HMdcLookupGeom);
      instance.SetDeleteArray(&deleteArray_HMdcLookupGeom);
      instance.SetDestructor(&destruct_HMdcLookupGeom);
      instance.SetStreamerFunc(&streamer_HMdcLookupGeom);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookupGeom*)
   {
      return GenerateInitInstanceLocal((::HMdcLookupGeom*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookupGeom*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTimeCut_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTimeCut(void *p = 0);
   static void *newArray_HMdcTimeCut(Long_t size, void *p);
   static void delete_HMdcTimeCut(void *p);
   static void deleteArray_HMdcTimeCut(void *p);
   static void destruct_HMdcTimeCut(void *p);
   static void streamer_HMdcTimeCut(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTimeCut*)
   {
      ::HMdcTimeCut *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTimeCut >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTimeCut", ::HMdcTimeCut::Class_Version(), "././hmdctimecut.h", 137,
                  typeid(::HMdcTimeCut), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTimeCut::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTimeCut) );
      instance.SetNew(&new_HMdcTimeCut);
      instance.SetNewArray(&newArray_HMdcTimeCut);
      instance.SetDelete(&delete_HMdcTimeCut);
      instance.SetDeleteArray(&deleteArray_HMdcTimeCut);
      instance.SetDestructor(&destruct_HMdcTimeCut);
      instance.SetStreamerFunc(&streamer_HMdcTimeCut);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTimeCut*)
   {
      return GenerateInitInstanceLocal((::HMdcTimeCut*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTimeCut*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCutStat_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HMdcCutStat(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCutStat*)
   {
      ::HMdcCutStat *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCutStat >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCutStat", ::HMdcCutStat::Class_Version(), "././hmdccutstat.h", 120,
                  typeid(::HMdcCutStat), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCutStat::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCutStat) );
      instance.SetStreamerFunc(&streamer_HMdcCutStat);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCutStat*)
   {
      return GenerateInitInstanceLocal((::HMdcCutStat*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCutStat*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcWireStat_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcWireStat(void *p = 0);
   static void *newArray_HMdcWireStat(Long_t size, void *p);
   static void delete_HMdcWireStat(void *p);
   static void deleteArray_HMdcWireStat(void *p);
   static void destruct_HMdcWireStat(void *p);
   static void streamer_HMdcWireStat(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcWireStat*)
   {
      ::HMdcWireStat *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcWireStat >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcWireStat", ::HMdcWireStat::Class_Version(), "././hmdcwirestat.h", 11,
                  typeid(::HMdcWireStat), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcWireStat::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcWireStat) );
      instance.SetNew(&new_HMdcWireStat);
      instance.SetNewArray(&newArray_HMdcWireStat);
      instance.SetDelete(&delete_HMdcWireStat);
      instance.SetDeleteArray(&deleteArray_HMdcWireStat);
      instance.SetDestructor(&destruct_HMdcWireStat);
      instance.SetStreamerFunc(&streamer_HMdcWireStat);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcWireStat*)
   {
      return GenerateInitInstanceLocal((::HMdcWireStat*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcWireStat*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCalParTdc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCalParTdc(void *p = 0);
   static void *newArray_HMdcCalParTdc(Long_t size, void *p);
   static void delete_HMdcCalParTdc(void *p);
   static void deleteArray_HMdcCalParTdc(void *p);
   static void destruct_HMdcCalParTdc(void *p);
   static void streamer_HMdcCalParTdc(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCalParTdc*)
   {
      ::HMdcCalParTdc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCalParTdc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCalParTdc", ::HMdcCalParTdc::Class_Version(), "././hmdccalparraw.h", 9,
                  typeid(::HMdcCalParTdc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCalParTdc::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCalParTdc) );
      instance.SetNew(&new_HMdcCalParTdc);
      instance.SetNewArray(&newArray_HMdcCalParTdc);
      instance.SetDelete(&delete_HMdcCalParTdc);
      instance.SetDeleteArray(&deleteArray_HMdcCalParTdc);
      instance.SetDestructor(&destruct_HMdcCalParTdc);
      instance.SetStreamerFunc(&streamer_HMdcCalParTdc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCalParTdc*)
   {
      return GenerateInitInstanceLocal((::HMdcCalParTdc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCalParTdc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCalibrater1_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCalibrater1(void *p = 0);
   static void *newArray_HMdcCalibrater1(Long_t size, void *p);
   static void delete_HMdcCalibrater1(void *p);
   static void deleteArray_HMdcCalibrater1(void *p);
   static void destruct_HMdcCalibrater1(void *p);
   static void streamer_HMdcCalibrater1(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCalibrater1*)
   {
      ::HMdcCalibrater1 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCalibrater1 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCalibrater1", ::HMdcCalibrater1::Class_Version(), "././hmdccalibrater1.h", 20,
                  typeid(::HMdcCalibrater1), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCalibrater1::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCalibrater1) );
      instance.SetNew(&new_HMdcCalibrater1);
      instance.SetNewArray(&newArray_HMdcCalibrater1);
      instance.SetDelete(&delete_HMdcCalibrater1);
      instance.SetDeleteArray(&deleteArray_HMdcCalibrater1);
      instance.SetDestructor(&destruct_HMdcCalibrater1);
      instance.SetStreamerFunc(&streamer_HMdcCalibrater1);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCalibrater1*)
   {
      return GenerateInitInstanceLocal((::HMdcCalibrater1*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCalibrater1*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCalParMbo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCalParMbo(void *p = 0);
   static void *newArray_HMdcCalParMbo(Long_t size, void *p);
   static void delete_HMdcCalParMbo(void *p);
   static void deleteArray_HMdcCalParMbo(void *p);
   static void destruct_HMdcCalParMbo(void *p);
   static void streamer_HMdcCalParMbo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCalParMbo*)
   {
      ::HMdcCalParMbo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCalParMbo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCalParMbo", ::HMdcCalParMbo::Class_Version(), "././hmdccalparraw.h", 55,
                  typeid(::HMdcCalParMbo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCalParMbo::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCalParMbo) );
      instance.SetNew(&new_HMdcCalParMbo);
      instance.SetNewArray(&newArray_HMdcCalParMbo);
      instance.SetDelete(&delete_HMdcCalParMbo);
      instance.SetDeleteArray(&deleteArray_HMdcCalParMbo);
      instance.SetDestructor(&destruct_HMdcCalParMbo);
      instance.SetStreamerFunc(&streamer_HMdcCalParMbo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCalParMbo*)
   {
      return GenerateInitInstanceLocal((::HMdcCalParMbo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCalParMbo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCalParRawMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCalParRawMod(void *p = 0);
   static void *newArray_HMdcCalParRawMod(Long_t size, void *p);
   static void delete_HMdcCalParRawMod(void *p);
   static void deleteArray_HMdcCalParRawMod(void *p);
   static void destruct_HMdcCalParRawMod(void *p);
   static void streamer_HMdcCalParRawMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCalParRawMod*)
   {
      ::HMdcCalParRawMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCalParRawMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCalParRawMod", ::HMdcCalParRawMod::Class_Version(), "././hmdccalparraw.h", 69,
                  typeid(::HMdcCalParRawMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCalParRawMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCalParRawMod) );
      instance.SetNew(&new_HMdcCalParRawMod);
      instance.SetNewArray(&newArray_HMdcCalParRawMod);
      instance.SetDelete(&delete_HMdcCalParRawMod);
      instance.SetDeleteArray(&deleteArray_HMdcCalParRawMod);
      instance.SetDestructor(&destruct_HMdcCalParRawMod);
      instance.SetStreamerFunc(&streamer_HMdcCalParRawMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCalParRawMod*)
   {
      return GenerateInitInstanceLocal((::HMdcCalParRawMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCalParRawMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCalParRawSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCalParRawSec(void *p = 0);
   static void *newArray_HMdcCalParRawSec(Long_t size, void *p);
   static void delete_HMdcCalParRawSec(void *p);
   static void deleteArray_HMdcCalParRawSec(void *p);
   static void destruct_HMdcCalParRawSec(void *p);
   static void streamer_HMdcCalParRawSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCalParRawSec*)
   {
      ::HMdcCalParRawSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCalParRawSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCalParRawSec", ::HMdcCalParRawSec::Class_Version(), "././hmdccalparraw.h", 84,
                  typeid(::HMdcCalParRawSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCalParRawSec::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCalParRawSec) );
      instance.SetNew(&new_HMdcCalParRawSec);
      instance.SetNewArray(&newArray_HMdcCalParRawSec);
      instance.SetDelete(&delete_HMdcCalParRawSec);
      instance.SetDeleteArray(&deleteArray_HMdcCalParRawSec);
      instance.SetDestructor(&destruct_HMdcCalParRawSec);
      instance.SetStreamerFunc(&streamer_HMdcCalParRawSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCalParRawSec*)
   {
      return GenerateInitInstanceLocal((::HMdcCalParRawSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCalParRawSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCellEffAngle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCellEffAngle(void *p = 0);
   static void *newArray_HMdcCellEffAngle(Long_t size, void *p);
   static void delete_HMdcCellEffAngle(void *p);
   static void deleteArray_HMdcCellEffAngle(void *p);
   static void destruct_HMdcCellEffAngle(void *p);
   static void streamer_HMdcCellEffAngle(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCellEffAngle*)
   {
      ::HMdcCellEffAngle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCellEffAngle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCellEffAngle", ::HMdcCellEffAngle::Class_Version(), "././hmdccelleff.h", 11,
                  typeid(::HMdcCellEffAngle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCellEffAngle::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCellEffAngle) );
      instance.SetNew(&new_HMdcCellEffAngle);
      instance.SetNewArray(&newArray_HMdcCellEffAngle);
      instance.SetDelete(&delete_HMdcCellEffAngle);
      instance.SetDeleteArray(&deleteArray_HMdcCellEffAngle);
      instance.SetDestructor(&destruct_HMdcCellEffAngle);
      instance.SetStreamerFunc(&streamer_HMdcCellEffAngle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCellEffAngle*)
   {
      return GenerateInitInstanceLocal((::HMdcCellEffAngle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCellEffAngle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCellEffMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCellEffMod(void *p = 0);
   static void *newArray_HMdcCellEffMod(Long_t size, void *p);
   static void delete_HMdcCellEffMod(void *p);
   static void deleteArray_HMdcCellEffMod(void *p);
   static void destruct_HMdcCellEffMod(void *p);
   static void streamer_HMdcCellEffMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCellEffMod*)
   {
      ::HMdcCellEffMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCellEffMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCellEffMod", ::HMdcCellEffMod::Class_Version(), "././hmdccelleff.h", 38,
                  typeid(::HMdcCellEffMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCellEffMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCellEffMod) );
      instance.SetNew(&new_HMdcCellEffMod);
      instance.SetNewArray(&newArray_HMdcCellEffMod);
      instance.SetDelete(&delete_HMdcCellEffMod);
      instance.SetDeleteArray(&deleteArray_HMdcCellEffMod);
      instance.SetDestructor(&destruct_HMdcCellEffMod);
      instance.SetStreamerFunc(&streamer_HMdcCellEffMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCellEffMod*)
   {
      return GenerateInitInstanceLocal((::HMdcCellEffMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCellEffMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCellEff_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCellEff(void *p = 0);
   static void *newArray_HMdcCellEff(Long_t size, void *p);
   static void delete_HMdcCellEff(void *p);
   static void deleteArray_HMdcCellEff(void *p);
   static void destruct_HMdcCellEff(void *p);
   static void streamer_HMdcCellEff(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCellEff*)
   {
      ::HMdcCellEff *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCellEff >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCellEff", ::HMdcCellEff::Class_Version(), "././hmdccelleff.h", 51,
                  typeid(::HMdcCellEff), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCellEff::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCellEff) );
      instance.SetNew(&new_HMdcCellEff);
      instance.SetNewArray(&newArray_HMdcCellEff);
      instance.SetDelete(&delete_HMdcCellEff);
      instance.SetDeleteArray(&deleteArray_HMdcCellEff);
      instance.SetDestructor(&destruct_HMdcCellEff);
      instance.SetStreamerFunc(&streamer_HMdcCellEff);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCellEff*)
   {
      return GenerateInitInstanceLocal((::HMdcCellEff*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCellEff*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCellGroup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdcCellGroup(void *p);
   static void deleteArray_HMdcCellGroup(void *p);
   static void destruct_HMdcCellGroup(void *p);
   static void streamer_HMdcCellGroup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCellGroup*)
   {
      ::HMdcCellGroup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCellGroup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCellGroup", ::HMdcCellGroup::Class_Version(), "././hmdccellgroup.h", 7,
                  typeid(::HMdcCellGroup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCellGroup::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCellGroup) );
      instance.SetDelete(&delete_HMdcCellGroup);
      instance.SetDeleteArray(&deleteArray_HMdcCellGroup);
      instance.SetDestructor(&destruct_HMdcCellGroup);
      instance.SetStreamerFunc(&streamer_HMdcCellGroup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCellGroup*)
   {
      return GenerateInitInstanceLocal((::HMdcCellGroup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCellGroup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCellGroup6_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCellGroup6(void *p = 0);
   static void *newArray_HMdcCellGroup6(Long_t size, void *p);
   static void delete_HMdcCellGroup6(void *p);
   static void deleteArray_HMdcCellGroup6(void *p);
   static void destruct_HMdcCellGroup6(void *p);
   static void streamer_HMdcCellGroup6(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCellGroup6*)
   {
      ::HMdcCellGroup6 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCellGroup6 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCellGroup6", ::HMdcCellGroup6::Class_Version(), "././hmdccellgroup.h", 32,
                  typeid(::HMdcCellGroup6), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCellGroup6::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCellGroup6) );
      instance.SetNew(&new_HMdcCellGroup6);
      instance.SetNewArray(&newArray_HMdcCellGroup6);
      instance.SetDelete(&delete_HMdcCellGroup6);
      instance.SetDeleteArray(&deleteArray_HMdcCellGroup6);
      instance.SetDestructor(&destruct_HMdcCellGroup6);
      instance.SetStreamerFunc(&streamer_HMdcCellGroup6);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCellGroup6*)
   {
      return GenerateInitInstanceLocal((::HMdcCellGroup6*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCellGroup6*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCellGroup12_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCellGroup12(void *p = 0);
   static void *newArray_HMdcCellGroup12(Long_t size, void *p);
   static void delete_HMdcCellGroup12(void *p);
   static void deleteArray_HMdcCellGroup12(void *p);
   static void destruct_HMdcCellGroup12(void *p);
   static void streamer_HMdcCellGroup12(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCellGroup12*)
   {
      ::HMdcCellGroup12 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCellGroup12 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCellGroup12", ::HMdcCellGroup12::Class_Version(), "././hmdccellgroup.h", 56,
                  typeid(::HMdcCellGroup12), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCellGroup12::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCellGroup12) );
      instance.SetNew(&new_HMdcCellGroup12);
      instance.SetNewArray(&newArray_HMdcCellGroup12);
      instance.SetDelete(&delete_HMdcCellGroup12);
      instance.SetDeleteArray(&deleteArray_HMdcCellGroup12);
      instance.SetDestructor(&destruct_HMdcCellGroup12);
      instance.SetStreamerFunc(&streamer_HMdcCellGroup12);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCellGroup12*)
   {
      return GenerateInitInstanceLocal((::HMdcCellGroup12*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCellGroup12*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcContFact(void *p = 0);
   static void *newArray_HMdcContFact(Long_t size, void *p);
   static void delete_HMdcContFact(void *p);
   static void deleteArray_HMdcContFact(void *p);
   static void destruct_HMdcContFact(void *p);
   static void streamer_HMdcContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcContFact*)
   {
      ::HMdcContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcContFact", ::HMdcContFact::Class_Version(), "././hmdccontfact.h", 9,
                  typeid(::HMdcContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcContFact::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcContFact) );
      instance.SetNew(&new_HMdcContFact);
      instance.SetNewArray(&newArray_HMdcContFact);
      instance.SetDelete(&delete_HMdcContFact);
      instance.SetDeleteArray(&deleteArray_HMdcContFact);
      instance.SetDestructor(&destruct_HMdcContFact);
      instance.SetStreamerFunc(&streamer_HMdcContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcContFact*)
   {
      return GenerateInitInstanceLocal((::HMdcContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCutStatMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCutStatMod(void *p = 0);
   static void *newArray_HMdcCutStatMod(Long_t size, void *p);
   static void delete_HMdcCutStatMod(void *p);
   static void deleteArray_HMdcCutStatMod(void *p);
   static void destruct_HMdcCutStatMod(void *p);
   static void streamer_HMdcCutStatMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCutStatMod*)
   {
      ::HMdcCutStatMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCutStatMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCutStatMod", ::HMdcCutStatMod::Class_Version(), "././hmdccutstat.h", 10,
                  typeid(::HMdcCutStatMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCutStatMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCutStatMod) );
      instance.SetNew(&new_HMdcCutStatMod);
      instance.SetNewArray(&newArray_HMdcCutStatMod);
      instance.SetDelete(&delete_HMdcCutStatMod);
      instance.SetDeleteArray(&deleteArray_HMdcCutStatMod);
      instance.SetDestructor(&destruct_HMdcCutStatMod);
      instance.SetStreamerFunc(&streamer_HMdcCutStatMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCutStatMod*)
   {
      return GenerateInitInstanceLocal((::HMdcCutStatMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCutStatMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCutStatSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCutStatSec(void *p = 0);
   static void *newArray_HMdcCutStatSec(Long_t size, void *p);
   static void delete_HMdcCutStatSec(void *p);
   static void deleteArray_HMdcCutStatSec(void *p);
   static void destruct_HMdcCutStatSec(void *p);
   static void streamer_HMdcCutStatSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCutStatSec*)
   {
      ::HMdcCutStatSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCutStatSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCutStatSec", ::HMdcCutStatSec::Class_Version(), "././hmdccutstat.h", 105,
                  typeid(::HMdcCutStatSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCutStatSec::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCutStatSec) );
      instance.SetNew(&new_HMdcCutStatSec);
      instance.SetNewArray(&newArray_HMdcCutStatSec);
      instance.SetDelete(&delete_HMdcCutStatSec);
      instance.SetDeleteArray(&deleteArray_HMdcCutStatSec);
      instance.SetDestructor(&destruct_HMdcCutStatSec);
      instance.SetStreamerFunc(&streamer_HMdcCutStatSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCutStatSec*)
   {
      return GenerateInitInstanceLocal((::HMdcCutStatSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCutStatSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLayerGeomPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLayerGeomPar(void *p = 0);
   static void *newArray_HMdcLayerGeomPar(Long_t size, void *p);
   static void delete_HMdcLayerGeomPar(void *p);
   static void deleteArray_HMdcLayerGeomPar(void *p);
   static void destruct_HMdcLayerGeomPar(void *p);
   static void streamer_HMdcLayerGeomPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLayerGeomPar*)
   {
      ::HMdcLayerGeomPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLayerGeomPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLayerGeomPar", ::HMdcLayerGeomPar::Class_Version(), "././hmdclayergeompar.h", 84,
                  typeid(::HMdcLayerGeomPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLayerGeomPar::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLayerGeomPar) );
      instance.SetNew(&new_HMdcLayerGeomPar);
      instance.SetNewArray(&newArray_HMdcLayerGeomPar);
      instance.SetDelete(&delete_HMdcLayerGeomPar);
      instance.SetDeleteArray(&deleteArray_HMdcLayerGeomPar);
      instance.SetDestructor(&destruct_HMdcLayerGeomPar);
      instance.SetStreamerFunc(&streamer_HMdcLayerGeomPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLayerGeomPar*)
   {
      return GenerateInitInstanceLocal((::HMdcLayerGeomPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLayerGeomPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcDigitPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcDigitPar(void *p = 0);
   static void *newArray_HMdcDigitPar(Long_t size, void *p);
   static void delete_HMdcDigitPar(void *p);
   static void deleteArray_HMdcDigitPar(void *p);
   static void destruct_HMdcDigitPar(void *p);
   static void streamer_HMdcDigitPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcDigitPar*)
   {
      ::HMdcDigitPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcDigitPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcDigitPar", ::HMdcDigitPar::Class_Version(), "././hmdcdigitpar.h", 8,
                  typeid(::HMdcDigitPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcDigitPar::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcDigitPar) );
      instance.SetNew(&new_HMdcDigitPar);
      instance.SetNewArray(&newArray_HMdcDigitPar);
      instance.SetDelete(&delete_HMdcDigitPar);
      instance.SetDeleteArray(&deleteArray_HMdcDigitPar);
      instance.SetDestructor(&destruct_HMdcDigitPar);
      instance.SetStreamerFunc(&streamer_HMdcDigitPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcDigitPar*)
   {
      return GenerateInitInstanceLocal((::HMdcDigitPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcDigitPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcGeomStruct_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcGeomStruct(void *p = 0);
   static void *newArray_HMdcGeomStruct(Long_t size, void *p);
   static void delete_HMdcGeomStruct(void *p);
   static void deleteArray_HMdcGeomStruct(void *p);
   static void destruct_HMdcGeomStruct(void *p);
   static void streamer_HMdcGeomStruct(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcGeomStruct*)
   {
      ::HMdcGeomStruct *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcGeomStruct >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcGeomStruct", ::HMdcGeomStruct::Class_Version(), "././hmdcgeomstruct.h", 39,
                  typeid(::HMdcGeomStruct), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcGeomStruct::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcGeomStruct) );
      instance.SetNew(&new_HMdcGeomStruct);
      instance.SetNewArray(&newArray_HMdcGeomStruct);
      instance.SetDelete(&delete_HMdcGeomStruct);
      instance.SetDeleteArray(&deleteArray_HMdcGeomStruct);
      instance.SetDestructor(&destruct_HMdcGeomStruct);
      instance.SetStreamerFunc(&streamer_HMdcGeomStruct);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcGeomStruct*)
   {
      return GenerateInitInstanceLocal((::HMdcGeomStruct*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcGeomStruct*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcGeantCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcGeantCell(void *p = 0);
   static void *newArray_HMdcGeantCell(Long_t size, void *p);
   static void delete_HMdcGeantCell(void *p);
   static void deleteArray_HMdcGeantCell(void *p);
   static void destruct_HMdcGeantCell(void *p);
   static void streamer_HMdcGeantCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcGeantCell*)
   {
      ::HMdcGeantCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcGeantCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcGeantCell", ::HMdcGeantCell::Class_Version(), "././hmdcgeantcell.h", 8,
                  typeid(::HMdcGeantCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcGeantCell::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcGeantCell) );
      instance.SetNew(&new_HMdcGeantCell);
      instance.SetNewArray(&newArray_HMdcGeantCell);
      instance.SetDelete(&delete_HMdcGeantCell);
      instance.SetDeleteArray(&deleteArray_HMdcGeantCell);
      instance.SetDestructor(&destruct_HMdcGeantCell);
      instance.SetStreamerFunc(&streamer_HMdcGeantCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcGeantCell*)
   {
      return GenerateInitInstanceLocal((::HMdcGeantCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcGeantCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcDigitizer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcDigitizer(void *p = 0);
   static void *newArray_HMdcDigitizer(Long_t size, void *p);
   static void delete_HMdcDigitizer(void *p);
   static void deleteArray_HMdcDigitizer(void *p);
   static void destruct_HMdcDigitizer(void *p);
   static void streamer_HMdcDigitizer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcDigitizer*)
   {
      ::HMdcDigitizer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcDigitizer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcDigitizer", ::HMdcDigitizer::Class_Version(), "././hmdcdigitizer.h", 76,
                  typeid(::HMdcDigitizer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcDigitizer::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcDigitizer) );
      instance.SetNew(&new_HMdcDigitizer);
      instance.SetNewArray(&newArray_HMdcDigitizer);
      instance.SetDelete(&delete_HMdcDigitizer);
      instance.SetDeleteArray(&deleteArray_HMdcDigitizer);
      instance.SetDestructor(&destruct_HMdcDigitizer);
      instance.SetStreamerFunc(&streamer_HMdcDigitizer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcDigitizer*)
   {
      return GenerateInitInstanceLocal((::HMdcDigitizer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcDigitizer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcGeantReader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcGeantReader(void *p = 0);
   static void *newArray_HMdcGeantReader(Long_t size, void *p);
   static void delete_HMdcGeantReader(void *p);
   static void deleteArray_HMdcGeantReader(void *p);
   static void destruct_HMdcGeantReader(void *p);
   static void streamer_HMdcGeantReader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcGeantReader*)
   {
      ::HMdcGeantReader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcGeantReader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcGeantReader", ::HMdcGeantReader::Class_Version(), "././hmdcgeantreader.h", 10,
                  typeid(::HMdcGeantReader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcGeantReader::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcGeantReader) );
      instance.SetNew(&new_HMdcGeantReader);
      instance.SetNewArray(&newArray_HMdcGeantReader);
      instance.SetDelete(&delete_HMdcGeantReader);
      instance.SetDeleteArray(&deleteArray_HMdcGeantReader);
      instance.SetDestructor(&destruct_HMdcGeantReader);
      instance.SetStreamerFunc(&streamer_HMdcGeantReader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcGeantReader*)
   {
      return GenerateInitInstanceLocal((::HMdcGeantReader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcGeantReader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcGeomModStru_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcGeomModStru(void *p = 0);
   static void *newArray_HMdcGeomModStru(Long_t size, void *p);
   static void delete_HMdcGeomModStru(void *p);
   static void deleteArray_HMdcGeomModStru(void *p);
   static void destruct_HMdcGeomModStru(void *p);
   static void streamer_HMdcGeomModStru(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcGeomModStru*)
   {
      ::HMdcGeomModStru *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcGeomModStru >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcGeomModStru", ::HMdcGeomModStru::Class_Version(), "././hmdcgeomstruct.h", 11,
                  typeid(::HMdcGeomModStru), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcGeomModStru::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcGeomModStru) );
      instance.SetNew(&new_HMdcGeomModStru);
      instance.SetNewArray(&newArray_HMdcGeomModStru);
      instance.SetDelete(&delete_HMdcGeomModStru);
      instance.SetDeleteArray(&deleteArray_HMdcGeomModStru);
      instance.SetDestructor(&destruct_HMdcGeomModStru);
      instance.SetStreamerFunc(&streamer_HMdcGeomModStru);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcGeomModStru*)
   {
      return GenerateInitInstanceLocal((::HMdcGeomModStru*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcGeomModStru*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcGeomSecStru_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcGeomSecStru(void *p = 0);
   static void *newArray_HMdcGeomSecStru(Long_t size, void *p);
   static void delete_HMdcGeomSecStru(void *p);
   static void deleteArray_HMdcGeomSecStru(void *p);
   static void destruct_HMdcGeomSecStru(void *p);
   static void streamer_HMdcGeomSecStru(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcGeomSecStru*)
   {
      ::HMdcGeomSecStru *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcGeomSecStru >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcGeomSecStru", ::HMdcGeomSecStru::Class_Version(), "././hmdcgeomstruct.h", 25,
                  typeid(::HMdcGeomSecStru), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcGeomSecStru::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcGeomSecStru) );
      instance.SetNew(&new_HMdcGeomSecStru);
      instance.SetNewArray(&newArray_HMdcGeomSecStru);
      instance.SetDelete(&delete_HMdcGeomSecStru);
      instance.SetDeleteArray(&deleteArray_HMdcGeomSecStru);
      instance.SetDestructor(&destruct_HMdcGeomSecStru);
      instance.SetStreamerFunc(&streamer_HMdcGeomSecStru);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcGeomSecStru*)
   {
      return GenerateInitInstanceLocal((::HMdcGeomSecStru*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcGeomSecStru*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcHit(void *p = 0);
   static void *newArray_HMdcHit(Long_t size, void *p);
   static void delete_HMdcHit(void *p);
   static void deleteArray_HMdcHit(void *p);
   static void destruct_HMdcHit(void *p);
   static void streamer_HMdcHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcHit*)
   {
      ::HMdcHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcHit", ::HMdcHit::Class_Version(), "././hmdchit.h", 18,
                  typeid(::HMdcHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcHit::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcHit) );
      instance.SetNew(&new_HMdcHit);
      instance.SetNewArray(&newArray_HMdcHit);
      instance.SetDelete(&delete_HMdcHit);
      instance.SetDeleteArray(&deleteArray_HMdcHit);
      instance.SetDestructor(&destruct_HMdcHit);
      instance.SetStreamerFunc(&streamer_HMdcHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcHit*)
   {
      return GenerateInitInstanceLocal((::HMdcHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcHitSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcHitSim(void *p = 0);
   static void *newArray_HMdcHitSim(Long_t size, void *p);
   static void delete_HMdcHitSim(void *p);
   static void deleteArray_HMdcHitSim(void *p);
   static void destruct_HMdcHitSim(void *p);
   static void streamer_HMdcHitSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcHitSim*)
   {
      ::HMdcHitSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcHitSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcHitSim", ::HMdcHitSim::Class_Version(), "././hmdchitsim.h", 6,
                  typeid(::HMdcHitSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcHitSim::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcHitSim) );
      instance.SetNew(&new_HMdcHitSim);
      instance.SetNewArray(&newArray_HMdcHitSim);
      instance.SetDelete(&delete_HMdcHitSim);
      instance.SetDeleteArray(&deleteArray_HMdcHitSim);
      instance.SetDestructor(&destruct_HMdcHitSim);
      instance.SetStreamerFunc(&streamer_HMdcHitSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcHitSim*)
   {
      return GenerateInitInstanceLocal((::HMdcHitSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcHitSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcSeg_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcSeg(void *p = 0);
   static void *newArray_HMdcSeg(Long_t size, void *p);
   static void delete_HMdcSeg(void *p);
   static void deleteArray_HMdcSeg(void *p);
   static void destruct_HMdcSeg(void *p);
   static void streamer_HMdcSeg(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcSeg*)
   {
      ::HMdcSeg *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcSeg >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcSeg", ::HMdcSeg::Class_Version(), "././hmdcseg.h", 15,
                  typeid(::HMdcSeg), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcSeg::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcSeg) );
      instance.SetNew(&new_HMdcSeg);
      instance.SetNewArray(&newArray_HMdcSeg);
      instance.SetDelete(&delete_HMdcSeg);
      instance.SetDeleteArray(&deleteArray_HMdcSeg);
      instance.SetDestructor(&destruct_HMdcSeg);
      instance.SetStreamerFunc(&streamer_HMdcSeg);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcSeg*)
   {
      return GenerateInitInstanceLocal((::HMdcSeg*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcSeg*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcSegSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcSegSim(void *p = 0);
   static void *newArray_HMdcSegSim(Long_t size, void *p);
   static void delete_HMdcSegSim(void *p);
   static void deleteArray_HMdcSegSim(void *p);
   static void destruct_HMdcSegSim(void *p);
   static void streamer_HMdcSegSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcSegSim*)
   {
      ::HMdcSegSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcSegSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcSegSim", ::HMdcSegSim::Class_Version(), "././hmdcsegsim.h", 6,
                  typeid(::HMdcSegSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcSegSim::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcSegSim) );
      instance.SetNew(&new_HMdcSegSim);
      instance.SetNewArray(&newArray_HMdcSegSim);
      instance.SetDelete(&delete_HMdcSegSim);
      instance.SetDeleteArray(&deleteArray_HMdcSegSim);
      instance.SetDestructor(&destruct_HMdcSegSim);
      instance.SetStreamerFunc(&streamer_HMdcSegSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcSegSim*)
   {
      return GenerateInitInstanceLocal((::HMdcSegSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcSegSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrkCand_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrkCand(void *p = 0);
   static void *newArray_HMdcTrkCand(Long_t size, void *p);
   static void delete_HMdcTrkCand(void *p);
   static void deleteArray_HMdcTrkCand(void *p);
   static void destruct_HMdcTrkCand(void *p);
   static void streamer_HMdcTrkCand(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrkCand*)
   {
      ::HMdcTrkCand *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrkCand >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrkCand", ::HMdcTrkCand::Class_Version(), "././hmdctrkcand.h", 6,
                  typeid(::HMdcTrkCand), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrkCand::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrkCand) );
      instance.SetNew(&new_HMdcTrkCand);
      instance.SetNewArray(&newArray_HMdcTrkCand);
      instance.SetDelete(&delete_HMdcTrkCand);
      instance.SetDeleteArray(&deleteArray_HMdcTrkCand);
      instance.SetDestructor(&destruct_HMdcTrkCand);
      instance.SetStreamerFunc(&streamer_HMdcTrkCand);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrkCand*)
   {
      return GenerateInitInstanceLocal((::HMdcTrkCand*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrkCand*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcHitIdeal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcHitIdeal(void *p = 0);
   static void *newArray_HMdcHitIdeal(Long_t size, void *p);
   static void delete_HMdcHitIdeal(void *p);
   static void deleteArray_HMdcHitIdeal(void *p);
   static void destruct_HMdcHitIdeal(void *p);
   static void streamer_HMdcHitIdeal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcHitIdeal*)
   {
      ::HMdcHitIdeal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcHitIdeal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcHitIdeal", ::HMdcHitIdeal::Class_Version(), "././hmdcidealclasses.h", 8,
                  typeid(::HMdcHitIdeal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcHitIdeal::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcHitIdeal) );
      instance.SetNew(&new_HMdcHitIdeal);
      instance.SetNewArray(&newArray_HMdcHitIdeal);
      instance.SetDelete(&delete_HMdcHitIdeal);
      instance.SetDeleteArray(&deleteArray_HMdcHitIdeal);
      instance.SetDestructor(&destruct_HMdcHitIdeal);
      instance.SetStreamerFunc(&streamer_HMdcHitIdeal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcHitIdeal*)
   {
      return GenerateInitInstanceLocal((::HMdcHitIdeal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcHitIdeal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcSegIdeal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcSegIdeal(void *p = 0);
   static void *newArray_HMdcSegIdeal(Long_t size, void *p);
   static void delete_HMdcSegIdeal(void *p);
   static void deleteArray_HMdcSegIdeal(void *p);
   static void destruct_HMdcSegIdeal(void *p);
   static void streamer_HMdcSegIdeal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcSegIdeal*)
   {
      ::HMdcSegIdeal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcSegIdeal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcSegIdeal", ::HMdcSegIdeal::Class_Version(), "././hmdcidealclasses.h", 13,
                  typeid(::HMdcSegIdeal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcSegIdeal::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcSegIdeal) );
      instance.SetNew(&new_HMdcSegIdeal);
      instance.SetNewArray(&newArray_HMdcSegIdeal);
      instance.SetDelete(&delete_HMdcSegIdeal);
      instance.SetDeleteArray(&deleteArray_HMdcSegIdeal);
      instance.SetDestructor(&destruct_HMdcSegIdeal);
      instance.SetStreamerFunc(&streamer_HMdcSegIdeal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcSegIdeal*)
   {
      return GenerateInitInstanceLocal((::HMdcSegIdeal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcSegIdeal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrkCandIdeal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrkCandIdeal(void *p = 0);
   static void *newArray_HMdcTrkCandIdeal(Long_t size, void *p);
   static void delete_HMdcTrkCandIdeal(void *p);
   static void deleteArray_HMdcTrkCandIdeal(void *p);
   static void destruct_HMdcTrkCandIdeal(void *p);
   static void streamer_HMdcTrkCandIdeal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrkCandIdeal*)
   {
      ::HMdcTrkCandIdeal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrkCandIdeal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrkCandIdeal", ::HMdcTrkCandIdeal::Class_Version(), "././hmdcidealclasses.h", 17,
                  typeid(::HMdcTrkCandIdeal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrkCandIdeal::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrkCandIdeal) );
      instance.SetNew(&new_HMdcTrkCandIdeal);
      instance.SetNewArray(&newArray_HMdcTrkCandIdeal);
      instance.SetDelete(&delete_HMdcTrkCandIdeal);
      instance.SetDeleteArray(&deleteArray_HMdcTrkCandIdeal);
      instance.SetDestructor(&destruct_HMdcTrkCandIdeal);
      instance.SetStreamerFunc(&streamer_HMdcTrkCandIdeal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrkCandIdeal*)
   {
      return GenerateInitInstanceLocal((::HMdcTrkCandIdeal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrkCandIdeal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLayerGeomParLay_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLayerGeomParLay(void *p = 0);
   static void *newArray_HMdcLayerGeomParLay(Long_t size, void *p);
   static void delete_HMdcLayerGeomParLay(void *p);
   static void deleteArray_HMdcLayerGeomParLay(void *p);
   static void destruct_HMdcLayerGeomParLay(void *p);
   static void streamer_HMdcLayerGeomParLay(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLayerGeomParLay*)
   {
      ::HMdcLayerGeomParLay *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLayerGeomParLay >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLayerGeomParLay", ::HMdcLayerGeomParLay::Class_Version(), "././hmdclayergeompar.h", 11,
                  typeid(::HMdcLayerGeomParLay), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLayerGeomParLay::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcLayerGeomParLay) );
      instance.SetNew(&new_HMdcLayerGeomParLay);
      instance.SetNewArray(&newArray_HMdcLayerGeomParLay);
      instance.SetDelete(&delete_HMdcLayerGeomParLay);
      instance.SetDeleteArray(&deleteArray_HMdcLayerGeomParLay);
      instance.SetDestructor(&destruct_HMdcLayerGeomParLay);
      instance.SetStreamerFunc(&streamer_HMdcLayerGeomParLay);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLayerGeomParLay*)
   {
      return GenerateInitInstanceLocal((::HMdcLayerGeomParLay*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLayerGeomParLay*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLayerGeomParMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLayerGeomParMod(void *p = 0);
   static void *newArray_HMdcLayerGeomParMod(Long_t size, void *p);
   static void delete_HMdcLayerGeomParMod(void *p);
   static void deleteArray_HMdcLayerGeomParMod(void *p);
   static void destruct_HMdcLayerGeomParMod(void *p);
   static void streamer_HMdcLayerGeomParMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLayerGeomParMod*)
   {
      ::HMdcLayerGeomParMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLayerGeomParMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLayerGeomParMod", ::HMdcLayerGeomParMod::Class_Version(), "././hmdclayergeompar.h", 56,
                  typeid(::HMdcLayerGeomParMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLayerGeomParMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLayerGeomParMod) );
      instance.SetNew(&new_HMdcLayerGeomParMod);
      instance.SetNewArray(&newArray_HMdcLayerGeomParMod);
      instance.SetDelete(&delete_HMdcLayerGeomParMod);
      instance.SetDeleteArray(&deleteArray_HMdcLayerGeomParMod);
      instance.SetDestructor(&destruct_HMdcLayerGeomParMod);
      instance.SetStreamerFunc(&streamer_HMdcLayerGeomParMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLayerGeomParMod*)
   {
      return GenerateInitInstanceLocal((::HMdcLayerGeomParMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLayerGeomParMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLayerGeomParSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLayerGeomParSec(void *p = 0);
   static void *newArray_HMdcLayerGeomParSec(Long_t size, void *p);
   static void delete_HMdcLayerGeomParSec(void *p);
   static void deleteArray_HMdcLayerGeomParSec(void *p);
   static void destruct_HMdcLayerGeomParSec(void *p);
   static void streamer_HMdcLayerGeomParSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLayerGeomParSec*)
   {
      ::HMdcLayerGeomParSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLayerGeomParSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLayerGeomParSec", ::HMdcLayerGeomParSec::Class_Version(), "././hmdclayergeompar.h", 70,
                  typeid(::HMdcLayerGeomParSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLayerGeomParSec::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLayerGeomParSec) );
      instance.SetNew(&new_HMdcLayerGeomParSec);
      instance.SetNewArray(&newArray_HMdcLayerGeomParSec);
      instance.SetDelete(&delete_HMdcLayerGeomParSec);
      instance.SetDeleteArray(&deleteArray_HMdcLayerGeomParSec);
      instance.SetDestructor(&destruct_HMdcLayerGeomParSec);
      instance.SetStreamerFunc(&streamer_HMdcLayerGeomParSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLayerGeomParSec*)
   {
      return GenerateInitInstanceLocal((::HMdcLayerGeomParSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLayerGeomParSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookupChan_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLookupChan(void *p = 0);
   static void *newArray_HMdcLookupChan(Long_t size, void *p);
   static void delete_HMdcLookupChan(void *p);
   static void deleteArray_HMdcLookupChan(void *p);
   static void destruct_HMdcLookupChan(void *p);
   static void streamer_HMdcLookupChan(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookupChan*)
   {
      ::HMdcLookupChan *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookupChan >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookupChan", ::HMdcLookupChan::Class_Version(), "././hmdclookupgeom.h", 10,
                  typeid(::HMdcLookupChan), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookupChan::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcLookupChan) );
      instance.SetNew(&new_HMdcLookupChan);
      instance.SetNewArray(&newArray_HMdcLookupChan);
      instance.SetDelete(&delete_HMdcLookupChan);
      instance.SetDeleteArray(&deleteArray_HMdcLookupChan);
      instance.SetDestructor(&destruct_HMdcLookupChan);
      instance.SetStreamerFunc(&streamer_HMdcLookupChan);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookupChan*)
   {
      return GenerateInitInstanceLocal((::HMdcLookupChan*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookupChan*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookupMoth_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLookupMoth(void *p = 0);
   static void *newArray_HMdcLookupMoth(Long_t size, void *p);
   static void delete_HMdcLookupMoth(void *p);
   static void deleteArray_HMdcLookupMoth(void *p);
   static void destruct_HMdcLookupMoth(void *p);
   static void streamer_HMdcLookupMoth(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookupMoth*)
   {
      ::HMdcLookupMoth *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookupMoth >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookupMoth", ::HMdcLookupMoth::Class_Version(), "././hmdclookupgeom.h", 49,
                  typeid(::HMdcLookupMoth), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookupMoth::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLookupMoth) );
      instance.SetNew(&new_HMdcLookupMoth);
      instance.SetNewArray(&newArray_HMdcLookupMoth);
      instance.SetDelete(&delete_HMdcLookupMoth);
      instance.SetDeleteArray(&deleteArray_HMdcLookupMoth);
      instance.SetDestructor(&destruct_HMdcLookupMoth);
      instance.SetStreamerFunc(&streamer_HMdcLookupMoth);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookupMoth*)
   {
      return GenerateInitInstanceLocal((::HMdcLookupMoth*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookupMoth*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookupGMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLookupGMod(void *p = 0);
   static void *newArray_HMdcLookupGMod(Long_t size, void *p);
   static void delete_HMdcLookupGMod(void *p);
   static void deleteArray_HMdcLookupGMod(void *p);
   static void destruct_HMdcLookupGMod(void *p);
   static void streamer_HMdcLookupGMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookupGMod*)
   {
      ::HMdcLookupGMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookupGMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookupGMod", ::HMdcLookupGMod::Class_Version(), "././hmdclookupgeom.h", 63,
                  typeid(::HMdcLookupGMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookupGMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLookupGMod) );
      instance.SetNew(&new_HMdcLookupGMod);
      instance.SetNewArray(&newArray_HMdcLookupGMod);
      instance.SetDelete(&delete_HMdcLookupGMod);
      instance.SetDeleteArray(&deleteArray_HMdcLookupGMod);
      instance.SetDestructor(&destruct_HMdcLookupGMod);
      instance.SetStreamerFunc(&streamer_HMdcLookupGMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookupGMod*)
   {
      return GenerateInitInstanceLocal((::HMdcLookupGMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookupGMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookupGSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLookupGSec(void *p = 0);
   static void *newArray_HMdcLookupGSec(Long_t size, void *p);
   static void delete_HMdcLookupGSec(void *p);
   static void deleteArray_HMdcLookupGSec(void *p);
   static void destruct_HMdcLookupGSec(void *p);
   static void streamer_HMdcLookupGSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookupGSec*)
   {
      ::HMdcLookupGSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookupGSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookupGSec", ::HMdcLookupGSec::Class_Version(), "././hmdclookupgeom.h", 78,
                  typeid(::HMdcLookupGSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookupGSec::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLookupGSec) );
      instance.SetNew(&new_HMdcLookupGSec);
      instance.SetNewArray(&newArray_HMdcLookupGSec);
      instance.SetDelete(&delete_HMdcLookupGSec);
      instance.SetDeleteArray(&deleteArray_HMdcLookupGSec);
      instance.SetDestructor(&destruct_HMdcLookupGSec);
      instance.SetStreamerFunc(&streamer_HMdcLookupGSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookupGSec*)
   {
      return GenerateInitInstanceLocal((::HMdcLookupGSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookupGSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookupCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLookupCell(void *p = 0);
   static void *newArray_HMdcLookupCell(Long_t size, void *p);
   static void delete_HMdcLookupCell(void *p);
   static void deleteArray_HMdcLookupCell(void *p);
   static void destruct_HMdcLookupCell(void *p);
   static void streamer_HMdcLookupCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookupCell*)
   {
      ::HMdcLookupCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookupCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookupCell", ::HMdcLookupCell::Class_Version(), "././hmdclookupraw.h", 10,
                  typeid(::HMdcLookupCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookupCell::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcLookupCell) );
      instance.SetNew(&new_HMdcLookupCell);
      instance.SetNewArray(&newArray_HMdcLookupCell);
      instance.SetDelete(&delete_HMdcLookupCell);
      instance.SetDeleteArray(&deleteArray_HMdcLookupCell);
      instance.SetDestructor(&destruct_HMdcLookupCell);
      instance.SetStreamerFunc(&streamer_HMdcLookupCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookupCell*)
   {
      return GenerateInitInstanceLocal((::HMdcLookupCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookupCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookupLayer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLookupLayer(void *p = 0);
   static void *newArray_HMdcLookupLayer(Long_t size, void *p);
   static void delete_HMdcLookupLayer(void *p);
   static void deleteArray_HMdcLookupLayer(void *p);
   static void destruct_HMdcLookupLayer(void *p);
   static void streamer_HMdcLookupLayer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookupLayer*)
   {
      ::HMdcLookupLayer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookupLayer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookupLayer", ::HMdcLookupLayer::Class_Version(), "././hmdclookupraw.h", 44,
                  typeid(::HMdcLookupLayer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookupLayer::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLookupLayer) );
      instance.SetNew(&new_HMdcLookupLayer);
      instance.SetNewArray(&newArray_HMdcLookupLayer);
      instance.SetDelete(&delete_HMdcLookupLayer);
      instance.SetDeleteArray(&deleteArray_HMdcLookupLayer);
      instance.SetDestructor(&destruct_HMdcLookupLayer);
      instance.SetStreamerFunc(&streamer_HMdcLookupLayer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookupLayer*)
   {
      return GenerateInitInstanceLocal((::HMdcLookupLayer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookupLayer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookupRMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLookupRMod(void *p = 0);
   static void *newArray_HMdcLookupRMod(Long_t size, void *p);
   static void delete_HMdcLookupRMod(void *p);
   static void deleteArray_HMdcLookupRMod(void *p);
   static void destruct_HMdcLookupRMod(void *p);
   static void streamer_HMdcLookupRMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookupRMod*)
   {
      ::HMdcLookupRMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookupRMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookupRMod", ::HMdcLookupRMod::Class_Version(), "././hmdclookupraw.h", 58,
                  typeid(::HMdcLookupRMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookupRMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLookupRMod) );
      instance.SetNew(&new_HMdcLookupRMod);
      instance.SetNewArray(&newArray_HMdcLookupRMod);
      instance.SetDelete(&delete_HMdcLookupRMod);
      instance.SetDeleteArray(&deleteArray_HMdcLookupRMod);
      instance.SetDestructor(&destruct_HMdcLookupRMod);
      instance.SetStreamerFunc(&streamer_HMdcLookupRMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookupRMod*)
   {
      return GenerateInitInstanceLocal((::HMdcLookupRMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookupRMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookupRSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLookupRSec(void *p = 0);
   static void *newArray_HMdcLookupRSec(Long_t size, void *p);
   static void delete_HMdcLookupRSec(void *p);
   static void deleteArray_HMdcLookupRSec(void *p);
   static void destruct_HMdcLookupRSec(void *p);
   static void streamer_HMdcLookupRSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookupRSec*)
   {
      ::HMdcLookupRSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookupRSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookupRSec", ::HMdcLookupRSec::Class_Version(), "././hmdclookupraw.h", 73,
                  typeid(::HMdcLookupRSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookupRSec::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLookupRSec) );
      instance.SetNew(&new_HMdcLookupRSec);
      instance.SetNewArray(&newArray_HMdcLookupRSec);
      instance.SetDelete(&delete_HMdcLookupRSec);
      instance.SetDeleteArray(&deleteArray_HMdcLookupRSec);
      instance.SetDestructor(&destruct_HMdcLookupRSec);
      instance.SetStreamerFunc(&streamer_HMdcLookupRSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookupRSec*)
   {
      return GenerateInitInstanceLocal((::HMdcLookupRSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookupRSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcLookupRaw_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLookupRaw(void *p = 0);
   static void *newArray_HMdcLookupRaw(Long_t size, void *p);
   static void delete_HMdcLookupRaw(void *p);
   static void deleteArray_HMdcLookupRaw(void *p);
   static void destruct_HMdcLookupRaw(void *p);
   static void streamer_HMdcLookupRaw(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLookupRaw*)
   {
      ::HMdcLookupRaw *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLookupRaw >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLookupRaw", ::HMdcLookupRaw::Class_Version(), "././hmdclookupraw.h", 88,
                  typeid(::HMdcLookupRaw), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLookupRaw::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLookupRaw) );
      instance.SetNew(&new_HMdcLookupRaw);
      instance.SetNewArray(&newArray_HMdcLookupRaw);
      instance.SetDelete(&delete_HMdcLookupRaw);
      instance.SetDeleteArray(&deleteArray_HMdcLookupRaw);
      instance.SetDestructor(&destruct_HMdcLookupRaw);
      instance.SetStreamerFunc(&streamer_HMdcLookupRaw);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLookupRaw*)
   {
      return GenerateInitInstanceLocal((::HMdcLookupRaw*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLookupRaw*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcParAsciiFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdcParAsciiFileIo(void *p);
   static void deleteArray_HMdcParAsciiFileIo(void *p);
   static void destruct_HMdcParAsciiFileIo(void *p);
   static void streamer_HMdcParAsciiFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcParAsciiFileIo*)
   {
      ::HMdcParAsciiFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcParAsciiFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcParAsciiFileIo", ::HMdcParAsciiFileIo::Class_Version(), "././hmdcparasciifileio.h", 12,
                  typeid(::HMdcParAsciiFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcParAsciiFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcParAsciiFileIo) );
      instance.SetDelete(&delete_HMdcParAsciiFileIo);
      instance.SetDeleteArray(&deleteArray_HMdcParAsciiFileIo);
      instance.SetDestructor(&destruct_HMdcParAsciiFileIo);
      instance.SetStreamerFunc(&streamer_HMdcParAsciiFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcParAsciiFileIo*)
   {
      return GenerateInitInstanceLocal((::HMdcParAsciiFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcParAsciiFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcRawStruct_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcRawStruct(void *p = 0);
   static void *newArray_HMdcRawStruct(Long_t size, void *p);
   static void delete_HMdcRawStruct(void *p);
   static void deleteArray_HMdcRawStruct(void *p);
   static void destruct_HMdcRawStruct(void *p);
   static void streamer_HMdcRawStruct(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcRawStruct*)
   {
      ::HMdcRawStruct *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcRawStruct >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcRawStruct", ::HMdcRawStruct::Class_Version(), "././hmdcrawstruct.h", 56,
                  typeid(::HMdcRawStruct), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcRawStruct::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcRawStruct) );
      instance.SetNew(&new_HMdcRawStruct);
      instance.SetNewArray(&newArray_HMdcRawStruct);
      instance.SetDelete(&delete_HMdcRawStruct);
      instance.SetDeleteArray(&deleteArray_HMdcRawStruct);
      instance.SetDestructor(&destruct_HMdcRawStruct);
      instance.SetStreamerFunc(&streamer_HMdcRawStruct);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcRawStruct*)
   {
      return GenerateInitInstanceLocal((::HMdcRawStruct*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcRawStruct*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTdcThreshold_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTdcThreshold(void *p = 0);
   static void *newArray_HMdcTdcThreshold(Long_t size, void *p);
   static void delete_HMdcTdcThreshold(void *p);
   static void deleteArray_HMdcTdcThreshold(void *p);
   static void destruct_HMdcTdcThreshold(void *p);
   static void streamer_HMdcTdcThreshold(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTdcThreshold*)
   {
      ::HMdcTdcThreshold *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTdcThreshold >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTdcThreshold", ::HMdcTdcThreshold::Class_Version(), "././hmdctdcthreshold.h", 68,
                  typeid(::HMdcTdcThreshold), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTdcThreshold::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcTdcThreshold) );
      instance.SetNew(&new_HMdcTdcThreshold);
      instance.SetNewArray(&newArray_HMdcTdcThreshold);
      instance.SetDelete(&delete_HMdcTdcThreshold);
      instance.SetDeleteArray(&deleteArray_HMdcTdcThreshold);
      instance.SetDestructor(&destruct_HMdcTdcThreshold);
      instance.SetStreamerFunc(&streamer_HMdcTdcThreshold);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTdcThreshold*)
   {
      return GenerateInitInstanceLocal((::HMdcTdcThreshold*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTdcThreshold*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTdcChannel_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTdcChannel(void *p = 0);
   static void *newArray_HMdcTdcChannel(Long_t size, void *p);
   static void delete_HMdcTdcChannel(void *p);
   static void deleteArray_HMdcTdcChannel(void *p);
   static void destruct_HMdcTdcChannel(void *p);
   static void streamer_HMdcTdcChannel(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTdcChannel*)
   {
      ::HMdcTdcChannel *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTdcChannel >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTdcChannel", ::HMdcTdcChannel::Class_Version(), "././hmdctdcchannel.h", 87,
                  typeid(::HMdcTdcChannel), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTdcChannel::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcTdcChannel) );
      instance.SetNew(&new_HMdcTdcChannel);
      instance.SetNewArray(&newArray_HMdcTdcChannel);
      instance.SetDelete(&delete_HMdcTdcChannel);
      instance.SetDeleteArray(&deleteArray_HMdcTdcChannel);
      instance.SetDestructor(&destruct_HMdcTdcChannel);
      instance.SetStreamerFunc(&streamer_HMdcTdcChannel);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTdcChannel*)
   {
      return GenerateInitInstanceLocal((::HMdcTdcChannel*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTdcChannel*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcParRootFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdcParRootFileIo(void *p);
   static void deleteArray_HMdcParRootFileIo(void *p);
   static void destruct_HMdcParRootFileIo(void *p);
   static void streamer_HMdcParRootFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcParRootFileIo*)
   {
      ::HMdcParRootFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcParRootFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcParRootFileIo", ::HMdcParRootFileIo::Class_Version(), "././hmdcparrootfileio.h", 21,
                  typeid(::HMdcParRootFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcParRootFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcParRootFileIo) );
      instance.SetDelete(&delete_HMdcParRootFileIo);
      instance.SetDeleteArray(&deleteArray_HMdcParRootFileIo);
      instance.SetDestructor(&destruct_HMdcParRootFileIo);
      instance.SetStreamerFunc(&streamer_HMdcParRootFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcParRootFileIo*)
   {
      return GenerateInitInstanceLocal((::HMdcParRootFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcParRootFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcPPEvtFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcPPEvtFilter(void *p = 0);
   static void *newArray_HMdcPPEvtFilter(Long_t size, void *p);
   static void delete_HMdcPPEvtFilter(void *p);
   static void deleteArray_HMdcPPEvtFilter(void *p);
   static void destruct_HMdcPPEvtFilter(void *p);
   static void streamer_HMdcPPEvtFilter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcPPEvtFilter*)
   {
      ::HMdcPPEvtFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcPPEvtFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcPPEvtFilter", ::HMdcPPEvtFilter::Class_Version(), "././hmdcppevtfilter.h", 30,
                  typeid(::HMdcPPEvtFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcPPEvtFilter::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcPPEvtFilter) );
      instance.SetNew(&new_HMdcPPEvtFilter);
      instance.SetNewArray(&newArray_HMdcPPEvtFilter);
      instance.SetDelete(&delete_HMdcPPEvtFilter);
      instance.SetDeleteArray(&deleteArray_HMdcPPEvtFilter);
      instance.SetDestructor(&destruct_HMdcPPEvtFilter);
      instance.SetStreamerFunc(&streamer_HMdcPPEvtFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcPPEvtFilter*)
   {
      return GenerateInitInstanceLocal((::HMdcPPEvtFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcPPEvtFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcRawMothStru_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcRawMothStru(void *p = 0);
   static void *newArray_HMdcRawMothStru(Long_t size, void *p);
   static void delete_HMdcRawMothStru(void *p);
   static void deleteArray_HMdcRawMothStru(void *p);
   static void destruct_HMdcRawMothStru(void *p);
   static void streamer_HMdcRawMothStru(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcRawMothStru*)
   {
      ::HMdcRawMothStru *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcRawMothStru >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcRawMothStru", ::HMdcRawMothStru::Class_Version(), "././hmdcrawstruct.h", 11,
                  typeid(::HMdcRawMothStru), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcRawMothStru::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcRawMothStru) );
      instance.SetNew(&new_HMdcRawMothStru);
      instance.SetNewArray(&newArray_HMdcRawMothStru);
      instance.SetDelete(&delete_HMdcRawMothStru);
      instance.SetDeleteArray(&deleteArray_HMdcRawMothStru);
      instance.SetDestructor(&destruct_HMdcRawMothStru);
      instance.SetStreamerFunc(&streamer_HMdcRawMothStru);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcRawMothStru*)
   {
      return GenerateInitInstanceLocal((::HMdcRawMothStru*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcRawMothStru*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcRawModStru_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcRawModStru(void *p = 0);
   static void *newArray_HMdcRawModStru(Long_t size, void *p);
   static void delete_HMdcRawModStru(void *p);
   static void deleteArray_HMdcRawModStru(void *p);
   static void destruct_HMdcRawModStru(void *p);
   static void streamer_HMdcRawModStru(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcRawModStru*)
   {
      ::HMdcRawModStru *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcRawModStru >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcRawModStru", ::HMdcRawModStru::Class_Version(), "././hmdcrawstruct.h", 26,
                  typeid(::HMdcRawModStru), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcRawModStru::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcRawModStru) );
      instance.SetNew(&new_HMdcRawModStru);
      instance.SetNewArray(&newArray_HMdcRawModStru);
      instance.SetDelete(&delete_HMdcRawModStru);
      instance.SetDeleteArray(&deleteArray_HMdcRawModStru);
      instance.SetDestructor(&destruct_HMdcRawModStru);
      instance.SetStreamerFunc(&streamer_HMdcRawModStru);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcRawModStru*)
   {
      return GenerateInitInstanceLocal((::HMdcRawModStru*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcRawModStru*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcRawSecStru_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcRawSecStru(void *p = 0);
   static void *newArray_HMdcRawSecStru(Long_t size, void *p);
   static void delete_HMdcRawSecStru(void *p);
   static void deleteArray_HMdcRawSecStru(void *p);
   static void destruct_HMdcRawSecStru(void *p);
   static void streamer_HMdcRawSecStru(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcRawSecStru*)
   {
      ::HMdcRawSecStru *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcRawSecStru >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcRawSecStru", ::HMdcRawSecStru::Class_Version(), "././hmdcrawstruct.h", 42,
                  typeid(::HMdcRawSecStru), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcRawSecStru::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcRawSecStru) );
      instance.SetNew(&new_HMdcRawSecStru);
      instance.SetNewArray(&newArray_HMdcRawSecStru);
      instance.SetDelete(&delete_HMdcRawSecStru);
      instance.SetDeleteArray(&deleteArray_HMdcRawSecStru);
      instance.SetDestructor(&destruct_HMdcRawSecStru);
      instance.SetStreamerFunc(&streamer_HMdcRawSecStru);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcRawSecStru*)
   {
      return GenerateInitInstanceLocal((::HMdcRawSecStru*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcRawSecStru*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcSetup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcSetup(void *p = 0);
   static void *newArray_HMdcSetup(Long_t size, void *p);
   static void delete_HMdcSetup(void *p);
   static void deleteArray_HMdcSetup(void *p);
   static void destruct_HMdcSetup(void *p);
   static void streamer_HMdcSetup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcSetup*)
   {
      ::HMdcSetup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcSetup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcSetup", ::HMdcSetup::Class_Version(), "././hmdcsetup.h", 383,
                  typeid(::HMdcSetup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcSetup::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcSetup) );
      instance.SetNew(&new_HMdcSetup);
      instance.SetNewArray(&newArray_HMdcSetup);
      instance.SetDelete(&delete_HMdcSetup);
      instance.SetDeleteArray(&deleteArray_HMdcSetup);
      instance.SetDestructor(&destruct_HMdcSetup);
      instance.SetStreamerFunc(&streamer_HMdcSetup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcSetup*)
   {
      return GenerateInitInstanceLocal((::HMdcSetup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcSetup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcDigitizerSetup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcDigitizerSetup(void *p = 0);
   static void *newArray_HMdcDigitizerSetup(Long_t size, void *p);
   static void delete_HMdcDigitizerSetup(void *p);
   static void deleteArray_HMdcDigitizerSetup(void *p);
   static void destruct_HMdcDigitizerSetup(void *p);
   static void streamer_HMdcDigitizerSetup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcDigitizerSetup*)
   {
      ::HMdcDigitizerSetup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcDigitizerSetup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcDigitizerSetup", ::HMdcDigitizerSetup::Class_Version(), "././hmdcsetup.h", 15,
                  typeid(::HMdcDigitizerSetup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcDigitizerSetup::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcDigitizerSetup) );
      instance.SetNew(&new_HMdcDigitizerSetup);
      instance.SetNewArray(&newArray_HMdcDigitizerSetup);
      instance.SetDelete(&delete_HMdcDigitizerSetup);
      instance.SetDeleteArray(&deleteArray_HMdcDigitizerSetup);
      instance.SetDestructor(&destruct_HMdcDigitizerSetup);
      instance.SetStreamerFunc(&streamer_HMdcDigitizerSetup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcDigitizerSetup*)
   {
      return GenerateInitInstanceLocal((::HMdcDigitizerSetup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcDigitizerSetup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCalibrater1Setup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCalibrater1Setup(void *p = 0);
   static void *newArray_HMdcCalibrater1Setup(Long_t size, void *p);
   static void delete_HMdcCalibrater1Setup(void *p);
   static void deleteArray_HMdcCalibrater1Setup(void *p);
   static void destruct_HMdcCalibrater1Setup(void *p);
   static void streamer_HMdcCalibrater1Setup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCalibrater1Setup*)
   {
      ::HMdcCalibrater1Setup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCalibrater1Setup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCalibrater1Setup", ::HMdcCalibrater1Setup::Class_Version(), "././hmdcsetup.h", 163,
                  typeid(::HMdcCalibrater1Setup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCalibrater1Setup::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCalibrater1Setup) );
      instance.SetNew(&new_HMdcCalibrater1Setup);
      instance.SetNewArray(&newArray_HMdcCalibrater1Setup);
      instance.SetDelete(&delete_HMdcCalibrater1Setup);
      instance.SetDeleteArray(&deleteArray_HMdcCalibrater1Setup);
      instance.SetDestructor(&destruct_HMdcCalibrater1Setup);
      instance.SetStreamerFunc(&streamer_HMdcCalibrater1Setup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCalibrater1Setup*)
   {
      return GenerateInitInstanceLocal((::HMdcCalibrater1Setup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCalibrater1Setup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackFinderSetup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrackFinderSetup(void *p = 0);
   static void *newArray_HMdcTrackFinderSetup(Long_t size, void *p);
   static void delete_HMdcTrackFinderSetup(void *p);
   static void deleteArray_HMdcTrackFinderSetup(void *p);
   static void destruct_HMdcTrackFinderSetup(void *p);
   static void streamer_HMdcTrackFinderSetup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackFinderSetup*)
   {
      ::HMdcTrackFinderSetup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackFinderSetup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackFinderSetup", ::HMdcTrackFinderSetup::Class_Version(), "././hmdcsetup.h", 196,
                  typeid(::HMdcTrackFinderSetup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackFinderSetup::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackFinderSetup) );
      instance.SetNew(&new_HMdcTrackFinderSetup);
      instance.SetNewArray(&newArray_HMdcTrackFinderSetup);
      instance.SetDelete(&delete_HMdcTrackFinderSetup);
      instance.SetDeleteArray(&deleteArray_HMdcTrackFinderSetup);
      instance.SetDestructor(&destruct_HMdcTrackFinderSetup);
      instance.SetStreamerFunc(&streamer_HMdcTrackFinderSetup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackFinderSetup*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackFinderSetup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackFinderSetup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcClusterToHitSetup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcClusterToHitSetup(void *p = 0);
   static void *newArray_HMdcClusterToHitSetup(Long_t size, void *p);
   static void delete_HMdcClusterToHitSetup(void *p);
   static void deleteArray_HMdcClusterToHitSetup(void *p);
   static void destruct_HMdcClusterToHitSetup(void *p);
   static void streamer_HMdcClusterToHitSetup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcClusterToHitSetup*)
   {
      ::HMdcClusterToHitSetup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcClusterToHitSetup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcClusterToHitSetup", ::HMdcClusterToHitSetup::Class_Version(), "././hmdcsetup.h", 264,
                  typeid(::HMdcClusterToHitSetup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcClusterToHitSetup::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcClusterToHitSetup) );
      instance.SetNew(&new_HMdcClusterToHitSetup);
      instance.SetNewArray(&newArray_HMdcClusterToHitSetup);
      instance.SetDelete(&delete_HMdcClusterToHitSetup);
      instance.SetDeleteArray(&deleteArray_HMdcClusterToHitSetup);
      instance.SetDestructor(&destruct_HMdcClusterToHitSetup);
      instance.SetStreamerFunc(&streamer_HMdcClusterToHitSetup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcClusterToHitSetup*)
   {
      return GenerateInitInstanceLocal((::HMdcClusterToHitSetup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcClusterToHitSetup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdc12FitSetup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdc12FitSetup(void *p = 0);
   static void *newArray_HMdc12FitSetup(Long_t size, void *p);
   static void delete_HMdc12FitSetup(void *p);
   static void deleteArray_HMdc12FitSetup(void *p);
   static void destruct_HMdc12FitSetup(void *p);
   static void streamer_HMdc12FitSetup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdc12FitSetup*)
   {
      ::HMdc12FitSetup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdc12FitSetup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdc12FitSetup", ::HMdc12FitSetup::Class_Version(), "././hmdcsetup.h", 297,
                  typeid(::HMdc12FitSetup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdc12FitSetup::Dictionary, isa_proxy, 0,
                  sizeof(::HMdc12FitSetup) );
      instance.SetNew(&new_HMdc12FitSetup);
      instance.SetNewArray(&newArray_HMdc12FitSetup);
      instance.SetDelete(&delete_HMdc12FitSetup);
      instance.SetDeleteArray(&deleteArray_HMdc12FitSetup);
      instance.SetDestructor(&destruct_HMdc12FitSetup);
      instance.SetStreamerFunc(&streamer_HMdc12FitSetup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdc12FitSetup*)
   {
      return GenerateInitInstanceLocal((::HMdc12FitSetup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdc12FitSetup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCommonSetup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCommonSetup(void *p = 0);
   static void *newArray_HMdcCommonSetup(Long_t size, void *p);
   static void delete_HMdcCommonSetup(void *p);
   static void deleteArray_HMdcCommonSetup(void *p);
   static void destruct_HMdcCommonSetup(void *p);
   static void streamer_HMdcCommonSetup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCommonSetup*)
   {
      ::HMdcCommonSetup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCommonSetup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCommonSetup", ::HMdcCommonSetup::Class_Version(), "././hmdcsetup.h", 346,
                  typeid(::HMdcCommonSetup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCommonSetup::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCommonSetup) );
      instance.SetNew(&new_HMdcCommonSetup);
      instance.SetNewArray(&newArray_HMdcCommonSetup);
      instance.SetDelete(&delete_HMdcCommonSetup);
      instance.SetDeleteArray(&deleteArray_HMdcCommonSetup);
      instance.SetDestructor(&destruct_HMdcCommonSetup);
      instance.SetStreamerFunc(&streamer_HMdcCommonSetup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCommonSetup*)
   {
      return GenerateInitInstanceLocal((::HMdcCommonSetup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCommonSetup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcVertexFind_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcVertexFind(void *p = 0);
   static void *newArray_HMdcVertexFind(Long_t size, void *p);
   static void delete_HMdcVertexFind(void *p);
   static void deleteArray_HMdcVertexFind(void *p);
   static void destruct_HMdcVertexFind(void *p);
   static void streamer_HMdcVertexFind(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcVertexFind*)
   {
      ::HMdcVertexFind *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcVertexFind >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcVertexFind", ::HMdcVertexFind::Class_Version(), "././hmdcvertexfind.h", 18,
                  typeid(::HMdcVertexFind), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcVertexFind::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcVertexFind) );
      instance.SetNew(&new_HMdcVertexFind);
      instance.SetNewArray(&newArray_HMdcVertexFind);
      instance.SetDelete(&delete_HMdcVertexFind);
      instance.SetDeleteArray(&deleteArray_HMdcVertexFind);
      instance.SetDestructor(&destruct_HMdcVertexFind);
      instance.SetStreamerFunc(&streamer_HMdcVertexFind);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcVertexFind*)
   {
      return GenerateInitInstanceLocal((::HMdcVertexFind*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcVertexFind*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTaskSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTaskSet(void *p = 0);
   static void *newArray_HMdcTaskSet(Long_t size, void *p);
   static void delete_HMdcTaskSet(void *p);
   static void deleteArray_HMdcTaskSet(void *p);
   static void destruct_HMdcTaskSet(void *p);
   static void streamer_HMdcTaskSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTaskSet*)
   {
      ::HMdcTaskSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTaskSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTaskSet", ::HMdcTaskSet::Class_Version(), "././hmdctaskset.h", 21,
                  typeid(::HMdcTaskSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTaskSet::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTaskSet) );
      instance.SetNew(&new_HMdcTaskSet);
      instance.SetNewArray(&newArray_HMdcTaskSet);
      instance.SetDelete(&delete_HMdcTaskSet);
      instance.SetDeleteArray(&deleteArray_HMdcTaskSet);
      instance.SetDestructor(&destruct_HMdcTaskSet);
      instance.SetStreamerFunc(&streamer_HMdcTaskSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTaskSet*)
   {
      return GenerateInitInstanceLocal((::HMdcTaskSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTaskSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTdcChannelTdc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTdcChannelTdc(void *p = 0);
   static void *newArray_HMdcTdcChannelTdc(Long_t size, void *p);
   static void delete_HMdcTdcChannelTdc(void *p);
   static void deleteArray_HMdcTdcChannelTdc(void *p);
   static void destruct_HMdcTdcChannelTdc(void *p);
   static void streamer_HMdcTdcChannelTdc(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTdcChannelTdc*)
   {
      ::HMdcTdcChannelTdc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTdcChannelTdc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTdcChannelTdc", ::HMdcTdcChannelTdc::Class_Version(), "././hmdctdcchannel.h", 21,
                  typeid(::HMdcTdcChannelTdc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTdcChannelTdc::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTdcChannelTdc) );
      instance.SetNew(&new_HMdcTdcChannelTdc);
      instance.SetNewArray(&newArray_HMdcTdcChannelTdc);
      instance.SetDelete(&delete_HMdcTdcChannelTdc);
      instance.SetDeleteArray(&deleteArray_HMdcTdcChannelTdc);
      instance.SetDestructor(&destruct_HMdcTdcChannelTdc);
      instance.SetStreamerFunc(&streamer_HMdcTdcChannelTdc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTdcChannelTdc*)
   {
      return GenerateInitInstanceLocal((::HMdcTdcChannelTdc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTdcChannelTdc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTdcChannelMbo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTdcChannelMbo(void *p = 0);
   static void *newArray_HMdcTdcChannelMbo(Long_t size, void *p);
   static void delete_HMdcTdcChannelMbo(void *p);
   static void deleteArray_HMdcTdcChannelMbo(void *p);
   static void destruct_HMdcTdcChannelMbo(void *p);
   static void streamer_HMdcTdcChannelMbo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTdcChannelMbo*)
   {
      ::HMdcTdcChannelMbo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTdcChannelMbo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTdcChannelMbo", ::HMdcTdcChannelMbo::Class_Version(), "././hmdctdcchannel.h", 43,
                  typeid(::HMdcTdcChannelMbo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTdcChannelMbo::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTdcChannelMbo) );
      instance.SetNew(&new_HMdcTdcChannelMbo);
      instance.SetNewArray(&newArray_HMdcTdcChannelMbo);
      instance.SetDelete(&delete_HMdcTdcChannelMbo);
      instance.SetDeleteArray(&deleteArray_HMdcTdcChannelMbo);
      instance.SetDestructor(&destruct_HMdcTdcChannelMbo);
      instance.SetStreamerFunc(&streamer_HMdcTdcChannelMbo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTdcChannelMbo*)
   {
      return GenerateInitInstanceLocal((::HMdcTdcChannelMbo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTdcChannelMbo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTdcChannelMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTdcChannelMod(void *p = 0);
   static void *newArray_HMdcTdcChannelMod(Long_t size, void *p);
   static void delete_HMdcTdcChannelMod(void *p);
   static void deleteArray_HMdcTdcChannelMod(void *p);
   static void destruct_HMdcTdcChannelMod(void *p);
   static void streamer_HMdcTdcChannelMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTdcChannelMod*)
   {
      ::HMdcTdcChannelMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTdcChannelMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTdcChannelMod", ::HMdcTdcChannelMod::Class_Version(), "././hmdctdcchannel.h", 57,
                  typeid(::HMdcTdcChannelMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTdcChannelMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTdcChannelMod) );
      instance.SetNew(&new_HMdcTdcChannelMod);
      instance.SetNewArray(&newArray_HMdcTdcChannelMod);
      instance.SetDelete(&delete_HMdcTdcChannelMod);
      instance.SetDeleteArray(&deleteArray_HMdcTdcChannelMod);
      instance.SetDestructor(&destruct_HMdcTdcChannelMod);
      instance.SetStreamerFunc(&streamer_HMdcTdcChannelMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTdcChannelMod*)
   {
      return GenerateInitInstanceLocal((::HMdcTdcChannelMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTdcChannelMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTdcChannelSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTdcChannelSec(void *p = 0);
   static void *newArray_HMdcTdcChannelSec(Long_t size, void *p);
   static void delete_HMdcTdcChannelSec(void *p);
   static void deleteArray_HMdcTdcChannelSec(void *p);
   static void destruct_HMdcTdcChannelSec(void *p);
   static void streamer_HMdcTdcChannelSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTdcChannelSec*)
   {
      ::HMdcTdcChannelSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTdcChannelSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTdcChannelSec", ::HMdcTdcChannelSec::Class_Version(), "././hmdctdcchannel.h", 72,
                  typeid(::HMdcTdcChannelSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTdcChannelSec::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTdcChannelSec) );
      instance.SetNew(&new_HMdcTdcChannelSec);
      instance.SetNewArray(&newArray_HMdcTdcChannelSec);
      instance.SetDelete(&delete_HMdcTdcChannelSec);
      instance.SetDeleteArray(&deleteArray_HMdcTdcChannelSec);
      instance.SetDestructor(&destruct_HMdcTdcChannelSec);
      instance.SetStreamerFunc(&streamer_HMdcTdcChannelSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTdcChannelSec*)
   {
      return GenerateInitInstanceLocal((::HMdcTdcChannelSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTdcChannelSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTdcThresholdDbo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTdcThresholdDbo(void *p = 0);
   static void *newArray_HMdcTdcThresholdDbo(Long_t size, void *p);
   static void delete_HMdcTdcThresholdDbo(void *p);
   static void deleteArray_HMdcTdcThresholdDbo(void *p);
   static void destruct_HMdcTdcThresholdDbo(void *p);
   static void streamer_HMdcTdcThresholdDbo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTdcThresholdDbo*)
   {
      ::HMdcTdcThresholdDbo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTdcThresholdDbo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTdcThresholdDbo", ::HMdcTdcThresholdDbo::Class_Version(), "././hmdctdcthreshold.h", 11,
                  typeid(::HMdcTdcThresholdDbo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTdcThresholdDbo::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTdcThresholdDbo) );
      instance.SetNew(&new_HMdcTdcThresholdDbo);
      instance.SetNewArray(&newArray_HMdcTdcThresholdDbo);
      instance.SetDelete(&delete_HMdcTdcThresholdDbo);
      instance.SetDeleteArray(&deleteArray_HMdcTdcThresholdDbo);
      instance.SetDestructor(&destruct_HMdcTdcThresholdDbo);
      instance.SetStreamerFunc(&streamer_HMdcTdcThresholdDbo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTdcThresholdDbo*)
   {
      return GenerateInitInstanceLocal((::HMdcTdcThresholdDbo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTdcThresholdDbo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTdcThresholdMbo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTdcThresholdMbo(void *p = 0);
   static void *newArray_HMdcTdcThresholdMbo(Long_t size, void *p);
   static void delete_HMdcTdcThresholdMbo(void *p);
   static void deleteArray_HMdcTdcThresholdMbo(void *p);
   static void destruct_HMdcTdcThresholdMbo(void *p);
   static void streamer_HMdcTdcThresholdMbo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTdcThresholdMbo*)
   {
      ::HMdcTdcThresholdMbo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTdcThresholdMbo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTdcThresholdMbo", ::HMdcTdcThresholdMbo::Class_Version(), "././hmdctdcthreshold.h", 27,
                  typeid(::HMdcTdcThresholdMbo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTdcThresholdMbo::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTdcThresholdMbo) );
      instance.SetNew(&new_HMdcTdcThresholdMbo);
      instance.SetNewArray(&newArray_HMdcTdcThresholdMbo);
      instance.SetDelete(&delete_HMdcTdcThresholdMbo);
      instance.SetDeleteArray(&deleteArray_HMdcTdcThresholdMbo);
      instance.SetDestructor(&destruct_HMdcTdcThresholdMbo);
      instance.SetStreamerFunc(&streamer_HMdcTdcThresholdMbo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTdcThresholdMbo*)
   {
      return GenerateInitInstanceLocal((::HMdcTdcThresholdMbo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTdcThresholdMbo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTdcThresholdMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTdcThresholdMod(void *p = 0);
   static void *newArray_HMdcTdcThresholdMod(Long_t size, void *p);
   static void delete_HMdcTdcThresholdMod(void *p);
   static void deleteArray_HMdcTdcThresholdMod(void *p);
   static void destruct_HMdcTdcThresholdMod(void *p);
   static void streamer_HMdcTdcThresholdMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTdcThresholdMod*)
   {
      ::HMdcTdcThresholdMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTdcThresholdMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTdcThresholdMod", ::HMdcTdcThresholdMod::Class_Version(), "././hmdctdcthreshold.h", 40,
                  typeid(::HMdcTdcThresholdMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTdcThresholdMod::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTdcThresholdMod) );
      instance.SetNew(&new_HMdcTdcThresholdMod);
      instance.SetNewArray(&newArray_HMdcTdcThresholdMod);
      instance.SetDelete(&delete_HMdcTdcThresholdMod);
      instance.SetDeleteArray(&deleteArray_HMdcTdcThresholdMod);
      instance.SetDestructor(&destruct_HMdcTdcThresholdMod);
      instance.SetStreamerFunc(&streamer_HMdcTdcThresholdMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTdcThresholdMod*)
   {
      return GenerateInitInstanceLocal((::HMdcTdcThresholdMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTdcThresholdMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTdcThresholdSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTdcThresholdSec(void *p = 0);
   static void *newArray_HMdcTdcThresholdSec(Long_t size, void *p);
   static void delete_HMdcTdcThresholdSec(void *p);
   static void deleteArray_HMdcTdcThresholdSec(void *p);
   static void destruct_HMdcTdcThresholdSec(void *p);
   static void streamer_HMdcTdcThresholdSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTdcThresholdSec*)
   {
      ::HMdcTdcThresholdSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTdcThresholdSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTdcThresholdSec", ::HMdcTdcThresholdSec::Class_Version(), "././hmdctdcthreshold.h", 54,
                  typeid(::HMdcTdcThresholdSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTdcThresholdSec::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTdcThresholdSec) );
      instance.SetNew(&new_HMdcTdcThresholdSec);
      instance.SetNewArray(&newArray_HMdcTdcThresholdSec);
      instance.SetDelete(&delete_HMdcTdcThresholdSec);
      instance.SetDeleteArray(&deleteArray_HMdcTdcThresholdSec);
      instance.SetDestructor(&destruct_HMdcTdcThresholdSec);
      instance.SetStreamerFunc(&streamer_HMdcTdcThresholdSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTdcThresholdSec*)
   {
      return GenerateInitInstanceLocal((::HMdcTdcThresholdSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTdcThresholdSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTimeCutMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTimeCutMod(void *p = 0);
   static void *newArray_HMdcTimeCutMod(Long_t size, void *p);
   static void delete_HMdcTimeCutMod(void *p);
   static void deleteArray_HMdcTimeCutMod(void *p);
   static void destruct_HMdcTimeCutMod(void *p);
   static void streamer_HMdcTimeCutMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTimeCutMod*)
   {
      ::HMdcTimeCutMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTimeCutMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTimeCutMod", ::HMdcTimeCutMod::Class_Version(), "././hmdctimecut.h", 12,
                  typeid(::HMdcTimeCutMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTimeCutMod::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcTimeCutMod) );
      instance.SetNew(&new_HMdcTimeCutMod);
      instance.SetNewArray(&newArray_HMdcTimeCutMod);
      instance.SetDelete(&delete_HMdcTimeCutMod);
      instance.SetDeleteArray(&deleteArray_HMdcTimeCutMod);
      instance.SetDestructor(&destruct_HMdcTimeCutMod);
      instance.SetStreamerFunc(&streamer_HMdcTimeCutMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTimeCutMod*)
   {
      return GenerateInitInstanceLocal((::HMdcTimeCutMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTimeCutMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTimeCutSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTimeCutSec(void *p = 0);
   static void *newArray_HMdcTimeCutSec(Long_t size, void *p);
   static void delete_HMdcTimeCutSec(void *p);
   static void deleteArray_HMdcTimeCutSec(void *p);
   static void destruct_HMdcTimeCutSec(void *p);
   static void streamer_HMdcTimeCutSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTimeCutSec*)
   {
      ::HMdcTimeCutSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTimeCutSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTimeCutSec", ::HMdcTimeCutSec::Class_Version(), "././hmdctimecut.h", 122,
                  typeid(::HMdcTimeCutSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTimeCutSec::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTimeCutSec) );
      instance.SetNew(&new_HMdcTimeCutSec);
      instance.SetNewArray(&newArray_HMdcTimeCutSec);
      instance.SetDelete(&delete_HMdcTimeCutSec);
      instance.SetDeleteArray(&deleteArray_HMdcTimeCutSec);
      instance.SetDestructor(&destruct_HMdcTimeCutSec);
      instance.SetStreamerFunc(&streamer_HMdcTimeCutSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTimeCutSec*)
   {
      return GenerateInitInstanceLocal((::HMdcTimeCutSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTimeCutSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrk_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrk(void *p = 0);
   static void *newArray_HMdcTrk(Long_t size, void *p);
   static void delete_HMdcTrk(void *p);
   static void deleteArray_HMdcTrk(void *p);
   static void destruct_HMdcTrk(void *p);
   static void streamer_HMdcTrk(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrk*)
   {
      ::HMdcTrk *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrk >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrk", ::HMdcTrk::Class_Version(), "././hmdctrk.h", 9,
                  typeid(::HMdcTrk), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrk::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrk) );
      instance.SetNew(&new_HMdcTrk);
      instance.SetNewArray(&newArray_HMdcTrk);
      instance.SetDelete(&delete_HMdcTrk);
      instance.SetDeleteArray(&deleteArray_HMdcTrk);
      instance.SetDestructor(&destruct_HMdcTrk);
      instance.SetStreamerFunc(&streamer_HMdcTrk);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrk*)
   {
      return GenerateInitInstanceLocal((::HMdcTrk*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrk*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcVertexWriter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcVertexWriter(void *p = 0);
   static void *newArray_HMdcVertexWriter(Long_t size, void *p);
   static void delete_HMdcVertexWriter(void *p);
   static void deleteArray_HMdcVertexWriter(void *p);
   static void destruct_HMdcVertexWriter(void *p);
   static void streamer_HMdcVertexWriter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcVertexWriter*)
   {
      ::HMdcVertexWriter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcVertexWriter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcVertexWriter", ::HMdcVertexWriter::Class_Version(), "././hmdcvertexwriter.h", 14,
                  typeid(::HMdcVertexWriter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcVertexWriter::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcVertexWriter) );
      instance.SetNew(&new_HMdcVertexWriter);
      instance.SetNewArray(&newArray_HMdcVertexWriter);
      instance.SetDelete(&delete_HMdcVertexWriter);
      instance.SetDeleteArray(&deleteArray_HMdcVertexWriter);
      instance.SetDestructor(&destruct_HMdcVertexWriter);
      instance.SetStreamerFunc(&streamer_HMdcVertexWriter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcVertexWriter*)
   {
      return GenerateInitInstanceLocal((::HMdcVertexWriter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcVertexWriter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcUnpackerPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcUnpackerPar(void *p = 0);
   static void *newArray_HMdcUnpackerPar(Long_t size, void *p);
   static void delete_HMdcUnpackerPar(void *p);
   static void deleteArray_HMdcUnpackerPar(void *p);
   static void destruct_HMdcUnpackerPar(void *p);
   static void streamer_HMdcUnpackerPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcUnpackerPar*)
   {
      ::HMdcUnpackerPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcUnpackerPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcUnpackerPar", ::HMdcUnpackerPar::Class_Version(), "././hmdcunpackerpar.h", 21,
                  typeid(::HMdcUnpackerPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcUnpackerPar::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcUnpackerPar) );
      instance.SetNew(&new_HMdcUnpackerPar);
      instance.SetNewArray(&newArray_HMdcUnpackerPar);
      instance.SetDelete(&delete_HMdcUnpackerPar);
      instance.SetDeleteArray(&deleteArray_HMdcUnpackerPar);
      instance.SetDestructor(&destruct_HMdcUnpackerPar);
      instance.SetStreamerFunc(&streamer_HMdcUnpackerPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcUnpackerPar*)
   {
      return GenerateInitInstanceLocal((::HMdcUnpackerPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcUnpackerPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcDataword_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcDataword(void *p = 0);
   static void *newArray_HMdcDataword(Long_t size, void *p);
   static void delete_HMdcDataword(void *p);
   static void deleteArray_HMdcDataword(void *p);
   static void destruct_HMdcDataword(void *p);
   static void streamer_HMdcDataword(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcDataword*)
   {
      ::HMdcDataword *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcDataword >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcDataword", ::HMdcDataword::Class_Version(), "././hmdcdataword.h", 13,
                  typeid(::HMdcDataword), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcDataword::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcDataword) );
      instance.SetNew(&new_HMdcDataword);
      instance.SetNewArray(&newArray_HMdcDataword);
      instance.SetDelete(&delete_HMdcDataword);
      instance.SetDeleteArray(&deleteArray_HMdcDataword);
      instance.SetDestructor(&destruct_HMdcDataword);
      instance.SetStreamerFunc(&streamer_HMdcDataword);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcDataword*)
   {
      return GenerateInitInstanceLocal((::HMdcDataword*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcDataword*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcOepAddrCorrPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcOepAddrCorrPar(void *p = 0);
   static void *newArray_HMdcOepAddrCorrPar(Long_t size, void *p);
   static void delete_HMdcOepAddrCorrPar(void *p);
   static void deleteArray_HMdcOepAddrCorrPar(void *p);
   static void destruct_HMdcOepAddrCorrPar(void *p);
   static void streamer_HMdcOepAddrCorrPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcOepAddrCorrPar*)
   {
      ::HMdcOepAddrCorrPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcOepAddrCorrPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcOepAddrCorrPar", ::HMdcOepAddrCorrPar::Class_Version(), "././hmdcoepaddrcorrpar.h", 20,
                  typeid(::HMdcOepAddrCorrPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcOepAddrCorrPar::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcOepAddrCorrPar) );
      instance.SetNew(&new_HMdcOepAddrCorrPar);
      instance.SetNewArray(&newArray_HMdcOepAddrCorrPar);
      instance.SetDelete(&delete_HMdcOepAddrCorrPar);
      instance.SetDeleteArray(&deleteArray_HMdcOepAddrCorrPar);
      instance.SetDestructor(&destruct_HMdcOepAddrCorrPar);
      instance.SetStreamerFunc(&streamer_HMdcOepAddrCorrPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcOepAddrCorrPar*)
   {
      return GenerateInitInstanceLocal((::HMdcOepAddrCorrPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcOepAddrCorrPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcUnpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMdcUnpacker(void *p);
   static void deleteArray_HMdcUnpacker(void *p);
   static void destruct_HMdcUnpacker(void *p);
   static void streamer_HMdcUnpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcUnpacker*)
   {
      ::HMdcUnpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcUnpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcUnpacker", ::HMdcUnpacker::Class_Version(), "././hmdcunpacker.h", 26,
                  typeid(::HMdcUnpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcUnpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcUnpacker) );
      instance.SetDelete(&delete_HMdcUnpacker);
      instance.SetDeleteArray(&deleteArray_HMdcUnpacker);
      instance.SetDestructor(&destruct_HMdcUnpacker);
      instance.SetStreamerFunc(&streamer_HMdcUnpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcUnpacker*)
   {
      return GenerateInitInstanceLocal((::HMdcUnpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcUnpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcOepStatusData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcOepStatusData(void *p = 0);
   static void *newArray_HMdcOepStatusData(Long_t size, void *p);
   static void delete_HMdcOepStatusData(void *p);
   static void deleteArray_HMdcOepStatusData(void *p);
   static void destruct_HMdcOepStatusData(void *p);
   static void streamer_HMdcOepStatusData(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcOepStatusData*)
   {
      ::HMdcOepStatusData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcOepStatusData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcOepStatusData", ::HMdcOepStatusData::Class_Version(), "././hmdcoepstatusdata.h", 19,
                  typeid(::HMdcOepStatusData), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcOepStatusData::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcOepStatusData) );
      instance.SetNew(&new_HMdcOepStatusData);
      instance.SetNewArray(&newArray_HMdcOepStatusData);
      instance.SetDelete(&delete_HMdcOepStatusData);
      instance.SetDeleteArray(&deleteArray_HMdcOepStatusData);
      instance.SetDestructor(&destruct_HMdcOepStatusData);
      instance.SetStreamerFunc(&streamer_HMdcOepStatusData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcOepStatusData*)
   {
      return GenerateInitInstanceLocal((::HMdcOepStatusData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcOepStatusData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HMdcRaw::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcRaw::Class_Name()
{
   return "HMdcRaw";
}

//______________________________________________________________________________
const char *HMdcRaw::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRaw*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcRaw::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRaw*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcRaw::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRaw*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcRaw::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRaw*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcRawCor::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcRawCor::Class_Name()
{
   return "HMdcRawCor";
}

//______________________________________________________________________________
const char *HMdcRawCor::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawCor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcRawCor::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawCor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcRawCor::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawCor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcRawCor::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawCor*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcRawEventHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcRawEventHeader::Class_Name()
{
   return "HMdcRawEventHeader";
}

//______________________________________________________________________________
const char *HMdcRawEventHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawEventHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcRawEventHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawEventHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcRawEventHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawEventHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcRawEventHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawEventHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcGeomPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcGeomPar::Class_Name()
{
   return "HMdcGeomPar";
}

//______________________________________________________________________________
const char *HMdcGeomPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcGeomPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcGeomPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcGeomPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcDetector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcDetector::Class_Name()
{
   return "HMdcDetector";
}

//______________________________________________________________________________
const char *HMdcDetector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDetector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcDetector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDetector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcDetector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDetector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcDetector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDetector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcBitFlipCorPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcBitFlipCorPar::Class_Name()
{
   return "HMdcBitFlipCorPar";
}

//______________________________________________________________________________
const char *HMdcBitFlipCorPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcBitFlipCorPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcBitFlipCorPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcBitFlipCorPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcBitFlipCorPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcBitFlipCorPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcBitFlipCorPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcBitFlipCorPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcBitFlipCor::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcBitFlipCor::Class_Name()
{
   return "HMdcBitFlipCor";
}

//______________________________________________________________________________
const char *HMdcBitFlipCor::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcBitFlipCor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcBitFlipCor::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcBitFlipCor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcBitFlipCor::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcBitFlipCor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcBitFlipCor::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcBitFlipCor*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCal1::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCal1::Class_Name()
{
   return "HMdcCal1";
}

//______________________________________________________________________________
const char *HMdcCal1::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal1*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCal1::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal1*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCal1::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal1*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCal1::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal1*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCal1Sim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCal1Sim::Class_Name()
{
   return "HMdcCal1Sim";
}

//______________________________________________________________________________
const char *HMdcCal1Sim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal1Sim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCal1Sim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal1Sim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCal1Sim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal1Sim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCal1Sim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal1Sim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCal2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCal2::Class_Name()
{
   return "HMdcCal2";
}

//______________________________________________________________________________
const char *HMdcCal2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCal2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCal2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCal2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCal2ParSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCal2ParSim::Class_Name()
{
   return "HMdcCal2ParSim";
}

//______________________________________________________________________________
const char *HMdcCal2ParSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCal2ParSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCal2ParSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCal2ParSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCal2ParAngle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCal2ParAngle::Class_Name()
{
   return "HMdcCal2ParAngle";
}

//______________________________________________________________________________
const char *HMdcCal2ParAngle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParAngle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCal2ParAngle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParAngle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCal2ParAngle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParAngle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCal2ParAngle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParAngle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCal2ParSecSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCal2ParSecSim::Class_Name()
{
   return "HMdcCal2ParSecSim";
}

//______________________________________________________________________________
const char *HMdcCal2ParSecSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParSecSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCal2ParSecSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParSecSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCal2ParSecSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParSecSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCal2ParSecSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParSecSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCal2ParModSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCal2ParModSim::Class_Name()
{
   return "HMdcCal2ParModSim";
}

//______________________________________________________________________________
const char *HMdcCal2ParModSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParModSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCal2ParModSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParModSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCal2ParModSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParModSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCal2ParModSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParModSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCal2Par::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCal2Par::Class_Name()
{
   return "HMdcCal2Par";
}

//______________________________________________________________________________
const char *HMdcCal2Par::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2Par*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCal2Par::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2Par*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCal2Par::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2Par*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCal2Par::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2Par*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCal2ParSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCal2ParSec::Class_Name()
{
   return "HMdcCal2ParSec";
}

//______________________________________________________________________________
const char *HMdcCal2ParSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCal2ParSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCal2ParSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCal2ParSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCal2ParMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCal2ParMod::Class_Name()
{
   return "HMdcCal2ParMod";
}

//______________________________________________________________________________
const char *HMdcCal2ParMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCal2ParMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCal2ParMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCal2ParMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCal2ParAngleSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCal2ParAngleSim::Class_Name()
{
   return "HMdcCal2ParAngleSim";
}

//______________________________________________________________________________
const char *HMdcCal2ParAngleSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParAngleSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCal2ParAngleSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParAngleSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCal2ParAngleSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParAngleSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCal2ParAngleSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2ParAngleSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCal2Sim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCal2Sim::Class_Name()
{
   return "HMdcCal2Sim";
}

//______________________________________________________________________________
const char *HMdcCal2Sim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2Sim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCal2Sim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2Sim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCal2Sim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2Sim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCal2Sim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCal2Sim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCalParRaw::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCalParRaw::Class_Name()
{
   return "HMdcCalParRaw";
}

//______________________________________________________________________________
const char *HMdcCalParRaw::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParRaw*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCalParRaw::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParRaw*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCalParRaw::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParRaw*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCalParRaw::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParRaw*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookupGeom::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookupGeom::Class_Name()
{
   return "HMdcLookupGeom";
}

//______________________________________________________________________________
const char *HMdcLookupGeom::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupGeom*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookupGeom::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupGeom*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookupGeom::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupGeom*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookupGeom::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupGeom*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTimeCut::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTimeCut::Class_Name()
{
   return "HMdcTimeCut";
}

//______________________________________________________________________________
const char *HMdcTimeCut::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTimeCut*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTimeCut::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTimeCut*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTimeCut::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTimeCut*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTimeCut::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTimeCut*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCutStat::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCutStat::Class_Name()
{
   return "HMdcCutStat";
}

//______________________________________________________________________________
const char *HMdcCutStat::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCutStat*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCutStat::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCutStat*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCutStat::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCutStat*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCutStat::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCutStat*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcWireStat::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcWireStat::Class_Name()
{
   return "HMdcWireStat";
}

//______________________________________________________________________________
const char *HMdcWireStat::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireStat*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcWireStat::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireStat*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcWireStat::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireStat*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcWireStat::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcWireStat*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCalParTdc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCalParTdc::Class_Name()
{
   return "HMdcCalParTdc";
}

//______________________________________________________________________________
const char *HMdcCalParTdc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParTdc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCalParTdc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParTdc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCalParTdc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParTdc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCalParTdc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParTdc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCalibrater1::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCalibrater1::Class_Name()
{
   return "HMdcCalibrater1";
}

//______________________________________________________________________________
const char *HMdcCalibrater1::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalibrater1*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCalibrater1::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalibrater1*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCalibrater1::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalibrater1*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCalibrater1::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalibrater1*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCalParMbo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCalParMbo::Class_Name()
{
   return "HMdcCalParMbo";
}

//______________________________________________________________________________
const char *HMdcCalParMbo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParMbo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCalParMbo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParMbo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCalParMbo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParMbo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCalParMbo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParMbo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCalParRawMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCalParRawMod::Class_Name()
{
   return "HMdcCalParRawMod";
}

//______________________________________________________________________________
const char *HMdcCalParRawMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParRawMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCalParRawMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParRawMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCalParRawMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParRawMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCalParRawMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParRawMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCalParRawSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCalParRawSec::Class_Name()
{
   return "HMdcCalParRawSec";
}

//______________________________________________________________________________
const char *HMdcCalParRawSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParRawSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCalParRawSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParRawSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCalParRawSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParRawSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCalParRawSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalParRawSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCellEffAngle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCellEffAngle::Class_Name()
{
   return "HMdcCellEffAngle";
}

//______________________________________________________________________________
const char *HMdcCellEffAngle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellEffAngle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCellEffAngle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellEffAngle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCellEffAngle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellEffAngle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCellEffAngle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellEffAngle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCellEffMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCellEffMod::Class_Name()
{
   return "HMdcCellEffMod";
}

//______________________________________________________________________________
const char *HMdcCellEffMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellEffMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCellEffMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellEffMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCellEffMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellEffMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCellEffMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellEffMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCellEff::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCellEff::Class_Name()
{
   return "HMdcCellEff";
}

//______________________________________________________________________________
const char *HMdcCellEff::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellEff*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCellEff::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellEff*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCellEff::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellEff*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCellEff::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellEff*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCellGroup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCellGroup::Class_Name()
{
   return "HMdcCellGroup";
}

//______________________________________________________________________________
const char *HMdcCellGroup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellGroup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCellGroup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellGroup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCellGroup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellGroup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCellGroup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellGroup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCellGroup6::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCellGroup6::Class_Name()
{
   return "HMdcCellGroup6";
}

//______________________________________________________________________________
const char *HMdcCellGroup6::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellGroup6*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCellGroup6::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellGroup6*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCellGroup6::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellGroup6*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCellGroup6::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellGroup6*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCellGroup12::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCellGroup12::Class_Name()
{
   return "HMdcCellGroup12";
}

//______________________________________________________________________________
const char *HMdcCellGroup12::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellGroup12*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCellGroup12::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellGroup12*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCellGroup12::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellGroup12*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCellGroup12::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCellGroup12*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcContFact::Class_Name()
{
   return "HMdcContFact";
}

//______________________________________________________________________________
const char *HMdcContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCutStatMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCutStatMod::Class_Name()
{
   return "HMdcCutStatMod";
}

//______________________________________________________________________________
const char *HMdcCutStatMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCutStatMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCutStatMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCutStatMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCutStatMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCutStatMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCutStatMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCutStatMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCutStatSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCutStatSec::Class_Name()
{
   return "HMdcCutStatSec";
}

//______________________________________________________________________________
const char *HMdcCutStatSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCutStatSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCutStatSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCutStatSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCutStatSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCutStatSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCutStatSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCutStatSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLayerGeomPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLayerGeomPar::Class_Name()
{
   return "HMdcLayerGeomPar";
}

//______________________________________________________________________________
const char *HMdcLayerGeomPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLayerGeomPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLayerGeomPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLayerGeomPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcDigitPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcDigitPar::Class_Name()
{
   return "HMdcDigitPar";
}

//______________________________________________________________________________
const char *HMdcDigitPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDigitPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcDigitPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDigitPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcDigitPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDigitPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcDigitPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDigitPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcGeomStruct::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcGeomStruct::Class_Name()
{
   return "HMdcGeomStruct";
}

//______________________________________________________________________________
const char *HMdcGeomStruct::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomStruct*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcGeomStruct::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomStruct*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcGeomStruct::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomStruct*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcGeomStruct::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomStruct*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcGeantCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcGeantCell::Class_Name()
{
   return "HMdcGeantCell";
}

//______________________________________________________________________________
const char *HMdcGeantCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcGeantCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcGeantCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcGeantCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcDigitizer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcDigitizer::Class_Name()
{
   return "HMdcDigitizer";
}

//______________________________________________________________________________
const char *HMdcDigitizer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDigitizer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcDigitizer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDigitizer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcDigitizer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDigitizer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcDigitizer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDigitizer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcGeantReader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcGeantReader::Class_Name()
{
   return "HMdcGeantReader";
}

//______________________________________________________________________________
const char *HMdcGeantReader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantReader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcGeantReader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantReader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcGeantReader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantReader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcGeantReader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeantReader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcGeomModStru::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcGeomModStru::Class_Name()
{
   return "HMdcGeomModStru";
}

//______________________________________________________________________________
const char *HMdcGeomModStru::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomModStru*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcGeomModStru::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomModStru*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcGeomModStru::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomModStru*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcGeomModStru::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomModStru*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcGeomSecStru::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcGeomSecStru::Class_Name()
{
   return "HMdcGeomSecStru";
}

//______________________________________________________________________________
const char *HMdcGeomSecStru::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomSecStru*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcGeomSecStru::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomSecStru*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcGeomSecStru::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomSecStru*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcGeomSecStru::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcGeomSecStru*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcHit::Class_Name()
{
   return "HMdcHit";
}

//______________________________________________________________________________
const char *HMdcHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcHitSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcHitSim::Class_Name()
{
   return "HMdcHitSim";
}

//______________________________________________________________________________
const char *HMdcHitSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHitSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcHitSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHitSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcHitSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHitSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcHitSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHitSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcSeg::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcSeg::Class_Name()
{
   return "HMdcSeg";
}

//______________________________________________________________________________
const char *HMdcSeg::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSeg*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcSeg::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSeg*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcSeg::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSeg*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcSeg::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSeg*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcSegSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcSegSim::Class_Name()
{
   return "HMdcSegSim";
}

//______________________________________________________________________________
const char *HMdcSegSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSegSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcSegSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSegSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcSegSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSegSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcSegSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSegSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrkCand::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrkCand::Class_Name()
{
   return "HMdcTrkCand";
}

//______________________________________________________________________________
const char *HMdcTrkCand::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrkCand*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrkCand::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrkCand*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrkCand::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrkCand*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrkCand::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrkCand*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcHitIdeal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcHitIdeal::Class_Name()
{
   return "HMdcHitIdeal";
}

//______________________________________________________________________________
const char *HMdcHitIdeal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHitIdeal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcHitIdeal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHitIdeal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcHitIdeal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHitIdeal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcHitIdeal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcHitIdeal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcSegIdeal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcSegIdeal::Class_Name()
{
   return "HMdcSegIdeal";
}

//______________________________________________________________________________
const char *HMdcSegIdeal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSegIdeal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcSegIdeal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSegIdeal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcSegIdeal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSegIdeal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcSegIdeal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSegIdeal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrkCandIdeal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrkCandIdeal::Class_Name()
{
   return "HMdcTrkCandIdeal";
}

//______________________________________________________________________________
const char *HMdcTrkCandIdeal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrkCandIdeal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrkCandIdeal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrkCandIdeal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrkCandIdeal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrkCandIdeal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrkCandIdeal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrkCandIdeal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLayerGeomParLay::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLayerGeomParLay::Class_Name()
{
   return "HMdcLayerGeomParLay";
}

//______________________________________________________________________________
const char *HMdcLayerGeomParLay::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomParLay*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLayerGeomParLay::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomParLay*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLayerGeomParLay::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomParLay*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLayerGeomParLay::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomParLay*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLayerGeomParMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLayerGeomParMod::Class_Name()
{
   return "HMdcLayerGeomParMod";
}

//______________________________________________________________________________
const char *HMdcLayerGeomParMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomParMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLayerGeomParMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomParMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLayerGeomParMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomParMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLayerGeomParMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomParMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLayerGeomParSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLayerGeomParSec::Class_Name()
{
   return "HMdcLayerGeomParSec";
}

//______________________________________________________________________________
const char *HMdcLayerGeomParSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomParSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLayerGeomParSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomParSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLayerGeomParSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomParSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLayerGeomParSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLayerGeomParSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookupChan::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookupChan::Class_Name()
{
   return "HMdcLookupChan";
}

//______________________________________________________________________________
const char *HMdcLookupChan::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupChan*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookupChan::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupChan*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookupChan::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupChan*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookupChan::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupChan*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookupMoth::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookupMoth::Class_Name()
{
   return "HMdcLookupMoth";
}

//______________________________________________________________________________
const char *HMdcLookupMoth::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupMoth*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookupMoth::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupMoth*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookupMoth::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupMoth*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookupMoth::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupMoth*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookupGMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookupGMod::Class_Name()
{
   return "HMdcLookupGMod";
}

//______________________________________________________________________________
const char *HMdcLookupGMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupGMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookupGMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupGMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookupGMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupGMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookupGMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupGMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookupGSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookupGSec::Class_Name()
{
   return "HMdcLookupGSec";
}

//______________________________________________________________________________
const char *HMdcLookupGSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupGSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookupGSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupGSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookupGSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupGSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookupGSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupGSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookupCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookupCell::Class_Name()
{
   return "HMdcLookupCell";
}

//______________________________________________________________________________
const char *HMdcLookupCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookupCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookupCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookupCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookupLayer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookupLayer::Class_Name()
{
   return "HMdcLookupLayer";
}

//______________________________________________________________________________
const char *HMdcLookupLayer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupLayer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookupLayer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupLayer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookupLayer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupLayer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookupLayer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupLayer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookupRMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookupRMod::Class_Name()
{
   return "HMdcLookupRMod";
}

//______________________________________________________________________________
const char *HMdcLookupRMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupRMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookupRMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupRMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookupRMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupRMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookupRMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupRMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookupRSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookupRSec::Class_Name()
{
   return "HMdcLookupRSec";
}

//______________________________________________________________________________
const char *HMdcLookupRSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupRSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookupRSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupRSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookupRSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupRSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookupRSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupRSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcLookupRaw::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLookupRaw::Class_Name()
{
   return "HMdcLookupRaw";
}

//______________________________________________________________________________
const char *HMdcLookupRaw::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupRaw*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLookupRaw::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupRaw*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLookupRaw::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupRaw*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLookupRaw::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLookupRaw*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcParAsciiFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcParAsciiFileIo::Class_Name()
{
   return "HMdcParAsciiFileIo";
}

//______________________________________________________________________________
const char *HMdcParAsciiFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcParAsciiFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcParAsciiFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcParAsciiFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcParAsciiFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcParAsciiFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcParAsciiFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcParAsciiFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcRawStruct::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcRawStruct::Class_Name()
{
   return "HMdcRawStruct";
}

//______________________________________________________________________________
const char *HMdcRawStruct::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawStruct*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcRawStruct::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawStruct*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcRawStruct::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawStruct*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcRawStruct::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawStruct*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTdcThreshold::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTdcThreshold::Class_Name()
{
   return "HMdcTdcThreshold";
}

//______________________________________________________________________________
const char *HMdcTdcThreshold::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThreshold*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTdcThreshold::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThreshold*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTdcThreshold::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThreshold*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTdcThreshold::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThreshold*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTdcChannel::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTdcChannel::Class_Name()
{
   return "HMdcTdcChannel";
}

//______________________________________________________________________________
const char *HMdcTdcChannel::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannel*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTdcChannel::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannel*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTdcChannel::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannel*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTdcChannel::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannel*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcParRootFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcParRootFileIo::Class_Name()
{
   return "HMdcParRootFileIo";
}

//______________________________________________________________________________
const char *HMdcParRootFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcParRootFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcParRootFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcParRootFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcParRootFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcParRootFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcParRootFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcParRootFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcPPEvtFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcPPEvtFilter::Class_Name()
{
   return "HMdcPPEvtFilter";
}

//______________________________________________________________________________
const char *HMdcPPEvtFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPPEvtFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcPPEvtFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPPEvtFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcPPEvtFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPPEvtFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcPPEvtFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcPPEvtFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcRawMothStru::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcRawMothStru::Class_Name()
{
   return "HMdcRawMothStru";
}

//______________________________________________________________________________
const char *HMdcRawMothStru::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawMothStru*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcRawMothStru::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawMothStru*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcRawMothStru::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawMothStru*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcRawMothStru::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawMothStru*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcRawModStru::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcRawModStru::Class_Name()
{
   return "HMdcRawModStru";
}

//______________________________________________________________________________
const char *HMdcRawModStru::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawModStru*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcRawModStru::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawModStru*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcRawModStru::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawModStru*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcRawModStru::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawModStru*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcRawSecStru::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcRawSecStru::Class_Name()
{
   return "HMdcRawSecStru";
}

//______________________________________________________________________________
const char *HMdcRawSecStru::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawSecStru*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcRawSecStru::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawSecStru*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcRawSecStru::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawSecStru*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcRawSecStru::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcRawSecStru*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcSetup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcSetup::Class_Name()
{
   return "HMdcSetup";
}

//______________________________________________________________________________
const char *HMdcSetup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSetup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcSetup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSetup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcSetup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSetup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcSetup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSetup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcDigitizerSetup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcDigitizerSetup::Class_Name()
{
   return "HMdcDigitizerSetup";
}

//______________________________________________________________________________
const char *HMdcDigitizerSetup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDigitizerSetup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcDigitizerSetup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDigitizerSetup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcDigitizerSetup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDigitizerSetup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcDigitizerSetup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDigitizerSetup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCalibrater1Setup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCalibrater1Setup::Class_Name()
{
   return "HMdcCalibrater1Setup";
}

//______________________________________________________________________________
const char *HMdcCalibrater1Setup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalibrater1Setup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCalibrater1Setup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalibrater1Setup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCalibrater1Setup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalibrater1Setup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCalibrater1Setup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCalibrater1Setup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackFinderSetup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackFinderSetup::Class_Name()
{
   return "HMdcTrackFinderSetup";
}

//______________________________________________________________________________
const char *HMdcTrackFinderSetup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFinderSetup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackFinderSetup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFinderSetup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackFinderSetup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFinderSetup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackFinderSetup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackFinderSetup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcClusterToHitSetup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcClusterToHitSetup::Class_Name()
{
   return "HMdcClusterToHitSetup";
}

//______________________________________________________________________________
const char *HMdcClusterToHitSetup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusterToHitSetup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcClusterToHitSetup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusterToHitSetup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcClusterToHitSetup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusterToHitSetup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcClusterToHitSetup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcClusterToHitSetup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdc12FitSetup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdc12FitSetup::Class_Name()
{
   return "HMdc12FitSetup";
}

//______________________________________________________________________________
const char *HMdc12FitSetup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc12FitSetup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdc12FitSetup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc12FitSetup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdc12FitSetup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc12FitSetup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdc12FitSetup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdc12FitSetup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCommonSetup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCommonSetup::Class_Name()
{
   return "HMdcCommonSetup";
}

//______________________________________________________________________________
const char *HMdcCommonSetup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCommonSetup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCommonSetup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCommonSetup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCommonSetup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCommonSetup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCommonSetup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCommonSetup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcVertexFind::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcVertexFind::Class_Name()
{
   return "HMdcVertexFind";
}

//______________________________________________________________________________
const char *HMdcVertexFind::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcVertexFind*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcVertexFind::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcVertexFind*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcVertexFind::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcVertexFind*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcVertexFind::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcVertexFind*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTaskSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTaskSet::Class_Name()
{
   return "HMdcTaskSet";
}

//______________________________________________________________________________
const char *HMdcTaskSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTaskSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTaskSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTaskSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTaskSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTaskSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTaskSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTaskSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTdcChannelTdc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTdcChannelTdc::Class_Name()
{
   return "HMdcTdcChannelTdc";
}

//______________________________________________________________________________
const char *HMdcTdcChannelTdc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelTdc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTdcChannelTdc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelTdc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTdcChannelTdc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelTdc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTdcChannelTdc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelTdc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTdcChannelMbo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTdcChannelMbo::Class_Name()
{
   return "HMdcTdcChannelMbo";
}

//______________________________________________________________________________
const char *HMdcTdcChannelMbo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelMbo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTdcChannelMbo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelMbo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTdcChannelMbo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelMbo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTdcChannelMbo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelMbo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTdcChannelMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTdcChannelMod::Class_Name()
{
   return "HMdcTdcChannelMod";
}

//______________________________________________________________________________
const char *HMdcTdcChannelMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTdcChannelMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTdcChannelMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTdcChannelMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTdcChannelSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTdcChannelSec::Class_Name()
{
   return "HMdcTdcChannelSec";
}

//______________________________________________________________________________
const char *HMdcTdcChannelSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTdcChannelSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTdcChannelSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTdcChannelSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcChannelSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTdcThresholdDbo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTdcThresholdDbo::Class_Name()
{
   return "HMdcTdcThresholdDbo";
}

//______________________________________________________________________________
const char *HMdcTdcThresholdDbo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdDbo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTdcThresholdDbo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdDbo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTdcThresholdDbo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdDbo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTdcThresholdDbo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdDbo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTdcThresholdMbo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTdcThresholdMbo::Class_Name()
{
   return "HMdcTdcThresholdMbo";
}

//______________________________________________________________________________
const char *HMdcTdcThresholdMbo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdMbo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTdcThresholdMbo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdMbo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTdcThresholdMbo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdMbo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTdcThresholdMbo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdMbo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTdcThresholdMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTdcThresholdMod::Class_Name()
{
   return "HMdcTdcThresholdMod";
}

//______________________________________________________________________________
const char *HMdcTdcThresholdMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTdcThresholdMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTdcThresholdMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTdcThresholdMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTdcThresholdSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTdcThresholdSec::Class_Name()
{
   return "HMdcTdcThresholdSec";
}

//______________________________________________________________________________
const char *HMdcTdcThresholdSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTdcThresholdSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTdcThresholdSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTdcThresholdSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTdcThresholdSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTimeCutMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTimeCutMod::Class_Name()
{
   return "HMdcTimeCutMod";
}

//______________________________________________________________________________
const char *HMdcTimeCutMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTimeCutMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTimeCutMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTimeCutMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTimeCutMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTimeCutMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTimeCutMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTimeCutMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTimeCutSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTimeCutSec::Class_Name()
{
   return "HMdcTimeCutSec";
}

//______________________________________________________________________________
const char *HMdcTimeCutSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTimeCutSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTimeCutSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTimeCutSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTimeCutSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTimeCutSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTimeCutSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTimeCutSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrk::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrk::Class_Name()
{
   return "HMdcTrk";
}

//______________________________________________________________________________
const char *HMdcTrk::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrk*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrk::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrk*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrk::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrk*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrk::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrk*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcVertexWriter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcVertexWriter::Class_Name()
{
   return "HMdcVertexWriter";
}

//______________________________________________________________________________
const char *HMdcVertexWriter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcVertexWriter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcVertexWriter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcVertexWriter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcVertexWriter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcVertexWriter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcVertexWriter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcVertexWriter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcUnpackerPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcUnpackerPar::Class_Name()
{
   return "HMdcUnpackerPar";
}

//______________________________________________________________________________
const char *HMdcUnpackerPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcUnpackerPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcUnpackerPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcUnpackerPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcUnpackerPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcUnpackerPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcUnpackerPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcUnpackerPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcDataword::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcDataword::Class_Name()
{
   return "HMdcDataword";
}

//______________________________________________________________________________
const char *HMdcDataword::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDataword*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcDataword::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDataword*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcDataword::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDataword*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcDataword::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcDataword*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcOepAddrCorrPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcOepAddrCorrPar::Class_Name()
{
   return "HMdcOepAddrCorrPar";
}

//______________________________________________________________________________
const char *HMdcOepAddrCorrPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcOepAddrCorrPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcOepAddrCorrPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcOepAddrCorrPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcOepAddrCorrPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcOepAddrCorrPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcOepAddrCorrPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcOepAddrCorrPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcUnpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcUnpacker::Class_Name()
{
   return "HMdcUnpacker";
}

//______________________________________________________________________________
const char *HMdcUnpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcUnpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcUnpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcUnpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcUnpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcUnpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcUnpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcUnpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcOepStatusData::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcOepStatusData::Class_Name()
{
   return "HMdcOepStatusData";
}

//______________________________________________________________________________
const char *HMdcOepStatusData::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcOepStatusData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcOepStatusData::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcOepStatusData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcOepStatusData::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcOepStatusData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcOepStatusData::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcOepStatusData*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HMdcDetector::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcDetector.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetector::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HMdcDetector::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcDetector::IsA(), kTRUE);
      HDetector::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcDetector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcDetector.
      TClass *R__cl = ::HMdcDetector::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcDetector(void *p) {
      return  p ? new(p) ::HMdcDetector : new ::HMdcDetector;
   }
   static void *newArray_HMdcDetector(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcDetector[nElements] : new ::HMdcDetector[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcDetector(void *p) {
      delete ((::HMdcDetector*)p);
   }
   static void deleteArray_HMdcDetector(void *p) {
      delete [] ((::HMdcDetector*)p);
   }
   static void destruct_HMdcDetector(void *p) {
      typedef ::HMdcDetector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcDetector(TBuffer &buf, void *obj) {
      ((::HMdcDetector*)obj)->::HMdcDetector::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcDetector

//______________________________________________________________________________
void HMdcTaskSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTaskSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTaskSet::Streamer(R__b);
      R__b >> idealTracking;
      R__b >> fillParallel;
      R__b.CheckByteCount(R__s, R__c, HMdcTaskSet::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTaskSet::IsA(), kTRUE);
      HTaskSet::Streamer(R__b);
      R__b << idealTracking;
      R__b << fillParallel;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTaskSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTaskSet.
      TClass *R__cl = ::HMdcTaskSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "versionDeDx", &versionDeDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "idealTracking", &idealTracking);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fillParallel", &fillParallel);
      HTaskSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTaskSet(void *p) {
      return  p ? new(p) ::HMdcTaskSet : new ::HMdcTaskSet;
   }
   static void *newArray_HMdcTaskSet(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTaskSet[nElements] : new ::HMdcTaskSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTaskSet(void *p) {
      delete ((::HMdcTaskSet*)p);
   }
   static void deleteArray_HMdcTaskSet(void *p) {
      delete [] ((::HMdcTaskSet*)p);
   }
   static void destruct_HMdcTaskSet(void *p) {
      typedef ::HMdcTaskSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTaskSet(TBuffer &buf, void *obj) {
      ((::HMdcTaskSet*)obj)->::HMdcTaskSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTaskSet

//______________________________________________________________________________
void HMdcContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcContFact.

   HContFact::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcContFact.
      TClass *R__cl = ::HMdcContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      HContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcContFact(void *p) {
      return  p ? new(p) ::HMdcContFact : new ::HMdcContFact;
   }
   static void *newArray_HMdcContFact(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcContFact[nElements] : new ::HMdcContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcContFact(void *p) {
      delete ((::HMdcContFact*)p);
   }
   static void deleteArray_HMdcContFact(void *p) {
      delete [] ((::HMdcContFact*)p);
   }
   static void destruct_HMdcContFact(void *p) {
      typedef ::HMdcContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcContFact(TBuffer &buf, void *obj) {
      ((::HMdcContFact*)obj)->::HMdcContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcContFact

//______________________________________________________________________________
void HMdcParRootFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcParRootFileIo.

   HDetParRootFileIo::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcParRootFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcParRootFileIo.
      TClass *R__cl = ::HMdcParRootFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*initModuleTypes", &initModuleTypes);
      HDetParRootFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdcParRootFileIo(void *p) {
      delete ((::HMdcParRootFileIo*)p);
   }
   static void deleteArray_HMdcParRootFileIo(void *p) {
      delete [] ((::HMdcParRootFileIo*)p);
   }
   static void destruct_HMdcParRootFileIo(void *p) {
      typedef ::HMdcParRootFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcParRootFileIo(TBuffer &buf, void *obj) {
      ((::HMdcParRootFileIo*)obj)->::HMdcParRootFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcParRootFileIo

//______________________________________________________________________________
void HMdcParAsciiFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcParAsciiFileIo.

   HDetParAsciiFileIo::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcParAsciiFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcParAsciiFileIo.
      TClass *R__cl = ::HMdcParAsciiFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetParAsciiFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdcParAsciiFileIo(void *p) {
      delete ((::HMdcParAsciiFileIo*)p);
   }
   static void deleteArray_HMdcParAsciiFileIo(void *p) {
      delete [] ((::HMdcParAsciiFileIo*)p);
   }
   static void destruct_HMdcParAsciiFileIo(void *p) {
      typedef ::HMdcParAsciiFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcParAsciiFileIo(TBuffer &buf, void *obj) {
      ((::HMdcParAsciiFileIo*)obj)->::HMdcParAsciiFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcParAsciiFileIo

//______________________________________________________________________________
void HMdcGeomStruct::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcGeomStruct.
      TClass *R__cl = ::HMdcGeomStruct::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcGeomStruct(void *p) {
      return  p ? new(p) ::HMdcGeomStruct : new ::HMdcGeomStruct;
   }
   static void *newArray_HMdcGeomStruct(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcGeomStruct[nElements] : new ::HMdcGeomStruct[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcGeomStruct(void *p) {
      delete ((::HMdcGeomStruct*)p);
   }
   static void deleteArray_HMdcGeomStruct(void *p) {
      delete [] ((::HMdcGeomStruct*)p);
   }
   static void destruct_HMdcGeomStruct(void *p) {
      typedef ::HMdcGeomStruct current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcGeomStruct(TBuffer &buf, void *obj) {
      ((::HMdcGeomStruct*)obj)->::HMdcGeomStruct::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcGeomStruct

//______________________________________________________________________________
void HMdcGeomSecStru::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcGeomSecStru.
      TClass *R__cl = ::HMdcGeomSecStru::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcGeomSecStru(void *p) {
      return  p ? new(p) ::HMdcGeomSecStru : new ::HMdcGeomSecStru;
   }
   static void *newArray_HMdcGeomSecStru(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcGeomSecStru[nElements] : new ::HMdcGeomSecStru[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcGeomSecStru(void *p) {
      delete ((::HMdcGeomSecStru*)p);
   }
   static void deleteArray_HMdcGeomSecStru(void *p) {
      delete [] ((::HMdcGeomSecStru*)p);
   }
   static void destruct_HMdcGeomSecStru(void *p) {
      typedef ::HMdcGeomSecStru current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcGeomSecStru(TBuffer &buf, void *obj) {
      ((::HMdcGeomSecStru*)obj)->::HMdcGeomSecStru::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcGeomSecStru

//______________________________________________________________________________
void HMdcGeomModStru::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcGeomModStru.
      TClass *R__cl = ::HMdcGeomModStru::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCells[6]", nCells);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcGeomModStru(void *p) {
      return  p ? new(p) ::HMdcGeomModStru : new ::HMdcGeomModStru;
   }
   static void *newArray_HMdcGeomModStru(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcGeomModStru[nElements] : new ::HMdcGeomModStru[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcGeomModStru(void *p) {
      delete ((::HMdcGeomModStru*)p);
   }
   static void deleteArray_HMdcGeomModStru(void *p) {
      delete [] ((::HMdcGeomModStru*)p);
   }
   static void destruct_HMdcGeomModStru(void *p) {
      typedef ::HMdcGeomModStru current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcGeomModStru(TBuffer &buf, void *obj) {
      ((::HMdcGeomModStru*)obj)->::HMdcGeomModStru::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcGeomModStru

//______________________________________________________________________________
void HMdcRawStruct::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcRawStruct.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcRawStruct::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcRawStruct::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcRawStruct::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcRawStruct.
      TClass *R__cl = ::HMdcRawStruct::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcRawStruct(void *p) {
      return  p ? new(p) ::HMdcRawStruct : new ::HMdcRawStruct;
   }
   static void *newArray_HMdcRawStruct(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcRawStruct[nElements] : new ::HMdcRawStruct[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcRawStruct(void *p) {
      delete ((::HMdcRawStruct*)p);
   }
   static void deleteArray_HMdcRawStruct(void *p) {
      delete [] ((::HMdcRawStruct*)p);
   }
   static void destruct_HMdcRawStruct(void *p) {
      typedef ::HMdcRawStruct current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcRawStruct(TBuffer &buf, void *obj) {
      ((::HMdcRawStruct*)obj)->::HMdcRawStruct::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcRawStruct

//______________________________________________________________________________
void HMdcRawSecStru::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcRawSecStru.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcRawSecStru::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcRawSecStru::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcRawSecStru::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcRawSecStru.
      TClass *R__cl = ::HMdcRawSecStru::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcRawSecStru(void *p) {
      return  p ? new(p) ::HMdcRawSecStru : new ::HMdcRawSecStru;
   }
   static void *newArray_HMdcRawSecStru(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcRawSecStru[nElements] : new ::HMdcRawSecStru[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcRawSecStru(void *p) {
      delete ((::HMdcRawSecStru*)p);
   }
   static void deleteArray_HMdcRawSecStru(void *p) {
      delete [] ((::HMdcRawSecStru*)p);
   }
   static void destruct_HMdcRawSecStru(void *p) {
      typedef ::HMdcRawSecStru current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcRawSecStru(TBuffer &buf, void *obj) {
      ((::HMdcRawSecStru*)obj)->::HMdcRawSecStru::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcRawSecStru

//______________________________________________________________________________
void HMdcRawModStru::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcRawModStru.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcRawModStru::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcRawModStru::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcRawModStru::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcRawModStru.
      TClass *R__cl = ::HMdcRawModStru::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcRawModStru(void *p) {
      return  p ? new(p) ::HMdcRawModStru : new ::HMdcRawModStru;
   }
   static void *newArray_HMdcRawModStru(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcRawModStru[nElements] : new ::HMdcRawModStru[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcRawModStru(void *p) {
      delete ((::HMdcRawModStru*)p);
   }
   static void deleteArray_HMdcRawModStru(void *p) {
      delete [] ((::HMdcRawModStru*)p);
   }
   static void destruct_HMdcRawModStru(void *p) {
      typedef ::HMdcRawModStru current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcRawModStru(TBuffer &buf, void *obj) {
      ((::HMdcRawModStru*)obj)->::HMdcRawModStru::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcRawModStru

//______________________________________________________________________________
void HMdcRawMothStru::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcRawMothStru.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> nTdcs;
      R__b.CheckByteCount(R__s, R__c, HMdcRawMothStru::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcRawMothStru::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << nTdcs;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcRawMothStru::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcRawMothStru.
      TClass *R__cl = ::HMdcRawMothStru::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTdcs", &nTdcs);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcRawMothStru(void *p) {
      return  p ? new(p) ::HMdcRawMothStru : new ::HMdcRawMothStru;
   }
   static void *newArray_HMdcRawMothStru(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcRawMothStru[nElements] : new ::HMdcRawMothStru[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcRawMothStru(void *p) {
      delete ((::HMdcRawMothStru*)p);
   }
   static void deleteArray_HMdcRawMothStru(void *p) {
      delete [] ((::HMdcRawMothStru*)p);
   }
   static void destruct_HMdcRawMothStru(void *p) {
      typedef ::HMdcRawMothStru current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcRawMothStru(TBuffer &buf, void *obj) {
      ((::HMdcRawMothStru*)obj)->::HMdcRawMothStru::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcRawMothStru

//______________________________________________________________________________
void HMdcCalParRaw::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCalParRaw.
      TClass *R__cl = ::HMdcCalParRaw::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCalParRaw(void *p) {
      return  p ? new(p) ::HMdcCalParRaw : new ::HMdcCalParRaw;
   }
   static void *newArray_HMdcCalParRaw(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCalParRaw[nElements] : new ::HMdcCalParRaw[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCalParRaw(void *p) {
      delete ((::HMdcCalParRaw*)p);
   }
   static void deleteArray_HMdcCalParRaw(void *p) {
      delete [] ((::HMdcCalParRaw*)p);
   }
   static void destruct_HMdcCalParRaw(void *p) {
      typedef ::HMdcCalParRaw current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCalParRaw(TBuffer &buf, void *obj) {
      ((::HMdcCalParRaw*)obj)->::HMdcCalParRaw::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCalParRaw

//______________________________________________________________________________
void HMdcCalParRawSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCalParRawSec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcCalParRawSec::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCalParRawSec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCalParRawSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCalParRawSec.
      TClass *R__cl = ::HMdcCalParRawSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCalParRawSec(void *p) {
      return  p ? new(p) ::HMdcCalParRawSec : new ::HMdcCalParRawSec;
   }
   static void *newArray_HMdcCalParRawSec(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCalParRawSec[nElements] : new ::HMdcCalParRawSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCalParRawSec(void *p) {
      delete ((::HMdcCalParRawSec*)p);
   }
   static void deleteArray_HMdcCalParRawSec(void *p) {
      delete [] ((::HMdcCalParRawSec*)p);
   }
   static void destruct_HMdcCalParRawSec(void *p) {
      typedef ::HMdcCalParRawSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCalParRawSec(TBuffer &buf, void *obj) {
      ((::HMdcCalParRawSec*)obj)->::HMdcCalParRawSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCalParRawSec

//______________________________________________________________________________
void HMdcCalParRawMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCalParRawMod.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcCalParRawMod::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCalParRawMod::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCalParRawMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCalParRawMod.
      TClass *R__cl = ::HMdcCalParRawMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCalParRawMod(void *p) {
      return  p ? new(p) ::HMdcCalParRawMod : new ::HMdcCalParRawMod;
   }
   static void *newArray_HMdcCalParRawMod(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCalParRawMod[nElements] : new ::HMdcCalParRawMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCalParRawMod(void *p) {
      delete ((::HMdcCalParRawMod*)p);
   }
   static void deleteArray_HMdcCalParRawMod(void *p) {
      delete [] ((::HMdcCalParRawMod*)p);
   }
   static void destruct_HMdcCalParRawMod(void *p) {
      typedef ::HMdcCalParRawMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCalParRawMod(TBuffer &buf, void *obj) {
      ((::HMdcCalParRawMod*)obj)->::HMdcCalParRawMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCalParRawMod

//______________________________________________________________________________
void HMdcCalParMbo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCalParMbo.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcCalParMbo::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCalParMbo::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCalParMbo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCalParMbo.
      TClass *R__cl = ::HMdcCalParMbo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCalParMbo(void *p) {
      return  p ? new(p) ::HMdcCalParMbo : new ::HMdcCalParMbo;
   }
   static void *newArray_HMdcCalParMbo(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCalParMbo[nElements] : new ::HMdcCalParMbo[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCalParMbo(void *p) {
      delete ((::HMdcCalParMbo*)p);
   }
   static void deleteArray_HMdcCalParMbo(void *p) {
      delete [] ((::HMdcCalParMbo*)p);
   }
   static void destruct_HMdcCalParMbo(void *p) {
      typedef ::HMdcCalParMbo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCalParMbo(TBuffer &buf, void *obj) {
      ((::HMdcCalParMbo*)obj)->::HMdcCalParMbo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCalParMbo

//______________________________________________________________________________
void HMdcCalParTdc::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCalParTdc.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> slope;
      R__b >> offset;
      R__b >> slopeErr;
      R__b >> offsetErr;
      R__b >> slopeMethod;
      R__b >> offsetMethod;
      R__b.CheckByteCount(R__s, R__c, HMdcCalParTdc::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCalParTdc::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << slope;
      R__b << offset;
      R__b << slopeErr;
      R__b << offsetErr;
      R__b << slopeMethod;
      R__b << offsetMethod;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCalParTdc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCalParTdc.
      TClass *R__cl = ::HMdcCalParTdc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slope", &slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offset", &offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slopeErr", &slopeErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetErr", &offsetErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slopeMethod", &slopeMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetMethod", &offsetMethod);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCalParTdc(void *p) {
      return  p ? new(p) ::HMdcCalParTdc : new ::HMdcCalParTdc;
   }
   static void *newArray_HMdcCalParTdc(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCalParTdc[nElements] : new ::HMdcCalParTdc[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCalParTdc(void *p) {
      delete ((::HMdcCalParTdc*)p);
   }
   static void deleteArray_HMdcCalParTdc(void *p) {
      delete [] ((::HMdcCalParTdc*)p);
   }
   static void destruct_HMdcCalParTdc(void *p) {
      typedef ::HMdcCalParTdc current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCalParTdc(TBuffer &buf, void *obj) {
      ((::HMdcCalParTdc*)obj)->::HMdcCalParTdc::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCalParTdc

//______________________________________________________________________________
void HMdcCal2Par::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCal2Par.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b >> fMdc;
      comment.Streamer(R__b);
      R__b >> sector;
      R__b >> module;
      R__b >> linecounter;
      R__b >> linecounterwrite;
      R__b >> type;
      R__b >> cal2parsim;
      R__b >> myslopeOutside;
      R__b.CheckByteCount(R__s, R__c, HMdcCal2Par::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCal2Par::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b << fMdc;
      comment.Streamer(R__b);
      R__b << sector;
      R__b << module;
      R__b << linecounter;
      R__b << linecounterwrite;
      R__b << type;
      R__b << cal2parsim;
      R__b << myslopeOutside;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCal2Par::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCal2Par.
      TClass *R__cl = ::HMdcCal2Par::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdc", &fMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "comment", &comment);
      R__insp.InspectMember(comment, "comment.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "linecounter", &linecounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "linecounterwrite", &linecounterwrite);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cal2parsim", &cal2parsim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "myslopeOutside", &myslopeOutside);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCal2Par(void *p) {
      return  p ? new(p) ::HMdcCal2Par : new ::HMdcCal2Par;
   }
   static void *newArray_HMdcCal2Par(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCal2Par[nElements] : new ::HMdcCal2Par[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCal2Par(void *p) {
      delete ((::HMdcCal2Par*)p);
   }
   static void deleteArray_HMdcCal2Par(void *p) {
      delete [] ((::HMdcCal2Par*)p);
   }
   static void destruct_HMdcCal2Par(void *p) {
      typedef ::HMdcCal2Par current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCal2Par(TBuffer &buf, void *obj) {
      ((::HMdcCal2Par*)obj)->::HMdcCal2Par::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCal2Par

//______________________________________________________________________________
void HMdcCal2ParSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCal2ParSec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcCal2ParSec::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCal2ParSec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCal2ParSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCal2ParSec.
      TClass *R__cl = ::HMdcCal2ParSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCal2ParSec(void *p) {
      return  p ? new(p) ::HMdcCal2ParSec : new ::HMdcCal2ParSec;
   }
   static void *newArray_HMdcCal2ParSec(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCal2ParSec[nElements] : new ::HMdcCal2ParSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCal2ParSec(void *p) {
      delete ((::HMdcCal2ParSec*)p);
   }
   static void deleteArray_HMdcCal2ParSec(void *p) {
      delete [] ((::HMdcCal2ParSec*)p);
   }
   static void destruct_HMdcCal2ParSec(void *p) {
      typedef ::HMdcCal2ParSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCal2ParSec(TBuffer &buf, void *obj) {
      ((::HMdcCal2ParSec*)obj)->::HMdcCal2ParSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCal2ParSec

//______________________________________________________________________________
void HMdcCal2ParMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCal2ParMod.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcCal2ParMod::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCal2ParMod::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCal2ParMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCal2ParMod.
      TClass *R__cl = ::HMdcCal2ParMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCal2ParMod(void *p) {
      return  p ? new(p) ::HMdcCal2ParMod : new ::HMdcCal2ParMod;
   }
   static void *newArray_HMdcCal2ParMod(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCal2ParMod[nElements] : new ::HMdcCal2ParMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCal2ParMod(void *p) {
      delete ((::HMdcCal2ParMod*)p);
   }
   static void deleteArray_HMdcCal2ParMod(void *p) {
      delete [] ((::HMdcCal2ParMod*)p);
   }
   static void destruct_HMdcCal2ParMod(void *p) {
      typedef ::HMdcCal2ParMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCal2ParMod(TBuffer &buf, void *obj) {
      ((::HMdcCal2ParMod*)obj)->::HMdcCal2ParMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCal2ParMod

//______________________________________________________________________________
void HMdcCal2ParAngle::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCal2ParAngle.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.ReadStaticArray((float*)distance);
      R__b.ReadStaticArray((float*)distanceErr);
      R__b.CheckByteCount(R__s, R__c, HMdcCal2ParAngle::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCal2ParAngle::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.WriteArray(distance, 100);
      R__b.WriteArray(distanceErr, 100);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCal2ParAngle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCal2ParAngle.
      TClass *R__cl = ::HMdcCal2ParAngle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distance[100]", distance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distanceErr[100]", distanceErr);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCal2ParAngle(void *p) {
      return  p ? new(p) ::HMdcCal2ParAngle : new ::HMdcCal2ParAngle;
   }
   static void *newArray_HMdcCal2ParAngle(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCal2ParAngle[nElements] : new ::HMdcCal2ParAngle[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCal2ParAngle(void *p) {
      delete ((::HMdcCal2ParAngle*)p);
   }
   static void deleteArray_HMdcCal2ParAngle(void *p) {
      delete [] ((::HMdcCal2ParAngle*)p);
   }
   static void destruct_HMdcCal2ParAngle(void *p) {
      typedef ::HMdcCal2ParAngle current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCal2ParAngle(TBuffer &buf, void *obj) {
      ((::HMdcCal2ParAngle*)obj)->::HMdcCal2ParAngle::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCal2ParAngle

//______________________________________________________________________________
void HMdcCal2ParSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCal2ParSim.
      TClass *R__cl = ::HMdcCal2ParSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdc", &fMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "comment", &comment);
      R__insp.InspectMember(comment, "comment.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "angleDeg", &angleDeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time2", &time2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "finaltime", &finaltime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "angleStep", &angleStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distance", &distance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "linecounter", &linecounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "linecounterwrite", &linecounterwrite);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slopeOutside", &slopeOutside);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dmin", &dmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dmax", &dmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scaleError[4]", scaleError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "constError[4]", constError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useConstErr", &useConstErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "constVD[4]", constVD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useConstVD", &useConstVD);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCal2ParSim(void *p) {
      return  p ? new(p) ::HMdcCal2ParSim : new ::HMdcCal2ParSim;
   }
   static void *newArray_HMdcCal2ParSim(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCal2ParSim[nElements] : new ::HMdcCal2ParSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCal2ParSim(void *p) {
      delete ((::HMdcCal2ParSim*)p);
   }
   static void deleteArray_HMdcCal2ParSim(void *p) {
      delete [] ((::HMdcCal2ParSim*)p);
   }
   static void destruct_HMdcCal2ParSim(void *p) {
      typedef ::HMdcCal2ParSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCal2ParSim(TBuffer &buf, void *obj) {
      ((::HMdcCal2ParSim*)obj)->::HMdcCal2ParSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCal2ParSim

//______________________________________________________________________________
void HMdcCal2ParSecSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCal2ParSecSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcCal2ParSecSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCal2ParSecSim::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCal2ParSecSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCal2ParSecSim.
      TClass *R__cl = ::HMdcCal2ParSecSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCal2ParSecSim(void *p) {
      return  p ? new(p) ::HMdcCal2ParSecSim : new ::HMdcCal2ParSecSim;
   }
   static void *newArray_HMdcCal2ParSecSim(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCal2ParSecSim[nElements] : new ::HMdcCal2ParSecSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCal2ParSecSim(void *p) {
      delete ((::HMdcCal2ParSecSim*)p);
   }
   static void deleteArray_HMdcCal2ParSecSim(void *p) {
      delete [] ((::HMdcCal2ParSecSim*)p);
   }
   static void destruct_HMdcCal2ParSecSim(void *p) {
      typedef ::HMdcCal2ParSecSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCal2ParSecSim(TBuffer &buf, void *obj) {
      ((::HMdcCal2ParSecSim*)obj)->::HMdcCal2ParSecSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCal2ParSecSim

//______________________________________________________________________________
void HMdcCal2ParModSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCal2ParModSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcCal2ParModSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCal2ParModSim::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCal2ParModSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCal2ParModSim.
      TClass *R__cl = ::HMdcCal2ParModSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCal2ParModSim(void *p) {
      return  p ? new(p) ::HMdcCal2ParModSim : new ::HMdcCal2ParModSim;
   }
   static void *newArray_HMdcCal2ParModSim(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCal2ParModSim[nElements] : new ::HMdcCal2ParModSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCal2ParModSim(void *p) {
      delete ((::HMdcCal2ParModSim*)p);
   }
   static void deleteArray_HMdcCal2ParModSim(void *p) {
      delete [] ((::HMdcCal2ParModSim*)p);
   }
   static void destruct_HMdcCal2ParModSim(void *p) {
      typedef ::HMdcCal2ParModSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCal2ParModSim(TBuffer &buf, void *obj) {
      ((::HMdcCal2ParModSim*)obj)->::HMdcCal2ParModSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCal2ParModSim

//______________________________________________________________________________
void HMdcCal2ParAngleSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCal2ParAngleSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.ReadStaticArray((float*)drifttime1);
      R__b.ReadStaticArray((float*)drifttime2);
      R__b.ReadStaticArray((float*)drifttime1Err);
      R__b.ReadStaticArray((float*)drifttime2Err);
      R__b.CheckByteCount(R__s, R__c, HMdcCal2ParAngleSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCal2ParAngleSim::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.WriteArray(drifttime1, 100);
      R__b.WriteArray(drifttime2, 100);
      R__b.WriteArray(drifttime1Err, 100);
      R__b.WriteArray(drifttime2Err, 100);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCal2ParAngleSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCal2ParAngleSim.
      TClass *R__cl = ::HMdcCal2ParAngleSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "drifttime1[100]", drifttime1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "drifttime2[100]", drifttime2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "drifttime1Err[100]", drifttime1Err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "drifttime2Err[100]", drifttime2Err);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCal2ParAngleSim(void *p) {
      return  p ? new(p) ::HMdcCal2ParAngleSim : new ::HMdcCal2ParAngleSim;
   }
   static void *newArray_HMdcCal2ParAngleSim(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCal2ParAngleSim[nElements] : new ::HMdcCal2ParAngleSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCal2ParAngleSim(void *p) {
      delete ((::HMdcCal2ParAngleSim*)p);
   }
   static void deleteArray_HMdcCal2ParAngleSim(void *p) {
      delete [] ((::HMdcCal2ParAngleSim*)p);
   }
   static void destruct_HMdcCal2ParAngleSim(void *p) {
      typedef ::HMdcCal2ParAngleSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCal2ParAngleSim(TBuffer &buf, void *obj) {
      ((::HMdcCal2ParAngleSim*)obj)->::HMdcCal2ParAngleSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCal2ParAngleSim

//______________________________________________________________________________
void HMdcCellEff::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCellEff.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b >> fMdc;
      comment.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HMdcCellEff::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCellEff::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b << fMdc;
      comment.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCellEff::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCellEff.
      TClass *R__cl = ::HMdcCellEff::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdc", &fMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "comment", &comment);
      R__insp.InspectMember(comment, "comment.");
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCellEff(void *p) {
      return  p ? new(p) ::HMdcCellEff : new ::HMdcCellEff;
   }
   static void *newArray_HMdcCellEff(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCellEff[nElements] : new ::HMdcCellEff[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCellEff(void *p) {
      delete ((::HMdcCellEff*)p);
   }
   static void deleteArray_HMdcCellEff(void *p) {
      delete [] ((::HMdcCellEff*)p);
   }
   static void destruct_HMdcCellEff(void *p) {
      typedef ::HMdcCellEff current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCellEff(TBuffer &buf, void *obj) {
      ((::HMdcCellEff*)obj)->::HMdcCellEff::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCellEff

//______________________________________________________________________________
void HMdcCellEffMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCellEffMod.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcCellEffMod::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCellEffMod::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCellEffMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCellEffMod.
      TClass *R__cl = ::HMdcCellEffMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCellEffMod(void *p) {
      return  p ? new(p) ::HMdcCellEffMod : new ::HMdcCellEffMod;
   }
   static void *newArray_HMdcCellEffMod(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCellEffMod[nElements] : new ::HMdcCellEffMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCellEffMod(void *p) {
      delete ((::HMdcCellEffMod*)p);
   }
   static void deleteArray_HMdcCellEffMod(void *p) {
      delete [] ((::HMdcCellEffMod*)p);
   }
   static void destruct_HMdcCellEffMod(void *p) {
      typedef ::HMdcCellEffMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCellEffMod(TBuffer &buf, void *obj) {
      ((::HMdcCellEffMod*)obj)->::HMdcCellEffMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCellEffMod

//______________________________________________________________________________
void HMdcCellEffAngle::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCellEffAngle.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> maxR;
      R__b >> slope;
      R__b.CheckByteCount(R__s, R__c, HMdcCellEffAngle::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCellEffAngle::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << maxR;
      R__b << slope;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCellEffAngle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCellEffAngle.
      TClass *R__cl = ::HMdcCellEffAngle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxR", &maxR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slope", &slope);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCellEffAngle(void *p) {
      return  p ? new(p) ::HMdcCellEffAngle : new ::HMdcCellEffAngle;
   }
   static void *newArray_HMdcCellEffAngle(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCellEffAngle[nElements] : new ::HMdcCellEffAngle[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCellEffAngle(void *p) {
      delete ((::HMdcCellEffAngle*)p);
   }
   static void deleteArray_HMdcCellEffAngle(void *p) {
      delete [] ((::HMdcCellEffAngle*)p);
   }
   static void destruct_HMdcCellEffAngle(void *p) {
      typedef ::HMdcCellEffAngle current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCellEffAngle(TBuffer &buf, void *obj) {
      ((::HMdcCellEffAngle*)obj)->::HMdcCellEffAngle::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCellEffAngle

//______________________________________________________________________________
void HMdcTdcThreshold::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTdcThreshold.
      TClass *R__cl = ::HMdcTdcThreshold::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "oraVersion", &oraVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRawStruct", &pRawStruct);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTdcThreshold(void *p) {
      return  p ? new(p) ::HMdcTdcThreshold : new ::HMdcTdcThreshold;
   }
   static void *newArray_HMdcTdcThreshold(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTdcThreshold[nElements] : new ::HMdcTdcThreshold[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTdcThreshold(void *p) {
      delete ((::HMdcTdcThreshold*)p);
   }
   static void deleteArray_HMdcTdcThreshold(void *p) {
      delete [] ((::HMdcTdcThreshold*)p);
   }
   static void destruct_HMdcTdcThreshold(void *p) {
      typedef ::HMdcTdcThreshold current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTdcThreshold(TBuffer &buf, void *obj) {
      ((::HMdcTdcThreshold*)obj)->::HMdcTdcThreshold::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTdcThreshold

//______________________________________________________________________________
void HMdcTdcThresholdSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTdcThresholdSec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcTdcThresholdSec::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTdcThresholdSec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTdcThresholdSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTdcThresholdSec.
      TClass *R__cl = ::HMdcTdcThresholdSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTdcThresholdSec(void *p) {
      return  p ? new(p) ::HMdcTdcThresholdSec : new ::HMdcTdcThresholdSec;
   }
   static void *newArray_HMdcTdcThresholdSec(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTdcThresholdSec[nElements] : new ::HMdcTdcThresholdSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTdcThresholdSec(void *p) {
      delete ((::HMdcTdcThresholdSec*)p);
   }
   static void deleteArray_HMdcTdcThresholdSec(void *p) {
      delete [] ((::HMdcTdcThresholdSec*)p);
   }
   static void destruct_HMdcTdcThresholdSec(void *p) {
      typedef ::HMdcTdcThresholdSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTdcThresholdSec(TBuffer &buf, void *obj) {
      ((::HMdcTdcThresholdSec*)obj)->::HMdcTdcThresholdSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTdcThresholdSec

//______________________________________________________________________________
void HMdcTdcThresholdMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTdcThresholdMod.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcTdcThresholdMod::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTdcThresholdMod::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTdcThresholdMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTdcThresholdMod.
      TClass *R__cl = ::HMdcTdcThresholdMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTdcThresholdMod(void *p) {
      return  p ? new(p) ::HMdcTdcThresholdMod : new ::HMdcTdcThresholdMod;
   }
   static void *newArray_HMdcTdcThresholdMod(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTdcThresholdMod[nElements] : new ::HMdcTdcThresholdMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTdcThresholdMod(void *p) {
      delete ((::HMdcTdcThresholdMod*)p);
   }
   static void deleteArray_HMdcTdcThresholdMod(void *p) {
      delete [] ((::HMdcTdcThresholdMod*)p);
   }
   static void destruct_HMdcTdcThresholdMod(void *p) {
      typedef ::HMdcTdcThresholdMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTdcThresholdMod(TBuffer &buf, void *obj) {
      ((::HMdcTdcThresholdMod*)obj)->::HMdcTdcThresholdMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTdcThresholdMod

//______________________________________________________________________________
void HMdcTdcThresholdMbo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTdcThresholdMbo.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcTdcThresholdMbo::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTdcThresholdMbo::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTdcThresholdMbo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTdcThresholdMbo.
      TClass *R__cl = ::HMdcTdcThresholdMbo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTdcThresholdMbo(void *p) {
      return  p ? new(p) ::HMdcTdcThresholdMbo : new ::HMdcTdcThresholdMbo;
   }
   static void *newArray_HMdcTdcThresholdMbo(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTdcThresholdMbo[nElements] : new ::HMdcTdcThresholdMbo[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTdcThresholdMbo(void *p) {
      delete ((::HMdcTdcThresholdMbo*)p);
   }
   static void deleteArray_HMdcTdcThresholdMbo(void *p) {
      delete [] ((::HMdcTdcThresholdMbo*)p);
   }
   static void destruct_HMdcTdcThresholdMbo(void *p) {
      typedef ::HMdcTdcThresholdMbo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTdcThresholdMbo(TBuffer &buf, void *obj) {
      ((::HMdcTdcThresholdMbo*)obj)->::HMdcTdcThresholdMbo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTdcThresholdMbo

//______________________________________________________________________________
void HMdcTdcThresholdDbo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTdcThresholdDbo.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> threshold;
      R__b.CheckByteCount(R__s, R__c, HMdcTdcThresholdDbo::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTdcThresholdDbo::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << threshold;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTdcThresholdDbo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTdcThresholdDbo.
      TClass *R__cl = ::HMdcTdcThresholdDbo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "threshold", &threshold);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTdcThresholdDbo(void *p) {
      return  p ? new(p) ::HMdcTdcThresholdDbo : new ::HMdcTdcThresholdDbo;
   }
   static void *newArray_HMdcTdcThresholdDbo(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTdcThresholdDbo[nElements] : new ::HMdcTdcThresholdDbo[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTdcThresholdDbo(void *p) {
      delete ((::HMdcTdcThresholdDbo*)p);
   }
   static void deleteArray_HMdcTdcThresholdDbo(void *p) {
      delete [] ((::HMdcTdcThresholdDbo*)p);
   }
   static void destruct_HMdcTdcThresholdDbo(void *p) {
      typedef ::HMdcTdcThresholdDbo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTdcThresholdDbo(TBuffer &buf, void *obj) {
      ((::HMdcTdcThresholdDbo*)obj)->::HMdcTdcThresholdDbo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTdcThresholdDbo

//______________________________________________________________________________
void HMdcTimeCut::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTimeCut.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      fSecs.Streamer(R__b);
      R__b >> isContainer;
      R__b >> fMdc;
      R__b >> isused;
      R__b.CheckByteCount(R__s, R__c, HMdcTimeCut::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTimeCut::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      fSecs.Streamer(R__b);
      R__b << isContainer;
      R__b << fMdc;
      R__b << isused;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTimeCut::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTimeCut.
      TClass *R__cl = ::HMdcTimeCut::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSecs", &fSecs);
      R__insp.InspectMember(fSecs, "fSecs.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isContainer", &isContainer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdc", &fMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isused", &isused);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTimeCut(void *p) {
      return  p ? new(p) ::HMdcTimeCut : new ::HMdcTimeCut;
   }
   static void *newArray_HMdcTimeCut(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTimeCut[nElements] : new ::HMdcTimeCut[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTimeCut(void *p) {
      delete ((::HMdcTimeCut*)p);
   }
   static void deleteArray_HMdcTimeCut(void *p) {
      delete [] ((::HMdcTimeCut*)p);
   }
   static void destruct_HMdcTimeCut(void *p) {
      typedef ::HMdcTimeCut current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTimeCut(TBuffer &buf, void *obj) {
      ((::HMdcTimeCut*)obj)->::HMdcTimeCut::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTimeCut

//______________________________________________________________________________
void HMdcTimeCutSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTimeCutSec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      fMod.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HMdcTimeCutSec::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTimeCutSec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      fMod.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTimeCutSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTimeCutSec.
      TClass *R__cl = ::HMdcTimeCutSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMod", &fMod);
      R__insp.InspectMember(fMod, "fMod.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTimeCutSec(void *p) {
      return  p ? new(p) ::HMdcTimeCutSec : new ::HMdcTimeCutSec;
   }
   static void *newArray_HMdcTimeCutSec(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTimeCutSec[nElements] : new ::HMdcTimeCutSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTimeCutSec(void *p) {
      delete ((::HMdcTimeCutSec*)p);
   }
   static void deleteArray_HMdcTimeCutSec(void *p) {
      delete [] ((::HMdcTimeCutSec*)p);
   }
   static void destruct_HMdcTimeCutSec(void *p) {
      typedef ::HMdcTimeCutSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTimeCutSec(TBuffer &buf, void *obj) {
      ((::HMdcTimeCutSec*)obj)->::HMdcTimeCutSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTimeCutSec

//______________________________________________________________________________
void HMdcTimeCutMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTimeCutMod.
      TClass *R__cl = ::HMdcTimeCutMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutT1L", &cutT1L);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutT1R", &cutT1R);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutT2L", &cutT2L);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutT2R", &cutT2R);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutLeft", &cutLeft);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutRight", &cutRight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutBumpT1L", &cutBumpT1L);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutBumpT1R", &cutBumpT1R);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutBumpTotL", &cutBumpTotL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutBumpTotR", &cutBumpTotR);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTimeCutMod(void *p) {
      return  p ? new(p) ::HMdcTimeCutMod : new ::HMdcTimeCutMod;
   }
   static void *newArray_HMdcTimeCutMod(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTimeCutMod[nElements] : new ::HMdcTimeCutMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTimeCutMod(void *p) {
      delete ((::HMdcTimeCutMod*)p);
   }
   static void deleteArray_HMdcTimeCutMod(void *p) {
      delete [] ((::HMdcTimeCutMod*)p);
   }
   static void destruct_HMdcTimeCutMod(void *p) {
      typedef ::HMdcTimeCutMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTimeCutMod(TBuffer &buf, void *obj) {
      ((::HMdcTimeCutMod*)obj)->::HMdcTimeCutMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTimeCutMod

//______________________________________________________________________________
void HMdcCutStat::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCutStat.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      fSecs.Streamer(R__b);
      R__b >> fMdc;
      R__b.CheckByteCount(R__s, R__c, HMdcCutStat::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCutStat::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      fSecs.Streamer(R__b);
      R__b << fMdc;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCutStat::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCutStat.
      TClass *R__cl = ::HMdcCutStat::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSecs", &fSecs);
      R__insp.InspectMember(fSecs, "fSecs.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdc", &fMdc);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCutStat(TBuffer &buf, void *obj) {
      ((::HMdcCutStat*)obj)->::HMdcCutStat::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCutStat

//______________________________________________________________________________
void HMdcCutStatSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCutStatSec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      fMod.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HMdcCutStatSec::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCutStatSec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      fMod.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCutStatSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCutStatSec.
      TClass *R__cl = ::HMdcCutStatSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMod", &fMod);
      R__insp.InspectMember(fMod, "fMod.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCutStatSec(void *p) {
      return  p ? new(p) ::HMdcCutStatSec : new ::HMdcCutStatSec;
   }
   static void *newArray_HMdcCutStatSec(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCutStatSec[nElements] : new ::HMdcCutStatSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCutStatSec(void *p) {
      delete ((::HMdcCutStatSec*)p);
   }
   static void deleteArray_HMdcCutStatSec(void *p) {
      delete [] ((::HMdcCutStatSec*)p);
   }
   static void destruct_HMdcCutStatSec(void *p) {
      typedef ::HMdcCutStatSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCutStatSec(TBuffer &buf, void *obj) {
      ((::HMdcCutStatSec*)obj)->::HMdcCutStatSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCutStatSec

//______________________________________________________________________________
void HMdcCutStatMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCutStatMod.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> Calibrater1cutT1;
      R__b >> Calibrater1cutT2;
      R__b >> Calibrater1cutT12;
      R__b >> Calibrater1cutWire;
      R__b >> Calibrater1cutT1T12;
      R__b >> Calibrater1cutBump;
      R__b >> Calibrater1All;
      R__b >> Calibrater1cutAll;
      R__b.CheckByteCount(R__s, R__c, HMdcCutStatMod::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCutStatMod::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << Calibrater1cutT1;
      R__b << Calibrater1cutT2;
      R__b << Calibrater1cutT12;
      R__b << Calibrater1cutWire;
      R__b << Calibrater1cutT1T12;
      R__b << Calibrater1cutBump;
      R__b << Calibrater1All;
      R__b << Calibrater1cutAll;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCutStatMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCutStatMod.
      TClass *R__cl = ::HMdcCutStatMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Calibrater1cutT1", &Calibrater1cutT1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Calibrater1cutT2", &Calibrater1cutT2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Calibrater1cutT12", &Calibrater1cutT12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Calibrater1cutWire", &Calibrater1cutWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Calibrater1cutT1T12", &Calibrater1cutT1T12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Calibrater1cutBump", &Calibrater1cutBump);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Calibrater1All", &Calibrater1All);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Calibrater1cutAll", &Calibrater1cutAll);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCutStatMod(void *p) {
      return  p ? new(p) ::HMdcCutStatMod : new ::HMdcCutStatMod;
   }
   static void *newArray_HMdcCutStatMod(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCutStatMod[nElements] : new ::HMdcCutStatMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCutStatMod(void *p) {
      delete ((::HMdcCutStatMod*)p);
   }
   static void deleteArray_HMdcCutStatMod(void *p) {
      delete [] ((::HMdcCutStatMod*)p);
   }
   static void destruct_HMdcCutStatMod(void *p) {
      typedef ::HMdcCutStatMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCutStatMod(TBuffer &buf, void *obj) {
      ((::HMdcCutStatMod*)obj)->::HMdcCutStatMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCutStatMod

//______________________________________________________________________________
void HMdcSetup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcSetup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> digiset;
      R__b >> cal1set;
      R__b >> trackfinderset;
      R__b >> clustertohitset;
      R__b >> fitterset;
      R__b >> commonset;
      R__b.CheckByteCount(R__s, R__c, HMdcSetup::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcSetup::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << digiset;
      R__b << cal1set;
      R__b << trackfinderset;
      R__b << clustertohitset;
      R__b << fitterset;
      R__b << commonset;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcSetup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcSetup.
      TClass *R__cl = ::HMdcSetup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*digiset", &digiset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cal1set", &cal1set);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*trackfinderset", &trackfinderset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*clustertohitset", &clustertohitset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fitterset", &fitterset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*commonset", &commonset);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcSetup(void *p) {
      return  p ? new(p) ::HMdcSetup : new ::HMdcSetup;
   }
   static void *newArray_HMdcSetup(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcSetup[nElements] : new ::HMdcSetup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcSetup(void *p) {
      delete ((::HMdcSetup*)p);
   }
   static void deleteArray_HMdcSetup(void *p) {
      delete [] ((::HMdcSetup*)p);
   }
   static void destruct_HMdcSetup(void *p) {
      typedef ::HMdcSetup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcSetup(TBuffer &buf, void *obj) {
      ((::HMdcSetup*)obj)->::HMdcSetup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcSetup

//______________________________________________________________________________
void HMdcDigitizerSetup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcDigitizerSetup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> setup;
      R__b >> tdcModeDigi;
      R__b >> NtupleDigi;
      R__b >> useTofDigi;
      R__b >> useErrorDigi;
      R__b >> useWireOffsetDigi;
      R__b >> useWireStatDigi;
      R__b >> embeddingModeDigi;
      R__b >> useTimeCutsDigi;
      R__b >> offsetsOnDigi;
      R__b >> cellEffOnDigi;
      R__b >> noiseOnDigi;
      offsetsDigi.Streamer(R__b);
      cellEffDigi.Streamer(R__b);
      R__b >> noiseModeDigi;
      noiseLevelDigi.Streamer(R__b);
      noiseRangeLoDigi.Streamer(R__b);
      noiseRangeHiDigi.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HMdcDigitizerSetup::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcDigitizerSetup::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << setup;
      R__b << tdcModeDigi;
      R__b << NtupleDigi;
      R__b << useTofDigi;
      R__b << useErrorDigi;
      R__b << useWireOffsetDigi;
      R__b << useWireStatDigi;
      R__b << embeddingModeDigi;
      R__b << useTimeCutsDigi;
      R__b << offsetsOnDigi;
      R__b << cellEffOnDigi;
      R__b << noiseOnDigi;
      offsetsDigi.Streamer(R__b);
      cellEffDigi.Streamer(R__b);
      R__b << noiseModeDigi;
      noiseLevelDigi.Streamer(R__b);
      noiseRangeLoDigi.Streamer(R__b);
      noiseRangeHiDigi.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcDigitizerSetup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcDigitizerSetup.
      TClass *R__cl = ::HMdcDigitizerSetup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcModeDigi", &tdcModeDigi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NtupleDigi", &NtupleDigi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useTofDigi", &useTofDigi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useErrorDigi", &useErrorDigi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useWireOffsetDigi", &useWireOffsetDigi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useWireStatDigi", &useWireStatDigi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "embeddingModeDigi", &embeddingModeDigi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useTimeCutsDigi", &useTimeCutsDigi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetsOnDigi", &offsetsOnDigi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellEffOnDigi", &cellEffOnDigi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noiseOnDigi", &noiseOnDigi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetsDigi", &offsetsDigi);
      R__insp.InspectMember(offsetsDigi, "offsetsDigi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellEffDigi", &cellEffDigi);
      R__insp.InspectMember(cellEffDigi, "cellEffDigi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noiseModeDigi", &noiseModeDigi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noiseLevelDigi", &noiseLevelDigi);
      R__insp.InspectMember(noiseLevelDigi, "noiseLevelDigi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noiseRangeLoDigi", &noiseRangeLoDigi);
      R__insp.InspectMember(noiseRangeLoDigi, "noiseRangeLoDigi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noiseRangeHiDigi", &noiseRangeHiDigi);
      R__insp.InspectMember(noiseRangeHiDigi, "noiseRangeHiDigi.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcDigitizerSetup(void *p) {
      return  p ? new(p) ::HMdcDigitizerSetup : new ::HMdcDigitizerSetup;
   }
   static void *newArray_HMdcDigitizerSetup(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcDigitizerSetup[nElements] : new ::HMdcDigitizerSetup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcDigitizerSetup(void *p) {
      delete ((::HMdcDigitizerSetup*)p);
   }
   static void deleteArray_HMdcDigitizerSetup(void *p) {
      delete [] ((::HMdcDigitizerSetup*)p);
   }
   static void destruct_HMdcDigitizerSetup(void *p) {
      typedef ::HMdcDigitizerSetup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcDigitizerSetup(TBuffer &buf, void *obj) {
      ((::HMdcDigitizerSetup*)obj)->::HMdcDigitizerSetup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcDigitizerSetup

//______________________________________________________________________________
void HMdcCalibrater1Setup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCalibrater1Setup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> setup;
      R__b >> ModeFlagCal1;
      R__b >> TimeCutFlagCal1;
      R__b.CheckByteCount(R__s, R__c, HMdcCalibrater1Setup::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCalibrater1Setup::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << setup;
      R__b << ModeFlagCal1;
      R__b << TimeCutFlagCal1;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCalibrater1Setup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCalibrater1Setup.
      TClass *R__cl = ::HMdcCalibrater1Setup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ModeFlagCal1", &ModeFlagCal1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TimeCutFlagCal1", &TimeCutFlagCal1);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCalibrater1Setup(void *p) {
      return  p ? new(p) ::HMdcCalibrater1Setup : new ::HMdcCalibrater1Setup;
   }
   static void *newArray_HMdcCalibrater1Setup(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCalibrater1Setup[nElements] : new ::HMdcCalibrater1Setup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCalibrater1Setup(void *p) {
      delete ((::HMdcCalibrater1Setup*)p);
   }
   static void deleteArray_HMdcCalibrater1Setup(void *p) {
      delete [] ((::HMdcCalibrater1Setup*)p);
   }
   static void destruct_HMdcCalibrater1Setup(void *p) {
      typedef ::HMdcCalibrater1Setup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCalibrater1Setup(TBuffer &buf, void *obj) {
      ((::HMdcCalibrater1Setup*)obj)->::HMdcCalibrater1Setup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCalibrater1Setup

//______________________________________________________________________________
void HMdcTrackFinderSetup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackFinderSetup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> setup;
      R__b >> isCoilOff;
      R__b >> typeClustFinder;
      nLayers.Streamer(R__b);
      nLevel.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HMdcTrackFinderSetup::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTrackFinderSetup::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << setup;
      R__b << isCoilOff;
      R__b << typeClustFinder;
      nLayers.Streamer(R__b);
      nLevel.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTrackFinderSetup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackFinderSetup.
      TClass *R__cl = ::HMdcTrackFinderSetup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCoilOff", &isCoilOff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "typeClustFinder", &typeClustFinder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayers", &nLayers);
      R__insp.InspectMember(nLayers, "nLayers.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLevel", &nLevel);
      R__insp.InspectMember(nLevel, "nLevel.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrackFinderSetup(void *p) {
      return  p ? new(p) ::HMdcTrackFinderSetup : new ::HMdcTrackFinderSetup;
   }
   static void *newArray_HMdcTrackFinderSetup(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrackFinderSetup[nElements] : new ::HMdcTrackFinderSetup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrackFinderSetup(void *p) {
      delete ((::HMdcTrackFinderSetup*)p);
   }
   static void deleteArray_HMdcTrackFinderSetup(void *p) {
      delete [] ((::HMdcTrackFinderSetup*)p);
   }
   static void destruct_HMdcTrackFinderSetup(void *p) {
      typedef ::HMdcTrackFinderSetup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackFinderSetup(TBuffer &buf, void *obj) {
      ((::HMdcTrackFinderSetup*)obj)->::HMdcTrackFinderSetup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackFinderSetup

//______________________________________________________________________________
void HMdcClusterToHitSetup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcClusterToHitSetup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> setup;
      R__b >> mdcForSeg1;
      R__b >> mdcForSeg2;
      R__b.CheckByteCount(R__s, R__c, HMdcClusterToHitSetup::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcClusterToHitSetup::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << setup;
      R__b << mdcForSeg1;
      R__b << mdcForSeg2;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcClusterToHitSetup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcClusterToHitSetup.
      TClass *R__cl = ::HMdcClusterToHitSetup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcForSeg1", &mdcForSeg1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcForSeg2", &mdcForSeg2);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcClusterToHitSetup(void *p) {
      return  p ? new(p) ::HMdcClusterToHitSetup : new ::HMdcClusterToHitSetup;
   }
   static void *newArray_HMdcClusterToHitSetup(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcClusterToHitSetup[nElements] : new ::HMdcClusterToHitSetup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcClusterToHitSetup(void *p) {
      delete ((::HMdcClusterToHitSetup*)p);
   }
   static void deleteArray_HMdcClusterToHitSetup(void *p) {
      delete [] ((::HMdcClusterToHitSetup*)p);
   }
   static void destruct_HMdcClusterToHitSetup(void *p) {
      typedef ::HMdcClusterToHitSetup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcClusterToHitSetup(TBuffer &buf, void *obj) {
      ((::HMdcClusterToHitSetup*)obj)->::HMdcClusterToHitSetup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcClusterToHitSetup

//______________________________________________________________________________
void HMdc12FitSetup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdc12FitSetup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> setup;
      R__b >> fitauthor;
      R__b >> fitVersion;
      R__b >> fitIndep;
      R__b >> fitNTuple;
      R__b >> fitPrint;
      R__b.CheckByteCount(R__s, R__c, HMdc12FitSetup::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdc12FitSetup::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << setup;
      R__b << fitauthor;
      R__b << fitVersion;
      R__b << fitIndep;
      R__b << fitNTuple;
      R__b << fitPrint;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdc12FitSetup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdc12FitSetup.
      TClass *R__cl = ::HMdc12FitSetup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitauthor", &fitauthor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitVersion", &fitVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitIndep", &fitIndep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitNTuple", &fitNTuple);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitPrint", &fitPrint);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdc12FitSetup(void *p) {
      return  p ? new(p) ::HMdc12FitSetup : new ::HMdc12FitSetup;
   }
   static void *newArray_HMdc12FitSetup(Long_t nElements, void *p) {
      return p ? new(p) ::HMdc12FitSetup[nElements] : new ::HMdc12FitSetup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdc12FitSetup(void *p) {
      delete ((::HMdc12FitSetup*)p);
   }
   static void deleteArray_HMdc12FitSetup(void *p) {
      delete [] ((::HMdc12FitSetup*)p);
   }
   static void destruct_HMdc12FitSetup(void *p) {
      typedef ::HMdc12FitSetup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdc12FitSetup(TBuffer &buf, void *obj) {
      ((::HMdc12FitSetup*)obj)->::HMdc12FitSetup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdc12FitSetup

//______________________________________________________________________________
void HMdcCommonSetup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCommonSetup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> setup;
      R__b >> isSimulation;
      R__b >> analysisLevel;
      R__b >> tracker;
      R__b.CheckByteCount(R__s, R__c, HMdcCommonSetup::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCommonSetup::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << setup;
      R__b << isSimulation;
      R__b << analysisLevel;
      R__b << tracker;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCommonSetup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCommonSetup.
      TClass *R__cl = ::HMdcCommonSetup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*setup", &setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSimulation", &isSimulation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "analysisLevel", &analysisLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tracker", &tracker);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCommonSetup(void *p) {
      return  p ? new(p) ::HMdcCommonSetup : new ::HMdcCommonSetup;
   }
   static void *newArray_HMdcCommonSetup(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCommonSetup[nElements] : new ::HMdcCommonSetup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCommonSetup(void *p) {
      delete ((::HMdcCommonSetup*)p);
   }
   static void deleteArray_HMdcCommonSetup(void *p) {
      delete [] ((::HMdcCommonSetup*)p);
   }
   static void destruct_HMdcCommonSetup(void *p) {
      typedef ::HMdcCommonSetup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCommonSetup(TBuffer &buf, void *obj) {
      ((::HMdcCommonSetup*)obj)->::HMdcCommonSetup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCommonSetup

//______________________________________________________________________________
void HMdcVertexFind::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcVertexFind.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HReconstructor::Streamer(R__b);
      R__b >> fTukeyConst;
      R__b >> fMaxIterations;
      R__b >> fUsingTukey;
      R__b >> fDebugMode;
      R__b >> fEpsilon;
      R__b.CheckByteCount(R__s, R__c, HMdcVertexFind::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcVertexFind::IsA(), kTRUE);
      HReconstructor::Streamer(R__b);
      R__b << fTukeyConst;
      R__b << fMaxIterations;
      R__b << fUsingTukey;
      R__b << fDebugMode;
      R__b << fEpsilon;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcVertexFind::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcVertexFind.
      TClass *R__cl = ::HMdcVertexFind::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFitter", &fFitter);
      R__insp.InspectMember(fFitter, "fFitter.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fControl", &fControl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPos", &fPos);
      R__insp.InspectMember(fPos, "fPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAlpha", &fAlpha);
      R__insp.InspectMember(fAlpha, "fAlpha.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInput", &fInput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeometry", &fGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSpecGeometry", &fSpecGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIter", &fIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTukeyConst", &fTukeyConst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxIterations", &fMaxIterations);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsingTukey", &fUsingTukey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDebugMode", &fDebugMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEpsilon", &fEpsilon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fminZ", &fminZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxZ", &fmaxZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxR", &fmaxR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fseg0Chi2Cut", &fseg0Chi2Cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fminReqTrack", &fminReqTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fminWindow", &fminWindow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProgressiveTukey", &fProgressiveTukey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcallExecuteManual", &fcallExecuteManual);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputMode", &fInputMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isEmbedding", &isEmbedding);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*geantKineIter", &geantKineIter);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcVertexFind(void *p) {
      return  p ? new(p) ::HMdcVertexFind : new ::HMdcVertexFind;
   }
   static void *newArray_HMdcVertexFind(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcVertexFind[nElements] : new ::HMdcVertexFind[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcVertexFind(void *p) {
      delete ((::HMdcVertexFind*)p);
   }
   static void deleteArray_HMdcVertexFind(void *p) {
      delete [] ((::HMdcVertexFind*)p);
   }
   static void destruct_HMdcVertexFind(void *p) {
      typedef ::HMdcVertexFind current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcVertexFind(TBuffer &buf, void *obj) {
      ((::HMdcVertexFind*)obj)->::HMdcVertexFind::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcVertexFind

//______________________________________________________________________________
void HMdcLookupGeom::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLookupGeom.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcLookupGeom::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcLookupGeom::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcLookupGeom::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookupGeom.
      TClass *R__cl = ::HMdcLookupGeom::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLookupGeom(void *p) {
      return  p ? new(p) ::HMdcLookupGeom : new ::HMdcLookupGeom;
   }
   static void *newArray_HMdcLookupGeom(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLookupGeom[nElements] : new ::HMdcLookupGeom[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLookupGeom(void *p) {
      delete ((::HMdcLookupGeom*)p);
   }
   static void deleteArray_HMdcLookupGeom(void *p) {
      delete [] ((::HMdcLookupGeom*)p);
   }
   static void destruct_HMdcLookupGeom(void *p) {
      typedef ::HMdcLookupGeom current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookupGeom(TBuffer &buf, void *obj) {
      ((::HMdcLookupGeom*)obj)->::HMdcLookupGeom::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookupGeom

//______________________________________________________________________________
void HMdcLookupGSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLookupGSec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b >> sector;
      R__b.CheckByteCount(R__s, R__c, HMdcLookupGSec::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcLookupGSec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b << sector;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcLookupGSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookupGSec.
      TClass *R__cl = ::HMdcLookupGSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLookupGSec(void *p) {
      return  p ? new(p) ::HMdcLookupGSec : new ::HMdcLookupGSec;
   }
   static void *newArray_HMdcLookupGSec(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLookupGSec[nElements] : new ::HMdcLookupGSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLookupGSec(void *p) {
      delete ((::HMdcLookupGSec*)p);
   }
   static void deleteArray_HMdcLookupGSec(void *p) {
      delete [] ((::HMdcLookupGSec*)p);
   }
   static void destruct_HMdcLookupGSec(void *p) {
      typedef ::HMdcLookupGSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookupGSec(TBuffer &buf, void *obj) {
      ((::HMdcLookupGSec*)obj)->::HMdcLookupGSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookupGSec

//______________________________________________________________________________
void HMdcLookupGMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLookupGMod.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcLookupGMod::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcLookupGMod::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcLookupGMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookupGMod.
      TClass *R__cl = ::HMdcLookupGMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLookupGMod(void *p) {
      return  p ? new(p) ::HMdcLookupGMod : new ::HMdcLookupGMod;
   }
   static void *newArray_HMdcLookupGMod(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLookupGMod[nElements] : new ::HMdcLookupGMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLookupGMod(void *p) {
      delete ((::HMdcLookupGMod*)p);
   }
   static void deleteArray_HMdcLookupGMod(void *p) {
      delete [] ((::HMdcLookupGMod*)p);
   }
   static void destruct_HMdcLookupGMod(void *p) {
      typedef ::HMdcLookupGMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookupGMod(TBuffer &buf, void *obj) {
      ((::HMdcLookupGMod*)obj)->::HMdcLookupGMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookupGMod

//______________________________________________________________________________
void HMdcLookupMoth::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLookupMoth.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcLookupMoth::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcLookupMoth::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcLookupMoth::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookupMoth.
      TClass *R__cl = ::HMdcLookupMoth::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLookupMoth(void *p) {
      return  p ? new(p) ::HMdcLookupMoth : new ::HMdcLookupMoth;
   }
   static void *newArray_HMdcLookupMoth(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLookupMoth[nElements] : new ::HMdcLookupMoth[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLookupMoth(void *p) {
      delete ((::HMdcLookupMoth*)p);
   }
   static void deleteArray_HMdcLookupMoth(void *p) {
      delete [] ((::HMdcLookupMoth*)p);
   }
   static void destruct_HMdcLookupMoth(void *p) {
      typedef ::HMdcLookupMoth current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookupMoth(TBuffer &buf, void *obj) {
      ((::HMdcLookupMoth*)obj)->::HMdcLookupMoth::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookupMoth

//______________________________________________________________________________
void HMdcLookupChan::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookupChan.
      TClass *R__cl = ::HMdcLookupChan::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayer", &nLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCell", &nCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "readoutSide", &readoutSide);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLookupChan(void *p) {
      return  p ? new(p) ::HMdcLookupChan : new ::HMdcLookupChan;
   }
   static void *newArray_HMdcLookupChan(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLookupChan[nElements] : new ::HMdcLookupChan[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLookupChan(void *p) {
      delete ((::HMdcLookupChan*)p);
   }
   static void deleteArray_HMdcLookupChan(void *p) {
      delete [] ((::HMdcLookupChan*)p);
   }
   static void destruct_HMdcLookupChan(void *p) {
      typedef ::HMdcLookupChan current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookupChan(TBuffer &buf, void *obj) {
      ((::HMdcLookupChan*)obj)->::HMdcLookupChan::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookupChan

//______________________________________________________________________________
void HMdcLookupRaw::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLookupRaw.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcLookupRaw::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcLookupRaw::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcLookupRaw::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookupRaw.
      TClass *R__cl = ::HMdcLookupRaw::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLookupRaw(void *p) {
      return  p ? new(p) ::HMdcLookupRaw : new ::HMdcLookupRaw;
   }
   static void *newArray_HMdcLookupRaw(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLookupRaw[nElements] : new ::HMdcLookupRaw[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLookupRaw(void *p) {
      delete ((::HMdcLookupRaw*)p);
   }
   static void deleteArray_HMdcLookupRaw(void *p) {
      delete [] ((::HMdcLookupRaw*)p);
   }
   static void destruct_HMdcLookupRaw(void *p) {
      typedef ::HMdcLookupRaw current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookupRaw(TBuffer &buf, void *obj) {
      ((::HMdcLookupRaw*)obj)->::HMdcLookupRaw::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookupRaw

//______________________________________________________________________________
void HMdcLookupRSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLookupRSec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b >> sector;
      R__b.CheckByteCount(R__s, R__c, HMdcLookupRSec::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcLookupRSec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b << sector;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcLookupRSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookupRSec.
      TClass *R__cl = ::HMdcLookupRSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLookupRSec(void *p) {
      return  p ? new(p) ::HMdcLookupRSec : new ::HMdcLookupRSec;
   }
   static void *newArray_HMdcLookupRSec(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLookupRSec[nElements] : new ::HMdcLookupRSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLookupRSec(void *p) {
      delete ((::HMdcLookupRSec*)p);
   }
   static void deleteArray_HMdcLookupRSec(void *p) {
      delete [] ((::HMdcLookupRSec*)p);
   }
   static void destruct_HMdcLookupRSec(void *p) {
      typedef ::HMdcLookupRSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookupRSec(TBuffer &buf, void *obj) {
      ((::HMdcLookupRSec*)obj)->::HMdcLookupRSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookupRSec

//______________________________________________________________________________
void HMdcLookupRMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLookupRMod.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcLookupRMod::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcLookupRMod::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcLookupRMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookupRMod.
      TClass *R__cl = ::HMdcLookupRMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLookupRMod(void *p) {
      return  p ? new(p) ::HMdcLookupRMod : new ::HMdcLookupRMod;
   }
   static void *newArray_HMdcLookupRMod(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLookupRMod[nElements] : new ::HMdcLookupRMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLookupRMod(void *p) {
      delete ((::HMdcLookupRMod*)p);
   }
   static void deleteArray_HMdcLookupRMod(void *p) {
      delete [] ((::HMdcLookupRMod*)p);
   }
   static void destruct_HMdcLookupRMod(void *p) {
      typedef ::HMdcLookupRMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookupRMod(TBuffer &buf, void *obj) {
      ((::HMdcLookupRMod*)obj)->::HMdcLookupRMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookupRMod

//______________________________________________________________________________
void HMdcLookupLayer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLookupLayer.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcLookupLayer::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcLookupLayer::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcLookupLayer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookupLayer.
      TClass *R__cl = ::HMdcLookupLayer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLookupLayer(void *p) {
      return  p ? new(p) ::HMdcLookupLayer : new ::HMdcLookupLayer;
   }
   static void *newArray_HMdcLookupLayer(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLookupLayer[nElements] : new ::HMdcLookupLayer[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLookupLayer(void *p) {
      delete ((::HMdcLookupLayer*)p);
   }
   static void deleteArray_HMdcLookupLayer(void *p) {
      delete [] ((::HMdcLookupLayer*)p);
   }
   static void destruct_HMdcLookupLayer(void *p) {
      typedef ::HMdcLookupLayer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookupLayer(TBuffer &buf, void *obj) {
      ((::HMdcLookupLayer*)obj)->::HMdcLookupLayer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookupLayer

//______________________________________________________________________________
void HMdcLookupCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLookupCell.
      TClass *R__cl = ::HMdcLookupCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMoth", &nMoth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nChan", &nChan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "readoutSide", &readoutSide);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLookupCell(void *p) {
      return  p ? new(p) ::HMdcLookupCell : new ::HMdcLookupCell;
   }
   static void *newArray_HMdcLookupCell(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLookupCell[nElements] : new ::HMdcLookupCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLookupCell(void *p) {
      delete ((::HMdcLookupCell*)p);
   }
   static void deleteArray_HMdcLookupCell(void *p) {
      delete [] ((::HMdcLookupCell*)p);
   }
   static void destruct_HMdcLookupCell(void *p) {
      typedef ::HMdcLookupCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLookupCell(TBuffer &buf, void *obj) {
      ((::HMdcLookupCell*)obj)->::HMdcLookupCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLookupCell

//______________________________________________________________________________
void HMdcLayerGeomPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLayerGeomPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcLayerGeomPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcLayerGeomPar::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcLayerGeomPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLayerGeomPar.
      TClass *R__cl = ::HMdcLayerGeomPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ntuple", &ntuple);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLayerGeomPar(void *p) {
      return  p ? new(p) ::HMdcLayerGeomPar : new ::HMdcLayerGeomPar;
   }
   static void *newArray_HMdcLayerGeomPar(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLayerGeomPar[nElements] : new ::HMdcLayerGeomPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLayerGeomPar(void *p) {
      delete ((::HMdcLayerGeomPar*)p);
   }
   static void deleteArray_HMdcLayerGeomPar(void *p) {
      delete [] ((::HMdcLayerGeomPar*)p);
   }
   static void destruct_HMdcLayerGeomPar(void *p) {
      typedef ::HMdcLayerGeomPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLayerGeomPar(TBuffer &buf, void *obj) {
      ((::HMdcLayerGeomPar*)obj)->::HMdcLayerGeomPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLayerGeomPar

//______________________________________________________________________________
void HMdcLayerGeomParSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLayerGeomParSec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcLayerGeomParSec::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcLayerGeomParSec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcLayerGeomParSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLayerGeomParSec.
      TClass *R__cl = ::HMdcLayerGeomParSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLayerGeomParSec(void *p) {
      return  p ? new(p) ::HMdcLayerGeomParSec : new ::HMdcLayerGeomParSec;
   }
   static void *newArray_HMdcLayerGeomParSec(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLayerGeomParSec[nElements] : new ::HMdcLayerGeomParSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLayerGeomParSec(void *p) {
      delete ((::HMdcLayerGeomParSec*)p);
   }
   static void deleteArray_HMdcLayerGeomParSec(void *p) {
      delete [] ((::HMdcLayerGeomParSec*)p);
   }
   static void destruct_HMdcLayerGeomParSec(void *p) {
      typedef ::HMdcLayerGeomParSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLayerGeomParSec(TBuffer &buf, void *obj) {
      ((::HMdcLayerGeomParSec*)obj)->::HMdcLayerGeomParSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLayerGeomParSec

//______________________________________________________________________________
void HMdcLayerGeomParMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLayerGeomParMod.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcLayerGeomParMod::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcLayerGeomParMod::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcLayerGeomParMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLayerGeomParMod.
      TClass *R__cl = ::HMdcLayerGeomParMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLayerGeomParMod(void *p) {
      return  p ? new(p) ::HMdcLayerGeomParMod : new ::HMdcLayerGeomParMod;
   }
   static void *newArray_HMdcLayerGeomParMod(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLayerGeomParMod[nElements] : new ::HMdcLayerGeomParMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLayerGeomParMod(void *p) {
      delete ((::HMdcLayerGeomParMod*)p);
   }
   static void deleteArray_HMdcLayerGeomParMod(void *p) {
      delete [] ((::HMdcLayerGeomParMod*)p);
   }
   static void destruct_HMdcLayerGeomParMod(void *p) {
      typedef ::HMdcLayerGeomParMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLayerGeomParMod(TBuffer &buf, void *obj) {
      ((::HMdcLayerGeomParMod*)obj)->::HMdcLayerGeomParMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLayerGeomParMod

//______________________________________________________________________________
void HMdcLayerGeomParLay::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLayerGeomParLay.
      TClass *R__cl = ::HMdcLayerGeomParLay::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pitch", &pitch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numWires", &numWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "catDist", &catDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireOrient", &wireOrient);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centralWireNr", &centralWireNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cathodeWireThickness", &cathodeWireThickness);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layerPos", &layerPos);
      R__insp.InspectMember(layerPos, "layerPos.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLayerGeomParLay(void *p) {
      return  p ? new(p) ::HMdcLayerGeomParLay : new ::HMdcLayerGeomParLay;
   }
   static void *newArray_HMdcLayerGeomParLay(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLayerGeomParLay[nElements] : new ::HMdcLayerGeomParLay[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLayerGeomParLay(void *p) {
      delete ((::HMdcLayerGeomParLay*)p);
   }
   static void deleteArray_HMdcLayerGeomParLay(void *p) {
      delete [] ((::HMdcLayerGeomParLay*)p);
   }
   static void destruct_HMdcLayerGeomParLay(void *p) {
      typedef ::HMdcLayerGeomParLay current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLayerGeomParLay(TBuffer &buf, void *obj) {
      ((::HMdcLayerGeomParLay*)obj)->::HMdcLayerGeomParLay::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLayerGeomParLay

//______________________________________________________________________________
void HMdcDigitPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcDigitPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      layEff.Streamer(R__b);
      layEffScale.Streamer(R__b);
      layEffThickness.Streamer(R__b);
      scaleTime1Err.Streamer(R__b);
      scaleTime1ErrMIPS.Streamer(R__b);
      R__b >> cellEffScale;
      R__b >> signalspeed;
      R__b.CheckByteCount(R__s, R__c, HMdcDigitPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcDigitPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      layEff.Streamer(R__b);
      layEffScale.Streamer(R__b);
      layEffThickness.Streamer(R__b);
      scaleTime1Err.Streamer(R__b);
      scaleTime1ErrMIPS.Streamer(R__b);
      R__b << cellEffScale;
      R__b << signalspeed;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcDigitPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcDigitPar.
      TClass *R__cl = ::HMdcDigitPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layEff", &layEff);
      R__insp.InspectMember(layEff, "layEff.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layEffScale", &layEffScale);
      R__insp.InspectMember(layEffScale, "layEffScale.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layEffThickness", &layEffThickness);
      R__insp.InspectMember(layEffThickness, "layEffThickness.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scaleTime1Err", &scaleTime1Err);
      R__insp.InspectMember(scaleTime1Err, "scaleTime1Err.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scaleTime1ErrMIPS", &scaleTime1ErrMIPS);
      R__insp.InspectMember(scaleTime1ErrMIPS, "scaleTime1ErrMIPS.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellEffScale", &cellEffScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "signalspeed", &signalspeed);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcDigitPar(void *p) {
      return  p ? new(p) ::HMdcDigitPar : new ::HMdcDigitPar;
   }
   static void *newArray_HMdcDigitPar(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcDigitPar[nElements] : new ::HMdcDigitPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcDigitPar(void *p) {
      delete ((::HMdcDigitPar*)p);
   }
   static void deleteArray_HMdcDigitPar(void *p) {
      delete [] ((::HMdcDigitPar*)p);
   }
   static void destruct_HMdcDigitPar(void *p) {
      typedef ::HMdcDigitPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcDigitPar(TBuffer &buf, void *obj) {
      ((::HMdcDigitPar*)obj)->::HMdcDigitPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcDigitPar

//______________________________________________________________________________
void HMdcWireStat::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcWireStat.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      mb.Streamer(R__b);
      tdc.Streamer(R__b);
      statusmap.Streamer(R__b);
      efficiency.Streamer(R__b);
      offset.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HMdcWireStat::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcWireStat::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      mb.Streamer(R__b);
      tdc.Streamer(R__b);
      statusmap.Streamer(R__b);
      efficiency.Streamer(R__b);
      offset.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcWireStat::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcWireStat.
      TClass *R__cl = ::HMdcWireStat::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mb", &mb);
      R__insp.InspectMember(mb, "mb.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdc", &tdc);
      R__insp.InspectMember(tdc, "tdc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "statusmap", &statusmap);
      R__insp.InspectMember(statusmap, "statusmap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "efficiency", &efficiency);
      R__insp.InspectMember(efficiency, "efficiency.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offset", &offset);
      R__insp.InspectMember(offset, "offset.");
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcWireStat(void *p) {
      return  p ? new(p) ::HMdcWireStat : new ::HMdcWireStat;
   }
   static void *newArray_HMdcWireStat(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcWireStat[nElements] : new ::HMdcWireStat[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcWireStat(void *p) {
      delete ((::HMdcWireStat*)p);
   }
   static void deleteArray_HMdcWireStat(void *p) {
      delete [] ((::HMdcWireStat*)p);
   }
   static void destruct_HMdcWireStat(void *p) {
      typedef ::HMdcWireStat current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcWireStat(TBuffer &buf, void *obj) {
      ((::HMdcWireStat*)obj)->::HMdcWireStat::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcWireStat

//______________________________________________________________________________
void HMdcGeomPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcGeomPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetGeomPar::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HMdcGeomPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcGeomPar::IsA(), kTRUE);
      HDetGeomPar::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcGeomPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcGeomPar.
      TClass *R__cl = ::HMdcGeomPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetGeomPar::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcGeomPar(void *p) {
      return  p ? new(p) ::HMdcGeomPar : new ::HMdcGeomPar;
   }
   static void *newArray_HMdcGeomPar(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcGeomPar[nElements] : new ::HMdcGeomPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcGeomPar(void *p) {
      delete ((::HMdcGeomPar*)p);
   }
   static void deleteArray_HMdcGeomPar(void *p) {
      delete [] ((::HMdcGeomPar*)p);
   }
   static void destruct_HMdcGeomPar(void *p) {
      typedef ::HMdcGeomPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcGeomPar(TBuffer &buf, void *obj) {
      ((::HMdcGeomPar*)obj)->::HMdcGeomPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcGeomPar

//______________________________________________________________________________
void HMdcRaw::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcRaw.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> nHits;
      R__b >> time1;
      R__b >> time2;
      R__b >> time3;
      R__b >> time4;
      R__b >> time5;
      R__b >> time6;
      R__b >> sector;
      R__b >> module;
      R__b >> mbo;
      R__b >> tdc;
      R__b >> nTrialsToFillHits;
      R__b.CheckByteCount(R__s, R__c, HMdcRaw::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcRaw::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << nHits;
      R__b << time1;
      R__b << time2;
      R__b << time3;
      R__b << time4;
      R__b << time5;
      R__b << time6;
      R__b << sector;
      R__b << module;
      R__b << mbo;
      R__b << tdc;
      R__b << nTrialsToFillHits;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcRaw::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcRaw.
      TClass *R__cl = ::HMdcRaw::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHits", &nHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time1", &time1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time2", &time2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time3", &time3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time4", &time4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time5", &time5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time6", &time6);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mbo", &mbo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdc", &tdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrialsToFillHits", &nTrialsToFillHits);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcRaw(void *p) {
      return  p ? new(p) ::HMdcRaw : new ::HMdcRaw;
   }
   static void *newArray_HMdcRaw(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcRaw[nElements] : new ::HMdcRaw[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcRaw(void *p) {
      delete ((::HMdcRaw*)p);
   }
   static void deleteArray_HMdcRaw(void *p) {
      delete [] ((::HMdcRaw*)p);
   }
   static void destruct_HMdcRaw(void *p) {
      typedef ::HMdcRaw current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcRaw(TBuffer &buf, void *obj) {
      ((::HMdcRaw*)obj)->::HMdcRaw::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcRaw

//______________________________________________________________________________
void HMdcCal1::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCal1.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> nHits;
      R__b >> time1;
      R__b >> time2;
      R__b >> sector;
      R__b >> module;
      R__b >> layer;
      R__b >> cell;
      R__b.CheckByteCount(R__s, R__c, HMdcCal1::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCal1::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << nHits;
      R__b << time1;
      R__b << time2;
      R__b << sector;
      R__b << module;
      R__b << layer;
      R__b << cell;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCal1::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCal1.
      TClass *R__cl = ::HMdcCal1::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHits", &nHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time1", &time1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time2", &time2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layer", &layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCal1(void *p) {
      return  p ? new(p) ::HMdcCal1 : new ::HMdcCal1;
   }
   static void *newArray_HMdcCal1(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCal1[nElements] : new ::HMdcCal1[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCal1(void *p) {
      delete ((::HMdcCal1*)p);
   }
   static void deleteArray_HMdcCal1(void *p) {
      delete [] ((::HMdcCal1*)p);
   }
   static void destruct_HMdcCal1(void *p) {
      typedef ::HMdcCal1 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCal1(TBuffer &buf, void *obj) {
      ((::HMdcCal1*)obj)->::HMdcCal1::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCal1

//______________________________________________________________________________
void HMdcCal2::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCal2.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> nHits;
      R__b >> dist1;
      R__b >> dist2;
      R__b >> errDist1;
      R__b >> errDist2;
      R__b >> sector;
      R__b >> module;
      R__b >> layer;
      R__b >> cell;
      R__b.CheckByteCount(R__s, R__c, HMdcCal2::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCal2::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << nHits;
      R__b << dist1;
      R__b << dist2;
      R__b << errDist1;
      R__b << errDist2;
      R__b << sector;
      R__b << module;
      R__b << layer;
      R__b << cell;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCal2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCal2.
      TClass *R__cl = ::HMdcCal2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHits", &nHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dist1", &dist1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dist2", &dist2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errDist1", &errDist1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errDist2", &errDist2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layer", &layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCal2(void *p) {
      return  p ? new(p) ::HMdcCal2 : new ::HMdcCal2;
   }
   static void *newArray_HMdcCal2(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCal2[nElements] : new ::HMdcCal2[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCal2(void *p) {
      delete ((::HMdcCal2*)p);
   }
   static void deleteArray_HMdcCal2(void *p) {
      delete [] ((::HMdcCal2*)p);
   }
   static void destruct_HMdcCal2(void *p) {
      typedef ::HMdcCal2 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCal2(TBuffer &buf, void *obj) {
      ((::HMdcCal2*)obj)->::HMdcCal2::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCal2

//______________________________________________________________________________
void HMdcCellGroup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCellGroup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HMdcCellGroup::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCellGroup::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCellGroup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCellGroup.
      TClass *R__cl = ::HMdcCellGroup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLayer", &pLayer);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdcCellGroup(void *p) {
      delete ((::HMdcCellGroup*)p);
   }
   static void deleteArray_HMdcCellGroup(void *p) {
      delete [] ((::HMdcCellGroup*)p);
   }
   static void destruct_HMdcCellGroup(void *p) {
      typedef ::HMdcCellGroup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCellGroup(TBuffer &buf, void *obj) {
      ((::HMdcCellGroup*)obj)->::HMdcCellGroup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCellGroup

//______________________________________________________________________________
void HMdcCellGroup6::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCellGroup6.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcCellGroup::Streamer(R__b);
      R__b.ReadStaticArray((unsigned short*)iLayer);
      R__b.CheckByteCount(R__s, R__c, HMdcCellGroup6::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCellGroup6::IsA(), kTRUE);
      HMdcCellGroup::Streamer(R__b);
      R__b.WriteArray(iLayer, 6);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCellGroup6::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCellGroup6.
      TClass *R__cl = ::HMdcCellGroup6::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iLayer[6]", iLayer);
      HMdcCellGroup::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCellGroup6(void *p) {
      return  p ? new(p) ::HMdcCellGroup6 : new ::HMdcCellGroup6;
   }
   static void *newArray_HMdcCellGroup6(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCellGroup6[nElements] : new ::HMdcCellGroup6[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCellGroup6(void *p) {
      delete ((::HMdcCellGroup6*)p);
   }
   static void deleteArray_HMdcCellGroup6(void *p) {
      delete [] ((::HMdcCellGroup6*)p);
   }
   static void destruct_HMdcCellGroup6(void *p) {
      typedef ::HMdcCellGroup6 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCellGroup6(TBuffer &buf, void *obj) {
      ((::HMdcCellGroup6*)obj)->::HMdcCellGroup6::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCellGroup6

//______________________________________________________________________________
void HMdcCellGroup12::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCellGroup12.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcCellGroup::Streamer(R__b);
      R__b.ReadStaticArray((unsigned short*)iLayer);
      R__b.CheckByteCount(R__s, R__c, HMdcCellGroup12::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCellGroup12::IsA(), kTRUE);
      HMdcCellGroup::Streamer(R__b);
      R__b.WriteArray(iLayer, 12);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCellGroup12::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCellGroup12.
      TClass *R__cl = ::HMdcCellGroup12::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iLayer[12]", iLayer);
      HMdcCellGroup::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCellGroup12(void *p) {
      return  p ? new(p) ::HMdcCellGroup12 : new ::HMdcCellGroup12;
   }
   static void *newArray_HMdcCellGroup12(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCellGroup12[nElements] : new ::HMdcCellGroup12[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCellGroup12(void *p) {
      delete ((::HMdcCellGroup12*)p);
   }
   static void deleteArray_HMdcCellGroup12(void *p) {
      delete [] ((::HMdcCellGroup12*)p);
   }
   static void destruct_HMdcCellGroup12(void *p) {
      typedef ::HMdcCellGroup12 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCellGroup12(TBuffer &buf, void *obj) {
      ((::HMdcCellGroup12*)obj)->::HMdcCellGroup12::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCellGroup12

//______________________________________________________________________________
void HMdcHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcHit.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcCellGroup6::Streamer(R__b);
      R__b >> x;
      R__b >> y;
      R__b >> xDir;
      R__b >> yDir;
      R__b >> offset;
      R__b >> chi2;
      R__b >> flag;
      cov.Streamer(R__b);
      R__b >> sector;
      R__b >> module;
      R__b >> trFinder;
      R__b >> index;
      R__b.CheckByteCount(R__s, R__c, HMdcHit::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcHit::IsA(), kTRUE);
      HMdcCellGroup6::Streamer(R__b);
      R__b << x;
      R__b << y;
      R__b << xDir;
      R__b << yDir;
      R__b << offset;
      R__b << chi2;
      R__b << flag;
      cov.Streamer(R__b);
      R__b << sector;
      R__b << module;
      R__b << trFinder;
      R__b << index;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcHit.
      TClass *R__cl = ::HMdcHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xDir", &xDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yDir", &yDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offset", &offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag", &flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cov", &cov);
      R__insp.InspectMember(cov, "cov.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trFinder", &trFinder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", &index);
      HMdcCellGroup6::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcHit(void *p) {
      return  p ? new(p) ::HMdcHit : new ::HMdcHit;
   }
   static void *newArray_HMdcHit(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcHit[nElements] : new ::HMdcHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcHit(void *p) {
      delete ((::HMdcHit*)p);
   }
   static void deleteArray_HMdcHit(void *p) {
      delete [] ((::HMdcHit*)p);
   }
   static void destruct_HMdcHit(void *p) {
      typedef ::HMdcHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcHit(TBuffer &buf, void *obj) {
      ((::HMdcHit*)obj)->::HMdcHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcHit

//______________________________________________________________________________
void HMdcSeg::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcSeg.
      TClass *R__cl = ::HMdcSeg::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r", &r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag", &flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cov", &cov);
      R__insp.InspectMember(cov, "cov.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind", &ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind2", &ind2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zPrime", &zPrime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rPrime", &rPrime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusInd", &clusInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1", &x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y1", &y1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x2", &x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y2", &y2);
      HMdcCellGroup12::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcSeg(void *p) {
      return  p ? new(p) ::HMdcSeg : new ::HMdcSeg;
   }
   static void *newArray_HMdcSeg(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcSeg[nElements] : new ::HMdcSeg[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcSeg(void *p) {
      delete ((::HMdcSeg*)p);
   }
   static void deleteArray_HMdcSeg(void *p) {
      delete [] ((::HMdcSeg*)p);
   }
   static void destruct_HMdcSeg(void *p) {
      typedef ::HMdcSeg current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcSeg(TBuffer &buf, void *obj) {
      ((::HMdcSeg*)obj)->::HMdcSeg::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcSeg

//______________________________________________________________________________
void HMdcTrk::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrk.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> z;
      R__b >> r;
      R__b >> p;
      R__b >> theta;
      R__b >> phi;
      R__b >> charge;
      R__b >> chi2;
      cov.Streamer(R__b);
      R__b >> flag;
      R__b >> sector;
      R__b.ReadStaticArray((int*)segIndex);
      R__b.CheckByteCount(R__s, R__c, HMdcTrk::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTrk::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << z;
      R__b << r;
      R__b << p;
      R__b << theta;
      R__b << phi;
      R__b << charge;
      R__b << chi2;
      cov.Streamer(R__b);
      R__b << flag;
      R__b << sector;
      R__b.WriteArray(segIndex, 2);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTrk::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrk.
      TClass *R__cl = ::HMdcTrk::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r", &r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p", &p);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cov", &cov);
      R__insp.InspectMember(cov, "cov.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag", &flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segIndex[2]", segIndex);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrk(void *p) {
      return  p ? new(p) ::HMdcTrk : new ::HMdcTrk;
   }
   static void *newArray_HMdcTrk(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrk[nElements] : new ::HMdcTrk[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrk(void *p) {
      delete ((::HMdcTrk*)p);
   }
   static void deleteArray_HMdcTrk(void *p) {
      delete [] ((::HMdcTrk*)p);
   }
   static void destruct_HMdcTrk(void *p) {
      typedef ::HMdcTrk current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrk(TBuffer &buf, void *obj) {
      ((::HMdcTrk*)obj)->::HMdcTrk::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrk

//______________________________________________________________________________
void HMdcTrkCand::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrkCand.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> sector;
      R__b >> flag;
      R__b >> nCandForSeg1;
      R__b >> nextCandInd;
      R__b >> firstCandInd;
      R__b >> seg1Ind;
      R__b >> seg2Ind;
      R__b >> metaMatchInd;
      R__b >> dedxInner;
      R__b >> dedxSigmaInner;
      R__b >> dedxNWireInner;
      R__b >> dedxNWireCutInner;
      R__b >> dedxOuter;
      R__b >> dedxSigmaOuter;
      R__b >> dedxNWireOuter;
      R__b >> dedxNWireCutOuter;
      R__b >> dedxCombined;
      R__b >> dedxSigmaCombined;
      R__b >> dedxNWireCombined;
      R__b >> dedxNWireCutCombined;
      R__b.ReadStaticArray((float*)dedx);
      R__b.ReadStaticArray((float*)dedxSigma);
      R__b.ReadStaticArray((unsigned char*)dedxNWire);
      R__b.ReadStaticArray((unsigned char*)dedxNWireCut);
      R__b.CheckByteCount(R__s, R__c, HMdcTrkCand::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTrkCand::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << sector;
      R__b << flag;
      R__b << nCandForSeg1;
      R__b << nextCandInd;
      R__b << firstCandInd;
      R__b << seg1Ind;
      R__b << seg2Ind;
      R__b << metaMatchInd;
      R__b << dedxInner;
      R__b << dedxSigmaInner;
      R__b << dedxNWireInner;
      R__b << dedxNWireCutInner;
      R__b << dedxOuter;
      R__b << dedxSigmaOuter;
      R__b << dedxNWireOuter;
      R__b << dedxNWireCutOuter;
      R__b << dedxCombined;
      R__b << dedxSigmaCombined;
      R__b << dedxNWireCombined;
      R__b << dedxNWireCutCombined;
      R__b.WriteArray(dedx, 4);
      R__b.WriteArray(dedxSigma, 4);
      R__b.WriteArray(dedxNWire, 4);
      R__b.WriteArray(dedxNWireCut, 4);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTrkCand::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrkCand.
      TClass *R__cl = ::HMdcTrkCand::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag", &flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCandForSeg1", &nCandForSeg1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nextCandInd", &nextCandInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstCandInd", &firstCandInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seg1Ind", &seg1Ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seg2Ind", &seg2Ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metaMatchInd", &metaMatchInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxInner", &dedxInner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxSigmaInner", &dedxSigmaInner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWireInner", &dedxNWireInner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWireCutInner", &dedxNWireCutInner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxOuter", &dedxOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxSigmaOuter", &dedxSigmaOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWireOuter", &dedxNWireOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWireCutOuter", &dedxNWireCutOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxCombined", &dedxCombined);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxSigmaCombined", &dedxSigmaCombined);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWireCombined", &dedxNWireCombined);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWireCutCombined", &dedxNWireCutCombined);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedx[4]", dedx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxSigma[4]", dedxSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWire[4]", dedxNWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWireCut[4]", dedxNWireCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pFirstCand", &pFirstCand);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrkCand(void *p) {
      return  p ? new(p) ::HMdcTrkCand : new ::HMdcTrkCand;
   }
   static void *newArray_HMdcTrkCand(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrkCand[nElements] : new ::HMdcTrkCand[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrkCand(void *p) {
      delete ((::HMdcTrkCand*)p);
   }
   static void deleteArray_HMdcTrkCand(void *p) {
      delete [] ((::HMdcTrkCand*)p);
   }
   static void destruct_HMdcTrkCand(void *p) {
      typedef ::HMdcTrkCand current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrkCand(TBuffer &buf, void *obj) {
      ((::HMdcTrkCand*)obj)->::HMdcTrkCand::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrkCand

//______________________________________________________________________________
void HMdcVertexWriter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcVertexWriter.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcVertexWriter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcVertexWriter.
      TClass *R__cl = ::HMdcVertexWriter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outputdir", &outputdir);
      R__insp.InspectMember(outputdir, "outputdir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*outfile", &outfile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*vertex", &vertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filename", &filename);
      R__insp.InspectMember(filename, "filename.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileNameFromInput", &fileNameFromInput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileNameManual", &fileNameManual);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isEmbedding", &isEmbedding);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pUserSelectEvent", &pUserSelectEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pUserParams", &pUserParams);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcVertexWriter(void *p) {
      return  p ? new(p) ::HMdcVertexWriter : new ::HMdcVertexWriter;
   }
   static void *newArray_HMdcVertexWriter(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcVertexWriter[nElements] : new ::HMdcVertexWriter[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcVertexWriter(void *p) {
      delete ((::HMdcVertexWriter*)p);
   }
   static void deleteArray_HMdcVertexWriter(void *p) {
      delete [] ((::HMdcVertexWriter*)p);
   }
   static void destruct_HMdcVertexWriter(void *p) {
      typedef ::HMdcVertexWriter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcVertexWriter(TBuffer &buf, void *obj) {
      ((::HMdcVertexWriter*)obj)->::HMdcVertexWriter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcVertexWriter

//______________________________________________________________________________
void HMdcUnpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcUnpacker.

   HldUnpack::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcUnpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcUnpacker.
      TClass *R__cl = ::HMdcUnpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dataword", &dataword);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rawc", &rawc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lookupGeom", &lookupGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcDataWordCat", &pMdcDataWordCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcOepStatusCat", &pMdcOepStatusCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*addrCorrPar", &addrCorrPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pDetector", &pDetector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*trbNetUnpacker", &trbNetUnpacker);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pUnpackerPar", &pUnpackerPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "continueDecodingAfterInconsistency", &continueDecodingAfterInconsistency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debugMode", &debugMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "decodeVersion", &decodeVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doAddrCorrection", &doAddrCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doMapOutUnusedChannels", &doMapOutUnusedChannels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "consistencyCheck", &consistencyCheck);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fillDataWord", &fillDataWord);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fillOepStatus", &fillOepStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcDataWordCatPersistency", &mdcDataWordCatPersistency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcOepStatusCatPersistency", &mdcOepStatusCatPersistency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doBitFlipCorr", &doBitFlipCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bitFlipVersion", &bitFlipVersion);
      R__insp.InspectMember(bitFlipVersion, "bitFlipVersion.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noComment", &noComment);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtId", &subEvtId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcMode", &tdcMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badEventsCounter", &badEventsCounter);
      HldUnpack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMdcUnpacker(void *p) {
      delete ((::HMdcUnpacker*)p);
   }
   static void deleteArray_HMdcUnpacker(void *p) {
      delete [] ((::HMdcUnpacker*)p);
   }
   static void destruct_HMdcUnpacker(void *p) {
      typedef ::HMdcUnpacker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcUnpacker(TBuffer &buf, void *obj) {
      ((::HMdcUnpacker*)obj)->::HMdcUnpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcUnpacker

//______________________________________________________________________________
void HMdcDataword::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcDataword.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> decodeType;
      R__b >> eventNumber;
      R__b >> triggerType;
      R__b >> errorFlag;
      R__b >> subEventSize;
      R__b >> statusCode;
      R__b >> statusData;
      R__b >> mboAddress;
      R__b >> tdcNumber;
      R__b >> channel;
      R__b >> hit;
      R__b >> time;
      R__b >> sector;
      R__b >> module;
      R__b >> mbo;
      R__b >> tdc;
      R__b >> entry;
      R__b >> time1;
      R__b >> debug;
      R__b.CheckByteCount(R__s, R__c, HMdcDataword::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcDataword::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << decodeType;
      R__b << eventNumber;
      R__b << triggerType;
      R__b << errorFlag;
      R__b << subEventSize;
      R__b << statusCode;
      R__b << statusData;
      R__b << mboAddress;
      R__b << tdcNumber;
      R__b << channel;
      R__b << hit;
      R__b << time;
      R__b << sector;
      R__b << module;
      R__b << mbo;
      R__b << tdc;
      R__b << entry;
      R__b << time1;
      R__b << debug;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcDataword::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcDataword.
      TClass *R__cl = ::HMdcDataword::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "decodeType", &decodeType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventNumber", &eventNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "triggerType", &triggerType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errorFlag", &errorFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEventSize", &subEventSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "statusCode", &statusCode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "statusData", &statusData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mboAddress", &mboAddress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcNumber", &tdcNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channel", &channel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hit", &hit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mbo", &mbo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdc", &tdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "entry", &entry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noComment", &noComment);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time1", &time1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debug", &debug);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcDataword(void *p) {
      return  p ? new(p) ::HMdcDataword : new ::HMdcDataword;
   }
   static void *newArray_HMdcDataword(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcDataword[nElements] : new ::HMdcDataword[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcDataword(void *p) {
      delete ((::HMdcDataword*)p);
   }
   static void deleteArray_HMdcDataword(void *p) {
      delete [] ((::HMdcDataword*)p);
   }
   static void destruct_HMdcDataword(void *p) {
      typedef ::HMdcDataword current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcDataword(TBuffer &buf, void *obj) {
      ((::HMdcDataword*)obj)->::HMdcDataword::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcDataword

//______________________________________________________________________________
void HMdcGeantReader::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcGeantReader.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HGeantReader::Streamer(R__b);
      R__b >> t;
      R__b.CheckByteCount(R__s, R__c, HMdcGeantReader::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcGeantReader::IsA(), kTRUE);
      HGeantReader::Streamer(R__b);
      R__b << t;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcGeantReader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcGeantReader.
      TClass *R__cl = ::HMdcGeantReader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*t", &t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantMdcCat", &fGeantMdcCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventId", &fEventId);
      HGeantReader::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcGeantReader(void *p) {
      return  p ? new(p) ::HMdcGeantReader : new ::HMdcGeantReader;
   }
   static void *newArray_HMdcGeantReader(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcGeantReader[nElements] : new ::HMdcGeantReader[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcGeantReader(void *p) {
      delete ((::HMdcGeantReader*)p);
   }
   static void deleteArray_HMdcGeantReader(void *p) {
      delete [] ((::HMdcGeantReader*)p);
   }
   static void destruct_HMdcGeantReader(void *p) {
      typedef ::HMdcGeantReader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcGeantReader(TBuffer &buf, void *obj) {
      ((::HMdcGeantReader*)obj)->::HMdcGeantReader::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcGeantReader

//______________________________________________________________________________
void HMdcDigitizer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcDigitizer.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcDigitizer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcDigitizer.
      TClass *R__cl = ::HMdcDigitizer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantMdcCat", &fGeantMdcCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantKineCat", &fGeantKineCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locnoise", &locnoise);
      R__insp.InspectMember(locnoise, "locnoise.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantCellCat", &fGeantCellCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalCat", &fCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hit", &hit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hitReal", &hitReal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDigitGeomPar", &fDigitGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDigitPar", &fDigitPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCal2ParSim", &fCal2ParSim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCellEff", &fCellEff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWireStat", &fWireStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTimeCut", &fTimeCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fsizescells", &fsizescells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fdEdX", &fdEdX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*geomstruct", &geomstruct);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCal", &fCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalnoise", &fCalnoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCell", &fCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterin", &iterin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*itercell", &itercell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*itercal1", &itercal1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventId", &fEventId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yDist", &yDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pi", &pi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modetdc", &modetdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "setup[6][4]", setup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time1", &time1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time1Error", &time1Error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time2", &time2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time2Error", &time2Error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "myalpha", &myalpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useError", &useError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useWireOffset", &useWireOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useDeDx2", &useDeDx2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useTimeCut", &useTimeCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*myoutput", &myoutput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*distance_time", &distance_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fntuple", &fntuple);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useTof", &useTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsets[4]", offsets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useOffsets", &useOffsets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fbetadEdx", &fbetadEdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBetaLow", &fBetaLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useDeDxScaling", &useDeDxScaling);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useDeDxTimeScaling", &useDeDxTimeScaling);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "effLevel[4]", effLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useCellEff", &useCellEff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useWireStat", &useWireStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useWireStatEff", &useWireStatEff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useWireStatOffset", &useWireStatOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useLayerThickness", &useLayerThickness);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useDeltaElectrons", &useDeltaElectrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useDeltaMomSelection", &useDeltaMomSelection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ionID", &ionID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t1minDeltaElec", &t1minDeltaElec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t1maxDeltaElec", &t1maxDeltaElec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momMaxDeltaElecCut", &momMaxDeltaElecCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momMinDeltaCut[6]", momMinDeltaCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mDeltaTrackT0", (void*)&mDeltaTrackT0);
      R__insp.InspectMember("map<HGeantKine*,Float_t>", (void*)&mDeltaTrackT0, "mDeltaTrackT0.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "itDelta", (void*)&itDelta);
      R__insp.InspectMember("map<HGeantKine*,float,less<HGeantKine*>,allocator<pair<HGeantKine* const,float> > >::iterator", (void*)&itDelta, "itDelta.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasPrinted", &hasPrinted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noiseLevel[4]", noiseLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useNoise", &useNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arrayNoise[5]", arrayNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noiseRangeLo[4]", noiseRangeLo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noiseRangeHi[4]", noiseRangeHi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time1noise", &time1noise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time2noise", &time2noise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noisemode", &noisemode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstHit", &firstHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "secondHit", &secondHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstTime2", &firstTime2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "endList1", &endList1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstsec", &firstsec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstmod", &firstmod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstlay", &firstlay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstcell", &firstcell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noisebandwidth", &noisebandwidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noisewhitewidth", &noisewhitewidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noisewhiteratio", &noisewhiteratio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time1Real", &time1Real);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time2Real", &time2Real);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHitsReal", &nHitsReal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "embeddingmode", &embeddingmode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "signalSpeed", &signalSpeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scaleError[4]", scaleError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scaleErrorMIPS[4]", scaleErrorMIPS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rndmoffsets[6][4][6][220]", rndmoffsets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaoffsets", &sigmaoffsets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "createoffsets", &createoffsets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetsCreated", &offsetsCreated);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scaletime", &scaletime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vLayEff", (void*)&vLayEff);
      R__insp.InspectMember("vector<HMdcDigiLayEff>", (void*)&vLayEff, "vLayEff.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layEff", (void*)&layEff);
      R__insp.InspectMember("HMdcDigiLayEff", (void*)&layEff, "layEff.", true);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcDigitizer(void *p) {
      return  p ? new(p) ::HMdcDigitizer : new ::HMdcDigitizer;
   }
   static void *newArray_HMdcDigitizer(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcDigitizer[nElements] : new ::HMdcDigitizer[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcDigitizer(void *p) {
      delete ((::HMdcDigitizer*)p);
   }
   static void deleteArray_HMdcDigitizer(void *p) {
      delete [] ((::HMdcDigitizer*)p);
   }
   static void destruct_HMdcDigitizer(void *p) {
      typedef ::HMdcDigitizer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcDigitizer(TBuffer &buf, void *obj) {
      ((::HMdcDigitizer*)obj)->::HMdcDigitizer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcDigitizer

//______________________________________________________________________________
void HMdcCalibrater1::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCalibrater1.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcCalibrater1::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCalibrater1.
      TClass *R__cl = ::HMdcCalibrater1::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rawCat", &rawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*calCat", &calCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*startHitCat", &startHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*raw", &raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cal", &cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "StartandCal", &StartandCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NoStartandNoCal", &NoStartandNoCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NoStartandCal", &NoStartandCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "setTimeCut", &setTimeCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasPrinted", &hasPrinted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "embedding", &embedding);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterstart", &iterstart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*calparraw", &calparraw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lookup", &lookup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*timecut", &timecut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cutStat", &cutStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*wireStat", &wireStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cuts[5]", cuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutthreshold", &cutthreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useMultCut", &useMultCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doprint", &doprint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "skipCal", &skipCal);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCalibrater1(void *p) {
      return  p ? new(p) ::HMdcCalibrater1 : new ::HMdcCalibrater1;
   }
   static void *newArray_HMdcCalibrater1(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCalibrater1[nElements] : new ::HMdcCalibrater1[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCalibrater1(void *p) {
      delete ((::HMdcCalibrater1*)p);
   }
   static void deleteArray_HMdcCalibrater1(void *p) {
      delete [] ((::HMdcCalibrater1*)p);
   }
   static void destruct_HMdcCalibrater1(void *p) {
      typedef ::HMdcCalibrater1 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCalibrater1(TBuffer &buf, void *obj) {
      ((::HMdcCalibrater1*)obj)->::HMdcCalibrater1::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCalibrater1

//______________________________________________________________________________
void HMdcGeantCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcGeantCell.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> sector;
      R__b >> module;
      R__b >> layer;
      R__b >> cell;
      R__b >> fNumHits;
      R__b.ReadStaticArray((float*)fMinDist);
      R__b.ReadStaticArray((float*)fTimeFlight);
      R__b.ReadStaticArray((float*)fImpactAngle);
      R__b.ReadStaticArray((int*)nTrack);
      R__b.ReadStaticArray((bool*)flagCutEdge);
      R__b.ReadStaticArray((float*)wireOffset);
      R__b.ReadStaticArray((float*)efficiency);
      R__b.ReadStaticArray((float*)theta);
      R__b.CheckByteCount(R__s, R__c, HMdcGeantCell::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcGeantCell::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << sector;
      R__b << module;
      R__b << layer;
      R__b << cell;
      R__b << fNumHits;
      R__b.WriteArray(fMinDist, 15);
      R__b.WriteArray(fTimeFlight, 15);
      R__b.WriteArray(fImpactAngle, 15);
      R__b.WriteArray(nTrack, 15);
      R__b.WriteArray(flagCutEdge, 15);
      R__b.WriteArray(wireOffset, 15);
      R__b.WriteArray(efficiency, 15);
      R__b.WriteArray(theta, 15);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcGeantCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcGeantCell.
      TClass *R__cl = ::HMdcGeantCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layer", &layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumHits", &fNumHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinDist[15]", fMinDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeFlight[15]", fTimeFlight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpactAngle[15]", fImpactAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack[15]", nTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagCutEdge[15]", flagCutEdge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireOffset[15]", wireOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "efficiency[15]", efficiency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta[15]", theta);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcGeantCell(void *p) {
      return  p ? new(p) ::HMdcGeantCell : new ::HMdcGeantCell;
   }
   static void *newArray_HMdcGeantCell(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcGeantCell[nElements] : new ::HMdcGeantCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcGeantCell(void *p) {
      delete ((::HMdcGeantCell*)p);
   }
   static void deleteArray_HMdcGeantCell(void *p) {
      delete [] ((::HMdcGeantCell*)p);
   }
   static void destruct_HMdcGeantCell(void *p) {
      typedef ::HMdcGeantCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcGeantCell(TBuffer &buf, void *obj) {
      ((::HMdcGeantCell*)obj)->::HMdcGeantCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcGeantCell

//______________________________________________________________________________
void HMdcCal1Sim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCal1Sim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcCal1::Streamer(R__b);
      R__b >> nTrack1;
      R__b >> nTrack2;
      R__b >> status1;
      R__b >> status2;
      R__b.ReadStaticArray((int*)listTrack);
      R__b.ReadStaticArray((int*)listStatus);
      R__b >> angle1;
      R__b >> angle2;
      R__b >> minDist1;
      R__b >> minDist2;
      R__b >> error1;
      R__b >> error2;
      R__b >> tof1;
      R__b >> tof2;
      R__b >> wireOff1;
      R__b >> wireOff2;
      R__b.CheckByteCount(R__s, R__c, HMdcCal1Sim::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCal1Sim::IsA(), kTRUE);
      HMdcCal1::Streamer(R__b);
      R__b << nTrack1;
      R__b << nTrack2;
      R__b << status1;
      R__b << status2;
      R__b.WriteArray(listTrack, 5);
      R__b.WriteArray(listStatus, 5);
      R__b << angle1;
      R__b << angle2;
      R__b << minDist1;
      R__b << minDist2;
      R__b << error1;
      R__b << error2;
      R__b << tof1;
      R__b << tof2;
      R__b << wireOff1;
      R__b << wireOff2;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCal1Sim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCal1Sim.
      TClass *R__cl = ::HMdcCal1Sim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack1", &nTrack1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack2", &nTrack2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status1", &status1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status2", &status2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listTrack[5]", listTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listStatus[5]", listStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "angle1", &angle1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "angle2", &angle2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minDist1", &minDist1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minDist2", &minDist2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "error1", &error1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "error2", &error2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof1", &tof1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof2", &tof2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireOff1", &wireOff1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireOff2", &wireOff2);
      HMdcCal1::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCal1Sim(void *p) {
      return  p ? new(p) ::HMdcCal1Sim : new ::HMdcCal1Sim;
   }
   static void *newArray_HMdcCal1Sim(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCal1Sim[nElements] : new ::HMdcCal1Sim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCal1Sim(void *p) {
      delete ((::HMdcCal1Sim*)p);
   }
   static void deleteArray_HMdcCal1Sim(void *p) {
      delete [] ((::HMdcCal1Sim*)p);
   }
   static void destruct_HMdcCal1Sim(void *p) {
      typedef ::HMdcCal1Sim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCal1Sim(TBuffer &buf, void *obj) {
      ((::HMdcCal1Sim*)obj)->::HMdcCal1Sim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCal1Sim

//______________________________________________________________________________
void HMdcCal2Sim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCal2Sim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcCal2::Streamer(R__b);
      R__b >> nTrack1;
      R__b >> nTrack2;
      R__b >> status1;
      R__b >> status2;
      R__b.ReadStaticArray((int*)listTrack);
      R__b.ReadStaticArray((int*)listStatus);
      R__b.CheckByteCount(R__s, R__c, HMdcCal2Sim::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcCal2Sim::IsA(), kTRUE);
      HMdcCal2::Streamer(R__b);
      R__b << nTrack1;
      R__b << nTrack2;
      R__b << status1;
      R__b << status2;
      R__b.WriteArray(listTrack, 5);
      R__b.WriteArray(listStatus, 5);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcCal2Sim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCal2Sim.
      TClass *R__cl = ::HMdcCal2Sim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack1", &nTrack1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack2", &nTrack2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status1", &status1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status2", &status2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listTrack[5]", listTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listStatus[5]", listStatus);
      HMdcCal2::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCal2Sim(void *p) {
      return  p ? new(p) ::HMdcCal2Sim : new ::HMdcCal2Sim;
   }
   static void *newArray_HMdcCal2Sim(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCal2Sim[nElements] : new ::HMdcCal2Sim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCal2Sim(void *p) {
      delete ((::HMdcCal2Sim*)p);
   }
   static void deleteArray_HMdcCal2Sim(void *p) {
      delete [] ((::HMdcCal2Sim*)p);
   }
   static void destruct_HMdcCal2Sim(void *p) {
      typedef ::HMdcCal2Sim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCal2Sim(TBuffer &buf, void *obj) {
      ((::HMdcCal2Sim*)obj)->::HMdcCal2Sim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCal2Sim

//______________________________________________________________________________
void HMdcHitSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcHitSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcHit::Streamer(R__b);
      R__b >> nTracks;
      R__b.ReadStaticArray((int*)listTracks);
      R__b.ReadStaticArray((unsigned char*)nTimes);
      R__b >> status;
      R__b.CheckByteCount(R__s, R__c, HMdcHitSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcHitSim::IsA(), kTRUE);
      HMdcHit::Streamer(R__b);
      R__b << nTracks;
      R__b.WriteArray(listTracks, 5);
      R__b.WriteArray(nTimes, 5);
      R__b << status;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcHitSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcHitSim.
      TClass *R__cl = ::HMdcHitSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracks", &nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listTracks[5]", listTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTimes[5]", nTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      HMdcHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcHitSim(void *p) {
      return  p ? new(p) ::HMdcHitSim : new ::HMdcHitSim;
   }
   static void *newArray_HMdcHitSim(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcHitSim[nElements] : new ::HMdcHitSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcHitSim(void *p) {
      delete ((::HMdcHitSim*)p);
   }
   static void deleteArray_HMdcHitSim(void *p) {
      delete [] ((::HMdcHitSim*)p);
   }
   static void destruct_HMdcHitSim(void *p) {
      typedef ::HMdcHitSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcHitSim(TBuffer &buf, void *obj) {
      ((::HMdcHitSim*)obj)->::HMdcHitSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcHitSim

//______________________________________________________________________________
void HMdcSegSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcSegSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcSeg::Streamer(R__b);
      R__b >> nTracks;
      R__b.ReadStaticArray((int*)listTracks);
      R__b.ReadStaticArray((unsigned char*)nTimes);
      R__b.ReadStaticArray((unsigned char*)nDigiTimes);
      R__b.ReadStaticArray((unsigned char*)trackStatus);
      R__b >> nNotFakeTracks;
      R__b >> ioSMatchStatus;
      R__b >> status;
      R__b.CheckByteCount(R__s, R__c, HMdcSegSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcSegSim::IsA(), kTRUE);
      HMdcSeg::Streamer(R__b);
      R__b << nTracks;
      R__b.WriteArray(listTracks, 5);
      R__b.WriteArray(nTimes, 5);
      R__b.WriteArray(nDigiTimes, 5);
      R__b.WriteArray(trackStatus, 5);
      R__b << nNotFakeTracks;
      R__b << ioSMatchStatus;
      R__b << status;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcSegSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcSegSim.
      TClass *R__cl = ::HMdcSegSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracks", &nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listTracks[5]", listTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTimes[5]", nTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDigiTimes[5]", nDigiTimes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackStatus[5]", trackStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nNotFakeTracks", &nNotFakeTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ioSMatchStatus", &ioSMatchStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      HMdcSeg::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcSegSim(void *p) {
      return  p ? new(p) ::HMdcSegSim : new ::HMdcSegSim;
   }
   static void *newArray_HMdcSegSim(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcSegSim[nElements] : new ::HMdcSegSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcSegSim(void *p) {
      delete ((::HMdcSegSim*)p);
   }
   static void deleteArray_HMdcSegSim(void *p) {
      delete [] ((::HMdcSegSim*)p);
   }
   static void destruct_HMdcSegSim(void *p) {
      typedef ::HMdcSegSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcSegSim(TBuffer &buf, void *obj) {
      ((::HMdcSegSim*)obj)->::HMdcSegSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcSegSim

//______________________________________________________________________________
void HMdcHitIdeal::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcHitIdeal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcHitSim::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HMdcHitIdeal::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcHitIdeal::IsA(), kTRUE);
      HMdcHitSim::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcHitIdeal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcHitIdeal.
      TClass *R__cl = ::HMdcHitIdeal::IsA();
      if (R__cl || R__insp.IsA()) { }
      HMdcHitSim::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcHitIdeal(void *p) {
      return  p ? new(p) ::HMdcHitIdeal : new ::HMdcHitIdeal;
   }
   static void *newArray_HMdcHitIdeal(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcHitIdeal[nElements] : new ::HMdcHitIdeal[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcHitIdeal(void *p) {
      delete ((::HMdcHitIdeal*)p);
   }
   static void deleteArray_HMdcHitIdeal(void *p) {
      delete [] ((::HMdcHitIdeal*)p);
   }
   static void destruct_HMdcHitIdeal(void *p) {
      typedef ::HMdcHitIdeal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcHitIdeal(TBuffer &buf, void *obj) {
      ((::HMdcHitIdeal*)obj)->::HMdcHitIdeal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcHitIdeal

//______________________________________________________________________________
void HMdcSegIdeal::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcSegIdeal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcSegSim::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HMdcSegIdeal::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcSegIdeal::IsA(), kTRUE);
      HMdcSegSim::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcSegIdeal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcSegIdeal.
      TClass *R__cl = ::HMdcSegIdeal::IsA();
      if (R__cl || R__insp.IsA()) { }
      HMdcSegSim::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcSegIdeal(void *p) {
      return  p ? new(p) ::HMdcSegIdeal : new ::HMdcSegIdeal;
   }
   static void *newArray_HMdcSegIdeal(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcSegIdeal[nElements] : new ::HMdcSegIdeal[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcSegIdeal(void *p) {
      delete ((::HMdcSegIdeal*)p);
   }
   static void deleteArray_HMdcSegIdeal(void *p) {
      delete [] ((::HMdcSegIdeal*)p);
   }
   static void destruct_HMdcSegIdeal(void *p) {
      typedef ::HMdcSegIdeal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcSegIdeal(TBuffer &buf, void *obj) {
      ((::HMdcSegIdeal*)obj)->::HMdcSegIdeal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcSegIdeal

//______________________________________________________________________________
void HMdcTrkCandIdeal::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrkCandIdeal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HMdcTrkCand::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HMdcTrkCandIdeal::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTrkCandIdeal::IsA(), kTRUE);
      HMdcTrkCand::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTrkCandIdeal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrkCandIdeal.
      TClass *R__cl = ::HMdcTrkCandIdeal::IsA();
      if (R__cl || R__insp.IsA()) { }
      HMdcTrkCand::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrkCandIdeal(void *p) {
      return  p ? new(p) ::HMdcTrkCandIdeal : new ::HMdcTrkCandIdeal;
   }
   static void *newArray_HMdcTrkCandIdeal(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrkCandIdeal[nElements] : new ::HMdcTrkCandIdeal[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrkCandIdeal(void *p) {
      delete ((::HMdcTrkCandIdeal*)p);
   }
   static void deleteArray_HMdcTrkCandIdeal(void *p) {
      delete [] ((::HMdcTrkCandIdeal*)p);
   }
   static void destruct_HMdcTrkCandIdeal(void *p) {
      typedef ::HMdcTrkCandIdeal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrkCandIdeal(TBuffer &buf, void *obj) {
      ((::HMdcTrkCandIdeal*)obj)->::HMdcTrkCandIdeal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrkCandIdeal

//______________________________________________________________________________
void HMdcRawEventHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcRawEventHeader.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> errorWord;
      R__b >> module;
      R__b >> roc;
      R__b >> sector;
      R__b >> subEvtId;
      R__b >> subEvtSize;
      R__b >> triggerType;
      R__b.CheckByteCount(R__s, R__c, HMdcRawEventHeader::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcRawEventHeader::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << errorWord;
      R__b << module;
      R__b << roc;
      R__b << sector;
      R__b << subEvtId;
      R__b << subEvtSize;
      R__b << triggerType;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcRawEventHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcRawEventHeader.
      TClass *R__cl = ::HMdcRawEventHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errorWord", &errorWord);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "roc", &roc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtId", &subEvtId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtSize", &subEvtSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "triggerType", &triggerType);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcRawEventHeader(void *p) {
      return  p ? new(p) ::HMdcRawEventHeader : new ::HMdcRawEventHeader;
   }
   static void *newArray_HMdcRawEventHeader(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcRawEventHeader[nElements] : new ::HMdcRawEventHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcRawEventHeader(void *p) {
      delete ((::HMdcRawEventHeader*)p);
   }
   static void deleteArray_HMdcRawEventHeader(void *p) {
      delete [] ((::HMdcRawEventHeader*)p);
   }
   static void destruct_HMdcRawEventHeader(void *p) {
      typedef ::HMdcRawEventHeader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcRawEventHeader(TBuffer &buf, void *obj) {
      ((::HMdcRawEventHeader*)obj)->::HMdcRawEventHeader::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcRawEventHeader

//______________________________________________________________________________
void HMdcTdcChannel::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTdcChannel.
      TClass *R__cl = ::HMdcTdcChannel::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "oraVersion", &oraVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRawStruct", &pRawStruct);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLookupGeom", &pLookupGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mapNotConnectedChannels", &mapNotConnectedChannels);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTdcChannel(void *p) {
      return  p ? new(p) ::HMdcTdcChannel : new ::HMdcTdcChannel;
   }
   static void *newArray_HMdcTdcChannel(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTdcChannel[nElements] : new ::HMdcTdcChannel[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTdcChannel(void *p) {
      delete ((::HMdcTdcChannel*)p);
   }
   static void deleteArray_HMdcTdcChannel(void *p) {
      delete [] ((::HMdcTdcChannel*)p);
   }
   static void destruct_HMdcTdcChannel(void *p) {
      typedef ::HMdcTdcChannel current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTdcChannel(TBuffer &buf, void *obj) {
      ((::HMdcTdcChannel*)obj)->::HMdcTdcChannel::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTdcChannel

//______________________________________________________________________________
void HMdcTdcChannelSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTdcChannelSec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcTdcChannelSec::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTdcChannelSec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTdcChannelSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTdcChannelSec.
      TClass *R__cl = ::HMdcTdcChannelSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTdcChannelSec(void *p) {
      return  p ? new(p) ::HMdcTdcChannelSec : new ::HMdcTdcChannelSec;
   }
   static void *newArray_HMdcTdcChannelSec(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTdcChannelSec[nElements] : new ::HMdcTdcChannelSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTdcChannelSec(void *p) {
      delete ((::HMdcTdcChannelSec*)p);
   }
   static void deleteArray_HMdcTdcChannelSec(void *p) {
      delete [] ((::HMdcTdcChannelSec*)p);
   }
   static void destruct_HMdcTdcChannelSec(void *p) {
      typedef ::HMdcTdcChannelSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTdcChannelSec(TBuffer &buf, void *obj) {
      ((::HMdcTdcChannelSec*)obj)->::HMdcTdcChannelSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTdcChannelSec

//______________________________________________________________________________
void HMdcTdcChannelMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTdcChannelMod.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcTdcChannelMod::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTdcChannelMod::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTdcChannelMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTdcChannelMod.
      TClass *R__cl = ::HMdcTdcChannelMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTdcChannelMod(void *p) {
      return  p ? new(p) ::HMdcTdcChannelMod : new ::HMdcTdcChannelMod;
   }
   static void *newArray_HMdcTdcChannelMod(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTdcChannelMod[nElements] : new ::HMdcTdcChannelMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTdcChannelMod(void *p) {
      delete ((::HMdcTdcChannelMod*)p);
   }
   static void deleteArray_HMdcTdcChannelMod(void *p) {
      delete [] ((::HMdcTdcChannelMod*)p);
   }
   static void destruct_HMdcTdcChannelMod(void *p) {
      typedef ::HMdcTdcChannelMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTdcChannelMod(TBuffer &buf, void *obj) {
      ((::HMdcTdcChannelMod*)obj)->::HMdcTdcChannelMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTdcChannelMod

//______________________________________________________________________________
void HMdcTdcChannelMbo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTdcChannelMbo.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HMdcTdcChannelMbo::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTdcChannelMbo::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTdcChannelMbo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTdcChannelMbo.
      TClass *R__cl = ::HMdcTdcChannelMbo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTdcChannelMbo(void *p) {
      return  p ? new(p) ::HMdcTdcChannelMbo : new ::HMdcTdcChannelMbo;
   }
   static void *newArray_HMdcTdcChannelMbo(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTdcChannelMbo[nElements] : new ::HMdcTdcChannelMbo[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTdcChannelMbo(void *p) {
      delete ((::HMdcTdcChannelMbo*)p);
   }
   static void deleteArray_HMdcTdcChannelMbo(void *p) {
      delete [] ((::HMdcTdcChannelMbo*)p);
   }
   static void destruct_HMdcTdcChannelMbo(void *p) {
      typedef ::HMdcTdcChannelMbo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTdcChannelMbo(TBuffer &buf, void *obj) {
      ((::HMdcTdcChannelMbo*)obj)->::HMdcTdcChannelMbo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTdcChannelMbo

//______________________________________________________________________________
void HMdcTdcChannelTdc::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTdcChannelTdc.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.ReadStaticArray((int*)channelMask);
      R__b.CheckByteCount(R__s, R__c, HMdcTdcChannelTdc::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTdcChannelTdc::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.WriteArray(channelMask, 2);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTdcChannelTdc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTdcChannelTdc.
      TClass *R__cl = ::HMdcTdcChannelTdc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "channelMask[2]", channelMask);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTdcChannelTdc(void *p) {
      return  p ? new(p) ::HMdcTdcChannelTdc : new ::HMdcTdcChannelTdc;
   }
   static void *newArray_HMdcTdcChannelTdc(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTdcChannelTdc[nElements] : new ::HMdcTdcChannelTdc[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTdcChannelTdc(void *p) {
      delete ((::HMdcTdcChannelTdc*)p);
   }
   static void deleteArray_HMdcTdcChannelTdc(void *p) {
      delete [] ((::HMdcTdcChannelTdc*)p);
   }
   static void destruct_HMdcTdcChannelTdc(void *p) {
      typedef ::HMdcTdcChannelTdc current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTdcChannelTdc(TBuffer &buf, void *obj) {
      ((::HMdcTdcChannelTdc*)obj)->::HMdcTdcChannelTdc::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTdcChannelTdc

//______________________________________________________________________________
void HMdcPPEvtFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcPPEvtFilter.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcPPEvtFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcPPEvtFilter.
      TClass *R__cl = ::HMdcPPEvtFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rtdb", &rtdb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catmHMdcSeg", &catmHMdcSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mdcseg", &mdcseg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mdcsegiter", &mdcsegiter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catmHMdcClus", &catmHMdcClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mdcclus", &mdcclus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mdcclusiter", &mdcclusiter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "title[300]", title);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name[300]", name);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xtitle[300]", xtitle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ytitle[300]", ytitle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ztitle[300]", ztitle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histtanthetamult", &histtanthetamult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histphidiff", &histphidiff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histphidiffcut", &histphidiffcut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histtanthetamultcut", &histtanthetamultcut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histchithetacut", &histchithetacut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histchitheta", &histchitheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histchiphicut", &histchiphicut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histchiphi", &histchiphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canv1", &canv1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canv2", &canv2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canv3", &canv3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histFileDir", &histFileDir);
      R__insp.InspectMember(histFileDir, "histFileDir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histFileSuffix", &histFileSuffix);
      R__insp.InspectMember(histFileSuffix, "histFileSuffix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histFileOption", &histFileOption);
      R__insp.InspectMember(histFileOption, "histFileOption.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histFile", &histFile);
      R__insp.InspectMember(histFile, "histFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "psFile", &psFile);
      R__insp.InspectMember(psFile, "psFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flNmWoExt", &flNmWoExt);
      R__insp.InspectMember(flNmWoExt, "flNmWoExt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "saveHist", &saveHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "saveCanv", &saveCanv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "savePSFile", &savePSFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagcategory", &flagcategory);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector[200]", sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phishift[6]", phishift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta[200]", theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi[200]", phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phidiff", &phidiff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tanthetamult", &tanthetamult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phimin", &phimin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phimax", &phimax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tanthetamin", &tanthetamin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tanthetamax", &tanthetamax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiwidth", &phiwidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tanthetawidth", &tanthetawidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tanthetamean", &tanthetamean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phimean", &phimean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multiplicity", &multiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsElasticFlag", &IsElasticFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrigBit", &TrigBit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2[200]", chi2);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcPPEvtFilter(void *p) {
      return  p ? new(p) ::HMdcPPEvtFilter : new ::HMdcPPEvtFilter;
   }
   static void *newArray_HMdcPPEvtFilter(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcPPEvtFilter[nElements] : new ::HMdcPPEvtFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcPPEvtFilter(void *p) {
      delete ((::HMdcPPEvtFilter*)p);
   }
   static void deleteArray_HMdcPPEvtFilter(void *p) {
      delete [] ((::HMdcPPEvtFilter*)p);
   }
   static void destruct_HMdcPPEvtFilter(void *p) {
      typedef ::HMdcPPEvtFilter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcPPEvtFilter(TBuffer &buf, void *obj) {
      ((::HMdcPPEvtFilter*)obj)->::HMdcPPEvtFilter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcPPEvtFilter

//______________________________________________________________________________
void HMdcBitFlipCor::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcBitFlipCor.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcBitFlipCor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcBitFlipCor.
      TClass *R__cl = ::HMdcBitFlipCor::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rtdb", &rtdb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catmHMdcRaw", &catmHMdcRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mdcraw", &mdcraw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mdcrawiter", &mdcrawiter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catmHMdcRawEventHeader", &catmHMdcRawEventHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rawREH", &rawREH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterREH", &iterREH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rawcorCat", &rawcorCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rawcor", &rawcor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcBitFlipCorPar", &fMdcBitFlipCorPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rootoutputfile", &rootoutputfile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rootoutputfilename", &rootoutputfilename);
      R__insp.InspectMember(rootoutputfilename, "rootoutputfilename.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*asciioutputfile", &asciioutputfile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "asciioutputfilename", &asciioutputfilename);
      R__insp.InspectMember(asciioutputfilename, "asciioutputfilename.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "title[300]", title);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name[300]", name);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xtitle[300]", xtitle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ytitle[300]", ytitle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ztitle[300]", ztitle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histtime1b[6][4][16]", &histtime1b);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histtime1g[6][4][16]", &histtime1g);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histtime2b[6][4][16]", &histtime2b);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histtime2g[6][4][16]", &histtime2g);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mbo", &mbo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdc", &tdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time1", &time1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time2", &time2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trigtype", &trigtype);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "paramsbitcorrection[6][4][16][9]", paramsbitcorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phist", &phist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prawcor", &prawcor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "counterevents[6][4][16]", counterevents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "countersavedtime1[6][4][16]", countersavedtime1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "countersavedtime2[6][4][16]", countersavedtime2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ratiosaved", &ratiosaved);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcBitFlipCor(void *p) {
      return  p ? new(p) ::HMdcBitFlipCor : new ::HMdcBitFlipCor;
   }
   static void *newArray_HMdcBitFlipCor(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcBitFlipCor[nElements] : new ::HMdcBitFlipCor[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcBitFlipCor(void *p) {
      delete ((::HMdcBitFlipCor*)p);
   }
   static void deleteArray_HMdcBitFlipCor(void *p) {
      delete [] ((::HMdcBitFlipCor*)p);
   }
   static void destruct_HMdcBitFlipCor(void *p) {
      typedef ::HMdcBitFlipCor current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcBitFlipCor(TBuffer &buf, void *obj) {
      ((::HMdcBitFlipCor*)obj)->::HMdcBitFlipCor::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcBitFlipCor

//______________________________________________________________________________
void HMdcBitFlipCorPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcBitFlipCorPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      bitshiftcorfactor.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HMdcBitFlipCorPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcBitFlipCorPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      bitshiftcorfactor.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcBitFlipCorPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcBitFlipCorPar.
      TClass *R__cl = ::HMdcBitFlipCorPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bitshiftcorfactor", &bitshiftcorfactor);
      R__insp.InspectMember(bitshiftcorfactor, "bitshiftcorfactor.");
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcBitFlipCorPar(void *p) {
      return  p ? new(p) ::HMdcBitFlipCorPar : new ::HMdcBitFlipCorPar;
   }
   static void *newArray_HMdcBitFlipCorPar(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcBitFlipCorPar[nElements] : new ::HMdcBitFlipCorPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcBitFlipCorPar(void *p) {
      delete ((::HMdcBitFlipCorPar*)p);
   }
   static void deleteArray_HMdcBitFlipCorPar(void *p) {
      delete [] ((::HMdcBitFlipCorPar*)p);
   }
   static void destruct_HMdcBitFlipCorPar(void *p) {
      typedef ::HMdcBitFlipCorPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcBitFlipCorPar(TBuffer &buf, void *obj) {
      ((::HMdcBitFlipCorPar*)obj)->::HMdcBitFlipCorPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcBitFlipCorPar

//______________________________________________________________________________
void HMdcRawCor::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcRawCor.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> flagraw;
      R__b >> rawshift1;
      R__b >> rawshift2;
      R__b >> rawshift3;
      R__b >> rawshift4;
      R__b >> rawshift5;
      R__b >> rawshift6;
      R__b >> sector;
      R__b >> module;
      R__b >> mbo;
      R__b >> tdc;
      R__b.CheckByteCount(R__s, R__c, HMdcRawCor::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcRawCor::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << flagraw;
      R__b << rawshift1;
      R__b << rawshift2;
      R__b << rawshift3;
      R__b << rawshift4;
      R__b << rawshift5;
      R__b << rawshift6;
      R__b << sector;
      R__b << module;
      R__b << mbo;
      R__b << tdc;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcRawCor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcRawCor.
      TClass *R__cl = ::HMdcRawCor::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagraw", &flagraw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawshift1", &rawshift1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawshift2", &rawshift2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawshift3", &rawshift3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawshift4", &rawshift4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawshift5", &rawshift5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawshift6", &rawshift6);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mbo", &mbo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdc", &tdc);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcRawCor(void *p) {
      return  p ? new(p) ::HMdcRawCor : new ::HMdcRawCor;
   }
   static void *newArray_HMdcRawCor(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcRawCor[nElements] : new ::HMdcRawCor[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcRawCor(void *p) {
      delete ((::HMdcRawCor*)p);
   }
   static void deleteArray_HMdcRawCor(void *p) {
      delete [] ((::HMdcRawCor*)p);
   }
   static void destruct_HMdcRawCor(void *p) {
      typedef ::HMdcRawCor current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcRawCor(TBuffer &buf, void *obj) {
      ((::HMdcRawCor*)obj)->::HMdcRawCor::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcRawCor

//______________________________________________________________________________
void HMdcUnpackerPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcUnpackerPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> decodeVersion;
      R__b >> tdcMode;
      R__b >> doAddrCorr;
      R__b >> mapOutUnusedChannels;
      R__b.CheckByteCount(R__s, R__c, HMdcUnpackerPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcUnpackerPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << decodeVersion;
      R__b << tdcMode;
      R__b << doAddrCorr;
      R__b << mapOutUnusedChannels;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcUnpackerPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcUnpackerPar.
      TClass *R__cl = ::HMdcUnpackerPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "decodeVersion", &decodeVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcMode", &tdcMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doAddrCorr", &doAddrCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mapOutUnusedChannels", &mapOutUnusedChannels);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcUnpackerPar(void *p) {
      return  p ? new(p) ::HMdcUnpackerPar : new ::HMdcUnpackerPar;
   }
   static void *newArray_HMdcUnpackerPar(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcUnpackerPar[nElements] : new ::HMdcUnpackerPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcUnpackerPar(void *p) {
      delete ((::HMdcUnpackerPar*)p);
   }
   static void deleteArray_HMdcUnpackerPar(void *p) {
      delete [] ((::HMdcUnpackerPar*)p);
   }
   static void destruct_HMdcUnpackerPar(void *p) {
      typedef ::HMdcUnpackerPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcUnpackerPar(TBuffer &buf, void *obj) {
      ((::HMdcUnpackerPar*)obj)->::HMdcUnpackerPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcUnpackerPar

//______________________________________________________________________________
void HMdcOepAddrCorrPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcOepAddrCorrPar.
      TClass *R__cl = ::HMdcOepAddrCorrPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "address", (void*)&address);
      R__insp.InspectMember("map<Int_t,Int_t>", (void*)&address, "address.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AddressLookupMap", &AddressLookupMap);
      R__insp.InspectMember(AddressLookupMap, "AddressLookupMap.");
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcOepAddrCorrPar(void *p) {
      return  p ? new(p) ::HMdcOepAddrCorrPar : new ::HMdcOepAddrCorrPar;
   }
   static void *newArray_HMdcOepAddrCorrPar(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcOepAddrCorrPar[nElements] : new ::HMdcOepAddrCorrPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcOepAddrCorrPar(void *p) {
      delete ((::HMdcOepAddrCorrPar*)p);
   }
   static void deleteArray_HMdcOepAddrCorrPar(void *p) {
      delete [] ((::HMdcOepAddrCorrPar*)p);
   }
   static void destruct_HMdcOepAddrCorrPar(void *p) {
      typedef ::HMdcOepAddrCorrPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcOepAddrCorrPar(TBuffer &buf, void *obj) {
      ((::HMdcOepAddrCorrPar*)obj)->::HMdcOepAddrCorrPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcOepAddrCorrPar

//______________________________________________________________________________
void HMdcOepStatusData::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcOepStatusData.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> address;
      R__b.ReadStaticArray((int*)data);
      R__b.CheckByteCount(R__s, R__c, HMdcOepStatusData::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcOepStatusData::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << address;
      R__b.WriteArray(data, 32);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcOepStatusData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcOepStatusData.
      TClass *R__cl = ::HMdcOepStatusData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "address", &address);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data[32]", data);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcOepStatusData(void *p) {
      return  p ? new(p) ::HMdcOepStatusData : new ::HMdcOepStatusData;
   }
   static void *newArray_HMdcOepStatusData(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcOepStatusData[nElements] : new ::HMdcOepStatusData[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcOepStatusData(void *p) {
      delete ((::HMdcOepStatusData*)p);
   }
   static void deleteArray_HMdcOepStatusData(void *p) {
      delete [] ((::HMdcOepStatusData*)p);
   }
   static void destruct_HMdcOepStatusData(void *p) {
      typedef ::HMdcOepStatusData current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcOepStatusData(TBuffer &buf, void *obj) {
      ((::HMdcOepStatusData*)obj)->::HMdcOepStatusData::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcOepStatusData

/********************************************************
* ../build/pc/MdcDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMdcDict();

extern "C" void G__set_cpp_environmentMdcDict() {
  G__cpp_reset_tagtableMdcDict();
}
#include <new>
extern "C" int G__cpp_dllrevMdcDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HMdcRaw */
static int G__MdcDict_316_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRaw* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRaw[n];
     } else {
       p = new((void*) gvp) HMdcRaw[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRaw;
     } else {
       p = new((void*) gvp) HMdcRaw;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRaw*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRaw*) G__getstructoffset())->setSector((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRaw*) G__getstructoffset())->setModule((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRaw*) G__getstructoffset())->setMbo((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRaw*) G__getstructoffset())->setTdc((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRaw*) G__getstructoffset())->setAddress((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HMdcRaw*) G__getstructoffset())->setTime((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HMdcRaw*) G__getstructoffset())->setTime((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HMdcRaw*) G__getstructoffset())->setTime((const Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcRaw*) G__getstructoffset())->setTimeNew((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcRaw*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcRaw*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcRaw*) G__getstructoffset())->getMbo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcRaw*) G__getstructoffset())->getTdc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRaw*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcRaw*) G__getstructoffset())->getNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcRaw*) G__getstructoffset())->getNTrialsToFillHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcRaw*) G__getstructoffset())->getTime((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcRaw::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRaw::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcRaw::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcRaw::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRaw*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRaw::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRaw::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRaw::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_316_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRaw::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_316_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcRaw* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcRaw(*(HMdcRaw*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcRaw G__THMdcRaw;
static int G__MdcDict_316_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcRaw*) (soff+(sizeof(HMdcRaw)*i)))->~G__THMdcRaw();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcRaw*) (soff))->~G__THMdcRaw();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_316_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRaw* dest = (HMdcRaw*) G__getstructoffset();
   *dest = *(HMdcRaw*) libp->para[0].ref;
   const HMdcRaw& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcRawCor */
static int G__MdcDict_317_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRawCor* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRawCor[n];
     } else {
       p = new((void*) gvp) HMdcRawCor[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRawCor;
     } else {
       p = new((void*) gvp) HMdcRawCor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawCor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawCor*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawCor*) G__getstructoffset())->setAddress((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawCor*) G__getstructoffset())->setFlagRaw((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcRawCor*) G__getstructoffset())->getFlagRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawCor*) G__getstructoffset())->setTimeShift((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcRawCor*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcRawCor*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcRawCor*) G__getstructoffset())->getMbo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcRawCor*) G__getstructoffset())->getTdc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawCor*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcRawCor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawCor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcRawCor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcRawCor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawCor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawCor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRawCor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawCor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_317_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRawCor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_317_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcRawCor* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcRawCor(*(HMdcRawCor*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawCor));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcRawCor G__THMdcRawCor;
static int G__MdcDict_317_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcRawCor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcRawCor*) (soff+(sizeof(HMdcRawCor)*i)))->~G__THMdcRawCor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcRawCor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcRawCor*) (soff))->~G__THMdcRawCor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_317_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRawCor* dest = (HMdcRawCor*) G__getstructoffset();
   *dest = *(HMdcRawCor*) libp->para[0].ref;
   const HMdcRawCor& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcRawEventHeader */
static int G__MdcDict_323_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRawEventHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRawEventHeader[n];
     } else {
       p = new((void*) gvp) HMdcRawEventHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRawEventHeader;
     } else {
       p = new((void*) gvp) HMdcRawEventHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawEventHeader*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawEventHeader*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawEventHeader*) G__getstructoffset())->set(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawEventHeader*) G__getstructoffset())->setErrorWord((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawEventHeader*) G__getstructoffset())->setModule((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawEventHeader*) G__getstructoffset())->setRoc((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawEventHeader*) G__getstructoffset())->setSector((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawEventHeader*) G__getstructoffset())->setSubEvtId((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawEventHeader*) G__getstructoffset())->setSubEvtSize((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawEventHeader*) G__getstructoffset())->setTriggerType((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcRawEventHeader*) G__getstructoffset())->getErrorWord());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcRawEventHeader*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcRawEventHeader*) G__getstructoffset())->getRoc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcRawEventHeader*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcRawEventHeader*) G__getstructoffset())->getSubEvtId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcRawEventHeader*) G__getstructoffset())->getSubEvtSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcRawEventHeader*) G__getstructoffset())->getTriggerType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcRawEventHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawEventHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcRawEventHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcRawEventHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawEventHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawEventHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRawEventHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawEventHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_323_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRawEventHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_323_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcRawEventHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcRawEventHeader(*(HMdcRawEventHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawEventHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcRawEventHeader G__THMdcRawEventHeader;
static int G__MdcDict_323_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcRawEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcRawEventHeader*) (soff+(sizeof(HMdcRawEventHeader)*i)))->~G__THMdcRawEventHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcRawEventHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcRawEventHeader*) (soff))->~G__THMdcRawEventHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_323_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRawEventHeader* dest = (HMdcRawEventHeader*) G__getstructoffset();
   *dest = *(HMdcRawEventHeader*) libp->para[0].ref;
   const HMdcRawEventHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcGeomPar */
static int G__MdcDict_325_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeomPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeomPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcGeomPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcGeomPar[n];
       } else {
         p = new((void*) gvp) HMdcGeomPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcGeomPar;
       } else {
         p = new((void*) gvp) HMdcGeomPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_325_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeomPar*) G__getstructoffset())->shiftLayerTransToCenter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_325_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcGeomPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_325_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeomPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_325_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcGeomPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_325_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGeomPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_325_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeomPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_325_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeomPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_325_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeomPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_325_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeomPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_325_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeomPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_325_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcGeomPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcGeomPar(*(HMdcGeomPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcGeomPar G__THMdcGeomPar;
static int G__MdcDict_325_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcGeomPar*) (soff+(sizeof(HMdcGeomPar)*i)))->~G__THMdcGeomPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcGeomPar*) (soff))->~G__THMdcGeomPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_325_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeomPar* dest = (HMdcGeomPar*) G__getstructoffset();
   *dest = *(HMdcGeomPar*) libp->para[0].ref;
   const HMdcGeomPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcDetector */
static int G__MdcDict_327_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDetector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDetector[n];
     } else {
       p = new((void*) gvp) HMdcDetector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDetector;
     } else {
       p = new((void*) gvp) HMdcDetector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_327_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcDetector*) G__getstructoffset())->buildLinearCategory((const Text_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_327_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcDetector*) G__getstructoffset())->buildMatrixCategory((const Text_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_327_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDetector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_327_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDetector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_327_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcDetector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_327_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDetector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_327_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDetector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_327_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDetector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_327_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDetector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_327_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDetector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_327_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDetector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_327_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcDetector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcDetector(*(HMdcDetector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcDetector G__THMdcDetector;
static int G__MdcDict_327_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcDetector*) (soff+(sizeof(HMdcDetector)*i)))->~G__THMdcDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcDetector*) (soff))->~G__THMdcDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_327_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDetector* dest = (HMdcDetector*) G__getstructoffset();
   *dest = *(HMdcDetector*) libp->para[0].ref;
   const HMdcDetector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcBitFlipCorPar */
static int G__MdcDict_328_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcBitFlipCorPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcBitFlipCorPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcBitFlipCorPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcBitFlipCorPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcBitFlipCorPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcBitFlipCorPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcBitFlipCorPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcBitFlipCorPar[n];
       } else {
         p = new((void*) gvp) HMdcBitFlipCorPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcBitFlipCorPar;
       } else {
         p = new((void*) gvp) HMdcBitFlipCorPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCorPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_328_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcBitFlipCorPar*) G__getstructoffset())->getBitFlipCorParameter((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_328_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcBitFlipCorPar*) G__getstructoffset())->setBitFlipCorParameter((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_328_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcBitFlipCorPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_328_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcBitFlipCorPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_328_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcBitFlipCorPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_328_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcBitFlipCorPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_328_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcBitFlipCorPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_328_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcBitFlipCorPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_328_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcBitFlipCorPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_328_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBitFlipCorPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_328_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcBitFlipCorPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_328_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBitFlipCorPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_328_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcBitFlipCorPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcBitFlipCorPar(*(HMdcBitFlipCorPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCorPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcBitFlipCorPar G__THMdcBitFlipCorPar;
static int G__MdcDict_328_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcBitFlipCorPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcBitFlipCorPar*) (soff+(sizeof(HMdcBitFlipCorPar)*i)))->~G__THMdcBitFlipCorPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcBitFlipCorPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcBitFlipCorPar*) (soff))->~G__THMdcBitFlipCorPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_328_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcBitFlipCorPar* dest = (HMdcBitFlipCorPar*) G__getstructoffset();
   *dest = *(HMdcBitFlipCorPar*) libp->para[0].ref;
   const HMdcBitFlipCorPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcBitFlipCor */
static int G__MdcDict_329_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcBitFlipCor* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcBitFlipCor(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcBitFlipCor(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcBitFlipCor(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcBitFlipCor(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcBitFlipCor((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcBitFlipCor((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcBitFlipCor* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcBitFlipCor[n];
     } else {
       p = new((void*) gvp) HMdcBitFlipCor[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcBitFlipCor;
     } else {
       p = new((void*) gvp) HMdcBitFlipCor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcBitFlipCor*) G__getstructoffset())->setRootOutputFilename(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcBitFlipCor*) G__getstructoffset())->setAsciiOutputFilename(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcBitFlipCor*) G__getstructoffset())->getParameterContainers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcBitFlipCor*) G__getstructoffset())->createHists();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcBitFlipCor*) G__getstructoffset())->initVariables();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcBitFlipCor*) G__getstructoffset())->fparamsbitcorrection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcBitFlipCor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcBitFlipCor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcBitFlipCor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcBitFlipCor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcBitFlipCor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcBitFlipCor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBitFlipCor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcBitFlipCor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_329_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcBitFlipCor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcBitFlipCor G__THMdcBitFlipCor;
static int G__MdcDict_329_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcBitFlipCor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcBitFlipCor*) (soff+(sizeof(HMdcBitFlipCor)*i)))->~G__THMdcBitFlipCor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcBitFlipCor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcBitFlipCor*) (soff))->~G__THMdcBitFlipCor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCal1 */
static int G__MdcDict_334_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal1* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal1[n];
     } else {
       p = new((void*) gvp) HMdcCal1[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal1;
     } else {
       p = new((void*) gvp) HMdcCal1;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1*) G__getstructoffset())->setSector((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1*) G__getstructoffset())->setModule((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1*) G__getstructoffset())->setLayer((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1*) G__getstructoffset())->setCell((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1*) G__getstructoffset())->setAddress((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1*) G__getstructoffset())->setNHits((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1*) G__getstructoffset())->setTime1((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1*) G__getstructoffset())->setTime2((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal1*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal1*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal1*) G__getstructoffset())->getLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal1*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal1*) G__getstructoffset())->getNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcCal1*) G__getstructoffset())->getTime1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcCal1*) G__getstructoffset())->getTime2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCal1::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal1::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCal1::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCal1::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal1::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal1::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal1::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_334_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal1::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_334_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCal1* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCal1(*(HMdcCal1*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCal1 G__THMdcCal1;
static int G__MdcDict_334_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCal1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCal1*) (soff+(sizeof(HMdcCal1)*i)))->~G__THMdcCal1();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCal1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCal1*) (soff))->~G__THMdcCal1();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_334_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal1* dest = (HMdcCal1*) G__getstructoffset();
   *dest = *(HMdcCal1*) libp->para[0].ref;
   const HMdcCal1& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCal1Sim */
static int G__MdcDict_335_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal1Sim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal1Sim[n];
     } else {
       p = new((void*) gvp) HMdcCal1Sim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal1Sim;
     } else {
       p = new((void*) gvp) HMdcCal1Sim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1Sim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setNTrack1((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setNTrack2((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setStatus1((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setStatus2((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setAngle1((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setAngle2((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setMinDist1((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setMinDist2((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setError1((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setError2((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setTof1((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setTof2((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setWireOffset1((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setWireOffset2((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcCal1Sim*) G__getstructoffset())->resetTrackList((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcCal1Sim*) G__getstructoffset())->resetTrackList();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setTrackList((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setTrackList((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->getTrackList((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcCal1Sim*) G__getstructoffset())->resetStatusList((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcCal1Sim*) G__getstructoffset())->resetStatusList();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setStatusList((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->setStatusList((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->getStatusList((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal1Sim*) G__getstructoffset())->getNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HMdcCal1Sim*) G__getstructoffset())->getStatusList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HMdcCal1Sim*) G__getstructoffset())->getTrackList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal1Sim*) G__getstructoffset())->getTrackFromList((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal1Sim*) G__getstructoffset())->getStatusFromList((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal1Sim*) G__getstructoffset())->getNTrack1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal1Sim*) G__getstructoffset())->getNTrack2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal1Sim*) G__getstructoffset())->getStatus1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal1Sim*) G__getstructoffset())->getStatus2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal1Sim*) G__getstructoffset())->getStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcCal1Sim*) G__getstructoffset())->getAngle1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcCal1Sim*) G__getstructoffset())->getAngle2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcCal1Sim*) G__getstructoffset())->getMinDist1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcCal1Sim*) G__getstructoffset())->getMinDist2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcCal1Sim*) G__getstructoffset())->getError1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcCal1Sim*) G__getstructoffset())->getError2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcCal1Sim*) G__getstructoffset())->getTof1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcCal1Sim*) G__getstructoffset())->getTof2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcCal1Sim*) G__getstructoffset())->getWireOffset1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcCal1Sim*) G__getstructoffset())->getWireOffset2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCal1Sim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal1Sim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCal1Sim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCal1Sim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal1Sim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal1Sim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal1Sim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal1Sim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_335_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal1Sim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_335_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCal1Sim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCal1Sim(*(HMdcCal1Sim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1Sim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCal1Sim G__THMdcCal1Sim;
static int G__MdcDict_335_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCal1Sim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCal1Sim*) (soff+(sizeof(HMdcCal1Sim)*i)))->~G__THMdcCal1Sim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCal1Sim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCal1Sim*) (soff))->~G__THMdcCal1Sim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_335_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal1Sim* dest = (HMdcCal1Sim*) G__getstructoffset();
   *dest = *(HMdcCal1Sim*) libp->para[0].ref;
   const HMdcCal1Sim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCal2 */
static int G__MdcDict_336_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2[n];
     } else {
       p = new((void*) gvp) HMdcCal2[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2;
     } else {
       p = new((void*) gvp) HMdcCal2;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2*) G__getstructoffset())->setSector((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2*) G__getstructoffset())->setModule((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2*) G__getstructoffset())->setLayer((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2*) G__getstructoffset())->setCell((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2*) G__getstructoffset())->setAddress((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2*) G__getstructoffset())->setDist1((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2*) G__getstructoffset())->setDist2((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2*) G__getstructoffset())->setNHits((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal2*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal2*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal2*) G__getstructoffset())->getLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal2*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal2*) G__getstructoffset())->getNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2*) G__getstructoffset())->getDist1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2*) G__getstructoffset())->getDist2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2*) G__getstructoffset())->getErrDist1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2*) G__getstructoffset())->getErrDist2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCal2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCal2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCal2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_336_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_336_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCal2* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCal2(*(HMdcCal2*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCal2 G__THMdcCal2;
static int G__MdcDict_336_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCal2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCal2*) (soff+(sizeof(HMdcCal2)*i)))->~G__THMdcCal2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCal2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCal2*) (soff))->~G__THMdcCal2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_336_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2* dest = (HMdcCal2*) G__getstructoffset();
   *dest = *(HMdcCal2*) libp->para[0].ref;
   const HMdcCal2& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCal2ParSim */
static int G__MdcDict_338_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2ParSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParSim(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcCal2ParSim(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParSim(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcCal2ParSim(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParSim((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcCal2ParSim((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParSim((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCal2ParSim((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCal2ParSim[n];
       } else {
         p = new((void*) gvp) HMdcCal2ParSim[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCal2ParSim;
       } else {
         p = new((void*) gvp) HMdcCal2ParSim;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcCal2ParSecSim& obj = ((HMdcCal2ParSim*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParSim*) G__getstructoffset())->setContainerComment(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HMdcCal2ParSim*) G__getstructoffset())->getContainerComment();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParSim*) G__getstructoffset())->printContainerComment();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal2ParSim*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal2ParSim*) G__getstructoffset())->getNumberOfLines());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal2ParSim*) G__getstructoffset())->getNumberOfBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParSim*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParSim*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcCal2ParSim*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcCal2ParSim*) G__getstructoffset())->calcTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcCal2ParSim*) G__getstructoffset())->calcTimeErr((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParSim*) G__getstructoffset())->calcTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParSim*) G__getstructoffset())->calcTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParSim*) G__getstructoffset())->calcTimeErr((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParSim*) G__getstructoffset())->calcTime2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParSim*) G__getstructoffset())->calcTime2Err((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParSim*) G__getstructoffset())->calcDriftVelocity((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParSim*) G__getstructoffset())->calcResolution((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParSim*) G__getstructoffset())->calcTimeDigitizer((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Float_t*) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParSim*) G__getstructoffset())->calcTime2Digitizer((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Float_t*) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParSim*) G__getstructoffset())->transformToDistance((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (HMdcCal2Par*) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParSim*) G__getstructoffset())->plot((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParSim*) G__getstructoffset())->plot2D((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParSim*) G__getstructoffset())->getSlopeOutside());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HMdcCal2ParSim*) G__getstructoffset())->setScalerTime1Err((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HMdcCal2ParSim*) G__getstructoffset())->setScalerTime1Err((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcCal2ParSim*) G__getstructoffset())->setScalerTime1Err((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcCal2ParSim*) G__getstructoffset())->setScalerTime1Err((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcCal2ParSim*) G__getstructoffset())->setScalerTime1Err();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HMdcCal2ParSim*) G__getstructoffset())->setConstantTime1Err((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HMdcCal2ParSim*) G__getstructoffset())->setConstantTime1Err((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcCal2ParSim*) G__getstructoffset())->setConstantTime1Err((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcCal2ParSim*) G__getstructoffset())->setConstantTime1Err((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcCal2ParSim*) G__getstructoffset())->setConstantTime1Err();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((HMdcCal2ParSim*) G__getstructoffset())->setConstantVD(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((HMdcCal2ParSim*) G__getstructoffset())->setConstantVD(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((HMdcCal2ParSim*) G__getstructoffset())->setConstantVD((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((HMdcCal2ParSim*) G__getstructoffset())->setConstantVD((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HMdcCal2ParSim*) G__getstructoffset())->setConstantVD((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HMdcCal2ParSim*) G__getstructoffset())->setConstantVD((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcCal2ParSim*) G__getstructoffset())->setConstantVD((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcCal2ParSim*) G__getstructoffset())->setConstantVD((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcCal2ParSim*) G__getstructoffset())->setConstantVD();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParSim*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCal2ParSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCal2ParSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCal2ParSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2ParSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_338_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2ParSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_338_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCal2ParSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCal2ParSim(*(HMdcCal2ParSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCal2ParSim G__THMdcCal2ParSim;
static int G__MdcDict_338_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCal2ParSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCal2ParSim*) (soff+(sizeof(HMdcCal2ParSim)*i)))->~G__THMdcCal2ParSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCal2ParSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCal2ParSim*) (soff))->~G__THMdcCal2ParSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_338_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2ParSim* dest = (HMdcCal2ParSim*) G__getstructoffset();
   *dest = *(HMdcCal2ParSim*) libp->para[0].ref;
   const HMdcCal2ParSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCal2ParAngle */
static int G__MdcDict_339_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2ParAngle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParAngle[n];
     } else {
       p = new((void*) gvp) HMdcCal2ParAngle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParAngle;
     } else {
       p = new((void*) gvp) HMdcCal2ParAngle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngle*) G__getstructoffset())->setDistance((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngle*) G__getstructoffset())->setDistanceError((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParAngle*) G__getstructoffset())->getDistance((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParAngle*) G__getstructoffset())->getDistanceError((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngle*) G__getstructoffset())->fillDistance(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngle*) G__getstructoffset())->fillDistanceError(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngle*) G__getstructoffset())->fillDistance(*(HMdcCal2ParAngle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngle*) G__getstructoffset())->fillDistanceError(*(HMdcCal2ParAngle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngle*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCal2ParAngle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParAngle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCal2ParAngle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCal2ParAngle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParAngle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2ParAngle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParAngle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_339_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2ParAngle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_339_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCal2ParAngle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCal2ParAngle(*(HMdcCal2ParAngle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCal2ParAngle G__THMdcCal2ParAngle;
static int G__MdcDict_339_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCal2ParAngle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCal2ParAngle*) (soff+(sizeof(HMdcCal2ParAngle)*i)))->~G__THMdcCal2ParAngle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCal2ParAngle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCal2ParAngle*) (soff))->~G__THMdcCal2ParAngle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_339_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2ParAngle* dest = (HMdcCal2ParAngle*) G__getstructoffset();
   *dest = *(HMdcCal2ParAngle*) libp->para[0].ref;
   const HMdcCal2ParAngle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCal2ParSecSim */
static int G__MdcDict_340_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2ParSecSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParSecSim((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcCal2ParSecSim((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParSecSim((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCal2ParSecSim((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCal2ParSecSim[n];
       } else {
         p = new((void*) gvp) HMdcCal2ParSecSim[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCal2ParSecSim;
       } else {
         p = new((void*) gvp) HMdcCal2ParSecSim;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSecSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_340_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcCal2ParModSim& obj = ((HMdcCal2ParSecSim*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_340_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal2ParSecSim*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_340_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCal2ParSecSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_340_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParSecSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_340_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCal2ParSecSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_340_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCal2ParSecSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_340_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParSecSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_340_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParSecSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_340_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2ParSecSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_340_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParSecSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_340_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2ParSecSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_340_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCal2ParSecSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCal2ParSecSim(*(HMdcCal2ParSecSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSecSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCal2ParSecSim G__THMdcCal2ParSecSim;
static int G__MdcDict_340_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCal2ParSecSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCal2ParSecSim*) (soff+(sizeof(HMdcCal2ParSecSim)*i)))->~G__THMdcCal2ParSecSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCal2ParSecSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCal2ParSecSim*) (soff))->~G__THMdcCal2ParSecSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_340_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2ParSecSim* dest = (HMdcCal2ParSecSim*) G__getstructoffset();
   *dest = *(HMdcCal2ParSecSim*) libp->para[0].ref;
   const HMdcCal2ParSecSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCal2ParModSim */
static int G__MdcDict_341_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2ParModSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParModSim(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcCal2ParModSim(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParModSim((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcCal2ParModSim((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParModSim((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCal2ParModSim((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCal2ParModSim[n];
       } else {
         p = new((void*) gvp) HMdcCal2ParModSim[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCal2ParModSim;
       } else {
         p = new((void*) gvp) HMdcCal2ParModSim;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParModSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_341_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcCal2ParAngleSim& obj = ((HMdcCal2ParModSim*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_341_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal2ParModSim*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_341_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCal2ParModSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_341_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParModSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_341_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCal2ParModSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_341_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCal2ParModSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_341_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParModSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_341_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParModSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_341_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2ParModSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_341_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParModSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_341_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2ParModSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_341_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCal2ParModSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCal2ParModSim(*(HMdcCal2ParModSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParModSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCal2ParModSim G__THMdcCal2ParModSim;
static int G__MdcDict_341_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCal2ParModSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCal2ParModSim*) (soff+(sizeof(HMdcCal2ParModSim)*i)))->~G__THMdcCal2ParModSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCal2ParModSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCal2ParModSim*) (soff))->~G__THMdcCal2ParModSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_341_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2ParModSim* dest = (HMdcCal2ParModSim*) G__getstructoffset();
   *dest = *(HMdcCal2ParModSim*) libp->para[0].ref;
   const HMdcCal2ParModSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCal2Par */
static int G__MdcDict_342_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2Par* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2Par(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcCal2Par(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2Par(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcCal2Par(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2Par((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcCal2Par((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2Par((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCal2Par((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCal2Par[n];
       } else {
         p = new((void*) gvp) HMdcCal2Par[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCal2Par;
       } else {
         p = new((void*) gvp) HMdcCal2Par;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Par));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcCal2ParSec& obj = ((HMdcCal2Par*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Par*) G__getstructoffset())->setContainerComment(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HMdcCal2Par*) G__getstructoffset())->getContainerComment();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Par*) G__getstructoffset())->printContainerComment();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal2Par*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal2Par*) G__getstructoffset())->getNumberOfLines());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Par*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcCal2Par*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcCal2Par*) G__getstructoffset())->calcDistance((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcCal2Par*) G__getstructoffset())->calcDistanceErr((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Par*) G__getstructoffset())->calcDistance((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Par*) G__getstructoffset())->plot((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Par*) G__getstructoffset())->plot2D((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Par*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCal2Par::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2Par::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCal2Par::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCal2Par::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Par*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2Par::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2Par::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2Par::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_342_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2Par::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_342_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCal2Par* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCal2Par(*(HMdcCal2Par*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Par));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCal2Par G__THMdcCal2Par;
static int G__MdcDict_342_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCal2Par*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCal2Par*) (soff+(sizeof(HMdcCal2Par)*i)))->~G__THMdcCal2Par();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCal2Par*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCal2Par*) (soff))->~G__THMdcCal2Par();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_342_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2Par* dest = (HMdcCal2Par*) G__getstructoffset();
   *dest = *(HMdcCal2Par*) libp->para[0].ref;
   const HMdcCal2Par& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCal2ParSec */
static int G__MdcDict_343_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2ParSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParSec((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcCal2ParSec((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParSec((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCal2ParSec((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCal2ParSec[n];
       } else {
         p = new((void*) gvp) HMdcCal2ParSec[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCal2ParSec;
       } else {
         p = new((void*) gvp) HMdcCal2ParSec;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_343_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcCal2ParMod& obj = ((HMdcCal2ParSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_343_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal2ParSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_343_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCal2ParSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_343_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_343_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCal2ParSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_343_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCal2ParSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_343_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_343_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_343_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2ParSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_343_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_343_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2ParSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_343_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCal2ParSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCal2ParSec(*(HMdcCal2ParSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCal2ParSec G__THMdcCal2ParSec;
static int G__MdcDict_343_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCal2ParSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCal2ParSec*) (soff+(sizeof(HMdcCal2ParSec)*i)))->~G__THMdcCal2ParSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCal2ParSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCal2ParSec*) (soff))->~G__THMdcCal2ParSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_343_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2ParSec* dest = (HMdcCal2ParSec*) G__getstructoffset();
   *dest = *(HMdcCal2ParSec*) libp->para[0].ref;
   const HMdcCal2ParSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCal2ParMod */
static int G__MdcDict_344_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2ParMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParMod(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcCal2ParMod(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcCal2ParMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParMod((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCal2ParMod((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCal2ParMod[n];
       } else {
         p = new((void*) gvp) HMdcCal2ParMod[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCal2ParMod;
       } else {
         p = new((void*) gvp) HMdcCal2ParMod;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_344_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcCal2ParAngle& obj = ((HMdcCal2ParMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_344_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal2ParMod*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_344_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCal2ParMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_344_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_344_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCal2ParMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_344_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCal2ParMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_344_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_344_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_344_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2ParMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_344_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_344_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2ParMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_344_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCal2ParMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCal2ParMod(*(HMdcCal2ParMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCal2ParMod G__THMdcCal2ParMod;
static int G__MdcDict_344_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCal2ParMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCal2ParMod*) (soff+(sizeof(HMdcCal2ParMod)*i)))->~G__THMdcCal2ParMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCal2ParMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCal2ParMod*) (soff))->~G__THMdcCal2ParMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_344_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2ParMod* dest = (HMdcCal2ParMod*) G__getstructoffset();
   *dest = *(HMdcCal2ParMod*) libp->para[0].ref;
   const HMdcCal2ParMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCal2ParAngleSim */
static int G__MdcDict_345_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2ParAngleSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParAngleSim[n];
     } else {
       p = new((void*) gvp) HMdcCal2ParAngleSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2ParAngleSim;
     } else {
       p = new((void*) gvp) HMdcCal2ParAngleSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngleSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->setDriftTime1((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->setDriftTime2((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->setDriftTime1Error((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->setDriftTime2Error((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParAngleSim*) G__getstructoffset())->getDriftTime1((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParAngleSim*) G__getstructoffset())->getDriftTime2((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParAngleSim*) G__getstructoffset())->getDriftTime1Error((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParAngleSim*) G__getstructoffset())->getDriftTime2Error((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->setDriftTime1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->setDriftTime2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->setDriftTime1Error((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->setDriftTime2Error((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParAngleSim*) G__getstructoffset())->getDriftTime1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParAngleSim*) G__getstructoffset())->getDriftTime2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParAngleSim*) G__getstructoffset())->getDriftTime1Error((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCal2ParAngleSim*) G__getstructoffset())->getDriftTime2Error((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->fillTime1(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->fillTime2(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->fillTime1Error(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->fillTime2Error(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->fillTime1(*(HMdcCal2ParAngleSim*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->fillTime2(*(HMdcCal2ParAngleSim*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->fillTime1Error(*(HMdcCal2ParAngleSim*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->fillTime2Error(*(HMdcCal2ParAngleSim*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCal2ParAngleSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParAngleSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCal2ParAngleSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCal2ParAngleSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2ParAngleSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParAngleSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2ParAngleSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2ParAngleSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_345_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2ParAngleSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_345_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCal2ParAngleSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCal2ParAngleSim(*(HMdcCal2ParAngleSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngleSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCal2ParAngleSim G__THMdcCal2ParAngleSim;
static int G__MdcDict_345_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCal2ParAngleSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCal2ParAngleSim*) (soff+(sizeof(HMdcCal2ParAngleSim)*i)))->~G__THMdcCal2ParAngleSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCal2ParAngleSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCal2ParAngleSim*) (soff))->~G__THMdcCal2ParAngleSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_345_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2ParAngleSim* dest = (HMdcCal2ParAngleSim*) G__getstructoffset();
   *dest = *(HMdcCal2ParAngleSim*) libp->para[0].ref;
   const HMdcCal2ParAngleSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCal2Sim */
static int G__MdcDict_346_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2Sim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2Sim[n];
     } else {
       p = new((void*) gvp) HMdcCal2Sim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCal2Sim;
     } else {
       p = new((void*) gvp) HMdcCal2Sim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Sim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Sim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Sim*) G__getstructoffset())->setNTrack1((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Sim*) G__getstructoffset())->setNTrack2((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Sim*) G__getstructoffset())->setStatus1((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Sim*) G__getstructoffset())->setStatus2((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Sim*) G__getstructoffset())->setTrackList((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Sim*) G__getstructoffset())->getTrackList((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Sim*) G__getstructoffset())->setStatusList((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Sim*) G__getstructoffset())->getStatusList((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal2Sim*) G__getstructoffset())->getNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HMdcCal2Sim*) G__getstructoffset())->getStatusList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HMdcCal2Sim*) G__getstructoffset())->getTrackList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal2Sim*) G__getstructoffset())->getTrackFromList((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCal2Sim*) G__getstructoffset())->getStatusFromList((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal2Sim*) G__getstructoffset())->getNTrack1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal2Sim*) G__getstructoffset())->getNTrack2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal2Sim*) G__getstructoffset())->getStatus1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal2Sim*) G__getstructoffset())->getStatus2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcCal2Sim*) G__getstructoffset())->getStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCal2Sim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2Sim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCal2Sim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCal2Sim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCal2Sim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2Sim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2Sim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCal2Sim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_346_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCal2Sim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_346_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCal2Sim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCal2Sim(*(HMdcCal2Sim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Sim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCal2Sim G__THMdcCal2Sim;
static int G__MdcDict_346_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCal2Sim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCal2Sim*) (soff+(sizeof(HMdcCal2Sim)*i)))->~G__THMdcCal2Sim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCal2Sim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCal2Sim*) (soff))->~G__THMdcCal2Sim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_346_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCal2Sim* dest = (HMdcCal2Sim*) G__getstructoffset();
   *dest = *(HMdcCal2Sim*) libp->para[0].ref;
   const HMdcCal2Sim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCalParRaw */
static int G__MdcDict_347_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCalParRaw* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalParRaw(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcCalParRaw(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalParRaw(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcCalParRaw(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalParRaw((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcCalParRaw((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalParRaw((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCalParRaw((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCalParRaw[n];
       } else {
         p = new((void*) gvp) HMdcCalParRaw[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCalParRaw;
       } else {
         p = new((void*) gvp) HMdcCalParRaw;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcCalParRawSec& obj = ((HMdcCalParRaw*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCalParRaw*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParRaw*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParRaw*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcCalParRaw*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParRaw*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCalParRaw::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParRaw::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCalParRaw::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCalParRaw::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParRaw*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParRaw::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCalParRaw::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParRaw::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_347_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCalParRaw::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_347_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCalParRaw* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCalParRaw(*(HMdcCalParRaw*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCalParRaw G__THMdcCalParRaw;
static int G__MdcDict_347_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCalParRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCalParRaw*) (soff+(sizeof(HMdcCalParRaw)*i)))->~G__THMdcCalParRaw();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCalParRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCalParRaw*) (soff))->~G__THMdcCalParRaw();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_347_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCalParRaw* dest = (HMdcCalParRaw*) G__getstructoffset();
   *dest = *(HMdcCalParRaw*) libp->para[0].ref;
   const HMdcCalParRaw& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookupGeom */
static int G__MdcDict_348_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupGeom* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupGeom(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcLookupGeom(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupGeom(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcLookupGeom(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupGeom((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcLookupGeom((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupGeom((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcLookupGeom((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupGeom[n];
       } else {
         p = new((void*) gvp) HMdcLookupGeom[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupGeom;
       } else {
         p = new((void*) gvp) HMdcLookupGeom;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGeom));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLookupGSec& obj = ((HMdcLookupGeom*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupGeom*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupGeom*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLookupGeom*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookupGeom*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupGeom*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookupGeom::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupGeom::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookupGeom::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookupGeom::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupGeom*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupGeom::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupGeom::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupGeom::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_348_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupGeom::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_348_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookupGeom* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookupGeom(*(HMdcLookupGeom*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGeom));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLookupGeom G__THMdcLookupGeom;
static int G__MdcDict_348_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLookupGeom*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLookupGeom*) (soff+(sizeof(HMdcLookupGeom)*i)))->~G__THMdcLookupGeom();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLookupGeom*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLookupGeom*) (soff))->~G__THMdcLookupGeom();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_348_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupGeom* dest = (HMdcLookupGeom*) G__getstructoffset();
   *dest = *(HMdcLookupGeom*) libp->para[0].ref;
   const HMdcLookupGeom& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTimeCut */
static int G__MdcDict_349_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTimeCut* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTimeCut(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HMdcTimeCut(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTimeCut(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcTimeCut(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTimeCut(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcTimeCut(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTimeCut((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTimeCut((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTimeCut((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTimeCut((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTimeCut[n];
       } else {
         p = new((void*) gvp) HMdcTimeCut[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTimeCut;
       } else {
         p = new((void*) gvp) HMdcTimeCut;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->setIsUsed((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCut*) G__getstructoffset())->getIsUsed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTimeCut::getExObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTimeCut::getObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCut*) G__getstructoffset())->cut((HMdcCal1*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCut*) G__getstructoffset())->cutComStop((HMdcCal1*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCut*) G__getstructoffset())->cutTime1((HMdcCal1*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCut*) G__getstructoffset())->cutTime1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCut*) G__getstructoffset())->cutTime2((HMdcCal1*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCut*) G__getstructoffset())->cutTime2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCut*) G__getstructoffset())->cutTimesDif((HMdcCal1*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCut*) G__getstructoffset())->cutTimesDif((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCut*) G__getstructoffset())->cutBump((HMdcCal1*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCut*) G__getstructoffset())->cutBump((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->setCut(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->setCut(
(Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Float_t*) G__int(libp->para[5])
, (Float_t*) G__int(libp->para[6]), (Float_t*) G__int(libp->para[7])
, (Float_t*) G__int(libp->para[8]), (Float_t*) G__int(libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->setCutTime1((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->setCutTime2((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->setCutDTime21((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->setCutBumpTime1((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->setCutBumpTot((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->setCut(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->setCutTime1((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->setCutTime2((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->setCutDTime21((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->setCutBumpTime1((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->setCutBumpTot((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->getCut(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])
, *(Float_t*) G__Floatref(&libp->para[6]), *(Float_t*) G__Floatref(&libp->para[7])
, *(Float_t*) G__Floatref(&libp->para[8]), *(Float_t*) G__Floatref(&libp->para[9])
, *(Float_t*) G__Floatref(&libp->para[10]), *(Float_t*) G__Floatref(&libp->para[11]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCut*) G__getstructoffset())->getCutT1L((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCut*) G__getstructoffset())->getCutT1R((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCut*) G__getstructoffset())->getCutT2L((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCut*) G__getstructoffset())->getCutT2R((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCut*) G__getstructoffset())->getCutDTime21L((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCut*) G__getstructoffset())->getCutDTime21R((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCut*) G__getstructoffset())->getCutBumpT1L((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCut*) G__getstructoffset())->getCutBumpT1R((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCut*) G__getstructoffset())->getCutBumpTotL((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCut*) G__getstructoffset())->getCutBumpTotR((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCut*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcTimeCutSec& obj = ((HMdcTimeCut*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTimeCut*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTimeCut::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTimeCut::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTimeCut::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTimeCut::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCut*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTimeCut::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTimeCut::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTimeCut::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_349_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTimeCut::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTimeCut G__THMdcTimeCut;
static int G__MdcDict_349_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTimeCut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTimeCut*) (soff+(sizeof(HMdcTimeCut)*i)))->~G__THMdcTimeCut();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTimeCut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTimeCut*) (soff))->~G__THMdcTimeCut();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCutStat */
static int G__MdcDict_350_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCutStat::deleteHMdcCutStat();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCutStat::getExObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCutStat::getObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStat*) G__getstructoffset())->getCal1StatCut(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Int_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t*) G__int(libp->para[6]), (Int_t*) G__int(libp->para[7])
, (Int_t*) G__int(libp->para[8]), (Int_t*) G__int(libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStat*) G__getstructoffset())->setCal1StatCut(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStat*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcCutStat*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcCutStatSec& obj = ((HMdcCutStat*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCutStat*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStat*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCutStat::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCutStat::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCutStat::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCutStat::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStat*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCutStat::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCutStat::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCutStat::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_350_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCutStat::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcWireStat */
static int G__MdcDict_351_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcWireStat* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcWireStat(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcWireStat(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcWireStat((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcWireStat((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcWireStat((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcWireStat((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcWireStat[n];
       } else {
         p = new((void*) gvp) HMdcWireStat[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcWireStat;
       } else {
         p = new((void*) gvp) HMdcWireStat;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcWireStat));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireStat*) G__getstructoffset())->setMbo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireStat*) G__getstructoffset())->setTdc((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireStat*) G__getstructoffset())->setStatus((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireStat*) G__getstructoffset())->setEfficiency((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireStat*) G__getstructoffset())->setOffset((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcWireStat*) G__getstructoffset())->getMbo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcWireStat*) G__getstructoffset())->getTdc((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcWireStat*) G__getstructoffset())->getStatus((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcWireStat*) G__getstructoffset())->getEfficiency((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcWireStat*) G__getstructoffset())->getOffset((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcWireStat*) G__getstructoffset())->getDeadWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcWireStat*) G__getstructoffset())->getDeadWires((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWireStat*) G__getstructoffset())->plotStatusMbVsTdc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWireStat*) G__getstructoffset())->plotEfficiencyMbVsTdc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWireStat*) G__getstructoffset())->plotOffsetMbVsTdc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWireStat*) G__getstructoffset())->plotStatus((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWireStat*) G__getstructoffset())->plotEfficiency((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcWireStat*) G__getstructoffset())->plotOffset((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireStat*) G__getstructoffset())->printStats();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireStat*) G__getstructoffset())->printStatsSum();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireStat*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcWireStat::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWireStat::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcWireStat::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcWireStat::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcWireStat*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWireStat::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcWireStat::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcWireStat::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_351_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcWireStat::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_351_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcWireStat* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcWireStat(*(HMdcWireStat*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcWireStat));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcWireStat G__THMdcWireStat;
static int G__MdcDict_351_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcWireStat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcWireStat*) (soff+(sizeof(HMdcWireStat)*i)))->~G__THMdcWireStat();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcWireStat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcWireStat*) (soff))->~G__THMdcWireStat();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_351_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcWireStat* dest = (HMdcWireStat*) G__getstructoffset();
   *dest = *(HMdcWireStat*) libp->para[0].ref;
   const HMdcWireStat& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCalParTdc */
static int G__MdcDict_352_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCalParTdc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalParTdc[n];
     } else {
       p = new((void*) gvp) HMdcCalParTdc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalParTdc;
     } else {
       p = new((void*) gvp) HMdcCalParTdc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParTdc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCalParTdc*) G__getstructoffset())->getSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCalParTdc*) G__getstructoffset())->getOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCalParTdc*) G__getstructoffset())->getSlopeErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCalParTdc*) G__getstructoffset())->getOffsetErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCalParTdc*) G__getstructoffset())->getSlopeMethod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCalParTdc*) G__getstructoffset())->getOffsetMethod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParTdc*) G__getstructoffset())->fill((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParTdc*) G__getstructoffset())->fill(*(HMdcCalParTdc*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParTdc*) G__getstructoffset())->setSlope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParTdc*) G__getstructoffset())->setOffset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParTdc*) G__getstructoffset())->setSlopeErr((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParTdc*) G__getstructoffset())->setOffsetErr((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParTdc*) G__getstructoffset())->setSlopeMethod((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParTdc*) G__getstructoffset())->setOffsetMethod((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParTdc*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCalParTdc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParTdc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCalParTdc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCalParTdc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParTdc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParTdc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCalParTdc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParTdc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_352_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCalParTdc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_352_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCalParTdc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCalParTdc(*(HMdcCalParTdc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParTdc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCalParTdc G__THMdcCalParTdc;
static int G__MdcDict_352_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCalParTdc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCalParTdc*) (soff+(sizeof(HMdcCalParTdc)*i)))->~G__THMdcCalParTdc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCalParTdc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCalParTdc*) (soff))->~G__THMdcCalParTdc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_352_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCalParTdc* dest = (HMdcCalParTdc*) G__getstructoffset();
   *dest = *(HMdcCalParTdc*) libp->para[0].ref;
   const HMdcCalParTdc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCalibrater1 */
static int G__MdcDict_353_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCalibrater1* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalibrater1[n];
     } else {
       p = new((void*) gvp) HMdcCalibrater1[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalibrater1;
     } else {
       p = new((void*) gvp) HMdcCalibrater1;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCalibrater1* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalibrater1(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HMdcCalibrater1(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalibrater1(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcCalibrater1(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalibrater1(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcCalibrater1(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalibrater1((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcCalibrater1((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1*) G__getstructoffset())->setDoPrint((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcCalibrater1*) G__getstructoffset())->setSkipCal((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcCalibrater1*) G__getstructoffset())->setSkipCal();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcCalibrater1*) G__getstructoffset())->setUseMultCut((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcCalibrater1*) G__getstructoffset())->setUseMultCut((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCalibrater1::setUseWireStat((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1*) G__getstructoffset())->switchArguments((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1*) G__getstructoffset())->setGlobalOffset((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1*) G__getstructoffset())->setSecGlobalOffset((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1*) G__getstructoffset())->setGlobalSlope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1*) G__getstructoffset())->printStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCalibrater1::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalibrater1::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCalibrater1::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCalibrater1::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalibrater1::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCalibrater1::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalibrater1::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_353_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCalibrater1::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCalibrater1 G__THMdcCalibrater1;
static int G__MdcDict_353_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCalibrater1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCalibrater1*) (soff+(sizeof(HMdcCalibrater1)*i)))->~G__THMdcCalibrater1();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCalibrater1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCalibrater1*) (soff))->~G__THMdcCalibrater1();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCalParMbo */
static int G__MdcDict_354_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCalParMbo* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalParMbo((Int_t) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcCalParMbo((Int_t) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalParMbo((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCalParMbo((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCalParMbo[n];
       } else {
         p = new((void*) gvp) HMdcCalParMbo[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCalParMbo;
       } else {
         p = new((void*) gvp) HMdcCalParMbo;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParMbo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_354_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcCalParTdc& obj = ((HMdcCalParMbo*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_354_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCalParMbo*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_354_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCalParMbo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_354_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParMbo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_354_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCalParMbo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_354_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCalParMbo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_354_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParMbo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_354_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParMbo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_354_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCalParMbo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_354_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParMbo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_354_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCalParMbo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_354_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCalParMbo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCalParMbo(*(HMdcCalParMbo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParMbo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCalParMbo G__THMdcCalParMbo;
static int G__MdcDict_354_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCalParMbo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCalParMbo*) (soff+(sizeof(HMdcCalParMbo)*i)))->~G__THMdcCalParMbo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCalParMbo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCalParMbo*) (soff))->~G__THMdcCalParMbo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_354_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCalParMbo* dest = (HMdcCalParMbo*) G__getstructoffset();
   *dest = *(HMdcCalParMbo*) libp->para[0].ref;
   const HMdcCalParMbo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCalParRawMod */
static int G__MdcDict_355_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCalParRawMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalParRawMod((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCalParRawMod((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCalParRawMod[n];
       } else {
         p = new((void*) gvp) HMdcCalParRawMod[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCalParRawMod;
       } else {
         p = new((void*) gvp) HMdcCalParRawMod;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_355_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcCalParMbo& obj = ((HMdcCalParRawMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_355_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCalParRawMod*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_355_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParRawMod*) G__getstructoffset())->createMbo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_355_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCalParRawMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_355_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParRawMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_355_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCalParRawMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_355_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCalParRawMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_355_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParRawMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_355_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParRawMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_355_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCalParRawMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_355_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParRawMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_355_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCalParRawMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_355_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCalParRawMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCalParRawMod(*(HMdcCalParRawMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCalParRawMod G__THMdcCalParRawMod;
static int G__MdcDict_355_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCalParRawMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCalParRawMod*) (soff+(sizeof(HMdcCalParRawMod)*i)))->~G__THMdcCalParRawMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCalParRawMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCalParRawMod*) (soff))->~G__THMdcCalParRawMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_355_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCalParRawMod* dest = (HMdcCalParRawMod*) G__getstructoffset();
   *dest = *(HMdcCalParRawMod*) libp->para[0].ref;
   const HMdcCalParRawMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCalParRawSec */
static int G__MdcDict_356_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCalParRawSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalParRawSec((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCalParRawSec((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCalParRawSec[n];
       } else {
         p = new((void*) gvp) HMdcCalParRawSec[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCalParRawSec;
       } else {
         p = new((void*) gvp) HMdcCalParRawSec;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_356_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcCalParRawMod& obj = ((HMdcCalParRawSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_356_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCalParRawSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_356_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCalParRawSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_356_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParRawSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_356_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCalParRawSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_356_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCalParRawSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_356_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalParRawSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_356_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParRawSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_356_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCalParRawSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_356_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalParRawSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_356_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCalParRawSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_356_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCalParRawSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCalParRawSec(*(HMdcCalParRawSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCalParRawSec G__THMdcCalParRawSec;
static int G__MdcDict_356_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCalParRawSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCalParRawSec*) (soff+(sizeof(HMdcCalParRawSec)*i)))->~G__THMdcCalParRawSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCalParRawSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCalParRawSec*) (soff))->~G__THMdcCalParRawSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_356_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCalParRawSec* dest = (HMdcCalParRawSec*) G__getstructoffset();
   *dest = *(HMdcCalParRawSec*) libp->para[0].ref;
   const HMdcCalParRawSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCellEffAngle */
static int G__MdcDict_357_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCellEffAngle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCellEffAngle[n];
     } else {
       p = new((void*) gvp) HMdcCellEffAngle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCellEffAngle;
     } else {
       p = new((void*) gvp) HMdcCellEffAngle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffAngle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellEffAngle*) G__getstructoffset())->setFunctionValues((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCellEffAngle*) G__getstructoffset())->getMaxR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCellEffAngle*) G__getstructoffset())->getSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellEffAngle*) G__getstructoffset())->fill(*(HMdcCellEffAngle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellEffAngle*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellEffAngle*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCellEffAngle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellEffAngle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCellEffAngle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCellEffAngle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellEffAngle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellEffAngle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCellEffAngle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellEffAngle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_357_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCellEffAngle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_357_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCellEffAngle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCellEffAngle(*(HMdcCellEffAngle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffAngle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCellEffAngle G__THMdcCellEffAngle;
static int G__MdcDict_357_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCellEffAngle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCellEffAngle*) (soff+(sizeof(HMdcCellEffAngle)*i)))->~G__THMdcCellEffAngle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCellEffAngle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCellEffAngle*) (soff))->~G__THMdcCellEffAngle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_357_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCellEffAngle* dest = (HMdcCellEffAngle*) G__getstructoffset();
   *dest = *(HMdcCellEffAngle*) libp->para[0].ref;
   const HMdcCellEffAngle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCellEffMod */
static int G__MdcDict_358_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCellEffMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCellEffMod(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcCellEffMod(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCellEffMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcCellEffMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCellEffMod((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCellEffMod((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCellEffMod[n];
       } else {
         p = new((void*) gvp) HMdcCellEffMod[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCellEffMod;
       } else {
         p = new((void*) gvp) HMdcCellEffMod;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_358_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcCellEffAngle& obj = ((HMdcCellEffMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_358_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCellEffMod*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_358_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCellEffMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_358_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellEffMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_358_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCellEffMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_358_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCellEffMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_358_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellEffMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_358_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellEffMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_358_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCellEffMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_358_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellEffMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_358_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCellEffMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_358_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCellEffMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCellEffMod(*(HMdcCellEffMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCellEffMod G__THMdcCellEffMod;
static int G__MdcDict_358_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCellEffMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCellEffMod*) (soff+(sizeof(HMdcCellEffMod)*i)))->~G__THMdcCellEffMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCellEffMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCellEffMod*) (soff))->~G__THMdcCellEffMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_358_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCellEffMod* dest = (HMdcCellEffMod*) G__getstructoffset();
   *dest = *(HMdcCellEffMod*) libp->para[0].ref;
   const HMdcCellEffMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCellEff */
static int G__MdcDict_359_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCellEff* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCellEff(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcCellEff(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCellEff(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcCellEff(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCellEff((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcCellEff((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCellEff((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCellEff((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCellEff[n];
       } else {
         p = new((void*) gvp) HMdcCellEff[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCellEff;
       } else {
         p = new((void*) gvp) HMdcCellEff;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEff));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcCellEffMod& obj = ((HMdcCellEff*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellEff*) G__getstructoffset())->setContainerComment(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HMdcCellEff*) G__getstructoffset())->getContainerComment();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellEff*) G__getstructoffset())->printContainerComment();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCellEff*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellEff*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellEff*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcCellEff*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCellEff*) G__getstructoffset())->calcEfficiency((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcCellEff*) G__getstructoffset())->calcEffval((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellEff*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCellEff::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellEff::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCellEff::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCellEff::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellEff*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellEff::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCellEff::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellEff::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_359_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCellEff::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_359_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCellEff* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCellEff(*(HMdcCellEff*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEff));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCellEff G__THMdcCellEff;
static int G__MdcDict_359_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCellEff*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCellEff*) (soff+(sizeof(HMdcCellEff)*i)))->~G__THMdcCellEff();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCellEff*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCellEff*) (soff))->~G__THMdcCellEff();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_359_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCellEff* dest = (HMdcCellEff*) G__getstructoffset();
   *dest = *(HMdcCellEff*) libp->para[0].ref;
   const HMdcCellEff& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCellGroup */
static int G__MdcDict_360_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCellGroup*) G__getstructoffset())->getNCells((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_360_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCellGroup*) G__getstructoffset())->getCell((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_360_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCellGroup*) G__getstructoffset())->getSignId((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_360_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((HMdcCellGroup*) G__getstructoffset())->setSignId((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((HMdcCellGroup*) G__getstructoffset())->setSignId((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HMdcCellGroup*) G__getstructoffset())->setSignId((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HMdcCellGroup*) G__getstructoffset())->setSignId((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_360_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellGroup*) G__getstructoffset())->setLayerGroup((Int_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_360_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCellGroup*) G__getstructoffset())->getLayerListCells((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_360_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCellGroup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_360_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellGroup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_360_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCellGroup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_360_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCellGroup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_360_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellGroup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_360_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellGroup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_360_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCellGroup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_360_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellGroup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_360_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCellGroup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_360_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCellGroup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCellGroup(*(HMdcCellGroup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCellGroup G__THMdcCellGroup;
static int G__MdcDict_360_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCellGroup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCellGroup*) (soff+(sizeof(HMdcCellGroup)*i)))->~G__THMdcCellGroup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCellGroup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCellGroup*) (soff))->~G__THMdcCellGroup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_360_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCellGroup* dest = (HMdcCellGroup*) G__getstructoffset();
   *dest = *(HMdcCellGroup*) libp->para[0].ref;
   const HMdcCellGroup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCellGroup6 */
static int G__MdcDict_361_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCellGroup6* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCellGroup6[n];
     } else {
       p = new((void*) gvp) HMdcCellGroup6[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCellGroup6;
     } else {
       p = new((void*) gvp) HMdcCellGroup6;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup6));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_361_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellGroup6*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_361_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCellGroup6*) G__getstructoffset())->getSumWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_361_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCellGroup6*) G__getstructoffset())->getNLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_361_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellGroup6*) G__getstructoffset())->printCellGroup();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_361_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCellGroup6::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_361_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellGroup6::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_361_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCellGroup6::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_361_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCellGroup6::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_361_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellGroup6*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_361_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellGroup6::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_361_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCellGroup6::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_361_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellGroup6::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_361_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCellGroup6::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_361_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCellGroup6* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCellGroup6(*(HMdcCellGroup6*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup6));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCellGroup6 G__THMdcCellGroup6;
static int G__MdcDict_361_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCellGroup6*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCellGroup6*) (soff+(sizeof(HMdcCellGroup6)*i)))->~G__THMdcCellGroup6();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCellGroup6*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCellGroup6*) (soff))->~G__THMdcCellGroup6();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_361_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCellGroup6* dest = (HMdcCellGroup6*) G__getstructoffset();
   *dest = *(HMdcCellGroup6*) libp->para[0].ref;
   const HMdcCellGroup6& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCellGroup12 */
static int G__MdcDict_362_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCellGroup12* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCellGroup12[n];
     } else {
       p = new((void*) gvp) HMdcCellGroup12[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCellGroup12;
     } else {
       p = new((void*) gvp) HMdcCellGroup12;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup12));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellGroup12*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCellGroup12*) G__getstructoffset())->getSumWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCellGroup12*) G__getstructoffset())->getSumWires((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCellGroup12*) G__getstructoffset())->getNLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCellGroup12*) G__getstructoffset())->getNLayers((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellGroup12*) G__getstructoffset())->printCellGroup();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcCellGroup12*) G__getstructoffset())->getNSharedCells((HMdcCellGroup12*) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcCellGroup12*) G__getstructoffset())->getNSharedCells((HMdcCellGroup12*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCellGroup12::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellGroup12::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCellGroup12::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCellGroup12::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCellGroup12*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellGroup12::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCellGroup12::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCellGroup12::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_362_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCellGroup12::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_362_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCellGroup12* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCellGroup12(*(HMdcCellGroup12*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup12));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCellGroup12 G__THMdcCellGroup12;
static int G__MdcDict_362_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCellGroup12*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCellGroup12*) (soff+(sizeof(HMdcCellGroup12)*i)))->~G__THMdcCellGroup12();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCellGroup12*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCellGroup12*) (soff))->~G__THMdcCellGroup12();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_362_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCellGroup12* dest = (HMdcCellGroup12*) G__getstructoffset();
   *dest = *(HMdcCellGroup12*) libp->para[0].ref;
   const HMdcCellGroup12& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcContFact */
static int G__MdcDict_367_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcContFact[n];
     } else {
       p = new((void*) gvp) HMdcContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcContFact;
     } else {
       p = new((void*) gvp) HMdcContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_367_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_367_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_367_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_367_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_367_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_367_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_367_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_367_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_367_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_367_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcContFact* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcContFact(*(HMdcContFact*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcContFact G__THMdcContFact;
static int G__MdcDict_367_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcContFact*) (soff+(sizeof(HMdcContFact)*i)))->~G__THMdcContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcContFact*) (soff))->~G__THMdcContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_367_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcContFact* dest = (HMdcContFact*) G__getstructoffset();
   *dest = *(HMdcContFact*) libp->para[0].ref;
   const HMdcContFact& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCutStatMod */
static int G__MdcDict_368_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCutStatMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCutStatMod[n];
     } else {
       p = new((void*) gvp) HMdcCutStatMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCutStatMod;
     } else {
       p = new((void*) gvp) HMdcCutStatMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCutStatMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcCutStatMod(*(HMdcCutStatMod*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HMdcCutStatMod(*(HMdcCutStatMod*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatMod*) G__getstructoffset())->setCal1StatCutT1();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatMod*) G__getstructoffset())->setCal1StatCutT2();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatMod*) G__getstructoffset())->setCal1StatCutT12();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatMod*) G__getstructoffset())->setCal1StatCutWire();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatMod*) G__getstructoffset())->setCal1StatCutT1T12();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatMod*) G__getstructoffset())->setCal1StatCutBump();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatMod*) G__getstructoffset())->setCal1StatCutAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatMod*) G__getstructoffset())->setCal1StatAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCutStatMod*) G__getstructoffset())->getCal1StatCutT1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCutStatMod*) G__getstructoffset())->getCal1StatCutT2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCutStatMod*) G__getstructoffset())->getCal1StatCutT12());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCutStatMod*) G__getstructoffset())->getCal1StatCutWire());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCutStatMod*) G__getstructoffset())->getCal1StatCutT1T12());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCutStatMod*) G__getstructoffset())->getCal1StatCutBump());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCutStatMod*) G__getstructoffset())->getCal1StatCutAll());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCutStatMod*) G__getstructoffset())->getCal1StatAll());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatMod*) G__getstructoffset())->fill(*(HMdcCutStatMod*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatMod*) G__getstructoffset())->fill(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatMod*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatMod*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatMod*) G__getstructoffset())->printRatio();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCutStatMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCutStatMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCutStatMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCutStatMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCutStatMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCutStatMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCutStatMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_368_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCutStatMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCutStatMod G__THMdcCutStatMod;
static int G__MdcDict_368_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCutStatMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCutStatMod*) (soff+(sizeof(HMdcCutStatMod)*i)))->~G__THMdcCutStatMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCutStatMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCutStatMod*) (soff))->~G__THMdcCutStatMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_368_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCutStatMod* dest = (HMdcCutStatMod*) G__getstructoffset();
   *dest = *(HMdcCutStatMod*) libp->para[0].ref;
   const HMdcCutStatMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCutStatSec */
static int G__MdcDict_369_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCutStatSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCutStatSec((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCutStatSec((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCutStatSec[n];
       } else {
         p = new((void*) gvp) HMdcCutStatSec[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCutStatSec;
       } else {
         p = new((void*) gvp) HMdcCutStatSec;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_369_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcCutStatMod& obj = ((HMdcCutStatSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_369_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCutStatSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_369_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCutStatSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_369_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCutStatSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_369_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCutStatSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_369_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCutStatSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_369_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCutStatSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_369_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCutStatSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_369_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCutStatSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_369_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCutStatSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_369_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCutStatSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCutStatSec G__THMdcCutStatSec;
static int G__MdcDict_369_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCutStatSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCutStatSec*) (soff+(sizeof(HMdcCutStatSec)*i)))->~G__THMdcCutStatSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCutStatSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCutStatSec*) (soff))->~G__THMdcCutStatSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLayerGeomPar */
static int G__MdcDict_670_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLayerGeomPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayerGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcLayerGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayerGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcLayerGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayerGeomPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcLayerGeomPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLayerGeomPar[n];
       } else {
         p = new((void*) gvp) HMdcLayerGeomPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLayerGeomPar;
       } else {
         p = new((void*) gvp) HMdcLayerGeomPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLayerGeomParSec& obj = ((HMdcLayerGeomPar*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLayerGeomPar*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomPar*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomPar*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLayerGeomPar*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcLayerGeomPar*) G__getstructoffset())->getNtuple());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomPar*) G__getstructoffset())->calcLayerTransformations();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLayerGeomPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerGeomPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLayerGeomPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLayerGeomPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerGeomPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLayerGeomPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerGeomPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_670_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLayerGeomPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_670_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLayerGeomPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLayerGeomPar(*(HMdcLayerGeomPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLayerGeomPar G__THMdcLayerGeomPar;
static int G__MdcDict_670_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLayerGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLayerGeomPar*) (soff+(sizeof(HMdcLayerGeomPar)*i)))->~G__THMdcLayerGeomPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLayerGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLayerGeomPar*) (soff))->~G__THMdcLayerGeomPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_670_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLayerGeomPar* dest = (HMdcLayerGeomPar*) G__getstructoffset();
   *dest = *(HMdcLayerGeomPar*) libp->para[0].ref;
   const HMdcLayerGeomPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcDigitPar */
static int G__MdcDict_671_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDigitPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDigitPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcDigitPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDigitPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcDigitPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDigitPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcDigitPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcDigitPar[n];
       } else {
         p = new((void*) gvp) HMdcDigitPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcDigitPar;
       } else {
         p = new((void*) gvp) HMdcDigitPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcDigitPar*) G__getstructoffset())->getLayerEfficiency((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitPar*) G__getstructoffset())->setLayerEfficiency((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcDigitPar*) G__getstructoffset())->getLayerEfficiencyScale((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitPar*) G__getstructoffset())->setLayerEfficiencyThickness((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcDigitPar*) G__getstructoffset())->getLayerEfficiencyThickness((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitPar*) G__getstructoffset())->setLayerEfficiencyScale((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcDigitPar*) G__getstructoffset())->getTime1ErrScale((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitPar*) G__getstructoffset())->setTime1ErrScale((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcDigitPar*) G__getstructoffset())->getTime1ErrScaleMIPS((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitPar*) G__getstructoffset())->setTime1ErrScaleMIPS((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcDigitPar*) G__getstructoffset())->getSignalSpeed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitPar*) G__getstructoffset())->setSignalSpeed((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcDigitPar*) G__getstructoffset())->getCellScale());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitPar*) G__getstructoffset())->setCellEffScale((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDigitPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDigitPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcDigitPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDigitPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDigitPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDigitPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDigitPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_671_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDigitPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_671_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcDigitPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcDigitPar(*(HMdcDigitPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcDigitPar G__THMdcDigitPar;
static int G__MdcDict_671_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcDigitPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcDigitPar*) (soff+(sizeof(HMdcDigitPar)*i)))->~G__THMdcDigitPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcDigitPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcDigitPar*) (soff))->~G__THMdcDigitPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_671_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDigitPar* dest = (HMdcDigitPar*) G__getstructoffset();
   *dest = *(HMdcDigitPar*) libp->para[0].ref;
   const HMdcDigitPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcGeomStruct */
static int G__MdcDict_673_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeomStruct* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeomStruct(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcGeomStruct(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeomStruct(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcGeomStruct(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeomStruct((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcGeomStruct((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeomStruct((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcGeomStruct((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcGeomStruct[n];
       } else {
         p = new((void*) gvp) HMdcGeomStruct[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcGeomStruct;
       } else {
         p = new((void*) gvp) HMdcGeomStruct;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomStruct));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcGeomSecStru& obj = ((HMdcGeomStruct*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeomStruct*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeomStruct*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcGeomStruct*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeomStruct*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeomStruct*) G__getstructoffset())->getMaxIndices((TArrayI*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcGeomStruct*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcGeomStruct::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeomStruct::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcGeomStruct::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGeomStruct::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeomStruct*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeomStruct::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeomStruct::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeomStruct::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_673_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeomStruct::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_673_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcGeomStruct* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcGeomStruct(*(HMdcGeomStruct*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomStruct));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcGeomStruct G__THMdcGeomStruct;
static int G__MdcDict_673_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcGeomStruct*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcGeomStruct*) (soff+(sizeof(HMdcGeomStruct)*i)))->~G__THMdcGeomStruct();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcGeomStruct*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcGeomStruct*) (soff))->~G__THMdcGeomStruct();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_673_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeomStruct* dest = (HMdcGeomStruct*) G__getstructoffset();
   *dest = *(HMdcGeomStruct*) libp->para[0].ref;
   const HMdcGeomStruct& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcGeantCell */
static int G__MdcDict_675_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeantCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeantCell[n];
     } else {
       p = new((void*) gvp) HMdcGeantCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeantCell;
     } else {
       p = new((void*) gvp) HMdcGeantCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->setSector((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->setModule((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->setLayer((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->setCell((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->setNumHits((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->setMinDist((const Float_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->setTimeFlight((const Float_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->setImpactAngle((const Float_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->setNTrack((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->setFlagCutEdge((const Bool_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->setWireOffset((const Float_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->setEfficiency((const Float_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->setTheta((const Float_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantCell*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantCell*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantCell*) G__getstructoffset())->getLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantCell*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcGeantCell*) G__getstructoffset())->getNumHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcGeantCell*) G__getstructoffset())->getMinDist((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcGeantCell*) G__getstructoffset())->getTimeFlight((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcGeantCell*) G__getstructoffset())->getImpactAngle((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcGeantCell*) G__getstructoffset())->getNTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcGeantCell*) G__getstructoffset())->getFlagCutEdge((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcGeantCell*) G__getstructoffset())->getWireOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcGeantCell*) G__getstructoffset())->getEfficiency((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcGeantCell*) G__getstructoffset())->getTheta((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcGeantCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcGeantCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGeantCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeantCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_675_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeantCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_675_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcGeantCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcGeantCell(*(HMdcGeantCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcGeantCell G__THMdcGeantCell;
static int G__MdcDict_675_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcGeantCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcGeantCell*) (soff+(sizeof(HMdcGeantCell)*i)))->~G__THMdcGeantCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcGeantCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcGeantCell*) (soff))->~G__THMdcGeantCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_675_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeantCell* dest = (HMdcGeantCell*) G__getstructoffset();
   *dest = *(HMdcGeantCell*) libp->para[0].ref;
   const HMdcGeantCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcDigitizer */
static int G__MdcDict_679_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDigitizer[n];
     } else {
       p = new((void*) gvp) HMdcDigitizer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDigitizer;
     } else {
       p = new((void*) gvp) HMdcDigitizer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcDigitizer(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) HMdcDigitizer(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((HMdcDigitizer*) G__getstructoffset())->setOffsets((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HMdcDigitizer*) G__getstructoffset())->setOffsets((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((HMdcDigitizer*) G__getstructoffset())->setEffLevel((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HMdcDigitizer*) G__getstructoffset())->setEffLevel((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setEffScaling((Float_t) G__double(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setTimeErrScaling((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((HMdcDigitizer*) G__getstructoffset())->setNoiseLevel((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HMdcDigitizer*) G__getstructoffset())->setNoiseLevel((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setNoiseRange(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setNoiseBandWidth((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setNoiseWhiteWidth((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setNoiseWhiteRatio((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcDigitizer*) G__getstructoffset())->getNoiseBandWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcDigitizer*) G__getstructoffset())->getNoiseWhiteWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcDigitizer*) G__getstructoffset())->getNoiseWhiteRatio());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setErrorUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setTofUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setWireOffsetUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setOffsetsUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setCellEffUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setWireStatUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setNoiseUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setDeDxUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setTimeCutUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getErrorUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getTofUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getWireOffsetUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getOffsetsUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getCellEffUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getWireStatUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getNoiseUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getDeDxUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getTimeCutUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setNTuple((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setTdcMode((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setNoiseMode((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setEmbeddingMode((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getNTuple());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDigitizer*) G__getstructoffset())->getTdcMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDigitizer*) G__getstructoffset())->getNoiseMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDigitizer*) G__getstructoffset())->getEmbeddingMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setSignalSpeed((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcDigitizer*) G__getstructoffset())->getSignalSpeed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setScaleTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcDigitizer*) G__getstructoffset())->getScaleTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HMdcDigitizer*) G__getstructoffset())->setScalerTime1Err((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HMdcDigitizer*) G__getstructoffset())->setScalerTime1Err((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcDigitizer*) G__getstructoffset())->setScalerTime1Err((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcDigitizer*) G__getstructoffset())->setScalerTime1Err((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcDigitizer*) G__getstructoffset())->setScalerTime1Err();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setWireStatOffsetUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getWireStatOffsetUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcDigitizer*) G__getstructoffset())->initOffsets(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcDigitizer*) G__getstructoffset())->initOffsets();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setSigmaOffsets((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcDigitizer*) G__getstructoffset())->setCreateOffsets((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcDigitizer*) G__getstructoffset())->setCreateOffsets();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcDigitizer*) G__getstructoffset())->getSigmaOffsets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getCreateOffsets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setWireStatEffUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getWireStatEffUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setLayerThicknessEffUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getLayerThicknessEffUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((HMdcDigitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((HMdcDigitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HMdcDigitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HMdcDigitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcDigitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcDigitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizer*) G__getstructoffset())->getDeltaElectronUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((HMdcDigitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((HMdcDigitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HMdcDigitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HMdcDigitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcDigitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcDigitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcDigitizer*) G__getstructoffset())->setDeltaElectronMinMomCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->printStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->setTimeCutFlags((HMdcCal1Sim*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDigitizer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDigitizer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcDigitizer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDigitizer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_157(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_158(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDigitizer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_159(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDigitizer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_160(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDigitizer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_679_0_161(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDigitizer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcDigitizer G__THMdcDigitizer;
static int G__MdcDict_679_0_162(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcDigitizer*) (soff+(sizeof(HMdcDigitizer)*i)))->~G__THMdcDigitizer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcDigitizer*) (soff))->~G__THMdcDigitizer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcGeantReader */
static int G__MdcDict_728_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeantReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeantReader[n];
     } else {
       p = new((void*) gvp) HMdcGeantReader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeantReader;
     } else {
       p = new((void*) gvp) HMdcGeantReader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_728_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcGeantReader*) G__getstructoffset())->getGeantMdcCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_728_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcGeantReader*) G__getstructoffset())->getGeantMdc(*((HLocation*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_728_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcGeantReader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_728_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantReader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_728_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcGeantReader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_728_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGeantReader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_728_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeantReader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_728_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantReader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_728_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeantReader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_728_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeantReader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_728_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeantReader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_728_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcGeantReader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcGeantReader(*(HMdcGeantReader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantReader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcGeantReader G__THMdcGeantReader;
static int G__MdcDict_728_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcGeantReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcGeantReader*) (soff+(sizeof(HMdcGeantReader)*i)))->~G__THMdcGeantReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcGeantReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcGeantReader*) (soff))->~G__THMdcGeantReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_728_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeantReader* dest = (HMdcGeantReader*) G__getstructoffset();
   *dest = *(HMdcGeantReader*) libp->para[0].ref;
   const HMdcGeantReader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcGeomModStru */
static int G__MdcDict_738_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeomModStru* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeomModStru[n];
     } else {
       p = new((void*) gvp) HMdcGeomModStru[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeomModStru;
     } else {
       p = new((void*) gvp) HMdcGeomModStru;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomModStru));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_738_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcGeomModStru*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_738_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeomModStru*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_738_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeomModStru*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_738_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcGeomModStru*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_738_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcGeomModStru::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_738_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeomModStru::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_738_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcGeomModStru::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_738_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGeomModStru::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_738_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeomModStru*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_738_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeomModStru::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_738_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeomModStru::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_738_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeomModStru::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_738_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeomModStru::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_738_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcGeomModStru* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcGeomModStru(*(HMdcGeomModStru*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomModStru));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcGeomModStru G__THMdcGeomModStru;
static int G__MdcDict_738_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcGeomModStru*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcGeomModStru*) (soff+(sizeof(HMdcGeomModStru)*i)))->~G__THMdcGeomModStru();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcGeomModStru*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcGeomModStru*) (soff))->~G__THMdcGeomModStru();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_738_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeomModStru* dest = (HMdcGeomModStru*) G__getstructoffset();
   *dest = *(HMdcGeomModStru*) libp->para[0].ref;
   const HMdcGeomModStru& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcGeomSecStru */
static int G__MdcDict_739_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeomSecStru* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcGeomSecStru((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcGeomSecStru((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcGeomSecStru[n];
       } else {
         p = new((void*) gvp) HMdcGeomSecStru[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcGeomSecStru;
       } else {
         p = new((void*) gvp) HMdcGeomSecStru;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomSecStru));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_739_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcGeomModStru& obj = ((HMdcGeomSecStru*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_739_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcGeomSecStru*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_739_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcGeomSecStru::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_739_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeomSecStru::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_739_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcGeomSecStru::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_739_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcGeomSecStru::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_739_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcGeomSecStru*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_739_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeomSecStru::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_739_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeomSecStru::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_739_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcGeomSecStru::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_739_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcGeomSecStru::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_739_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcGeomSecStru* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcGeomSecStru(*(HMdcGeomSecStru*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomSecStru));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcGeomSecStru G__THMdcGeomSecStru;
static int G__MdcDict_739_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcGeomSecStru*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcGeomSecStru*) (soff+(sizeof(HMdcGeomSecStru)*i)))->~G__THMdcGeomSecStru();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcGeomSecStru*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcGeomSecStru*) (soff))->~G__THMdcGeomSecStru();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_739_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcGeomSecStru* dest = (HMdcGeomSecStru*) G__getstructoffset();
   *dest = *(HMdcGeomSecStru*) libp->para[0].ref;
   const HMdcGeomSecStru& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcHit */
static int G__MdcDict_785_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcHit[n];
     } else {
       p = new((void*) gvp) HMdcHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcHit;
     } else {
       p = new((void*) gvp) HMdcHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setX((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setY((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setXDir((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setYDir((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setOff((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setXY((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setXYDir((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setPar(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4]), (const Float_t) G__double(libp->para[5])
, (const Float_t) G__double(libp->para[6]), (const Float_t) G__double(libp->para[7])
, (const Float_t) G__double(libp->para[8]), (const Float_t) G__double(libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setPar((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setChi2((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setFlag((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setSecMod((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcHit*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcHit*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcHit*) G__getstructoffset())->getXDir());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcHit*) G__getstructoffset())->getYDir());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcHit*) G__getstructoffset())->getOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcHit*) G__getstructoffset())->getErrX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcHit*) G__getstructoffset())->getErrY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcHit*) G__getstructoffset())->getErrXDir());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcHit*) G__getstructoffset())->getErrYDir());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcHit*) G__getstructoffset())->getErrOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcHit*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcHit*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HSymMat& obj = ((HMdcHit*) G__getstructoffset())->getCovariance();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->getX(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->getY(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->getXDir(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->getYDir(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->getXY(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->getXYDir(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->getOff(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->getPar(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->getErrPar(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcHit*) G__getstructoffset())->getChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcHit*) G__getstructoffset())->getFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->getSecMod(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcHit*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcHit*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setSector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setModule((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setTrackFinder((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcHit*) G__getstructoffset())->getTrackFinder());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->setClusInfIndex((const Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HMdcHit*) G__getstructoffset())->getClusInfIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_785_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_785_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcHit(*(HMdcHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcHit G__THMdcHit;
static int G__MdcDict_785_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcHit*) (soff+(sizeof(HMdcHit)*i)))->~G__THMdcHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcHit*) (soff))->~G__THMdcHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_785_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcHit* dest = (HMdcHit*) G__getstructoffset();
   *dest = *(HMdcHit*) libp->para[0].ref;
   const HMdcHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcHitSim */
static int G__MdcDict_786_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcHitSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcHitSim[n];
     } else {
       p = new((void*) gvp) HMdcHitSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcHitSim;
     } else {
       p = new((void*) gvp) HMdcHitSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcHitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSim*) G__getstructoffset())->setStatus((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSim*) G__getstructoffset())->setNTracks((Int_t) G__int(libp->para[0]), (const Int_t*) G__int(libp->para[1])
, (const UChar_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSim*) G__getstructoffset())->setNumNoiseWires((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcHitSim*) G__getstructoffset())->calcNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcHitSim*) G__getstructoffset())->getStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcHitSim*) G__getstructoffset())->getNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcHitSim*) G__getstructoffset())->getTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcHitSim*) G__getstructoffset())->getNTimes((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcHitSim*) G__getstructoffset())->getNumNoiseWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSim*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcHitSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcHitSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcHitSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcHitSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcHitSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcHitSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcHitSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_786_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcHitSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_786_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcHitSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcHitSim(*(HMdcHitSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcHitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcHitSim G__THMdcHitSim;
static int G__MdcDict_786_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcHitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcHitSim*) (soff+(sizeof(HMdcHitSim)*i)))->~G__THMdcHitSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcHitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcHitSim*) (soff))->~G__THMdcHitSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_786_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcHitSim* dest = (HMdcHitSim*) G__getstructoffset();
   *dest = *(HMdcHitSim*) libp->para[0].ref;
   const HMdcHitSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcSeg */
static int G__MdcDict_787_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSeg* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSeg[n];
     } else {
       p = new((void*) gvp) HMdcSeg[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSeg;
     } else {
       p = new((void*) gvp) HMdcSeg;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcSeg));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setZ((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setR((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setTheta((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setPhi((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setZR((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setThetaPhi((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setPar(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4]), (const Float_t) G__double(libp->para[5])
, (const Float_t) G__double(libp->para[6]), (const Float_t) G__double(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setZ((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setR((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setTheta((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setPhi((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setPar((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setZprime((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setRprime((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setChi2((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setFlag((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setSec((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setIOSeg((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setHitInd((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setClusIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setX1((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setY1((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setX2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setY2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setXYPar((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSeg*) G__getstructoffset())->getZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSeg*) G__getstructoffset())->getR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSeg*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSeg*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSeg*) G__getstructoffset())->getErrZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSeg*) G__getstructoffset())->getErrR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSeg*) G__getstructoffset())->getErrTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSeg*) G__getstructoffset())->getErrPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSeg*) G__getstructoffset())->getZprime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSeg*) G__getstructoffset())->getRprime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSeg*) G__getstructoffset())->getClusIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSeg*) G__getstructoffset())->getX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSeg*) G__getstructoffset())->getY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSeg*) G__getstructoffset())->getX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSeg*) G__getstructoffset())->getY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcSeg*) G__getstructoffset())->getX1Sh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcSeg*) G__getstructoffset())->getY1Sh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcSeg*) G__getstructoffset())->getX2Sh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcSeg*) G__getstructoffset())->getY2Sh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->getZ(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->getR(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->getTheta(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->getPhi(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->getZR(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->getThetaPhi(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcSeg*) G__getstructoffset())->getPar(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->getErrPar(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcSeg*) G__getstructoffset())->getChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HSymMat& obj = ((HMdcSeg*) G__getstructoffset())->getCovariance();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSeg*) G__getstructoffset())->getFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSeg*) G__getstructoffset())->getSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSeg*) G__getstructoffset())->getIOSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSeg*) G__getstructoffset())->getHitInd((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setFakeFlag();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->resetFakeFlag();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSeg*) G__getstructoffset())->isFake());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setClusInfo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->setOffVertexClus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSeg*) G__getstructoffset())->isOffVertexClus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSeg*) G__getstructoffset())->getNBinsClus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSeg*) G__getstructoffset())->getNCellsClus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSeg*) G__getstructoffset())->getNMergedClus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSeg::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSeg::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcSeg::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSeg::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSeg*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSeg::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSeg::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSeg::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_787_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSeg::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_787_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcSeg* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcSeg(*(HMdcSeg*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcSeg));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcSeg G__THMdcSeg;
static int G__MdcDict_787_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcSeg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcSeg*) (soff+(sizeof(HMdcSeg)*i)))->~G__THMdcSeg();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcSeg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcSeg*) (soff))->~G__THMdcSeg();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_787_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSeg* dest = (HMdcSeg*) G__getstructoffset();
   *dest = *(HMdcSeg*) libp->para[0].ref;
   const HMdcSeg& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcSegSim */
static int G__MdcDict_789_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSegSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSegSim[n];
     } else {
       p = new((void*) gvp) HMdcSegSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSegSim;
     } else {
       p = new((void*) gvp) HMdcSegSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcSegSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSegSim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSegSim*) G__getstructoffset())->clearSimInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSegSim*) G__getstructoffset())->setStatus((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HMdcSegSim*) G__getstructoffset())->setNTracks((Int_t) G__int(libp->para[0]), (const Int_t*) G__int(libp->para[1])
, (const UChar_t*) G__int(libp->para[2]), (const UChar_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HMdcSegSim*) G__getstructoffset())->setNTracks((Int_t) G__int(libp->para[0]), (const Int_t*) G__int(libp->para[1])
, (const UChar_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcSegSim*) G__getstructoffset())->addTrack((Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])
, (UChar_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcSegSim*) G__getstructoffset())->addTrack((Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcSegSim*) G__getstructoffset())->calcNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSegSim*) G__getstructoffset())->setTrackInf((const Int_t*) G__int(libp->para[0]), (const Short_t*) G__int(libp->para[1])
, (const UChar_t*) G__int(libp->para[2]), (const UChar_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSegSim*) G__getstructoffset())->setNTracks((Int_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (Char_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSegSim*) G__getstructoffset())->setNDigiTimes((Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSegSim*) G__getstructoffset())->setTrackStatus((Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSegSim*) G__getstructoffset())->getStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSegSim*) G__getstructoffset())->getNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcSegSim*) G__getstructoffset())->getNNotFakeTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSegSim*) G__getstructoffset())->getTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcSegSim*) G__getstructoffset())->getNTimes((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcSegSim*) G__getstructoffset())->getNDigiTimes((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMdcSegSim*) G__getstructoffset())->getTrackStatus((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSegSim*) G__getstructoffset())->getNumNoiseWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSegSim*) G__getstructoffset())->sortTrListByContr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((const HMdcSegSim*) G__getstructoffset())->getGoodTrack((Int_t) G__int(libp->para[0]), (HMdcSegSim*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const HMdcSegSim*) G__getstructoffset())->getGoodTrack((Int_t) G__int(libp->para[0]), (HMdcSegSim*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((const HMdcSegSim*) G__getstructoffset())->getNextGoodTrack(*(Int_t*) G__Intref(&libp->para[0]), (HMdcSegSim*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const HMdcSegSim*) G__getstructoffset())->getNextGoodTrack(*(Int_t*) G__Intref(&libp->para[0]), (HMdcSegSim*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSegSim*) G__getstructoffset())->isGntTrackOk((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSegSim*) G__getstructoffset())->isFakeContribution((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSegSim*) G__getstructoffset())->isClFnLevelTooHigh((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSegSim*) G__getstructoffset())->is1or2HitsNotRec((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSegSim*) G__getstructoffset())->isSegNotRec((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSegSim*) G__getstructoffset())->isTrackNotRec((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSegSim*) G__getstructoffset())->isNoMeta((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcSegSim*) G__getstructoffset())->isGEANTBug((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((const HMdcSegSim*) G__getstructoffset())->findTrack((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const HMdcSegSim*) G__getstructoffset())->findTrack((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcSegSim*) G__getstructoffset())->getTrackIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSegSim*) G__getstructoffset())->resetFakeContributionFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSegSim*) G__getstructoffset())->setFakeContributionFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSegSim*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSegSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSegSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcSegSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSegSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSegSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSegSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSegSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSegSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_789_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSegSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_789_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcSegSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcSegSim(*(HMdcSegSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcSegSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcSegSim G__THMdcSegSim;
static int G__MdcDict_789_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcSegSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcSegSim*) (soff+(sizeof(HMdcSegSim)*i)))->~G__THMdcSegSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcSegSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcSegSim*) (soff))->~G__THMdcSegSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_789_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSegSim* dest = (HMdcSegSim*) G__getstructoffset();
   *dest = *(HMdcSegSim*) libp->para[0].ref;
   const HMdcSegSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrkCand */
static int G__MdcDict_790_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrkCand* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrkCand[n];
     } else {
       p = new((void*) gvp) HMdcTrkCand[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrkCand;
     } else {
       p = new((void*) gvp) HMdcTrkCand;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrkCand* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcTrkCand(
(Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HMdcTrkCand(
(Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrkCand* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcTrkCand(
(HMdcTrkCand*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HMdcTrkCand(
(HMdcTrkCand*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setSec((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setSeg1Ind((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setSeg2Ind((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setNCandForSeg1((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setFirstCandInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setNextCandInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setMetaMatchInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->addSeg2Ind((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setFlag((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setFakeFlagSeg1();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setFakeFlagSeg2();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->resetFakeFlagSeg1();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->resetFakeFlagSeg2();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrkCand*) G__getstructoffset())->isSeg1Fake());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrkCand*) G__getstructoffset())->isSeg2Fake());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcTrkCand*) G__getstructoffset())->isFake());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setdedx((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setSigmadedx((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setNWirededx((Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setNWireCutdedx((Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setdedxInnerSeg((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setdedxOuterSeg((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setdedxCombinedSeg((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setdedxSeg((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setSigmadedxInnerSeg((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setSigmadedxOuterSeg((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setSigmadedxCombinedSeg((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setSigmadedxSeg((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setNWirededxInnerSeg((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setNWirededxOuterSeg((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setNWirededxCombinedSeg((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setNWirededxSeg((Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setNWireCutdedxInnerSeg((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setNWireCutdedxOuterSeg((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setNWireCutdedxCombinedSeg((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->setNWireCutdedxSeg((Int_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcTrkCand*) G__getstructoffset())->getSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrkCand*) G__getstructoffset())->getSeg1Ind());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrkCand*) G__getstructoffset())->getSeg2Ind());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrkCand*) G__getstructoffset())->getSegInd((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMdcTrkCand*) G__getstructoffset())->getNCandForSeg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrkCand*) G__getstructoffset())->getNextCandInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrkCand*) G__getstructoffset())->getFirstCandInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrkCand*) G__getstructoffset())->getMetaMatchInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMdcTrkCand*) G__getstructoffset())->getFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrkCand*) G__getstructoffset())->getdedx((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrkCand*) G__getstructoffset())->getSigmadedx((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcTrkCand*) G__getstructoffset())->getNWirededx((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcTrkCand*) G__getstructoffset())->getNWireCutdedx((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcTrkCand*) G__getstructoffset())->getdedxInnerSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcTrkCand*) G__getstructoffset())->getdedxOuterSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMdcTrkCand*) G__getstructoffset())->getdedxCombinedSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrkCand*) G__getstructoffset())->getdedxSeg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrkCand*) G__getstructoffset())->getSigmadedxInnerSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrkCand*) G__getstructoffset())->getSigmadedxOuterSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrkCand*) G__getstructoffset())->getSigmadedxCombinedSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrkCand*) G__getstructoffset())->getSigmadedxSeg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcTrkCand*) G__getstructoffset())->getNWirededxInnerSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcTrkCand*) G__getstructoffset())->getNWirededxOuterSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcTrkCand*) G__getstructoffset())->getNWirededxCombinedSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcTrkCand*) G__getstructoffset())->getNWirededxSeg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcTrkCand*) G__getstructoffset())->getNWireCutdedxInnerSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcTrkCand*) G__getstructoffset())->getNWireCutdedxOuterSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcTrkCand*) G__getstructoffset())->getNWireCutdedxCombinedSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HMdcTrkCand*) G__getstructoffset())->getNWireCutdedxSeg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HMdcTrkCand*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrkCand::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrkCand::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrkCand::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrkCand::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCand*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrkCand::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrkCand::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrkCand::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_790_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrkCand::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_790_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrkCand* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrkCand(*(HMdcTrkCand*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrkCand G__THMdcTrkCand;
static int G__MdcDict_790_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrkCand*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrkCand*) (soff+(sizeof(HMdcTrkCand)*i)))->~G__THMdcTrkCand();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrkCand*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrkCand*) (soff))->~G__THMdcTrkCand();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_790_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrkCand* dest = (HMdcTrkCand*) G__getstructoffset();
   *dest = *(HMdcTrkCand*) libp->para[0].ref;
   const HMdcTrkCand& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcHitIdeal */
static int G__MdcDict_792_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcHitIdeal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_792_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcHitIdeal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_792_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcHitIdeal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_792_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcHitIdeal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_792_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcHitIdeal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_792_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcHitIdeal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_792_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcHitIdeal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_792_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcHitIdeal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_792_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcHitIdeal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__MdcDict_792_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcHitIdeal *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcHitIdeal[n];
     } else {
       p = new((void*) gvp) HMdcHitIdeal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcHitIdeal;
     } else {
       p = new((void*) gvp) HMdcHitIdeal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcHitIdeal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_792_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcHitIdeal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcHitIdeal(*(HMdcHitIdeal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcHitIdeal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcHitIdeal G__THMdcHitIdeal;
static int G__MdcDict_792_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcHitIdeal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcHitIdeal*) (soff+(sizeof(HMdcHitIdeal)*i)))->~G__THMdcHitIdeal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcHitIdeal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcHitIdeal*) (soff))->~G__THMdcHitIdeal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_792_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcHitIdeal* dest = (HMdcHitIdeal*) G__getstructoffset();
   *dest = *(HMdcHitIdeal*) libp->para[0].ref;
   const HMdcHitIdeal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcSegIdeal */
static int G__MdcDict_793_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSegIdeal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_793_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSegIdeal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_793_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcSegIdeal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_793_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSegIdeal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_793_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSegIdeal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_793_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSegIdeal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_793_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSegIdeal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_793_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSegIdeal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_793_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSegIdeal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__MdcDict_793_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSegIdeal *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSegIdeal[n];
     } else {
       p = new((void*) gvp) HMdcSegIdeal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSegIdeal;
     } else {
       p = new((void*) gvp) HMdcSegIdeal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcSegIdeal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_793_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcSegIdeal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcSegIdeal(*(HMdcSegIdeal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcSegIdeal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcSegIdeal G__THMdcSegIdeal;
static int G__MdcDict_793_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcSegIdeal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcSegIdeal*) (soff+(sizeof(HMdcSegIdeal)*i)))->~G__THMdcSegIdeal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcSegIdeal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcSegIdeal*) (soff))->~G__THMdcSegIdeal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_793_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSegIdeal* dest = (HMdcSegIdeal*) G__getstructoffset();
   *dest = *(HMdcSegIdeal*) libp->para[0].ref;
   const HMdcSegIdeal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrkCandIdeal */
static int G__MdcDict_794_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrkCandIdeal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_794_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrkCandIdeal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_794_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrkCandIdeal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_794_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrkCandIdeal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_794_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrkCandIdeal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_794_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrkCandIdeal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_794_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrkCandIdeal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_794_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrkCandIdeal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_794_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrkCandIdeal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__MdcDict_794_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrkCandIdeal *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrkCandIdeal[n];
     } else {
       p = new((void*) gvp) HMdcTrkCandIdeal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrkCandIdeal;
     } else {
       p = new((void*) gvp) HMdcTrkCandIdeal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCandIdeal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_794_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrkCandIdeal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrkCandIdeal(*(HMdcTrkCandIdeal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCandIdeal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrkCandIdeal G__THMdcTrkCandIdeal;
static int G__MdcDict_794_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrkCandIdeal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrkCandIdeal*) (soff+(sizeof(HMdcTrkCandIdeal)*i)))->~G__THMdcTrkCandIdeal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrkCandIdeal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrkCandIdeal*) (soff))->~G__THMdcTrkCandIdeal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_794_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrkCandIdeal* dest = (HMdcTrkCandIdeal*) G__getstructoffset();
   *dest = *(HMdcTrkCandIdeal*) libp->para[0].ref;
   const HMdcTrkCandIdeal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLayerGeomParLay */
static int G__MdcDict_795_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLayerGeomParLay* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayerGeomParLay[n];
     } else {
       p = new((void*) gvp) HMdcLayerGeomParLay[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayerGeomParLay;
     } else {
       p = new((void*) gvp) HMdcLayerGeomParLay;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParLay));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcLayerGeomParLay*) G__getstructoffset())->getPitch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLayerGeomParLay*) G__getstructoffset())->getNumWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcLayerGeomParLay*) G__getstructoffset())->getCatDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcLayerGeomParLay*) G__getstructoffset())->getWireOrient());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcLayerGeomParLay*) G__getstructoffset())->getCentralWireNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcLayerGeomParLay*) G__getstructoffset())->getCathodeWireThickness());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomTransform& obj = ((HMdcLayerGeomParLay*) G__getstructoffset())->getLayerPos();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomParLay*) G__getstructoffset())->fill((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomParLay*) G__getstructoffset())->fill(*(HMdcLayerGeomParLay*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomParLay*) G__getstructoffset())->setPitch((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomParLay*) G__getstructoffset())->setNumWires((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomParLay*) G__getstructoffset())->setCatDist((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomParLay*) G__getstructoffset())->setWireOrient((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomParLay*) G__getstructoffset())->setCentralWireNr((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomParLay*) G__getstructoffset())->setCathodeWireThickness((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomParLay*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLayerGeomParLay::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerGeomParLay::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLayerGeomParLay::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLayerGeomParLay::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomParLay*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerGeomParLay::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLayerGeomParLay::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerGeomParLay::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_795_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLayerGeomParLay::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_795_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLayerGeomParLay* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLayerGeomParLay(*(HMdcLayerGeomParLay*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParLay));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLayerGeomParLay G__THMdcLayerGeomParLay;
static int G__MdcDict_795_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLayerGeomParLay*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLayerGeomParLay*) (soff+(sizeof(HMdcLayerGeomParLay)*i)))->~G__THMdcLayerGeomParLay();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLayerGeomParLay*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLayerGeomParLay*) (soff))->~G__THMdcLayerGeomParLay();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_795_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLayerGeomParLay* dest = (HMdcLayerGeomParLay*) G__getstructoffset();
   *dest = *(HMdcLayerGeomParLay*) libp->para[0].ref;
   const HMdcLayerGeomParLay& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLayerGeomParMod */
static int G__MdcDict_796_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLayerGeomParMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayerGeomParMod[n];
     } else {
       p = new((void*) gvp) HMdcLayerGeomParMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayerGeomParMod;
     } else {
       p = new((void*) gvp) HMdcLayerGeomParMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_796_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLayerGeomParLay& obj = ((HMdcLayerGeomParMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_796_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLayerGeomParMod*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_796_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLayerGeomParMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_796_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerGeomParMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_796_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLayerGeomParMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_796_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLayerGeomParMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_796_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomParMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_796_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerGeomParMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_796_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLayerGeomParMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_796_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerGeomParMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_796_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLayerGeomParMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_796_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLayerGeomParMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLayerGeomParMod(*(HMdcLayerGeomParMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLayerGeomParMod G__THMdcLayerGeomParMod;
static int G__MdcDict_796_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLayerGeomParMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLayerGeomParMod*) (soff+(sizeof(HMdcLayerGeomParMod)*i)))->~G__THMdcLayerGeomParMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLayerGeomParMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLayerGeomParMod*) (soff))->~G__THMdcLayerGeomParMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_796_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLayerGeomParMod* dest = (HMdcLayerGeomParMod*) G__getstructoffset();
   *dest = *(HMdcLayerGeomParMod*) libp->para[0].ref;
   const HMdcLayerGeomParMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLayerGeomParSec */
static int G__MdcDict_797_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLayerGeomParSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayerGeomParSec[n];
     } else {
       p = new((void*) gvp) HMdcLayerGeomParSec[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLayerGeomParSec;
     } else {
       p = new((void*) gvp) HMdcLayerGeomParSec;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_797_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLayerGeomParMod& obj = ((HMdcLayerGeomParSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_797_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLayerGeomParSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_797_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLayerGeomParSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_797_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerGeomParSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_797_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLayerGeomParSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_797_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLayerGeomParSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_797_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLayerGeomParSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_797_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerGeomParSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_797_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLayerGeomParSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_797_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLayerGeomParSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_797_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLayerGeomParSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_797_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLayerGeomParSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLayerGeomParSec(*(HMdcLayerGeomParSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLayerGeomParSec G__THMdcLayerGeomParSec;
static int G__MdcDict_797_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLayerGeomParSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLayerGeomParSec*) (soff+(sizeof(HMdcLayerGeomParSec)*i)))->~G__THMdcLayerGeomParSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLayerGeomParSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLayerGeomParSec*) (soff))->~G__THMdcLayerGeomParSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_797_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLayerGeomParSec* dest = (HMdcLayerGeomParSec*) G__getstructoffset();
   *dest = *(HMdcLayerGeomParSec*) libp->para[0].ref;
   const HMdcLayerGeomParSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookupChan */
static int G__MdcDict_798_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupChan* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupChan(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Char_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcLookupChan(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Char_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupChan((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcLookupChan((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupChan((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcLookupChan((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupChan[n];
       } else {
         p = new((void*) gvp) HMdcLookupChan[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupChan;
       } else {
         p = new((void*) gvp) HMdcLookupChan;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupChan*) G__getstructoffset())->setNLayer((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupChan*) G__getstructoffset())->setNCell((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupChan*) G__getstructoffset())->setReadoutSide((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupChan*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Char_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupChan*) G__getstructoffset())->fill(*(HMdcLookupChan*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookupChan*) G__getstructoffset())->getNLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookupChan*) G__getstructoffset())->getNCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HMdcLookupChan*) G__getstructoffset())->getReadoutSide());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupChan*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookupChan::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupChan::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookupChan::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookupChan::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupChan*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupChan::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupChan::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupChan::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_798_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupChan::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_798_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookupChan* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookupChan(*(HMdcLookupChan*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLookupChan G__THMdcLookupChan;
static int G__MdcDict_798_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLookupChan*) (soff+(sizeof(HMdcLookupChan)*i)))->~G__THMdcLookupChan();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLookupChan*) (soff))->~G__THMdcLookupChan();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_798_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupChan* dest = (HMdcLookupChan*) G__getstructoffset();
   *dest = *(HMdcLookupChan*) libp->para[0].ref;
   const HMdcLookupChan& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookupMoth */
static int G__MdcDict_799_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupMoth* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupMoth((Int_t) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcLookupMoth((Int_t) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupMoth((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcLookupMoth((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupMoth[n];
       } else {
         p = new((void*) gvp) HMdcLookupMoth[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupMoth;
       } else {
         p = new((void*) gvp) HMdcLookupMoth;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupMoth));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_799_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLookupChan& obj = ((HMdcLookupMoth*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_799_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookupMoth*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_799_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookupMoth::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_799_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupMoth::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_799_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookupMoth::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_799_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookupMoth::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_799_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupMoth*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_799_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupMoth::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_799_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupMoth::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_799_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupMoth::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_799_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupMoth::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_799_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookupMoth* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookupMoth(*(HMdcLookupMoth*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupMoth));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLookupMoth G__THMdcLookupMoth;
static int G__MdcDict_799_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLookupMoth*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLookupMoth*) (soff+(sizeof(HMdcLookupMoth)*i)))->~G__THMdcLookupMoth();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLookupMoth*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLookupMoth*) (soff))->~G__THMdcLookupMoth();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_799_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupMoth* dest = (HMdcLookupMoth*) G__getstructoffset();
   *dest = *(HMdcLookupMoth*) libp->para[0].ref;
   const HMdcLookupMoth& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookupGMod */
static int G__MdcDict_800_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupGMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupGMod((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcLookupGMod((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupGMod[n];
       } else {
         p = new((void*) gvp) HMdcLookupGMod[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupGMod;
       } else {
         p = new((void*) gvp) HMdcLookupGMod;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_800_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLookupMoth& obj = ((HMdcLookupGMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_800_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookupGMod*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_800_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupGMod*) G__getstructoffset())->createMoth((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_800_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookupGMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_800_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupGMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_800_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookupGMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_800_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookupGMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_800_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupGMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_800_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupGMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_800_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupGMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_800_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupGMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_800_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupGMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_800_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookupGMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookupGMod(*(HMdcLookupGMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLookupGMod G__THMdcLookupGMod;
static int G__MdcDict_800_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLookupGMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLookupGMod*) (soff+(sizeof(HMdcLookupGMod)*i)))->~G__THMdcLookupGMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLookupGMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLookupGMod*) (soff))->~G__THMdcLookupGMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_800_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupGMod* dest = (HMdcLookupGMod*) G__getstructoffset();
   *dest = *(HMdcLookupGMod*) libp->para[0].ref;
   const HMdcLookupGMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookupGSec */
static int G__MdcDict_801_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupGSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupGSec((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcLookupGSec((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupGSec[n];
       } else {
         p = new((void*) gvp) HMdcLookupGSec[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupGSec;
       } else {
         p = new((void*) gvp) HMdcLookupGSec;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_801_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLookupGMod& obj = ((HMdcLookupGSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_801_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookupGSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_801_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookupGSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_801_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupGSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_801_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookupGSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_801_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookupGSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_801_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupGSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_801_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupGSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_801_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupGSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_801_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupGSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_801_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupGSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_801_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookupGSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookupGSec(*(HMdcLookupGSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLookupGSec G__THMdcLookupGSec;
static int G__MdcDict_801_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLookupGSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLookupGSec*) (soff+(sizeof(HMdcLookupGSec)*i)))->~G__THMdcLookupGSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLookupGSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLookupGSec*) (soff))->~G__THMdcLookupGSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_801_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupGSec* dest = (HMdcLookupGSec*) G__getstructoffset();
   *dest = *(HMdcLookupGSec*) libp->para[0].ref;
   const HMdcLookupGSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookupCell */
static int G__MdcDict_802_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupCell(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Char_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcLookupCell(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Char_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupCell((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcLookupCell((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupCell((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcLookupCell((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupCell[n];
       } else {
         p = new((void*) gvp) HMdcLookupCell[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupCell;
       } else {
         p = new((void*) gvp) HMdcLookupCell;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupCell*) G__getstructoffset())->setNMoth((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupCell*) G__getstructoffset())->setNChan((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupCell*) G__getstructoffset())->setReadoutSide((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupCell*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Char_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookupCell*) G__getstructoffset())->getNMoth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookupCell*) G__getstructoffset())->getNChan());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HMdcLookupCell*) G__getstructoffset())->getReadoutSide());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupCell*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookupCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookupCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookupCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_802_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_802_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookupCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookupCell(*(HMdcLookupCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLookupCell G__THMdcLookupCell;
static int G__MdcDict_802_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLookupCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLookupCell*) (soff+(sizeof(HMdcLookupCell)*i)))->~G__THMdcLookupCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLookupCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLookupCell*) (soff))->~G__THMdcLookupCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_802_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupCell* dest = (HMdcLookupCell*) G__getstructoffset();
   *dest = *(HMdcLookupCell*) libp->para[0].ref;
   const HMdcLookupCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookupLayer */
static int G__MdcDict_803_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupLayer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupLayer((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcLookupLayer((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupLayer[n];
       } else {
         p = new((void*) gvp) HMdcLookupLayer[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupLayer;
       } else {
         p = new((void*) gvp) HMdcLookupLayer;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_803_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLookupCell& obj = ((HMdcLookupLayer*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_803_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookupLayer*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_803_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookupLayer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_803_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupLayer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_803_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookupLayer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_803_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookupLayer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_803_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupLayer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_803_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupLayer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_803_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupLayer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_803_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupLayer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_803_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupLayer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_803_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookupLayer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookupLayer(*(HMdcLookupLayer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLookupLayer G__THMdcLookupLayer;
static int G__MdcDict_803_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLookupLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLookupLayer*) (soff+(sizeof(HMdcLookupLayer)*i)))->~G__THMdcLookupLayer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLookupLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLookupLayer*) (soff))->~G__THMdcLookupLayer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_803_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupLayer* dest = (HMdcLookupLayer*) G__getstructoffset();
   *dest = *(HMdcLookupLayer*) libp->para[0].ref;
   const HMdcLookupLayer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookupRMod */
static int G__MdcDict_804_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupRMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupRMod((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcLookupRMod((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupRMod[n];
       } else {
         p = new((void*) gvp) HMdcLookupRMod[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupRMod;
       } else {
         p = new((void*) gvp) HMdcLookupRMod;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_804_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLookupLayer& obj = ((HMdcLookupRMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_804_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookupRMod*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_804_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupRMod*) G__getstructoffset())->createLayer((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_804_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookupRMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_804_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupRMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_804_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookupRMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_804_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookupRMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_804_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupRMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_804_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupRMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_804_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupRMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_804_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupRMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_804_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupRMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_804_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookupRMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookupRMod(*(HMdcLookupRMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLookupRMod G__THMdcLookupRMod;
static int G__MdcDict_804_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLookupRMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLookupRMod*) (soff+(sizeof(HMdcLookupRMod)*i)))->~G__THMdcLookupRMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLookupRMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLookupRMod*) (soff))->~G__THMdcLookupRMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_804_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupRMod* dest = (HMdcLookupRMod*) G__getstructoffset();
   *dest = *(HMdcLookupRMod*) libp->para[0].ref;
   const HMdcLookupRMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookupRSec */
static int G__MdcDict_805_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupRSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupRSec((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcLookupRSec((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupRSec[n];
       } else {
         p = new((void*) gvp) HMdcLookupRSec[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupRSec;
       } else {
         p = new((void*) gvp) HMdcLookupRSec;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_805_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLookupRMod& obj = ((HMdcLookupRSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_805_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookupRSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_805_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookupRSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_805_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupRSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_805_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookupRSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_805_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookupRSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_805_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupRSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_805_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupRSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_805_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupRSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_805_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupRSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_805_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupRSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_805_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookupRSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookupRSec(*(HMdcLookupRSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLookupRSec G__THMdcLookupRSec;
static int G__MdcDict_805_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLookupRSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLookupRSec*) (soff+(sizeof(HMdcLookupRSec)*i)))->~G__THMdcLookupRSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLookupRSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLookupRSec*) (soff))->~G__THMdcLookupRSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_805_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupRSec* dest = (HMdcLookupRSec*) G__getstructoffset();
   *dest = *(HMdcLookupRSec*) libp->para[0].ref;
   const HMdcLookupRSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcLookupRaw */
static int G__MdcDict_806_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupRaw* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupRaw(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcLookupRaw(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupRaw(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcLookupRaw(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupRaw((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcLookupRaw((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLookupRaw((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcLookupRaw((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupRaw[n];
       } else {
         p = new((void*) gvp) HMdcLookupRaw[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcLookupRaw;
       } else {
         p = new((void*) gvp) HMdcLookupRaw;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_806_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcLookupRSec& obj = ((HMdcLookupRaw*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_806_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLookupRaw*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_806_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupRaw*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_806_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcLookupRaw*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_806_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLookupRaw::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_806_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupRaw::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_806_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLookupRaw::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_806_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLookupRaw::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_806_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLookupRaw*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_806_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupRaw::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_806_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupRaw::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_806_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLookupRaw::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_806_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLookupRaw::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_806_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcLookupRaw* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcLookupRaw(*(HMdcLookupRaw*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLookupRaw G__THMdcLookupRaw;
static int G__MdcDict_806_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLookupRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLookupRaw*) (soff+(sizeof(HMdcLookupRaw)*i)))->~G__THMdcLookupRaw();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLookupRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLookupRaw*) (soff))->~G__THMdcLookupRaw();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_806_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLookupRaw* dest = (HMdcLookupRaw*) G__getstructoffset();
   *dest = *(HMdcLookupRaw*) libp->para[0].ref;
   const HMdcLookupRaw& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcParAsciiFileIo */
static int G__MdcDict_811_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcParAsciiFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcParAsciiFileIo((fstream*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HMdcParAsciiFileIo((fstream*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_811_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcParAsciiFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_811_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcParAsciiFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_811_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcParAsciiFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_811_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcParAsciiFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_811_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcParAsciiFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_811_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcParAsciiFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_811_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcParAsciiFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_811_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcParAsciiFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_811_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcParAsciiFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_811_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcParAsciiFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcParAsciiFileIo(*(HMdcParAsciiFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcParAsciiFileIo G__THMdcParAsciiFileIo;
static int G__MdcDict_811_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcParAsciiFileIo*) (soff+(sizeof(HMdcParAsciiFileIo)*i)))->~G__THMdcParAsciiFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcParAsciiFileIo*) (soff))->~G__THMdcParAsciiFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_811_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcParAsciiFileIo* dest = (HMdcParAsciiFileIo*) G__getstructoffset();
   *dest = *(HMdcParAsciiFileIo*) libp->para[0].ref;
   const HMdcParAsciiFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcRawStruct */
static int G__MdcDict_814_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRawStruct* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRawStruct(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcRawStruct(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRawStruct(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcRawStruct(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRawStruct((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcRawStruct((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRawStruct((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcRawStruct((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcRawStruct[n];
       } else {
         p = new((void*) gvp) HMdcRawStruct[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcRawStruct;
       } else {
         p = new((void*) gvp) HMdcRawStruct;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawStruct));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcRawSecStru& obj = ((HMdcRawStruct*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawStruct*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcRawStruct*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawStruct*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcRawStruct*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawStruct*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawStruct*) G__getstructoffset())->getMaxIndices((TArrayI*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcRawStruct::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawStruct::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcRawStruct::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcRawStruct::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawStruct*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawStruct::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRawStruct::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawStruct::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_814_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRawStruct::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_814_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcRawStruct* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcRawStruct(*(HMdcRawStruct*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawStruct));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcRawStruct G__THMdcRawStruct;
static int G__MdcDict_814_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcRawStruct*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcRawStruct*) (soff+(sizeof(HMdcRawStruct)*i)))->~G__THMdcRawStruct();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcRawStruct*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcRawStruct*) (soff))->~G__THMdcRawStruct();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_814_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRawStruct* dest = (HMdcRawStruct*) G__getstructoffset();
   *dest = *(HMdcRawStruct*) libp->para[0].ref;
   const HMdcRawStruct& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTdcThreshold */
static int G__MdcDict_815_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcThreshold* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcThreshold(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcTdcThreshold(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcThreshold(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcTdcThreshold(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcThreshold((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTdcThreshold((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcThreshold((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTdcThreshold((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcThreshold[n];
       } else {
         p = new((void*) gvp) HMdcTdcThreshold[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcThreshold;
       } else {
         p = new((void*) gvp) HMdcTdcThreshold;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThreshold));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcTdcThresholdSec& obj = ((HMdcTdcThreshold*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThreshold*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTdcThreshold*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThreshold*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThreshold*) G__getstructoffset())->readlinefromfile((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThreshold*) G__getstructoffset())->writelinetofile((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThreshold*) G__getstructoffset())->addvalue((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThreshold*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTdcThreshold*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThreshold*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThreshold*) G__getstructoffset())->setOraVersion((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThreshold*) G__getstructoffset())->setStatus((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTdcThreshold*) G__getstructoffset())->getStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTdcThreshold*) G__getstructoffset())->getOraVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTdcThreshold::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThreshold::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTdcThreshold::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTdcThreshold::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThreshold*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThreshold::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcThreshold::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThreshold::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_815_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcThreshold::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_815_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTdcThreshold* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTdcThreshold(*(HMdcTdcThreshold*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThreshold));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTdcThreshold G__THMdcTdcThreshold;
static int G__MdcDict_815_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTdcThreshold*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTdcThreshold*) (soff+(sizeof(HMdcTdcThreshold)*i)))->~G__THMdcTdcThreshold();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTdcThreshold*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTdcThreshold*) (soff))->~G__THMdcTdcThreshold();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_815_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcThreshold* dest = (HMdcTdcThreshold*) G__getstructoffset();
   *dest = *(HMdcTdcThreshold*) libp->para[0].ref;
   const HMdcTdcThreshold& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTdcChannel */
static int G__MdcDict_816_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcChannel* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcChannel(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcTdcChannel(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcChannel(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcTdcChannel(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcChannel((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTdcChannel((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcChannel((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTdcChannel((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcChannel[n];
       } else {
         p = new((void*) gvp) HMdcTdcChannel[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcChannel;
       } else {
         p = new((void*) gvp) HMdcTdcChannel;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcTdcChannelSec& obj = ((HMdcTdcChannel*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannel*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTdcChannel*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTdcChannel*) G__getstructoffset())->getOraVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTdcChannel*) G__getstructoffset())->getStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTdcChannel*) G__getstructoffset())->getMapNotConnetedChannels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannel*) G__getstructoffset())->setOraVersion((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannel*) G__getstructoffset())->setStatus((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcTdcChannel*) G__getstructoffset())->setMapNotConnectedChannels((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcTdcChannel*) G__getstructoffset())->setMapNotConnectedChannels();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannel*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannel*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannel*) G__getstructoffset())->readLineFromFile((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTdcChannel*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannel*) G__getstructoffset())->mapOutUnusedChannels();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannel*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTdcChannel::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannel::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTdcChannel::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTdcChannel::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannel*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannel::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcChannel::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannel::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_816_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcChannel::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_816_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTdcChannel* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTdcChannel(*(HMdcTdcChannel*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannel));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTdcChannel G__THMdcTdcChannel;
static int G__MdcDict_816_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTdcChannel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTdcChannel*) (soff+(sizeof(HMdcTdcChannel)*i)))->~G__THMdcTdcChannel();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTdcChannel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTdcChannel*) (soff))->~G__THMdcTdcChannel();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_816_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcChannel* dest = (HMdcTdcChannel*) G__getstructoffset();
   *dest = *(HMdcTdcChannel*) libp->para[0].ref;
   const HMdcTdcChannel& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcParRootFileIo */
static int G__MdcDict_817_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcParRootFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HMdcParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcParRootFileIo*) G__getstructoffset())->read((HMdcRawStruct*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcParRootFileIo*) G__getstructoffset())->read((HMdcGeomStruct*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcParRootFileIo*) G__getstructoffset())->read((HMdcCalParRaw*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcParRootFileIo*) G__getstructoffset())->read((HMdcTdcThreshold*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcParRootFileIo*) G__getstructoffset())->read((HMdcTdcChannel*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcParRootFileIo*) G__getstructoffset())->read((HMdcCal2ParSim*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcParRootFileIo*) G__getstructoffset())->read((HMdcCellEff*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcParRootFileIo*) G__getstructoffset())->read((HMdcTimeCut*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcParRootFileIo*) G__getstructoffset())->read((HMdcLookupGeom*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcParRootFileIo*) G__getstructoffset())->read((HMdcLayerGeomPar*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcParRootFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcParRootFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcParRootFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcParRootFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcParRootFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcParRootFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcParRootFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcParRootFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_817_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcParRootFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_817_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcParRootFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcParRootFileIo(*(HMdcParRootFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcParRootFileIo G__THMdcParRootFileIo;
static int G__MdcDict_817_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcParRootFileIo*) (soff+(sizeof(HMdcParRootFileIo)*i)))->~G__THMdcParRootFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcParRootFileIo*) (soff))->~G__THMdcParRootFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_817_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcParRootFileIo* dest = (HMdcParRootFileIo*) G__getstructoffset();
   *dest = *(HMdcParRootFileIo*) libp->para[0].ref;
   const HMdcParRootFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcPPEvtFilter */
static int G__MdcDict_828_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcPPEvtFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcPPEvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcPPEvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcPPEvtFilter((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcPPEvtFilter((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcPPEvtFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcPPEvtFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcPPEvtFilter[n];
     } else {
       p = new((void*) gvp) HMdcPPEvtFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcPPEvtFilter;
     } else {
       p = new((void*) gvp) HMdcPPEvtFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcPPEvtFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPPEvtFilter*) G__getstructoffset())->createHists();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPPEvtFilter*) G__getstructoffset())->initVariables();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPPEvtFilter*) G__getstructoffset())->setThetaCuts((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPPEvtFilter*) G__getstructoffset())->setPhiCuts((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcPPEvtFilter*) G__getstructoffset())->setSaveHists((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcPPEvtFilter*) G__getstructoffset())->setSaveHists();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcPPEvtFilter*) G__getstructoffset())->setSaveCanv((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcPPEvtFilter*) G__getstructoffset())->setSaveCanv();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcPPEvtFilter*) G__getstructoffset())->setSavePSFile((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcPPEvtFilter*) G__getstructoffset())->setSavePSFile();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPPEvtFilter*) G__getstructoffset())->setTrigBit((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcPPEvtFilter*) G__getstructoffset())->setHistFile((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcPPEvtFilter*) G__getstructoffset())->setHistFile((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcPPEvtFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcPPEvtFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcPPEvtFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcPPEvtFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcPPEvtFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcPPEvtFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcPPEvtFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcPPEvtFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_828_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcPPEvtFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcPPEvtFilter G__THMdcPPEvtFilter;
static int G__MdcDict_828_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcPPEvtFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcPPEvtFilter*) (soff+(sizeof(HMdcPPEvtFilter)*i)))->~G__THMdcPPEvtFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcPPEvtFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcPPEvtFilter*) (soff))->~G__THMdcPPEvtFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcRawMothStru */
static int G__MdcDict_829_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRawMothStru* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRawMothStru[n];
     } else {
       p = new((void*) gvp) HMdcRawMothStru[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRawMothStru;
     } else {
       p = new((void*) gvp) HMdcRawMothStru;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawMothStru));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_829_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawMothStru*) G__getstructoffset())->setNTdcs((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_829_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcRawMothStru*) G__getstructoffset())->getNTdcs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_829_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawMothStru*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_829_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcRawMothStru::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_829_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawMothStru::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_829_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcRawMothStru::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_829_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcRawMothStru::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_829_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawMothStru*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_829_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawMothStru::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_829_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRawMothStru::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_829_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawMothStru::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_829_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRawMothStru::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_829_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcRawMothStru* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcRawMothStru(*(HMdcRawMothStru*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawMothStru));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcRawMothStru G__THMdcRawMothStru;
static int G__MdcDict_829_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcRawMothStru*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcRawMothStru*) (soff+(sizeof(HMdcRawMothStru)*i)))->~G__THMdcRawMothStru();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcRawMothStru*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcRawMothStru*) (soff))->~G__THMdcRawMothStru();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_829_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRawMothStru* dest = (HMdcRawMothStru*) G__getstructoffset();
   *dest = *(HMdcRawMothStru*) libp->para[0].ref;
   const HMdcRawMothStru& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcRawModStru */
static int G__MdcDict_830_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRawModStru* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRawModStru((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcRawModStru((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcRawModStru[n];
       } else {
         p = new((void*) gvp) HMdcRawModStru[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcRawModStru;
       } else {
         p = new((void*) gvp) HMdcRawModStru;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawModStru));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_830_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcRawMothStru& obj = ((HMdcRawModStru*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_830_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcRawModStru*) G__getstructoffset())->getNMotherboards());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_830_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcRawModStru*) G__getstructoffset())->getMboIndex((const Text_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_830_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcRawModStru*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_830_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcRawModStru::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_830_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawModStru::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_830_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcRawModStru::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_830_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcRawModStru::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_830_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawModStru*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_830_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawModStru::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_830_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRawModStru::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_830_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawModStru::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_830_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRawModStru::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_830_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcRawModStru* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcRawModStru(*(HMdcRawModStru*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawModStru));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcRawModStru G__THMdcRawModStru;
static int G__MdcDict_830_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcRawModStru*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcRawModStru*) (soff+(sizeof(HMdcRawModStru)*i)))->~G__THMdcRawModStru();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcRawModStru*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcRawModStru*) (soff))->~G__THMdcRawModStru();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_830_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRawModStru* dest = (HMdcRawModStru*) G__getstructoffset();
   *dest = *(HMdcRawModStru*) libp->para[0].ref;
   const HMdcRawModStru& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcRawSecStru */
static int G__MdcDict_831_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRawSecStru* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcRawSecStru((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcRawSecStru((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcRawSecStru[n];
       } else {
         p = new((void*) gvp) HMdcRawSecStru[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcRawSecStru;
       } else {
         p = new((void*) gvp) HMdcRawSecStru;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawSecStru));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_831_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcRawModStru& obj = ((HMdcRawSecStru*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_831_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcRawSecStru*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_831_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcRawSecStru::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_831_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawSecStru::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_831_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcRawSecStru::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_831_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcRawSecStru::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_831_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcRawSecStru*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_831_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawSecStru::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_831_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRawSecStru::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_831_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcRawSecStru::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_831_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcRawSecStru::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_831_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcRawSecStru* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcRawSecStru(*(HMdcRawSecStru*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawSecStru));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcRawSecStru G__THMdcRawSecStru;
static int G__MdcDict_831_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcRawSecStru*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcRawSecStru*) (soff+(sizeof(HMdcRawSecStru)*i)))->~G__THMdcRawSecStru();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcRawSecStru*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcRawSecStru*) (soff))->~G__THMdcRawSecStru();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_831_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcRawSecStru* dest = (HMdcRawSecStru*) G__getstructoffset();
   *dest = *(HMdcRawSecStru*) libp->para[0].ref;
   const HMdcRawSecStru& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcSetup */
static int G__MdcDict_832_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSetup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSetup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcSetup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSetup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcSetup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSetup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcSetup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcSetup[n];
       } else {
         p = new((void*) gvp) HMdcSetup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcSetup;
       } else {
         p = new((void*) gvp) HMdcSetup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcSetup*) G__getstructoffset())->getMdcDigitizerSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcSetup*) G__getstructoffset())->getMdcCalibrater1Set());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcSetup*) G__getstructoffset())->getMdcTrackFinderSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcSetup*) G__getstructoffset())->getMdcClusterToHitSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcSetup*) G__getstructoffset())->getMdc12FitSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcSetup*) G__getstructoffset())->getMdcCommonSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSetup*) G__getstructoffset())->check());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSetup*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSetup*) G__getstructoffset())->copySet((HMdcSetup*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSetup*) G__getstructoffset())->isEqual((HMdcSetup*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSetup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSetup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcSetup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSetup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSetup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSetup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSetup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSetup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_832_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSetup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_832_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcSetup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcSetup(*(HMdcSetup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcSetup G__THMdcSetup;
static int G__MdcDict_832_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcSetup*) (soff+(sizeof(HMdcSetup)*i)))->~G__THMdcSetup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcSetup*) (soff))->~G__THMdcSetup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_832_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSetup* dest = (HMdcSetup*) G__getstructoffset();
   *dest = *(HMdcSetup*) libp->para[0].ref;
   const HMdcSetup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcDigitizerSetup */
static int G__MdcDict_833_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDigitizerSetup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDigitizerSetup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (HMdcSetup*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcDigitizerSetup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (HMdcSetup*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDigitizerSetup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcDigitizerSetup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDigitizerSetup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcDigitizerSetup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcDigitizerSetup[n];
       } else {
         p = new((void*) gvp) HMdcDigitizerSetup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcDigitizerSetup;
       } else {
         p = new((void*) gvp) HMdcDigitizerSetup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizerSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setTdcModeDigi((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setNtupleDigi((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setUseTofDigi((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setUseErrorDigi((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setUseWireOffsetDigi((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setUseWireStatDigi((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setUseTimeCutsDigi((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setEmbeddingModeDigi((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setNoiseModeDigi((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setNoiseOffDigi((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setOffsetsOffDigi((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setCellEffOffDigi((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setNoiseLevelDigi((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setOffsetsDigi((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setCellEffDigi((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setNoiseRangeDigi(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->getTdcModeDigi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->getNtupleDigi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->getUseTofDigi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->getUseErrorDigi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->getUseWireOffsetDigi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->getUseWireStatDigi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->getUseTimeCutsDigi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->getEmbeddingModeDigi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->getNoiseModeDigi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->getNoiseOffDigi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->getOffsetsOffDigi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->getCellEffOffDigi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->getNoiseLevelDigi((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayF& obj = ((HMdcDigitizerSetup*) G__getstructoffset())->getNoiseLevelDigi();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->getOffsetsDigi((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayF& obj = ((HMdcDigitizerSetup*) G__getstructoffset())->getOffsetsDigi();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->getCellEffDigi((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayF& obj = ((HMdcDigitizerSetup*) G__getstructoffset())->getCellEffDigi();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->getNoiseRangeDigi(
(Int_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Int_t*) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Int_t*) G__int(libp->para[5])
, (Int_t*) G__int(libp->para[6]), (Int_t*) G__int(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayI& obj = ((HMdcDigitizerSetup*) G__getstructoffset())->getNoiseRangeLoDigi();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayI& obj = ((HMdcDigitizerSetup*) G__getstructoffset())->getNoiseRangeHiDigi();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->check());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->getParams((HParamList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->putParams((HParamList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->setupMdcDigitizer((HMdcDigitizer*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->copySet((HMdcDigitizerSetup*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcDigitizerSetup*) G__getstructoffset())->isEqual((HMdcDigitizerSetup*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDigitizerSetup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDigitizerSetup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcDigitizerSetup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDigitizerSetup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDigitizerSetup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDigitizerSetup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDigitizerSetup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDigitizerSetup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_833_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDigitizerSetup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_833_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcDigitizerSetup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcDigitizerSetup(*(HMdcDigitizerSetup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizerSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcDigitizerSetup G__THMdcDigitizerSetup;
static int G__MdcDict_833_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcDigitizerSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcDigitizerSetup*) (soff+(sizeof(HMdcDigitizerSetup)*i)))->~G__THMdcDigitizerSetup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcDigitizerSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcDigitizerSetup*) (soff))->~G__THMdcDigitizerSetup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_833_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDigitizerSetup* dest = (HMdcDigitizerSetup*) G__getstructoffset();
   *dest = *(HMdcDigitizerSetup*) libp->para[0].ref;
   const HMdcDigitizerSetup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCalibrater1Setup */
static int G__MdcDict_834_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCalibrater1Setup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalibrater1Setup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (HMdcSetup*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcCalibrater1Setup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (HMdcSetup*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalibrater1Setup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcCalibrater1Setup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCalibrater1Setup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCalibrater1Setup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCalibrater1Setup[n];
       } else {
         p = new((void*) gvp) HMdcCalibrater1Setup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCalibrater1Setup;
       } else {
         p = new((void*) gvp) HMdcCalibrater1Setup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1Setup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1Setup*) G__getstructoffset())->setModeFlagCal1((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1Setup*) G__getstructoffset())->setTimeCutFlagCal1((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1Setup*) G__getstructoffset())->setMdcCalibrater1Set((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCalibrater1Setup*) G__getstructoffset())->getModeFlagCal1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCalibrater1Setup*) G__getstructoffset())->getTimeCutFlagCal1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1Setup*) G__getstructoffset())->getMdcCalibrater1Set((Int_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1Setup*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcCalibrater1Setup*) G__getstructoffset())->check());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1Setup*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcCalibrater1Setup*) G__getstructoffset())->getParams((HParamList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1Setup*) G__getstructoffset())->putParams((HParamList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcCalibrater1Setup*) G__getstructoffset())->setupMdcCalibrater1((HMdcCalibrater1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcCalibrater1Setup*) G__getstructoffset())->setupMdcCalibrater1((HMdcCalibrater1*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1Setup*) G__getstructoffset())->copySet((HMdcCalibrater1Setup*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcCalibrater1Setup*) G__getstructoffset())->isEqual((HMdcCalibrater1Setup*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCalibrater1Setup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalibrater1Setup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCalibrater1Setup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCalibrater1Setup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCalibrater1Setup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalibrater1Setup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCalibrater1Setup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCalibrater1Setup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_834_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCalibrater1Setup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_834_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCalibrater1Setup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCalibrater1Setup(*(HMdcCalibrater1Setup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1Setup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCalibrater1Setup G__THMdcCalibrater1Setup;
static int G__MdcDict_834_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCalibrater1Setup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCalibrater1Setup*) (soff+(sizeof(HMdcCalibrater1Setup)*i)))->~G__THMdcCalibrater1Setup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCalibrater1Setup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCalibrater1Setup*) (soff))->~G__THMdcCalibrater1Setup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_834_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCalibrater1Setup* dest = (HMdcCalibrater1Setup*) G__getstructoffset();
   *dest = *(HMdcCalibrater1Setup*) libp->para[0].ref;
   const HMdcCalibrater1Setup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackFinderSetup */
static int G__MdcDict_835_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFinderSetup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackFinderSetup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (HMdcSetup*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcTrackFinderSetup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (HMdcSetup*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackFinderSetup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTrackFinderSetup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackFinderSetup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTrackFinderSetup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTrackFinderSetup[n];
       } else {
         p = new((void*) gvp) HMdcTrackFinderSetup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTrackFinderSetup;
       } else {
         p = new((void*) gvp) HMdcTrackFinderSetup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrackFinderSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinderSetup*) G__getstructoffset())->setIsCoilOff((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinderSetup*) G__getstructoffset())->setTypeClustFinder((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFinderSetup*) G__getstructoffset())->getIsCoilOff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinderSetup*) G__getstructoffset())->setNLayers((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinderSetup*) G__getstructoffset())->setNLevel((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinderSetup*) G__getstructoffset())->setMdcTrackFinderSet((Bool_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Int_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTrackFinderSetup*) G__getstructoffset())->getTypeClustFinder());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinderSetup*) G__getstructoffset())->getNLayers((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinderSetup*) G__getstructoffset())->getNLevel((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinderSetup*) G__getstructoffset())->getMdcTrackfinderSet((Bool_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinderSetup*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFinderSetup*) G__getstructoffset())->check());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinderSetup*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFinderSetup*) G__getstructoffset())->getParams((HParamList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinderSetup*) G__getstructoffset())->putParams((HParamList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinderSetup*) G__getstructoffset())->setupMdcTrackFinder();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinderSetup*) G__getstructoffset())->copySet((HMdcTrackFinderSetup*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackFinderSetup*) G__getstructoffset())->isEqual((HMdcTrackFinderSetup*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackFinderSetup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFinderSetup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackFinderSetup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackFinderSetup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackFinderSetup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFinderSetup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackFinderSetup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackFinderSetup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_835_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackFinderSetup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_835_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackFinderSetup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackFinderSetup(*(HMdcTrackFinderSetup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrackFinderSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackFinderSetup G__THMdcTrackFinderSetup;
static int G__MdcDict_835_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackFinderSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackFinderSetup*) (soff+(sizeof(HMdcTrackFinderSetup)*i)))->~G__THMdcTrackFinderSetup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackFinderSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackFinderSetup*) (soff))->~G__THMdcTrackFinderSetup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_835_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackFinderSetup* dest = (HMdcTrackFinderSetup*) G__getstructoffset();
   *dest = *(HMdcTrackFinderSetup*) libp->para[0].ref;
   const HMdcTrackFinderSetup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcClusterToHitSetup */
static int G__MdcDict_836_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusterToHitSetup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusterToHitSetup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (HMdcSetup*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcClusterToHitSetup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (HMdcSetup*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusterToHitSetup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcClusterToHitSetup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcClusterToHitSetup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcClusterToHitSetup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcClusterToHitSetup[n];
       } else {
         p = new((void*) gvp) HMdcClusterToHitSetup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcClusterToHitSetup;
       } else {
         p = new((void*) gvp) HMdcClusterToHitSetup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcClusterToHitSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusterToHitSetup*) G__getstructoffset())->setMdcForSeg1((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusterToHitSetup*) G__getstructoffset())->setMdcForSeg2((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusterToHitSetup*) G__getstructoffset())->setMdcClusterToHitSet((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcClusterToHitSetup*) G__getstructoffset())->getMdcForSeg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcClusterToHitSetup*) G__getstructoffset())->getMdcForSeg2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusterToHitSetup*) G__getstructoffset())->getMdcClusterToHitSet((Int_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusterToHitSetup*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcClusterToHitSetup*) G__getstructoffset())->check());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusterToHitSetup*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcClusterToHitSetup*) G__getstructoffset())->getParams((HParamList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusterToHitSetup*) G__getstructoffset())->putParams((HParamList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusterToHitSetup*) G__getstructoffset())->setupMdcClusterToHit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusterToHitSetup*) G__getstructoffset())->copySet((HMdcClusterToHitSetup*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcClusterToHitSetup*) G__getstructoffset())->isEqual((HMdcClusterToHitSetup*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcClusterToHitSetup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusterToHitSetup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcClusterToHitSetup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcClusterToHitSetup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcClusterToHitSetup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusterToHitSetup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusterToHitSetup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcClusterToHitSetup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_836_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcClusterToHitSetup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_836_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcClusterToHitSetup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcClusterToHitSetup(*(HMdcClusterToHitSetup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcClusterToHitSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcClusterToHitSetup G__THMdcClusterToHitSetup;
static int G__MdcDict_836_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcClusterToHitSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcClusterToHitSetup*) (soff+(sizeof(HMdcClusterToHitSetup)*i)))->~G__THMdcClusterToHitSetup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcClusterToHitSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcClusterToHitSetup*) (soff))->~G__THMdcClusterToHitSetup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_836_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcClusterToHitSetup* dest = (HMdcClusterToHitSetup*) G__getstructoffset();
   *dest = *(HMdcClusterToHitSetup*) libp->para[0].ref;
   const HMdcClusterToHitSetup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdc12FitSetup */
static int G__MdcDict_837_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdc12FitSetup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdc12FitSetup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (HMdcSetup*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdc12FitSetup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (HMdcSetup*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdc12FitSetup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdc12FitSetup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdc12FitSetup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdc12FitSetup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdc12FitSetup[n];
       } else {
         p = new((void*) gvp) HMdc12FitSetup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdc12FitSetup;
       } else {
         p = new((void*) gvp) HMdc12FitSetup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdc12FitSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12FitSetup*) G__getstructoffset())->setFitAuthor((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12FitSetup*) G__getstructoffset())->setFitVersion((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12FitSetup*) G__getstructoffset())->setFitIndep((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12FitSetup*) G__getstructoffset())->setFitNTuple((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12FitSetup*) G__getstructoffset())->setFitPrint((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12FitSetup*) G__getstructoffset())->setMdc12FitSet((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdc12FitSetup*) G__getstructoffset())->getFitAuthor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdc12FitSetup*) G__getstructoffset())->getFitVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdc12FitSetup*) G__getstructoffset())->getFitIndep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdc12FitSetup*) G__getstructoffset())->getFitNTuple());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdc12FitSetup*) G__getstructoffset())->getFitPrint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12FitSetup*) G__getstructoffset())->getMdc12FitSet((Int_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Bool_t*) G__int(libp->para[3])
, (Bool_t*) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12FitSetup*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdc12FitSetup*) G__getstructoffset())->check());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12FitSetup*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdc12FitSetup*) G__getstructoffset())->getParams((HParamList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12FitSetup*) G__getstructoffset())->putParams((HParamList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12FitSetup*) G__getstructoffset())->setupMdc12Fit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12FitSetup*) G__getstructoffset())->copySet((HMdc12FitSetup*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdc12FitSetup*) G__getstructoffset())->isEqual((HMdc12FitSetup*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdc12FitSetup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc12FitSetup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdc12FitSetup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdc12FitSetup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdc12FitSetup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc12FitSetup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdc12FitSetup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdc12FitSetup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_837_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdc12FitSetup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_837_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdc12FitSetup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdc12FitSetup(*(HMdc12FitSetup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdc12FitSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdc12FitSetup G__THMdc12FitSetup;
static int G__MdcDict_837_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdc12FitSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdc12FitSetup*) (soff+(sizeof(HMdc12FitSetup)*i)))->~G__THMdc12FitSetup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdc12FitSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdc12FitSetup*) (soff))->~G__THMdc12FitSetup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_837_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdc12FitSetup* dest = (HMdc12FitSetup*) G__getstructoffset();
   *dest = *(HMdc12FitSetup*) libp->para[0].ref;
   const HMdc12FitSetup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCommonSetup */
static int G__MdcDict_838_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCommonSetup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCommonSetup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (HMdcSetup*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcCommonSetup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (HMdcSetup*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCommonSetup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcCommonSetup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCommonSetup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcCommonSetup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCommonSetup[n];
       } else {
         p = new((void*) gvp) HMdcCommonSetup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcCommonSetup;
       } else {
         p = new((void*) gvp) HMdcCommonSetup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCommonSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCommonSetup*) G__getstructoffset())->setIsSimulation((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCommonSetup*) G__getstructoffset())->setAnalysisLevel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCommonSetup*) G__getstructoffset())->setTracker((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCommonSetup*) G__getstructoffset())->setMdcCommonSet((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCommonSetup*) G__getstructoffset())->getIsSimulation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCommonSetup*) G__getstructoffset())->getAnalysisLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcCommonSetup*) G__getstructoffset())->getTracker());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCommonSetup*) G__getstructoffset())->getMdcCommonSet((Int_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCommonSetup*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcCommonSetup*) G__getstructoffset())->check());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCommonSetup*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcCommonSetup*) G__getstructoffset())->getParams((HParamList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCommonSetup*) G__getstructoffset())->putParams((HParamList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCommonSetup*) G__getstructoffset())->copySet((HMdcCommonSetup*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcCommonSetup*) G__getstructoffset())->isEqual((HMdcCommonSetup*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCommonSetup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCommonSetup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCommonSetup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCommonSetup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCommonSetup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCommonSetup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCommonSetup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCommonSetup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_838_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCommonSetup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_838_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcCommonSetup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcCommonSetup(*(HMdcCommonSetup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcCommonSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCommonSetup G__THMdcCommonSetup;
static int G__MdcDict_838_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCommonSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCommonSetup*) (soff+(sizeof(HMdcCommonSetup)*i)))->~G__THMdcCommonSetup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCommonSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCommonSetup*) (soff))->~G__THMdcCommonSetup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_838_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCommonSetup* dest = (HMdcCommonSetup*) G__getstructoffset();
   *dest = *(HMdcCommonSetup*) libp->para[0].ref;
   const HMdcCommonSetup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcVertexFind */
static int G__MdcDict_843_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcVertexFind* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcVertexFind(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (HMdcVertexFind::EInputMode) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcVertexFind(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (HMdcVertexFind::EInputMode) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcVertexFind(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (HMdcVertexFind::EInputMode) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcVertexFind(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (HMdcVertexFind::EInputMode) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcVertexFind((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcVertexFind((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcVertexFind((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcVertexFind((const Text_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcVertexFind[n];
       } else {
         p = new((void*) gvp) HMdcVertexFind[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcVertexFind;
       } else {
         p = new((void*) gvp) HMdcVertexFind;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFind));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcVertexFind*) G__getstructoffset())->setCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcVertexFind*) G__getstructoffset())->setCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcVertexFind*) G__getstructoffset())->setCut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcVertexFind*) G__getstructoffset())->setCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcVertexFind*) G__getstructoffset())->useTukeyWeights((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcVertexFind*) G__getstructoffset())->setDebugMode((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcVertexFind*) G__getstructoffset())->setTukeyConstant((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcVertexFind*) G__getstructoffset())->setMaxIterations((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcVertexFind*) G__getstructoffset())->setEpsilon((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcVertexFind*) G__getstructoffset())->setSeg0Chi2Cut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcVertexFind*) G__getstructoffset())->setMinReqTracks((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcVertexFind*) G__getstructoffset())->setMinWindow((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcVertexFind*) G__getstructoffset())->setProgessiveTukey((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcVertexFind*) G__getstructoffset())->setCallExecuteManual((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcVertexFind*) G__getstructoffset())->getInputMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcVertexFind*) G__getstructoffset())->getTukeyConstant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcVertexFind*) G__getstructoffset())->getMaxIterations());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcVertexFind*) G__getstructoffset())->getEpsilon());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcVertexFind*) G__getstructoffset())->getSeg0Chi2Cut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcVertexFind*) G__getstructoffset())->getMinReqTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcVertexFind*) G__getstructoffset())->getMinWindow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcVertexFind*) G__getstructoffset())->getProgessiveTukey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcVertexFind*) G__getstructoffset())->doFit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcVertexFind::setRejectEmbeddedTracks((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcVertexFind::setRejectEmbeddedTracks();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcVertexFind::setUseEventSeqNumber((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcVertexFind::setUseEventSeqNumber();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcVertexFind::setSkipNoVertex((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcVertexFind::setSkipNoVertex();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcVertexFind::setSkipFakeSegments((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcVertexFind::setSkipFakeSegments();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcVertexFind::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcVertexFind::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcVertexFind::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcVertexFind::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcVertexFind*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcVertexFind::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcVertexFind::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcVertexFind::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_843_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcVertexFind::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcVertexFind G__THMdcVertexFind;
static int G__MdcDict_843_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcVertexFind*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcVertexFind*) (soff+(sizeof(HMdcVertexFind)*i)))->~G__THMdcVertexFind();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcVertexFind*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcVertexFind*) (soff))->~G__THMdcVertexFind();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTaskSet */
static int G__MdcDict_844_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTaskSet[n];
     } else {
       p = new((void*) gvp) HMdcTaskSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTaskSet;
     } else {
       p = new((void*) gvp) HMdcTaskSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HMdcTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HMdcTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HMdcTaskSet*) G__getstructoffset())->make());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTaskSet*) G__getstructoffset())->getDigitizer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTaskSet*) G__getstructoffset())->getCalibrater1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTaskSet*) G__getstructoffset())->getDeDx2Maker());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTaskSet*) G__getstructoffset())->getMdcSetup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTaskSet*) G__getstructoffset())->getMdcVertexFinder());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTaskSet*) G__getstructoffset())->setVersionDeDx((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTaskSet*) G__getstructoffset())->printStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTaskSet*) G__getstructoffset())->printOptions();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcTaskSet*) G__getstructoffset())->useIdealTracking((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcTaskSet*) G__getstructoffset())->useIdealTracking();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTaskSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTaskSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTaskSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTaskSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTaskSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTaskSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTaskSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTaskSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_844_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTaskSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTaskSet G__THMdcTaskSet;
static int G__MdcDict_844_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTaskSet*) (soff+(sizeof(HMdcTaskSet)*i)))->~G__THMdcTaskSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTaskSet*) (soff))->~G__THMdcTaskSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTdcChannelTdc */
static int G__MdcDict_845_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcChannelTdc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcChannelTdc[n];
     } else {
       p = new((void*) gvp) HMdcTdcChannelTdc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcChannelTdc;
     } else {
       p = new((void*) gvp) HMdcTdcChannelTdc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelTdc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_845_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTdcChannelTdc*) G__getstructoffset())->getChannelMask((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_845_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannelTdc*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_845_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannelTdc*) G__getstructoffset())->fill(*(HMdcTdcChannelTdc*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_845_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannelTdc*) G__getstructoffset())->setChannelMask((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_845_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannelTdc*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_845_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTdcChannelTdc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_845_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannelTdc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_845_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTdcChannelTdc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_845_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTdcChannelTdc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_845_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannelTdc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_845_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannelTdc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_845_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcChannelTdc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_845_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannelTdc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_845_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcChannelTdc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_845_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTdcChannelTdc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTdcChannelTdc(*(HMdcTdcChannelTdc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelTdc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTdcChannelTdc G__THMdcTdcChannelTdc;
static int G__MdcDict_845_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTdcChannelTdc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTdcChannelTdc*) (soff+(sizeof(HMdcTdcChannelTdc)*i)))->~G__THMdcTdcChannelTdc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTdcChannelTdc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTdcChannelTdc*) (soff))->~G__THMdcTdcChannelTdc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_845_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcChannelTdc* dest = (HMdcTdcChannelTdc*) G__getstructoffset();
   *dest = *(HMdcTdcChannelTdc*) libp->para[0].ref;
   const HMdcTdcChannelTdc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTdcChannelMbo */
static int G__MdcDict_846_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcChannelMbo* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcChannelMbo((Int_t) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTdcChannelMbo((Int_t) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcChannelMbo((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTdcChannelMbo((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcChannelMbo[n];
       } else {
         p = new((void*) gvp) HMdcTdcChannelMbo[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcChannelMbo;
       } else {
         p = new((void*) gvp) HMdcTdcChannelMbo;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMbo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_846_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcTdcChannelTdc& obj = ((HMdcTdcChannelMbo*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_846_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTdcChannelMbo*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_846_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTdcChannelMbo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_846_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannelMbo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_846_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTdcChannelMbo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_846_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTdcChannelMbo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_846_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannelMbo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_846_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannelMbo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_846_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcChannelMbo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_846_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannelMbo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_846_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcChannelMbo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_846_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTdcChannelMbo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTdcChannelMbo(*(HMdcTdcChannelMbo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMbo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTdcChannelMbo G__THMdcTdcChannelMbo;
static int G__MdcDict_846_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTdcChannelMbo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTdcChannelMbo*) (soff+(sizeof(HMdcTdcChannelMbo)*i)))->~G__THMdcTdcChannelMbo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTdcChannelMbo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTdcChannelMbo*) (soff))->~G__THMdcTdcChannelMbo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_846_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcChannelMbo* dest = (HMdcTdcChannelMbo*) G__getstructoffset();
   *dest = *(HMdcTdcChannelMbo*) libp->para[0].ref;
   const HMdcTdcChannelMbo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTdcChannelMod */
static int G__MdcDict_847_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcChannelMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcChannelMod((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTdcChannelMod((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcChannelMod[n];
       } else {
         p = new((void*) gvp) HMdcTdcChannelMod[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcChannelMod;
       } else {
         p = new((void*) gvp) HMdcTdcChannelMod;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_847_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcTdcChannelMbo& obj = ((HMdcTdcChannelMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_847_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTdcChannelMod*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_847_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannelMod*) G__getstructoffset())->createMbo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_847_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTdcChannelMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_847_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannelMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_847_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTdcChannelMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_847_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTdcChannelMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_847_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannelMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_847_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannelMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_847_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcChannelMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_847_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannelMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_847_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcChannelMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_847_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTdcChannelMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTdcChannelMod(*(HMdcTdcChannelMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTdcChannelMod G__THMdcTdcChannelMod;
static int G__MdcDict_847_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTdcChannelMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTdcChannelMod*) (soff+(sizeof(HMdcTdcChannelMod)*i)))->~G__THMdcTdcChannelMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTdcChannelMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTdcChannelMod*) (soff))->~G__THMdcTdcChannelMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_847_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcChannelMod* dest = (HMdcTdcChannelMod*) G__getstructoffset();
   *dest = *(HMdcTdcChannelMod*) libp->para[0].ref;
   const HMdcTdcChannelMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTdcChannelSec */
static int G__MdcDict_848_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcChannelSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcChannelSec((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTdcChannelSec((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcChannelSec[n];
       } else {
         p = new((void*) gvp) HMdcTdcChannelSec[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcChannelSec;
       } else {
         p = new((void*) gvp) HMdcTdcChannelSec;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_848_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcTdcChannelMod& obj = ((HMdcTdcChannelSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_848_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTdcChannelSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_848_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTdcChannelSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_848_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannelSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_848_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTdcChannelSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_848_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTdcChannelSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_848_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcChannelSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_848_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannelSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_848_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcChannelSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_848_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcChannelSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_848_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcChannelSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_848_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTdcChannelSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTdcChannelSec(*(HMdcTdcChannelSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTdcChannelSec G__THMdcTdcChannelSec;
static int G__MdcDict_848_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTdcChannelSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTdcChannelSec*) (soff+(sizeof(HMdcTdcChannelSec)*i)))->~G__THMdcTdcChannelSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTdcChannelSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTdcChannelSec*) (soff))->~G__THMdcTdcChannelSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_848_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcChannelSec* dest = (HMdcTdcChannelSec*) G__getstructoffset();
   *dest = *(HMdcTdcChannelSec*) libp->para[0].ref;
   const HMdcTdcChannelSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTdcThresholdDbo */
static int G__MdcDict_849_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcThresholdDbo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcThresholdDbo[n];
     } else {
       p = new((void*) gvp) HMdcTdcThresholdDbo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcThresholdDbo;
     } else {
       p = new((void*) gvp) HMdcTdcThresholdDbo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdDbo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_849_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTdcThresholdDbo*) G__getstructoffset())->getThreshold());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_849_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThresholdDbo*) G__getstructoffset())->setThreshold((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_849_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThresholdDbo*) G__getstructoffset())->fill(*(HMdcTdcThresholdDbo*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_849_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThresholdDbo*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_849_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTdcThresholdDbo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_849_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThresholdDbo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_849_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTdcThresholdDbo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_849_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTdcThresholdDbo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_849_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThresholdDbo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_849_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThresholdDbo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_849_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcThresholdDbo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_849_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThresholdDbo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_849_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcThresholdDbo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_849_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTdcThresholdDbo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTdcThresholdDbo(*(HMdcTdcThresholdDbo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdDbo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTdcThresholdDbo G__THMdcTdcThresholdDbo;
static int G__MdcDict_849_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTdcThresholdDbo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTdcThresholdDbo*) (soff+(sizeof(HMdcTdcThresholdDbo)*i)))->~G__THMdcTdcThresholdDbo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTdcThresholdDbo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTdcThresholdDbo*) (soff))->~G__THMdcTdcThresholdDbo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_849_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcThresholdDbo* dest = (HMdcTdcThresholdDbo*) G__getstructoffset();
   *dest = *(HMdcTdcThresholdDbo*) libp->para[0].ref;
   const HMdcTdcThresholdDbo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTdcThresholdMbo */
static int G__MdcDict_850_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcThresholdMbo* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcThresholdMbo((Int_t) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTdcThresholdMbo((Int_t) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcThresholdMbo((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTdcThresholdMbo((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcThresholdMbo[n];
       } else {
         p = new((void*) gvp) HMdcTdcThresholdMbo[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcThresholdMbo;
       } else {
         p = new((void*) gvp) HMdcTdcThresholdMbo;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMbo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_850_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcTdcThresholdDbo& obj = ((HMdcTdcThresholdMbo*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_850_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTdcThresholdMbo*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_850_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTdcThresholdMbo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_850_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThresholdMbo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_850_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTdcThresholdMbo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_850_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTdcThresholdMbo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_850_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThresholdMbo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_850_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThresholdMbo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_850_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcThresholdMbo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_850_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThresholdMbo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_850_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcThresholdMbo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_850_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTdcThresholdMbo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTdcThresholdMbo(*(HMdcTdcThresholdMbo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMbo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTdcThresholdMbo G__THMdcTdcThresholdMbo;
static int G__MdcDict_850_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTdcThresholdMbo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTdcThresholdMbo*) (soff+(sizeof(HMdcTdcThresholdMbo)*i)))->~G__THMdcTdcThresholdMbo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTdcThresholdMbo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTdcThresholdMbo*) (soff))->~G__THMdcTdcThresholdMbo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_850_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcThresholdMbo* dest = (HMdcTdcThresholdMbo*) G__getstructoffset();
   *dest = *(HMdcTdcThresholdMbo*) libp->para[0].ref;
   const HMdcTdcThresholdMbo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTdcThresholdMod */
static int G__MdcDict_851_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcThresholdMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcThresholdMod((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTdcThresholdMod((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcThresholdMod[n];
       } else {
         p = new((void*) gvp) HMdcTdcThresholdMod[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcThresholdMod;
       } else {
         p = new((void*) gvp) HMdcTdcThresholdMod;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_851_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcTdcThresholdMbo& obj = ((HMdcTdcThresholdMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_851_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTdcThresholdMod*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_851_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThresholdMod*) G__getstructoffset())->createMbo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_851_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTdcThresholdMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_851_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThresholdMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_851_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTdcThresholdMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_851_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTdcThresholdMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_851_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThresholdMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_851_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThresholdMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_851_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcThresholdMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_851_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThresholdMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_851_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcThresholdMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_851_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTdcThresholdMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTdcThresholdMod(*(HMdcTdcThresholdMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTdcThresholdMod G__THMdcTdcThresholdMod;
static int G__MdcDict_851_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTdcThresholdMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTdcThresholdMod*) (soff+(sizeof(HMdcTdcThresholdMod)*i)))->~G__THMdcTdcThresholdMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTdcThresholdMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTdcThresholdMod*) (soff))->~G__THMdcTdcThresholdMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_851_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcThresholdMod* dest = (HMdcTdcThresholdMod*) G__getstructoffset();
   *dest = *(HMdcTdcThresholdMod*) libp->para[0].ref;
   const HMdcTdcThresholdMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTdcThresholdSec */
static int G__MdcDict_852_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcThresholdSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTdcThresholdSec((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTdcThresholdSec((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcThresholdSec[n];
       } else {
         p = new((void*) gvp) HMdcTdcThresholdSec[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTdcThresholdSec;
       } else {
         p = new((void*) gvp) HMdcTdcThresholdSec;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_852_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcTdcThresholdMod& obj = ((HMdcTdcThresholdSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_852_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTdcThresholdSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_852_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTdcThresholdSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_852_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThresholdSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_852_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTdcThresholdSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_852_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTdcThresholdSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_852_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTdcThresholdSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_852_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThresholdSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_852_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcThresholdSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_852_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTdcThresholdSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_852_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTdcThresholdSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_852_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTdcThresholdSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTdcThresholdSec(*(HMdcTdcThresholdSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTdcThresholdSec G__THMdcTdcThresholdSec;
static int G__MdcDict_852_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTdcThresholdSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTdcThresholdSec*) (soff+(sizeof(HMdcTdcThresholdSec)*i)))->~G__THMdcTdcThresholdSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTdcThresholdSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTdcThresholdSec*) (soff))->~G__THMdcTdcThresholdSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_852_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTdcThresholdSec* dest = (HMdcTdcThresholdSec*) G__getstructoffset();
   *dest = *(HMdcTdcThresholdSec*) libp->para[0].ref;
   const HMdcTdcThresholdSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTimeCutMod */
static int G__MdcDict_853_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTimeCutMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTimeCutMod[n];
     } else {
       p = new((void*) gvp) HMdcTimeCutMod[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTimeCutMod;
     } else {
       p = new((void*) gvp) HMdcTimeCutMod;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTimeCutMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcTimeCutMod(*(HMdcTimeCutMod*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HMdcTimeCutMod(*(HMdcTimeCutMod*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCutMod*) G__getstructoffset())->setCutTime1((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCutMod*) G__getstructoffset())->setCutTime2((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCutMod*) G__getstructoffset())->setCutTime((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCutMod*) G__getstructoffset())->setCutBumpTime1((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCutMod*) G__getstructoffset())->setCutBumpTot((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCutMod*) G__getstructoffset())->getCutTime1Left());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCutMod*) G__getstructoffset())->getCutTime1Right());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCutMod*) G__getstructoffset())->getCutTime2Left());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCutMod*) G__getstructoffset())->getCutTime2Right());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCutMod*) G__getstructoffset())->getCutTimeLeft());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCutMod*) G__getstructoffset())->getCutTimeRight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCutMod*) G__getstructoffset())->getCutBumpTime1Left());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCutMod*) G__getstructoffset())->getCutBumpTime1Right());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCutMod*) G__getstructoffset())->getCutBumpTotLeft());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTimeCutMod*) G__getstructoffset())->getCutBumpTotRight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCutMod*) G__getstructoffset())->fill(*(HMdcTimeCutMod*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCutMod*) G__getstructoffset())->fill(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCutMod*) G__getstructoffset())->cutTime1((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCutMod*) G__getstructoffset())->cutTime2((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCutMod*) G__getstructoffset())->cutTimesDif((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCutMod*) G__getstructoffset())->cutComStop((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTimeCutMod*) G__getstructoffset())->cutBump((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCutMod*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCutMod*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTimeCutMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTimeCutMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTimeCutMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTimeCutMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCutMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTimeCutMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTimeCutMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTimeCutMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_853_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTimeCutMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTimeCutMod G__THMdcTimeCutMod;
static int G__MdcDict_853_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTimeCutMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTimeCutMod*) (soff+(sizeof(HMdcTimeCutMod)*i)))->~G__THMdcTimeCutMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTimeCutMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTimeCutMod*) (soff))->~G__THMdcTimeCutMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_853_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTimeCutMod* dest = (HMdcTimeCutMod*) G__getstructoffset();
   *dest = *(HMdcTimeCutMod*) libp->para[0].ref;
   const HMdcTimeCutMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTimeCutSec */
static int G__MdcDict_854_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTimeCutSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTimeCutSec((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTimeCutSec((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTimeCutSec[n];
       } else {
         p = new((void*) gvp) HMdcTimeCutSec[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTimeCutSec;
       } else {
         p = new((void*) gvp) HMdcTimeCutSec;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_854_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HMdcTimeCutMod& obj = ((HMdcTimeCutSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_854_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTimeCutSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_854_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTimeCutSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_854_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTimeCutSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_854_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTimeCutSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_854_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTimeCutSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_854_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTimeCutSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_854_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTimeCutSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_854_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTimeCutSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_854_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTimeCutSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_854_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTimeCutSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTimeCutSec G__THMdcTimeCutSec;
static int G__MdcDict_854_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTimeCutSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTimeCutSec*) (soff+(sizeof(HMdcTimeCutSec)*i)))->~G__THMdcTimeCutSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTimeCutSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTimeCutSec*) (soff))->~G__THMdcTimeCutSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrk */
static int G__MdcDict_855_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrk* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrk[n];
     } else {
       p = new((void*) gvp) HMdcTrk[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrk;
     } else {
       p = new((void*) gvp) HMdcTrk;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrk));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrk*) G__getstructoffset())->setZ((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrk*) G__getstructoffset())->setR((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrk*) G__getstructoffset())->setP((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrk*) G__getstructoffset())->setTheta((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrk*) G__getstructoffset())->setPhi((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrk*) G__getstructoffset())->setCharge((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrk*) G__getstructoffset())->setChi2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrk*) G__getstructoffset())->setFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrk*) G__getstructoffset())->setSector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrk*) G__getstructoffset())->setSegmentIndex((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrk*) G__getstructoffset())->readFromSegment((HMdcSeg*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrk*) G__getstructoffset())->getZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrk*) G__getstructoffset())->getErrZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrk*) G__getstructoffset())->getR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrk*) G__getstructoffset())->getErrR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrk*) G__getstructoffset())->getP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrk*) G__getstructoffset())->getErrP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrk*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrk*) G__getstructoffset())->getErrTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrk*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrk*) G__getstructoffset())->getErrPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTrk*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrk*) G__getstructoffset())->getChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTrk*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTrk*) G__getstructoffset())->getSegmentIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrk::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrk::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrk::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrk::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrk*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrk::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrk::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrk::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_855_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrk::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_855_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrk* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrk(*(HMdcTrk*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrk));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrk G__THMdcTrk;
static int G__MdcDict_855_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrk*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrk*) (soff+(sizeof(HMdcTrk)*i)))->~G__THMdcTrk();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrk*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrk*) (soff))->~G__THMdcTrk();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_855_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrk* dest = (HMdcTrk*) G__getstructoffset();
   *dest = *(HMdcTrk*) libp->para[0].ref;
   const HMdcTrk& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcVertexWriter */
static int G__MdcDict_886_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcVertexWriter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcVertexWriter[n];
     } else {
       p = new((void*) gvp) HMdcVertexWriter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcVertexWriter;
     } else {
       p = new((void*) gvp) HMdcVertexWriter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexWriter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcVertexWriter* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcVertexWriter((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcVertexWriter((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexWriter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HMdcVertexWriter::setSkipNoVertex((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HMdcVertexWriter::setSkipNoVertex();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcVertexWriter::setVertexType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcVertexWriter*) G__getstructoffset())->setOutputDir(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcVertexWriter*) G__getstructoffset())->setOutputDir();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcVertexWriter*) G__getstructoffset())->setOutputFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcVertexWriter*) G__getstructoffset())->setOutputFile();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcVertexWriter*) G__getstructoffset())->setUserEventSelection((Bool_t (*)(TObjArray*)) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcVertexWriter*) G__getstructoffset())->setUserEventSelection((Bool_t (*)(TObjArray*)) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcVertexWriter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcVertexWriter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcVertexWriter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcVertexWriter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcVertexWriter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcVertexWriter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcVertexWriter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcVertexWriter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_886_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcVertexWriter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcVertexWriter G__THMdcVertexWriter;
static int G__MdcDict_886_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcVertexWriter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcVertexWriter*) (soff+(sizeof(HMdcVertexWriter)*i)))->~G__THMdcVertexWriter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcVertexWriter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcVertexWriter*) (soff))->~G__THMdcVertexWriter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcUnpackerPar */
static int G__MdcDict_887_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcUnpackerPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcUnpackerPar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcUnpackerPar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcUnpackerPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcUnpackerPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcUnpackerPar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcUnpackerPar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcUnpackerPar[n];
       } else {
         p = new((void*) gvp) HMdcUnpackerPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcUnpackerPar;
       } else {
         p = new((void*) gvp) HMdcUnpackerPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpackerPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcUnpackerPar*) G__getstructoffset())->getDecodeVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcUnpackerPar*) G__getstructoffset())->getTdcMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcUnpackerPar*) G__getstructoffset())->getDoAddrCorr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcUnpackerPar*) G__getstructoffset())->getMapUnusedChannels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcUnpackerPar*) G__getstructoffset())->setDecodeVersion((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcUnpackerPar*) G__getstructoffset())->setTdcMode((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcUnpackerPar*) G__getstructoffset())->setDoAddrCorr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcUnpackerPar*) G__getstructoffset())->setMapUnusedChannels((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcUnpackerPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcUnpackerPar*) G__getstructoffset())->setParamContext((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcUnpackerPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcUnpackerPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcUnpackerPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcUnpackerPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcUnpackerPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcUnpackerPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcUnpackerPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcUnpackerPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_887_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcUnpackerPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_887_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcUnpackerPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcUnpackerPar(*(HMdcUnpackerPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpackerPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcUnpackerPar G__THMdcUnpackerPar;
static int G__MdcDict_887_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcUnpackerPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcUnpackerPar*) (soff+(sizeof(HMdcUnpackerPar)*i)))->~G__THMdcUnpackerPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcUnpackerPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcUnpackerPar*) (soff))->~G__THMdcUnpackerPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_887_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcUnpackerPar* dest = (HMdcUnpackerPar*) G__getstructoffset();
   *dest = *(HMdcUnpackerPar*) libp->para[0].ref;
   const HMdcUnpackerPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcDataword */
static int G__MdcDict_891_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDataword* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcDataword((Bool_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HMdcDataword((Bool_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcDataword));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDataword* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDataword[n];
     } else {
       p = new((void*) gvp) HMdcDataword[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcDataword;
     } else {
       p = new((void*) gvp) HMdcDataword;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcDataword));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HMdcDataword*) G__getstructoffset())->checkConsistency((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HMdcDataword*) G__getstructoffset())->checkConsistency((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HMdcDataword*) G__getstructoffset())->checkConsistency());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->clearData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->clearAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->clearAddress();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->clearHeader();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HMdcDataword*) G__getstructoffset())->decode((const UInt_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HMdcDataword*) G__getstructoffset())->decode((const UInt_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->dump();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getDecodeType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getEventNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getTriggerType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getErrorFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getSubEventSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getMboAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getTdcNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getTime1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getStatusCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcDataword*) G__getstructoffset())->getStatusData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HMdcDataword*) G__getstructoffset())->getCodedDataword((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HMdcDataword*) G__getstructoffset())->getCodedDataword());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->print((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->setAddress((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->setEventNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->setTriggerType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->setErrorFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->setSubEventSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->setAddress((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->setMboAddress((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->setTdcNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->setChannel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->setHit((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->setTime((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->setTime1((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcDataword*) G__getstructoffset())->setQuietMode((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcDataword*) G__getstructoffset())->setQuietMode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HMdcDataword*) G__getstructoffset())->subHeader((const UInt_t*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HMdcDataword*) G__getstructoffset())->subHeader((const UInt_t*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcDataword::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDataword::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcDataword::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcDataword::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcDataword*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDataword::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDataword::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcDataword::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_891_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcDataword::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_891_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcDataword* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcDataword(*(HMdcDataword*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcDataword));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcDataword G__THMdcDataword;
static int G__MdcDict_891_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcDataword*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcDataword*) (soff+(sizeof(HMdcDataword)*i)))->~G__THMdcDataword();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcDataword*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcDataword*) (soff))->~G__THMdcDataword();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_891_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcDataword* dest = (HMdcDataword*) G__getstructoffset();
   *dest = *(HMdcDataword*) libp->para[0].ref;
   const HMdcDataword& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcOepAddrCorrPar */
static int G__MdcDict_892_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcOepAddrCorrPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcOepAddrCorrPar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcOepAddrCorrPar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcOepAddrCorrPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcOepAddrCorrPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcOepAddrCorrPar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcOepAddrCorrPar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcOepAddrCorrPar[n];
       } else {
         p = new((void*) gvp) HMdcOepAddrCorrPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcOepAddrCorrPar;
       } else {
         p = new((void*) gvp) HMdcOepAddrCorrPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcOepAddrCorrPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_892_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcOepAddrCorrPar*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_892_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcOepAddrCorrPar*) G__getstructoffset())->checkAddress((Int_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_892_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOepAddrCorrPar*) G__getstructoffset())->setMapping((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_892_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOepAddrCorrPar*) G__getstructoffset())->putToArray();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_892_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOepAddrCorrPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_892_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcOepAddrCorrPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_892_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcOepAddrCorrPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_892_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcOepAddrCorrPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_892_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcOepAddrCorrPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_892_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOepAddrCorrPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_892_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcOepAddrCorrPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_892_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcOepAddrCorrPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_892_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcOepAddrCorrPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_892_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcOepAddrCorrPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_892_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcOepAddrCorrPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcOepAddrCorrPar(*(HMdcOepAddrCorrPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcOepAddrCorrPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcOepAddrCorrPar G__THMdcOepAddrCorrPar;
static int G__MdcDict_892_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcOepAddrCorrPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcOepAddrCorrPar*) (soff+(sizeof(HMdcOepAddrCorrPar)*i)))->~G__THMdcOepAddrCorrPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcOepAddrCorrPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcOepAddrCorrPar*) (soff))->~G__THMdcOepAddrCorrPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_892_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcOepAddrCorrPar* dest = (HMdcOepAddrCorrPar*) G__getstructoffset();
   *dest = *(HMdcOepAddrCorrPar*) libp->para[0].ref;
   const HMdcOepAddrCorrPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcUnpacker */
static int G__MdcDict_893_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcUnpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcUnpacker(
(Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcUnpacker(
(Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcUnpacker((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcUnpacker((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcUnpacker((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcUnpacker((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcUnpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcUnpacker(*(HMdcUnpacker*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HMdcUnpacker(*(HMdcUnpacker*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HMdcUnpacker*) G__getstructoffset())->getDebugMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HMdcUnpacker*) G__getstructoffset())->getDecodeVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcUnpacker*) G__getstructoffset())->getTdcMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcUnpacker*) G__getstructoffset())->setFillDataWord((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcUnpacker*) G__getstructoffset())->setFillOepStatus((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcUnpacker*) G__getstructoffset())->setPersistencyDataword((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcUnpacker*) G__getstructoffset())->setPersistencyDataword();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcUnpacker*) G__getstructoffset())->setPersistencyOepStatusData((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcUnpacker*) G__getstructoffset())->setPersistencyOepStatusData();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcUnpacker*) G__getstructoffset())->setQuietMode((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcUnpacker*) G__getstructoffset())->setQuietMode((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcUnpacker*) G__getstructoffset())->setQuietMode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcUnpacker*) G__getstructoffset())->setDoBitFlipCorr((Bool_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcUnpacker*) G__getstructoffset())->setDoBitFlipCorr((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcUnpacker*) G__getstructoffset())->setDoBitFlipCorr();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcUnpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcUnpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcUnpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcUnpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcUnpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcUnpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcUnpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcUnpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_893_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcUnpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcUnpacker G__THMdcUnpacker;
static int G__MdcDict_893_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcUnpacker*) (soff+(sizeof(HMdcUnpacker)*i)))->~G__THMdcUnpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcUnpacker*) (soff))->~G__THMdcUnpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_893_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcUnpacker* dest = (HMdcUnpacker*) G__getstructoffset();
   *dest = *(HMdcUnpacker*) libp->para[0].ref;
   const HMdcUnpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcOepStatusData */
static int G__MdcDict_895_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcOepStatusData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcOepStatusData[n];
     } else {
       p = new((void*) gvp) HMdcOepStatusData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcOepStatusData;
     } else {
       p = new((void*) gvp) HMdcOepStatusData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcOepStatusData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcOepStatusData*) G__getstructoffset())->getStatusWord((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HMdcOepStatusData*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HMdcOepStatusData*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HMdcOepStatusData*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HMdcOepStatusData*) G__getstructoffset())->getMbo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcOepStatusData*) G__getstructoffset())->setStatusWord((Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcOepStatusData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcOepStatusData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcOepStatusData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcOepStatusData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOepStatusData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcOepStatusData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcOepStatusData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcOepStatusData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcDict_895_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcOepStatusData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcDict_895_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcOepStatusData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcOepStatusData(*(HMdcOepStatusData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcDictLN_HMdcOepStatusData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcOepStatusData G__THMdcOepStatusData;
static int G__MdcDict_895_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcOepStatusData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcOepStatusData*) (soff+(sizeof(HMdcOepStatusData)*i)))->~G__THMdcOepStatusData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcOepStatusData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcOepStatusData*) (soff))->~G__THMdcOepStatusData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcDict_895_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcOepStatusData* dest = (HMdcOepStatusData*) G__getstructoffset();
   *dest = *(HMdcOepStatusData*) libp->para[0].ref;
   const HMdcOepStatusData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HMdcRaw */

/* HMdcRawCor */

/* HMdcRawEventHeader */

/* HMdcGeomPar */

/* HMdcDetector */

/* HMdcBitFlipCorPar */

/* HMdcBitFlipCor */

/* HMdcCal1 */

/* HMdcCal1Sim */

/* HMdcCal2 */

/* HMdcCal2ParSim */

/* HMdcCal2ParAngle */

/* HMdcCal2ParSecSim */

/* HMdcCal2ParModSim */

/* HMdcCal2Par */

/* HMdcCal2ParSec */

/* HMdcCal2ParMod */

/* HMdcCal2ParAngleSim */

/* HMdcCal2Sim */

/* HMdcCalParRaw */

/* HMdcLookupGeom */

/* HMdcTimeCut */

/* HMdcCutStat */

/* HMdcWireStat */

/* HMdcCalParTdc */

/* HMdcCalibrater1 */

/* HMdcCalParMbo */

/* HMdcCalParRawMod */

/* HMdcCalParRawSec */

/* HMdcCellEffAngle */

/* HMdcCellEffMod */

/* HMdcCellEff */

/* HMdcCellGroup */

/* HMdcCellGroup6 */

/* HMdcCellGroup12 */

/* HMdcContFact */

/* HMdcCutStatMod */

/* HMdcCutStatSec */

/* HMdcLayerGeomPar */

/* HMdcDigitPar */

/* HMdcGeomStruct */

/* HMdcGeantCell */

/* HMdcDigitizer */

/* HMdcGeantReader */

/* HMdcGeomModStru */

/* HMdcGeomSecStru */

/* HMdcHit */

/* HMdcHitSim */

/* HMdcSeg */

/* HMdcSegSim */

/* HMdcTrkCand */

/* HMdcHitIdeal */

/* HMdcSegIdeal */

/* HMdcTrkCandIdeal */

/* HMdcLayerGeomParLay */

/* HMdcLayerGeomParMod */

/* HMdcLayerGeomParSec */

/* HMdcLookupChan */

/* HMdcLookupMoth */

/* HMdcLookupGMod */

/* HMdcLookupGSec */

/* HMdcLookupCell */

/* HMdcLookupLayer */

/* HMdcLookupRMod */

/* HMdcLookupRSec */

/* HMdcLookupRaw */

/* HMdcParAsciiFileIo */

/* HMdcRawStruct */

/* HMdcTdcThreshold */

/* HMdcTdcChannel */

/* HMdcParRootFileIo */

/* HMdcPPEvtFilter */

/* HMdcRawMothStru */

/* HMdcRawModStru */

/* HMdcRawSecStru */

/* HMdcSetup */

/* HMdcDigitizerSetup */

/* HMdcCalibrater1Setup */

/* HMdcTrackFinderSetup */

/* HMdcClusterToHitSetup */

/* HMdc12FitSetup */

/* HMdcCommonSetup */

/* HMdcVertexFind */

/* HMdcTaskSet */

/* HMdcTdcChannelTdc */

/* HMdcTdcChannelMbo */

/* HMdcTdcChannelMod */

/* HMdcTdcChannelSec */

/* HMdcTdcThresholdDbo */

/* HMdcTdcThresholdMbo */

/* HMdcTdcThresholdMod */

/* HMdcTdcThresholdSec */

/* HMdcTimeCutMod */

/* HMdcTimeCutSec */

/* HMdcTrk */

/* HMdcVertexWriter */

/* HMdcUnpackerPar */

/* HMdcDataword */

/* HMdcOepAddrCorrPar */

/* HMdcUnpacker */

/* HMdcOepStatusData */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMdcDict {
 public:
  G__Sizep2memfuncMdcDict(): p(&G__Sizep2memfuncMdcDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMdcDict::*p)();
};

size_t G__get_sizep2memfuncMdcDict()
{
  G__Sizep2memfuncMdcDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMdcDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcRaw))) {
     HMdcRaw *G__Lderived;
     G__Lderived=(HMdcRaw*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRaw),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawCor))) {
     HMdcRawCor *G__Lderived;
     G__Lderived=(HMdcRawCor*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawCor),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawEventHeader))) {
     HMdcRawEventHeader *G__Lderived;
     G__Lderived=(HMdcRawEventHeader*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawEventHeader),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomPar))) {
     HMdcGeomPar *G__Lderived;
     G__Lderived=(HMdcGeomPar*)0x1000;
     {
       HDetGeomPar *G__Lpbase=(HDetGeomPar*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomPar),G__get_linked_tagnum(&G__MdcDictLN_HDetGeomPar),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomPar),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomPar),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomPar),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector))) {
     HMdcDetector *G__Lderived;
     G__Lderived=(HMdcDetector*)0x1000;
     {
       HDetector *G__Lpbase=(HDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector),G__get_linked_tagnum(&G__MdcDictLN_HDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCorPar))) {
     HMdcBitFlipCorPar *G__Lderived;
     G__Lderived=(HMdcBitFlipCorPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCorPar),G__get_linked_tagnum(&G__MdcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCorPar),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCorPar),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCorPar),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCor))) {
     HMdcBitFlipCor *G__Lderived;
     G__Lderived=(HMdcBitFlipCor*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCor),G__get_linked_tagnum(&G__MdcDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCor),G__get_linked_tagnum(&G__MdcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCor),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCor),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HParSet))) {
     HParSet *G__Lderived;
     G__Lderived=(HParSet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HParSet),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HParSet),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HParCond))) {
     HParCond *G__Lderived;
     G__Lderived=(HParCond*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HParCond),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HParCond),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HParCond),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1))) {
     HMdcCal1 *G__Lderived;
     G__Lderived=(HMdcCal1*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1Sim))) {
     HMdcCal1Sim *G__Lderived;
     G__Lderived=(HMdcCal1Sim*)0x1000;
     {
       HMdcCal1 *G__Lpbase=(HMdcCal1*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1Sim),G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1Sim),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2))) {
     HMdcCal2 *G__Lderived;
     G__Lderived=(HMdcCal2*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSim))) {
     HMdcCal2ParSim *G__Lderived;
     G__Lderived=(HMdcCal2ParSim*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSim),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSim),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSim),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngle))) {
     HMdcCal2ParAngle *G__Lderived;
     G__Lderived=(HMdcCal2ParAngle*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngle),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSecSim))) {
     HMdcCal2ParSecSim *G__Lderived;
     G__Lderived=(HMdcCal2ParSecSim*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSecSim),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParModSim))) {
     HMdcCal2ParModSim *G__Lderived;
     G__Lderived=(HMdcCal2ParModSim*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParModSim),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Par))) {
     HMdcCal2Par *G__Lderived;
     G__Lderived=(HMdcCal2Par*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Par),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Par),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Par),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSec))) {
     HMdcCal2ParSec *G__Lderived;
     G__Lderived=(HMdcCal2ParSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSec),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParMod))) {
     HMdcCal2ParMod *G__Lderived;
     G__Lderived=(HMdcCal2ParMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParMod),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngleSim))) {
     HMdcCal2ParAngleSim *G__Lderived;
     G__Lderived=(HMdcCal2ParAngleSim*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngleSim),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Sim))) {
     HMdcCal2Sim *G__Lderived;
     G__Lderived=(HMdcCal2Sim*)0x1000;
     {
       HMdcCal2 *G__Lpbase=(HMdcCal2*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Sim),G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Sim),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRaw))) {
     HMdcCalParRaw *G__Lderived;
     G__Lderived=(HMdcCalParRaw*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRaw),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRaw),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRaw),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGeom))) {
     HMdcLookupGeom *G__Lderived;
     G__Lderived=(HMdcLookupGeom*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGeom),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGeom),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGeom),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCut))) {
     HMdcTimeCut *G__Lderived;
     G__Lderived=(HMdcTimeCut*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCut),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCut),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCut),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStat))) {
     HMdcCutStat *G__Lderived;
     G__Lderived=(HMdcCutStat*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStat),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStat),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStat),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcWireStat))) {
     HMdcWireStat *G__Lderived;
     G__Lderived=(HMdcWireStat*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcWireStat),G__get_linked_tagnum(&G__MdcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcWireStat),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcWireStat),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcWireStat),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParTdc))) {
     HMdcCalParTdc *G__Lderived;
     G__Lderived=(HMdcCalParTdc*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParTdc),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1))) {
     HMdcCalibrater1 *G__Lderived;
     G__Lderived=(HMdcCalibrater1*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1),G__get_linked_tagnum(&G__MdcDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1),G__get_linked_tagnum(&G__MdcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParMbo))) {
     HMdcCalParMbo *G__Lderived;
     G__Lderived=(HMdcCalParMbo*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParMbo),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParMbo),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawMod))) {
     HMdcCalParRawMod *G__Lderived;
     G__Lderived=(HMdcCalParRawMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawMod),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawSec))) {
     HMdcCalParRawSec *G__Lderived;
     G__Lderived=(HMdcCalParRawSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawSec),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffAngle))) {
     HMdcCellEffAngle *G__Lderived;
     G__Lderived=(HMdcCellEffAngle*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffAngle),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffMod))) {
     HMdcCellEffMod *G__Lderived;
     G__Lderived=(HMdcCellEffMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffMod),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEff))) {
     HMdcCellEff *G__Lderived;
     G__Lderived=(HMdcCellEff*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEff),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEff),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEff),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup))) {
     HMdcCellGroup *G__Lderived;
     G__Lderived=(HMdcCellGroup*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup6))) {
     HMdcCellGroup6 *G__Lderived;
     G__Lderived=(HMdcCellGroup6*)0x1000;
     {
       HMdcCellGroup *G__Lpbase=(HMdcCellGroup*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup6),G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup6),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup12))) {
     HMdcCellGroup12 *G__Lderived;
     G__Lderived=(HMdcCellGroup12*)0x1000;
     {
       HMdcCellGroup *G__Lpbase=(HMdcCellGroup*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup12),G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup12),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcContFact))) {
     HMdcContFact *G__Lderived;
     G__Lderived=(HMdcContFact*)0x1000;
     {
       HContFact *G__Lpbase=(HContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcContFact),G__get_linked_tagnum(&G__MdcDictLN_HContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcContFact),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcContFact),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatMod))) {
     HMdcCutStatMod *G__Lderived;
     G__Lderived=(HMdcCutStatMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatMod),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatSec))) {
     HMdcCutStatSec *G__Lderived;
     G__Lderived=(HMdcCutStatSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatSec),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HDetector))) {
     HDetector *G__Lderived;
     G__Lderived=(HDetector*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HDetector),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HDetector),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomPar))) {
     HMdcLayerGeomPar *G__Lderived;
     G__Lderived=(HMdcLayerGeomPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomPar),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomPar),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomPar),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitPar))) {
     HMdcDigitPar *G__Lderived;
     G__Lderived=(HMdcDigitPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitPar),G__get_linked_tagnum(&G__MdcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitPar),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitPar),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitPar),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomStruct))) {
     HMdcGeomStruct *G__Lderived;
     G__Lderived=(HMdcGeomStruct*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomStruct),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomStruct),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomStruct),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantCell))) {
     HMdcGeantCell *G__Lderived;
     G__Lderived=(HMdcGeantCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantCell),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer))) {
     HMdcDigitizer *G__Lderived;
     G__Lderived=(HMdcDigitizer*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer),G__get_linked_tagnum(&G__MdcDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer),G__get_linked_tagnum(&G__MdcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantReader))) {
     HMdcGeantReader *G__Lderived;
     G__Lderived=(HMdcGeantReader*)0x1000;
     {
       HGeantReader *G__Lpbase=(HGeantReader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantReader),G__get_linked_tagnum(&G__MdcDictLN_HGeantReader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantReader),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HDetGeomPar))) {
     HDetGeomPar *G__Lderived;
     G__Lderived=(HDetGeomPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HDetGeomPar),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HDetGeomPar),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HDetGeomPar),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomModStru))) {
     HMdcGeomModStru *G__Lderived;
     G__Lderived=(HMdcGeomModStru*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomModStru),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomSecStru))) {
     HMdcGeomSecStru *G__Lderived;
     G__Lderived=(HMdcGeomSecStru*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomSecStru),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcHit))) {
     HMdcHit *G__Lderived;
     G__Lderived=(HMdcHit*)0x1000;
     {
       HMdcCellGroup6 *G__Lpbase=(HMdcCellGroup6*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHit),G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup6),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HMdcCellGroup *G__Lpbase=(HMdcCellGroup*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHit),G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHit),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitSim))) {
     HMdcHitSim *G__Lderived;
     G__Lderived=(HMdcHitSim*)0x1000;
     {
       HMdcHit *G__Lpbase=(HMdcHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitSim),G__get_linked_tagnum(&G__MdcDictLN_HMdcHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HMdcCellGroup6 *G__Lpbase=(HMdcCellGroup6*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitSim),G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup6),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HMdcCellGroup *G__Lpbase=(HMdcCellGroup*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitSim),G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitSim),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcSeg))) {
     HMdcSeg *G__Lderived;
     G__Lderived=(HMdcSeg*)0x1000;
     {
       HMdcCellGroup12 *G__Lpbase=(HMdcCellGroup12*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSeg),G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup12),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HMdcCellGroup *G__Lpbase=(HMdcCellGroup*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSeg),G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSeg),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegSim))) {
     HMdcSegSim *G__Lderived;
     G__Lderived=(HMdcSegSim*)0x1000;
     {
       HMdcSeg *G__Lpbase=(HMdcSeg*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegSim),G__get_linked_tagnum(&G__MdcDictLN_HMdcSeg),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HMdcCellGroup12 *G__Lpbase=(HMdcCellGroup12*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegSim),G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup12),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HMdcCellGroup *G__Lpbase=(HMdcCellGroup*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegSim),G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegSim),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand))) {
     HMdcTrkCand *G__Lderived;
     G__Lderived=(HMdcTrkCand*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitIdeal))) {
     HMdcHitIdeal *G__Lderived;
     G__Lderived=(HMdcHitIdeal*)0x1000;
     {
       HMdcHitSim *G__Lpbase=(HMdcHitSim*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitIdeal),G__get_linked_tagnum(&G__MdcDictLN_HMdcHitSim),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HMdcHit *G__Lpbase=(HMdcHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitIdeal),G__get_linked_tagnum(&G__MdcDictLN_HMdcHit),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HMdcCellGroup6 *G__Lpbase=(HMdcCellGroup6*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitIdeal),G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup6),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HMdcCellGroup *G__Lpbase=(HMdcCellGroup*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitIdeal),G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitIdeal),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegIdeal))) {
     HMdcSegIdeal *G__Lderived;
     G__Lderived=(HMdcSegIdeal*)0x1000;
     {
       HMdcSegSim *G__Lpbase=(HMdcSegSim*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegIdeal),G__get_linked_tagnum(&G__MdcDictLN_HMdcSegSim),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HMdcSeg *G__Lpbase=(HMdcSeg*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegIdeal),G__get_linked_tagnum(&G__MdcDictLN_HMdcSeg),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HMdcCellGroup12 *G__Lpbase=(HMdcCellGroup12*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegIdeal),G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup12),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HMdcCellGroup *G__Lpbase=(HMdcCellGroup*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegIdeal),G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegIdeal),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCandIdeal))) {
     HMdcTrkCandIdeal *G__Lderived;
     G__Lderived=(HMdcTrkCandIdeal*)0x1000;
     {
       HMdcTrkCand *G__Lpbase=(HMdcTrkCand*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCandIdeal),G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCandIdeal),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParLay))) {
     HMdcLayerGeomParLay *G__Lderived;
     G__Lderived=(HMdcLayerGeomParLay*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParLay),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParMod))) {
     HMdcLayerGeomParMod *G__Lderived;
     G__Lderived=(HMdcLayerGeomParMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParMod),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParSec))) {
     HMdcLayerGeomParSec *G__Lderived;
     G__Lderived=(HMdcLayerGeomParSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParSec),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupChan))) {
     HMdcLookupChan *G__Lderived;
     G__Lderived=(HMdcLookupChan*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupChan),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupMoth))) {
     HMdcLookupMoth *G__Lderived;
     G__Lderived=(HMdcLookupMoth*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupMoth),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupMoth),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGMod))) {
     HMdcLookupGMod *G__Lderived;
     G__Lderived=(HMdcLookupGMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGMod),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGSec))) {
     HMdcLookupGSec *G__Lderived;
     G__Lderived=(HMdcLookupGSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGSec),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupCell))) {
     HMdcLookupCell *G__Lderived;
     G__Lderived=(HMdcLookupCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupCell),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupLayer))) {
     HMdcLookupLayer *G__Lderived;
     G__Lderived=(HMdcLookupLayer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupLayer),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRMod))) {
     HMdcLookupRMod *G__Lderived;
     G__Lderived=(HMdcLookupRMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRMod),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRSec))) {
     HMdcLookupRSec *G__Lderived;
     G__Lderived=(HMdcLookupRSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRSec),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRaw))) {
     HMdcLookupRaw *G__Lderived;
     G__Lderived=(HMdcLookupRaw*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRaw),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRaw),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRaw),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcParAsciiFileIo))) {
     HMdcParAsciiFileIo *G__Lderived;
     G__Lderived=(HMdcParAsciiFileIo*)0x1000;
     {
       HDetParAsciiFileIo *G__Lpbase=(HDetParAsciiFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcParAsciiFileIo),G__get_linked_tagnum(&G__MdcDictLN_HDetParAsciiFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcParAsciiFileIo),G__get_linked_tagnum(&G__MdcDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcParAsciiFileIo),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcParAsciiFileIo),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawStruct))) {
     HMdcRawStruct *G__Lderived;
     G__Lderived=(HMdcRawStruct*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawStruct),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawStruct),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawStruct),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThreshold))) {
     HMdcTdcThreshold *G__Lderived;
     G__Lderived=(HMdcTdcThreshold*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThreshold),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThreshold),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThreshold),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannel))) {
     HMdcTdcChannel *G__Lderived;
     G__Lderived=(HMdcTdcChannel*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannel),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannel),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannel),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcParRootFileIo))) {
     HMdcParRootFileIo *G__Lderived;
     G__Lderived=(HMdcParRootFileIo*)0x1000;
     {
       HDetParRootFileIo *G__Lpbase=(HDetParRootFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcParRootFileIo),G__get_linked_tagnum(&G__MdcDictLN_HDetParRootFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcParRootFileIo),G__get_linked_tagnum(&G__MdcDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcParRootFileIo),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcParRootFileIo),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcPPEvtFilter))) {
     HMdcPPEvtFilter *G__Lderived;
     G__Lderived=(HMdcPPEvtFilter*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcPPEvtFilter),G__get_linked_tagnum(&G__MdcDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcPPEvtFilter),G__get_linked_tagnum(&G__MdcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcPPEvtFilter),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcPPEvtFilter),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawMothStru))) {
     HMdcRawMothStru *G__Lderived;
     G__Lderived=(HMdcRawMothStru*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawMothStru),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawMothStru),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawModStru))) {
     HMdcRawModStru *G__Lderived;
     G__Lderived=(HMdcRawModStru*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawModStru),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawSecStru))) {
     HMdcRawSecStru *G__Lderived;
     G__Lderived=(HMdcRawSecStru*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawSecStru),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup))) {
     HMdcSetup *G__Lderived;
     G__Lderived=(HMdcSetup*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup),G__get_linked_tagnum(&G__MdcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizerSetup))) {
     HMdcDigitizerSetup *G__Lderived;
     G__Lderived=(HMdcDigitizerSetup*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizerSetup),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizerSetup),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1Setup))) {
     HMdcCalibrater1Setup *G__Lderived;
     G__Lderived=(HMdcCalibrater1Setup*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1Setup),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1Setup),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrackFinderSetup))) {
     HMdcTrackFinderSetup *G__Lderived;
     G__Lderived=(HMdcTrackFinderSetup*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrackFinderSetup),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrackFinderSetup),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcClusterToHitSetup))) {
     HMdcClusterToHitSetup *G__Lderived;
     G__Lderived=(HMdcClusterToHitSetup*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcClusterToHitSetup),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcClusterToHitSetup),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdc12FitSetup))) {
     HMdc12FitSetup *G__Lderived;
     G__Lderived=(HMdc12FitSetup*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdc12FitSetup),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdc12FitSetup),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcCommonSetup))) {
     HMdcCommonSetup *G__Lderived;
     G__Lderived=(HMdcCommonSetup*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCommonSetup),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCommonSetup),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFind))) {
     HMdcVertexFind *G__Lderived;
     G__Lderived=(HMdcVertexFind*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFind),G__get_linked_tagnum(&G__MdcDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFind),G__get_linked_tagnum(&G__MdcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFind),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFind),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTaskSet))) {
     HMdcTaskSet *G__Lderived;
     G__Lderived=(HMdcTaskSet*)0x1000;
     {
       HTaskSet *G__Lpbase=(HTaskSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTaskSet),G__get_linked_tagnum(&G__MdcDictLN_HTaskSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTaskSet),G__get_linked_tagnum(&G__MdcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTaskSet),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTaskSet),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelTdc))) {
     HMdcTdcChannelTdc *G__Lderived;
     G__Lderived=(HMdcTdcChannelTdc*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelTdc),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMbo))) {
     HMdcTdcChannelMbo *G__Lderived;
     G__Lderived=(HMdcTdcChannelMbo*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMbo),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMbo),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMod))) {
     HMdcTdcChannelMod *G__Lderived;
     G__Lderived=(HMdcTdcChannelMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMod),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelSec))) {
     HMdcTdcChannelSec *G__Lderived;
     G__Lderived=(HMdcTdcChannelSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelSec),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdDbo))) {
     HMdcTdcThresholdDbo *G__Lderived;
     G__Lderived=(HMdcTdcThresholdDbo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdDbo),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMbo))) {
     HMdcTdcThresholdMbo *G__Lderived;
     G__Lderived=(HMdcTdcThresholdMbo*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMbo),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMbo),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMod))) {
     HMdcTdcThresholdMod *G__Lderived;
     G__Lderived=(HMdcTdcThresholdMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMod),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdSec))) {
     HMdcTdcThresholdSec *G__Lderived;
     G__Lderived=(HMdcTdcThresholdSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdSec),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutMod))) {
     HMdcTimeCutMod *G__Lderived;
     G__Lderived=(HMdcTimeCutMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutMod),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutSec))) {
     HMdcTimeCutSec *G__Lderived;
     G__Lderived=(HMdcTimeCutSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutSec),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrk))) {
     HMdcTrk *G__Lderived;
     G__Lderived=(HMdcTrk*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrk),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexWriter))) {
     HMdcVertexWriter *G__Lderived;
     G__Lderived=(HMdcVertexWriter*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexWriter),G__get_linked_tagnum(&G__MdcDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexWriter),G__get_linked_tagnum(&G__MdcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexWriter),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexWriter),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpackerPar))) {
     HMdcUnpackerPar *G__Lderived;
     G__Lderived=(HMdcUnpackerPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpackerPar),G__get_linked_tagnum(&G__MdcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpackerPar),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpackerPar),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpackerPar),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcDataword))) {
     HMdcDataword *G__Lderived;
     G__Lderived=(HMdcDataword*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDataword),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcOepAddrCorrPar))) {
     HMdcOepAddrCorrPar *G__Lderived;
     G__Lderived=(HMdcOepAddrCorrPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcOepAddrCorrPar),G__get_linked_tagnum(&G__MdcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcOepAddrCorrPar),G__get_linked_tagnum(&G__MdcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcOepAddrCorrPar),G__get_linked_tagnum(&G__MdcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcOepAddrCorrPar),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpacker))) {
     HMdcUnpacker *G__Lderived;
     G__Lderived=(HMdcUnpacker*)0x1000;
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpacker),G__get_linked_tagnum(&G__MdcDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpacker),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcDictLN_HMdcOepStatusData))) {
     HMdcOepStatusData *G__Lderived;
     G__Lderived=(HMdcOepStatusData*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcOepStatusData),G__get_linked_tagnum(&G__MdcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMdcDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MdcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MdcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MdcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MdcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MdcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MdcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MdcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MdcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__MdcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__MdcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__MdcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__MdcDictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__MdcDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__MdcDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MdcDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MdcDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__MdcDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MdcDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MdcDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__MdcDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__MdcDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__MdcDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__MdcDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__MdcDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__MdcDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<HGeantKine*,Float_t>",117,G__get_linked_tagnum(&G__MdcDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<HGeantKine*,float>",117,G__get_linked_tagnum(&G__MdcDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<HGeantKine*,float,less<HGeantKine*> >",117,G__get_linked_tagnum(&G__MdcDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HMdcDigiLayEff>",117,G__get_linked_tagnum(&G__MdcDictLN_vectorlEHMdcDigiLayEffcOallocatorlEHMdcDigiLayEffgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MdcDictLN_reverse_iteratorlEvectorlEHMdcDigiLayEffcOallocatorlEHMdcDigiLayEffgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcDictLN_vectorlEHMdcDigiLayEffcOallocatorlEHMdcDigiLayEffgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MdcDictLN_reverse_iteratorlEvectorlEHMdcDigiLayEffcOallocatorlEHMdcDigiLayEffgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcDictLN_vectorlEHMdcDigiLayEffcOallocatorlEHMdcDigiLayEffgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__MdcDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__MdcDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MdcDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MdcDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Bool_t (*)(TObjArray*)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,Int_t>",117,G__get_linked_tagnum(&G__MdcDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HMdcRaw */
static void G__setup_memvarHMdcRaw(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRaw));
   { HMdcRaw *p; p=(HMdcRaw*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nHits=",0,"number of hits / Tdc mode");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time1=",0,"time of 1st hit [binnumber]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time2=",0,"time of 2nd hit [binnumber]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time3=",0,"time of 3rd hit [binnumber]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time4=",0,"time of 4th hit [binnumber]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time5=",0,"time of 5th hit [binnumber]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time6=",0,"time of 6th hit [binnumber]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"sector number   [0-5]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"module number   [0-3]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mbo=",0,"motherboard number [0-15]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tdc=",0,"tdc number * 8 + tdc channel number [0-95]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrialsToFillHits=",0,"number of trials to fill a time value to this cell / corresponding to nHist");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("kDefaultValueTime=%lldLL",(long long)HMdcRaw::kDefaultValueTime).data(),0,"! default value of time");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("kDefaultValueSector=%lldLL",(long long)HMdcRaw::kDefaultValueSector).data(),0,"! default value of sector");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("kDefaultValueModule=%lldLL",(long long)HMdcRaw::kDefaultValueModule).data(),0,"! default value of module");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("kDefaultValueMbo=%lldLL",(long long)HMdcRaw::kDefaultValueMbo).data(),0,"! default value of motherboard number");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("kDefaultValueTdc=%lldLL",(long long)HMdcRaw::kDefaultValueTdc).data(),0,"! default value of tdc number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcRawCor */
static void G__setup_memvarHMdcRawCor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawCor));
   { HMdcRawCor *p; p=(HMdcRawCor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"flagraw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"rawshift1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"rawshift2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"rawshift3=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"rawshift4=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"rawshift5=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"rawshift6=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"sector number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"module number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mbo=",0,"motherboard number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tdc=",0,"tdc number * 8 + tdc channel number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcRawEventHeader */
static void G__setup_memvarHMdcRawEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawEventHeader));
   { HMdcRawEventHeader *p; p=(HMdcRawEventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"errorWord=",0,"error word of each ROC");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"module number [0-3]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"roc=",0,"read out controler (ROC) number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"sector number [0-5]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"subEvtId=",0,"subevent id ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"subEvtSize=",0,"subevent size");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"triggerType=",0,"trigger type");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcGeomPar */
static void G__setup_memvarHMdcGeomPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomPar));
   { HMdcGeomPar *p; p=(HMdcGeomPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcDetector */
static void G__setup_memvarHMdcDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector));
   { HMdcDetector *p; p=(HMdcDetector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcBitFlipCorPar */
static void G__setup_memvarHMdcBitFlipCorPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCorPar));
   { HMdcBitFlipCorPar *p; p=(HMdcBitFlipCorPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayI),-1,-1,2,"bitshiftcorfactor=",0,"efficiency per module and layer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcBitFlipCor */
static void G__setup_memvarHMdcBitFlipCor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCor));
   { HMdcBitFlipCor *p; p=(HMdcBitFlipCor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HRuntimeDb),-1,-1,2,"rtdb=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,2,"catmHMdcRaw=",0,"! HMdcSeg Category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcRaw),-1,-1,2,"mdcraw=",0,"! seg data level");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HIterator),-1,-1,2,"mdcrawiter=",0,"! seg iterator");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,2,"catmHMdcRawEventHeader=",0,"! HMdcSeg Category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawEventHeader),-1,-1,2,"rawREH=",0,"! seg data level");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HIterator),-1,-1,2,"iterREH=",0,"! seg iterator");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,2,"rawcorCat=",0,"! pointer to the raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawCor),-1,-1,2,"rawcor=",0,"! pointer to raw data word");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_HLocation),-1,-1,2,"loc=",0,"! location for new object.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCorPar),-1,-1,2,"fMdcBitFlipCorPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TFile),-1,-1,2,"rootoutputfile=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TString),-1,-1,2,"rootoutputfilename=",0,(char*)NULL);
   G__memvar_setup((void*)0,69,0,0,-1,-1,-1,2,"asciioutputfile=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TString),-1,-1,2,"asciioutputfilename=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"title[300]=",0,"! histrogram title");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"name[300]=",0,"! histogram name");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"xtitle[300]=",0,"! histogram xaxis title");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"ytitle[300]=",0,"! histogram yaxis title");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"ztitle[300]=",0,"! histogram zaxis title");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TH1F),-1,-1,2,"histtime1b[6][4][16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TH1F),-1,-1,2,"histtime1g[6][4][16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TH1F),-1,-1,2,"histtime2b[6][4][16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TH1F),-1,-1,2,"histtime2g[6][4][16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mbo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trigtype=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"paramsbitcorrection[6][4][16][9]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"phist=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"prawcor=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"counterevents[6][4][16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"countersavedtime1[6][4][16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"countersavedtime2[6][4][16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ratiosaved=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCal1 */
static void G__setup_memvarHMdcCal1(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1));
   { HMdcCal1 *p; p=(HMdcCal1*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nHits=",0,"number of hits in this cell");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time1=",0,"drift time of first hit  [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time2=",0,"drift time of second hit (2 leading edge mode) or trailing edge of signal [ns]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"sector number [0-5]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"module number [0-3]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"layer=",0,"layer number  [0-5]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"cell number in wire plane");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCal1Sim */
static void G__setup_memvarHMdcCal1Sim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1Sim));
   { HMdcCal1Sim *p; p=(HMdcCal1Sim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack1=",0,"number of Track for first hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack2=",0,"number of Track for second hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"status1=",0,"status of cell (positive if ok, negative if it should not be used)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"status2=",0,"status of cell (positive if ok, negative if it should not be used)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"listTrack[5]=",0,"list of 5 tracknumbers (GEANT) for tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"listStatus[5]=",0,"list of status for 5 tracks");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"angle1=",0,"impact angle1 in cell system 0-90 [degree]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"angle2=",0,"impact angle2 in cell system 0-90 [degree]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"minDist1=",0,"minimum distance to sense wire for track1 [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"minDist2=",0,"minimum distance to sense wire for track2 [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"error1=",0,"error of time1 [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"error2=",0,"error of time2 [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tof1=",0,"tof of track1  [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tof2=",0,"tof of track2  [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"wireOff1=",0,"signal time on the wire of track1 [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"wireOff2=",0,"signal time on the wire of track2 [ns]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCal2 */
static void G__setup_memvarHMdcCal2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2));
   { HMdcCal2 *p; p=(HMdcCal2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nHits=",0,"number of hits in this cell");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dist1=",0,"distance to the wire of first hit [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dist2=",0,"distance to the wire of second hit [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"errDist1=",0,"error of distance for first hit  [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"errDist2=",0,"error of distance for second hit [mm]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"sector number [0-5]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"module number [0-3]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"layer=",0,"layer number  [0-5]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"cell number in wire plane");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCal2ParSim */
static void G__setup_memvarHMdcCal2ParSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSim));
   { HMdcCal2ParSim *p; p=(HMdcCal2ParSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcCal2ParSecSim");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector),-1,-1,2,"fMdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TString),-1,-1,2,"comment=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"angleDeg=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"finaltime=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"angleStep=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"distance=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"linecounter=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"linecounterwrite=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"slopeOutside=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"type=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"dmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"dmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"scaleError[4]=",0,"! scaler for error of time1 per module type");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"constError[4]=",0,"! const error of time1 per module type");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useConstErr=",0,"! switch for using const errors");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"constVD[4]=",0,"! const Driftvelocity VD[mu/ns] for simple xt-correlation (only in combination with constErr)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useConstVD=",0,"! switch for using const VD");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCal2ParAngle */
static void G__setup_memvarHMdcCal2ParAngle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngle));
   { HMdcCal2ParAngle *p; p=(HMdcCal2ParAngle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"distance[100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"distanceErr[100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCal2ParSecSim */
static void G__setup_memvarHMdcCal2ParSecSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSecSim));
   { HMdcCal2ParSecSim *p; p=(HMdcCal2ParSecSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcCal2ParModSim");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCal2ParModSim */
static void G__setup_memvarHMdcCal2ParModSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParModSim));
   { HMdcCal2ParModSim *p; p=(HMdcCal2ParModSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcCal2ParAngleSim");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCal2Par */
static void G__setup_memvarHMdcCal2Par(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Par));
   { HMdcCal2Par *p; p=(HMdcCal2Par*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcCal2ParSec");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector),-1,-1,2,"fMdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TString),-1,-1,2,"comment=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"linecounter=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"linecounterwrite=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"type=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSim),-1,-1,2,"cal2parsim=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"myslopeOutside=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCal2ParSec */
static void G__setup_memvarHMdcCal2ParSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSec));
   { HMdcCal2ParSec *p; p=(HMdcCal2ParSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcCal2ParMod");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCal2ParMod */
static void G__setup_memvarHMdcCal2ParMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParMod));
   { HMdcCal2ParMod *p; p=(HMdcCal2ParMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcCal2ParAngle");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCal2ParAngleSim */
static void G__setup_memvarHMdcCal2ParAngleSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngleSim));
   { HMdcCal2ParAngleSim *p; p=(HMdcCal2ParAngleSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"drifttime1[100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"drifttime2[100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"drifttime1Err[100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"drifttime2Err[100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCal2Sim */
static void G__setup_memvarHMdcCal2Sim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Sim));
   { HMdcCal2Sim *p; p=(HMdcCal2Sim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack1=",0,"number of Track for first hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack2=",0,"number of Track for second hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"status1=",0,"status of the cell (positive if ok, negative if it should not be used)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"status2=",0,"status of the cell (positive if ok, negative if it should not be used)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"listTrack[5]=",0,"list of 5 tracknumbers (GEANT) for tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"listStatus[5]=",0,"list of status for 5 tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCalParRaw */
static void G__setup_memvarHMdcCalParRaw(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRaw));
   { HMdcCalParRaw *p; p=(HMdcCalParRaw*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcCalParRawSec");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookupGeom */
static void G__setup_memvarHMdcLookupGeom(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGeom));
   { HMdcLookupGeom *p; p=(HMdcLookupGeom*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTimeCut */
static void G__setup_memvarHMdcTimeCut(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCut));
   { HMdcTimeCut *p; p=(HMdcTimeCut*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"fSecs=",0,"Sectors containins modules containing cuts");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isContainer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector),-1,-1,2,"fMdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isused=",0,"flag for used/not used");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCutStat */
static void G__setup_memvarHMdcCutStat(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStat));
   { HMdcCutStat *p; p=(HMdcCutStat*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"fSecs=",0,"Sectors containins modules containing cuts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector),-1,-1,2,"fMdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStat),-1,-2,2,"fMdcCutStat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcWireStat */
static void G__setup_memvarHMdcWireStat(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcWireStat));
   { HMdcWireStat *p; p=(HMdcWireStat*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayI),-1,-1,2,"mb=",0,"mapping sector,module,layer,wire to mother board  [6*4*6*220]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayI),-1,-1,2,"tdc=",0,"mapping sector,module,layer,wire to tdc           [6*4*6*220]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayI),-1,-1,2,"statusmap=",0,"status of the wire: 1=working,-1=not connected, -3=no correct offset, -7=dead, -10=init [6*6*4*220]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayF),-1,-1,2,"efficiency=",0,"efficiency of the wire: 0-1  [6*4*6*220]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayF),-1,-1,2,"offset=",0,"offset of the wire in ns (for simulation)  [6*4*6*220]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCalParTdc */
static void G__setup_memvarHMdcCalParTdc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParTdc));
   { HMdcCalParTdc *p; p=(HMdcCalParTdc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"slope=",0,"gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"offset=",0,"offset");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"slopeErr=",0,"error of gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"offsetErr=",0,"error of offset");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"slopeMethod=",0,"number of method used to determine the slope");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"offsetMethod=",0,"number of method used to determine the offset");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCalibrater1 */
static void G__setup_memvarHMdcCalibrater1(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1));
   { HMdcCalibrater1 *p; p=(HMdcCalibrater1*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,2,"rawCat=",0,"! pointer to the raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,2,"calCat=",0,"! pointer to the cal data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,2,"startHitCat=",0,"! pointer to the start cal data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcRaw),-1,-1,2,"raw=",0,"! pointer to raw data word");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1),-1,-1,2,"cal=",0,"! pointer to cal1 data word");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"StartandCal=",0,"switch between Cal&&Start,noCal&&Start,noCal&&noStart");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"NoStartandNoCal=",0,"switch between Cal&&Start,noCal&&Start,noCal&&noStart");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"NoStartandCal=",0,"switch between Cal&&Start,noCal&&Start,noCal&&noStart");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"setTimeCut=",0,"switch on/off cuts on time1, time2 and time2-time1");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"hasPrinted=",0,"flag is set if printStatus is called");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"embedding=",0,"flag is set if real data should be embedded into simulation data");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_HLocation),-1,-1,2,"loc=",0,"! location for new object.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HIterator),-1,-1,2,"iter=",0,"! iterator on raw data.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HIterator),-1,-1,2,"iterstart=",0,"! iterator on start data.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRaw),-1,-1,2,"calparraw=",0,"! calibration parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGeom),-1,-1,2,"lookup=",0,"! lookup table for mapping");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCut),-1,-1,2,"timecut=",0,"! container for cuts on time1,time2,time2-time1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStat),-1,-1,2,"cutStat=",0,"! container for statistics on cuts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcWireStat),-1,-1,2,"wireStat=",0,"! container for statistics on cuts");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"globalOffset[4]=",0,"!  global offset per plane");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"globalSecOffset[6][4]=",0,"!  global offset per plane");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"globalSlope=",0,"!  global tdc slope");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"countNrWiresPerMod[6][4]=",0,"! counter array for wires /module/event");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"countNrWiresPerModCal[6][4]=",0,"! counter array for wires /module/event on cal after cuts");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cuts[5]=",0,"! counter array passed/not passed time and multiplicity cuts");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cutthreshold=",0,"! max number of wires in Cal1");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useMultCut=",0,"! use/ don't use mult cut");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"doprint=",0,"! print flag for mult cut option");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"skipCal=",0,"! skip all mdc cal events");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"useWireStat=",0,"! skip wires which are broken");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCalParMbo */
static void G__setup_memvarHMdcCalParMbo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParMbo));
   { HMdcCalParMbo *p; p=(HMdcCalParMbo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcCalParTdc");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCalParRawMod */
static void G__setup_memvarHMdcCalParRawMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawMod));
   { HMdcCalParRawMod *p; p=(HMdcCalParRawMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcCalParMbo");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCalParRawSec */
static void G__setup_memvarHMdcCalParRawSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawSec));
   { HMdcCalParRawSec *p; p=(HMdcCalParRawSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcCalParRawMod");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCellEffAngle */
static void G__setup_memvarHMdcCellEffAngle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffAngle));
   { HMdcCellEffAngle *p; p=(HMdcCellEffAngle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"maxR=",0,"maximum distance from sense wire");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"slope=",0,"loss of charge per percent of required maximum signal");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCellEffMod */
static void G__setup_memvarHMdcCellEffMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffMod));
   { HMdcCellEffMod *p; p=(HMdcCellEffMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcCellEffAngle");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCellEff */
static void G__setup_memvarHMdcCellEff(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEff));
   { HMdcCellEff *p; p=(HMdcCellEff*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcCellEffSec");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector),-1,-1,2,"fMdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TString),-1,-1,2,"comment=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCellGroup */
static void G__setup_memvarHMdcCellGroup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup));
   { HMdcCellGroup *p; p=(HMdcCellGroup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"nCellsLookUp[256]=",0,"!");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-2,2,"cellPosLookUp[4][256]=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"lookUpsInitialized=",0,"!");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,2,"pLayer=",0,"!pointer to layer information.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCellGroup6 */
static void G__setup_memvarHMdcCellGroup6(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup6));
   { HMdcCellGroup6 *p; p=(HMdcCellGroup6*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"iLayer[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCellGroup12 */
static void G__setup_memvarHMdcCellGroup12(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup12));
   { HMdcCellGroup12 *p; p=(HMdcCellGroup12*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"iLayer[12]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcContFact */
static void G__setup_memvarHMdcContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcContFact));
   { HMdcContFact *p; p=(HMdcContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCutStatMod */
static void G__setup_memvarHMdcCutStatMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatMod));
   { HMdcCutStatMod *p; p=(HMdcCutStatMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Calibrater1cutT1=",0,"Cut 1:  cutin time1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Calibrater1cutT2=",0,"Cut 2:  cut in time2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Calibrater1cutT12=",0,"Cut 3:  cut in t2-t1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Calibrater1cutWire=",0,"Cut 4:  cut wires<4");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Calibrater1cutT1T12=",0,"Cut 5:  cut t1 and t12");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Calibrater1cutBump=",0,"Cut 6:  bump cut t1 + tot");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Calibrater1All=",0,"Cut 7:  all");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Calibrater1cutAll=",0,"Cut 8:  cut all");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCutStatSec */
static void G__setup_memvarHMdcCutStatSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatSec));
   { HMdcCutStatSec *p; p=(HMdcCutStatSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"fMod=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLayerGeomPar */
static void G__setup_memvarHMdcLayerGeomPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomPar));
   { HMdcLayerGeomPar *p; p=(HMdcLayerGeomPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcLayerGeomParSec ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TNtuple),-1,-1,2,"ntuple=",0,"! Ntuple with all parameters ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcDigitPar */
static void G__setup_memvarHMdcDigitPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitPar));
   { HMdcDigitPar *p; p=(HMdcDigitPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayF),-1,-1,2,"layEff=",0,"efficiency per module and layer");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayF),-1,-1,2,"layEffScale=",0,"efficiency per module and layer scaling with dedx");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayF),-1,-1,2,"layEffThickness=",0,"efficiency per module and layer scaling with 1/cos(theta)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayF),-1,-1,2,"scaleTime1Err=",0,"input scaling of t1err for MAPS");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayF),-1,-1,2,"scaleTime1ErrMIPS=",0,"input scaling of t1err for MIPS");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cellEffScale=",0,"cell efficiency scaling with dedx");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"signalspeed=",0,"speed of signal on the wire (ns/mm)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcGeomStruct */
static void G__setup_memvarHMdcGeomStruct(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomStruct));
   { HMdcGeomStruct *p; p=(HMdcGeomStruct*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"pointer array containing HMdcGeomSecStru objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcGeantCell */
static void G__setup_memvarHMdcGeantCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantCell));
   { HMdcGeantCell *p; p=(HMdcGeantCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"sector=",0,"sector number [0-5]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"module=",0,"module number [0-3]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"layer=",0,"layer number  [0-5]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"cell=",0,"cell number in wire plane");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumHits=",0,"Number of tracks per cell");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMinDist[15]=",0,"Shortest distance from particle trajectory to the sense wire [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeFlight[15]=",0,"Time of flight [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fImpactAngle[15]=",0,"impact angle in Coordinate system of the cell in degree [0-90]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nTrack[15]=",0,"Track number (GEANT)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"flagCutEdge[15]=",0,"flag for cell where the minimum distance was recalculated");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"wireOffset[15]=",0,"offset of signal due to propagation of the signal on the wire [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"efficiency[15]=",0,"efficiency at croped layers");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"theta[15]=",0,"theta impact");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcDigitizer */
static void G__setup_memvarHMdcDigitizer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer));
   { HMdcDigitizer *p; p=(HMdcDigitizer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,4,"fGeantMdcCat=",0,"! MDC HGeant input data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,4,"fGeantKineCat=",0,"! HGeantKine input data");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_HLocation),-1,-1,4,"loc=",0,"! Location for new object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_HLocation),-1,-1,4,"locnoise=",0,"! Location for new object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,4,"fGeantCellCat=",0,"! Pointer to sim data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,4,"fCalCat=",0,"! Pointer to cal data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantCell),-1,-1,4,"hit=",0,"! Pointer to HMdcGeantCell hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantCell),-1,-1,4,"hitReal=",0,"! Pointer to HMdcGeantCell hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomPar),-1,-1,4,"fDigitGeomPar=",0,"! Digitisation \"geom\" parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitPar),-1,-1,4,"fDigitPar=",0,"! Digitisation \"phys\" parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSim),-1,-1,4,"fCal2ParSim=",0,"! pointer to cal2 parameter container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEff),-1,-1,4,"fCellEff=",0,"! pointer to cell efficiency parameter container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcWireStat),-1,-1,4,"fWireStat=",0,"! pointer to wire status parameter container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCut),-1,-1,4,"fTimeCut=",0,"! pointer to time cut parameter container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcSizesCells),-1,-1,4,"fsizescells=",0,"! pointer to hmdcsizescells parameter container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcDeDx2),-1,-1,4,"fdEdX=",0,"! pointer to MdcDeDx2 parameter container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomStruct),-1,-1,4,"geomstruct=",0,"! pointer to hmdcgeomstruct parameter container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1Sim),-1,-1,4,"fCal=",0,"! pointer to data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1Sim),-1,-1,4,"fCalnoise=",0,"! pointer to noise data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantCell),-1,-1,4,"fCell=",0,"! pointer to Container for HMdcGeantCell");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HIterator),-1,-1,4,"iterin=",0,"! Iterator over input category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HIterator),-1,-1,4,"itercell=",0,"! Iterator over cell category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HIterator),-1,-1,4,"itercal1=",0,"! Iterator over cal1 category");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventId=",0,"! Number of current event");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"yDist=",0,"! Distance to the sence wire");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"pi=",0,"! Il y quatre pis a une vache");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"modetdc=",0,"! 2 leading edges or leading and trailing edge of the signal");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"setup[6][4]=",0,"! setup of Mdc (sec,mod)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"time1=",0,"! drift time1 calculated by HMdcCal2ParSim");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"time1Error=",0,"! drift time1 error calculated by HMdcCal2ParSim");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"time2=",0,"! drift time2 calculated by HMdcCal2ParSim");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"time2Error=",0,"! drift time2 error calculated by HMdcCal2ParSim");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"myalpha=",0,"! impact angle of the track in coordinate system of HMdcCal2ParSim");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useError=",0,"! flag for use/don't use error in time1/time2 in output");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useWireOffset=",0,"! flag for use/don't use error in time1/time2 in output");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useDeDx2=",0,"! flag for use/don't use MdcDeDx2 container for t2-t1 simulation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useTimeCut=",0,"! flag for use/don't use MdcTimeCut container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TFile),-1,-1,4,"myoutput=",0,"! file pointer for NTuple");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TNtuple),-1,-1,4,"distance_time=",0,"! nTuple for internal information of the digitizer");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fntuple=",0,"!  switch for use/not use NTuple");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useTof=",0,"! switch for use/not use of tof in output");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"offsets[4]=",0,"! offsets are used to substract min tof");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useOffsets=",0,"! switch for use/not use offset substraction in output");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TGraph),-1,-1,4,"fbetadEdx=",0,"! dedx as function of beta for scaling");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBetaLow=",0,"! lower beta range for scaling");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useDeDxScaling=",0,"! switch on/off efficiency scaling with energyloss");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useDeDxTimeScaling=",0,"! switch on/off time error scaling with energyloss");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"effLevel[4]=",0,"! level of requiered maximum charge to create a signal (for example 20 (=20%))");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useCellEff=",0,"! switch for use/not use cell efficiency cut");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useWireStat=",0,"! switch for use/not use wire stat container");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useWireStatEff=",0,"! switch for use/not use eff from wire stat container (default = kTRUE)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useWireStatOffset=",0,"! switch for use/not use offset from wire stat container (default = kTRUE)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useLayerThickness=",0,"! switch for use/not use layer thisckness eff loss");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useDeltaElectrons=",0,"! switch for use/not use delta electron time smearing");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useDeltaMomSelection=",0,"! switch for use/not use momentum below momMaxDeltaElecCut for primary electrons to identify delta electrons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ionID=",0,"! beam ion (au ==109)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"t1minDeltaElec=",0,"! delta electron smearing lower time range for t1 [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"t1maxDeltaElec=",0,"! delta electron smearing upper time range for t1 [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"momMaxDeltaElecCut=",0,"! delta electron smearing : primary electrons below this mom are considdered to be delta electrons  [MeV/c]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"momMinDeltaCut[6]=",0,"! min mom cut per sector (account for different mirror materials) [MeV/c]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR),G__defined_typename("map<HGeantKine*,Float_t>"),-1,4,"mDeltaTrackT0=",0,"! map delta electron candidates to t1 offsets");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgRcLcLiterator),-1,-1,4,"itDelta=",0,"! map delta electron candidates to t1 offsets");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"hasPrinted=",0,"! flag is set , if printStatus() is called");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"noiseLevel[4]=",0,"! level of randon noise for each module type");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useNoise=",0,"! switch for use/not use of noise generator");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"arrayNoise[5]=",0,"! temp array for status of noise");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"noiseRangeLo[4]=",0,"! lower range of noise for each mdc type");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"noiseRangeHi[4]=",0,"! upper range of noise for each mdc type");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"time1noise=",0,"! time1 generated by the noise generator");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"time2noise=",0,"! time2 generated by the noise generator");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"noisemode=",0,"! switch for different noise modes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"firstHit=",0,"! number of first valid hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"secondHit=",0,"! number of second valid hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"firstTime2=",0,"! time2 of first valid hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"endList1=",0,"! end of the list of hits belonging to the first valid hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"firstsec=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"firstmod=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"firstlay=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"firstcell=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"noisebandwidth=",0,"! width of t2-t1 band in noise");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"noisewhitewidth=",0,"! width of t2-t1 large region in noise");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"noisewhiteratio=",0,"! ration between large region and band in noise");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"dTime[15]=",0,"! drift time1 + tof");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"dTime2[15]=",0,"! drift time2 + tof");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"dTimeErr[15]=",0,"! error of drift time1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"dTime2Err[15]=",0,"! error of drift time2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"minimumdist[15]=",0,"! minimum distance to wire");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"track[15]=",0,"! track numbers");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"timeOfFlight[15]=",0,"! tof");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"angle[15]=",0,"! impact angle in coordinate system of the cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"statusflag[15]=",0,"! flag for efficiency");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"fractionOfmaxCharge[15]=",0,"! value for fraction of maximum charge");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"cutEdge[15]=",0,"! flag for minimum distance point out of cell");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"wireOffset[15]=",0,"! time for signal propagation on the wire");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"efficiency[15]=",0,"! efficiency  of track in layer");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"theta[15]=",0,"! theta impact");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"time1Real=",0,"! drift time1 from real data");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"time2Real=",0,"! drift time2 from real data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nHitsReal=",0,"! number of hists from real data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"embeddingmode=",0,"switch for keeping geant hits / realistic embedding");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"signalSpeed=",0,"speed of signal on the wire");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"scaleError[4]=",0,"! scaler for error of time per module type");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"scaleErrorMIPS[4]=",0,"! scaler for error of time per module type");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"rndmoffsets[6][4][6][220]=",0,"! random offsets to simulate calibrated offsets");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigmaoffsets=",0,"! sigma of the gausian random offset distribution");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"createoffsets=",0,"! switch kTRUE: create offsets,kFALSE: read from file");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"offsetsCreated=",0,"! remember if offsets were created or read from ascii file");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"scaletime=",0,"! simple scaler for manipulating drift times (as done by tdc slopes)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_vectorlEHMdcDigiLayEffcOallocatorlEHMdcDigiLayEffgRsPgR),G__defined_typename("vector<HMdcDigiLayEff>"),-1,4,"vLayEff=",0,"! layer eff random numbers per track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcDigiLayEff),-1,-1,4,"layEff=",0,"! layer eff object for calulation of eff depending on impact angle");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcGeantReader */
static void G__setup_memvarHMdcGeantReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantReader));
   { HMdcGeantReader *p; p=(HMdcGeantReader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TTree),-1,-1,4,"t=",0,"Pointer to the root tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMatrixCategory),-1,-1,4,"fGeantMdcCat=",0,"! MDC HGeant input data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventId=",0,"! event counter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcGeomModStru */
static void G__setup_memvarHMdcGeomModStru(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomModStru));
   { HMdcGeomModStru *p; p=(HMdcGeomModStru*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nCells[6]=",0,"number of cells in the layers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcGeomSecStru */
static void G__setup_memvarHMdcGeomSecStru(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomSecStru));
   { HMdcGeomSecStru *p; p=(HMdcGeomSecStru*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"pointer array containing HMdcGeomModStru objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcHit */
static void G__setup_memvarHMdcHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHit));
   { HMdcHit *p; p=(HMdcHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"x=",0,"x-coordinate of hit in MDC coordinate sys [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"y=",0,"y-coordinate of hit in MDC coordinate sys [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xDir=",0,"x-direction of hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yDir=",0,"y-direction of hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"offset=",0,"time offset [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"chi2=",0,"chi square per degree of freedom");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"flag=",0,"user flag");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_HSymMat5),-1,-1,2,"cov=",0,"covariance matrix of parameters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"sector [0-5]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"module [0-3]");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"trFinder=",0,"=1 - Dubna track finder (see hmdchit.cc)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"index=",0,"index of HMdcClusInf obj.  |");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcHitSim */
static void G__setup_memvarHMdcHitSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitSim));
   { HMdcHitSim *p; p=(HMdcHitSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTracks=",0,"number of tracks in the list of tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"listTracks[5]=",0,"list of tracks");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"nTimes[5]=",0,"num. of drift times from each track");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"status=",0,"status of hit (e.g. 1 if ok)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcSeg */
static void G__setup_memvarHMdcSeg(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSeg));
   { HMdcSeg *p; p=(HMdcSeg*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"z=",0,"z cordinate in sector coordinate sys. [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"r=",0,"r coordinate in sector coordinate sys. [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"theta=",0,"polar angle theta in sector coordinate sys. [radian]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phi=",0,"azimuthal angle phi in sector coordinate sys. [radian]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"chi2=",0,"chi square per degree of freedom");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"flag=",0,"Cluster info: number of cells, bins and merged clusters ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_HSymMat4),-1,-1,2,"cov=",0,"covariance matrix 4x4 in sector system		      ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"ind=",0,"index for hit1/sector");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"ind2=",0,"index for hit2/inner-outer segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zPrime=",0,"z cordinate wrt axis centered on target position");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rPrime=",0,"r coordinate wrt axis centered on target position");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"clusInd=",0,"index of MDC cluster");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"x1=",0,"x1,y1 - cross point of the segment line with first mdc layer (in sec.coor.sys.)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"y1=",0,"Convert to mm: Float_t(x1)*0.1; Float_t(y1)*0.1;");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"x2=",0,"x2,y2 - cross point of the segment line with last mdc layer (in sec.coor.sys.)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"y2=",0,"Convert to mm: Float_t(x2)*0.1; Float_t(y2)*0.1;");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcSegcLcLdA),-1,-2,2,"kIsFake=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcSegcLcLdA),-1,-2,2,"kOffVertexClust=1048576LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcSegSim */
static void G__setup_memvarHMdcSegSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegSim));
   { HMdcSegSim *p; p=(HMdcSegSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nTracks=",0,"number of tracks in the list of tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"listTracks[5]=",0,"list of tracks");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"nTimes[5]=",0,"number of times from each track");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"nDigiTimes[5]=",0,"num. of digitized dr.times in segment (or module)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"trackStatus[5]=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"nNotFakeTracks=",0,"Number of tracks with non fake contribution");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"ioSMatchStatus=",0,"> 0 - num. of not fake tracks with IOseg matching");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"status=",0,"status of seg. (e.g. 1 if ok)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrkCand */
static void G__setup_memvarHMdcTrkCand(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand));
   { HMdcTrkCand *p; p=(HMdcTrkCand*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"sector=",0,"sector number");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"flag=",0,"user flag");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nCandForSeg1=",0,"number of HMdcTrkCand objects ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nextCandInd=",0,"index of next HMdcTrkCand object");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"firstCandInd=",0,"index of the first HMdcTrkCand object with");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"seg1Ind=",0,"index of HMdcSeg container (inner segment)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"seg2Ind=",0,"index of HMdcSeg container (outer segment)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"metaMatchInd=",0,"first HMetaMatch obj.index created for this");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dedxInner=",0,"mean value of t2-t1 for inner segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dedxSigmaInner=",0,"sigma of t2-t1 distribution in inner segment");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"dedxNWireInner=",0,"number of wires in inner segment before truncated mean procedure");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"dedxNWireCutInner=",0,"number of wires in inner segment cutted by truncated mean procedure");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dedxOuter=",0,"mean value of t2-t1 for outer segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dedxSigmaOuter=",0,"sigma of t2-t1 distribution in outer segment");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"dedxNWireOuter=",0,"number of wires in outer segment before truncated mean procedure");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"dedxNWireCutOuter=",0,"number of wires in outer segment cutted by truncated mean procedure");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dedxCombined=",0,"mean value of t2-t1 for inner+outer segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dedxSigmaCombined=",0,"sigma of t2-t1 distribution in inner+outer segment");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"dedxNWireCombined=",0,"number of wires in inner+outer segment before truncated mean procedure");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"dedxNWireCutCombined=",0,"number of wires in inner+outer segment cutted by truncated mean procedure");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dedx[4]=",0,"mean value of t2-t1 per module");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dedxSigma[4]=",0,"sigma of t2-t1 distribution per module");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"dedxNWire[4]=",0,"number of wires per module before truncated mean procedure");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"dedxNWireCut[4]=",0,"number of wires per module cutted by truncated mean procedure");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCandcLcLdA),-1,-2,2,"kIsSeg1Fake=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCandcLcLdA),-1,-2,2,"kIsSeg2Fake=32768LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand),-1,-1,4,"pFirstCand=",0,"! first HMdcTrkCand object with");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcHitIdeal */
static void G__setup_memvarHMdcHitIdeal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitIdeal));
   { HMdcHitIdeal *p; p=(HMdcHitIdeal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcSegIdeal */
static void G__setup_memvarHMdcSegIdeal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegIdeal));
   { HMdcSegIdeal *p; p=(HMdcSegIdeal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrkCandIdeal */
static void G__setup_memvarHMdcTrkCandIdeal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCandIdeal));
   { HMdcTrkCandIdeal *p; p=(HMdcTrkCandIdeal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLayerGeomParLay */
static void G__setup_memvarHMdcLayerGeomParLay(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParLay));
   { HMdcLayerGeomParLay *p; p=(HMdcLayerGeomParLay*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"pitch=",0,"Distance bitween sense wires");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numWires=",0,"! Number of wires");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"catDist=",0,"Cell thickness");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"wireOrient=",0,"Inclination angle");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"centralWireNr=",0,"Number of wire which goes through geometrical center of MDC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cathodeWireThickness=",0,"Thickness of cathode wires");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_HGeomTransform),-1,-1,2,"layerPos=",0,"! Position of layer in MDC coordinate system");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLayerGeomParMod */
static void G__setup_memvarHMdcLayerGeomParMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParMod));
   { HMdcLayerGeomParMod *p; p=(HMdcLayerGeomParMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLayerGeomParSec */
static void G__setup_memvarHMdcLayerGeomParSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParSec));
   { HMdcLayerGeomParSec *p; p=(HMdcLayerGeomParSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookupChan */
static void G__setup_memvarHMdcLookupChan(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupChan));
   { HMdcLookupChan *p; p=(HMdcLookupChan*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nLayer=",0,"number of the layer");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nCell=",0,"number of the cell");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"readoutSide=",0,"side, where the signal is read out");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookupMoth */
static void G__setup_memvarHMdcLookupMoth(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupMoth));
   { HMdcLookupMoth *p; p=(HMdcLookupMoth*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookupGMod */
static void G__setup_memvarHMdcLookupGMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGMod));
   { HMdcLookupGMod *p; p=(HMdcLookupGMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookupGSec */
static void G__setup_memvarHMdcLookupGSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGSec));
   { HMdcLookupGSec *p; p=(HMdcLookupGSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookupCell */
static void G__setup_memvarHMdcLookupCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupCell));
   { HMdcLookupCell *p; p=(HMdcLookupCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nMoth=",0,"number of the Motherboard");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nChan=",0,"number of the TDC channel");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"readoutSide=",0,"side, where thes signal is read out");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookupLayer */
static void G__setup_memvarHMdcLookupLayer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupLayer));
   { HMdcLookupLayer *p; p=(HMdcLookupLayer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookupRMod */
static void G__setup_memvarHMdcLookupRMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRMod));
   { HMdcLookupRMod *p; p=(HMdcLookupRMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookupRSec */
static void G__setup_memvarHMdcLookupRSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRSec));
   { HMdcLookupRSec *p; p=(HMdcLookupRSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcLookupRaw */
static void G__setup_memvarHMdcLookupRaw(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRaw));
   { HMdcLookupRaw *p; p=(HMdcLookupRaw*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcParAsciiFileIo */
static void G__setup_memvarHMdcParAsciiFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcParAsciiFileIo));
   { HMdcParAsciiFileIo *p; p=(HMdcParAsciiFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcRawStruct */
static void G__setup_memvarHMdcRawStruct(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawStruct));
   { HMdcRawStruct *p; p=(HMdcRawStruct*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTdcThreshold */
static void G__setup_memvarHMdcTdcThreshold(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThreshold));
   { HMdcTdcThreshold *p; p=(HMdcTdcThreshold*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcTdcThresholdSec");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"oraVersion=",0,"parameter version in Oracle");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawStruct),-1,-1,2,"pRawStruct=",0,"! pointer to parameter container MdcRawStruct");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"status=",0,"! Status of parameters (usable for DAQ?)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTdcChannel */
static void G__setup_memvarHMdcTdcChannel(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannel));
   { HMdcTdcChannel *p; p=(HMdcTdcChannel*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcTdcChannelSec");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"oraVersion=",0,"parameter version in Oracle");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"status=",0,"status of the parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawStruct),-1,-1,2,"pRawStruct=",0,"! Internaly needed to setup the container structure");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGeom),-1,-1,2,"pLookupGeom=",0,"! Internally needed to map out not connected channels");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"mapNotConnectedChannels=",0,"Map out channels that have no wire connected");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcParRootFileIo */
static void G__setup_memvarHMdcParRootFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcParRootFileIo));
   { HMdcParRootFileIo *p; p=(HMdcParRootFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayI),-1,-1,2,"initModuleTypes=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcPPEvtFilter */
static void G__setup_memvarHMdcPPEvtFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcPPEvtFilter));
   { HMdcPPEvtFilter *p; p=(HMdcPPEvtFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HRuntimeDb),-1,-1,2,"rtdb=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,2,"catmHMdcSeg=",0,"! HMdcSeg Category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcSeg),-1,-1,2,"mdcseg=",0,"! seg data level");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HIterator),-1,-1,2,"mdcsegiter=",0,"! seg iterator");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,2,"catmHMdcClus=",0,"! HMdcClus Category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcClus),-1,-1,2,"mdcclus=",0,"! clus data level");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HIterator),-1,-1,2,"mdcclusiter=",0,"! clus iterator");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"title[300]=",0,"! histrogram title");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"name[300]=",0,"! histogram name");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"xtitle[300]=",0,"! histogram xaxis title");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"ytitle[300]=",0,"! histogram yaxis title");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"ztitle[300]=",0,"! histogram zaxis title");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TH1F),-1,-1,2,"histtanthetamult=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TH1F),-1,-1,2,"histphidiff=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TH1F),-1,-1,2,"histphidiffcut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TH1F),-1,-1,2,"histtanthetamultcut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TH2F),-1,-1,2,"histchithetacut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TH2F),-1,-1,2,"histchitheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TH2F),-1,-1,2,"histchiphicut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TH2F),-1,-1,2,"histchiphi=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TCanvas),-1,-1,2,"canv1=",0,"! canvas for histogram");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TCanvas),-1,-1,2,"canv2=",0,"! canvas for histogram");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TCanvas),-1,-1,2,"canv3=",0,"! canvas for histogram");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TString),-1,-1,2,"histFileDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TString),-1,-1,2,"histFileSuffix=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TString),-1,-1,2,"histFileOption=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TString),-1,-1,2,"histFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TString),-1,-1,2,"psFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TString),-1,-1,2,"flNmWoExt=",0,"input file name without extension");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"saveHist=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"saveCanv=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"savePSFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"flagcategory=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector[200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phishift[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"theta[200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phi[200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phidiff=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tanthetamult=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phimin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phimax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tanthetamin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tanthetamax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phiwidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tanthetawidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tanthetamean=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phimean=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"multiplicity=",0,"multiplicity counter");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"IsElasticFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"TrigBit=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"chi2[200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcRawMothStru */
static void G__setup_memvarHMdcRawMothStru(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawMothStru));
   { HMdcRawMothStru *p; p=(HMdcRawMothStru*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTdcs=",0,"number of TDCs on the motherboard");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcRawModStru */
static void G__setup_memvarHMdcRawModStru(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawModStru));
   { HMdcRawModStru *p; p=(HMdcRawModStru*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcRawSecStru */
static void G__setup_memvarHMdcRawSecStru(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawSecStru));
   { HMdcRawSecStru *p; p=(HMdcRawSecStru*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcSetup */
static void G__setup_memvarHMdcSetup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup));
   { HMdcSetup *p; p=(HMdcSetup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizerSetup),-1,-1,2,"digiset=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1Setup),-1,-1,2,"cal1set=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrackFinderSetup),-1,-1,2,"trackfinderset=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcClusterToHitSetup),-1,-1,2,"clustertohitset=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdc12FitSetup),-1,-1,2,"fitterset=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcCommonSetup),-1,-1,2,"commonset=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcDigitizerSetup */
static void G__setup_memvarHMdcDigitizerSetup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizerSetup));
   { HMdcDigitizerSetup *p; p=(HMdcDigitizerSetup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup),-1,-1,2,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tdcModeDigi=",0,"leading and trailing edge or 2 times leading edge");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"NtupleDigi=",0,"write NTuple");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"useTofDigi=",0,"add tof to drift time in cal1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"useErrorDigi=",0,"add error to drift time in cal1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"useWireOffsetDigi=",0,"add signal time on wire to drift time in cal1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"useWireStatDigi=",0,"use wirestat container for dead wires/efficiency");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"embeddingModeDigi=",0,"keep geant hits or merge realistic");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"useTimeCutsDigi=",0,"use/d not use time cuts");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"offsetsOnDigi=",0,"switch on/off use offset");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cellEffOnDigi=",0,"switch on/off use cellEff");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"noiseOnDigi=",0,"switch on/off use noise");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayF),-1,-1,2,"offsetsDigi=",0,"offset in ns to be substracted from (drift time + tof) per plane");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayF),-1,-1,2,"cellEffDigi=",0,"Efficiency level of cell per plane");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"noiseModeDigi=",0,"switch the different noise modes");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayF),-1,-1,2,"noiseLevelDigi=",0,"noise level per plane");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayI),-1,-1,2,"noiseRangeLoDigi=",0,"lower boundery for noise simulation per plane");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayI),-1,-1,2,"noiseRangeHiDigi=",0,"upper boundery for noise simulation per plane");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCalibrater1Setup */
static void G__setup_memvarHMdcCalibrater1Setup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1Setup));
   { HMdcCalibrater1Setup *p; p=(HMdcCalibrater1Setup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup),-1,-1,2,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ModeFlagCal1=",0,"switch the different modes of the calibrater1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"TimeCutFlagCal1=",0,"switch on/off time cuts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackFinderSetup */
static void G__setup_memvarHMdcTrackFinderSetup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrackFinderSetup));
   { HMdcTrackFinderSetup *p; p=(HMdcTrackFinderSetup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup),-1,-1,2,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"isCoilOff=",0,"magnet on/off");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"typeClustFinder=",0,"segment or mdc");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayI),-1,-1,2,"nLayers=",0,"number of layers per module [6][4]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayI),-1,-1,2,"nLevel=",0,"level of hit finding");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcClusterToHitSetup */
static void G__setup_memvarHMdcClusterToHitSetup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcClusterToHitSetup));
   { HMdcClusterToHitSetup *p; p=(HMdcClusterToHitSetup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup),-1,-1,2,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mdcForSeg1=",0,"what to fill in segment1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mdcForSeg2=",0,"what to fill in segment2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdc12FitSetup */
static void G__setup_memvarHMdc12FitSetup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdc12FitSetup));
   { HMdc12FitSetup *p; p=(HMdc12FitSetup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup),-1,-1,2,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fitauthor=",0,"different fit algorhythms");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fitVersion=",0,"use polynom,cal2parsim for distance/time");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fitIndep=",0,"segment,mdc");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fitNTuple=",0,"NTuple");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fitPrint=",0,"print");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCommonSetup */
static void G__setup_memvarHMdcCommonSetup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCommonSetup));
   { HMdcCommonSetup *p; p=(HMdcCommonSetup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup),-1,-1,2,"setup=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"isSimulation=",0,"sim,real data ,merge");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"analysisLevel=",0,"raw,cal1,cal2,hit,fit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tracker=",0,"dubna, santiago");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcVertexFind */
static void G__setup_memvarHMdcVertexFind(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFind));
   { HMdcVertexFind *p; p=(HMdcVertexFind*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFindcLcLEInputMode),-1,-2,1,G__FastAllocString(2048).Format("kSegments=%lldLL",(long long)HMdcVertexFind::kSegments).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFindcLcLEInputMode),-1,-2,1,G__FastAllocString(2048).Format("kHits=%lldLL",(long long)HMdcVertexFind::kHits).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_HGeomVertexFit),-1,-1,2,"fFitter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TNtuple),-1,-1,2,"fControl=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClonesArray),-1,-1,2,"fPos=",0,"! r for each track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClonesArray),-1,-1,2,"fAlpha=",0,"! alpha vector for each track");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,2,"fInput=",0,"! Geant MDC data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomPar),-1,-1,2,"fGeometry=",0,"! Geometry transformation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HSpecGeomPar),-1,-1,2,"fSpecGeometry=",0,"! Spectrometer's geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HIterator),-1,-1,2,"fIter=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTukeyConst=",0,"Value used as Tukey constant");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxIterations=",0,"Maximum number of iterations");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fUsingTukey=",0,"Flag turning on and off Tukey weights");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDebugMode=",0,"Debug mode on/off");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fEpsilon=",0,"Used for convergence criterium");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fminZ=",0,"! minz range for segments");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fmaxZ=",0,"! maxz range for segments");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fmaxR=",0,"! maxr range for segments");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fseg0Chi2Cut=",0,"! cut off in mom fit chi2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fminReqTrack=",0,"! minimum required tracks after mean z filter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fminWindow=",0,"! minimum window  for mean z filter");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fProgressiveTukey=",0,"! make stronger cut with rising mult");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fcallExecuteManual=",0,"!");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFindcLcLEInputMode),-1,-1,2,"fInputMode=",0,"! Read segments or hits?");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isEmbedding=",0,"! kTRUE if is in embedding mode");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"rejectEmbeddedTracks=",0,"! = kTRUE (default) reject embedded tracks from vertex calculation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"useEventSeqNumber=",0,"! use the eventSeq Number decide of event skipping in embedding mode");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"doSkipNoVertex=",0,"! skip events if no vertex is calculated");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"doSkipFakeSegments=",0,"! skip fake segments (default = kTRUE)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TIterator),-1,-1,2,"geantKineIter=",0,"! Iterator over GeantKine category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTaskSet */
static void G__setup_memvarHMdcTaskSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTaskSet));
   { HMdcTaskSet *p; p=(HMdcTaskSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"ilevel=",0,"counter for arguments of analysis levels");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"irealorsimulation=",0,"counter for arguments of real/simulation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"icalibrater=",0,"counter for arguments of calibrater mode");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"itimecuts=",0,"counter for arguments of calibrater time cuts");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"itracker=",0,"counter for arguments of tracker type");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"imagnet=",0,"counter for arguments of magnet status");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"itrackermode=",0,"counter for arguments of tracker mode (DUBNA)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"analysisLevel=",0,"0=raw,1=cal1,2=cal2,3=hit,4=fit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"cal1TimeCutFlag=",0,"0=nocuts, 1=cuts");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"cal1ModeFlag=",0,"1=nostartandcal,2=startandcal,3=nostartandnocal");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"tracker=",0,"1=dubna,2=santiago");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"isCoilOff=",0,"kTRUE=magnetoff,kFALSE=magneton");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"typeClustFinder=",0,"0=combinedchamberclusters,1=singlechamberclusters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"nLayers[6][4]=",0,"number of layers per module for trackfinder");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"nLevel[4]=",0,"levels for hit finding in seg1 and seg2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"mdcForSeg1=",0,"-1=don't fill HMdcSeg for segment 1,");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"mdcForSeg2=",0,"-1=don't fill HMdcSeg for segment 1,");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fitAuthor=",0,"DUBNA:0=Hedar, 1=Alexandr");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fitNTuple=",0,"DUBNA:kTRUE=fill NTuple,kFALSE=fill nothing");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fitPrint=",0,"DUBNA:kTRUE=print debug,kFALSE=print nothing");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fitVersion=",0,"DUBNA:1=old,2=new");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fitIndep=",0,"DUBNA: 0=MDC fit, 1=segment fit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"isSimulation=",0,"1=sim.0=real,2=merge");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer),-1,-2,4,"mdcdigi=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1),-1,-2,4,"calibrater1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcDeDx2Maker),-1,-2,4,"dedx2maker=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"versionDeDx=",0,"!  0: no dedx, 1=dedx");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"idealTracking=",0,"kTRUE - ideal tracking");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fillParallel=",0,"kTRUE will fill HMdcHitSim,HMdcSegSim and HMdcTrkCand to ideal categories");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup),-1,-2,4,"mdcsetup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup),-1,-2,4,"mdcsetuplocal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1Setup),-1,-2,4,"calibrater1setlocal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizerSetup),-1,-2,4,"digisetlocal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcTrackFinderSetup),-1,-2,4,"trackfindersetlocal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcClusterToHitSetup),-1,-2,4,"clustertohitsetlocal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdc12FitSetup),-1,-2,4,"fittersetlocal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcCommonSetup),-1,-2,4,"commonsetlocal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFind),-1,-2,4,"vertexfinder=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"isCreated=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"rtdbinput=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTdcChannelTdc */
static void G__setup_memvarHMdcTdcChannelTdc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelTdc));
   { HMdcTdcChannelTdc *p; p=(HMdcTdcChannelTdc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"channelMask[2]=",0,"TDC channel mask (index 1: channel mask, 0: callibration mask)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTdcChannelMbo */
static void G__setup_memvarHMdcTdcChannelMbo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMbo));
   { HMdcTdcChannelMbo *p; p=(HMdcTdcChannelMbo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcTdcChannelTdc");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTdcChannelMod */
static void G__setup_memvarHMdcTdcChannelMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMod));
   { HMdcTdcChannelMod *p; p=(HMdcTdcChannelMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcTdcChanneldMbo");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTdcChannelSec */
static void G__setup_memvarHMdcTdcChannelSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelSec));
   { HMdcTdcChannelSec *p; p=(HMdcTdcChannelSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcTdcChannel Mod");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTdcThresholdDbo */
static void G__setup_memvarHMdcTdcThresholdDbo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdDbo));
   { HMdcTdcThresholdDbo *p; p=(HMdcTdcThresholdDbo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"threshold=",0,"threshold of the two tdc of one DBO");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTdcThresholdMbo */
static void G__setup_memvarHMdcTdcThresholdMbo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMbo));
   { HMdcTdcThresholdMbo *p; p=(HMdcTdcThresholdMbo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcTdcThresholdDbo");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTdcThresholdMod */
static void G__setup_memvarHMdcTdcThresholdMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMod));
   { HMdcTdcThresholdMod *p; p=(HMdcTdcThresholdMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcTdcThresholdMbo");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTdcThresholdSec */
static void G__setup_memvarHMdcTdcThresholdSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdSec));
   { HMdcTdcThresholdSec *p; p=(HMdcTdcThresholdSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HMdcTdcThresholdMod");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTimeCutMod */
static void G__setup_memvarHMdcTimeCutMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutMod));
   { HMdcTimeCutMod *p; p=(HMdcTimeCutMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cutT1L=",0,"Cut 1:  cutT1L<time1<cutT1R");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cutT1R=",0,"cutT1L>=cutT1R - no cut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cutT2L=",0,"Cut 2:  cutT2L<time2<cutT2R");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cutT2R=",0,"cutT2L>=cutT2R - no cut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cutLeft=",0,"Cut 3: cutLeft<(time2-time1)<cutRight");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cutRight=",0,"cutLeft>=cutRight - no cut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cutBumpT1L=",0,"bump Cut 1:  cutBumpT1L<time1<cutBumpT1R");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cutBumpT1R=",0,"cutBumpT1L>=cutBumpT1R - no cut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cutBumpTotL=",0,"bump Cut 2:  cutTotL<time2<cutTotR");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cutBumpTotR=",0,"cutBumpTotL>=cutBumpTotR - no cut");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTimeCutSec */
static void G__setup_memvarHMdcTimeCutSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutSec));
   { HMdcTimeCutSec *p; p=(HMdcTimeCutSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"fMod=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrk */
static void G__setup_memvarHMdcTrk(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrk));
   { HMdcTrk *p; p=(HMdcTrk*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"z=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"r=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"p=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"theta=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"chi2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_HSymMat5),-1,-1,2,"cov=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"flag=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"segIndex[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcVertexWriter */
static void G__setup_memvarHMdcVertexWriter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexWriter));
   { HMdcVertexWriter *p; p=(HMdcVertexWriter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TString),-1,-1,2,"outputdir=",0,"outputdirectory (optional)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TFile),-1,-1,2,"outfile=",0,"pointer to root file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TNtuple),-1,-1,2,"vertex=",0,"pointer to vertex ntuple");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TString),-1,-1,2,"filename=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fileNameFromInput=",0,"flag to remember if filename was created from input or outputfile");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fileNameManual=",0,"outputfile set by hand");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isEmbedding=",0,"flag to check if embedding mode is on");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"doSkipNoVertex=",0,"== kTRUE skip no vertex even if it is not calculated (default: KFALSE)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"vertextype=",0,"kVertexCluster= 1, kVertexSegment = 2 (segments), kVertexParticle = 3");
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Bool_t (*)(TObjArray*)"),-1,2,"pUserSelectEvent=",0,"! user provided function pointer to lepton selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TObjArray),-1,-1,2,"pUserParams=",0,"user params for event selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcUnpackerPar */
static void G__setup_memvarHMdcUnpackerPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpackerPar));
   { HMdcUnpackerPar *p; p=(HMdcUnpackerPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"decodeVersion=",0,"Version of decodeding to be used");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tdcMode=",0,"Mode of the tdc triggering");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"doAddrCorr=",0,"Use address correction tables");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mapOutUnusedChannels=",0,"Enable mapping of unused channels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcDataword */
static void G__setup_memvarHMdcDataword(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDataword));
   { HMdcDataword *p; p=(HMdcDataword*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcDatawordcLcLdA),-1,-2,2,"m1=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcDatawordcLcLdA),-1,-2,2,"m3=7LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcDatawordcLcLdA),-1,-2,2,"m4=15LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcDatawordcLcLdA),-1,-2,2,"m5=31LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcDatawordcLcLdA),-1,-2,2,"m11=2047LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcDatawordcLcLdA),-1,-2,2,"m16=65535LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcDatawordcLcLdA),-1,-2,2,"m24=16777215LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcDatawordcLcLdA),-1,-2,2,"m26=67108863LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcDatawordcLcLdA),-1,-2,2,"m29=268435455LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcDictLN_HMdcDatawordcLcLdA),-1,-2,2,"m32=-1LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"decodeType=",0,"Type of decoding");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"eventNumber=",0,"Number of event");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"triggerType=",0,"Type of trigger (1 = normal, 9 = calibration)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"errorFlag=",0,"Status information from subevent");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"subEventSize=",0,"Number of datawords in subevent");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"statusCode=",0,"Code of Statusword, see doc.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"statusData=",0,"See doc.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mboAddress=",0,"Adress information of motherboard");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tdcNumber=",0,"Number of TDC chip on MBO");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"channel=",0,"Number of channel in TDC");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"hit=",0,"Number of hit in TDC (0 or 1)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time=",0,"Measured time in channels (~500ps)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"MdcRaw container coordinate: sector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"MdcRaw container coordinate: module");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mbo=",0,"MdcRaw container coordinate: mbo");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tdc=",0,"MdcRaw container coordinate: tdc (tdc * 8 + channel)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"entry=",0,"Number of entry");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"noComment=",0,"! Switches of all comments");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time1=",0,"second hit of channel");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"debug=",0,"Enable debugging of dataword");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcOepAddrCorrPar */
static void G__setup_memvarHMdcOepAddrCorrPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcOepAddrCorrPar));
   { HMdcOepAddrCorrPar *p; p=(HMdcOepAddrCorrPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),G__defined_typename("map<Int_t,Int_t>"),-1,2,"address=",0,"! Map wrong addresses of OEP's to correct ones e.g. 2001 -> 2003");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TArrayI),-1,-1,2,"AddressLookupMap=",0,"Map wrong addresses of OEP's to correct ones e.g. 2001 -> 2003");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcUnpacker */
static void G__setup_memvarHMdcUnpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpacker));
   { HMdcUnpacker *p; p=(HMdcUnpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcDataword),-1,-1,2,"dataword=",0,"! Pointer to dataword");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcRawStruct),-1,-1,2,"rawc=",0,"! Pointer to lookup table");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGeom),-1,-1,2,"lookupGeom=",0,"! Pointer to lookup table channel to wire number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,2,"pMdcDataWordCat=",0,"! Pointer to category to store raw event information in");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HCategory),-1,-1,2,"pMdcOepStatusCat=",0,"! Pointer to category to store Oep Status words in");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcOepAddrCorrPar),-1,-1,2,"addrCorrPar=",0,"! Pointer to OEP address correction map");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HDetector),-1,-1,2,"pDetector=",0,"! Pointer to Detector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HTrbNetUnpacker),-1,-1,2,"trbNetUnpacker=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpackerPar),-1,-1,2,"pUnpackerPar=",0,"! Pointer to unpacker parameters for data recovery");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"continueDecodingAfterInconsistency=",0,"! Flag to enable stubborn behaviour of unpacker");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"debugMode=",0,"! switch on debugging mode of unpacker");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"decodeVersion=",0,"! Version number of data word decoding");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"doAddrCorrection=",0,"! enable address correction of OEP's");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"doMapOutUnusedChannels=",0,"! enable mapping of unused channels");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"consistencyCheck=",0,"! enable consistency check on data");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fillDataWord=",0,"! Flag to enable filling of the dataword");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fillOepStatus=",0,"! Flag to enable oepstatus word filling");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"mdcDataWordCatPersistency=",0,"! Flag for persistency of HMdcDataWord category");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"mdcOepStatusCatPersistency=",0,"! Flag for persistency of HMdcOepStatusData category");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"doBitFlipCorr=",0,"! correct known bitflips of MBos");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcDictLN_TString),-1,-1,2,"bitFlipVersion=",0,"! default = \"auto\"");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"! Module handled.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"noComment=",0,"! Flag to enable basic debug printouts");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"! Sector handled.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"subEvtId=",0,"! Sub event Id this unpacker is responsible for.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tdcMode=",0,"! tdcMode defines the mode the tdc has taken data:");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"badEventsCounter=",0,"! Counter for events wich have errors and get skipped");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcOepStatusData */
static void G__setup_memvarHMdcOepStatusData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcOepStatusData));
   { HMdcOepStatusData *p; p=(HMdcOepStatusData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"address=",0,"Address of OEP (module, sector, mbo)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"data[32]=",0,"32 words of status data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMdcDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHMdcRaw(void) {
   /* HMdcRaw */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRaw));
   G__memfunc_setup("HMdcRaw",646,G__MdcDict_316_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcRaw), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_316_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__MdcDict_316_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__MdcDict_316_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMbo",618,G__MdcDict_316_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdc",615,G__MdcDict_316_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__MdcDict_316_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 10 - s i - 'Int_t' 10 - m "
"i - 'Int_t' 10 - mb i - 'Int_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__MdcDict_316_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - - i - 'Int_t' 10 '0' mode "
"g - 'Bool_t' 10 'kFALSE' noComment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeNew",1029,G__MdcDict_316_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - time i - 'Int_t' 10 - nrtime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcDict_316_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__MdcDict_316_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMbo",606,G__MdcDict_316_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdc",603,G__MdcDict_316_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__MdcDict_316_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - mb i - 'Int_t' 1 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNHits",806,G__MdcDict_316_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTrialsToFillHits",2015,G__MdcDict_316_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__MdcDict_316_0_17, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_316_0_18, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcRaw::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_316_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRaw::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_316_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcRaw::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_316_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcRaw::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_316_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_316_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRaw::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_316_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRaw::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_316_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRaw::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_316_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRaw::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcRaw", 646, G__MdcDict_316_0_30, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcRaw), -1, 0, 1, 1, 1, 0, "u 'HMdcRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcRaw", 772, G__MdcDict_316_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_316_0_32, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcRaw), -1, 1, 1, 1, 1, 0, "u 'HMdcRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcRawCor(void) {
   /* HMdcRawCor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawCor));
   G__memfunc_setup("HMdcRawCor",938,G__MdcDict_317_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcRawCor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_317_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__MdcDict_317_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 10 - s i - 'Int_t' 10 - m "
"i - 'Int_t' 10 - mb i - 'Int_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlagRaw",1008,G__MdcDict_317_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFlagRaw",996,G__MdcDict_317_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeShift",1241,G__MdcDict_317_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - sh i - 'Int_t' 10 - nsh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcDict_317_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__MdcDict_317_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMbo",606,G__MdcDict_317_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdc",603,G__MdcDict_317_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__MdcDict_317_0_11, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - mb i - 'Int_t' 1 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_317_0_12, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcRawCor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_317_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawCor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_317_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcRawCor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_317_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcRawCor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_317_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_317_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawCor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_317_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRawCor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_317_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawCor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_317_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRawCor::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcRawCor", 938, G__MdcDict_317_0_24, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcRawCor), -1, 0, 1, 1, 1, 0, "u 'HMdcRawCor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcRawCor", 1064, G__MdcDict_317_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_317_0_26, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcRawCor), -1, 1, 1, 1, 1, 0, "u 'HMdcRawCor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcRawEventHeader(void) {
   /* HMdcRawEventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawEventHeader));
   G__memfunc_setup("HMdcRawEventHeader",1745,G__MdcDict_323_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcRawEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_323_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcDict_323_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MdcDict_323_0_4, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - err i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - ro i - 'Int_t' 0 - sec "
"i - 'Int_t' 0 - subId i - 'Int_t' 0 - subSize "
"i - 'Int_t' 0 - trigType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setErrorWord",1266,G__MdcDict_323_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__MdcDict_323_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRoc",624,G__MdcDict_323_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__MdcDict_323_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSubEvtId",1106,G__MdcDict_323_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSubEvtSize",1344,G__MdcDict_323_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTriggerType",1474,G__MdcDict_323_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrorWord",1254,G__MdcDict_323_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__MdcDict_323_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRoc",612,G__MdcDict_323_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcDict_323_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtId",1094,G__MdcDict_323_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtSize",1332,G__MdcDict_323_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTriggerType",1462,G__MdcDict_323_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_323_0_19, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcRawEventHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_323_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawEventHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_323_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcRawEventHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_323_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcRawEventHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_323_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_323_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawEventHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_323_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRawEventHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_323_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawEventHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_323_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRawEventHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcRawEventHeader", 1745, G__MdcDict_323_0_31, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcRawEventHeader), -1, 0, 1, 1, 1, 0, "u 'HMdcRawEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcRawEventHeader", 1871, G__MdcDict_323_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_323_0_33, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcRawEventHeader), -1, 1, 1, 1, 1, 0, "u 'HMdcRawEventHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcGeomPar(void) {
   /* HMdcGeomPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomPar));
   G__memfunc_setup("HMdcGeomPar",1031,G__MdcDict_325_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcGeomPar\"' name C - 'Char_t' 10 '\"Mdc geometry parameters\"' title "
"C - 'Char_t' 10 '\"GeomProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNum",907,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInComp",1494,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCompNum",1023,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("shiftLayerTransToCenter",2375,G__MdcDict_325_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_325_0_9, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcGeomPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_325_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeomPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_325_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcGeomPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_325_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcGeomPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_325_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_325_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeomPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_325_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeomPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_325_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeomPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_325_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeomPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcGeomPar", 1031, G__MdcDict_325_0_21, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomPar), -1, 0, 1, 1, 1, 0, "u 'HMdcGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcGeomPar", 1157, G__MdcDict_325_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_325_0_23, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomPar), -1, 1, 1, 1, 1, 0, "u 'HMdcGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcDetector(void) {
   /* HMdcDetector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector));
   G__memfunc_setup("HMdcDetector",1174,G__MdcDict_327_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("activateParIo",1324,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParIo' - 0 - io", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - io", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("buildLinearCategory",1961,G__MdcDict_327_0_5, 85, G__get_linked_tagnum(&G__MdcDictLN_HCategory), -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - className", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildMatrixCategory",1987,G__MdcDict_327_0_6, 85, G__get_linked_tagnum(&G__MdcDictLN_HCategory), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - className f - 'Float_t' 0 - fillRate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildCategory",1358,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_HCategory), -1, 0, 1, 1, 1, 0, "s - 'Cat_t' 0 - cat", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcDict_327_0_8, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcDetector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_327_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDetector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_327_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcDetector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_327_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcDetector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_327_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_327_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDetector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_327_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDetector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_327_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDetector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_327_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDetector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcDetector", 1174, G__MdcDict_327_0_20, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector), -1, 0, 1, 1, 1, 0, "u 'HMdcDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcDetector", 1300, G__MdcDict_327_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_327_0_22, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcDetector), -1, 1, 1, 1, 1, 0, "u 'HMdcDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcBitFlipCorPar(void) {
   /* HMdcBitFlipCorPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCorPar));
   G__memfunc_setup("HMdcBitFlipCorPar",1613,G__MdcDict_328_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCorPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcBitFlipCorPar\"' name C - 'Char_t' 10 '\"bitflip correction parameters for Mdc\"' title "
"C - 'Char_t' 10 '\"MdcBitFlipCorParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBitFlipCorParameter",2223,G__MdcDict_328_0_2, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - mbo i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBitFlipCorParameter",2235,G__MdcDict_328_0_3, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - mbo i - 'Int_t' 0 - v "
"i - 'Int_t' 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_328_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_328_0_8, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcBitFlipCorPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_328_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcBitFlipCorPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_328_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcBitFlipCorPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_328_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcBitFlipCorPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_328_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_328_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcBitFlipCorPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_328_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcBitFlipCorPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_328_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcBitFlipCorPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_328_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcBitFlipCorPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcBitFlipCorPar", 1613, G__MdcDict_328_0_20, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCorPar), -1, 0, 1, 1, 1, 0, "u 'HMdcBitFlipCorPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcBitFlipCorPar", 1739, G__MdcDict_328_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_328_0_22, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCorPar), -1, 1, 1, 1, 1, 0, "u 'HMdcBitFlipCorPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcBitFlipCor(void) {
   /* HMdcBitFlipCor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCor));
   G__memfunc_setup("resetVar",844,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openHistFile",1226,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcDictLN_TFile), -1, 0, 1, 1, 4, 0, "C - 'Char_t' 10 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcBitFlipCor",1322,G__MdcDict_329_0_3, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCor), -1, 0, 4, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"i - 'Int_t' 0 '0' PHist i - 'Int_t' 0 '0' PRawCor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcBitFlipCor",1322,G__MdcDict_329_0_4, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcBitFlipCor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setRootOutputFilename",2210,G__MdcDict_329_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAsciiOutputFilename",2279,G__MdcDict_329_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParameterContainers",2295,G__MdcDict_329_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createHists",1151,G__MdcDict_329_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initVariables",1357,G__MdcDict_329_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fparamsbitcorrection",2145,G__MdcDict_329_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_329_0_15, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcBitFlipCor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_329_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcBitFlipCor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_329_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcBitFlipCor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_329_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcBitFlipCor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_329_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_329_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcBitFlipCor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_329_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcBitFlipCor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_329_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcBitFlipCor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_329_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcBitFlipCor::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcBitFlipCor", 1448, G__MdcDict_329_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCal1(void) {
   /* HMdcCal1 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1));
   G__memfunc_setup("HMdcCal1",669,G__MdcDict_334_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_334_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__MdcDict_334_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__MdcDict_334_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayer",841,G__MdcDict_334_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__MdcDict_334_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__MdcDict_334_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 10 - s i - 'Int_t' 10 - m "
"i - 'Int_t' 10 - l i - 'Int_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNHits",818,G__MdcDict_334_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime1",780,G__MdcDict_334_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime2",781,G__MdcDict_334_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcDict_334_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__MdcDict_334_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayer",829,G__MdcDict_334_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__MdcDict_334_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__MdcDict_334_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNHits",806,G__MdcDict_334_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime1",768,G__MdcDict_334_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime2",769,G__MdcDict_334_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_334_0_19, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCal1::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_334_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal1::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_334_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCal1::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_334_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCal1::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_334_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_334_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal1::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_334_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal1::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_334_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal1::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_334_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal1::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCal1", 669, G__MdcDict_334_0_31, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1), -1, 0, 1, 1, 1, 0, "u 'HMdcCal1' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCal1", 795, G__MdcDict_334_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_334_0_33, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1), -1, 1, 1, 1, 1, 0, "u 'HMdcCal1' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCal1Sim(void) {
   /* HMdcCal1Sim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1Sim));
   G__memfunc_setup("HMdcCal1Sim",966,G__MdcDict_335_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1Sim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_335_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTrack1",960,G__MdcDict_335_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTrack2",961,G__MdcDict_335_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus1",1025,G__MdcDict_335_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus2",1026,G__MdcDict_335_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAngle1",868,G__MdcDict_335_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAngle2",869,G__MdcDict_335_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinDist1",1077,G__MdcDict_335_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinDist2",1078,G__MdcDict_335_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setError1",903,G__MdcDict_335_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setError2",904,G__MdcDict_335_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTof1",678,G__MdcDict_335_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTof2",679,G__MdcDict_335_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireOffset1",1403,G__MdcDict_335_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireOffset2",1404,G__MdcDict_335_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetTrackList",1460,G__MdcDict_335_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-99' track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackList",1245,G__MdcDict_335_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackList",1245,G__MdcDict_335_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackList",1233,G__MdcDict_335_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetStatusList",1603,G__MdcDict_335_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' stat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatusList",1388,G__MdcDict_335_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - stat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatusList",1388,G__MdcDict_335_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatusList",1376,G__MdcDict_335_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTracks",1014,G__MdcDict_335_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatusList",1376,G__MdcDict_335_0_26, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackList",1233,G__MdcDict_335_0_27, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackFromList",1637,G__MdcDict_335_0_28, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - element", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatusFromList",1780,G__MdcDict_335_0_29, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - element", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTrack1",948,G__MdcDict_335_0_30, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTrack2",949,G__MdcDict_335_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus1",1013,G__MdcDict_335_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus2",1014,G__MdcDict_335_0_33, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus",964,G__MdcDict_335_0_34, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "will be removed later", (void*) NULL, 0);
   G__memfunc_setup("getAngle1",856,G__MdcDict_335_0_35, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAngle2",857,G__MdcDict_335_0_36, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinDist1",1065,G__MdcDict_335_0_37, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinDist2",1066,G__MdcDict_335_0_38, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getError1",891,G__MdcDict_335_0_39, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getError2",892,G__MdcDict_335_0_40, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTof1",666,G__MdcDict_335_0_41, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTof2",667,G__MdcDict_335_0_42, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireOffset1",1391,G__MdcDict_335_0_43, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireOffset2",1392,G__MdcDict_335_0_44, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_335_0_45, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCal1Sim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_335_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal1Sim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_335_0_47, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCal1Sim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_335_0_48, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCal1Sim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_335_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_335_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal1Sim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_335_0_54, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal1Sim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_335_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal1Sim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_335_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal1Sim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCal1Sim", 966, G__MdcDict_335_0_57, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1Sim), -1, 0, 1, 1, 1, 0, "u 'HMdcCal1Sim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCal1Sim", 1092, G__MdcDict_335_0_58, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_335_0_59, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal1Sim), -1, 1, 1, 1, 1, 0, "u 'HMdcCal1Sim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCal2(void) {
   /* HMdcCal2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2));
   G__memfunc_setup("HMdcCal2",670,G__MdcDict_336_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_336_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__MdcDict_336_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__MdcDict_336_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayer",841,G__MdcDict_336_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__MdcDict_336_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__MdcDict_336_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 10 - s i - 'Int_t' 10 - m "
"i - 'Int_t' 10 - l i - 'Int_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDist1",785,G__MdcDict_336_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - d f - 'Float_t' 10 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDist2",786,G__MdcDict_336_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - d f - 'Float_t' 10 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNHits",818,G__MdcDict_336_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcDict_336_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__MdcDict_336_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayer",829,G__MdcDict_336_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__MdcDict_336_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__MdcDict_336_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - l i - 'Int_t' 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNHits",806,G__MdcDict_336_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDist1",773,G__MdcDict_336_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDist2",774,G__MdcDict_336_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrDist1",1070,G__MdcDict_336_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrDist2",1071,G__MdcDict_336_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_336_0_21, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCal2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_336_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_336_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCal2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_336_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCal2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_336_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_336_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_336_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_336_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_336_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCal2", 670, G__MdcDict_336_0_33, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2), -1, 0, 1, 1, 1, 0, "u 'HMdcCal2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCal2", 796, G__MdcDict_336_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_336_0_35, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2), -1, 1, 1, 1, 1, 0, "u 'HMdcCal2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCal2ParSim(void) {
   /* HMdcCal2ParSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSim));
   G__memfunc_setup("HMdcCal2ParSim",1258,G__MdcDict_338_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSim), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcCal2ParSim\"' name C - 'Char_t' 10 '\"cal2 calibration parameters for Mdc [distance->time]\"' title "
"C - 'Char_t' 10 '\"MdcCal2ParSimProduction\"' context i - 'Int_t' 0 '6' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_338_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSecSim), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setContainerComment",1986,G__MdcDict_338_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - mycomment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getContainerComment",1974,G__MdcDict_338_0_4, 117, G__get_linked_tagnum(&G__MdcDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printContainerComment",2211,G__MdcDict_338_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_338_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumberOfLines",1625,G__MdcDict_338_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumberOfBins",1514,G__MdcDict_338_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readline",836,G__MdcDict_338_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__MdcDict_338_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__MdcDict_338_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTime",802,G__MdcDict_338_0_14, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTimeErr",1099,G__MdcDict_338_0_15, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTime",802,G__MdcDict_338_0_16, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"D - 'Double_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTime",802,G__MdcDict_338_0_17, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTimeErr",1099,G__MdcDict_338_0_18, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTime2",852,G__MdcDict_338_0_19, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTime2Err",1149,G__MdcDict_338_0_20, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDriftVelocity",1755,G__MdcDict_338_0_21, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcResolution",1479,G__MdcDict_338_0_22, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTimeDigitizer",1741,G__MdcDict_338_0_23, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"F - 'Float_t' 0 - - F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTime2Digitizer",1791,G__MdcDict_338_0_24, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"F - 'Float_t' 0 - - F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transformToDistance",1994,G__MdcDict_338_0_25, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - f - 'Float_t' 0 - - "
"U 'HMdcCal2Par' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot",447,G__MdcDict_338_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot2D",565,G__MdcDict_338_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlopeOutside",1568,G__MdcDict_338_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScalerTime1Err",1679,G__MdcDict_338_0_29, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 '0' m0 f - 'Float_t' 0 '0' m1 "
"f - 'Float_t' 0 '0' m2 f - 'Float_t' 0 '0' m3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setConstantTime1Err",1919,G__MdcDict_338_0_30, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 '0' m0 f - 'Float_t' 0 '0' m1 "
"f - 'Float_t' 0 '0' m2 f - 'Float_t' 0 '0' m3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setConstantVD",1328,G__MdcDict_338_0_31, 121, -1, -1, 0, 8, 1, 1, 0, 
"f - 'Float_t' 0 '40' m0 f - 'Float_t' 0 '40' m1 "
"f - 'Float_t' 0 '40' m2 f - 'Float_t' 0 '40' m3 "
"f - 'Float_t' 0 '2' m0E f - 'Float_t' 0 '2' m1E "
"f - 'Float_t' 0 '2' m2E f - 'Float_t' 0 '2' m3E", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_338_0_33, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_338_0_34, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCal2ParSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_338_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_338_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCal2ParSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_338_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCal2ParSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_338_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_338_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_338_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2ParSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_338_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_338_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2ParSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCal2ParSim", 1258, G__MdcDict_338_0_46, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSim), -1, 0, 1, 1, 1, 0, "u 'HMdcCal2ParSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCal2ParSim", 1384, G__MdcDict_338_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_338_0_48, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSim), -1, 1, 1, 1, 1, 0, "u 'HMdcCal2ParSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCal2ParAngle(void) {
   /* HMdcCal2ParAngle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngle));
   G__memfunc_setup("HMdcCal2ParAngle",1448,G__MdcDict_339_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistance",1143,G__MdcDict_339_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - line i - 'Int_t' 0 - i "
"f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistanceError",1665,G__MdcDict_339_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - line i - 'Int_t' 0 - i "
"f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistance",1131,G__MdcDict_339_0_4, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - line i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistanceError",1653,G__MdcDict_339_0_5, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - line i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillDistance",1234,G__MdcDict_339_0_6, 121, -1, -1, 0, 11, 1, 1, 0, 
"i - 'Int_t' 0 - p0 f - 'Float_t' 0 - p1 "
"f - 'Float_t' 0 - p2 f - 'Float_t' 0 - p3 "
"f - 'Float_t' 0 - p4 f - 'Float_t' 0 - p5 "
"f - 'Float_t' 0 - p6 f - 'Float_t' 0 - p7 "
"f - 'Float_t' 0 - p8 f - 'Float_t' 0 - p9 "
"f - 'Float_t' 0 - p10", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillDistanceError",1756,G__MdcDict_339_0_7, 121, -1, -1, 0, 11, 1, 1, 0, 
"i - 'Int_t' 0 - p0 f - 'Float_t' 0 - p1 "
"f - 'Float_t' 0 - p2 f - 'Float_t' 0 - p3 "
"f - 'Float_t' 0 - p4 f - 'Float_t' 0 - p5 "
"f - 'Float_t' 0 - p6 f - 'Float_t' 0 - p7 "
"f - 'Float_t' 0 - p8 f - 'Float_t' 0 - p9 "
"f - 'Float_t' 0 - p10", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillDistance",1234,G__MdcDict_339_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcCal2ParAngle' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillDistanceError",1756,G__MdcDict_339_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcCal2ParAngle' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_339_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_339_0_11, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCal2ParAngle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_339_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParAngle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_339_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCal2ParAngle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_339_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCal2ParAngle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_339_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_339_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParAngle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_339_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2ParAngle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_339_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParAngle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_339_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2ParAngle::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCal2ParAngle", 1448, G__MdcDict_339_0_23, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngle), -1, 0, 1, 1, 1, 0, "u 'HMdcCal2ParAngle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCal2ParAngle", 1574, G__MdcDict_339_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_339_0_25, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngle), -1, 1, 1, 1, 1, 0, "u 'HMdcCal2ParAngle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCal2ParSecSim(void) {
   /* HMdcCal2ParSecSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSecSim));
   G__memfunc_setup("HMdcCal2ParSecSim",1541,G__MdcDict_340_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSecSim), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' sec i - 'Int_t' 0 '4' mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_340_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParModSim), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_340_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_340_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCal2ParSecSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_340_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParSecSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_340_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCal2ParSecSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_340_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCal2ParSecSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_340_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_340_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParSecSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_340_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2ParSecSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_340_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParSecSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_340_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2ParSecSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCal2ParSecSim", 1541, G__MdcDict_340_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSecSim), -1, 0, 1, 1, 1, 0, "u 'HMdcCal2ParSecSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCal2ParSecSim", 1667, G__MdcDict_340_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_340_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSecSim), -1, 1, 1, 1, 1, 0, "u 'HMdcCal2ParSecSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCal2ParModSim(void) {
   /* HMdcCal2ParModSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParModSim));
   G__memfunc_setup("HMdcCal2ParModSim",1546,G__MdcDict_341_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParModSim), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '0' sec i - 'Int_t' 0 '0' mod "
"i - 'Int_t' 0 '18' angle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_341_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngleSim), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_341_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_341_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCal2ParModSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_341_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParModSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_341_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCal2ParModSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_341_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCal2ParModSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_341_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_341_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParModSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_341_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2ParModSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_341_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParModSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_341_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2ParModSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCal2ParModSim", 1546, G__MdcDict_341_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParModSim), -1, 0, 1, 1, 1, 0, "u 'HMdcCal2ParModSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCal2ParModSim", 1672, G__MdcDict_341_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_341_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParModSim), -1, 1, 1, 1, 1, 0, "u 'HMdcCal2ParModSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCal2Par(void) {
   /* HMdcCal2Par */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Par));
   G__memfunc_setup("HMdcCal2Par",961,G__MdcDict_342_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Par), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcCal2Par\"' name C - 'Char_t' 10 '\"cal2 calibration parameters for Mdc [time->distance]\"' title "
"C - 'Char_t' 10 '\"MdcCal2ParSimProduction\"' context i - 'Int_t' 0 '6' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_342_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setContainerComment",1986,G__MdcDict_342_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - mycomment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getContainerComment",1974,G__MdcDict_342_0_4, 117, G__get_linked_tagnum(&G__MdcDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printContainerComment",2211,G__MdcDict_342_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_342_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumberOfLines",1625,G__MdcDict_342_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putAsciiHeader",1419,G__MdcDict_342_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__MdcDict_342_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDistance",1214,G__MdcDict_342_0_12, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDistanceErr",1511,G__MdcDict_342_0_13, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDistance",1214,G__MdcDict_342_0_14, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"D - 'Double_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot",447,G__MdcDict_342_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot2D",565,G__MdcDict_342_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_342_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_342_0_19, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCal2Par::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_342_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2Par::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_342_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCal2Par::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_342_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCal2Par::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_342_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_342_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2Par::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_342_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2Par::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_342_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2Par::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_342_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2Par::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCal2Par", 961, G__MdcDict_342_0_31, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Par), -1, 0, 1, 1, 1, 0, "u 'HMdcCal2Par' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCal2Par", 1087, G__MdcDict_342_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_342_0_33, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Par), -1, 1, 1, 1, 1, 0, "u 'HMdcCal2Par' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCal2ParSec(void) {
   /* HMdcCal2ParSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSec));
   G__memfunc_setup("HMdcCal2ParSec",1244,G__MdcDict_343_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSec), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' sec i - 'Int_t' 0 '4' mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_343_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_343_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_343_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCal2ParSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_343_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_343_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCal2ParSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_343_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCal2ParSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_343_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_343_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_343_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2ParSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_343_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_343_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2ParSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCal2ParSec", 1244, G__MdcDict_343_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSec), -1, 0, 1, 1, 1, 0, "u 'HMdcCal2ParSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCal2ParSec", 1370, G__MdcDict_343_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_343_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParSec), -1, 1, 1, 1, 1, 0, "u 'HMdcCal2ParSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCal2ParMod(void) {
   /* HMdcCal2ParMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParMod));
   G__memfunc_setup("HMdcCal2ParMod",1249,G__MdcDict_344_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParMod), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '0' sec i - 'Int_t' 0 '0' mod "
"i - 'Int_t' 0 '18' angle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_344_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngle), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_344_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_344_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCal2ParMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_344_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_344_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCal2ParMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_344_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCal2ParMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_344_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_344_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_344_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2ParMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_344_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_344_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2ParMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCal2ParMod", 1249, G__MdcDict_344_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParMod), -1, 0, 1, 1, 1, 0, "u 'HMdcCal2ParMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCal2ParMod", 1375, G__MdcDict_344_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_344_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParMod), -1, 1, 1, 1, 1, 0, "u 'HMdcCal2ParMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCal2ParAngleSim(void) {
   /* HMdcCal2ParAngleSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngleSim));
   G__memfunc_setup("HMdcCal2ParAngleSim",1745,G__MdcDict_345_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngleSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDriftTime1",1285,G__MdcDict_345_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDriftTime2",1286,G__MdcDict_345_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDriftTime1Error",1807,G__MdcDict_345_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDriftTime2Error",1808,G__MdcDict_345_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDriftTime1",1273,G__MdcDict_345_0_6, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDriftTime2",1274,G__MdcDict_345_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDriftTime1Error",1795,G__MdcDict_345_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDriftTime2Error",1796,G__MdcDict_345_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDriftTime1",1285,G__MdcDict_345_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - line i - 'Int_t' 0 - i "
"f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDriftTime2",1286,G__MdcDict_345_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - line i - 'Int_t' 0 - i "
"f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDriftTime1Error",1807,G__MdcDict_345_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - line i - 'Int_t' 0 - i "
"f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDriftTime2Error",1808,G__MdcDict_345_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - line i - 'Int_t' 0 - i "
"f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDriftTime1",1273,G__MdcDict_345_0_14, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - line i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDriftTime2",1274,G__MdcDict_345_0_15, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - line i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDriftTime1Error",1795,G__MdcDict_345_0_16, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - line i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDriftTime2Error",1796,G__MdcDict_345_0_17, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - line i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTime1",871,G__MdcDict_345_0_18, 121, -1, -1, 0, 11, 1, 1, 0, 
"i - 'Int_t' 0 - p0 f - 'Float_t' 0 - p1 "
"f - 'Float_t' 0 - p2 f - 'Float_t' 0 - p3 "
"f - 'Float_t' 0 - p4 f - 'Float_t' 0 - p5 "
"f - 'Float_t' 0 - p6 f - 'Float_t' 0 - p7 "
"f - 'Float_t' 0 - p8 f - 'Float_t' 0 - p9 "
"f - 'Float_t' 0 - p10", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTime2",872,G__MdcDict_345_0_19, 121, -1, -1, 0, 11, 1, 1, 0, 
"i - 'Int_t' 0 - p0 f - 'Float_t' 0 - p1 "
"f - 'Float_t' 0 - p2 f - 'Float_t' 0 - p3 "
"f - 'Float_t' 0 - p4 f - 'Float_t' 0 - p5 "
"f - 'Float_t' 0 - p6 f - 'Float_t' 0 - p7 "
"f - 'Float_t' 0 - p8 f - 'Float_t' 0 - p9 "
"f - 'Float_t' 0 - p10", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTime1Error",1393,G__MdcDict_345_0_20, 121, -1, -1, 0, 11, 1, 1, 0, 
"i - 'Int_t' 0 - p0 f - 'Float_t' 0 - p1 "
"f - 'Float_t' 0 - p2 f - 'Float_t' 0 - p3 "
"f - 'Float_t' 0 - p4 f - 'Float_t' 0 - p5 "
"f - 'Float_t' 0 - p6 f - 'Float_t' 0 - p7 "
"f - 'Float_t' 0 - p8 f - 'Float_t' 0 - p9 "
"f - 'Float_t' 0 - p10", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTime2Error",1394,G__MdcDict_345_0_21, 121, -1, -1, 0, 11, 1, 1, 0, 
"i - 'Int_t' 0 - p0 f - 'Float_t' 0 - p1 "
"f - 'Float_t' 0 - p2 f - 'Float_t' 0 - p3 "
"f - 'Float_t' 0 - p4 f - 'Float_t' 0 - p5 "
"f - 'Float_t' 0 - p6 f - 'Float_t' 0 - p7 "
"f - 'Float_t' 0 - p8 f - 'Float_t' 0 - p9 "
"f - 'Float_t' 0 - p10", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTime1",871,G__MdcDict_345_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcCal2ParAngleSim' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTime2",872,G__MdcDict_345_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcCal2ParAngleSim' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTime1Error",1393,G__MdcDict_345_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcCal2ParAngleSim' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTime2Error",1394,G__MdcDict_345_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcCal2ParAngleSim' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_345_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_345_0_27, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCal2ParAngleSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_345_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParAngleSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_345_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCal2ParAngleSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_345_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCal2ParAngleSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_345_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_345_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParAngleSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_345_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2ParAngleSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_345_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2ParAngleSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_345_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2ParAngleSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCal2ParAngleSim", 1745, G__MdcDict_345_0_39, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngleSim), -1, 0, 1, 1, 1, 0, "u 'HMdcCal2ParAngleSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCal2ParAngleSim", 1871, G__MdcDict_345_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_345_0_41, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2ParAngleSim), -1, 1, 1, 1, 1, 0, "u 'HMdcCal2ParAngleSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCal2Sim(void) {
   /* HMdcCal2Sim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Sim));
   G__memfunc_setup("HMdcCal2Sim",967,G__MdcDict_346_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Sim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_346_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTrack1",960,G__MdcDict_346_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTrack2",961,G__MdcDict_346_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus1",1025,G__MdcDict_346_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus2",1026,G__MdcDict_346_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackList",1245,G__MdcDict_346_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackList",1233,G__MdcDict_346_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatusList",1388,G__MdcDict_346_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatusList",1376,G__MdcDict_346_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTracks",1014,G__MdcDict_346_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatusList",1376,G__MdcDict_346_0_12, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackList",1233,G__MdcDict_346_0_13, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackFromList",1637,G__MdcDict_346_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - element", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatusFromList",1780,G__MdcDict_346_0_15, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - element", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTrack1",948,G__MdcDict_346_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTrack2",949,G__MdcDict_346_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus1",1013,G__MdcDict_346_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus2",1014,G__MdcDict_346_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus",964,G__MdcDict_346_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "will be removed later", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_346_0_21, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCal2Sim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_346_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2Sim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_346_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCal2Sim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_346_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCal2Sim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_346_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_346_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2Sim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_346_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2Sim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_346_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCal2Sim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_346_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCal2Sim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCal2Sim", 967, G__MdcDict_346_0_33, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Sim), -1, 0, 1, 1, 1, 0, "u 'HMdcCal2Sim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCal2Sim", 1093, G__MdcDict_346_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_346_0_35, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCal2Sim), -1, 1, 1, 1, 1, 0, "u 'HMdcCal2Sim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCalParRaw(void) {
   /* HMdcCalParRaw */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRaw));
   G__memfunc_setup("HMdcCalParRaw",1209,G__MdcDict_347_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRaw), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcCalParRaw\"' name C - 'Char_t' 10 '\"raw calibration parameters for Mdc\"' title "
"C - 'Char_t' 10 '\"MdcCalParRawProduction\"' context i - 'Int_t' 0 '6' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_347_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_347_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readline",836,G__MdcDict_347_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__MdcDict_347_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__MdcDict_347_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_347_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_347_0_11, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCalParRaw::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_347_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParRaw::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_347_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCalParRaw::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_347_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCalParRaw::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_347_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_347_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParRaw::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_347_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCalParRaw::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_347_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParRaw::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_347_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCalParRaw::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCalParRaw", 1209, G__MdcDict_347_0_23, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRaw), -1, 0, 1, 1, 1, 0, "u 'HMdcCalParRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCalParRaw", 1335, G__MdcDict_347_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_347_0_25, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRaw), -1, 1, 1, 1, 1, 0, "u 'HMdcCalParRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookupGeom(void) {
   /* HMdcLookupGeom */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGeom));
   G__memfunc_setup("HMdcLookupGeom",1374,G__MdcDict_348_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGeom), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcLookupGeom\"' name C - 'Char_t' 10 '\"Mdc lookup table from raw to cal1\"' title "
"C - 'Char_t' 10 '\"\"' context i - 'Int_t' 0 '6' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_348_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readline",836,G__MdcDict_348_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__MdcDict_348_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__MdcDict_348_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_348_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_348_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_348_0_11, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookupGeom::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_348_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupGeom::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_348_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookupGeom::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_348_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookupGeom::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_348_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_348_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupGeom::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_348_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupGeom::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_348_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupGeom::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_348_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupGeom::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookupGeom", 1374, G__MdcDict_348_0_23, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGeom), -1, 0, 1, 1, 1, 0, "u 'HMdcLookupGeom' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLookupGeom", 1500, G__MdcDict_348_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_348_0_25, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGeom), -1, 1, 1, 1, 1, 0, "u 'HMdcLookupGeom' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTimeCut(void) {
   /* HMdcTimeCut */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCut));
   G__memfunc_setup("setNameTitle",1231,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTimeCut",1047,G__MdcDict_349_0_2, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCut), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcTimeCut\"' name C - 'Char_t' 10 '\"cut on time1, time2 & time2-time1\"' title "
"C - 'Char_t' 10 '\"MdcTimeCutProduction\"' context i - 'Int_t' 0 '6' secs "
"i - 'Int_t' 0 '4' mods", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsUsed",921,G__MdcDict_349_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsUsed",909,G__MdcDict_349_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExObject",1108,G__MdcDict_349_0_5, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCut), -1, 0, 0, 3, 1, 0, "", "if HMdcTimeCut not existed = 0 ", (void*) G__func2void( (HMdcTimeCut* (*)())(&HMdcTimeCut::getExObject) ), 0);
   G__memfunc_setup("getObject",919,G__MdcDict_349_0_6, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCut), -1, 0, 0, 3, 1, 0, "", "if HMdcTimeCut not existed it will cr.", (void*) G__func2void( (HMdcTimeCut* (*)())(&HMdcTimeCut::getObject) ), 0);
   G__memfunc_setup("cut",332,G__MdcDict_349_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcCal1' - 0 - cal", "if =kTRUE don't use this hit", (void*) NULL, 0);
   G__memfunc_setup("cutComStop",1041,G__MdcDict_349_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcCal1' - 0 - cal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cutTime1",780,G__MdcDict_349_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcCal1' - 0 - cal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cutTime1",780,G__MdcDict_349_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cutTime2",781,G__MdcDict_349_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcCal1' - 0 - cal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cutTime2",781,G__MdcDict_349_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cutTimesDif",1121,G__MdcDict_349_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcCal1' - 0 - cal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cutTimesDif",1121,G__MdcDict_349_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cutBump",736,G__MdcDict_349_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcCal1' - 0 - cal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cutBump",736,G__MdcDict_349_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCut",632,G__MdcDict_349_0_17, 121, -1, -1, 0, 10, 1, 1, 0, 
"f - 'Float_t' 0 - cT1L f - 'Float_t' 0 - cT1R "
"f - 'Float_t' 0 - cT2L f - 'Float_t' 0 - cT2R "
"f - 'Float_t' 0 - cLeft f - 'Float_t' 0 - cRight "
"f - 'Float_t' 0 - cBumpT1L f - 'Float_t' 0 - cBumpT1R "
"f - 'Float_t' 0 - cBumpTotL f - 'Float_t' 0 - cBumpTotR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCut",632,G__MdcDict_349_0_18, 121, -1, -1, 0, 10, 1, 1, 0, 
"F - 'Float_t' 0 - cT1L F - 'Float_t' 0 - cT1R "
"F - 'Float_t' 0 - cT2L F - 'Float_t' 0 - cT2R "
"F - 'Float_t' 0 - cLeft F - 'Float_t' 0 - cRight "
"F - 'Float_t' 0 - cBumpT1L F - 'Float_t' 0 - cBumpT1R "
"F - 'Float_t' 0 - cBumpTotL F - 'Float_t' 0 - cBumpTotR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutTime1",1080,G__MdcDict_349_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - cT1L f - 'Float_t' 0 - cT1R", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutTime2",1081,G__MdcDict_349_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - cT2L f - 'Float_t' 0 - cT2R", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutDTime21",1198,G__MdcDict_349_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - cLeft f - 'Float_t' 0 - cRight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutBumpTime1",1484,G__MdcDict_349_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - cLeft f - 'Float_t' 0 - cRight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutBumpTot",1347,G__MdcDict_349_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - cLeft f - 'Float_t' 0 - cRight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCut",632,G__MdcDict_349_0_24, 121, -1, -1, 0, 11, 1, 1, 0, 
"i - 'Int_t' 0 - mod f - 'Float_t' 0 - cT1L "
"f - 'Float_t' 0 - cT1R f - 'Float_t' 0 - cT2L "
"f - 'Float_t' 0 - cT2R f - 'Float_t' 0 - cLeft "
"f - 'Float_t' 0 - cRight f - 'Float_t' 0 - cBumpT1L "
"f - 'Float_t' 0 - cBumpT1R f - 'Float_t' 0 - cBumpTotL "
"f - 'Float_t' 0 - cBumpTotR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutTime1",1080,G__MdcDict_349_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - mod f - 'Float_t' 0 - cT1L "
"f - 'Float_t' 0 - cT1R", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutTime2",1081,G__MdcDict_349_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - mod f - 'Float_t' 0 - cT2L "
"f - 'Float_t' 0 - cT2R", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutDTime21",1198,G__MdcDict_349_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - mod f - 'Float_t' 0 - cLeft "
"f - 'Float_t' 0 - cRight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutBumpTime1",1484,G__MdcDict_349_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - mod f - 'Float_t' 0 - cLeft "
"f - 'Float_t' 0 - cRight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutBumpTot",1347,G__MdcDict_349_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - mod f - 'Float_t' 0 - cLeft "
"f - 'Float_t' 0 - cRight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCut",620,G__MdcDict_349_0_30, 121, -1, -1, 0, 12, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - mod "
"f - 'Float_t' 1 - cT1L f - 'Float_t' 1 - cT1R "
"f - 'Float_t' 1 - cT2L f - 'Float_t' 1 - cT2R "
"f - 'Float_t' 1 - cLeft f - 'Float_t' 1 - cRight "
"f - 'Float_t' 1 - cBumpT1L f - 'Float_t' 1 - cBumpT1R "
"f - 'Float_t' 1 - cBumpTotL f - 'Float_t' 1 - cBumpTotR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutT1L",829,G__MdcDict_349_0_31, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutT1R",835,G__MdcDict_349_0_32, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutT2L",830,G__MdcDict_349_0_33, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutT2R",836,G__MdcDict_349_0_34, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutDTime21L",1262,G__MdcDict_349_0_35, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutDTime21R",1268,G__MdcDict_349_0_36, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutBumpT1L",1233,G__MdcDict_349_0_37, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutBumpT1R",1239,G__MdcDict_349_0_38, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutBumpTotL",1411,G__MdcDict_349_0_39, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutBumpTotR",1417,G__MdcDict_349_0_40, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readline",836,G__MdcDict_349_0_43, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - buf I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__MdcDict_349_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__MdcDict_349_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_349_0_46, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_349_0_47, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_349_0_49, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_349_0_50, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTimeCut::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_349_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTimeCut::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_349_0_52, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTimeCut::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_349_0_53, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTimeCut::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_349_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_349_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTimeCut::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_349_0_59, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTimeCut::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_349_0_60, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTimeCut::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_349_0_61, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTimeCut::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTimeCut", 1173, G__MdcDict_349_0_62, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCutStat(void) {
   /* HMdcCutStat */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStat));
   G__memfunc_setup("setNameTitle",1231,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcCutStat",1060,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStat), -1, 0, 5, 1, 2, 0, 
"C - 'Char_t' 10 '\"MdcCutStat\"' name C - 'Char_t' 10 '\"Statistic  on Cuts on time1, time2 & time2-time1 and wires<4\"' title "
"C - 'Char_t' 10 '\"\"' context i - 'Int_t' 0 '6' secs "
"i - 'Int_t' 0 '4' mods", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCal1StatCutT1",1498,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCal1StatCutT2",1499,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCal1StatCutT12",1548,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCal1StatCutWire",1772,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatCutT1",1486,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatCutT2",1487,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatCutT12",1536,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatCutWire",1760,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatCutT1T12",1669,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatCutAll",1634,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatAll",1334,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deleteHMdcCutStat",1687,G__MdcDict_350_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCutStat::deleteHMdcCutStat) ), 0);
   G__memfunc_setup("getExObject",1108,G__MdcDict_350_0_15, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStat), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcCutStat* (*)())(&HMdcCutStat::getExObject) ), 0);
   G__memfunc_setup("getObject",919,G__MdcDict_350_0_16, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStat), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HMdcCutStat* (*)())(&HMdcCutStat::getObject) ), 0);
   G__memfunc_setup("getCal1StatCut",1353,G__MdcDict_350_0_17, 121, -1, -1, 0, 10, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"I - 'Int_t' 0 - - I - 'Int_t' 0 - - "
"I - 'Int_t' 0 - - I - 'Int_t' 0 - - "
"I - 'Int_t' 0 - - I - 'Int_t' 0 - - "
"I - 'Int_t' 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCal1StatCut",1365,G__MdcDict_350_0_18, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putAsciiHeader",1419,G__MdcDict_350_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__MdcDict_350_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_350_0_23, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_350_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_350_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_350_0_27, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCutStat::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_350_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCutStat::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_350_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCutStat::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_350_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCutStat::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_350_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_350_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCutStat::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_350_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCutStat::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_350_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCutStat::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_350_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCutStat::DeclFileLine) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcWireStat(void) {
   /* HMdcWireStat */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcWireStat));
   G__memfunc_setup("index",536,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c", "4*6*220=5280, 6*220=1320", (void*) NULL, 0);
   G__memfunc_setup("HMdcWireStat",1167,G__MdcDict_351_0_2, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcWireStat), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcWireStat\"' name C - 'Char_t' 10 '\"Mdc lookup table for wire stat\"' title "
"C - 'Char_t' 10 '\"MdcWireStatProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMbo",618,G__MdcDict_351_0_3, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell "
"i - 'Int_t' 0 - mbo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdc",615,G__MdcDict_351_0_4, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell "
"i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus",976,G__MdcDict_351_0_5, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell "
"i - 'Int_t' 0 - stat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEfficiency",1345,G__MdcDict_351_0_6, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell "
"f - 'Float_t' 0 - eff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffset",947,G__MdcDict_351_0_7, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell "
"f - 'Float_t' 0 - off", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMbo",606,G__MdcDict_351_0_8, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdc",603,G__MdcDict_351_0_9, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus",964,G__MdcDict_351_0_10, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEfficiency",1333,G__MdcDict_351_0_11, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffset",935,G__MdcDict_351_0_12, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - lay i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDeadWires",1208,G__MdcDict_351_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDeadWires",1208,G__MdcDict_351_0_14, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plotStatusMbVsTdc",1750,G__MdcDict_351_0_15, 85, G__get_linked_tagnum(&G__MdcDictLN_TCanvas), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plotEfficiencyMbVsTdc",2119,G__MdcDict_351_0_16, 85, G__get_linked_tagnum(&G__MdcDictLN_TCanvas), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plotOffsetMbVsTdc",1721,G__MdcDict_351_0_17, 85, G__get_linked_tagnum(&G__MdcDictLN_TCanvas), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plotStatus",1091,G__MdcDict_351_0_18, 85, G__get_linked_tagnum(&G__MdcDictLN_TCanvas), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plotEfficiency",1460,G__MdcDict_351_0_19, 85, G__get_linked_tagnum(&G__MdcDictLN_TCanvas), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plotOffset",1062,G__MdcDict_351_0_20, 85, G__get_linked_tagnum(&G__MdcDictLN_TCanvas), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printStats",1084,G__MdcDict_351_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printStatsSum",1393,G__MdcDict_351_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_351_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_351_0_27, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcWireStat::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_351_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWireStat::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_351_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcWireStat::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_351_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcWireStat::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_351_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_351_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWireStat::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_351_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcWireStat::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_351_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcWireStat::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_351_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcWireStat::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcWireStat", 1167, G__MdcDict_351_0_39, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcWireStat), -1, 0, 1, 1, 1, 0, "u 'HMdcWireStat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcWireStat", 1293, G__MdcDict_351_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_351_0_41, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcWireStat), -1, 1, 1, 1, 1, 0, "u 'HMdcWireStat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCalParTdc(void) {
   /* HMdcCalParTdc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParTdc));
   G__memfunc_setup("HMdcCalParTdc",1194,G__MdcDict_352_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParTdc), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlope",835,G__MdcDict_352_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffset",935,G__MdcDict_352_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlopeErr",1132,G__MdcDict_352_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffsetErr",1232,G__MdcDict_352_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlopeMethod",1444,G__MdcDict_352_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffsetMethod",1544,G__MdcDict_352_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_352_0_8, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - 'Float_t' 0 - s f - 'Float_t' 0 - o "
"f - 'Float_t' 0 - sE f - 'Float_t' 0 - oE "
"i - 'Int_t' 0 - sM i - 'Int_t' 0 - oM", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_352_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcCalParTdc' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSlope",847,G__MdcDict_352_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffset",947,G__MdcDict_352_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSlopeErr",1144,G__MdcDict_352_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sE", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffsetErr",1244,G__MdcDict_352_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - oE", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSlopeMethod",1456,G__MdcDict_352_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sM", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffsetMethod",1556,G__MdcDict_352_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - oM", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_352_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_352_0_17, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCalParTdc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_352_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParTdc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_352_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCalParTdc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_352_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCalParTdc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_352_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_352_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParTdc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_352_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCalParTdc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_352_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParTdc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_352_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCalParTdc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCalParTdc", 1194, G__MdcDict_352_0_29, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParTdc), -1, 0, 1, 1, 1, 0, "u 'HMdcCalParTdc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCalParTdc", 1320, G__MdcDict_352_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_352_0_31, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParTdc), -1, 1, 1, 1, 1, 0, "u 'HMdcCalParTdc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCalibrater1(void) {
   /* HMdcCalibrater1 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1));
   G__memfunc_setup("initParameters",1480,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCounters",1287,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCountersCal",1559,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doMultCut",929,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParContainers",1669,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getstarttime",1309,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testTimeCuts",1262,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("translateAddress",1684,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"I - 'Int_t' 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTimes",917,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"F - 'Float_t' 0 - - F - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - i - 'Int_t' 0 - - "
"U 'HMdcCalParTdc' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCal1",744,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("countWiresPerMod",1658,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printWires",1079,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcCalibrater1",1414,G__MdcDict_353_0_13, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcCalibrater1",1414,G__MdcDict_353_0_14, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1), -1, 0, 5, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"i - 'Int_t' 0 '1' vers i - 'Int_t' 0 '1' cut "
"i - 'Int_t' 0 '0' domerge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setDoPrint",1036,G__MdcDict_353_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - dopr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSkipCal",1011,G__MdcDict_353_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' skip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseMultCut",1351,G__MdcDict_353_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - thresh g - 'Bool_t' 0 'kTRUE' use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseWireStat",1452,G__MdcDict_353_0_19, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - doit", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcCalibrater1::setUseWireStat) ), 0);
   G__memfunc_setup("switchArguments",1608,G__MdcDict_353_0_20, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGlobalOffset",1540,G__MdcDict_353_0_21, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - o0 f - 'Float_t' 0 - o1 "
"f - 'Float_t' 0 - o2 f - 'Float_t' 0 - o3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSecGlobalOffset",1823,G__MdcDict_353_0_22, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - s f - 'Float_t' 0 - o0 "
"f - 'Float_t' 0 - o1 f - 'Float_t' 0 - o2 "
"f - 'Float_t' 0 - o3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGlobalSlope",1440,G__MdcDict_353_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printStatus",1201,G__MdcDict_353_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcDict_353_0_27, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCalibrater1::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_353_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalibrater1::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_353_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCalibrater1::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_353_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCalibrater1::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_353_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_353_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalibrater1::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_353_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCalibrater1::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_353_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalibrater1::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_353_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCalibrater1::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCalibrater1", 1540, G__MdcDict_353_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCalParMbo(void) {
   /* HMdcCalParMbo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParMbo));
   G__memfunc_setup("HMdcCalParMbo",1197,G__MdcDict_354_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParMbo), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '96' tdc C - 'Text_t' 10 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_354_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParTdc), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_354_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_354_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCalParMbo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_354_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParMbo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_354_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCalParMbo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_354_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCalParMbo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_354_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_354_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParMbo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_354_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCalParMbo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_354_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParMbo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_354_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCalParMbo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCalParMbo", 1197, G__MdcDict_354_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParMbo), -1, 0, 1, 1, 1, 0, "u 'HMdcCalParMbo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCalParMbo", 1323, G__MdcDict_354_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_354_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParMbo), -1, 1, 1, 1, 1, 0, "u 'HMdcCalParMbo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCalParRawMod(void) {
   /* HMdcCalParRawMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawMod));
   G__memfunc_setup("HMdcCalParRawMod",1497,G__MdcDict_355_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawMod), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '16' mbo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_355_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParMbo), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_355_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createMbo",914,G__MdcDict_355_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_355_0_5, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCalParRawMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_355_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParRawMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_355_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCalParRawMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_355_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCalParRawMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_355_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_355_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParRawMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_355_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCalParRawMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_355_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParRawMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_355_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCalParRawMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCalParRawMod", 1497, G__MdcDict_355_0_17, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawMod), -1, 0, 1, 1, 1, 0, "u 'HMdcCalParRawMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCalParRawMod", 1623, G__MdcDict_355_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_355_0_19, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawMod), -1, 1, 1, 1, 1, 0, "u 'HMdcCalParRawMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCalParRawSec(void) {
   /* HMdcCalParRawSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawSec));
   G__memfunc_setup("HMdcCalParRawSec",1492,G__MdcDict_356_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawSec), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '4' mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_356_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_356_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_356_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCalParRawSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_356_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParRawSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_356_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCalParRawSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_356_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCalParRawSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_356_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_356_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParRawSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_356_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCalParRawSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_356_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalParRawSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_356_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCalParRawSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCalParRawSec", 1492, G__MdcDict_356_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawSec), -1, 0, 1, 1, 1, 0, "u 'HMdcCalParRawSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCalParRawSec", 1618, G__MdcDict_356_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_356_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCalParRawSec), -1, 1, 1, 1, 1, 0, "u 'HMdcCalParRawSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCellEffAngle(void) {
   /* HMdcCellEffAngle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffAngle));
   G__memfunc_setup("HMdcCellEffAngle",1492,G__MdcDict_357_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffAngle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFunctionValues",1794,G__MdcDict_357_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - r f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxR",696,G__MdcDict_357_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlope",835,G__MdcDict_357_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_357_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcCellEffAngle' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_357_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcDict_357_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_357_0_8, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCellEffAngle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_357_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellEffAngle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_357_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCellEffAngle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_357_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCellEffAngle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_357_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_357_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellEffAngle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_357_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCellEffAngle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_357_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellEffAngle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_357_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCellEffAngle::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCellEffAngle", 1492, G__MdcDict_357_0_20, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffAngle), -1, 0, 1, 1, 1, 0, "u 'HMdcCellEffAngle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCellEffAngle", 1618, G__MdcDict_357_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_357_0_22, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffAngle), -1, 1, 1, 1, 1, 0, "u 'HMdcCellEffAngle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCellEffMod(void) {
   /* HMdcCellEffMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffMod));
   G__memfunc_setup("HMdcCellEffMod",1293,G__MdcDict_358_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffMod), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '0' sec i - 'Int_t' 0 '0' mod "
"i - 'Int_t' 0 '18' angle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_358_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffAngle), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_358_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_358_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCellEffMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_358_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellEffMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_358_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCellEffMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_358_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCellEffMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_358_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_358_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellEffMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_358_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCellEffMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_358_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellEffMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_358_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCellEffMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCellEffMod", 1293, G__MdcDict_358_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffMod), -1, 0, 1, 1, 1, 0, "u 'HMdcCellEffMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCellEffMod", 1419, G__MdcDict_358_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_358_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffMod), -1, 1, 1, 1, 1, 0, "u 'HMdcCellEffMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCellEff(void) {
   /* HMdcCellEff */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEff));
   G__memfunc_setup("HMdcCellEff",1005,G__MdcDict_359_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEff), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcCellEff\"' name C - 'Char_t' 10 '\"cell efficiency parameters for MdcDigitizer\"' title "
"C - 'Char_t' 10 '\"MdcCellEffProduction\"' context i - 'Int_t' 0 '4' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_359_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEffMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setContainerComment",1986,G__MdcDict_359_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - mycomment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getContainerComment",1974,G__MdcDict_359_0_4, 117, G__get_linked_tagnum(&G__MdcDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printContainerComment",2211,G__MdcDict_359_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_359_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readline",836,G__MdcDict_359_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__MdcDict_359_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__MdcDict_359_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcEfficiency",1416,G__MdcDict_359_0_12, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - m f - 'Float_t' 0 - r "
"f - 'Float_t' 0 - a f - 'Float_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcEffval",999,G__MdcDict_359_0_13, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - m f - 'Float_t' 0 - r "
"f - 'Float_t' 0 - a f - 'Float_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_359_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_359_0_16, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCellEff::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_359_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellEff::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_359_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCellEff::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_359_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCellEff::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_359_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_359_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellEff::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_359_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCellEff::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_359_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellEff::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_359_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCellEff::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCellEff", 1005, G__MdcDict_359_0_28, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEff), -1, 0, 1, 1, 1, 0, "u 'HMdcCellEff' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCellEff", 1131, G__MdcDict_359_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_359_0_30, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCellEff), -1, 1, 1, 1, 1, 0, "u 'HMdcCellEff' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCellGroup(void) {
   /* HMdcCellGroup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup));
   G__memfunc_setup("initLookups",1185,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcCellGroup",1257,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup), -1, 0, 1, 1, 2, 0, "R - 'UShort_t' 0 - layerBuffer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCells",1056,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nlays", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCells",897,G__MdcDict_360_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__MdcDict_360_0_5, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - layer i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSignId",894,G__MdcDict_360_0_6, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - layer i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSignId",906,G__MdcDict_360_0_7, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - layer i - 'Int_t' 0 - cell "
"i - 'Int_t' 0 - t1 i - 'Int_t' 0 '0' t2 "
"i - 'Int_t' 0 '0' t3 i - 'Int_t' 0 '0' t4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayerGroup",1366,G__MdcDict_360_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - layer r - 'UShort_t' 0 - cl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerListCells",1740,G__MdcDict_360_0_9, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - layer I - 'Int_t' 0 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_360_0_10, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCellGroup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_360_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellGroup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_360_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCellGroup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_360_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCellGroup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_360_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_360_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellGroup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_360_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCellGroup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_360_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellGroup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_360_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCellGroup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCellGroup", 1257, G__MdcDict_360_0_22, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup), -1, 0, 1, 1, 1, 0, "u 'HMdcCellGroup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCellGroup", 1383, G__MdcDict_360_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_360_0_24, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup), -1, 1, 1, 1, 1, 0, "u 'HMdcCellGroup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCellGroup6(void) {
   /* HMdcCellGroup6 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup6));
   G__memfunc_setup("HMdcCellGroup6",1311,G__MdcDict_361_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup6), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_361_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumWires",1151,G__MdcDict_361_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayers",1022,G__MdcDict_361_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCellGroup",1466,G__MdcDict_361_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_361_0_6, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCellGroup6::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_361_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellGroup6::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_361_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCellGroup6::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_361_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCellGroup6::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_361_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_361_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellGroup6::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_361_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCellGroup6::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_361_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellGroup6::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_361_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCellGroup6::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCellGroup6", 1311, G__MdcDict_361_0_18, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup6), -1, 0, 1, 1, 1, 0, "u 'HMdcCellGroup6' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCellGroup6", 1437, G__MdcDict_361_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_361_0_20, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup6), -1, 1, 1, 1, 1, 0, "u 'HMdcCellGroup6' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCellGroup12(void) {
   /* HMdcCellGroup12 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup12));
   G__memfunc_setup("HMdcCellGroup12",1356,G__MdcDict_362_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup12), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_362_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumWires",1151,G__MdcDict_362_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumWires",1151,G__MdcDict_362_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayers",1022,G__MdcDict_362_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayers",1022,G__MdcDict_362_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCellGroup",1466,G__MdcDict_362_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNSharedCells",1496,G__MdcDict_362_0_8, 98, -1, G__defined_typename("UChar_t"), 0, 3, 1, 1, 0, 
"U 'HMdcCellGroup12' - 0 - gr i - 'Int_t' 1 - nLayers "
"i - 'Int_t' 1 - nLayOr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNSharedCells",1496,G__MdcDict_362_0_9, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 0, "U 'HMdcCellGroup12' - 0 - gr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNSharedCells",1496,(G__InterfaceMethod) NULL, 98, -1, G__defined_typename("UChar_t"), 0, 2, 1, 4, 0, 
"r - 'UShort_t' 0 - l1 r - 'UShort_t' 0 - l2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_362_0_11, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCellGroup12::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_362_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellGroup12::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_362_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCellGroup12::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_362_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCellGroup12::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_362_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_362_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellGroup12::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_362_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCellGroup12::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_362_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCellGroup12::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_362_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCellGroup12::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCellGroup12", 1356, G__MdcDict_362_0_23, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup12), -1, 0, 1, 1, 1, 0, "u 'HMdcCellGroup12' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCellGroup12", 1482, G__MdcDict_362_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_362_0_25, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCellGroup12), -1, 1, 1, 1, 1, 0, "u 'HMdcCellGroup12' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcContFact(void) {
   /* HMdcContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcContFact",1134,G__MdcDict_367_0_2, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_HParSet), -1, 0, 1, 1, 1, 0, "U 'HContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcDict_367_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_367_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_367_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_367_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_367_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_367_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_367_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_367_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_367_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcContFact::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcContFact", 1134, G__MdcDict_367_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcContFact), -1, 0, 1, 1, 1, 0, "u 'HMdcContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcContFact", 1260, G__MdcDict_367_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_367_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcContFact), -1, 1, 1, 1, 1, 0, "u 'HMdcContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCutStatMod(void) {
   /* HMdcCutStatMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatMod));
   G__memfunc_setup("HMdcCutStatMod",1348,G__MdcDict_368_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcCutStatMod",1348,G__MdcDict_368_0_2, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatMod), -1, 0, 1, 1, 1, 0, "u 'HMdcCutStatMod' - 1 - tc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCal1StatCutT1",1498,G__MdcDict_368_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCal1StatCutT2",1499,G__MdcDict_368_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCal1StatCutT12",1548,G__MdcDict_368_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCal1StatCutWire",1772,G__MdcDict_368_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCal1StatCutT1T12",1681,G__MdcDict_368_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCal1StatCutBump",1769,G__MdcDict_368_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCal1StatCutAll",1646,G__MdcDict_368_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCal1StatAll",1346,G__MdcDict_368_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatCutT1",1486,G__MdcDict_368_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatCutT2",1487,G__MdcDict_368_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatCutT12",1536,G__MdcDict_368_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatCutWire",1760,G__MdcDict_368_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatCutT1T12",1669,G__MdcDict_368_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatCutBump",1757,G__MdcDict_368_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatCutAll",1634,G__MdcDict_368_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1StatAll",1334,G__MdcDict_368_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_368_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcCutStatMod' - 1 - tc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_368_0_20, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - cT1 i - 'Int_t' 0 - cT2 "
"i - 'Int_t' 0 - cT12 i - 'Int_t' 0 - cWire "
"i - 'Int_t' 0 - cT1T12 i - 'Int_t' 0 - cBump "
"i - 'Int_t' 0 - cAll i - 'Int_t' 0 - all", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_368_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcDict_368_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printRatio",1068,G__MdcDict_368_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_368_0_24, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCutStatMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_368_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCutStatMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_368_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCutStatMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_368_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCutStatMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_368_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_368_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCutStatMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_368_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCutStatMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_368_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCutStatMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_368_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCutStatMod::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCutStatMod", 1474, G__MdcDict_368_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_368_0_37, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatMod), -1, 1, 1, 1, 1, 0, "u 'HMdcCutStatMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCutStatSec(void) {
   /* HMdcCutStatSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatSec));
   G__memfunc_setup("HMdcCutStatSec",1343,G__MdcDict_369_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatSec), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '4' mods", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_369_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcCutStatMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_369_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_369_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCutStatSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_369_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCutStatSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_369_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCutStatSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_369_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCutStatSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_369_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_369_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCutStatSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_369_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCutStatSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_369_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCutStatSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_369_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCutStatSec::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCutStatSec", 1469, G__MdcDict_369_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLayerGeomPar(void) {
   /* HMdcLayerGeomPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomPar));
   G__memfunc_setup("HMdcLayerGeomPar",1540,G__MdcDict_670_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcLayerGeomPar\"' name C - 'Char_t' 10 '\"geometry parameters for Mdc layers\"' title "
"C - 'Char_t' 10 '\"MdcLayerGeomParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_670_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_670_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readline",836,G__MdcDict_670_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__MdcDict_670_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__MdcDict_670_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNtuple",952,G__MdcDict_670_0_10, 85, G__get_linked_tagnum(&G__MdcDictLN_TNtuple), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParam",1054,G__MdcDict_670_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcLayerTransformations",2522,G__MdcDict_670_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_670_0_13, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLayerGeomPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_670_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerGeomPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_670_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLayerGeomPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_670_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLayerGeomPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_670_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_670_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerGeomPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_670_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLayerGeomPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_670_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerGeomPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_670_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLayerGeomPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLayerGeomPar", 1540, G__MdcDict_670_0_25, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomPar), -1, 0, 1, 1, 1, 0, "u 'HMdcLayerGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLayerGeomPar", 1666, G__MdcDict_670_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_670_0_27, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomPar), -1, 1, 1, 1, 1, 0, "u 'HMdcLayerGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcDigitPar(void) {
   /* HMdcDigitPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitPar));
   G__memfunc_setup("HMdcDigitPar",1136,G__MdcDict_671_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcDigitPar\"' name C - 'Char_t' 10 '\"digitisation parameters for Mdc\"' title "
"C - 'Char_t' 10 '\"MdcDigitParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerEfficiency",1842,G__MdcDict_671_0_2, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayerEfficiency",1854,G__MdcDict_671_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l f - 'Float_t' 0 - eff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerEfficiencyScale",2330,G__MdcDict_671_0_4, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayerEfficiencyThickness",2794,G__MdcDict_671_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l f - 'Float_t' 0 - eff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerEfficiencyThickness",2782,G__MdcDict_671_0_6, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayerEfficiencyScale",2342,G__MdcDict_671_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l f - 'Float_t' 0 - eff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime1ErrScale",1553,G__MdcDict_671_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime1ErrScale",1565,G__MdcDict_671_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - m f - 'Float_t' 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime1ErrScaleMIPS",1866,G__MdcDict_671_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime1ErrScaleMIPS",1878,G__MdcDict_671_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - m f - 'Float_t' 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSignalSpeed",1423,G__MdcDict_671_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSignalSpeed",1435,G__MdcDict_671_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - speed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellScale",1192,G__MdcDict_671_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellEffScale",1477,G__MdcDict_671_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_671_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_671_0_20, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcDigitPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_671_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDigitPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_671_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcDigitPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_671_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcDigitPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_671_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_671_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDigitPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_671_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDigitPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_671_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDigitPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_671_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDigitPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcDigitPar", 1136, G__MdcDict_671_0_32, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitPar), -1, 0, 1, 1, 1, 0, "u 'HMdcDigitPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcDigitPar", 1262, G__MdcDict_671_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_671_0_34, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitPar), -1, 1, 1, 1, 1, 0, "u 'HMdcDigitPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcGeomStruct(void) {
   /* HMdcGeomStruct */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomStruct));
   G__memfunc_setup("HMdcGeomStruct",1385,G__MdcDict_673_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomStruct), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcGeomStruct\"' name C - 'Char_t' 10 '\"Mdc parameters for geometry structure\"' title "
"C - 'Char_t' 10 '\"\"' context i - 'Int_t' 0 '6' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_673_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomSecStru), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putAsciiHeader",1419,G__MdcDict_673_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__MdcDict_673_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__MdcDict_673_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_673_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxIndices",1317,G__MdcDict_673_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArrayI' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_673_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_673_0_12, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcGeomStruct::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_673_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeomStruct::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_673_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcGeomStruct::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_673_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcGeomStruct::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_673_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_673_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeomStruct::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_673_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeomStruct::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_673_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeomStruct::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_673_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeomStruct::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcGeomStruct", 1385, G__MdcDict_673_0_24, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomStruct), -1, 0, 1, 1, 1, 0, "u 'HMdcGeomStruct' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcGeomStruct", 1511, G__MdcDict_673_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_673_0_26, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomStruct), -1, 1, 1, 1, 1, 0, "u 'HMdcGeomStruct' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcGeantCell(void) {
   /* HMdcGeantCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantCell));
   G__memfunc_setup("HMdcGeantCell",1227,G__MdcDict_675_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_675_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__MdcDict_675_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__MdcDict_675_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayer",841,G__MdcDict_675_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__MdcDict_675_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumHits",1044,G__MdcDict_675_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - nhit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinDist",1028,G__MdcDict_675_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - md i - 'Int_t' 10 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeFlight",1337,G__MdcDict_675_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - tof i - 'Int_t' 10 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setImpactAngle",1425,G__MdcDict_675_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - angle i - 'Int_t' 10 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTrack",911,G__MdcDict_675_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - t i - 'Int_t' 10 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlagCutEdge",1383,G__MdcDict_675_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 10 - t i - 'Int_t' 10 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireOffset",1354,G__MdcDict_675_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - offset i - 'Int_t' 10 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEfficiency",1345,G__MdcDict_675_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - eff i - 'Int_t' 10 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__MdcDict_675_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - th i - 'Int_t' 10 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcDict_675_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__MdcDict_675_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayer",829,G__MdcDict_675_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__MdcDict_675_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumHits",1032,G__MdcDict_675_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinDist",1016,G__MdcDict_675_0_21, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeFlight",1325,G__MdcDict_675_0_22, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImpactAngle",1413,G__MdcDict_675_0_23, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTrack",899,G__MdcDict_675_0_24, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFlagCutEdge",1371,G__MdcDict_675_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireOffset",1342,G__MdcDict_675_0_26, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEfficiency",1333,G__MdcDict_675_0_27, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__MdcDict_675_0_28, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_675_0_29, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcGeantCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_675_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_675_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcGeantCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_675_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcGeantCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_675_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_675_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_675_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeantCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_675_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_675_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeantCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcGeantCell", 1227, G__MdcDict_675_0_41, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantCell), -1, 0, 1, 1, 1, 0, "u 'HMdcGeantCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcGeantCell", 1353, G__MdcDict_675_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_675_0_43, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantCell), -1, 1, 1, 1, 1, 0, "u 'HMdcGeantCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcDigitizer(void) {
   /* HMdcDigitizer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer));
   G__memfunc_setup("effLayerThickness",1754,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 7, 1, 4, 0, 
"f - 'Float_t' 0 - xcoor f - 'Float_t' 0 - ycoor "
"f - 'Float_t' 0 - th f - 'Float_t' 0 - ph "
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findTrack",918,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - trk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcDigitizer",1287,G__MdcDict_679_0_3, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcDigitizer",1287,G__MdcDict_679_0_4, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcDigitizer",1287,G__MdcDict_679_0_5, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer), -1, 0, 4, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"i - 'Int_t' 0 - - g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffsets",1062,G__MdcDict_679_0_6, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 - off0 f - 'Float_t' 0 - off1 "
"f - 'Float_t' 0 - off2 f - 'Float_t' 0 - off3 "
"i - 'Int_t' 0 '1' on_off", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEffLevel",1109,G__MdcDict_679_0_7, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 - eff0 f - 'Float_t' 0 - eff1 "
"f - 'Float_t' 0 - eff2 f - 'Float_t' 0 - eff3 "
"i - 'Int_t' 0 '1' on_off", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEffScaling",1310,G__MdcDict_679_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - betalow g - 'Bool_t' 0 - usescaling", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeErrScaling",1733,G__MdcDict_679_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - usescaling", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoiseLevel",1346,G__MdcDict_679_0_10, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 - noise0 f - 'Float_t' 0 - noise1 "
"f - 'Float_t' 0 - noise2 f - 'Float_t' 0 - noise3 "
"i - 'Int_t' 0 '1' on_off", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoiseRange",1335,G__MdcDict_679_0_11, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - rangeLo0 i - 'Int_t' 0 - rangeLo1 "
"i - 'Int_t' 0 - rangeLo2 i - 'Int_t' 0 - rangeLo3 "
"i - 'Int_t' 0 - rangeHi0 i - 'Int_t' 0 - rangeHi1 "
"i - 'Int_t' 0 - rangeHi2 i - 'Int_t' 0 - rangeHi3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoiseBandWidth",1727,G__MdcDict_679_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoiseWhiteWidth",1867,G__MdcDict_679_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoiseWhiteRatio",1866,G__MdcDict_679_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseBandWidth",1715,G__MdcDict_679_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseWhiteWidth",1855,G__MdcDict_679_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseWhiteRatio",1854,G__MdcDict_679_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setErrorUse",1155,G__MdcDict_679_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofUse",930,G__MdcDict_679_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireOffsetUse",1655,G__MdcDict_679_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffsetsUse",1363,G__MdcDict_679_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellEffUse",1290,G__MdcDict_679_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireStatUse",1452,G__MdcDict_679_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoiseUse",1143,G__MdcDict_679_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDeDxUse",990,G__MdcDict_679_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeCutUse",1332,G__MdcDict_679_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrorUse",1143,G__MdcDict_679_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofUse",918,G__MdcDict_679_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireOffsetUse",1643,G__MdcDict_679_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffsetsUse",1351,G__MdcDict_679_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellEffUse",1278,G__MdcDict_679_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireStatUse",1440,G__MdcDict_679_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseUse",1131,G__MdcDict_679_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDeDxUse",978,G__MdcDict_679_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeCutUse",1320,G__MdcDict_679_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTuple",932,G__MdcDict_679_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - ntuple", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdcMode",1004,G__MdcDict_679_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoiseMode",1231,G__MdcDict_679_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEmbeddingMode",1616,G__MdcDict_679_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTuple",920,G__MdcDict_679_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdcMode",992,G__MdcDict_679_0_41, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseMode",1219,G__MdcDict_679_0_42, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEmbeddingMode",1604,G__MdcDict_679_0_43, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSignalSpeed",1435,G__MdcDict_679_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - speed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSignalSpeed",1423,G__MdcDict_679_0_45, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScaleTime",1219,G__MdcDict_679_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getScaleTime",1207,G__MdcDict_679_0_47, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScalerTime1Err",1679,G__MdcDict_679_0_48, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 '0' m0 f - 'Float_t' 0 '0' m1 "
"f - 'Float_t' 0 '0' m2 f - 'Float_t' 0 '0' m3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireStatOffsetUse",2067,G__MdcDict_679_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireStatOffsetUse",2055,G__MdcDict_679_0_50, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initOffsets",1166,G__MdcDict_679_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaOffsets",1559,G__MdcDict_679_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCreateOffsets",1658,G__MdcDict_679_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' create", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaOffsets",1547,G__MdcDict_679_0_54, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCreateOffsets",1646,G__MdcDict_679_0_55, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireStatEffUse",1725,G__MdcDict_679_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireStatEffUse",1713,G__MdcDict_679_0_57, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayerThicknessEffUse",2355,G__MdcDict_679_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerThicknessEffUse",2343,G__MdcDict_679_0_59, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDeltaElectronUse",1951,G__MdcDict_679_0_60, 121, -1, -1, 0, 6, 1, 1, 0, 
"g - 'Bool_t' 0 - use g - 'Bool_t' 0 'kFALSE' useDeltaMomSel "
"i - 'Int_t' 0 '109' ionId f - 'Float_t' 0 '-950.' t1min "
"f - 'Float_t' 0 '400.' t1max f - 'Float_t' 0 '20.' momCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDeltaElectronUse",1939,G__MdcDict_679_0_61, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDeltaElectronMinMomCut",2539,G__MdcDict_679_0_62, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - 'Float_t' 0 '2.' s0 f - 'Float_t' 0 '2.' s1 "
"f - 'Float_t' 0 '4.5' s2 f - 'Float_t' 0 '2.' s3 "
"f - 'Float_t' 0 '2.' s4 f - 'Float_t' 0 '4.5' s5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printStatus",1201,G__MdcDict_679_0_63, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeCutFlags",1524,G__MdcDict_679_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcCal1Sim' - 0 - cal1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setParContainers",1669,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initVariables",1357,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 2, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("storeCell",941,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 8, 1, 2, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - i - 'Int_t' 0 - - "
"g - 'Bool_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("select",640,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillNoise",933,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 8, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("handleOverFlow",1440,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLoopVariables",1663,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"g - 'Bool_t' 0 'kFALSE' check", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTime1Noise",1381,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTime2Noise",1382,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillNoiseLists",1460,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"U 'HMdcCal1Sim' - 0 - cal1 i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillNoiseToGeantCells",2122,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - - U 'HMdcCal1Sim' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillNTuple",1023,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 7, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - U 'HMdcGeantCell' - 0 - - "
"U 'TNtuple' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillNTuple",1023,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 7, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTuples",1047,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("evalWireStat",1243,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initArrays",1062,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillArrays",1049,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - U 'HMdcGeantCell' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillArraysReal",1437,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetListVariables",1880,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCal1Real",1256,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime1Real",1168,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "f - 'Float_t' 0 - t1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime2Real",1169,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "f - 'Float_t' 0 - t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNHitsReal",1206,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime1Real",1156,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime2Real",1157,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNHitsReal",1194,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCal1Real",1029,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEfficiencyFlags",1838,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeCutFlags",1524,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTrackList",1336,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'HMdcCal1Sim' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findFirstValidHit",1726,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findSecondValidHit",1810,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findNonValidHit",1505,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcSetup",1125,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testMdcSetup",1253,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime1Noise",1290,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime2Noise",1291,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime1Noise",1278,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime2Noise",1279,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFirstHit",1145,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - hit1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSecondHit",1229,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - hit2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFirstTime2",1301,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "f - 'Float_t' 0 - time2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEndList1",1072,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstHit",1133,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSecondHit",1217,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstTime2",1289,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEndList1",1060,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDTime1",848,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDTime2",849,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDTime1Err",1145,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - timeErr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDTime2Err",1146,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - timeErr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinimumDist",1468,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackN",911,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - number", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTof",629,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - tof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAngle",819,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus",976,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - stat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFractionOfmaxCharge",2247,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutEdge",1005,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i g - 'Bool_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireOffset",1354,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - off", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEfficiency",1345,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - eff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDTime1",836,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDTime2",837,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDTime1Err",1133,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDTime2Err",1134,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinimumDist",1456,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackN",899,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTof",617,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAngle",807,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus",964,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFractionOfmaxCharge",2235,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutEdge",993,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireOffset",1342,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEfficiency",1333,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellEffLevel",1481,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseLevel",1334,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffset",935,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseRangeHi",1500,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseRangeLo",1510,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_679_0_150, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcDigitizer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_679_0_151, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDigitizer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_679_0_152, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcDigitizer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_679_0_153, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcDigitizer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_679_0_157, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_679_0_158, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDigitizer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_679_0_159, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDigitizer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_679_0_160, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDigitizer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_679_0_161, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDigitizer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcDigitizer", 1413, G__MdcDict_679_0_162, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcGeantReader(void) {
   /* HMdcGeantReader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantReader));
   G__memfunc_setup("HMdcGeantReader",1438,G__MdcDict_728_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantReader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getGeantMdcCat",1371,G__MdcDict_728_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_HMatrixCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantMdc",1091,G__MdcDict_728_0_5, 85, G__get_linked_tagnum(&G__MdcDictLN_HGeantMdc), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 0 - locate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_728_0_6, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcGeantReader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_728_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantReader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_728_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcGeantReader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_728_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcGeantReader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_728_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_728_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantReader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_728_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeantReader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_728_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeantReader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_728_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeantReader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcGeantReader", 1438, G__MdcDict_728_0_18, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantReader), -1, 0, 1, 1, 1, 0, "u 'HMdcGeantReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcGeantReader", 1564, G__MdcDict_728_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_728_0_20, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcGeantReader), -1, 1, 1, 1, 1, 0, "u 'HMdcGeantReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcGeomModStru(void) {
   /* HMdcGeomModStru */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomModStru));
   G__memfunc_setup("HMdcGeomModStru",1458,G__MdcDict_738_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomModStru), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_738_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_738_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_738_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_738_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_738_0_6, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcGeomModStru::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_738_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeomModStru::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_738_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcGeomModStru::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_738_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcGeomModStru::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_738_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_738_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeomModStru::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_738_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeomModStru::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_738_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeomModStru::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_738_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeomModStru::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcGeomModStru", 1458, G__MdcDict_738_0_18, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomModStru), -1, 0, 1, 1, 1, 0, "u 'HMdcGeomModStru' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcGeomModStru", 1584, G__MdcDict_738_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_738_0_20, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomModStru), -1, 1, 1, 1, 1, 0, "u 'HMdcGeomModStru' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcGeomSecStru(void) {
   /* HMdcGeomSecStru */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomSecStru));
   G__memfunc_setup("HMdcGeomSecStru",1453,G__MdcDict_739_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomSecStru), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '4' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_739_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomModStru), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_739_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_739_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcGeomSecStru::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_739_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeomSecStru::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_739_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcGeomSecStru::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_739_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcGeomSecStru::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_739_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_739_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeomSecStru::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_739_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeomSecStru::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_739_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcGeomSecStru::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_739_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcGeomSecStru::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcGeomSecStru", 1453, G__MdcDict_739_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomSecStru), -1, 0, 1, 1, 1, 0, "u 'HMdcGeomSecStru' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcGeomSecStru", 1579, G__MdcDict_739_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_739_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcGeomSecStru), -1, 1, 1, 1, 1, 0, "u 'HMdcGeomSecStru' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcHit(void) {
   /* HMdcHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHit));
   G__memfunc_setup("HMdcHit",641,G__MdcDict_785_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__MdcDict_785_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__MdcDict_785_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - xl f - 'Float_t' 10 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__MdcDict_785_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - yl f - 'Float_t' 10 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXDir",707,G__MdcDict_785_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - xl f - 'Float_t' 10 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setYDir",708,G__MdcDict_785_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - yl f - 'Float_t' 10 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOff",615,G__MdcDict_785_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - off f - 'Float_t' 10 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXY",509,G__MdcDict_785_0_8, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 10 - xl f - 'Float_t' 10 - errx "
"f - 'Float_t' 10 - yl f - 'Float_t' 10 - erry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYDir",796,G__MdcDict_785_0_9, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 10 - xl f - 'Float_t' 10 - errx "
"f - 'Float_t' 10 - yl f - 'Float_t' 10 - erry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPar",623,G__MdcDict_785_0_10, 121, -1, -1, 0, 10, 1, 1, 0, 
"f - 'Float_t' 10 - xl f - 'Float_t' 10 - erXl "
"f - 'Float_t' 10 - yl f - 'Float_t' 10 - erYl "
"f - 'Float_t' 10 - xDirl f - 'Float_t' 10 - erXDirl "
"f - 'Float_t' 10 - yDirl f - 'Float_t' 10 - erYDirl "
"f - 'Float_t' 10 - offl f - 'Float_t' 10 - erOffl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPar",623,G__MdcDict_785_0_11, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 10 - xl f - 'Float_t' 10 - yl "
"f - 'Float_t' 10 - xDirl f - 'Float_t' 10 - yDirl "
"f - 'Float_t' 10 - offl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChi2",658,G__MdcDict_785_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - chl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlag",710,G__MdcDict_785_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSecMod",903,G__MdcDict_785_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - is i - 'Int_t' 10 - im", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__MdcDict_785_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__MdcDict_785_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXDir",695,G__MdcDict_785_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYDir",696,G__MdcDict_785_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffset",935,G__MdcDict_785_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrX",705,G__MdcDict_785_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrY",706,G__MdcDict_785_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrXDir",992,G__MdcDict_785_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrYDir",993,G__MdcDict_785_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrOffset",1232,G__MdcDict_785_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__MdcDict_785_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__MdcDict_785_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCovariance",1339,G__MdcDict_785_0_27, 117, G__get_linked_tagnum(&G__MdcDictLN_HSymMat), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__MdcDict_785_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 1 - xl f - 'Float_t' 1 - errx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__MdcDict_785_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 1 - yl f - 'Float_t' 1 - erry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXDir",695,G__MdcDict_785_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 1 - xl f - 'Float_t' 1 - errx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYDir",696,G__MdcDict_785_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 1 - yl f - 'Float_t' 1 - erry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXY",497,G__MdcDict_785_0_32, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 1 - xl f - 'Float_t' 1 - errx "
"f - 'Float_t' 1 - yl f - 'Float_t' 1 - erry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXYDir",784,G__MdcDict_785_0_33, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 1 - xl f - 'Float_t' 1 - errx "
"f - 'Float_t' 1 - yl f - 'Float_t' 1 - erry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOff",603,G__MdcDict_785_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 1 - off f - 'Float_t' 1 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPar",611,G__MdcDict_785_0_35, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 1 - p1 f - 'Float_t' 1 - p2 "
"f - 'Float_t' 1 - p3 f - 'Float_t' 1 - p4 "
"f - 'Float_t' 1 - p5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrPar",908,G__MdcDict_785_0_36, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 1 - p1 f - 'Float_t' 1 - p2 "
"f - 'Float_t' 1 - p3 f - 'Float_t' 1 - p4 "
"f - 'Float_t' 1 - p5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2",646,G__MdcDict_785_0_37, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFlag",698,G__MdcDict_785_0_38, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSecMod",891,G__MdcDict_785_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 1 - isec i - 'Int_t' 1 - imod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcDict_785_0_40, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__MdcDict_785_0_41, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__MdcDict_785_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - isec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__MdcDict_785_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - imod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcDict_785_0_44, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackFinder",1433,G__MdcDict_785_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - trfn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackFinder",1421,G__MdcDict_785_0_46, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusInfIndex",1528,G__MdcDict_785_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 10 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusInfIndex",1516,G__MdcDict_785_0_48, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_785_0_49, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_785_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_785_0_51, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_785_0_52, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_785_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_785_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_785_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_785_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_785_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcHit", 641, G__MdcDict_785_0_61, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcHit), -1, 0, 1, 1, 1, 0, "u 'HMdcHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcHit", 767, G__MdcDict_785_0_62, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_785_0_63, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcHit), -1, 1, 1, 1, 1, 0, "u 'HMdcHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcHitSim(void) {
   /* HMdcHitSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitSim));
   G__memfunc_setup("HMdcHitSim",938,G__MdcDict_786_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcHitSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_786_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus",976,G__MdcDict_786_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTracks",1026,G__MdcDict_786_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nTr I - 'Int_t' 10 - listTr "
"B - 'UChar_t' 10 - nTm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumNoiseWires",1668,G__MdcDict_786_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcNTracks",1097,G__MdcDict_786_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus",964,G__MdcDict_786_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTracks",1014,G__MdcDict_786_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__MdcDict_786_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTimes",912,G__MdcDict_786_0_10, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumNoiseWires",1656,G__MdcDict_786_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcDict_786_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_786_0_13, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcHitSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_786_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcHitSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_786_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcHitSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_786_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcHitSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_786_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_786_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcHitSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_786_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcHitSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_786_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcHitSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_786_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcHitSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcHitSim", 938, G__MdcDict_786_0_25, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcHitSim), -1, 0, 1, 1, 1, 0, "u 'HMdcHitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcHitSim", 1064, G__MdcDict_786_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_786_0_27, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcHitSim), -1, 1, 1, 1, 1, 0, "u 'HMdcHitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcSeg(void) {
   /* HMdcSeg */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSeg));
   G__memfunc_setup("HMdcSeg",635,G__MdcDict_787_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcSeg), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__MdcDict_787_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ",422,G__MdcDict_787_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - zl f - 'Float_t' 10 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setR",414,G__MdcDict_787_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - rl f - 'Float_t' 10 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__MdcDict_787_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - th f - 'Float_t' 10 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__MdcDict_787_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - ph f - 'Float_t' 10 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZR",504,G__MdcDict_787_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 10 - zl f - 'Float_t' 10 - erz "
"f - 'Float_t' 10 - rl f - 'Float_t' 10 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThetaPhi",1123,G__MdcDict_787_0_8, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 10 - th f - 'Float_t' 10 - ert "
"f - 'Float_t' 10 - ph f - 'Float_t' 10 - erp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPar",623,G__MdcDict_787_0_9, 121, -1, -1, 0, 8, 1, 1, 0, 
"f - 'Float_t' 10 - zl f - 'Float_t' 10 - ezl "
"f - 'Float_t' 10 - rl f - 'Float_t' 10 - erl "
"f - 'Float_t' 10 - th f - 'Float_t' 10 - eth "
"f - 'Float_t' 10 - ph f - 'Float_t' 10 - eph", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ",422,G__MdcDict_787_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - zl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setR",414,G__MdcDict_787_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - rl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__MdcDict_787_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__MdcDict_787_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - ph", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPar",623,G__MdcDict_787_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 10 - zl f - 'Float_t' 10 - rl "
"f - 'Float_t' 10 - th f - 'Float_t' 10 - ph", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZprime",963,G__MdcDict_787_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - zpr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRprime",955,G__MdcDict_787_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - rpr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChi2",658,G__MdcDict_787_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - chl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlag",710,G__MdcDict_787_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSec",615,G__MdcDict_787_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIOSeg",771,G__MdcDict_787_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitInd",908,G__MdcDict_787_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - i h - 'UInt_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusIndex",1243,G__MdcDict_787_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX1",469,G__MdcDict_787_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY1",470,G__MdcDict_787_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX2",470,G__MdcDict_787_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY2",471,G__MdcDict_787_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYPar",800,G__MdcDict_787_0_27, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - vx1 d - 'Double_t' 0 - vy1 "
"d - 'Double_t' 0 - vx2 d - 'Double_t' 0 - vy2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ",410,G__MdcDict_787_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getR",402,G__MdcDict_787_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__MdcDict_787_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__MdcDict_787_0_31, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrZ",707,G__MdcDict_787_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrR",699,G__MdcDict_787_0_33, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrTheta",1119,G__MdcDict_787_0_34, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrPhi",906,G__MdcDict_787_0_35, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZprime",951,G__MdcDict_787_0_36, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRprime",943,G__MdcDict_787_0_37, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusIndex",1231,G__MdcDict_787_0_38, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX1",457,G__MdcDict_787_0_39, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "in [mm]", (void*) NULL, 0);
   G__memfunc_setup("getY1",458,G__MdcDict_787_0_40, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "in [mm]", (void*) NULL, 0);
   G__memfunc_setup("getX2",458,G__MdcDict_787_0_41, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "in [mm]", (void*) NULL, 0);
   G__memfunc_setup("getY2",459,G__MdcDict_787_0_42, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "in [mm]", (void*) NULL, 0);
   G__memfunc_setup("getX1Sh",644,G__MdcDict_787_0_43, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", "in hundreds mkm", (void*) NULL, 0);
   G__memfunc_setup("getY1Sh",645,G__MdcDict_787_0_44, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", "in hundreds mkm", (void*) NULL, 0);
   G__memfunc_setup("getX2Sh",645,G__MdcDict_787_0_45, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", "in hundreds mkm", (void*) NULL, 0);
   G__memfunc_setup("getY2Sh",646,G__MdcDict_787_0_46, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", "in hundreds mkm", (void*) NULL, 0);
   G__memfunc_setup("getZ",410,G__MdcDict_787_0_47, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 1 - zl f - 'Float_t' 1 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getR",402,G__MdcDict_787_0_48, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 1 - rl f - 'Float_t' 1 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__MdcDict_787_0_49, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 1 - th f - 'Float_t' 1 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__MdcDict_787_0_50, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 1 - ph f - 'Float_t' 1 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZR",492,G__MdcDict_787_0_51, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 1 - zl f - 'Float_t' 1 - erz "
"f - 'Float_t' 1 - rl f - 'Float_t' 1 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaPhi",1111,G__MdcDict_787_0_52, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 1 - th f - 'Float_t' 1 - ert "
"f - 'Float_t' 1 - ph f - 'Float_t' 1 - erp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPar",611,G__MdcDict_787_0_53, 121, -1, -1, 0, 4, 1, 1, 8, 
"f - 'Float_t' 1 - p1 f - 'Float_t' 1 - p2 "
"f - 'Float_t' 1 - p3 f - 'Float_t' 1 - p4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrPar",908,G__MdcDict_787_0_54, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 1 - p1 f - 'Float_t' 1 - p2 "
"f - 'Float_t' 1 - p3 f - 'Float_t' 1 - p4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2",646,G__MdcDict_787_0_55, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCovariance",1339,G__MdcDict_787_0_56, 117, G__get_linked_tagnum(&G__MdcDictLN_HSymMat), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFlag",698,G__MdcDict_787_0_57, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSec",603,G__MdcDict_787_0_58, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "sector number", (void*) NULL, 0);
   G__memfunc_setup("getIOSeg",759,G__MdcDict_787_0_59, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "inner seg=0, outer=1 ", (void*) NULL, 0);
   G__memfunc_setup("getHitInd",896,G__MdcDict_787_0_60, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", "Hit index (-1 --> No hit)", (void*) NULL, 0);
   G__memfunc_setup("setFakeFlag",1085,G__MdcDict_787_0_61, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetFakeFlag",1300,G__MdcDict_787_0_62, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFake",595,G__MdcDict_787_0_63, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusInfo",1135,G__MdcDict_787_0_64, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nBins i - 'Int_t' 0 - nCells "
"i - 'Int_t' 0 - nMerClus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffVertexClus",1660,G__MdcDict_787_0_65, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOffVertexClus",1548,G__MdcDict_787_0_66, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNBinsClus",1201,G__MdcDict_787_0_67, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCellsClus",1304,G__MdcDict_787_0_68, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNMergedClus",1401,G__MdcDict_787_0_69, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcDict_787_0_70, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("convertToShort",1492,(G__InterfaceMethod) NULL, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 2, 8, "d - 'Double_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_787_0_72, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcSeg::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_787_0_73, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSeg::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_787_0_74, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcSeg::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_787_0_75, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcSeg::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_787_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_787_0_80, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSeg::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_787_0_81, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSeg::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_787_0_82, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSeg::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_787_0_83, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSeg::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcSeg", 635, G__MdcDict_787_0_84, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcSeg), -1, 0, 1, 1, 1, 0, "u 'HMdcSeg' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcSeg", 761, G__MdcDict_787_0_85, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_787_0_86, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcSeg), -1, 1, 1, 1, 1, 0, "u 'HMdcSeg' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcSegSim(void) {
   /* HMdcSegSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegSim));
   G__memfunc_setup("HMdcSegSim",932,G__MdcDict_789_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcSegSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_789_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearSimInfo",1212,G__MdcDict_789_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus",976,G__MdcDict_789_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTracks",1026,G__MdcDict_789_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nTr I - 'Int_t' 10 - listTr "
"B - 'UChar_t' 10 - nTm B - 'UChar_t' 10 '0' nDi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTrack",798,G__MdcDict_789_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - track b - 'UChar_t' 0 - nTm "
"b - 'UChar_t' 0 '0' nDi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcNTracks",1097,G__MdcDict_789_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackInf",1118,G__MdcDict_789_0_8, 121, -1, -1, 0, 4, 1, 1, 0, 
"I - 'Int_t' 10 - lst S - 'Short_t' 10 - nTms "
"B - 'UChar_t' 10 - nDTms B - 'UChar_t' 10 - tSt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTracks",1026,G__MdcDict_789_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nTr c - 'Char_t' 0 - nNF "
"c - 'Char_t' 0 - ioS", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNDigiTimes",1305,G__MdcDict_789_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n b - 'UChar_t' 0 - nt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackStatus",1477,G__MdcDict_789_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n b - 'UChar_t' 0 - status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus",964,G__MdcDict_789_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTracks",1014,G__MdcDict_789_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNNotFakeTracks",1694,G__MdcDict_789_0_14, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__MdcDict_789_0_15, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTimes",912,G__MdcDict_789_0_16, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDigiTimes",1293,G__MdcDict_789_0_17, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackStatus",1465,G__MdcDict_789_0_18, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumNoiseWires",1656,G__MdcDict_789_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortTrListByContr",1771,G__MdcDict_789_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGoodTrack",1214,G__MdcDict_789_0_21, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - i1 U 'HMdcSegSim' - 0 - outerSeg "
"i - 'Int_t' 0 '5' nWiresCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextGoodTrack",1629,G__MdcDict_789_0_22, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 1 - i1 U 'HMdcSegSim' - 0 - outerSeg "
"i - 'Int_t' 0 '5' nWiresCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGntTrackOk",1204,G__MdcDict_789_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFakeContribution",1875,G__MdcDict_789_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isClFnLevelTooHigh",1769,G__MdcDict_789_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("is1or2HitsNotRec",1539,G__MdcDict_789_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSegNotRec",1094,G__MdcDict_789_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTrackNotRec",1308,G__MdcDict_789_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNoMeta",800,G__MdcDict_789_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGEANTBug",873,G__MdcDict_789_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findTrack",918,G__MdcDict_789_0_31, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - geantNum i - 'Int_t' 0 '0' nDigTimes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackIndex",1325,G__MdcDict_789_0_32, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetFakeContributionFlag",2580,G__MdcDict_789_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFakeContributionFlag",2365,G__MdcDict_789_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcDict_789_0_35, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("indOk",501,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trackBits",935,(G__InterfaceMethod) NULL, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testBit",735,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 8, 
"i - 'Int_t' 0 - i b - 'UChar_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("exchangeTrPos",1339,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - t1 i - 'Int_t' 0 - t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_789_0_40, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcSegSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_789_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSegSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_789_0_42, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcSegSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_789_0_43, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcSegSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_789_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_789_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSegSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_789_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSegSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_789_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSegSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_789_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSegSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcSegSim", 932, G__MdcDict_789_0_52, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcSegSim), -1, 0, 1, 1, 1, 0, "u 'HMdcSegSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcSegSim", 1058, G__MdcDict_789_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_789_0_54, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcSegSim), -1, 1, 1, 1, 1, 0, "u 'HMdcSegSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrkCand(void) {
   /* HMdcTrkCand */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand));
   G__memfunc_setup("HMdcTrkCand",1027,G__MdcDict_790_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTrkCand",1027,G__MdcDict_790_0_2, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand), -1, 0, 3, 1, 1, 0, 
"c - 'Char_t' 0 - sec i - 'Int_t' 0 - s1ind "
"i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTrkCand",1027,G__MdcDict_790_0_3, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand), -1, 0, 3, 1, 1, 0, 
"U 'HMdcTrkCand' - 0 - fTrkCand i - 'Int_t' 0 - s2ind "
"i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_790_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSec",615,G__MdcDict_790_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSeg1Ind",951,G__MdcDict_790_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSeg2Ind",952,G__MdcDict_790_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNCandForSeg1",1415,G__MdcDict_790_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFirstCandInd",1509,G__MdcDict_790_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNextCandInd",1404,G__MdcDict_790_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetaMatchInd",1499,G__MdcDict_790_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSeg2Ind",917,G__MdcDict_790_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlag",710,G__MdcDict_790_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFakeFlagSeg1",1421,G__MdcDict_790_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFakeFlagSeg2",1422,G__MdcDict_790_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetFakeFlagSeg1",1636,G__MdcDict_790_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetFakeFlagSeg2",1637,G__MdcDict_790_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSeg1Fake",931,G__MdcDict_790_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSeg2Fake",932,G__MdcDict_790_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFake",595,G__MdcDict_790_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setdedx",753,G__MdcDict_790_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - mod f - 'Float_t' 0 - dEdx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmadedx",1250,G__MdcDict_790_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - mod f - 'Float_t' 0 - Sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNWirededx",1238,G__MdcDict_790_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - mod b - 'UChar_t' 0 - nW", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNWireCutdedx",1538,G__MdcDict_790_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - mod b - 'UChar_t' 0 - nW", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setdedxInnerSeg",1548,G__MdcDict_790_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dedx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setdedxOuterSeg",1567,G__MdcDict_790_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dedx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setdedxCombinedSeg",1841,G__MdcDict_790_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dedx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setdedxSeg",1040,G__MdcDict_790_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg f - 'Float_t' 0 - dedx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmadedxInnerSeg",2045,G__MdcDict_790_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmadedxOuterSeg",2064,G__MdcDict_790_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmadedxCombinedSeg",2338,G__MdcDict_790_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmadedxSeg",1537,G__MdcDict_790_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg f - 'Float_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNWirededxInnerSeg",2033,G__MdcDict_790_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - nw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNWirededxOuterSeg",2052,G__MdcDict_790_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - nw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNWirededxCombinedSeg",2326,G__MdcDict_790_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - nw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNWirededxSeg",1525,G__MdcDict_790_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg b - 'UChar_t' 0 - nw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNWireCutdedxInnerSeg",2333,G__MdcDict_790_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - nw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNWireCutdedxOuterSeg",2352,G__MdcDict_790_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - nw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNWireCutdedxCombinedSeg",2626,G__MdcDict_790_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - nw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNWireCutdedxSeg",1825,G__MdcDict_790_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - seg b - 'UChar_t' 0 - nw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSec",603,G__MdcDict_790_0_41, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSeg1Ind",939,G__MdcDict_790_0_42, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSeg2Ind",940,G__MdcDict_790_0_43, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSegInd",890,G__MdcDict_790_0_44, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCandForSeg1",1403,G__MdcDict_790_0_45, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextCandInd",1392,G__MdcDict_790_0_46, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstCandInd",1497,G__MdcDict_790_0_47, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaMatchInd",1487,G__MdcDict_790_0_48, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFlag",698,G__MdcDict_790_0_49, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getdedx",741,G__MdcDict_790_0_50, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmadedx",1238,G__MdcDict_790_0_51, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWirededx",1226,G__MdcDict_790_0_52, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWireCutdedx",1526,G__MdcDict_790_0_53, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getdedxInnerSeg",1536,G__MdcDict_790_0_54, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getdedxOuterSeg",1555,G__MdcDict_790_0_55, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getdedxCombinedSeg",1829,G__MdcDict_790_0_56, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getdedxSeg",1028,G__MdcDict_790_0_57, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmadedxInnerSeg",2033,G__MdcDict_790_0_58, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmadedxOuterSeg",2052,G__MdcDict_790_0_59, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmadedxCombinedSeg",2326,G__MdcDict_790_0_60, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmadedxSeg",1525,G__MdcDict_790_0_61, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWirededxInnerSeg",2021,G__MdcDict_790_0_62, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWirededxOuterSeg",2040,G__MdcDict_790_0_63, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWirededxCombinedSeg",2314,G__MdcDict_790_0_64, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWirededxSeg",1513,G__MdcDict_790_0_65, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWireCutdedxInnerSeg",2321,G__MdcDict_790_0_66, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWireCutdedxOuterSeg",2340,G__MdcDict_790_0_67, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWireCutdedxCombinedSeg",2614,G__MdcDict_790_0_68, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWireCutdedxSeg",1813,G__MdcDict_790_0_69, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcDict_790_0_70, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcDict_790_0_71, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrkCand::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_790_0_72, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrkCand::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_790_0_73, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrkCand::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_790_0_74, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrkCand::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_790_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_790_0_79, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrkCand::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_790_0_80, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrkCand::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_790_0_81, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrkCand::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_790_0_82, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrkCand::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrkCand", 1027, G__MdcDict_790_0_83, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand), -1, 0, 1, 1, 1, 0, "u 'HMdcTrkCand' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrkCand", 1153, G__MdcDict_790_0_84, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_790_0_85, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCand), -1, 1, 1, 1, 1, 0, "u 'HMdcTrkCand' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcHitIdeal(void) {
   /* HMdcHitIdeal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcHitIdeal));
   G__memfunc_setup("Class",502,G__MdcDict_792_0_1, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcHitIdeal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_792_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcHitIdeal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_792_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcHitIdeal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_792_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcHitIdeal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_792_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_792_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcHitIdeal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_792_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcHitIdeal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_792_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcHitIdeal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_792_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcHitIdeal::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("HMdcHitIdeal", 1120, G__MdcDict_792_0_13, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcHitIdeal), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcHitIdeal", 1120, G__MdcDict_792_0_14, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcHitIdeal), -1, 0, 1, 1, 1, 0, "u 'HMdcHitIdeal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcHitIdeal", 1246, G__MdcDict_792_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_792_0_16, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcHitIdeal), -1, 1, 1, 1, 1, 0, "u 'HMdcHitIdeal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcSegIdeal(void) {
   /* HMdcSegIdeal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSegIdeal));
   G__memfunc_setup("Class",502,G__MdcDict_793_0_1, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcSegIdeal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_793_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSegIdeal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_793_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcSegIdeal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_793_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcSegIdeal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_793_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_793_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSegIdeal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_793_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSegIdeal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_793_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSegIdeal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_793_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSegIdeal::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("HMdcSegIdeal", 1114, G__MdcDict_793_0_13, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcSegIdeal), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcSegIdeal", 1114, G__MdcDict_793_0_14, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcSegIdeal), -1, 0, 1, 1, 1, 0, "u 'HMdcSegIdeal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcSegIdeal", 1240, G__MdcDict_793_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_793_0_16, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcSegIdeal), -1, 1, 1, 1, 1, 0, "u 'HMdcSegIdeal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrkCandIdeal(void) {
   /* HMdcTrkCandIdeal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCandIdeal));
   G__memfunc_setup("Class",502,G__MdcDict_794_0_1, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrkCandIdeal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_794_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrkCandIdeal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_794_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrkCandIdeal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_794_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrkCandIdeal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_794_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_794_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrkCandIdeal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_794_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrkCandIdeal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_794_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrkCandIdeal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_794_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrkCandIdeal::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("HMdcTrkCandIdeal", 1506, G__MdcDict_794_0_13, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCandIdeal), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrkCandIdeal", 1506, G__MdcDict_794_0_14, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCandIdeal), -1, 0, 1, 1, 1, 0, "u 'HMdcTrkCandIdeal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrkCandIdeal", 1632, G__MdcDict_794_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_794_0_16, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTrkCandIdeal), -1, 1, 1, 1, 1, 0, "u 'HMdcTrkCandIdeal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLayerGeomParLay(void) {
   /* HMdcLayerGeomParLay */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParLay));
   G__memfunc_setup("HMdcLayerGeomParLay",1834,G__MdcDict_795_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParLay), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPitch",824,G__MdcDict_795_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumWires",1146,G__MdcDict_795_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCatDist",1004,G__MdcDict_795_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireOrient",1352,G__MdcDict_795_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCentralWireNr",1632,G__MdcDict_795_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCathodeWireThickness",2363,G__MdcDict_795_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayerPos",1135,G__MdcDict_795_0_8, 117, G__get_linked_tagnum(&G__MdcDictLN_HGeomTransform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_795_0_9, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 - a f - 'Float_t' 0 - c "
"f - 'Float_t' 0 - d f - 'Float_t' 0 - e "
"f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_795_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcLayerGeomParLay' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPitch",836,G__MdcDict_795_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumWires",1158,G__MdcDict_795_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCatDist",1016,G__MdcDict_795_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireOrient",1364,G__MdcDict_795_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCentralWireNr",1644,G__MdcDict_795_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCathodeWireThickness",2375,G__MdcDict_795_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_795_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_795_0_18, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLayerGeomParLay::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_795_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerGeomParLay::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_795_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLayerGeomParLay::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_795_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLayerGeomParLay::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_795_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_795_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerGeomParLay::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_795_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLayerGeomParLay::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_795_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerGeomParLay::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_795_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLayerGeomParLay::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLayerGeomParLay", 1834, G__MdcDict_795_0_30, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParLay), -1, 0, 1, 1, 1, 0, "u 'HMdcLayerGeomParLay' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLayerGeomParLay", 1960, G__MdcDict_795_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_795_0_32, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParLay), -1, 1, 1, 1, 1, 0, "u 'HMdcLayerGeomParLay' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLayerGeomParMod(void) {
   /* HMdcLayerGeomParMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParMod));
   G__memfunc_setup("HMdcLayerGeomParMod",1828,G__MdcDict_796_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_796_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParLay), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_796_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_796_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLayerGeomParMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_796_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerGeomParMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_796_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLayerGeomParMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_796_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLayerGeomParMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_796_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_796_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerGeomParMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_796_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLayerGeomParMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_796_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerGeomParMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_796_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLayerGeomParMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLayerGeomParMod", 1828, G__MdcDict_796_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParMod), -1, 0, 1, 1, 1, 0, "u 'HMdcLayerGeomParMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLayerGeomParMod", 1954, G__MdcDict_796_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_796_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParMod), -1, 1, 1, 1, 1, 0, "u 'HMdcLayerGeomParMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLayerGeomParSec(void) {
   /* HMdcLayerGeomParSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParSec));
   G__memfunc_setup("HMdcLayerGeomParSec",1823,G__MdcDict_797_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParSec), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_797_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_797_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_797_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLayerGeomParSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_797_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerGeomParSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_797_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLayerGeomParSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_797_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLayerGeomParSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_797_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_797_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerGeomParSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_797_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLayerGeomParSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_797_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLayerGeomParSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_797_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLayerGeomParSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLayerGeomParSec", 1823, G__MdcDict_797_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParSec), -1, 0, 1, 1, 1, 0, "u 'HMdcLayerGeomParSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLayerGeomParSec", 1949, G__MdcDict_797_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_797_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLayerGeomParSec), -1, 1, 1, 1, 1, 0, "u 'HMdcLayerGeomParSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookupChan(void) {
   /* HMdcLookupChan */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupChan));
   G__memfunc_setup("HMdcLookupChan",1360,G__MdcDict_798_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupChan), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '-1' nl i - 'Int_t' 0 '-1' nc "
"c - 'Char_t' 0 ''0'' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNLayer",919,G__MdcDict_798_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNCell",794,G__MdcDict_798_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setReadoutSide",1445,G__MdcDict_798_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_798_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - l i - 'Int_t' 0 - c "
"c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_798_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcLookupChan' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayer",907,G__MdcDict_798_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCell",782,G__MdcDict_798_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getReadoutSide",1433,G__MdcDict_798_0_9, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_798_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_798_0_11, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookupChan::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_798_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupChan::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_798_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookupChan::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_798_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookupChan::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_798_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_798_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupChan::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_798_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupChan::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_798_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupChan::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_798_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupChan::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookupChan", 1360, G__MdcDict_798_0_23, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupChan), -1, 0, 1, 1, 1, 0, "u 'HMdcLookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLookupChan", 1486, G__MdcDict_798_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_798_0_25, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupChan), -1, 1, 1, 1, 1, 0, "u 'HMdcLookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookupMoth(void) {
   /* HMdcLookupMoth */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupMoth));
   G__memfunc_setup("HMdcLookupMoth",1390,G__MdcDict_799_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupMoth), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' n C - 'Text_t' 10 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_799_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupChan), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_799_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_799_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookupMoth::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_799_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupMoth::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_799_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookupMoth::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_799_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookupMoth::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_799_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_799_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupMoth::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_799_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupMoth::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_799_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupMoth::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_799_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupMoth::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookupMoth", 1390, G__MdcDict_799_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupMoth), -1, 0, 1, 1, 1, 0, "u 'HMdcLookupMoth' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLookupMoth", 1516, G__MdcDict_799_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_799_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupMoth), -1, 1, 1, 1, 1, 0, "u 'HMdcLookupMoth' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookupGMod(void) {
   /* HMdcLookupGMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGMod));
   G__memfunc_setup("HMdcLookupGMod",1341,G__MdcDict_800_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGMod), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '16' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_800_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupMoth), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_800_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createMoth",1036,G__MdcDict_800_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_800_0_5, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookupGMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_800_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupGMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_800_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookupGMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_800_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookupGMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_800_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_800_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupGMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_800_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupGMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_800_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupGMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_800_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupGMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookupGMod", 1341, G__MdcDict_800_0_17, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGMod), -1, 0, 1, 1, 1, 0, "u 'HMdcLookupGMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLookupGMod", 1467, G__MdcDict_800_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_800_0_19, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGMod), -1, 1, 1, 1, 1, 0, "u 'HMdcLookupGMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookupGSec(void) {
   /* HMdcLookupGSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGSec));
   G__memfunc_setup("HMdcLookupGSec",1336,G__MdcDict_801_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGSec), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '4' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_801_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_801_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_801_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookupGSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_801_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupGSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_801_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookupGSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_801_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookupGSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_801_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_801_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupGSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_801_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupGSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_801_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupGSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_801_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupGSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookupGSec", 1336, G__MdcDict_801_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGSec), -1, 0, 1, 1, 1, 0, "u 'HMdcLookupGSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLookupGSec", 1462, G__MdcDict_801_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_801_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupGSec), -1, 1, 1, 1, 1, 0, "u 'HMdcLookupGSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookupCell(void) {
   /* HMdcLookupCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupCell));
   G__memfunc_setup("HMdcLookupCell",1366,G__MdcDict_802_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupCell), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '-1' m i - 'Int_t' 0 '-1' c "
"c - 'Char_t' 0 ''0'' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNMoth",818,G__MdcDict_802_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNChan",788,G__MdcDict_802_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setReadoutSide",1445,G__MdcDict_802_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_802_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - c "
"c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNMoth",806,G__MdcDict_802_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNChan",776,G__MdcDict_802_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getReadoutSide",1433,G__MdcDict_802_0_8, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_802_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_802_0_10, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookupCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_802_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_802_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookupCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_802_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookupCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_802_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_802_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_802_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_802_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_802_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookupCell", 1366, G__MdcDict_802_0_22, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupCell), -1, 0, 1, 1, 1, 0, "u 'HMdcLookupCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLookupCell", 1492, G__MdcDict_802_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_802_0_24, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupCell), -1, 1, 1, 1, 1, 0, "u 'HMdcLookupCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookupLayer(void) {
   /* HMdcLookupLayer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupLayer));
   G__memfunc_setup("HMdcLookupLayer",1491,G__MdcDict_803_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupLayer), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_803_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupCell), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_803_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_803_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookupLayer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_803_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupLayer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_803_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookupLayer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_803_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookupLayer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_803_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_803_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupLayer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_803_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupLayer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_803_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupLayer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_803_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupLayer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookupLayer", 1491, G__MdcDict_803_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupLayer), -1, 0, 1, 1, 1, 0, "u 'HMdcLookupLayer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLookupLayer", 1617, G__MdcDict_803_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_803_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupLayer), -1, 1, 1, 1, 1, 0, "u 'HMdcLookupLayer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookupRMod(void) {
   /* HMdcLookupRMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRMod));
   G__memfunc_setup("HMdcLookupRMod",1352,G__MdcDict_804_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRMod), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '6' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_804_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupLayer), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_804_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createLayer",1137,G__MdcDict_804_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_804_0_5, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookupRMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_804_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupRMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_804_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookupRMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_804_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookupRMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_804_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_804_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupRMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_804_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupRMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_804_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupRMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_804_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupRMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookupRMod", 1352, G__MdcDict_804_0_17, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRMod), -1, 0, 1, 1, 1, 0, "u 'HMdcLookupRMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLookupRMod", 1478, G__MdcDict_804_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_804_0_19, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRMod), -1, 1, 1, 1, 1, 0, "u 'HMdcLookupRMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookupRSec(void) {
   /* HMdcLookupRSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRSec));
   G__memfunc_setup("HMdcLookupRSec",1347,G__MdcDict_805_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRSec), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '4' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_805_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_805_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_805_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookupRSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_805_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupRSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_805_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookupRSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_805_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookupRSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_805_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_805_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupRSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_805_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupRSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_805_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupRSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_805_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupRSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookupRSec", 1347, G__MdcDict_805_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRSec), -1, 0, 1, 1, 1, 0, "u 'HMdcLookupRSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLookupRSec", 1473, G__MdcDict_805_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_805_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRSec), -1, 1, 1, 1, 1, 0, "u 'HMdcLookupRSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcLookupRaw(void) {
   /* HMdcLookupRaw */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRaw));
   G__memfunc_setup("HMdcLookupRaw",1280,G__MdcDict_806_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRaw), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcLookupRaw\"' name C - 'Char_t' 10 '\"Mdc lookup table from cal1 to raw\"' title "
"C - 'Char_t' 10 '\"\"' context i - 'Int_t' 0 '6' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_806_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - input", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writeline",979,G__MdcDict_806_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__MdcDict_806_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_806_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcDict_806_0_9, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLookupRaw::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_806_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupRaw::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_806_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLookupRaw::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_806_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLookupRaw::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_806_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_806_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupRaw::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_806_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupRaw::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_806_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLookupRaw::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_806_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLookupRaw::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcLookupRaw", 1280, G__MdcDict_806_0_21, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRaw), -1, 0, 1, 1, 1, 0, "u 'HMdcLookupRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLookupRaw", 1406, G__MdcDict_806_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_806_0_23, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcLookupRaw), -1, 1, 1, 1, 1, 0, "u 'HMdcLookupRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcParAsciiFileIo(void) {
   /* HMdcParAsciiFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcParAsciiFileIo));
   G__memfunc_setup("HMdcParAsciiFileIo",1696,G__MdcDict_811_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcParAsciiFileIo), -1, 0, 1, 1, 1, 0, "U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParSet' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcDict_811_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcParAsciiFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_811_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcParAsciiFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_811_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcParAsciiFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_811_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcParAsciiFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_811_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_811_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcParAsciiFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_811_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcParAsciiFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_811_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcParAsciiFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_811_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcParAsciiFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcParAsciiFileIo", 1696, G__MdcDict_811_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcParAsciiFileIo), -1, 0, 1, 1, 1, 0, "u 'HMdcParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcParAsciiFileIo", 1822, G__MdcDict_811_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_811_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcParAsciiFileIo), -1, 1, 1, 1, 1, 0, "u 'HMdcParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcRawStruct(void) {
   /* HMdcRawStruct */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawStruct));
   G__memfunc_setup("HMdcRawStruct",1291,G__MdcDict_814_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcRawStruct), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcRawStruct\"' name C - 'Char_t' 10 '\"Mdc parameters for hardware structure\"' title "
"C - 'Char_t' 10 '\"\"' context i - 'Int_t' 0 '6' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_814_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcRawSecStru), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readline",836,G__MdcDict_814_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__MdcDict_814_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__MdcDict_814_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_814_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_814_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxIndices",1317,G__MdcDict_814_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArrayI' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_814_0_12, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcRawStruct::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_814_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawStruct::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_814_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcRawStruct::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_814_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcRawStruct::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_814_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_814_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawStruct::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_814_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRawStruct::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_814_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawStruct::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_814_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRawStruct::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcRawStruct", 1291, G__MdcDict_814_0_24, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcRawStruct), -1, 0, 1, 1, 1, 0, "u 'HMdcRawStruct' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcRawStruct", 1417, G__MdcDict_814_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_814_0_26, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcRawStruct), -1, 1, 1, 1, 1, 0, "u 'HMdcRawStruct' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTdcThreshold(void) {
   /* HMdcTdcThreshold */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThreshold));
   G__memfunc_setup("HMdcTdcThreshold",1572,G__MdcDict_815_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThreshold), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcTdcThreshold\"' name C - 'Char_t' 10 '\"threshold parameters for Mdc\"' title "
"C - 'Char_t' 10 '\"MdcTdcThresholdProduction\"' context i - 'Int_t' 0 '6' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_815_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_815_0_3, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sector i - 'Int_t' 0 - module "
"i - 'Int_t' 0 - mbo i - 'Int_t' 0 - dbo "
"i - 'Int_t' 0 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_815_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readline",836,G__MdcDict_815_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readlinefromfile",1688,G__MdcDict_815_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writelinetofile",1622,G__MdcDict_815_0_9, 121, -1, -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 0 - buf i - 'Int_t' 0 - sec "
"i - 'Int_t' 0 - mod i - 'Int_t' 0 - mbo "
"i - 'Int_t' 0 - dbo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addvalue",838,G__MdcDict_815_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__MdcDict_815_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__MdcDict_815_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_815_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOraVersion",1364,G__MdcDict_815_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus",976,G__MdcDict_815_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - stat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus",964,G__MdcDict_815_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOraVersion",1352,G__MdcDict_815_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_815_0_19, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTdcThreshold::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_815_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThreshold::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_815_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTdcThreshold::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_815_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTdcThreshold::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_815_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_815_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThreshold::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_815_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcThreshold::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_815_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThreshold::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_815_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcThreshold::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTdcThreshold", 1572, G__MdcDict_815_0_31, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThreshold), -1, 0, 1, 1, 1, 0, "u 'HMdcTdcThreshold' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTdcThreshold", 1698, G__MdcDict_815_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_815_0_33, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThreshold), -1, 1, 1, 1, 1, 0, "u 'HMdcTdcThreshold' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTdcChannel(void) {
   /* HMdcTdcChannel */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannel));
   G__memfunc_setup("HMdcTdcChannel",1328,G__MdcDict_816_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannel), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcTdcChannel\"' name C - 'Char_t' 10 '\"channel masks for Mdc TDC\"' title "
"C - 'Char_t' 10 '\"MdcTdcChannelProduction\"' context i - 'Int_t' 0 '6' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_816_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_816_0_3, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sector i - 'Int_t' 0 - module "
"i - 'Int_t' 0 - mbo i - 'Int_t' 0 - dbo "
"i - 'Int_t' 0 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_816_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOraVersion",1352,G__MdcDict_816_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus",964,G__MdcDict_816_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMapNotConnetedChannels",2539,G__MdcDict_816_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOraVersion",1364,G__MdcDict_816_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus",976,G__MdcDict_816_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMapNotConnectedChannels",2650,G__MdcDict_816_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putAsciiHeader",1419,G__MdcDict_816_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__MdcDict_816_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readLineFromFile",1592,G__MdcDict_816_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writeline",979,G__MdcDict_816_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mapOutUnusedChannels",2070,G__MdcDict_816_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParam",1054,G__MdcDict_816_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_816_0_20, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTdcChannel::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_816_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannel::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_816_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTdcChannel::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_816_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTdcChannel::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_816_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_816_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannel::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_816_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcChannel::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_816_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannel::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_816_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcChannel::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTdcChannel", 1328, G__MdcDict_816_0_32, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannel), -1, 0, 1, 1, 1, 0, "u 'HMdcTdcChannel' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTdcChannel", 1454, G__MdcDict_816_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_816_0_34, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannel), -1, 1, 1, 1, 1, 0, "u 'HMdcTdcChannel' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcParRootFileIo(void) {
   /* HMdcParRootFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcParRootFileIo));
   G__memfunc_setup("HMdcParRootFileIo",1627,G__MdcDict_817_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcParRootFileIo), -1, 0, 1, 1, 1, 0, "U 'HParRootFile' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,G__MdcDict_817_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HMdcRawStruct' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__MdcDict_817_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HMdcGeomStruct' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__MdcDict_817_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HMdcCalParRaw' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__MdcDict_817_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HMdcTdcThreshold' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__MdcDict_817_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HMdcTdcChannel' - 0 - pCalPar I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__MdcDict_817_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HMdcCal2ParSim' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__MdcDict_817_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HMdcCellEff' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__MdcDict_817_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HMdcTimeCut' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__MdcDict_817_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HMdcLookupGeom' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__MdcDict_817_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HMdcLayerGeomPar' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_817_0_13, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcParRootFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_817_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcParRootFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_817_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcParRootFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_817_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcParRootFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_817_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_817_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcParRootFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_817_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcParRootFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_817_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcParRootFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_817_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcParRootFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcParRootFileIo", 1627, G__MdcDict_817_0_25, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcParRootFileIo), -1, 0, 1, 1, 1, 0, "u 'HMdcParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcParRootFileIo", 1753, G__MdcDict_817_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_817_0_27, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcParRootFileIo), -1, 1, 1, 1, 1, 0, "u 'HMdcParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcPPEvtFilter(void) {
   /* HMdcPPEvtFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcPPEvtFilter));
   G__memfunc_setup("resetCounters",1398,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetArrays",1173,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openHistFile",1226,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcDictLN_TFile), -1, 0, 1, 1, 4, 0, "C - 'Char_t' 10 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcPPEvtFilter",1425,G__MdcDict_828_0_4, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcPPEvtFilter), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"i - 'Int_t' 0 '0' flagcat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcPPEvtFilter",1425,G__MdcDict_828_0_5, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcPPEvtFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("createHists",1151,G__MdcDict_828_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initVariables",1357,G__MdcDict_828_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThetaCuts",1249,G__MdcDict_828_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - Theta f - 'Float_t' 0 - DTheta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhiCuts",1036,G__MdcDict_828_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - Phi f - 'Float_t' 0 - DPhi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSaveHists",1254,G__MdcDict_828_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSaveCanv",1123,G__MdcDict_828_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSavePSFile",1278,G__MdcDict_828_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrigBit",1025,G__MdcDict_828_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHistFile",1124,G__MdcDict_828_0_18, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - dir C - 'Char_t' 10 - suf "
"C - 'Char_t' 10 '\"NEW\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_828_0_19, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcPPEvtFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_828_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcPPEvtFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_828_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcPPEvtFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_828_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcPPEvtFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_828_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_828_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcPPEvtFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_828_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcPPEvtFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_828_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcPPEvtFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_828_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcPPEvtFilter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcPPEvtFilter", 1551, G__MdcDict_828_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcRawMothStru(void) {
   /* HMdcRawMothStru */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawMothStru));
   G__memfunc_setup("HMdcRawMothStru",1484,G__MdcDict_829_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcRawMothStru), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTdcs",808,G__MdcDict_829_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTdcs",796,G__MdcDict_829_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_829_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_829_0_5, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcRawMothStru::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_829_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawMothStru::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_829_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcRawMothStru::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_829_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcRawMothStru::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_829_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_829_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawMothStru::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_829_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRawMothStru::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_829_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawMothStru::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_829_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRawMothStru::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcRawMothStru", 1484, G__MdcDict_829_0_17, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcRawMothStru), -1, 0, 1, 1, 1, 0, "u 'HMdcRawMothStru' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcRawMothStru", 1610, G__MdcDict_829_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_829_0_19, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcRawMothStru), -1, 1, 1, 1, 1, 0, "u 'HMdcRawMothStru' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcRawModStru(void) {
   /* HMdcRawModStru */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawModStru));
   G__memfunc_setup("HMdcRawModStru",1364,G__MdcDict_830_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcRawModStru), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '16' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_830_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcRawMothStru), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNMotherboards",1656,G__MdcDict_830_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMboIndex",1110,G__MdcDict_830_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - 'Text_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_830_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_830_0_6, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcRawModStru::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_830_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawModStru::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_830_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcRawModStru::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_830_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcRawModStru::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_830_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_830_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawModStru::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_830_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRawModStru::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_830_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawModStru::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_830_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRawModStru::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcRawModStru", 1364, G__MdcDict_830_0_18, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcRawModStru), -1, 0, 1, 1, 1, 0, "u 'HMdcRawModStru' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcRawModStru", 1490, G__MdcDict_830_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_830_0_20, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcRawModStru), -1, 1, 1, 1, 1, 0, "u 'HMdcRawModStru' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcRawSecStru(void) {
   /* HMdcRawSecStru */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcRawSecStru));
   G__memfunc_setup("HMdcRawSecStru",1359,G__MdcDict_831_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcRawSecStru), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '4' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_831_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcRawModStru), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_831_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_831_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcRawSecStru::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_831_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawSecStru::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_831_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcRawSecStru::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_831_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcRawSecStru::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_831_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_831_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawSecStru::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_831_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRawSecStru::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_831_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcRawSecStru::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_831_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcRawSecStru::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcRawSecStru", 1359, G__MdcDict_831_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcRawSecStru), -1, 0, 1, 1, 1, 0, "u 'HMdcRawSecStru' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcRawSecStru", 1485, G__MdcDict_831_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_831_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcRawSecStru), -1, 1, 1, 1, 1, 0, "u 'HMdcRawSecStru' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcSetup(void) {
   /* HMdcSetup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup));
   G__memfunc_setup("HMdcSetup",877,G__MdcDict_832_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcSetup\"' name C - 'Char_t' 10 '\"parameters for MdcTaskSet\"' title "
"C - 'Char_t' 10 '\"MdcSetupProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcDigitizerSet",1835,G__MdcDict_832_0_2, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizerSetup), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcCalibrater1Set",1962,G__MdcDict_832_0_3, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1Setup), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcTrackFinderSet",1997,G__MdcDict_832_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcTrackFinderSetup), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcClusterToHitSet",2122,G__MdcDict_832_0_5, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcClusterToHitSetup), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdc12FitSet",1286,G__MdcDict_832_0_6, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdc12FitSetup), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcCommonSet",1513,G__MdcDict_832_0_7, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcCommonSetup), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("check",510,G__MdcDict_832_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParam",1054,G__MdcDict_832_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copySet",743,G__MdcDict_832_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcSetup' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isEqual",724,G__MdcDict_832_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcSetup' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_832_0_15, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcSetup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_832_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSetup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_832_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcSetup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_832_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcSetup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_832_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_832_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSetup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_832_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSetup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_832_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSetup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_832_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSetup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcSetup", 877, G__MdcDict_832_0_27, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup), -1, 0, 1, 1, 1, 0, "u 'HMdcSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcSetup", 1003, G__MdcDict_832_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_832_0_29, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup), -1, 1, 1, 1, 1, 0, "u 'HMdcSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcDigitizerSetup(void) {
   /* HMdcDigitizerSetup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizerSetup));
   G__memfunc_setup("HMdcDigitizerSetup",1816,G__MdcDict_833_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizerSetup), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' name C - 'Char_t' 10 '\"\"' title "
"U 'HMdcSetup' - 0 '0' set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdcModeDigi",1385,G__MdcDict_833_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNtupleDigi",1345,G__MdcDict_833_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - ntuple", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseTofDigi",1311,G__MdcDict_833_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - tof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseErrorDigi",1536,G__MdcDict_833_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseWireOffsetDigi",2036,G__MdcDict_833_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - off", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseWireStatDigi",1833,G__MdcDict_833_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - stat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseTimeCutsDigi",1828,G__MdcDict_833_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - stat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEmbeddingModeDigi",1997,G__MdcDict_833_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoiseModeDigi",1612,G__MdcDict_833_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - noise", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoiseOffDigi",1506,G__MdcDict_833_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - noiseoff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffsetsOffDigi",1726,G__MdcDict_833_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - offsetsoff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellEffOffDigi",1653,G__MdcDict_833_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - effoff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoiseLevelDigi",1727,G__MdcDict_833_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - l0 f - 'Float_t' 0 - l1 "
"f - 'Float_t' 0 - l2 f - 'Float_t' 0 - l3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffsetsDigi",1443,G__MdcDict_833_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - o0 f - 'Float_t' 0 - o1 "
"f - 'Float_t' 0 - o2 f - 'Float_t' 0 - o3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellEffDigi",1370,G__MdcDict_833_0_16, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - e0 f - 'Float_t' 0 - e1 "
"f - 'Float_t' 0 - e2 f - 'Float_t' 0 - e3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoiseRangeDigi",1716,G__MdcDict_833_0_17, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - rLo0 i - 'Int_t' 0 - rLo1 "
"i - 'Int_t' 0 - rLo2 i - 'Int_t' 0 - rLo3 "
"i - 'Int_t' 0 - rHi0 i - 'Int_t' 0 - rHi1 "
"i - 'Int_t' 0 - rHi2 i - 'Int_t' 0 - rHi3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdcModeDigi",1373,G__MdcDict_833_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNtupleDigi",1333,G__MdcDict_833_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUseTofDigi",1299,G__MdcDict_833_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUseErrorDigi",1524,G__MdcDict_833_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUseWireOffsetDigi",2024,G__MdcDict_833_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUseWireStatDigi",1821,G__MdcDict_833_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUseTimeCutsDigi",1816,G__MdcDict_833_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEmbeddingModeDigi",1985,G__MdcDict_833_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseModeDigi",1600,G__MdcDict_833_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseOffDigi",1494,G__MdcDict_833_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffsetsOffDigi",1714,G__MdcDict_833_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellEffOffDigi",1641,G__MdcDict_833_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseLevelDigi",1715,G__MdcDict_833_0_30, 121, -1, -1, 0, 4, 1, 1, 0, 
"F - 'Float_t' 0 - l0 F - 'Float_t' 0 - l1 "
"F - 'Float_t' 0 - l2 F - 'Float_t' 0 - l3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseLevelDigi",1715,G__MdcDict_833_0_31, 117, G__get_linked_tagnum(&G__MdcDictLN_TArrayF), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffsetsDigi",1431,G__MdcDict_833_0_32, 121, -1, -1, 0, 4, 1, 1, 0, 
"F - 'Float_t' 0 - o0 F - 'Float_t' 0 - o1 "
"F - 'Float_t' 0 - o2 F - 'Float_t' 0 - o3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffsetsDigi",1431,G__MdcDict_833_0_33, 117, G__get_linked_tagnum(&G__MdcDictLN_TArrayF), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellEffDigi",1358,G__MdcDict_833_0_34, 121, -1, -1, 0, 4, 1, 1, 0, 
"F - 'Float_t' 0 - e0 F - 'Float_t' 0 - e1 "
"F - 'Float_t' 0 - e2 F - 'Float_t' 0 - e3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellEffDigi",1358,G__MdcDict_833_0_35, 117, G__get_linked_tagnum(&G__MdcDictLN_TArrayF), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseRangeDigi",1704,G__MdcDict_833_0_36, 121, -1, -1, 0, 8, 1, 1, 0, 
"I - 'Int_t' 0 - rLo0 I - 'Int_t' 0 - rLo1 "
"I - 'Int_t' 0 - rLo2 I - 'Int_t' 0 - rLo3 "
"I - 'Int_t' 0 - rHi0 I - 'Int_t' 0 - rHi1 "
"I - 'Int_t' 0 - rHi2 I - 'Int_t' 0 - rHi3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseRangeLoDigi",1891,G__MdcDict_833_0_37, 117, G__get_linked_tagnum(&G__MdcDictLN_TArrayI), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseRangeHiDigi",1881,G__MdcDict_833_0_38, 117, G__get_linked_tagnum(&G__MdcDictLN_TArrayI), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_833_0_39, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check",510,G__MdcDict_833_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParam",1054,G__MdcDict_833_0_41, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParams",932,G__MdcDict_833_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,G__MdcDict_833_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setupMdcDigitizer",1776,G__MdcDict_833_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcDigitizer' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copySet",743,G__MdcDict_833_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcDigitizerSetup' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isEqual",724,G__MdcDict_833_0_46, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcDigitizerSetup' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_833_0_47, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcDigitizerSetup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_833_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDigitizerSetup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_833_0_49, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcDigitizerSetup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_833_0_50, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcDigitizerSetup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_833_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_833_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDigitizerSetup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_833_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDigitizerSetup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_833_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDigitizerSetup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_833_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDigitizerSetup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcDigitizerSetup", 1816, G__MdcDict_833_0_59, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizerSetup), -1, 0, 1, 1, 1, 0, "u 'HMdcDigitizerSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcDigitizerSetup", 1942, G__MdcDict_833_0_60, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_833_0_61, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizerSetup), -1, 1, 1, 1, 1, 0, "u 'HMdcDigitizerSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCalibrater1Setup(void) {
   /* HMdcCalibrater1Setup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1Setup));
   G__memfunc_setup("HMdcCalibrater1Setup",1943,G__MdcDict_834_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1Setup), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' name C - 'Char_t' 10 '\"\"' title "
"U 'HMdcSetup' - 0 '0' set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModeFlagCal1",1420,G__MdcDict_834_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeCutFlagCal1",1730,G__MdcDict_834_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcCalibrater1Set",1974,G__MdcDict_834_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - flag i - 'Int_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModeFlagCal1",1408,G__MdcDict_834_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeCutFlagCal1",1718,G__MdcDict_834_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcCalibrater1Set",1962,G__MdcDict_834_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'Int_t' 0 - mode I - 'Int_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_834_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check",510,G__MdcDict_834_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParam",1054,G__MdcDict_834_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParams",932,G__MdcDict_834_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,G__MdcDict_834_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setupMdcCalibrater1",1903,G__MdcDict_834_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcCalibrater1' - 0 - - i - 'Int_t' 0 '0' merge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copySet",743,G__MdcDict_834_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcCalibrater1Setup' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isEqual",724,G__MdcDict_834_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcCalibrater1Setup' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_834_0_16, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCalibrater1Setup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_834_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalibrater1Setup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_834_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCalibrater1Setup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_834_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCalibrater1Setup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_834_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_834_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalibrater1Setup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_834_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCalibrater1Setup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_834_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCalibrater1Setup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_834_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCalibrater1Setup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCalibrater1Setup", 1943, G__MdcDict_834_0_28, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1Setup), -1, 0, 1, 1, 1, 0, "u 'HMdcCalibrater1Setup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCalibrater1Setup", 2069, G__MdcDict_834_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_834_0_30, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1Setup), -1, 1, 1, 1, 1, 0, "u 'HMdcCalibrater1Setup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackFinderSetup(void) {
   /* HMdcTrackFinderSetup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrackFinderSetup));
   G__memfunc_setup("HMdcTrackFinderSetup",1978,G__MdcDict_835_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTrackFinderSetup), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' name C - 'Char_t' 10 '\"\"' title "
"U 'HMdcSetup' - 0 '0' set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsCoilOff",1194,G__MdcDict_835_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - field", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTypeClustFinder",1873,G__MdcDict_835_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsCoilOff",1182,G__MdcDict_835_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNLayers",1034,G__MdcDict_835_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - myLayers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNLevel",914,G__MdcDict_835_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - L", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcTrackFinderSet",2009,G__MdcDict_835_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"g - 'Bool_t' 0 - field i - 'Int_t' 0 - type "
"I - 'Int_t' 0 - myLayers I - 'Int_t' 0 - L", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTypeClustFinder",1861,G__MdcDict_835_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayers",1022,G__MdcDict_835_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - myLayers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLevel",902,G__MdcDict_835_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - L", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcTrackfinderSet",2029,G__MdcDict_835_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"G - 'Bool_t' 0 - field I - 'Int_t' 0 - type "
"I - 'Int_t' 0 - nlay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_835_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check",510,G__MdcDict_835_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParam",1054,G__MdcDict_835_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParams",932,G__MdcDict_835_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,G__MdcDict_835_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setupMdcTrackFinder",1938,G__MdcDict_835_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copySet",743,G__MdcDict_835_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcTrackFinderSetup' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isEqual",724,G__MdcDict_835_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcTrackFinderSetup' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_835_0_20, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackFinderSetup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_835_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFinderSetup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_835_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackFinderSetup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_835_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackFinderSetup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_835_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_835_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFinderSetup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_835_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackFinderSetup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_835_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackFinderSetup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_835_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackFinderSetup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackFinderSetup", 1978, G__MdcDict_835_0_32, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTrackFinderSetup), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackFinderSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackFinderSetup", 2104, G__MdcDict_835_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_835_0_34, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTrackFinderSetup), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackFinderSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcClusterToHitSetup(void) {
   /* HMdcClusterToHitSetup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcClusterToHitSetup));
   G__memfunc_setup("HMdcClusterToHitSetup",2103,G__MdcDict_836_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcClusterToHitSetup), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' name C - 'Char_t' 10 '\"\"' title "
"U 'HMdcSetup' - 0 '0' set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcForSeg1",1239,G__MdcDict_836_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mdcseg1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcForSeg2",1240,G__MdcDict_836_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mdcseg2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcClusterToHitSet",2134,G__MdcDict_836_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - mdcseg1 i - 'Int_t' 0 - mdcseg2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcForSeg1",1227,G__MdcDict_836_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcForSeg2",1228,G__MdcDict_836_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcClusterToHitSet",2122,G__MdcDict_836_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'Int_t' 0 - mdcseg1 I - 'Int_t' 0 - mdcseg2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_836_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check",510,G__MdcDict_836_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParam",1054,G__MdcDict_836_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParams",932,G__MdcDict_836_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,G__MdcDict_836_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setupMdcClusterToHit",2063,G__MdcDict_836_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copySet",743,G__MdcDict_836_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcClusterToHitSetup' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isEqual",724,G__MdcDict_836_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcClusterToHitSetup' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_836_0_16, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcClusterToHitSetup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_836_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusterToHitSetup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_836_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcClusterToHitSetup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_836_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcClusterToHitSetup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_836_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_836_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusterToHitSetup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_836_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusterToHitSetup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_836_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcClusterToHitSetup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_836_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcClusterToHitSetup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcClusterToHitSetup", 2103, G__MdcDict_836_0_28, (int) ('i'), 
G__get_linked_tagnum(&G__MdcDictLN_HMdcClusterToHitSetup), -1, 0, 1, 1, 1, 0, "u 'HMdcClusterToHitSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcClusterToHitSetup", 2229, G__MdcDict_836_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_836_0_30, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcClusterToHitSetup), -1, 1, 1, 1, 1, 0, "u 'HMdcClusterToHitSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdc12FitSetup(void) {
   /* HMdc12FitSetup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdc12FitSetup));
   G__memfunc_setup("HMdc12FitSetup",1267,G__MdcDict_837_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdc12FitSetup), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' name C - 'Char_t' 10 '\"\"' title "
"U 'HMdcSetup' - 0 '0' set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitAuthor",1250,G__MdcDict_837_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - author", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitVersion",1365,G__MdcDict_837_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - vers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitIndep",1119,G__MdcDict_837_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - indep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitNTuple",1223,G__MdcDict_837_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - tuple", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitPrint",1148,G__MdcDict_837_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdc12FitSet",1298,G__MdcDict_837_0_7, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - author i - 'Int_t' 0 - vers "
"i - 'Int_t' 0 - indep g - 'Bool_t' 0 - tuple "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitAuthor",1238,G__MdcDict_837_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitVersion",1353,G__MdcDict_837_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitIndep",1107,G__MdcDict_837_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitNTuple",1211,G__MdcDict_837_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitPrint",1136,G__MdcDict_837_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdc12FitSet",1286,G__MdcDict_837_0_13, 121, -1, -1, 0, 5, 1, 1, 0, 
"I - 'Int_t' 0 - author I - 'Int_t' 0 - vers "
"I - 'Int_t' 0 - indep G - 'Bool_t' 0 - tuple "
"G - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_837_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check",510,G__MdcDict_837_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParam",1054,G__MdcDict_837_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParams",932,G__MdcDict_837_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,G__MdcDict_837_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setupMdc12Fit",1227,G__MdcDict_837_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copySet",743,G__MdcDict_837_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdc12FitSetup' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isEqual",724,G__MdcDict_837_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdc12FitSetup' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_837_0_22, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdc12FitSetup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_837_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc12FitSetup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_837_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdc12FitSetup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_837_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdc12FitSetup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_837_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_837_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc12FitSetup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_837_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdc12FitSetup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_837_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdc12FitSetup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_837_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdc12FitSetup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdc12FitSetup", 1267, G__MdcDict_837_0_34, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdc12FitSetup), -1, 0, 1, 1, 1, 0, "u 'HMdc12FitSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdc12FitSetup", 1393, G__MdcDict_837_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_837_0_36, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdc12FitSetup), -1, 1, 1, 1, 1, 0, "u 'HMdc12FitSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCommonSetup(void) {
   /* HMdcCommonSetup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcCommonSetup));
   G__memfunc_setup("HMdcCommonSetup",1494,G__MdcDict_838_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcCommonSetup), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' name C - 'Char_t' 10 '\"\"' title "
"U 'HMdcSetup' - 0 '0' set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsSimulation",1581,G__MdcDict_838_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAnalysisLevel",1672,G__MdcDict_838_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTracker",1048,G__MdcDict_838_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcCommonSet",1525,G__MdcDict_838_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sim i - 'Int_t' 0 - level "
"i - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsSimulation",1569,G__MdcDict_838_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAnalysisLevel",1660,G__MdcDict_838_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTracker",1036,G__MdcDict_838_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcCommonSet",1513,G__MdcDict_838_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"I - 'Int_t' 0 - sim I - 'Int_t' 0 - level "
"I - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_838_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check",510,G__MdcDict_838_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParam",1054,G__MdcDict_838_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParams",932,G__MdcDict_838_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,G__MdcDict_838_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copySet",743,G__MdcDict_838_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcCommonSetup' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isEqual",724,G__MdcDict_838_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HMdcCommonSetup' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_838_0_17, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCommonSetup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_838_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCommonSetup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_838_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCommonSetup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_838_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCommonSetup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_838_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_838_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCommonSetup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_838_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCommonSetup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_838_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCommonSetup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_838_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCommonSetup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcCommonSetup", 1494, G__MdcDict_838_0_29, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCommonSetup), -1, 0, 1, 1, 1, 0, "u 'HMdcCommonSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCommonSetup", 1620, G__MdcDict_838_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_838_0_31, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcCommonSetup), -1, 1, 1, 1, 1, 0, "u 'HMdcCommonSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcVertexFind(void) {
   /* HMdcVertexFind */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFind));
   G__memfunc_setup("HMdcVertexFind",1371,G__MdcDict_843_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFind), -1, 0, 4, 1, 1, 0, 
"C - 'Text_t' 10 '\"\"' name C - 'Text_t' 10 '\"\"' title "
"i 'HMdcVertexFind::EInputMode' - 0 'kSegments' m g - 'Bool_t' 0 'kTRUE' tukey", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setCut",632,G__MdcDict_843_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 '-100' minz d - 'Double_t' 0 '50' maxz "
"d - 'Double_t' 0 '50' maxr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useTukeyWeights",1594,G__MdcDict_843_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebugMode",1208,G__MdcDict_843_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTukeyConstant",1704,G__MdcDict_843_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxIterations",1684,G__MdcDict_843_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEpsilon",1062,G__MdcDict_843_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSeg0Chi2Cut",1293,G__MdcDict_843_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinReqTracks",1536,G__MdcDict_843_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinWindow",1256,G__MdcDict_843_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - wind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setProgessiveTukey",1925,G__MdcDict_843_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - prog", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCallExecuteManual",2041,G__MdcDict_843_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - call", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInputMode",1237,G__MdcDict_843_0_16, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFindcLcLEInputMode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTukeyConstant",1692,G__MdcDict_843_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxIterations",1672,G__MdcDict_843_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEpsilon",1050,G__MdcDict_843_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSeg0Chi2Cut",1281,G__MdcDict_843_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinReqTracks",1524,G__MdcDict_843_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinWindow",1244,G__MdcDict_843_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getProgessiveTukey",1913,G__MdcDict_843_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doFit",502,G__MdcDict_843_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRejectEmbeddedTracks",2331,G__MdcDict_843_0_25, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' reject", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcVertexFind::setRejectEmbeddedTracks) ), 0);
   G__memfunc_setup("setUseEventSeqNumber",2061,G__MdcDict_843_0_26, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' use", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcVertexFind::setUseEventSeqNumber) ), 0);
   G__memfunc_setup("setSkipNoVertex",1566,G__MdcDict_843_0_27, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' skip", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcVertexFind::setSkipNoVertex) ), 0);
   G__memfunc_setup("setSkipFakeSegments",1952,G__MdcDict_843_0_28, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' skip", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcVertexFind::setSkipFakeSegments) ), 0);
   G__memfunc_setup("initVars",848,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pointsToTarget",1479,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 2, 0, 
"u 'HGeomVector' - 11 - r u 'HGeomVector' - 1 - alpha "
"i - 'Int_t' 0 - sector i - 'Int_t' 0 - module "
"d - 'Double_t' 0 - zmin d - 'Double_t' 0 - zmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readSegments",1250,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "u 'HGeomVector' - 1 - estimate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readHits",820,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "u 'HGeomVector' - 1 - estimate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"U 'HMdcSeg' - 0 - data u 'HGeomVector' - 1 - r "
"u 'HGeomVector' - 1 - alpha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasConverged",1241,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"u 'HGeomVector' - 1 - v u 'HGeomVector' - 1 - oldV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_843_0_35, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcVertexFind::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_843_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcVertexFind::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_843_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcVertexFind::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_843_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcVertexFind::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_843_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_843_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcVertexFind::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_843_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcVertexFind::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_843_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcVertexFind::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_843_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcVertexFind::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcVertexFind", 1497, G__MdcDict_843_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTaskSet(void) {
   /* HMdcTaskSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTaskSet));
   G__memfunc_setup("getSetupContainer",1780,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copySetup",972,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSets",735,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefaults",1156,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("parseArguments",1489,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTaskSet",1051,G__MdcDict_844_0_6, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTaskSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTaskSet",1051,G__MdcDict_844_0_7, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTaskSet), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("make",414,G__MdcDict_844_0_8, 85, G__get_linked_tagnum(&G__MdcDictLN_HTask), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' select C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDigitizer",1259,G__MdcDict_844_0_9, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcDigitizer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCalibrater1",1386,G__MdcDict_844_0_10, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcCalibrater1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDeDx2Maker",1223,G__MdcDict_844_0_11, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcDeDx2Maker), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcSetup",1125,G__MdcDict_844_0_12, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcSetup), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcVertexFinder",1834,G__MdcDict_844_0_13, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexFind), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVersionDeDx",1431,G__MdcDict_844_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - vers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printStatus",1201,G__MdcDict_844_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printOptions",1305,G__MdcDict_844_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useIdealTracking",1631,G__MdcDict_844_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' fillPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_844_0_18, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTaskSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_844_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTaskSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_844_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTaskSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_844_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTaskSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_844_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_844_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTaskSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_844_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTaskSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_844_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTaskSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_844_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTaskSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTaskSet", 1177, G__MdcDict_844_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTdcChannelTdc(void) {
   /* HMdcTdcChannelTdc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelTdc));
   G__memfunc_setup("HMdcTdcChannelTdc",1611,G__MdcDict_845_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelTdc), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannelMask",1413,G__MdcDict_845_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_845_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - mask i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_845_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTdcChannelTdc' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChannelMask",1425,G__MdcDict_845_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - mask i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_845_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_845_0_7, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTdcChannelTdc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_845_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannelTdc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_845_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTdcChannelTdc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_845_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTdcChannelTdc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_845_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_845_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannelTdc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_845_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcChannelTdc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_845_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannelTdc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_845_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcChannelTdc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTdcChannelTdc", 1611, G__MdcDict_845_0_19, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelTdc), -1, 0, 1, 1, 1, 0, "u 'HMdcTdcChannelTdc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTdcChannelTdc", 1737, G__MdcDict_845_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_845_0_21, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelTdc), -1, 1, 1, 1, 1, 0, "u 'HMdcTdcChannelTdc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTdcChannelMbo(void) {
   /* HMdcTdcChannelMbo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMbo));
   G__memfunc_setup("HMdcTdcChannelMbo",1614,G__MdcDict_846_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMbo), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '12' tdc C - 'Text_t' 10 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_846_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelTdc), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_846_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_846_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTdcChannelMbo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_846_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannelMbo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_846_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTdcChannelMbo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_846_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTdcChannelMbo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_846_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_846_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannelMbo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_846_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcChannelMbo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_846_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannelMbo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_846_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcChannelMbo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTdcChannelMbo", 1614, G__MdcDict_846_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMbo), -1, 0, 1, 1, 1, 0, "u 'HMdcTdcChannelMbo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTdcChannelMbo", 1740, G__MdcDict_846_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_846_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMbo), -1, 1, 1, 1, 1, 0, "u 'HMdcTdcChannelMbo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTdcChannelMod(void) {
   /* HMdcTdcChannelMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMod));
   G__memfunc_setup("HMdcTdcChannelMod",1616,G__MdcDict_847_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMod), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '16' mbo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_847_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMbo), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_847_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createMbo",914,G__MdcDict_847_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_847_0_5, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTdcChannelMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_847_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannelMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_847_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTdcChannelMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_847_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTdcChannelMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_847_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_847_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannelMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_847_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcChannelMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_847_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannelMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_847_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcChannelMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTdcChannelMod", 1616, G__MdcDict_847_0_17, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMod), -1, 0, 1, 1, 1, 0, "u 'HMdcTdcChannelMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTdcChannelMod", 1742, G__MdcDict_847_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_847_0_19, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMod), -1, 1, 1, 1, 1, 0, "u 'HMdcTdcChannelMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTdcChannelSec(void) {
   /* HMdcTdcChannelSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelSec));
   G__memfunc_setup("HMdcTdcChannelSec",1611,G__MdcDict_848_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelSec), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '4' mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_848_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_848_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_848_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTdcChannelSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_848_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannelSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_848_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTdcChannelSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_848_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTdcChannelSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_848_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_848_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannelSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_848_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcChannelSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_848_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcChannelSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_848_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcChannelSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTdcChannelSec", 1611, G__MdcDict_848_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelSec), -1, 0, 1, 1, 1, 0, "u 'HMdcTdcChannelSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTdcChannelSec", 1737, G__MdcDict_848_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_848_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcChannelSec), -1, 1, 1, 1, 1, 0, "u 'HMdcTdcChannelSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTdcThresholdDbo(void) {
   /* HMdcTdcThresholdDbo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdDbo));
   G__memfunc_setup("HMdcTdcThresholdDbo",1849,G__MdcDict_849_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdDbo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThreshold",1261,G__MdcDict_849_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThreshold",1273,G__MdcDict_849_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - thresh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_849_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTdcThresholdDbo' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_849_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_849_0_6, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTdcThresholdDbo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_849_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThresholdDbo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_849_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTdcThresholdDbo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_849_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTdcThresholdDbo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_849_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_849_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThresholdDbo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_849_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcThresholdDbo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_849_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThresholdDbo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_849_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcThresholdDbo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTdcThresholdDbo", 1849, G__MdcDict_849_0_18, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdDbo), -1, 0, 1, 1, 1, 0, "u 'HMdcTdcThresholdDbo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTdcThresholdDbo", 1975, G__MdcDict_849_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_849_0_20, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdDbo), -1, 1, 1, 1, 1, 0, "u 'HMdcTdcThresholdDbo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTdcThresholdMbo(void) {
   /* HMdcTdcThresholdMbo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMbo));
   G__memfunc_setup("HMdcTdcThresholdMbo",1858,G__MdcDict_850_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMbo), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '6' dbo C - 'Text_t' 10 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_850_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdDbo), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_850_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_850_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTdcThresholdMbo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_850_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThresholdMbo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_850_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTdcThresholdMbo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_850_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTdcThresholdMbo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_850_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_850_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThresholdMbo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_850_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcThresholdMbo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_850_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThresholdMbo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_850_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcThresholdMbo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTdcThresholdMbo", 1858, G__MdcDict_850_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMbo), -1, 0, 1, 1, 1, 0, "u 'HMdcTdcThresholdMbo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTdcThresholdMbo", 1984, G__MdcDict_850_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_850_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMbo), -1, 1, 1, 1, 1, 0, "u 'HMdcTdcThresholdMbo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTdcThresholdMod(void) {
   /* HMdcTdcThresholdMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMod));
   G__memfunc_setup("HMdcTdcThresholdMod",1860,G__MdcDict_851_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMod), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '16' mbo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_851_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMbo), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_851_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createMbo",914,G__MdcDict_851_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_851_0_5, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTdcThresholdMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_851_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThresholdMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_851_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTdcThresholdMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_851_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTdcThresholdMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_851_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_851_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThresholdMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_851_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcThresholdMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_851_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThresholdMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_851_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcThresholdMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTdcThresholdMod", 1860, G__MdcDict_851_0_17, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMod), -1, 0, 1, 1, 1, 0, "u 'HMdcTdcThresholdMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTdcThresholdMod", 1986, G__MdcDict_851_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_851_0_19, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMod), -1, 1, 1, 1, 1, 0, "u 'HMdcTdcThresholdMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTdcThresholdSec(void) {
   /* HMdcTdcThresholdSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdSec));
   G__memfunc_setup("HMdcTdcThresholdSec",1855,G__MdcDict_852_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdSec), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '4' mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_852_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_852_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_852_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTdcThresholdSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_852_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThresholdSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_852_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTdcThresholdSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_852_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTdcThresholdSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_852_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_852_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThresholdSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_852_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcThresholdSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_852_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTdcThresholdSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_852_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTdcThresholdSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTdcThresholdSec", 1855, G__MdcDict_852_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdSec), -1, 0, 1, 1, 1, 0, "u 'HMdcTdcThresholdSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTdcThresholdSec", 1981, G__MdcDict_852_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_852_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTdcThresholdSec), -1, 1, 1, 1, 1, 0, "u 'HMdcTdcThresholdSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTimeCutMod(void) {
   /* HMdcTimeCutMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutMod));
   G__memfunc_setup("HMdcTimeCutMod",1335,G__MdcDict_853_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutMod), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTimeCutMod",1335,G__MdcDict_853_0_2, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutMod), -1, 0, 1, 1, 1, 0, "u 'HMdcTimeCutMod' - 1 - tc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutTime1",1080,G__MdcDict_853_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - left f - 'Float_t' 0 - right", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutTime2",1081,G__MdcDict_853_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - left f - 'Float_t' 0 - right", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutTime",1031,G__MdcDict_853_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - left f - 'Float_t' 0 - right", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutBumpTime1",1484,G__MdcDict_853_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - left f - 'Float_t' 0 - right", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutBumpTot",1347,G__MdcDict_853_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - left f - 'Float_t' 0 - right", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutTime1Left",1463,G__MdcDict_853_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutTime1Right",1578,G__MdcDict_853_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutTime2Left",1464,G__MdcDict_853_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutTime2Right",1579,G__MdcDict_853_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutTimeLeft",1414,G__MdcDict_853_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutTimeRight",1529,G__MdcDict_853_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutBumpTime1Left",1867,G__MdcDict_853_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutBumpTime1Right",1982,G__MdcDict_853_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutBumpTotLeft",1730,G__MdcDict_853_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutBumpTotRight",1845,G__MdcDict_853_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_853_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HMdcTimeCutMod' - 1 - tc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__MdcDict_853_0_19, 121, -1, -1, 0, 10, 1, 1, 0, 
"f - 'Float_t' 0 - cT1L f - 'Float_t' 0 - cT1R "
"f - 'Float_t' 0 - cT2L f - 'Float_t' 0 - cT2R "
"f - 'Float_t' 0 - cLeft f - 'Float_t' 0 - cRight "
"f - 'Float_t' 0 - cBumpT1L f - 'Float_t' 0 - cBumpT1R "
"f - 'Float_t' 0 - cBumpTotL f - 'Float_t' 0 - cBumpTotR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cutTime1",780,G__MdcDict_853_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - time1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cutTime2",781,G__MdcDict_853_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - time2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cutTimesDif",1121,G__MdcDict_853_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cutComStop",1041,G__MdcDict_853_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - time1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cutBump",736,G__MdcDict_853_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - time1 f - 'Float_t' 0 - tot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcDict_853_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcDict_853_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_853_0_27, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTimeCutMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_853_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTimeCutMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_853_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTimeCutMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_853_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTimeCutMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_853_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_853_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTimeCutMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_853_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTimeCutMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_853_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTimeCutMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_853_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTimeCutMod::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTimeCutMod", 1461, G__MdcDict_853_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_853_0_40, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutMod), -1, 1, 1, 1, 1, 0, "u 'HMdcTimeCutMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTimeCutSec(void) {
   /* HMdcTimeCutSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutSec));
   G__memfunc_setup("HMdcTimeCutSec",1330,G__MdcDict_854_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutSec), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '4' mods", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MdcDict_854_0_2, 117, G__get_linked_tagnum(&G__MdcDictLN_HMdcTimeCutMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_854_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_854_0_4, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTimeCutSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_854_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTimeCutSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_854_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTimeCutSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_854_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTimeCutSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_854_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_854_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTimeCutSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_854_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTimeCutSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_854_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTimeCutSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_854_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTimeCutSec::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTimeCutSec", 1456, G__MdcDict_854_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrk(void) {
   /* HMdcTrk */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcTrk));
   G__memfunc_setup("HMdcTrk",653,G__MdcDict_855_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcTrk), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ",422,G__MdcDict_855_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - az f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setR",414,G__MdcDict_855_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - ar f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setP",412,G__MdcDict_855_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - ap f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__MdcDict_855_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - atheta f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__MdcDict_855_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - aphi f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCharge",918,G__MdcDict_855_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChi2",658,G__MdcDict_855_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - chi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlag",710,G__MdcDict_855_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__MdcDict_855_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aSector", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSegmentIndex",1559,G__MdcDict_855_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - index i - 'Int_t' 0 - segment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readFromSegment",1539,G__MdcDict_855_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcSeg' - 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ",410,G__MdcDict_855_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrZ",707,G__MdcDict_855_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getR",402,G__MdcDict_855_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrR",699,G__MdcDict_855_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getP",400,G__MdcDict_855_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrP",697,G__MdcDict_855_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__MdcDict_855_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrTheta",1119,G__MdcDict_855_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__MdcDict_855_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrPhi",906,G__MdcDict_855_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__MdcDict_855_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2",646,G__MdcDict_855_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcDict_855_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSegmentIndex",1547,G__MdcDict_855_0_26, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - segment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_855_0_27, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrk::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_855_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrk::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_855_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrk::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_855_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrk::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_855_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_855_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrk::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_855_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrk::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_855_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrk::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_855_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrk::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrk", 653, G__MdcDict_855_0_39, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTrk), -1, 0, 1, 1, 1, 0, "u 'HMdcTrk' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrk", 779, G__MdcDict_855_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_855_0_41, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcTrk), -1, 1, 1, 1, 1, 0, "u 'HMdcTrk' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcVertexWriter(void) {
   /* HMdcVertexWriter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexWriter));
   G__memfunc_setup("HMdcVertexWriter",1623,G__MdcDict_886_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexWriter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcVertexWriter",1623,G__MdcDict_886_0_2, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcVertexWriter), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setSkipNoVertex",1566,G__MdcDict_886_0_6, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' skip", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HMdcVertexWriter::setSkipNoVertex) ), 0);
   G__memfunc_setup("setVertexType",1388,G__MdcDict_886_0_7, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - type", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HMdcVertexWriter::setVertexType) ), 0);
   G__memfunc_setup("setOutputDir",1276,G__MdcDict_886_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutputFile",1373,G__MdcDict_886_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUserEventSelection",2195,G__MdcDict_886_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"1 - 'Bool_t (*)(TObjArray*)' 0 - function U 'TObjArray' - 0 '0' params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_886_0_11, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcVertexWriter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_886_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcVertexWriter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_886_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcVertexWriter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_886_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcVertexWriter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_886_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_886_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcVertexWriter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_886_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcVertexWriter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_886_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcVertexWriter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_886_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcVertexWriter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcVertexWriter", 1749, G__MdcDict_886_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcUnpackerPar(void) {
   /* HMdcUnpackerPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpackerPar));
   G__memfunc_setup("HMdcUnpackerPar",1464,G__MdcDict_887_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpackerPar), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"MdcUnpackerPar\"' name C - - 10 '\"Mdc unpacker lookuptable for data recovery\"' title "
"C - - 10 '\"MdcUnpackerParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDecodeVersion",1642,G__MdcDict_887_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTdcMode",992,G__MdcDict_887_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDoAddrCorr",1284,G__MdcDict_887_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMapUnusedChannels",2046,G__MdcDict_887_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDecodeVersion",1654,G__MdcDict_887_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdcMode",1004,G__MdcDict_887_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoAddrCorr",1296,G__MdcDict_887_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMapUnusedChannels",2058,G__MdcDict_887_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - inp I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_887_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setParamContext",1570,G__MdcDict_887_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcDict_887_0_16, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcUnpackerPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_887_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcUnpackerPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_887_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcUnpackerPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_887_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcUnpackerPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_887_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_887_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcUnpackerPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_887_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcUnpackerPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_887_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcUnpackerPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_887_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcUnpackerPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcUnpackerPar", 1464, G__MdcDict_887_0_28, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpackerPar), -1, 0, 1, 1, 1, 0, "u 'HMdcUnpackerPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcUnpackerPar", 1590, G__MdcDict_887_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_887_0_30, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpackerPar), -1, 1, 1, 1, 1, 0, "u 'HMdcUnpackerPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcDataword(void) {
   /* HMdcDataword */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcDataword));
   G__memfunc_setup("HMdcDataword",1170,G__MdcDict_891_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcDataword), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - comment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcDataword",1170,G__MdcDict_891_0_2, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcDataword), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkConsistency",1680,G__MdcDict_891_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 '0' version h - 'UInt_t' 0 '0' data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearData",897,G__MdcDict_891_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearAll",800,G__MdcDict_891_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearAddress",1229,G__MdcDict_891_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearHeader",1104,G__MdcDict_891_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decode",612,G__MdcDict_891_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 10 - data g - 'Bool_t' 0 'kFALSE' consistencyCheck", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dump",438,G__MdcDict_891_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDecodeType",1318,G__MdcDict_891_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventNumber",1451,G__MdcDict_891_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTriggerType",1462,G__MdcDict_891_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrorFlag",1220,G__MdcDict_891_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__MdcDict_891_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcDict_891_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEventSize",1543,G__MdcDict_891_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__MdcDict_891_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMboAddress",1316,G__MdcDict_891_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdcNumber",1220,G__MdcDict_891_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannel",1017,G__MdcDict_891_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHit",613,G__MdcDict_891_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__MdcDict_891_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime1",768,G__MdcDict_891_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatusCode",1343,G__MdcDict_891_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatusData",1342,G__MdcDict_891_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCodedDataword",1621,G__MdcDict_891_0_26, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcDict_891_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__MdcDict_891_0_28, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - mb i - 'Int_t' 0 - t "
"i - 'Int_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEventNumber",1463,G__MdcDict_891_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTriggerType",1474,G__MdcDict_891_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setErrorFlag",1232,G__MdcDict_891_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSubEventSize",1555,G__MdcDict_891_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__MdcDict_891_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - addr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMboAddress",1328,G__MdcDict_891_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdcNumber",1232,G__MdcDict_891_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChannel",1029,G__MdcDict_891_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHit",625,G__MdcDict_891_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__MdcDict_891_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime1",780,G__MdcDict_891_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQuietMode",1241,G__MdcDict_891_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("subHeader",915,G__MdcDict_891_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"H - 'UInt_t' 10 - data h - 'UInt_t' 0 - version "
"g - 'Bool_t' 0 'kFALSE' consistencyCheck", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_891_0_42, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcDataword::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_891_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDataword::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_891_0_44, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcDataword::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_891_0_45, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcDataword::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_891_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_891_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDataword::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_891_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDataword::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_891_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcDataword::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_891_0_53, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcDataword::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcDataword", 1170, G__MdcDict_891_0_54, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcDataword), -1, 0, 1, 1, 1, 0, "u 'HMdcDataword' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcDataword", 1296, G__MdcDict_891_0_55, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_891_0_56, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcDataword), -1, 1, 1, 1, 1, 0, "u 'HMdcDataword' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcOepAddrCorrPar(void) {
   /* HMdcOepAddrCorrPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcOepAddrCorrPar));
   G__memfunc_setup("HMdcOepAddrCorrPar",1716,G__MdcDict_892_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcOepAddrCorrPar), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"MdcOepAddrCorrPar\"' name C - - 10 '\"Mdc unpacker lookuptable for data recovery\"' title "
"C - - 10 '\"MdcOepAddrCorrParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__MdcDict_892_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkAddress",1220,G__MdcDict_892_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "I - 'Int_t' 0 - addr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - inp I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setMapping",1048,G__MdcDict_892_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - adress i - 'Int_t' 0 - mapTo", "set mapping pairs to map", (void*) NULL, 0);
   G__memfunc_setup("putToArray",1051,G__MdcDict_892_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", "put Values from map To TArrayI", (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__MdcDict_892_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_892_0_10, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcOepAddrCorrPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_892_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcOepAddrCorrPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_892_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcOepAddrCorrPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_892_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcOepAddrCorrPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_892_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_892_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcOepAddrCorrPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_892_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcOepAddrCorrPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_892_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcOepAddrCorrPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_892_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcOepAddrCorrPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcOepAddrCorrPar", 1716, G__MdcDict_892_0_22, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcOepAddrCorrPar), -1, 0, 1, 1, 1, 0, "u 'HMdcOepAddrCorrPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcOepAddrCorrPar", 1842, G__MdcDict_892_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_892_0_24, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcOepAddrCorrPar), -1, 1, 1, 1, 1, 0, "u 'HMdcOepAddrCorrPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcUnpacker(void) {
   /* HMdcUnpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpacker));
   G__memfunc_setup("checkConsistency",1680,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 2, 0, 
"i - 'Int_t' 0 - sector i - 'Int_t' 0 - module "
"i - 'Int_t' 0 - mbo i - 'Int_t' 0 - tdc "
"i - 'Int_t' 0 - channel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCategory",1266,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcDictLN_HCategory), -1, 0, 3, 1, 2, 0, 
"s - 'Cat_t' 0 - cat C - - 10 '\" \"' catname "
"C - - 10 '\"Mdc\"' detector", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillData",801,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMdcDataWord",1489,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - sector i - 'Int_t' 0 - module "
"i - 'Int_t' 0 - mbo i - 'Int_t' 0 - tdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillStatus",1067,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getContinueDecodingAfterInconsistency",3837,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDebug",807,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDoAddrCorrection",1926,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFreeOrExistingSlot",2160,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcDictLN_HMdcRaw), -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - sector i - 'Int_t' 0 - module "
"i - 'Int_t' 0 - mbo i - 'Int_t' 0 - tdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoAddrCorrection",1938,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setContinueDecodingAfterInconsistency",3849,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "g - 'Bool_t' 0 'kTRUE' cont", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefaults",1156,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("correctBitFlip",1436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"U 'HMdcRaw' - 0 - - i - 'Int_t' 0 - year "
"i - 'Int_t' 0 - month i - 'Int_t' 0 - day", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcUnpacker",1173,G__MdcDict_893_0_14, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpacker), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - id g - 'Bool_t' 0 'kFALSE' dbg "
"g - 'Bool_t' 0 'kFALSE' consisCheck", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcUnpacker",1173,G__MdcDict_893_0_15, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpacker), -1, 0, 1, 1, 1, 0, "u 'HMdcUnpacker' - 1 - unp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getDebugMode",1196,G__MdcDict_893_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDecodeVersion",1642,G__MdcDict_893_0_21, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtId",1094,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTdcMode",992,G__MdcDict_893_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFillDataWord",1513,G__MdcDict_893_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFillOepStatus",1659,G__MdcDict_893_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPersistencyDataword",2331,G__MdcDict_893_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPersistencyOepStatusData",2823,G__MdcDict_893_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQuietMode",1241,G__MdcDict_893_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 'kTRUE' quiet g - 'Bool_t' 0 'kTRUE' warn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoBitFlipCorr",1599,G__MdcDict_893_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 'kTRUE' corr u 'TString' - 0 '\"auto\"' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_893_0_30, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcUnpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_893_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcUnpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_893_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcUnpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_893_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcUnpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_893_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_893_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcUnpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_893_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcUnpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_893_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcUnpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_893_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcUnpacker::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcUnpacker", 1299, G__MdcDict_893_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_893_0_43, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcUnpacker), -1, 1, 1, 1, 1, 0, "u 'HMdcUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcOepStatusData(void) {
   /* HMdcOepStatusData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcDictLN_HMdcOepStatusData));
   G__memfunc_setup("HMdcOepStatusData",1662,G__MdcDict_895_0_1, 105, G__get_linked_tagnum(&G__MdcDictLN_HMdcOepStatusData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatusWord",1376,G__MdcDict_895_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__MdcDict_895_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcDict_895_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__MdcDict_895_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMbo",606,G__MdcDict_895_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatusWord",1388,G__MdcDict_895_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - index h - 'UInt_t' 0 - addr "
"h - 'UInt_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcDict_895_0_8, 85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcOepStatusData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcDict_895_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcOepStatusData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcDict_895_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcOepStatusData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcDict_895_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcOepStatusData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcDict_895_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcDict_895_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcOepStatusData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcDict_895_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcOepStatusData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcDict_895_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcOepStatusData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcDict_895_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcOepStatusData::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcOepStatusData", 1662, G__MdcDict_895_0_20, (int) ('i'), G__get_linked_tagnum(&G__MdcDictLN_HMdcOepStatusData), -1, 0, 1, 1, 1, 0, "u 'HMdcOepStatusData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcOepStatusData", 1788, G__MdcDict_895_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcDict_895_0_22, (int) ('u'), G__get_linked_tagnum(&G__MdcDictLN_HMdcOepStatusData), -1, 1, 1, 1, 1, 0, "u 'HMdcOepStatusData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMdcDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {
}

static void G__cpp_setup_global7() {
   G__memvar_setup((void*)(&catMdcRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcHit),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcHit=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcCal1),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcCal1=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcCal2),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcCal2=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcGeantCell),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcGeantCell=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcSeg),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcSeg=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcTrack),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcTrack=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcRawEventHeader),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcRawEventHeader=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcTrkCand),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcTrkCand=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcDataWord),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcDataWord=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcSlope),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcSlope=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcRawCor),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcRawCor=",0,(char*)NULL);
}

static void G__cpp_setup_global8() {
   G__memvar_setup((void*)(&catMdcHitIdeal),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcHitIdeal=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcSegIdeal),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcSegIdeal=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcTrkCandIdeal),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcTrkCandIdeal=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMdcDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
  G__cpp_setup_global7();
  G__cpp_setup_global8();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMdcDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MdcDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HTask = { "HTask" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TIterator = { "TIterator" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__MdcDictLN_HReconstructor = { "HReconstructor" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__MdcDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcRaw = { "HMdcRaw" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcRawCor = { "HMdcRawCor" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HRuntimeDb = { "HRuntimeDb" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcRawEventHeader = { "HMdcRawEventHeader" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HIterator = { "HIterator" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcGeomPar = { "HMdcGeomPar" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HSpecGeomPar = { "HSpecGeomPar" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcDetector = { "HMdcDetector" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcBitFlipCorPar = { "HMdcBitFlipCorPar" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcBitFlipCor = { "HMdcBitFlipCor" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HParIo = { "HParIo" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HParSet = { "HParSet" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HParamList = { "HParamList" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HParCond = { "HParCond" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCal1 = { "HMdcCal1" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCal1Sim = { "HMdcCal1Sim" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCal2 = { "HMdcCal2" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCal2ParSim = { "HMdcCal2ParSim" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCal2ParAngle = { "HMdcCal2ParAngle" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCal2ParSecSim = { "HMdcCal2ParSecSim" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCal2ParModSim = { "HMdcCal2ParModSim" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCal2Par = { "HMdcCal2Par" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCal2ParSec = { "HMdcCal2ParSec" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCal2ParMod = { "HMdcCal2ParMod" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCal2ParAngleSim = { "HMdcCal2ParAngleSim" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCal2Sim = { "HMdcCal2Sim" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCalParRaw = { "HMdcCalParRaw" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcLookupGeom = { "HMdcLookupGeom" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTimeCut = { "HMdcTimeCut" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCutStat = { "HMdcCutStat" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcWireStat = { "HMdcWireStat" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCalParTdc = { "HMdcCalParTdc" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCalibrater1 = { "HMdcCalibrater1" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCalParMbo = { "HMdcCalParMbo" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCalParRawMod = { "HMdcCalParRawMod" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCalParRawSec = { "HMdcCalParRawSec" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCellEffAngle = { "HMdcCellEffAngle" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCellEffMod = { "HMdcCellEffMod" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCellEff = { "HMdcCellEff" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCellGroup = { "HMdcCellGroup" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCellGroup6 = { "HMdcCellGroup6" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCellGroup12 = { "HMdcCellGroup12" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HContainer = { "HContainer" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HContFact = { "HContFact" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcContFact = { "HMdcContFact" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCutStatMod = { "HMdcCutStatMod" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCutStatSec = { "HMdcCutStatSec" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HDetector = { "HDetector" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR = { "map<int,int,less<int>,allocator<pair<const int,int> > >" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TNtuple = { "TNtuple" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcLayerGeomPar = { "HMdcLayerGeomPar" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcDigitPar = { "HMdcDigitPar" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcDeDx2 = { "HMdcDeDx2" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcGeomStruct = { "HMdcGeomStruct" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcSizesCells = { "HMdcSizesCells" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcGeantCell = { "HMdcGeantCell" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcDigiLayEff = { "HMdcDigiLayEff" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcDigitizer = { "HMdcDigitizer" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR = { "map<HGeantKine*,float,less<HGeantKine*>,allocator<pair<HGeantKine* const,float> > >" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgRcLcLiterator = { "map<HGeantKine*,float,less<HGeantKine*>,allocator<pair<HGeantKine* const,float> > >::iterator" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_vectorlEHMdcDigiLayEffcOallocatorlEHMdcDigiLayEffgRsPgR = { "vector<HMdcDigiLayEff,allocator<HMdcDigiLayEff> >" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_reverse_iteratorlEvectorlEHMdcDigiLayEffcOallocatorlEHMdcDigiLayEffgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HMdcDigiLayEff,allocator<HMdcDigiLayEff> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HGeantReader = { "HGeantReader" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMatrixCategory = { "HMatrixCategory" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HGeantMdc = { "HGeantMdc" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcGeantReader = { "HMdcGeantReader" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HGeomVector = { "HGeomVector" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HGeomTransform = { "HGeomTransform" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HDetGeomPar = { "HDetGeomPar" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcGeomModStru = { "HMdcGeomModStru" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcGeomSecStru = { "HMdcGeomSecStru" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HSymMat = { "HSymMat" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HSymMat4 = { "HSymMat4" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HSymMat5 = { "HSymMat5" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HTaskSet = { "HTaskSet" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcHit = { "HMdcHit" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcHitSim = { "HMdcHitSim" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcSeg = { "HMdcSeg" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcSegcLcLdA = { "HMdcSeg::$" , 101 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcSegSim = { "HMdcSegSim" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTrkCand = { "HMdcTrkCand" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTrkCandcLcLdA = { "HMdcTrkCand::$" , 101 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcHitIdeal = { "HMdcHitIdeal" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcSegIdeal = { "HMdcSegIdeal" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTrkCandIdeal = { "HMdcTrkCandIdeal" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcLayerGeomParLay = { "HMdcLayerGeomParLay" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcLayerGeomParMod = { "HMdcLayerGeomParMod" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcLayerGeomParSec = { "HMdcLayerGeomParSec" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcLookupChan = { "HMdcLookupChan" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcLookupMoth = { "HMdcLookupMoth" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcLookupGMod = { "HMdcLookupGMod" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcLookupGSec = { "HMdcLookupGSec" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcLookupCell = { "HMdcLookupCell" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcLookupLayer = { "HMdcLookupLayer" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcLookupRMod = { "HMdcLookupRMod" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcLookupRSec = { "HMdcLookupRSec" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcLookupRaw = { "HMdcLookupRaw" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HDetParIo = { "HDetParIo" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HDetParAsciiFileIo = { "HDetParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcParAsciiFileIo = { "HMdcParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HParRootFile = { "HParRootFile" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HDetParRootFileIo = { "HDetParRootFileIo" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcRawStruct = { "HMdcRawStruct" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTdcThreshold = { "HMdcTdcThreshold" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTdcChannel = { "HMdcTdcChannel" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcParRootFileIo = { "HMdcParRootFileIo" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcClus = { "HMdcClus" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcPPEvtFilter = { "HMdcPPEvtFilter" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcRawMothStru = { "HMdcRawMothStru" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcRawModStru = { "HMdcRawModStru" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcRawSecStru = { "HMdcRawSecStru" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcSetup = { "HMdcSetup" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcDigitizerSetup = { "HMdcDigitizerSetup" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCalibrater1Setup = { "HMdcCalibrater1Setup" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTrackFinderSetup = { "HMdcTrackFinderSetup" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcClusterToHitSetup = { "HMdcClusterToHitSetup" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdc12FitSetup = { "HMdc12FitSetup" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcCommonSetup = { "HMdcCommonSetup" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcDeDx2Maker = { "HMdcDeDx2Maker" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcVertexFind = { "HMdcVertexFind" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTaskSet = { "HMdcTaskSet" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTdcChannelTdc = { "HMdcTdcChannelTdc" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTdcChannelMbo = { "HMdcTdcChannelMbo" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTdcChannelMod = { "HMdcTdcChannelMod" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTdcChannelSec = { "HMdcTdcChannelSec" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTdcThresholdDbo = { "HMdcTdcThresholdDbo" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTdcThresholdMbo = { "HMdcTdcThresholdMbo" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTdcThresholdMod = { "HMdcTdcThresholdMod" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTdcThresholdSec = { "HMdcTdcThresholdSec" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTimeCutMod = { "HMdcTimeCutMod" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTimeCutSec = { "HMdcTimeCutSec" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcTrk = { "HMdcTrk" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HGeomVertexFit = { "HGeomVertexFit" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcVertexFindcLcLEInputMode = { "HMdcVertexFind::EInputMode" , 101 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcVertexWriter = { "HMdcVertexWriter" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcUnpackerPar = { "HMdcUnpackerPar" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HTrbNetUnpacker = { "HTrbNetUnpacker" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HldUnpack = { "HldUnpack" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcDataword = { "HMdcDataword" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcOepAddrCorrPar = { "HMdcOepAddrCorrPar" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcUnpacker = { "HMdcUnpacker" , 99 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcDatawordcLcLdA = { "HMdcDataword::$" , 101 , -1 };
G__linked_taginfo G__MdcDictLN_HMdcOepStatusData = { "HMdcOepStatusData" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMdcDict() {
  G__MdcDictLN_TClass.tagnum = -1 ;
  G__MdcDictLN_TBuffer.tagnum = -1 ;
  G__MdcDictLN_TMemberInspector.tagnum = -1 ;
  G__MdcDictLN_TObject.tagnum = -1 ;
  G__MdcDictLN_TNamed.tagnum = -1 ;
  G__MdcDictLN_TString.tagnum = -1 ;
  G__MdcDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__MdcDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__MdcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MdcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MdcDictLN_TObjArray.tagnum = -1 ;
  G__MdcDictLN_TClonesArray.tagnum = -1 ;
  G__MdcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MdcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MdcDictLN_HTask.tagnum = -1 ;
  G__MdcDictLN_TArrayI.tagnum = -1 ;
  G__MdcDictLN_HLocation.tagnum = -1 ;
  G__MdcDictLN_TIterator.tagnum = -1 ;
  G__MdcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__MdcDictLN_HReconstructor.tagnum = -1 ;
  G__MdcDictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__MdcDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__MdcDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MdcDictLN_TCanvas.tagnum = -1 ;
  G__MdcDictLN_TH1F.tagnum = -1 ;
  G__MdcDictLN_TArrayF.tagnum = -1 ;
  G__MdcDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MdcDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MdcDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__MdcDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__MdcDictLN_TH2F.tagnum = -1 ;
  G__MdcDictLN_TFile.tagnum = -1 ;
  G__MdcDictLN_HMdcRaw.tagnum = -1 ;
  G__MdcDictLN_HMdcRawCor.tagnum = -1 ;
  G__MdcDictLN_HRuntimeDb.tagnum = -1 ;
  G__MdcDictLN_HCategory.tagnum = -1 ;
  G__MdcDictLN_HMdcRawEventHeader.tagnum = -1 ;
  G__MdcDictLN_HIterator.tagnum = -1 ;
  G__MdcDictLN_HMdcGeomPar.tagnum = -1 ;
  G__MdcDictLN_HSpecGeomPar.tagnum = -1 ;
  G__MdcDictLN_HMdcDetector.tagnum = -1 ;
  G__MdcDictLN_HMdcBitFlipCorPar.tagnum = -1 ;
  G__MdcDictLN_HMdcBitFlipCor.tagnum = -1 ;
  G__MdcDictLN_HParIo.tagnum = -1 ;
  G__MdcDictLN_HParSet.tagnum = -1 ;
  G__MdcDictLN_HParamList.tagnum = -1 ;
  G__MdcDictLN_HParCond.tagnum = -1 ;
  G__MdcDictLN_HMdcCal1.tagnum = -1 ;
  G__MdcDictLN_HMdcCal1Sim.tagnum = -1 ;
  G__MdcDictLN_HMdcCal2.tagnum = -1 ;
  G__MdcDictLN_HMdcCal2ParSim.tagnum = -1 ;
  G__MdcDictLN_HMdcCal2ParAngle.tagnum = -1 ;
  G__MdcDictLN_HMdcCal2ParSecSim.tagnum = -1 ;
  G__MdcDictLN_HMdcCal2ParModSim.tagnum = -1 ;
  G__MdcDictLN_HMdcCal2Par.tagnum = -1 ;
  G__MdcDictLN_HMdcCal2ParSec.tagnum = -1 ;
  G__MdcDictLN_HMdcCal2ParMod.tagnum = -1 ;
  G__MdcDictLN_HMdcCal2ParAngleSim.tagnum = -1 ;
  G__MdcDictLN_HMdcCal2Sim.tagnum = -1 ;
  G__MdcDictLN_HMdcCalParRaw.tagnum = -1 ;
  G__MdcDictLN_HMdcLookupGeom.tagnum = -1 ;
  G__MdcDictLN_HMdcTimeCut.tagnum = -1 ;
  G__MdcDictLN_HMdcCutStat.tagnum = -1 ;
  G__MdcDictLN_HMdcWireStat.tagnum = -1 ;
  G__MdcDictLN_HMdcCalParTdc.tagnum = -1 ;
  G__MdcDictLN_HMdcCalibrater1.tagnum = -1 ;
  G__MdcDictLN_HMdcCalParMbo.tagnum = -1 ;
  G__MdcDictLN_HMdcCalParRawMod.tagnum = -1 ;
  G__MdcDictLN_HMdcCalParRawSec.tagnum = -1 ;
  G__MdcDictLN_HMdcCellEffAngle.tagnum = -1 ;
  G__MdcDictLN_HMdcCellEffMod.tagnum = -1 ;
  G__MdcDictLN_HMdcCellEff.tagnum = -1 ;
  G__MdcDictLN_HMdcCellGroup.tagnum = -1 ;
  G__MdcDictLN_HMdcCellGroup6.tagnum = -1 ;
  G__MdcDictLN_HMdcCellGroup12.tagnum = -1 ;
  G__MdcDictLN_HContainer.tagnum = -1 ;
  G__MdcDictLN_HContFact.tagnum = -1 ;
  G__MdcDictLN_HMdcContFact.tagnum = -1 ;
  G__MdcDictLN_HMdcCutStatMod.tagnum = -1 ;
  G__MdcDictLN_HMdcCutStatSec.tagnum = -1 ;
  G__MdcDictLN_HDetector.tagnum = -1 ;
  G__MdcDictLN_TTree.tagnum = -1 ;
  G__MdcDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__MdcDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__MdcDictLN_TNtuple.tagnum = -1 ;
  G__MdcDictLN_HMdcLayerGeomPar.tagnum = -1 ;
  G__MdcDictLN_HMdcDigitPar.tagnum = -1 ;
  G__MdcDictLN_HMdcDeDx2.tagnum = -1 ;
  G__MdcDictLN_HMdcGeomStruct.tagnum = -1 ;
  G__MdcDictLN_HMdcSizesCells.tagnum = -1 ;
  G__MdcDictLN_HMdcGeantCell.tagnum = -1 ;
  G__MdcDictLN_TGraph.tagnum = -1 ;
  G__MdcDictLN_HMdcDigiLayEff.tagnum = -1 ;
  G__MdcDictLN_HMdcDigitizer.tagnum = -1 ;
  G__MdcDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR.tagnum = -1 ;
  G__MdcDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__MdcDictLN_vectorlEHMdcDigiLayEffcOallocatorlEHMdcDigiLayEffgRsPgR.tagnum = -1 ;
  G__MdcDictLN_reverse_iteratorlEvectorlEHMdcDigiLayEffcOallocatorlEHMdcDigiLayEffgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MdcDictLN_HGeantReader.tagnum = -1 ;
  G__MdcDictLN_HMatrixCategory.tagnum = -1 ;
  G__MdcDictLN_HGeantMdc.tagnum = -1 ;
  G__MdcDictLN_HMdcGeantReader.tagnum = -1 ;
  G__MdcDictLN_HGeomVector.tagnum = -1 ;
  G__MdcDictLN_HGeomTransform.tagnum = -1 ;
  G__MdcDictLN_HDetGeomPar.tagnum = -1 ;
  G__MdcDictLN_HMdcGeomModStru.tagnum = -1 ;
  G__MdcDictLN_HMdcGeomSecStru.tagnum = -1 ;
  G__MdcDictLN_HSymMat.tagnum = -1 ;
  G__MdcDictLN_HSymMat4.tagnum = -1 ;
  G__MdcDictLN_HSymMat5.tagnum = -1 ;
  G__MdcDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__MdcDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MdcDictLN_HTaskSet.tagnum = -1 ;
  G__MdcDictLN_HMdcHit.tagnum = -1 ;
  G__MdcDictLN_HMdcHitSim.tagnum = -1 ;
  G__MdcDictLN_HMdcSeg.tagnum = -1 ;
  G__MdcDictLN_HMdcSegcLcLdA.tagnum = -1 ;
  G__MdcDictLN_HMdcSegSim.tagnum = -1 ;
  G__MdcDictLN_HMdcTrkCand.tagnum = -1 ;
  G__MdcDictLN_HMdcTrkCandcLcLdA.tagnum = -1 ;
  G__MdcDictLN_HMdcHitIdeal.tagnum = -1 ;
  G__MdcDictLN_HMdcSegIdeal.tagnum = -1 ;
  G__MdcDictLN_HMdcTrkCandIdeal.tagnum = -1 ;
  G__MdcDictLN_HMdcLayerGeomParLay.tagnum = -1 ;
  G__MdcDictLN_HMdcLayerGeomParMod.tagnum = -1 ;
  G__MdcDictLN_HMdcLayerGeomParSec.tagnum = -1 ;
  G__MdcDictLN_HMdcLookupChan.tagnum = -1 ;
  G__MdcDictLN_HMdcLookupMoth.tagnum = -1 ;
  G__MdcDictLN_HMdcLookupGMod.tagnum = -1 ;
  G__MdcDictLN_HMdcLookupGSec.tagnum = -1 ;
  G__MdcDictLN_HMdcLookupCell.tagnum = -1 ;
  G__MdcDictLN_HMdcLookupLayer.tagnum = -1 ;
  G__MdcDictLN_HMdcLookupRMod.tagnum = -1 ;
  G__MdcDictLN_HMdcLookupRSec.tagnum = -1 ;
  G__MdcDictLN_HMdcLookupRaw.tagnum = -1 ;
  G__MdcDictLN_HDetParIo.tagnum = -1 ;
  G__MdcDictLN_HDetParAsciiFileIo.tagnum = -1 ;
  G__MdcDictLN_HMdcParAsciiFileIo.tagnum = -1 ;
  G__MdcDictLN_HParRootFile.tagnum = -1 ;
  G__MdcDictLN_HDetParRootFileIo.tagnum = -1 ;
  G__MdcDictLN_HMdcRawStruct.tagnum = -1 ;
  G__MdcDictLN_HMdcTdcThreshold.tagnum = -1 ;
  G__MdcDictLN_HMdcTdcChannel.tagnum = -1 ;
  G__MdcDictLN_HMdcParRootFileIo.tagnum = -1 ;
  G__MdcDictLN_HMdcClus.tagnum = -1 ;
  G__MdcDictLN_HMdcPPEvtFilter.tagnum = -1 ;
  G__MdcDictLN_HMdcRawMothStru.tagnum = -1 ;
  G__MdcDictLN_HMdcRawModStru.tagnum = -1 ;
  G__MdcDictLN_HMdcRawSecStru.tagnum = -1 ;
  G__MdcDictLN_HMdcSetup.tagnum = -1 ;
  G__MdcDictLN_HMdcDigitizerSetup.tagnum = -1 ;
  G__MdcDictLN_HMdcCalibrater1Setup.tagnum = -1 ;
  G__MdcDictLN_HMdcTrackFinderSetup.tagnum = -1 ;
  G__MdcDictLN_HMdcClusterToHitSetup.tagnum = -1 ;
  G__MdcDictLN_HMdc12FitSetup.tagnum = -1 ;
  G__MdcDictLN_HMdcCommonSetup.tagnum = -1 ;
  G__MdcDictLN_HMdcDeDx2Maker.tagnum = -1 ;
  G__MdcDictLN_HMdcVertexFind.tagnum = -1 ;
  G__MdcDictLN_HMdcTaskSet.tagnum = -1 ;
  G__MdcDictLN_HMdcTdcChannelTdc.tagnum = -1 ;
  G__MdcDictLN_HMdcTdcChannelMbo.tagnum = -1 ;
  G__MdcDictLN_HMdcTdcChannelMod.tagnum = -1 ;
  G__MdcDictLN_HMdcTdcChannelSec.tagnum = -1 ;
  G__MdcDictLN_HMdcTdcThresholdDbo.tagnum = -1 ;
  G__MdcDictLN_HMdcTdcThresholdMbo.tagnum = -1 ;
  G__MdcDictLN_HMdcTdcThresholdMod.tagnum = -1 ;
  G__MdcDictLN_HMdcTdcThresholdSec.tagnum = -1 ;
  G__MdcDictLN_HMdcTimeCutMod.tagnum = -1 ;
  G__MdcDictLN_HMdcTimeCutSec.tagnum = -1 ;
  G__MdcDictLN_HMdcTrk.tagnum = -1 ;
  G__MdcDictLN_HGeomVertexFit.tagnum = -1 ;
  G__MdcDictLN_HMdcVertexFindcLcLEInputMode.tagnum = -1 ;
  G__MdcDictLN_HMdcVertexWriter.tagnum = -1 ;
  G__MdcDictLN_HMdcUnpackerPar.tagnum = -1 ;
  G__MdcDictLN_HTrbNetUnpacker.tagnum = -1 ;
  G__MdcDictLN_HldUnpack.tagnum = -1 ;
  G__MdcDictLN_HMdcDataword.tagnum = -1 ;
  G__MdcDictLN_HMdcOepAddrCorrPar.tagnum = -1 ;
  G__MdcDictLN_HMdcUnpacker.tagnum = -1 ;
  G__MdcDictLN_HMdcDatawordcLcLdA.tagnum = -1 ;
  G__MdcDictLN_HMdcOepStatusData.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMdcDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TString);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HTask);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HLocation);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TIterator);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HReconstructor);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TH2F);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcRaw),sizeof(HMdcRaw),-1,29952,"Raw hit on a MDC",G__setup_memvarHMdcRaw,G__setup_memfuncHMdcRaw);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcRawCor),sizeof(HMdcRawCor),-1,29952,"RawCor hit on a MDC",G__setup_memvarHMdcRawCor,G__setup_memfuncHMdcRawCor);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HRuntimeDb);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HCategory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcRawEventHeader),sizeof(HMdcRawEventHeader),-1,29952,"subevent header of MDC",G__setup_memvarHMdcRawEventHeader,G__setup_memfuncHMdcRawEventHeader);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HIterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcGeomPar),sizeof(HMdcGeomPar),-1,62720,"Container for the MDC geometry parameters",G__setup_memvarHMdcGeomPar,G__setup_memfuncHMdcGeomPar);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HSpecGeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcDetector),sizeof(HMdcDetector),-1,62720,"Mdc detector class",G__setup_memvarHMdcDetector,G__setup_memfuncHMdcDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcBitFlipCorPar),sizeof(HMdcBitFlipCorPar),-1,62720,"Container for the MDC bitflip correction parameters",G__setup_memvarHMdcBitFlipCorPar,G__setup_memfuncHMdcBitFlipCorPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcBitFlipCor),sizeof(HMdcBitFlipCor),-1,62720,(char*)NULL,G__setup_memvarHMdcBitFlipCor,G__setup_memfuncHMdcBitFlipCor);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HParIo);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HParSet);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HParamList);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HParCond);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCal1),sizeof(HMdcCal1),-1,29952,"cal hit on a MDC",G__setup_memvarHMdcCal1,G__setup_memfuncHMdcCal1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCal1Sim),sizeof(HMdcCal1Sim),-1,29952,"simulated cal1 hit on a MDC",G__setup_memvarHMdcCal1Sim,G__setup_memfuncHMdcCal1Sim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCal2),sizeof(HMdcCal2),-1,29952,"cal hit on a MDC",G__setup_memvarHMdcCal2,G__setup_memfuncHMdcCal2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCal2ParSim),sizeof(HMdcCal2ParSim),-1,128256,"Container for the MDC calibration parameters",G__setup_memvarHMdcCal2ParSim,G__setup_memfuncHMdcCal2ParSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCal2ParAngle),sizeof(HMdcCal2ParAngle),-1,29952,"Angle level of the MDC calibration parameters",G__setup_memvarHMdcCal2ParAngle,G__setup_memfuncHMdcCal2ParAngle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCal2ParSecSim),sizeof(HMdcCal2ParSecSim),-1,29952,"Sector level of the MDC calibration parameters",G__setup_memvarHMdcCal2ParSecSim,G__setup_memfuncHMdcCal2ParSecSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCal2ParModSim),sizeof(HMdcCal2ParModSim),-1,29952,"Module level of the MDC calibration parameters",G__setup_memvarHMdcCal2ParModSim,G__setup_memfuncHMdcCal2ParModSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCal2Par),sizeof(HMdcCal2Par),-1,62720,"Container for the MDC calibration parameters",G__setup_memvarHMdcCal2Par,G__setup_memfuncHMdcCal2Par);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCal2ParSec),sizeof(HMdcCal2ParSec),-1,29952,"Sector level of the MDC calibration parameters",G__setup_memvarHMdcCal2ParSec,G__setup_memfuncHMdcCal2ParSec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCal2ParMod),sizeof(HMdcCal2ParMod),-1,29952,"Module level of the MDC calibration parameters",G__setup_memvarHMdcCal2ParMod,G__setup_memfuncHMdcCal2ParMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCal2ParAngleSim),sizeof(HMdcCal2ParAngleSim),-1,29952,"Angle level of the MDC calibration parameters",G__setup_memvarHMdcCal2ParAngleSim,G__setup_memfuncHMdcCal2ParAngleSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCal2Sim),sizeof(HMdcCal2Sim),-1,29952,"simulated cal2 hit on a MDC",G__setup_memvarHMdcCal2Sim,G__setup_memfuncHMdcCal2Sim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCalParRaw),sizeof(HMdcCalParRaw),-1,128256,"Container for the MDC calibration parameters on raw level",G__setup_memvarHMdcCalParRaw,G__setup_memfuncHMdcCalParRaw);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcLookupGeom),sizeof(HMdcLookupGeom),-1,62720,"MDC lookup table (channel->wire)",G__setup_memvarHMdcLookupGeom,G__setup_memfuncHMdcLookupGeom);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTimeCut),sizeof(HMdcTimeCut),-1,62720,(char*)NULL,G__setup_memvarHMdcTimeCut,G__setup_memfuncHMdcTimeCut);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCutStat),sizeof(HMdcCutStat),-1,62720,(char*)NULL,G__setup_memvarHMdcCutStat,G__setup_memfuncHMdcCutStat);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcWireStat),sizeof(HMdcWireStat),-1,62720,"MDC lookup table (wire stat, noise)",G__setup_memvarHMdcWireStat,G__setup_memfuncHMdcWireStat);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCalParTdc),sizeof(HMdcCalParTdc),-1,29952,"Tdc level of the MDC calibration parameters",G__setup_memvarHMdcCalParTdc,G__setup_memfuncHMdcCalParTdc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCalibrater1),sizeof(HMdcCalibrater1),-1,62720,"Calibrater raw->cal1 for Mdc data",G__setup_memvarHMdcCalibrater1,G__setup_memfuncHMdcCalibrater1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCalParMbo),sizeof(HMdcCalParMbo),-1,62720,"Mbo level of the MDC calibration parameters",G__setup_memvarHMdcCalParMbo,G__setup_memfuncHMdcCalParMbo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCalParRawMod),sizeof(HMdcCalParRawMod),-1,29952,"Module level of the MDC calibration parameters",G__setup_memvarHMdcCalParRawMod,G__setup_memfuncHMdcCalParRawMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCalParRawSec),sizeof(HMdcCalParRawSec),-1,29952,"Sector level of the MDC calibration parameters",G__setup_memvarHMdcCalParRawSec,G__setup_memfuncHMdcCalParRawSec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCellEffAngle),sizeof(HMdcCellEffAngle),-1,29952,"Angle level of the MDC cell efficiency parameters",G__setup_memvarHMdcCellEffAngle,G__setup_memfuncHMdcCellEffAngle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCellEffMod),sizeof(HMdcCellEffMod),-1,29952,"Module level of the MDC calibration parameters",G__setup_memvarHMdcCellEffMod,G__setup_memfuncHMdcCellEffMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCellEff),sizeof(HMdcCellEff),-1,62720,"Container for the MDC cell efficiency parameters",G__setup_memvarHMdcCellEff,G__setup_memfuncHMdcCellEff);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCellGroup),sizeof(HMdcCellGroup),-1,62464,"A group of cells in layers",G__setup_memvarHMdcCellGroup,G__setup_memfuncHMdcCellGroup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCellGroup6),sizeof(HMdcCellGroup6),-1,62720,"Group of cells in 6 layers",G__setup_memvarHMdcCellGroup6,G__setup_memfuncHMdcCellGroup6);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCellGroup12),sizeof(HMdcCellGroup12),-1,62720,"group of cells in 12 layers.",G__setup_memvarHMdcCellGroup12,G__setup_memfuncHMdcCellGroup12);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HContainer);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcContFact),sizeof(HMdcContFact),-1,62720,"Factory for all MDC parameter containers",G__setup_memvarHMdcContFact,G__setup_memfuncHMdcContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCutStatMod),sizeof(HMdcCutStatMod),-1,30464,(char*)NULL,G__setup_memvarHMdcCutStatMod,G__setup_memfuncHMdcCutStatMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCutStatSec),sizeof(HMdcCutStatSec),-1,29952,(char*)NULL,G__setup_memvarHMdcCutStatSec,G__setup_memfuncHMdcCutStatSec);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HDetector);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TNtuple);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcLayerGeomPar),sizeof(HMdcLayerGeomPar),-1,62720,"Parameter container for the geometry of MDC layers",G__setup_memvarHMdcLayerGeomPar,G__setup_memfuncHMdcLayerGeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcDigitPar),sizeof(HMdcDigitPar),-1,62720,"Container for the MDC Digitizer parameters",G__setup_memvarHMdcDigitPar,G__setup_memfuncHMdcDigitPar);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcDeDx2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcGeomStruct),sizeof(HMdcGeomStruct),-1,128256,"MdcGeomStruct container for number of wires per layer",G__setup_memvarHMdcGeomStruct,G__setup_memfuncHMdcGeomStruct);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcSizesCells);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcGeantCell),sizeof(HMdcGeantCell),-1,29952,"Intermediate MDC data (derived from HGeant output).",G__setup_memvarHMdcGeantCell,G__setup_memfuncHMdcGeantCell);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_TGraph);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcDigiLayEff);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcDigitizer),sizeof(HMdcDigitizer),-1,62720,"Digitizer of MDC data",G__setup_memvarHMdcDigitizer,G__setup_memfuncHMdcDigitizer);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_vectorlEHMdcDigiLayEffcOallocatorlEHMdcDigiLayEffgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_reverse_iteratorlEvectorlEHMdcDigiLayEffcOallocatorlEHMdcDigiLayEffgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HGeantReader);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HMatrixCategory);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HGeantMdc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcGeantReader),sizeof(HMdcGeantReader),-1,29952,"MDC reader for HGeant Root file",G__setup_memvarHMdcGeantReader,G__setup_memfuncHMdcGeantReader);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HGeomVector);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HGeomTransform);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HDetGeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcGeomModStru),sizeof(HMdcGeomModStru),-1,95488,"Layer level of the MdcGeomStruct container",G__setup_memvarHMdcGeomModStru,G__setup_memfuncHMdcGeomModStru);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcGeomSecStru),sizeof(HMdcGeomSecStru),-1,95488,"Sector level of the MdcGeomStruct container",G__setup_memvarHMdcGeomSecStru,G__setup_memfuncHMdcGeomSecStru);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HSymMat);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HSymMat4);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HSymMat5);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HTaskSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcHit),sizeof(HMdcHit),-1,62720,"hit in a MDC chamber",G__setup_memvarHMdcHit,G__setup_memfuncHMdcHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcHitSim),sizeof(HMdcHitSim),-1,62720,"simulated hit on a MDC ",G__setup_memvarHMdcHitSim,G__setup_memfuncHMdcHitSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcSeg),sizeof(HMdcSeg),-1,128256,"MDC segment",G__setup_memvarHMdcSeg,G__setup_memfuncHMdcSeg);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcSegcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcSegSim),sizeof(HMdcSegSim),-1,62720,"simulated seg hit on a MDC ",G__setup_memvarHMdcSegSim,G__setup_memfuncHMdcSegSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTrkCand),sizeof(HMdcTrkCand),-1,62720,"MDC track candidate",G__setup_memvarHMdcTrkCand,G__setup_memfuncHMdcTrkCand);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTrkCandcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcHitIdeal),sizeof(HMdcHitIdeal),-1,61440,"simulated hit on a MDC",G__setup_memvarHMdcHitIdeal,G__setup_memfuncHMdcHitIdeal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcSegIdeal),sizeof(HMdcSegIdeal),-1,61440,"simulated segment on a MDC",G__setup_memvarHMdcSegIdeal,G__setup_memfuncHMdcSegIdeal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTrkCandIdeal),sizeof(HMdcTrkCandIdeal),-1,61440,"simulated track candidate on a MDC",G__setup_memvarHMdcTrkCandIdeal,G__setup_memfuncHMdcTrkCandIdeal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcLayerGeomParLay),sizeof(HMdcLayerGeomParLay),-1,95488,"Layer level of Parameter container HMdcLayerGeomPar",G__setup_memvarHMdcLayerGeomParLay,G__setup_memfuncHMdcLayerGeomParLay);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcLayerGeomParMod),sizeof(HMdcLayerGeomParMod),-1,29952,"Module level of Parameter container HMdcLayerGeomPar",G__setup_memvarHMdcLayerGeomParMod,G__setup_memfuncHMdcLayerGeomParMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcLayerGeomParSec),sizeof(HMdcLayerGeomParSec),-1,29952,"Sector level of Parameter container HMdcLayerGeomPar",G__setup_memvarHMdcLayerGeomParSec,G__setup_memfuncHMdcLayerGeomParSec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcLookupChan),sizeof(HMdcLookupChan),-1,95488,"Channel level of MDC lookup table (channel->wire)",G__setup_memvarHMdcLookupChan,G__setup_memfuncHMdcLookupChan);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcLookupMoth),sizeof(HMdcLookupMoth),-1,62720,"Motherboard level of MDC lookup table (channel->wire)",G__setup_memvarHMdcLookupMoth,G__setup_memfuncHMdcLookupMoth);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcLookupGMod),sizeof(HMdcLookupGMod),-1,29952,"Module level of MDC lookup table (channel->wire)",G__setup_memvarHMdcLookupGMod,G__setup_memfuncHMdcLookupGMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcLookupGSec),sizeof(HMdcLookupGSec),-1,29952,"Sector level of MDC lookup table (channel->wire)",G__setup_memvarHMdcLookupGSec,G__setup_memfuncHMdcLookupGSec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcLookupCell),sizeof(HMdcLookupCell),-1,95488,"Cell level of MDC lookup table (cell->channel)",G__setup_memvarHMdcLookupCell,G__setup_memfuncHMdcLookupCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcLookupLayer),sizeof(HMdcLookupLayer),-1,29952,"Layer level of MDC lookup table (cell->channel)",G__setup_memvarHMdcLookupLayer,G__setup_memfuncHMdcLookupLayer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcLookupRMod),sizeof(HMdcLookupRMod),-1,29952,"Module level of MDC lookup table (cell->channel)",G__setup_memvarHMdcLookupRMod,G__setup_memfuncHMdcLookupRMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcLookupRSec),sizeof(HMdcLookupRSec),-1,29952,"Sector level of MDC lookup table (cell->channel)",G__setup_memvarHMdcLookupRSec,G__setup_memfuncHMdcLookupRSec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcLookupRaw),sizeof(HMdcLookupRaw),-1,62720,"MDC lookup table (cell->channel)",G__setup_memvarHMdcLookupRaw,G__setup_memfuncHMdcLookupRaw);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HDetParIo);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HDetParAsciiFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcParAsciiFileIo),sizeof(HMdcParAsciiFileIo),-1,62464,"Class for MDC parameter I/O from Ascii files",G__setup_memvarHMdcParAsciiFileIo,G__setup_memfuncHMdcParAsciiFileIo);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HParRootFile);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HDetParRootFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcRawStruct),sizeof(HMdcRawStruct),-1,62720,"MdcRawStruct parameter container for number of TDCs",G__setup_memvarHMdcRawStruct,G__setup_memfuncHMdcRawStruct);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTdcThreshold),sizeof(HMdcTdcThreshold),-1,128256,"Container for the MDC threshold parameters on raw level",G__setup_memvarHMdcTdcThreshold,G__setup_memfuncHMdcTdcThreshold);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTdcChannel),sizeof(HMdcTdcChannel),-1,128256,"Container for the MDC TDC channel masks",G__setup_memvarHMdcTdcChannel,G__setup_memfuncHMdcTdcChannel);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcParRootFileIo),sizeof(HMdcParRootFileIo),-1,62464,"Class for MDC parameter I/O from ROOT file",G__setup_memvarHMdcParRootFileIo,G__setup_memfuncHMdcParRootFileIo);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcClus);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcPPEvtFilter),sizeof(HMdcPPEvtFilter),-1,62720,(char*)NULL,G__setup_memvarHMdcPPEvtFilter,G__setup_memfuncHMdcPPEvtFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcRawMothStru),sizeof(HMdcRawMothStru),-1,62720,"Tdc level of MdcRawStruct parameter container",G__setup_memvarHMdcRawMothStru,G__setup_memfuncHMdcRawMothStru);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcRawModStru),sizeof(HMdcRawModStru),-1,29952,"Motherboard level of MdcRawStruct parameter container",G__setup_memvarHMdcRawModStru,G__setup_memfuncHMdcRawModStru);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcRawSecStru),sizeof(HMdcRawSecStru),-1,29952,"Sector level of MdcRawStruct parameter container",G__setup_memvarHMdcRawSecStru,G__setup_memfuncHMdcRawSecStru);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcSetup),sizeof(HMdcSetup),-1,62720,"Container for the MDC taskset parameters",G__setup_memvarHMdcSetup,G__setup_memfuncHMdcSetup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcDigitizerSetup),sizeof(HMdcDigitizerSetup),-1,62720,"Container for the MDC Digitizer parameters",G__setup_memvarHMdcDigitizerSetup,G__setup_memfuncHMdcDigitizerSetup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCalibrater1Setup),sizeof(HMdcCalibrater1Setup),-1,62720,"Container for the MDC Calibrater1 parameters",G__setup_memvarHMdcCalibrater1Setup,G__setup_memfuncHMdcCalibrater1Setup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTrackFinderSetup),sizeof(HMdcTrackFinderSetup),-1,62720,"Container for the MDC trackfinder parameters",G__setup_memvarHMdcTrackFinderSetup,G__setup_memfuncHMdcTrackFinderSetup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcClusterToHitSetup),sizeof(HMdcClusterToHitSetup),-1,62720,"Container for the MDC clustertoseg parameters",G__setup_memvarHMdcClusterToHitSetup,G__setup_memfuncHMdcClusterToHitSetup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdc12FitSetup),sizeof(HMdc12FitSetup),-1,62720,"Container for the MDC fitter parameters",G__setup_memvarHMdc12FitSetup,G__setup_memfuncHMdc12FitSetup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcCommonSetup),sizeof(HMdcCommonSetup),-1,62720,"Container for the MDC common parameters",G__setup_memvarHMdcCommonSetup,G__setup_memfuncHMdcCommonSetup);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcDeDx2Maker);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcVertexFind),sizeof(HMdcVertexFind),-1,62720,(char*)NULL,G__setup_memvarHMdcVertexFind,G__setup_memfuncHMdcVertexFind);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTaskSet),sizeof(HMdcTaskSet),-1,62720,"Set of tasks",G__setup_memvarHMdcTaskSet,G__setup_memfuncHMdcTaskSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTdcChannelTdc),sizeof(HMdcTdcChannelTdc),-1,29952,"Tdc level of the MDC TDC channel mask",G__setup_memvarHMdcTdcChannelTdc,G__setup_memfuncHMdcTdcChannelTdc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTdcChannelMbo),sizeof(HMdcTdcChannelMbo),-1,62720,"Mbo level of the MDC TDC channel mask",G__setup_memvarHMdcTdcChannelMbo,G__setup_memfuncHMdcTdcChannelMbo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTdcChannelMod),sizeof(HMdcTdcChannelMod),-1,29952,"Module level of the MDC TDC channel mask",G__setup_memvarHMdcTdcChannelMod,G__setup_memfuncHMdcTdcChannelMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTdcChannelSec),sizeof(HMdcTdcChannelSec),-1,29952,"Sector level of the MDC TDC channel mask",G__setup_memvarHMdcTdcChannelSec,G__setup_memfuncHMdcTdcChannelSec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTdcThresholdDbo),sizeof(HMdcTdcThresholdDbo),-1,29952,"Tdc level of the MDC calibration parameters",G__setup_memvarHMdcTdcThresholdDbo,G__setup_memfuncHMdcTdcThresholdDbo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTdcThresholdMbo),sizeof(HMdcTdcThresholdMbo),-1,62720,"Mbo level of the MDC calibration parameters",G__setup_memvarHMdcTdcThresholdMbo,G__setup_memfuncHMdcTdcThresholdMbo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTdcThresholdMod),sizeof(HMdcTdcThresholdMod),-1,29952,"Module level of the MDC calibration parameters",G__setup_memvarHMdcTdcThresholdMod,G__setup_memfuncHMdcTdcThresholdMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTdcThresholdSec),sizeof(HMdcTdcThresholdSec),-1,29952,"Sector level of the MDC calibration parameters",G__setup_memvarHMdcTdcThresholdSec,G__setup_memfuncHMdcTdcThresholdSec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTimeCutMod),sizeof(HMdcTimeCutMod),-1,96000,(char*)NULL,G__setup_memvarHMdcTimeCutMod,G__setup_memfuncHMdcTimeCutMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTimeCutSec),sizeof(HMdcTimeCutSec),-1,29952,(char*)NULL,G__setup_memvarHMdcTimeCutSec,G__setup_memfuncHMdcTimeCutSec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcTrk),sizeof(HMdcTrk),-1,29952,(char*)NULL,G__setup_memvarHMdcTrk,G__setup_memfuncHMdcTrk);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HGeomVertexFit);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcVertexFindcLcLEInputMode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcVertexWriter),sizeof(HMdcVertexWriter),-1,62720,"Writes the event vertex pointer to ascii file",G__setup_memvarHMdcVertexWriter,G__setup_memfuncHMdcVertexWriter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcUnpackerPar),sizeof(HMdcUnpackerPar),-1,62720,(char*)NULL,G__setup_memvarHMdcUnpackerPar,G__setup_memfuncHMdcUnpackerPar);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HTrbNetUnpacker);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HldUnpack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcDataword),sizeof(HMdcDataword),-1,62720,"MDC dataford for OEP (Optical End Point)",G__setup_memvarHMdcDataword,G__setup_memfuncHMdcDataword);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcOepAddrCorrPar),sizeof(HMdcOepAddrCorrPar),-1,128256,(char*)NULL,G__setup_memvarHMdcOepAddrCorrPar,G__setup_memfuncHMdcOepAddrCorrPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcUnpacker),sizeof(HMdcUnpacker),-1,62976,(char*)NULL,G__setup_memvarHMdcUnpacker,G__setup_memfuncHMdcUnpacker);
   G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcDatawordcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcDictLN_HMdcOepStatusData),sizeof(HMdcOepStatusData),-1,29952,(char*)NULL,G__setup_memvarHMdcOepStatusData,G__setup_memfuncHMdcOepStatusData);
}
extern "C" void G__cpp_setupMdcDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMdcDict()");
  G__set_cpp_environmentMdcDict();
  G__cpp_setup_tagtableMdcDict();

  G__cpp_setup_inheritanceMdcDict();

  G__cpp_setup_typetableMdcDict();

  G__cpp_setup_memvarMdcDict();

  G__cpp_setup_memfuncMdcDict();
  G__cpp_setup_globalMdcDict();
  G__cpp_setup_funcMdcDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMdcDict();
  return;
}
class G__cpp_setup_initMdcDict {
  public:
    G__cpp_setup_initMdcDict() { G__add_setup_func("MdcDict",(G__incsetup)(&G__cpp_setupMdcDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMdcDict() { G__remove_setup_func("MdcDict"); }
};
G__cpp_setup_initMdcDict G__cpp_setup_initializerMdcDict;


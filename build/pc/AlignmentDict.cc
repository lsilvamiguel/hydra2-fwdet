//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:48:59 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIAlignmentDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "AlignmentDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HAlignmentGData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HAlignmentGData(void *p = 0);
   static void *newArray_HAlignmentGData(Long_t size, void *p);
   static void delete_HAlignmentGData(void *p);
   static void deleteArray_HAlignmentGData(void *p);
   static void destruct_HAlignmentGData(void *p);
   static void streamer_HAlignmentGData(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HAlignmentGData*)
   {
      ::HAlignmentGData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HAlignmentGData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HAlignmentGData", ::HAlignmentGData::Class_Version(), "././halignmentgdata.h", 9,
                  typeid(::HAlignmentGData), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HAlignmentGData::Dictionary, isa_proxy, 0,
                  sizeof(::HAlignmentGData) );
      instance.SetNew(&new_HAlignmentGData);
      instance.SetNewArray(&newArray_HAlignmentGData);
      instance.SetDelete(&delete_HAlignmentGData);
      instance.SetDeleteArray(&deleteArray_HAlignmentGData);
      instance.SetDestructor(&destruct_HAlignmentGData);
      instance.SetStreamerFunc(&streamer_HAlignmentGData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HAlignmentGData*)
   {
      return GenerateInitInstanceLocal((::HAlignmentGData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HAlignmentGData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HAlignmentGGeom_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HAlignmentGGeom(void *p = 0);
   static void *newArray_HAlignmentGGeom(Long_t size, void *p);
   static void delete_HAlignmentGGeom(void *p);
   static void deleteArray_HAlignmentGGeom(void *p);
   static void destruct_HAlignmentGGeom(void *p);
   static void streamer_HAlignmentGGeom(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HAlignmentGGeom*)
   {
      ::HAlignmentGGeom *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HAlignmentGGeom >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HAlignmentGGeom", ::HAlignmentGGeom::Class_Version(), "././halignmentggeom.h", 10,
                  typeid(::HAlignmentGGeom), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HAlignmentGGeom::Dictionary, isa_proxy, 0,
                  sizeof(::HAlignmentGGeom) );
      instance.SetNew(&new_HAlignmentGGeom);
      instance.SetNewArray(&newArray_HAlignmentGGeom);
      instance.SetDelete(&delete_HAlignmentGGeom);
      instance.SetDeleteArray(&deleteArray_HAlignmentGGeom);
      instance.SetDestructor(&destruct_HAlignmentGGeom);
      instance.SetStreamerFunc(&streamer_HAlignmentGGeom);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HAlignmentGGeom*)
   {
      return GenerateInitInstanceLocal((::HAlignmentGGeom*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HAlignmentGGeom*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HAlignmentGParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HAlignmentGParticle(void *p = 0);
   static void *newArray_HAlignmentGParticle(Long_t size, void *p);
   static void delete_HAlignmentGParticle(void *p);
   static void deleteArray_HAlignmentGParticle(void *p);
   static void destruct_HAlignmentGParticle(void *p);
   static void streamer_HAlignmentGParticle(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HAlignmentGParticle*)
   {
      ::HAlignmentGParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HAlignmentGParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HAlignmentGParticle", ::HAlignmentGParticle::Class_Version(), "././halignmentgparticle.h", 8,
                  typeid(::HAlignmentGParticle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HAlignmentGParticle::Dictionary, isa_proxy, 0,
                  sizeof(::HAlignmentGParticle) );
      instance.SetNew(&new_HAlignmentGParticle);
      instance.SetNewArray(&newArray_HAlignmentGParticle);
      instance.SetDelete(&delete_HAlignmentGParticle);
      instance.SetDeleteArray(&deleteArray_HAlignmentGParticle);
      instance.SetDestructor(&destruct_HAlignmentGParticle);
      instance.SetStreamerFunc(&streamer_HAlignmentGParticle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HAlignmentGParticle*)
   {
      return GenerateInitInstanceLocal((::HAlignmentGParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HAlignmentGParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HAlignmentGRotations_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HAlignmentGRotations(void *p = 0);
   static void *newArray_HAlignmentGRotations(Long_t size, void *p);
   static void delete_HAlignmentGRotations(void *p);
   static void deleteArray_HAlignmentGRotations(void *p);
   static void destruct_HAlignmentGRotations(void *p);
   static void streamer_HAlignmentGRotations(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HAlignmentGRotations*)
   {
      ::HAlignmentGRotations *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HAlignmentGRotations >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HAlignmentGRotations", ::HAlignmentGRotations::Class_Version(), "././halignmentgrotations.h", 13,
                  typeid(::HAlignmentGRotations), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HAlignmentGRotations::Dictionary, isa_proxy, 0,
                  sizeof(::HAlignmentGRotations) );
      instance.SetNew(&new_HAlignmentGRotations);
      instance.SetNewArray(&newArray_HAlignmentGRotations);
      instance.SetDelete(&delete_HAlignmentGRotations);
      instance.SetDeleteArray(&deleteArray_HAlignmentGRotations);
      instance.SetDestructor(&destruct_HAlignmentGRotations);
      instance.SetStreamerFunc(&streamer_HAlignmentGRotations);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HAlignmentGRotations*)
   {
      return GenerateInitInstanceLocal((::HAlignmentGRotations*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HAlignmentGRotations*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HAlignmentGBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HAlignmentGBase(void *p);
   static void deleteArray_HAlignmentGBase(void *p);
   static void destruct_HAlignmentGBase(void *p);
   static void streamer_HAlignmentGBase(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HAlignmentGBase*)
   {
      ::HAlignmentGBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HAlignmentGBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HAlignmentGBase", ::HAlignmentGBase::Class_Version(), "././halignmentgbase.h", 21,
                  typeid(::HAlignmentGBase), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HAlignmentGBase::Dictionary, isa_proxy, 0,
                  sizeof(::HAlignmentGBase) );
      instance.SetDelete(&delete_HAlignmentGBase);
      instance.SetDeleteArray(&deleteArray_HAlignmentGBase);
      instance.SetDestructor(&destruct_HAlignmentGBase);
      instance.SetStreamerFunc(&streamer_HAlignmentGBase);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HAlignmentGBase*)
   {
      return GenerateInitInstanceLocal((::HAlignmentGBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HAlignmentGBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HAlignmentGParticleBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HAlignmentGParticleBase(void *p);
   static void deleteArray_HAlignmentGParticleBase(void *p);
   static void destruct_HAlignmentGParticleBase(void *p);
   static void streamer_HAlignmentGParticleBase(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HAlignmentGParticleBase*)
   {
      ::HAlignmentGParticleBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HAlignmentGParticleBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HAlignmentGParticleBase", ::HAlignmentGParticleBase::Class_Version(), "././halignmentgparticlebase.h", 7,
                  typeid(::HAlignmentGParticleBase), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HAlignmentGParticleBase::Dictionary, isa_proxy, 0,
                  sizeof(::HAlignmentGParticleBase) );
      instance.SetDelete(&delete_HAlignmentGParticleBase);
      instance.SetDeleteArray(&deleteArray_HAlignmentGParticleBase);
      instance.SetDestructor(&destruct_HAlignmentGParticleBase);
      instance.SetStreamerFunc(&streamer_HAlignmentGParticleBase);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HAlignmentGParticleBase*)
   {
      return GenerateInitInstanceLocal((::HAlignmentGParticleBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HAlignmentGParticleBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HAlignmentGNoMag_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HAlignmentGNoMag(void *p = 0);
   static void *newArray_HAlignmentGNoMag(Long_t size, void *p);
   static void delete_HAlignmentGNoMag(void *p);
   static void deleteArray_HAlignmentGNoMag(void *p);
   static void destruct_HAlignmentGNoMag(void *p);
   static void streamer_HAlignmentGNoMag(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HAlignmentGNoMag*)
   {
      ::HAlignmentGNoMag *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HAlignmentGNoMag >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HAlignmentGNoMag", ::HAlignmentGNoMag::Class_Version(), "././halignmentgnomag.h", 22,
                  typeid(::HAlignmentGNoMag), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HAlignmentGNoMag::Dictionary, isa_proxy, 0,
                  sizeof(::HAlignmentGNoMag) );
      instance.SetNew(&new_HAlignmentGNoMag);
      instance.SetNewArray(&newArray_HAlignmentGNoMag);
      instance.SetDelete(&delete_HAlignmentGNoMag);
      instance.SetDeleteArray(&deleteArray_HAlignmentGNoMag);
      instance.SetDestructor(&destruct_HAlignmentGNoMag);
      instance.SetStreamerFunc(&streamer_HAlignmentGNoMag);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HAlignmentGNoMag*)
   {
      return GenerateInitInstanceLocal((::HAlignmentGNoMag*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HAlignmentGNoMag*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HAlignmentGCosmics_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HAlignmentGCosmics(void *p = 0);
   static void *newArray_HAlignmentGCosmics(Long_t size, void *p);
   static void delete_HAlignmentGCosmics(void *p);
   static void deleteArray_HAlignmentGCosmics(void *p);
   static void destruct_HAlignmentGCosmics(void *p);
   static void streamer_HAlignmentGCosmics(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HAlignmentGCosmics*)
   {
      ::HAlignmentGCosmics *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HAlignmentGCosmics >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HAlignmentGCosmics", ::HAlignmentGCosmics::Class_Version(), "././halignmentgcosmics.h", 23,
                  typeid(::HAlignmentGCosmics), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HAlignmentGCosmics::Dictionary, isa_proxy, 0,
                  sizeof(::HAlignmentGCosmics) );
      instance.SetNew(&new_HAlignmentGCosmics);
      instance.SetNewArray(&newArray_HAlignmentGCosmics);
      instance.SetDelete(&delete_HAlignmentGCosmics);
      instance.SetDeleteArray(&deleteArray_HAlignmentGCosmics);
      instance.SetDestructor(&destruct_HAlignmentGCosmics);
      instance.SetStreamerFunc(&streamer_HAlignmentGCosmics);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HAlignmentGCosmics*)
   {
      return GenerateInitInstanceLocal((::HAlignmentGCosmics*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HAlignmentGCosmics*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HAlignmentGShower_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HAlignmentGShower(void *p = 0);
   static void *newArray_HAlignmentGShower(Long_t size, void *p);
   static void delete_HAlignmentGShower(void *p);
   static void deleteArray_HAlignmentGShower(void *p);
   static void destruct_HAlignmentGShower(void *p);
   static void streamer_HAlignmentGShower(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HAlignmentGShower*)
   {
      ::HAlignmentGShower *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HAlignmentGShower >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HAlignmentGShower", ::HAlignmentGShower::Class_Version(), "././halignmentgshower.h", 23,
                  typeid(::HAlignmentGShower), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HAlignmentGShower::Dictionary, isa_proxy, 0,
                  sizeof(::HAlignmentGShower) );
      instance.SetNew(&new_HAlignmentGShower);
      instance.SetNewArray(&newArray_HAlignmentGShower);
      instance.SetDelete(&delete_HAlignmentGShower);
      instance.SetDeleteArray(&deleteArray_HAlignmentGShower);
      instance.SetDestructor(&destruct_HAlignmentGShower);
      instance.SetStreamerFunc(&streamer_HAlignmentGShower);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HAlignmentGShower*)
   {
      return GenerateInitInstanceLocal((::HAlignmentGShower*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HAlignmentGShower*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcCosmicsCandidate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcCosmicsCandidate(void *p = 0);
   static void *newArray_HMdcCosmicsCandidate(Long_t size, void *p);
   static void delete_HMdcCosmicsCandidate(void *p);
   static void deleteArray_HMdcCosmicsCandidate(void *p);
   static void destruct_HMdcCosmicsCandidate(void *p);
   static void streamer_HMdcCosmicsCandidate(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcCosmicsCandidate*)
   {
      ::HMdcCosmicsCandidate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcCosmicsCandidate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcCosmicsCandidate", ::HMdcCosmicsCandidate::Class_Version(), "././hmdccosmicscandidate.h", 26,
                  typeid(::HMdcCosmicsCandidate), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcCosmicsCandidate::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcCosmicsCandidate) );
      instance.SetNew(&new_HMdcCosmicsCandidate);
      instance.SetNewArray(&newArray_HMdcCosmicsCandidate);
      instance.SetDelete(&delete_HMdcCosmicsCandidate);
      instance.SetDeleteArray(&deleteArray_HMdcCosmicsCandidate);
      instance.SetDestructor(&destruct_HMdcCosmicsCandidate);
      instance.SetStreamerFunc(&streamer_HMdcCosmicsCandidate);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcCosmicsCandidate*)
   {
      return GenerateInitInstanceLocal((::HMdcCosmicsCandidate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcCosmicsCandidate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HCosmicCalibEvSkip_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HCosmicCalibEvSkip(void *p = 0);
   static void *newArray_HCosmicCalibEvSkip(Long_t size, void *p);
   static void delete_HCosmicCalibEvSkip(void *p);
   static void deleteArray_HCosmicCalibEvSkip(void *p);
   static void destruct_HCosmicCalibEvSkip(void *p);
   static void streamer_HCosmicCalibEvSkip(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HCosmicCalibEvSkip*)
   {
      ::HCosmicCalibEvSkip *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HCosmicCalibEvSkip >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HCosmicCalibEvSkip", ::HCosmicCalibEvSkip::Class_Version(), "././hmdccosmicscandidate.h", 214,
                  typeid(::HCosmicCalibEvSkip), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HCosmicCalibEvSkip::Dictionary, isa_proxy, 0,
                  sizeof(::HCosmicCalibEvSkip) );
      instance.SetNew(&new_HCosmicCalibEvSkip);
      instance.SetNewArray(&newArray_HCosmicCalibEvSkip);
      instance.SetDelete(&delete_HCosmicCalibEvSkip);
      instance.SetDeleteArray(&deleteArray_HCosmicCalibEvSkip);
      instance.SetDestructor(&destruct_HCosmicCalibEvSkip);
      instance.SetStreamerFunc(&streamer_HCosmicCalibEvSkip);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HCosmicCalibEvSkip*)
   {
      return GenerateInitInstanceLocal((::HCosmicCalibEvSkip*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HCosmicCalibEvSkip*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HAlignmentMeta_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HAlignmentMeta(void *p = 0);
   static void *newArray_HAlignmentMeta(Long_t size, void *p);
   static void delete_HAlignmentMeta(void *p);
   static void deleteArray_HAlignmentMeta(void *p);
   static void destruct_HAlignmentMeta(void *p);
   static void streamer_HAlignmentMeta(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HAlignmentMeta*)
   {
      ::HAlignmentMeta *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HAlignmentMeta >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HAlignmentMeta", ::HAlignmentMeta::Class_Version(), "././halignmentmeta.h", 13,
                  typeid(::HAlignmentMeta), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HAlignmentMeta::Dictionary, isa_proxy, 0,
                  sizeof(::HAlignmentMeta) );
      instance.SetNew(&new_HAlignmentMeta);
      instance.SetNewArray(&newArray_HAlignmentMeta);
      instance.SetDelete(&delete_HAlignmentMeta);
      instance.SetDeleteArray(&deleteArray_HAlignmentMeta);
      instance.SetDestructor(&destruct_HAlignmentMeta);
      instance.SetStreamerFunc(&streamer_HAlignmentMeta);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HAlignmentMeta*)
   {
      return GenerateInitInstanceLocal((::HAlignmentMeta*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HAlignmentMeta*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Mille_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Mille_Dictionary();
   static void delete_Mille(void *p);
   static void deleteArray_Mille(void *p);
   static void destruct_Mille(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Mille*)
   {
      ::Mille *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Mille),0);
      static ::ROOT::TGenericClassInfo 
         instance("Mille", "././Mille.h", 27,
                  typeid(::Mille), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &Mille_Dictionary, isa_proxy, 0,
                  sizeof(::Mille) );
      instance.SetDelete(&delete_Mille);
      instance.SetDeleteArray(&deleteArray_Mille);
      instance.SetDestructor(&destruct_Mille);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Mille*)
   {
      return GenerateInitInstanceLocal((::Mille*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Mille*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Mille_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::Mille*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcMille_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcMille(void *p = 0);
   static void *newArray_HMdcMille(Long_t size, void *p);
   static void delete_HMdcMille(void *p);
   static void deleteArray_HMdcMille(void *p);
   static void destruct_HMdcMille(void *p);
   static void streamer_HMdcMille(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcMille*)
   {
      ::HMdcMille *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcMille >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcMille", ::HMdcMille::Class_Version(), "././hmdcmille.h", 20,
                  typeid(::HMdcMille), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcMille::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcMille) );
      instance.SetNew(&new_HMdcMille);
      instance.SetNewArray(&newArray_HMdcMille);
      instance.SetDelete(&delete_HMdcMille);
      instance.SetDeleteArray(&deleteArray_HMdcMille);
      instance.SetDestructor(&destruct_HMdcMille);
      instance.SetStreamerFunc(&streamer_HMdcMille);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcMille*)
   {
      return GenerateInitInstanceLocal((::HMdcMille*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcMille*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HAlignmentGData::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HAlignmentGData::Class_Name()
{
   return "HAlignmentGData";
}

//______________________________________________________________________________
const char *HAlignmentGData::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HAlignmentGData::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HAlignmentGData::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HAlignmentGData::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGData*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HAlignmentGGeom::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HAlignmentGGeom::Class_Name()
{
   return "HAlignmentGGeom";
}

//______________________________________________________________________________
const char *HAlignmentGGeom::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGGeom*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HAlignmentGGeom::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGGeom*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HAlignmentGGeom::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGGeom*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HAlignmentGGeom::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGGeom*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HAlignmentGParticle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HAlignmentGParticle::Class_Name()
{
   return "HAlignmentGParticle";
}

//______________________________________________________________________________
const char *HAlignmentGParticle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HAlignmentGParticle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HAlignmentGParticle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HAlignmentGParticle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGParticle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HAlignmentGRotations::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HAlignmentGRotations::Class_Name()
{
   return "HAlignmentGRotations";
}

//______________________________________________________________________________
const char *HAlignmentGRotations::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGRotations*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HAlignmentGRotations::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGRotations*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HAlignmentGRotations::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGRotations*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HAlignmentGRotations::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGRotations*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HAlignmentGBase::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HAlignmentGBase::Class_Name()
{
   return "HAlignmentGBase";
}

//______________________________________________________________________________
const char *HAlignmentGBase::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HAlignmentGBase::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HAlignmentGBase::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HAlignmentGBase::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGBase*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HAlignmentGParticleBase::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HAlignmentGParticleBase::Class_Name()
{
   return "HAlignmentGParticleBase";
}

//______________________________________________________________________________
const char *HAlignmentGParticleBase::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGParticleBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HAlignmentGParticleBase::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGParticleBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HAlignmentGParticleBase::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGParticleBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HAlignmentGParticleBase::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGParticleBase*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HAlignmentGNoMag::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HAlignmentGNoMag::Class_Name()
{
   return "HAlignmentGNoMag";
}

//______________________________________________________________________________
const char *HAlignmentGNoMag::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGNoMag*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HAlignmentGNoMag::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGNoMag*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HAlignmentGNoMag::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGNoMag*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HAlignmentGNoMag::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGNoMag*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HAlignmentGCosmics::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HAlignmentGCosmics::Class_Name()
{
   return "HAlignmentGCosmics";
}

//______________________________________________________________________________
const char *HAlignmentGCosmics::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGCosmics*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HAlignmentGCosmics::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGCosmics*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HAlignmentGCosmics::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGCosmics*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HAlignmentGCosmics::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGCosmics*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HAlignmentGShower::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HAlignmentGShower::Class_Name()
{
   return "HAlignmentGShower";
}

//______________________________________________________________________________
const char *HAlignmentGShower::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGShower*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HAlignmentGShower::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGShower*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HAlignmentGShower::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGShower*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HAlignmentGShower::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentGShower*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcCosmicsCandidate::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcCosmicsCandidate::Class_Name()
{
   return "HMdcCosmicsCandidate";
}

//______________________________________________________________________________
const char *HMdcCosmicsCandidate::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCosmicsCandidate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcCosmicsCandidate::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCosmicsCandidate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcCosmicsCandidate::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCosmicsCandidate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcCosmicsCandidate::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcCosmicsCandidate*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HCosmicCalibEvSkip::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HCosmicCalibEvSkip::Class_Name()
{
   return "HCosmicCalibEvSkip";
}

//______________________________________________________________________________
const char *HCosmicCalibEvSkip::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HCosmicCalibEvSkip*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HCosmicCalibEvSkip::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HCosmicCalibEvSkip*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HCosmicCalibEvSkip::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HCosmicCalibEvSkip*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HCosmicCalibEvSkip::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HCosmicCalibEvSkip*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HAlignmentMeta::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HAlignmentMeta::Class_Name()
{
   return "HAlignmentMeta";
}

//______________________________________________________________________________
const char *HAlignmentMeta::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentMeta*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HAlignmentMeta::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentMeta*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HAlignmentMeta::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentMeta*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HAlignmentMeta::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HAlignmentMeta*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcMille::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcMille::Class_Name()
{
   return "HMdcMille";
}

//______________________________________________________________________________
const char *HMdcMille::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcMille*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcMille::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcMille*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcMille::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcMille*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcMille::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcMille*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HAlignmentGData::Streamer(TBuffer &R__b)
{
   // Stream an object of class HAlignmentGData.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HAlignmentGData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HAlignmentGData.
      TClass *R__cl = ::HAlignmentGData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Aplane", &Aplane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Bplane", &Bplane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Cplane", &Cplane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Dplane", &Dplane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Xp", &Xp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Yp", &Yp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zp", &Zp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "POINT", &POINT);
      R__insp.InspectMember(POINT, "POINT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DIRPOINT", &DIRPOINT);
      R__insp.InspectMember(DIRPOINT, "DIRPOINT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertexPoint1", &vertexPoint1);
      R__insp.InspectMember(vertexPoint1, "vertexPoint1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertexPointDir1", &vertexPointDir1);
      R__insp.InspectMember(vertexPointDir1, "vertexPointDir1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertexPoint2", &vertexPoint2);
      R__insp.InspectMember(vertexPoint2, "vertexPoint2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertexPointDir2", &vertexPointDir2);
      R__insp.InspectMember(vertexPointDir2, "vertexPointDir2.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HAlignmentGData(void *p) {
      return  p ? new(p) ::HAlignmentGData : new ::HAlignmentGData;
   }
   static void *newArray_HAlignmentGData(Long_t nElements, void *p) {
      return p ? new(p) ::HAlignmentGData[nElements] : new ::HAlignmentGData[nElements];
   }
   // Wrapper around operator delete
   static void delete_HAlignmentGData(void *p) {
      delete ((::HAlignmentGData*)p);
   }
   static void deleteArray_HAlignmentGData(void *p) {
      delete [] ((::HAlignmentGData*)p);
   }
   static void destruct_HAlignmentGData(void *p) {
      typedef ::HAlignmentGData current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HAlignmentGData(TBuffer &buf, void *obj) {
      ((::HAlignmentGData*)obj)->::HAlignmentGData::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HAlignmentGData

//______________________________________________________________________________
void HAlignmentGGeom::Streamer(TBuffer &R__b)
{
   // Stream an object of class HAlignmentGGeom.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HAlignmentGGeom::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HAlignmentGGeom.
      TClass *R__cl = ::HAlignmentGGeom::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*alignData", &alignData);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HAlignmentGGeom(void *p) {
      return  p ? new(p) ::HAlignmentGGeom : new ::HAlignmentGGeom;
   }
   static void *newArray_HAlignmentGGeom(Long_t nElements, void *p) {
      return p ? new(p) ::HAlignmentGGeom[nElements] : new ::HAlignmentGGeom[nElements];
   }
   // Wrapper around operator delete
   static void delete_HAlignmentGGeom(void *p) {
      delete ((::HAlignmentGGeom*)p);
   }
   static void deleteArray_HAlignmentGGeom(void *p) {
      delete [] ((::HAlignmentGGeom*)p);
   }
   static void destruct_HAlignmentGGeom(void *p) {
      typedef ::HAlignmentGGeom current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HAlignmentGGeom(TBuffer &buf, void *obj) {
      ((::HAlignmentGGeom*)obj)->::HAlignmentGGeom::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HAlignmentGGeom

//______________________________________________________________________________
void HAlignmentGBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class HAlignmentGBase.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HAlignmentGBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HAlignmentGBase.
      TClass *R__cl = ::HAlignmentGBase::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*alignTracks", &alignTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoClones", &histoClones);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histoNumbers", &histoNumbers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ff", &ff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nt", &nt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMinuit", &fMinuit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "UsedMod", &UsedMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "UsedSec", &UsedSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAlignGeom", &fAlignGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAlignRot", &fAlignRot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transBefore", &transBefore);
      R__insp.InspectMember(transBefore, "transBefore.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transAfter", &transAfter);
      R__insp.InspectMember(transAfter, "transAfter.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cloneSize", &cloneSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntEntries", &ntEntries);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HAlignmentGBase(void *p) {
      delete ((::HAlignmentGBase*)p);
   }
   static void deleteArray_HAlignmentGBase(void *p) {
      delete [] ((::HAlignmentGBase*)p);
   }
   static void destruct_HAlignmentGBase(void *p) {
      typedef ::HAlignmentGBase current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HAlignmentGBase(TBuffer &buf, void *obj) {
      ((::HAlignmentGBase*)obj)->::HAlignmentGBase::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HAlignmentGBase

//______________________________________________________________________________
void HAlignmentGParticleBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class HAlignmentGParticleBase.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HAlignmentGParticleBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HAlignmentGParticleBase.
      TClass *R__cl = ::HAlignmentGParticleBase::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGood", &isGood);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HAlignmentGParticleBase(void *p) {
      delete ((::HAlignmentGParticleBase*)p);
   }
   static void deleteArray_HAlignmentGParticleBase(void *p) {
      delete [] ((::HAlignmentGParticleBase*)p);
   }
   static void destruct_HAlignmentGParticleBase(void *p) {
      typedef ::HAlignmentGParticleBase current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HAlignmentGParticleBase(TBuffer &buf, void *obj) {
      ((::HAlignmentGParticleBase*)obj)->::HAlignmentGParticleBase::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HAlignmentGParticleBase

//______________________________________________________________________________
void HAlignmentGParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class HAlignmentGParticle.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HAlignmentGParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HAlignmentGParticle.
      TClass *R__cl = ::HAlignmentGParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "X[4]", X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Xdir[4]", Xdir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Y[4]", Y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ydir[4]", Ydir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Point[4]", Point);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Dir[4]", Dir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGood", &isGood);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HAlignmentGParticle(void *p) {
      return  p ? new(p) ::HAlignmentGParticle : new ::HAlignmentGParticle;
   }
   static void *newArray_HAlignmentGParticle(Long_t nElements, void *p) {
      return p ? new(p) ::HAlignmentGParticle[nElements] : new ::HAlignmentGParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_HAlignmentGParticle(void *p) {
      delete ((::HAlignmentGParticle*)p);
   }
   static void deleteArray_HAlignmentGParticle(void *p) {
      delete [] ((::HAlignmentGParticle*)p);
   }
   static void destruct_HAlignmentGParticle(void *p) {
      typedef ::HAlignmentGParticle current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HAlignmentGParticle(TBuffer &buf, void *obj) {
      ((::HAlignmentGParticle*)obj)->::HAlignmentGParticle::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HAlignmentGParticle

//______________________________________________________________________________
void HAlignmentGNoMag::Streamer(TBuffer &R__b)
{
   // Stream an object of class HAlignmentGNoMag.

   HAlignmentGBase::Streamer(R__b);
}

//______________________________________________________________________________
void HAlignmentGNoMag::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HAlignmentGNoMag.
      TClass *R__cl = ::HAlignmentGNoMag::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isThirdChamber", &isThirdChamber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFouthChamber", &isFouthChamber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AcceptRadius", &AcceptRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AcceptRadiusFour", &AcceptRadiusFour);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AcceptRadiusTarg", &AcceptRadiusTarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AcceptDir", &AcceptDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AcceptDirFour", &AcceptDirFour);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitVersion", &fitVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfTracks", &numberOfTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isAligned", &isAligned);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "in", (void*)&in);
      R__insp.InspectMember("ifstream", (void*)&in, "in.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "inName", &inName);
      R__insp.InspectMember(inName, "inName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outName", &outName);
      R__insp.InspectMember(outName, "outName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEvent", &nEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mod", &mod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "X", &X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Y", &Y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Xdir", &Xdir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ydir", &Ydir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FirstEvent", &FirstEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FirstMod", &FirstMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FirstX", &FirstX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FirstXdir", &FirstXdir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FirstY", &FirstY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FirstYdir", &FirstYdir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCount[4]", nCount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*testP", &testP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAlignParticle", &fAlignParticle);
      R__insp.InspectMember(fAlignParticle, "fAlignParticle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "XValue[4][50]", XValue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "XdirValue[4][50]", XdirValue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "YValue[4][50]", YValue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "YdirValue[4][50]", YdirValue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoVertex", &histoVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoDiffYBeforeMod3", &histoDiffYBeforeMod3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoDiffYAfterMod3", &histoDiffYAfterMod3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoDiffYBeforeVsPhiMod3", &histoDiffYBeforeVsPhiMod3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoDiffYAfterVsPhiMod3", &histoDiffYAfterVsPhiMod3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoDiffYBeforeVsThetaMod3", &histoDiffYBeforeVsThetaMod3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoDiffYAfterVsThetaMod3", &histoDiffYAfterVsThetaMod3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoDiffYBeforeMod4", &histoDiffYBeforeMod4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoDiffYAfterMod4", &histoDiffYAfterMod4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoDiffYBeforeVsPhiMod4", &histoDiffYBeforeVsPhiMod4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoDiffYAfterVsPhiMod4", &histoDiffYAfterVsPhiMod4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoDiffYBeforeVsThetaMod4", &histoDiffYBeforeVsThetaMod4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoDiffYAfterVsThetaMod4", &histoDiffYAfterVsThetaMod4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoTheta", &histoTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*RasterPlotBefore3", &RasterPlotBefore3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*RasterPlotAfter3", &RasterPlotAfter3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*RasterPlotBefore4", &RasterPlotBefore4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*RasterPlotAfter4", &RasterPlotAfter4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transBefore[4]", transBefore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transAfter[4]", transAfter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transStarting[4]", transStarting);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcSetup[6][4]", mdcSetup);
      HAlignmentGBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HAlignmentGNoMag(void *p) {
      return  p ? new(p) ::HAlignmentGNoMag : new ::HAlignmentGNoMag;
   }
   static void *newArray_HAlignmentGNoMag(Long_t nElements, void *p) {
      return p ? new(p) ::HAlignmentGNoMag[nElements] : new ::HAlignmentGNoMag[nElements];
   }
   // Wrapper around operator delete
   static void delete_HAlignmentGNoMag(void *p) {
      delete ((::HAlignmentGNoMag*)p);
   }
   static void deleteArray_HAlignmentGNoMag(void *p) {
      delete [] ((::HAlignmentGNoMag*)p);
   }
   static void destruct_HAlignmentGNoMag(void *p) {
      typedef ::HAlignmentGNoMag current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HAlignmentGNoMag(TBuffer &buf, void *obj) {
      ((::HAlignmentGNoMag*)obj)->::HAlignmentGNoMag::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HAlignmentGNoMag

//______________________________________________________________________________
void HAlignmentGCosmics::Streamer(TBuffer &R__b)
{
   // Stream an object of class HAlignmentGCosmics.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HAlignmentGCosmics::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HAlignmentGCosmics.
      TClass *R__cl = ::HAlignmentGCosmics::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "accRange", &accRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "accRange3", &accRange3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "localAlign", &localAlign);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fixedSector", &fixedSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMinuit", &fMinuit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nt", &nt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "refTrans[6]", refTrans);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transGSIBefore[6]", transGSIBefore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transGSIAfter[6]", transGSIAfter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transDubna[6]", transDubna);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAlignGeom", &fAlignGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAlignRot", &fAlignRot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoX0", &histoX0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoY0", &histoY0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoX0After", &histoX0After);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoY0After", &histoY0After);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoX1", &histoX1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoY1", &histoY1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoX1After", &histoX1After);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoY1After", &histoY1After);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoX2", &histoX2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoY2", &histoY2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoX2After", &histoX2After);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoY2After", &histoY2After);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoX03", &histoX03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoY03", &histoY03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoX0After3", &histoX0After3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoY0After3", &histoY0After3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoX13", &histoX13);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoY13", &histoY13);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoX1After3", &histoX1After3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoY1After3", &histoY1After3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoX23", &histoX23);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoY23", &histoY23);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoX2After3", &histoX2After3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histoY2After3", &histoY2After3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1", &x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y1", &y1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x2", &x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y2", &y2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x3", &x3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y3", &y3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x4", &x4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y4", &y4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sec1", &sec1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sec2", &sec2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "missing", &missing);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HAlignmentGCosmics(void *p) {
      return  p ? new(p) ::HAlignmentGCosmics : new ::HAlignmentGCosmics;
   }
   static void *newArray_HAlignmentGCosmics(Long_t nElements, void *p) {
      return p ? new(p) ::HAlignmentGCosmics[nElements] : new ::HAlignmentGCosmics[nElements];
   }
   // Wrapper around operator delete
   static void delete_HAlignmentGCosmics(void *p) {
      delete ((::HAlignmentGCosmics*)p);
   }
   static void deleteArray_HAlignmentGCosmics(void *p) {
      delete [] ((::HAlignmentGCosmics*)p);
   }
   static void destruct_HAlignmentGCosmics(void *p) {
      typedef ::HAlignmentGCosmics current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HAlignmentGCosmics(TBuffer &buf, void *obj) {
      ((::HAlignmentGCosmics*)obj)->::HAlignmentGCosmics::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HAlignmentGCosmics

//______________________________________________________________________________
void HAlignmentGRotations::Streamer(TBuffer &R__b)
{
   // Stream an object of class HAlignmentGRotations.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HAlignmentGRotations::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HAlignmentGRotations.
      TClass *R__cl = ::HAlignmentGRotations::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*transMdcLabToMod[6][4]", &transMdcLabToMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*transMdcSecToMod[6][4]", &transMdcSecToMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*transMdcLabToSec[6]", &transMdcLabToSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGetCont", &fGetCont);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HAlignmentGRotations(void *p) {
      return  p ? new(p) ::HAlignmentGRotations : new ::HAlignmentGRotations;
   }
   static void *newArray_HAlignmentGRotations(Long_t nElements, void *p) {
      return p ? new(p) ::HAlignmentGRotations[nElements] : new ::HAlignmentGRotations[nElements];
   }
   // Wrapper around operator delete
   static void delete_HAlignmentGRotations(void *p) {
      delete ((::HAlignmentGRotations*)p);
   }
   static void deleteArray_HAlignmentGRotations(void *p) {
      delete [] ((::HAlignmentGRotations*)p);
   }
   static void destruct_HAlignmentGRotations(void *p) {
      typedef ::HAlignmentGRotations current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HAlignmentGRotations(TBuffer &buf, void *obj) {
      ((::HAlignmentGRotations*)obj)->::HAlignmentGRotations::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HAlignmentGRotations

//______________________________________________________________________________
void HAlignmentGShower::Streamer(TBuffer &R__b)
{
   // Stream an object of class HAlignmentGShower.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HAlignmentGShower::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HAlignmentGShower.
      TClass *R__cl = ::HAlignmentGShower::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "point1", &point1);
      R__insp.InspectMember(point1, "point1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "point2", &point2);
      R__insp.InspectMember(point2, "point2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pointSh", &pointSh);
      R__insp.InspectMember(pointSh, "pointSh.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alignSec", &alignSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diffZ", &diffZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diffX", &diffX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diffY", &diffY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xCr", &xCr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yCr", &yCr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alignMode", &alignMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAlignGeom", &fAlignGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAlignRot", &fAlignRot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transOld", &transOld);
      R__insp.InspectMember(transOld, "transOld.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transNew", &transNew);
      R__insp.InspectMember(transNew, "transNew.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMinuit", &fMinuit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nt", &nt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1", &x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y1", &y1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z1", &z1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x2", &x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y2", &y2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z2", &z2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xsh", &xsh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ysh", &ysh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zsh", &zsh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xshl", &xshl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yshl", &yshl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zshl", &zshl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sec", &sec);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HAlignmentGShower(void *p) {
      return  p ? new(p) ::HAlignmentGShower : new ::HAlignmentGShower;
   }
   static void *newArray_HAlignmentGShower(Long_t nElements, void *p) {
      return p ? new(p) ::HAlignmentGShower[nElements] : new ::HAlignmentGShower[nElements];
   }
   // Wrapper around operator delete
   static void delete_HAlignmentGShower(void *p) {
      delete ((::HAlignmentGShower*)p);
   }
   static void deleteArray_HAlignmentGShower(void *p) {
      delete [] ((::HAlignmentGShower*)p);
   }
   static void destruct_HAlignmentGShower(void *p) {
      typedef ::HAlignmentGShower current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HAlignmentGShower(TBuffer &buf, void *obj) {
      ((::HAlignmentGShower*)obj)->::HAlignmentGShower::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HAlignmentGShower

//______________________________________________________________________________
void HMdcCosmicsCandidate::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcCosmicsCandidate.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcCosmicsCandidate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcCosmicsCandidate.
      TClass *R__cl = ::HMdcCosmicsCandidate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metaHits[250]", metaHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMetaHits", &nMetaHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMetaHitSec[6]", nMetaHitSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSectors", &nSectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zTofShift", &zTofShift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zRpcShift", &zRpcShift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGeant", &isGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWiresStat[6][4]", nWiresStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numWiresAllMod", &numWiresAllMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hit1", &hit1);
      R__insp.InspectMember(hit1, "hit1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hit2", &hit2);
      R__insp.InspectMember(hit2, "hit2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bestTrCand", (void*)&bestTrCand);
      R__insp.InspectMember("HMdcCosmicsCandidate::TrackCand", (void*)&bestTrCand, "bestTrCand.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "currTrCand", (void*)&currTrCand);
      R__insp.InspectMember("HMdcCosmicsCandidate::TrackCand", (void*)&currTrCand, "currTrCand.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "betaMin", &betaMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "betaMax", &betaMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dCellWind[4]", dCellWind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayInModCut", &nLayInModCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxNWiresOutTr", &maxNWiresOutTr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "selQualCut", &selQualCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEventsTot", &nEventsTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEventsSel", &nEventsSel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSelTr[9]", nSelTr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackScaling[9]", trackScaling);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSelTrSc[9]", nSelTrSc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEventsSelSc", &nEventsSelSc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rndm", &rndm);
      R__insp.InspectMember(rndm, "rndm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatTof", &pCatTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useTofCat", &useTofCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatRpc", &pCatRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useRpcCat", &useRpcCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatMdcCal1", &pCatMdcCal1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locCal1", &locCal1);
      R__insp.InspectMember(locCal1, "locCal1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCatMdcClus", &pCatMdcClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locClus", &locClus);
      R__insp.InspectMember(locClus, "locClus.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sizes", &sizes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGetCont", &pGetCont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", &index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "returnFlag", &returnFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcsetup[6][4]", mdcsetup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "setParContStat", &setParContStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "laySize[4]", laySize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hsBeta", &hsBeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*plStat", &plStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*plQualVsWrLo", &plQualVsWrLo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hsDCell[6][4]", &hsDCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hsDCellL[6][4][6]", &hsDCellL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "makeHists", &makeHists);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histFile", &histFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histFileName", &histFileName);
      R__insp.InspectMember(histFileName, "histFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histFileOption", &histFileOption);
      R__insp.InspectMember(histFileOption, "histFileOption.");
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcCosmicsCandidate(void *p) {
      return  p ? new(p) ::HMdcCosmicsCandidate : new ::HMdcCosmicsCandidate;
   }
   static void *newArray_HMdcCosmicsCandidate(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcCosmicsCandidate[nElements] : new ::HMdcCosmicsCandidate[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcCosmicsCandidate(void *p) {
      delete ((::HMdcCosmicsCandidate*)p);
   }
   static void deleteArray_HMdcCosmicsCandidate(void *p) {
      delete [] ((::HMdcCosmicsCandidate*)p);
   }
   static void destruct_HMdcCosmicsCandidate(void *p) {
      typedef ::HMdcCosmicsCandidate current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcCosmicsCandidate(TBuffer &buf, void *obj) {
      ((::HMdcCosmicsCandidate*)obj)->::HMdcCosmicsCandidate::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcCosmicsCandidate

//______________________________________________________________________________
void HCosmicCalibEvSkip::Streamer(TBuffer &R__b)
{
   // Stream an object of class HCosmicCalibEvSkip.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HCosmicCalibEvSkip::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HCosmicCalibEvSkip.
      TClass *R__cl = ::HCosmicCalibEvSkip::IsA();
      if (R__cl || R__insp.IsA()) { }
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HCosmicCalibEvSkip(void *p) {
      return  p ? new(p) ::HCosmicCalibEvSkip : new ::HCosmicCalibEvSkip;
   }
   static void *newArray_HCosmicCalibEvSkip(Long_t nElements, void *p) {
      return p ? new(p) ::HCosmicCalibEvSkip[nElements] : new ::HCosmicCalibEvSkip[nElements];
   }
   // Wrapper around operator delete
   static void delete_HCosmicCalibEvSkip(void *p) {
      delete ((::HCosmicCalibEvSkip*)p);
   }
   static void deleteArray_HCosmicCalibEvSkip(void *p) {
      delete [] ((::HCosmicCalibEvSkip*)p);
   }
   static void destruct_HCosmicCalibEvSkip(void *p) {
      typedef ::HCosmicCalibEvSkip current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HCosmicCalibEvSkip(TBuffer &buf, void *obj) {
      ((::HCosmicCalibEvSkip*)obj)->::HCosmicCalibEvSkip::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HCosmicCalibEvSkip

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_Mille(void *p) {
      delete ((::Mille*)p);
   }
   static void deleteArray_Mille(void *p) {
      delete [] ((::Mille*)p);
   }
   static void destruct_Mille(void *p) {
      typedef ::Mille current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Mille

//______________________________________________________________________________
void HMdcMille::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcMille.

   HMdc12Fit::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcMille::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcMille.
      TClass *R__cl = ::HMdcMille::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mille", &mille);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shiftType", &shiftType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fixFitTOffset", &fixFitTOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parSteps[40]", parSteps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "derNorm[40]", derNorm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracks", &nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWiresTot", &nWiresTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayersTot", &nLayersTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doCopyGeomFile", &doCopyGeomFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doCopySumShFile", &doCopySumShFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doCopyResFile", &doCopyResFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doCopyLogFile", &doCopyLogFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doCopyHisFile", &doCopyHisFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useMdcShParOnly", &useMdcShParOnly);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beamTimeId", &beamTimeId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGetCont", &pGetCont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcDet", &pMdcDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "milleFileName", &milleFileName);
      R__insp.InspectMember(milleFileName, "milleFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBinaryFiles", &nBinaryFiles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "milleFileSize", &milleFileSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellThicknFree", &cellThicknFree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useSector[6]", useSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nClustersCut", &nClustersCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWiresCut[6]", nWiresCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filteringFlag", &filteringFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWiresMin", &nWiresMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMods[6]", nMods);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWiresMinTr", &nWiresMinTr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaCut", &thetaCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSCMod[24]", &pSCMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSCLayer[144]", &pSCLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "posShifts[40]", posShifts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "negShifts[40]", negShifts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "posLThSh[6]", posLThSh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "negLThSh[6]", negLThSh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "derLThNorm[6]", derLThNorm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layPosSh[144][40]", layPosSh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layNegSh[144][40]", layNegSh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shitsInfo[9]", shitsInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayerParts[144]", nLayerParts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isMdcInAlign[6][4]", isMdcInAlign);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*wireData", &wireData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layer", &layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iSec", &iSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iMod", &iMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iLay", &iLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layerPart", &layerPart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doLayP2Align", &doLayP2Align);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*layPosShCurr", &layPosShCurr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*layNegShCurr", &layNegShCurr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*finalParam", &finalParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p1", &p1);
      R__insp.InspectMember(p1, "p1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p2", &p2);
      R__insp.InspectMember(p2, "p2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locDer[4]", locDer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globDer[40]", globDer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globLabel[40]", globLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pedeResFName", &pedeResFName);
      R__insp.InspectMember(pedeResFName, "pedeResFName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iteration", &iteration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepIter", &stepIter);
      R__insp.InspectMember(stepIter, "stepIter.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumOfShiftsFName", &sumOfShiftsFName);
      R__insp.InspectMember(sumOfShiftsFName, "sumOfShiftsFName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geomParFileName", &geomParFileName);
      R__insp.InspectMember(geomParFileName, "geomParFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGeomFileExist", &isGeomFileExist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isGeomChanged", &isGeomChanged);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcMods[6][4]", mdcMods);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shiftSysMdc[6][4]", shiftSysMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nParMax", &nParMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shiftsMdc[6][4][9]", shiftsMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaMdc[6][4][9]", sigmaMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shiftSysLay[6][4][6]", shiftSysLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shiftsLay[6][4][6][9]", shiftsLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaLay[6][4][6][9]", sigmaLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "createPedeInFile", &createPedeInFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pedeInParFName", &pedeInParFName);
      R__insp.InspectMember(pedeInParFName, "pedeInParFName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mShFlag[6][4][9]", mShFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lShFlag[6][4][6][9]", lShFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mFixFlag[6][4][9]", mFixFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lFixFlag[6][4][6][9]", lFixFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofDerCorr[24][9]", tofDerCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHists", &nHists);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histInd[6]", histInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crPedeTaskFile", &crPedeTaskFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pedeTaskFileName", &pedeTaskFileName);
      R__insp.InspectMember(pedeTaskFileName, "pedeTaskFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "method", &method);
      R__insp.InspectMember(method, "method.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numOfIter", &numOfIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "accuracy", &accuracy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mthDescr", &mthDescr);
      R__insp.InspectMember(mthDescr, "mthDescr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bandwidth", &bandwidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parConstrainFile", &parConstrainFile);
      R__insp.InspectMember(parConstrainFile, "parConstrainFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "printDebugFlag", &printDebugFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doHists", &doHists);
      HMdc12Fit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcMille(void *p) {
      return  p ? new(p) ::HMdcMille : new ::HMdcMille;
   }
   static void *newArray_HMdcMille(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcMille[nElements] : new ::HMdcMille[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcMille(void *p) {
      delete ((::HMdcMille*)p);
   }
   static void deleteArray_HMdcMille(void *p) {
      delete [] ((::HMdcMille*)p);
   }
   static void destruct_HMdcMille(void *p) {
      typedef ::HMdcMille current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcMille(TBuffer &buf, void *obj) {
      ((::HMdcMille*)obj)->::HMdcMille::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcMille

//______________________________________________________________________________
void HAlignmentMeta::Streamer(TBuffer &R__b)
{
   // Stream an object of class HAlignmentMeta.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HAlignmentMeta::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HAlignmentMeta.
      TClass *R__cl = ::HAlignmentMeta::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tracks[1000000]", tracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metaDetector", &metaDetector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yMinMetaLocal", &yMinMetaLocal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yMaxMetaLocal", &yMaxMetaLocal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alignSec", &alignSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracks", &nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackSelecCutX", &trackSelecCutX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackSelecCutY", &trackSelecCutY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filterFlag", &filterFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transMetaModLabOld[8]", transMetaModLabOld);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transMetaModLabNew[8]", transMetaModLabNew);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transMetaModSecOld[8]", transMetaModSecOld);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transMetaModSecNew[8]", transMetaModSecNew);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMetaModules", &nMetaModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitTofModYPos", &fitTofModYPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofModYSh[8]", tofModYSh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellStat[192]", cellStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellXCorr[192]", cellXCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCells", &nCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCellsTot", &nCellsTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xShitfRpc", &xShitfRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calcCellXOffset", &calcCellXOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nt", &nt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sec", &sec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1", &x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y1", &y1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z1", &z1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x2", &x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y2", &y2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z2", &z2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metaModule", &metaModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metaColumn", &metaColumn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metaCell", &metaCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xMetaLocal", &xMetaLocal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yMetaLocal", &yMetaLocal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zMetaLocal", &zMetaLocal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xRMS", &xRMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yRMS", &yRMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zRMS", &zRMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanX", &meanX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmX", &sigmX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanY", &meanY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmY", &sigmY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanZ", &meanZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmZ", &sigmZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFirstSIter", &isFirstSIter);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HAlignmentMeta(void *p) {
      return  p ? new(p) ::HAlignmentMeta : new ::HAlignmentMeta;
   }
   static void *newArray_HAlignmentMeta(Long_t nElements, void *p) {
      return p ? new(p) ::HAlignmentMeta[nElements] : new ::HAlignmentMeta[nElements];
   }
   // Wrapper around operator delete
   static void delete_HAlignmentMeta(void *p) {
      delete ((::HAlignmentMeta*)p);
   }
   static void deleteArray_HAlignmentMeta(void *p) {
      delete [] ((::HAlignmentMeta*)p);
   }
   static void destruct_HAlignmentMeta(void *p) {
      typedef ::HAlignmentMeta current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HAlignmentMeta(TBuffer &buf, void *obj) {
      ((::HAlignmentMeta*)obj)->::HAlignmentMeta::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HAlignmentMeta

/********************************************************
* ../build/pc/AlignmentDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableAlignmentDict();

extern "C" void G__set_cpp_environmentAlignmentDict() {
  G__cpp_reset_tagtableAlignmentDict();
}
#include <new>
extern "C" int G__cpp_dllrevAlignmentDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HAlignmentGData */
static int G__AlignmentDict_189_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentGData[n];
     } else {
       p = new((void*) gvp) HAlignmentGData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentGData;
     } else {
       p = new((void*) gvp) HAlignmentGData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HAlignmentGData::Instance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HAlignmentGData::DeleteInstance();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HAlignmentGData*) G__getstructoffset())->CalcDistanceToPlane(*((HGeomVector*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HAlignmentGData*) G__getstructoffset())->CalcDistanceToLine(*((HGeomVector*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HAlignmentGData*) G__getstructoffset())->CalcVertex();
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HAlignmentGData*) G__getstructoffset())->CalcIntersection();
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGData*) G__getstructoffset())->SetPlane(*((HGeomVector*) G__int(libp->para[0])), *((HGeomVector*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGData*) G__getstructoffset())->SetPlane(*((HGeomTransform*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGData*) G__getstructoffset())->SetLine(*((HGeomVector*) G__int(libp->para[0])), *((HGeomVector*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGData*) G__getstructoffset())->SetVertexLine1(*((HGeomVector*) G__int(libp->para[0])), *((HGeomVector*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGData*) G__getstructoffset())->SetVertexLine2(*((HGeomVector*) G__int(libp->para[0])), *((HGeomVector*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HAlignmentGData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HAlignmentGData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HAlignmentGData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_189_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlignmentDict_189_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HAlignmentGData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HAlignmentGData(*(HAlignmentGData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HAlignmentGData G__THAlignmentGData;
static int G__AlignmentDict_189_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HAlignmentGData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HAlignmentGData*) (soff+(sizeof(HAlignmentGData)*i)))->~G__THAlignmentGData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HAlignmentGData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HAlignmentGData*) (soff))->~G__THAlignmentGData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlignmentDict_189_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGData* dest = (HAlignmentGData*) G__getstructoffset();
   *dest = *(HAlignmentGData*) libp->para[0].ref;
   const HAlignmentGData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HAlignmentGGeom */
static int G__AlignmentDict_190_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGGeom* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentGGeom[n];
     } else {
       p = new((void*) gvp) HAlignmentGGeom[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentGGeom;
     } else {
       p = new((void*) gvp) HAlignmentGGeom;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGGeom*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGGeom*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HAlignmentGGeom*) G__getstructoffset())->CalcDistanceToPlane(*((HGeomVector*) G__int(libp->para[0])), *((HGeomVector*) G__int(libp->para[1]))
, *((HGeomVector*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HAlignmentGGeom*) G__getstructoffset())->CalcDistanceToPlane(*((HGeomVector*) G__int(libp->para[0])), *((HGeomTransform*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HAlignmentGGeom*) G__getstructoffset())->CalcDistanceToLine(*((HGeomVector*) G__int(libp->para[0])), *((HGeomVector*) G__int(libp->para[1]))
, *((HGeomVector*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HAlignmentGGeom*) G__getstructoffset())->CalcVertex(*((HGeomVector*) G__int(libp->para[0])), *((HGeomVector*) G__int(libp->para[1]))
, *((HGeomVector*) G__int(libp->para[2])), *((HGeomVector*) G__int(libp->para[3])));
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HAlignmentGGeom*) G__getstructoffset())->CalcIntersection(*((HGeomVector*) G__int(libp->para[0])), *((HGeomVector*) G__int(libp->para[1]))
, *((HGeomVector*) G__int(libp->para[2])), *((HGeomVector*) G__int(libp->para[3])));
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HAlignmentGGeom*) G__getstructoffset())->CalcIntersection(*((HGeomVector*) G__int(libp->para[0])), *((HGeomVector*) G__int(libp->para[1]))
, *((HGeomTransform*) G__int(libp->para[2])));
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HAlignmentGGeom*) G__getstructoffset())->CalcVectorDistance(*((HGeomVector*) G__int(libp->para[0])), *((HGeomVector*) G__int(libp->para[1]))
, *((HGeomVector*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HAlignmentGGeom*) G__getstructoffset())->GetTheta(*(HGeomTransform*) libp->para[0].ref, *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HAlignmentGGeom*) G__getstructoffset())->GetPhi(*(HGeomTransform*) libp->para[0].ref, *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HAlignmentGGeom::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGGeom::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HAlignmentGGeom::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HAlignmentGGeom::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGGeom*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGGeom::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGGeom::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGGeom::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_190_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGGeom::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlignmentDict_190_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HAlignmentGGeom* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HAlignmentGGeom(*(HAlignmentGGeom*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HAlignmentGGeom G__THAlignmentGGeom;
static int G__AlignmentDict_190_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HAlignmentGGeom*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HAlignmentGGeom*) (soff+(sizeof(HAlignmentGGeom)*i)))->~G__THAlignmentGGeom();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HAlignmentGGeom*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HAlignmentGGeom*) (soff))->~G__THAlignmentGGeom();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlignmentDict_190_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGGeom* dest = (HAlignmentGGeom*) G__getstructoffset();
   *dest = *(HAlignmentGGeom*) libp->para[0].ref;
   const HAlignmentGGeom& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HAlignmentGParticle */
static int G__AlignmentDict_199_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentGParticle[n];
     } else {
       p = new((void*) gvp) HAlignmentGParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentGParticle;
     } else {
       p = new((void*) gvp) HAlignmentGParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HAlignmentGParticle(*(HAlignmentGParticle*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HAlignmentGParticle(*(HAlignmentGParticle*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGParticle*) G__getstructoffset())->SetX((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGParticle*) G__getstructoffset())->SetXdir((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGParticle*) G__getstructoffset())->SetY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGParticle*) G__getstructoffset())->SetYdir((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGParticle*) G__getstructoffset())->SetPoints();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HAlignmentGParticle*) G__getstructoffset())->GetPoint((Int_t) G__int(libp->para[0]));
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HAlignmentGParticle*) G__getstructoffset())->GetDir((Int_t) G__int(libp->para[0]));
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGParticle*) G__getstructoffset())->SetIsGood((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HAlignmentGParticle*) G__getstructoffset())->GetIsGood());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HAlignmentGParticle*) G__getstructoffset())->GetX((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HAlignmentGParticle*) G__getstructoffset())->GetXdir((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HAlignmentGParticle*) G__getstructoffset())->GetY((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HAlignmentGParticle*) G__getstructoffset())->GetYdir((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HAlignmentGParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HAlignmentGParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HAlignmentGParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_199_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HAlignmentGParticle G__THAlignmentGParticle;
static int G__AlignmentDict_199_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HAlignmentGParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HAlignmentGParticle*) (soff+(sizeof(HAlignmentGParticle)*i)))->~G__THAlignmentGParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HAlignmentGParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HAlignmentGParticle*) (soff))->~G__THAlignmentGParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlignmentDict_199_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGParticle* dest = (HAlignmentGParticle*) G__getstructoffset();
   *dest = *(HAlignmentGParticle*) libp->para[0].ref;
   const HAlignmentGParticle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HAlignmentGRotations */
static int G__AlignmentDict_514_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGRotations* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentGRotations[n];
     } else {
       p = new((void*) gvp) HAlignmentGRotations[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentGRotations;
     } else {
       p = new((void*) gvp) HAlignmentGRotations;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HAlignmentGRotations*) G__getstructoffset())->TransMdc(*(HGeomVector*) libp->para[0].ref, *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HAlignmentGRotations*) G__getstructoffset())->TransMdc(*(HGeomVector*) libp->para[0].ref, *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HAlignmentGRotations*) G__getstructoffset())->GetTransMdc((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HAlignmentGRotations*) G__getstructoffset())->GetTransMdc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomTransform* pobj;
         HGeomTransform xobj = ((HAlignmentGRotations*) G__getstructoffset())->MakeTransMatrix((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
         pobj = new HGeomTransform(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGRotations*) G__getstructoffset())->GetEulerAngles(*(HGeomTransform*) libp->para[0].ref, *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGRotations*) G__getstructoffset())->GetTransVector(*(HGeomTransform*) libp->para[0].ref, *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HAlignmentGRotations::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGRotations::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HAlignmentGRotations::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HAlignmentGRotations::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGRotations*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGRotations::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGRotations::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGRotations::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_514_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGRotations::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlignmentDict_514_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HAlignmentGRotations* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HAlignmentGRotations(*(HAlignmentGRotations*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HAlignmentGRotations G__THAlignmentGRotations;
static int G__AlignmentDict_514_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HAlignmentGRotations*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HAlignmentGRotations*) (soff+(sizeof(HAlignmentGRotations)*i)))->~G__THAlignmentGRotations();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HAlignmentGRotations*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HAlignmentGRotations*) (soff))->~G__THAlignmentGRotations();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlignmentDict_514_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGRotations* dest = (HAlignmentGRotations*) G__getstructoffset();
   *dest = *(HAlignmentGRotations*) libp->para[0].ref;
   const HAlignmentGRotations& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HAlignmentGBase */
static int G__AlignmentDict_518_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGBase*) G__getstructoffset())->CollectTracks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGBase*) G__getstructoffset())->ResetCounts();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HAlignmentGBase*) G__getstructoffset())->AddToClones());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGBase*) G__getstructoffset())->FillHistograms();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomTransform* pobj;
         HGeomTransform xobj = ((HAlignmentGBase*) G__getstructoffset())->Align(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
         pobj = new HGeomTransform(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGBase*) G__getstructoffset())->SetNtBranches();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HAlignmentGBase*) G__getstructoffset())->GetAlignGeom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HAlignmentGBase*) G__getstructoffset())->GetAlignRot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HAlignmentGBase*) G__getstructoffset())->GetCloneSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HAlignmentGBase*) G__getstructoffset())->GetHistoNumbers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HAlignmentGBase*) G__getstructoffset())->GetAlignTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HAlignmentGBase*) G__getstructoffset())->GetHistoClones());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HAlignmentGBase*) G__getstructoffset())->GetUsedMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HAlignmentGBase*) G__getstructoffset())->GetUsedSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGBase*) G__getstructoffset())->SetNtuple((TNtuple*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HAlignmentGBase*) G__getstructoffset())->GetNtuple());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGBase*) G__getstructoffset())->GetPoints(
(void (*)(Float_t&, Float_t&, Float_t&, Float_t&, HGeomVector&, HGeomVector&)) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), *(HGeomVector*) libp->para[5].ref
, *(HGeomVector*) libp->para[6].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HAlignmentGBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HAlignmentGBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HAlignmentGBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_518_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HAlignmentGBase G__THAlignmentGBase;
static int G__AlignmentDict_518_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HAlignmentGBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HAlignmentGBase*) (soff+(sizeof(HAlignmentGBase)*i)))->~G__THAlignmentGBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HAlignmentGBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HAlignmentGBase*) (soff))->~G__THAlignmentGBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlignmentDict_518_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGBase* dest = (HAlignmentGBase*) G__getstructoffset();
   *dest = *(HAlignmentGBase*) libp->para[0].ref;
   const HAlignmentGBase& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HAlignmentGParticleBase */
static int G__AlignmentDict_519_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGParticleBase*) G__getstructoffset())->ResetAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_519_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGParticleBase*) G__getstructoffset())->SetIsGood((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_519_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HAlignmentGParticleBase*) G__getstructoffset())->GetIsGood());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_519_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HAlignmentGParticleBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_519_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGParticleBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_519_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HAlignmentGParticleBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_519_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HAlignmentGParticleBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_519_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGParticleBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_519_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGParticleBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_519_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGParticleBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_519_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGParticleBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_519_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGParticleBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HAlignmentGParticleBase G__THAlignmentGParticleBase;
static int G__AlignmentDict_519_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HAlignmentGParticleBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HAlignmentGParticleBase*) (soff+(sizeof(HAlignmentGParticleBase)*i)))->~G__THAlignmentGParticleBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HAlignmentGParticleBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HAlignmentGParticleBase*) (soff))->~G__THAlignmentGParticleBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlignmentDict_519_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGParticleBase* dest = (HAlignmentGParticleBase*) G__getstructoffset();
   *dest = *(HAlignmentGParticleBase*) libp->para[0].ref;
   const HAlignmentGParticleBase& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HAlignmentGNoMag */
static int G__AlignmentDict_520_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGNoMag* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentGNoMag[n];
     } else {
       p = new((void*) gvp) HAlignmentGNoMag[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentGNoMag;
     } else {
       p = new((void*) gvp) HAlignmentGNoMag;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGNoMag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGNoMag*) G__getstructoffset())->SetIname(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HAlignmentGNoMag*) G__getstructoffset())->GetIname();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGNoMag*) G__getstructoffset())->Init(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGNoMag*) G__getstructoffset())->CheckAlignment();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGNoMag*) G__getstructoffset())->AddData((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HAlignmentGNoMag*) G__getstructoffset())->Selected(*(HAlignmentGParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HAlignmentGNoMag*) G__getstructoffset())->GetTargetHisto());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomTransform* pobj;
         HGeomTransform xobj = ((HAlignmentGNoMag*) G__getstructoffset())->AlignMod();
         pobj = new HGeomTransform(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGNoMag*) G__getstructoffset())->Raster((TH2F*) G__int(libp->para[0]), (TH2F*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGNoMag*) G__getstructoffset())->JustPlot((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HAlignmentGNoMag*) G__getstructoffset())->GetFitVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGNoMag*) G__getstructoffset())->SetFitVersion((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGNoMag*) G__getstructoffset())->setDefault(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Int_t a[1][4]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HAlignmentGNoMag*) G__getstructoffset())->setMdcSetup(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HAlignmentGNoMag*) G__getstructoffset())->isMdc((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGNoMag*) G__getstructoffset())->ResetRaster();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HAlignmentGNoMag::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGNoMag::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HAlignmentGNoMag::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HAlignmentGNoMag::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGNoMag*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGNoMag::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGNoMag::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGNoMag::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_520_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGNoMag::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HAlignmentGNoMag G__THAlignmentGNoMag;
static int G__AlignmentDict_520_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HAlignmentGNoMag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HAlignmentGNoMag*) (soff+(sizeof(HAlignmentGNoMag)*i)))->~G__THAlignmentGNoMag();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HAlignmentGNoMag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HAlignmentGNoMag*) (soff))->~G__THAlignmentGNoMag();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HAlignmentGCosmics */
static int G__AlignmentDict_522_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGCosmics* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentGCosmics[n];
     } else {
       p = new((void*) gvp) HAlignmentGCosmics[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentGCosmics;
     } else {
       p = new((void*) gvp) HAlignmentGCosmics;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGCosmics));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGCosmics*) G__getstructoffset())->SetNtuple((TNtuple*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HAlignmentGCosmics*) G__getstructoffset())->GetNtuple());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HAlignmentGCosmics*) G__getstructoffset())->GetAlignGeom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HAlignmentGCosmics*) G__getstructoffset())->GetAlignRot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomTransform* pobj;
         HGeomTransform xobj = ((HAlignmentGCosmics*) G__getstructoffset())->GetRefTrans((Int_t) G__int(libp->para[0]));
         pobj = new HGeomTransform(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomTransform* pobj;
         HGeomTransform xobj = ((HAlignmentGCosmics*) G__getstructoffset())->GetTransGSI(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
         pobj = new HGeomTransform(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGCosmics*) G__getstructoffset())->Align();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGCosmics*) G__getstructoffset())->AlignLocal();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGCosmics*) G__getstructoffset())->checkAlignment();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGCosmics*) G__getstructoffset())->Yoxlama();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 102, (double) ((HAlignmentGCosmics*) G__getstructoffset())->GetMinFunction((HGeomTransform*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((HAlignmentGCosmics*) G__getstructoffset())->GetMinFunction((HGeomTransform*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((HAlignmentGCosmics*) G__getstructoffset())->GetMinFunction((HGeomTransform*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGCosmics*) G__getstructoffset())->changename((TH1F*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGCosmics*) G__getstructoffset())->fillHistograms(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 102, (double) ((HAlignmentGCosmics*) G__getstructoffset())->GetMinFunction3((HGeomVector*) G__int(libp->para[0]), (HGeomTransform*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letdouble(result7, 102, (double) ((HAlignmentGCosmics*) G__getstructoffset())->GetMinFunction3((HGeomVector*) G__int(libp->para[0]), (HGeomTransform*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((HAlignmentGCosmics*) G__getstructoffset())->GetMinFunction3((HGeomVector*) G__int(libp->para[0]), (HGeomTransform*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGCosmics*) G__getstructoffset())->fillHistograms3(*(HGeomVector*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HAlignmentGCosmics*) G__getstructoffset())->GetFixedSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGCosmics*) G__getstructoffset())->SetFixedSector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HAlignmentGCosmics::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGCosmics::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HAlignmentGCosmics::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HAlignmentGCosmics::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGCosmics*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGCosmics::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGCosmics::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGCosmics::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_522_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGCosmics::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlignmentDict_522_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HAlignmentGCosmics* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HAlignmentGCosmics(*(HAlignmentGCosmics*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGCosmics));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HAlignmentGCosmics G__THAlignmentGCosmics;
static int G__AlignmentDict_522_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HAlignmentGCosmics*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HAlignmentGCosmics*) (soff+(sizeof(HAlignmentGCosmics)*i)))->~G__THAlignmentGCosmics();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HAlignmentGCosmics*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HAlignmentGCosmics*) (soff))->~G__THAlignmentGCosmics();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlignmentDict_522_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGCosmics* dest = (HAlignmentGCosmics*) G__getstructoffset();
   *dest = *(HAlignmentGCosmics*) libp->para[0].ref;
   const HAlignmentGCosmics& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HAlignmentGShower */
static int G__AlignmentDict_524_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGShower* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentGShower[n];
     } else {
       p = new((void*) gvp) HAlignmentGShower[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentGShower;
     } else {
       p = new((void*) gvp) HAlignmentGShower;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGShower));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGShower*) G__getstructoffset())->SetNtuple((TNtuple*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HAlignmentGShower*) G__getstructoffset())->GetNtuple());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HAlignmentGShower*) G__getstructoffset())->GetAlignGeom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HAlignmentGShower*) G__getstructoffset())->GetAlignRot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HAlignmentGShower*) G__getstructoffset())->GetMinFunction(*(HGeomTransform*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGShower*) G__getstructoffset())->seTrans(*(HGeomTransform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomTransform* pobj;
         HGeomTransform xobj = ((HAlignmentGShower*) G__getstructoffset())->getTransOld();
         pobj = new HGeomTransform(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomTransform* pobj;
         HGeomTransform xobj = ((HAlignmentGShower*) G__getstructoffset())->getTransNew();
         pobj = new HGeomTransform(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGShower*) G__getstructoffset())->getPoints(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref, *(HGeomTransform*) libp->para[3].ref
, (Float_t*) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGShower*) G__getstructoffset())->CheckAlignment(*((HGeomTransform*) G__int(libp->para[0])), *((HGeomTransform*) G__int(libp->para[1]))
, (TFile*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HAlignmentGShower*) G__getstructoffset())->getAlignSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGShower*) G__getstructoffset())->setAlignMode((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HAlignmentGShower*) G__getstructoffset())->getAlignMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGShower*) G__getstructoffset())->AlignShower((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HAlignmentGShower::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGShower::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HAlignmentGShower::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HAlignmentGShower::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentGShower*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGShower::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGShower::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentGShower::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_524_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentGShower::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlignmentDict_524_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HAlignmentGShower* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HAlignmentGShower(*(HAlignmentGShower*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGShower));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HAlignmentGShower G__THAlignmentGShower;
static int G__AlignmentDict_524_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HAlignmentGShower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HAlignmentGShower*) (soff+(sizeof(HAlignmentGShower)*i)))->~G__THAlignmentGShower();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HAlignmentGShower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HAlignmentGShower*) (soff))->~G__THAlignmentGShower();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlignmentDict_524_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentGShower* dest = (HAlignmentGShower*) G__getstructoffset();
   *dest = *(HAlignmentGShower*) libp->para[0].ref;
   const HAlignmentGShower& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcCosmicsCandidate */
static int G__AlignmentDict_545_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCosmicsCandidate* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcCosmicsCandidate((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcCosmicsCandidate((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcCosmicsCandidate* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCosmicsCandidate[n];
     } else {
       p = new((void*) gvp) HMdcCosmicsCandidate[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcCosmicsCandidate;
     } else {
       p = new((void*) gvp) HMdcCosmicsCandidate;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCosmicsCandidate*) G__getstructoffset())->setBetaCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCosmicsCandidate*) G__getstructoffset())->setDCellWindow((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCosmicsCandidate*) G__getstructoffset())->setNLayPerModCut((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCosmicsCandidate*) G__getstructoffset())->setSelectionCut((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcCosmicsCandidate*) G__getstructoffset())->makeHistograms((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcCosmicsCandidate*) G__getstructoffset())->makeHistograms();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcCosmicsCandidate*) G__getstructoffset())->setHistFile((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcCosmicsCandidate*) G__getstructoffset())->setHistFile((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcCosmicsCandidate*) G__getstructoffset())->setHistFile((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcCosmicsCandidate*) G__getstructoffset())->setHistFile();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcCosmicsCandidate*) G__getstructoffset())->setSkipEvent((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcCosmicsCandidate*) G__getstructoffset())->setSkipEvent();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCosmicsCandidate*) G__getstructoffset())->scaleDownTrack((UInt_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCosmicsCandidate*) G__getstructoffset())->scaleDownTrack((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCosmicsCandidate*) G__getstructoffset())->setParContainersStatic();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCosmicsCandidate*) G__getstructoffset())->setZShiftForTof((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCosmicsCandidate*) G__getstructoffset())->setZShiftForRpc((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCosmicsCandidate*) G__getstructoffset())->useTofHits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCosmicsCandidate*) G__getstructoffset())->useRpcHits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCosmicsCandidate*) G__getstructoffset())->useTofClusters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCosmicsCandidate*) G__getstructoffset())->useRpcClusters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcCosmicsCandidate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCosmicsCandidate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcCosmicsCandidate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcCosmicsCandidate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcCosmicsCandidate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCosmicsCandidate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCosmicsCandidate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcCosmicsCandidate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_545_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcCosmicsCandidate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcCosmicsCandidate G__THMdcCosmicsCandidate;
static int G__AlignmentDict_545_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcCosmicsCandidate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcCosmicsCandidate*) (soff+(sizeof(HMdcCosmicsCandidate)*i)))->~G__THMdcCosmicsCandidate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcCosmicsCandidate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcCosmicsCandidate*) (soff))->~G__THMdcCosmicsCandidate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HCosmicCalibEvSkip */
static int G__AlignmentDict_549_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HCosmicCalibEvSkip* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HCosmicCalibEvSkip[n];
     } else {
       p = new((void*) gvp) HCosmicCalibEvSkip[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HCosmicCalibEvSkip;
     } else {
       p = new((void*) gvp) HCosmicCalibEvSkip;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HCosmicCalibEvSkip));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_549_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HCosmicCalibEvSkip* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HCosmicCalibEvSkip((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HCosmicCalibEvSkip((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HCosmicCalibEvSkip));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_549_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HCosmicCalibEvSkip::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_549_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCosmicCalibEvSkip::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_549_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HCosmicCalibEvSkip::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_549_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HCosmicCalibEvSkip::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_549_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HCosmicCalibEvSkip*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_549_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCosmicCalibEvSkip::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_549_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HCosmicCalibEvSkip::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_549_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCosmicCalibEvSkip::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_549_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HCosmicCalibEvSkip::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HCosmicCalibEvSkip G__THCosmicCalibEvSkip;
static int G__AlignmentDict_549_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HCosmicCalibEvSkip*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HCosmicCalibEvSkip*) (soff+(sizeof(HCosmicCalibEvSkip)*i)))->~G__THCosmicCalibEvSkip();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HCosmicCalibEvSkip*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HCosmicCalibEvSkip*) (soff))->~G__THCosmicCalibEvSkip();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HAlignmentMeta */
static int G__AlignmentDict_550_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentMeta* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentMeta[n];
     } else {
       p = new((void*) gvp) HAlignmentMeta[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HAlignmentMeta;
     } else {
       p = new((void*) gvp) HAlignmentMeta;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentMeta));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentMeta*) G__getstructoffset())->doFiltering((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentMeta*) G__getstructoffset())->alignMeta((Int_t) G__int(libp->para[0]), (TNtuple*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentMeta*) G__getstructoffset())->checkAlignment();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HAlignmentMeta*) G__getstructoffset())->getAlignSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentMeta*) G__getstructoffset())->setCuts((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HAlignmentMeta*) G__getstructoffset())->getMinFunction((Double_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HAlignmentMeta::fcnMeta(*(Int_t*) G__Intref(&libp->para[0]), (Double_t*) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HAlignmentMeta*) G__getstructoffset())->getArrTansOld());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HAlignmentMeta*) G__getstructoffset())->getArrTansNew());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentMeta*) G__getstructoffset())->setNMetaModules((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HAlignmentMeta*) G__getstructoffset())->setRpcDetector((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HAlignmentMeta*) G__getstructoffset())->setRpcDetector((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HAlignmentMeta*) G__getstructoffset())->setRpcDetector();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HAlignmentMeta*) G__getstructoffset())->setShowerDetector((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HAlignmentMeta*) G__getstructoffset())->setShowerDetector((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HAlignmentMeta*) G__getstructoffset())->setShowerDetector();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HAlignmentMeta*) G__getstructoffset())->setTofDetector((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HAlignmentMeta*) G__getstructoffset())->setTofDetector((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HAlignmentMeta*) G__getstructoffset())->setTofDetector();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentMeta*) G__getstructoffset())->fitTofModYPositions((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HAlignmentMeta*) G__getstructoffset())->getRpcXCorr((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HAlignmentMeta*) G__getstructoffset())->getTofXCorr((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentMeta*) G__getstructoffset())->calcRpcCellXOffset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HAlignmentMeta::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentMeta::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HAlignmentMeta::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HAlignmentMeta::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HAlignmentMeta*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentMeta::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentMeta::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HAlignmentMeta::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_550_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HAlignmentMeta::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AlignmentDict_550_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HAlignmentMeta* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HAlignmentMeta(*(HAlignmentMeta*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentMeta));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HAlignmentMeta G__THAlignmentMeta;
static int G__AlignmentDict_550_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HAlignmentMeta*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HAlignmentMeta*) (soff+(sizeof(HAlignmentMeta)*i)))->~G__THAlignmentMeta();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HAlignmentMeta*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HAlignmentMeta*) (soff))->~G__THAlignmentMeta();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AlignmentDict_550_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HAlignmentMeta* dest = (HAlignmentMeta*) G__getstructoffset();
   *dest = *(HAlignmentMeta*) libp->para[0].ref;
   const HAlignmentMeta& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Mille */
static int G__AlignmentDict_552_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Mille* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Mille(
(const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Mille(
(const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Mille((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Mille((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Mille((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Mille((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_Mille));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_552_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Mille*) G__getstructoffset())->mille(
(int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (const int*) G__int(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_552_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Mille*) G__getstructoffset())->special((int) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (const int*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_552_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Mille*) G__getstructoffset())->kill();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_552_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Mille*) G__getstructoffset())->end());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Mille G__TMille;
static int G__AlignmentDict_552_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Mille*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Mille*) (soff+(sizeof(Mille)*i)))->~G__TMille();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Mille*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Mille*) (soff))->~G__TMille();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcMille */
static int G__AlignmentDict_639_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcMille* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcMille(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HMdcMille(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcMille(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcMille(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcMille((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcMille((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcMille((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcMille((const Char_t*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcMille));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcMille* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcMille[n];
     } else {
       p = new((void*) gvp) HMdcMille[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcMille;
     } else {
       p = new((void*) gvp) HMdcMille;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcMille));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setWiresMinNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->doShiftsInSecSys();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->doShiftsInModSys();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->doShiftsInLabSys();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setFixFitTOffsetFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setMille((Mille*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setCopyGeomFile((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setCopySumShFile((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setCopyResFile((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setyCopyLogFile((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setCopyHisFile((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcMille*) G__getstructoffset())->setMdcShiftParOnly((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcMille*) G__getstructoffset())->setMdcShiftParOnly();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setThetaCut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcMille*) G__getstructoffset())->packLabel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HMdcMille::unpackLabel(
(Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Int_t*) G__Intref(&libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcMille*) G__getstructoffset())->getIterationNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HMdcMille*) G__getstructoffset())->getIterName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setPedeInFileName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->fixFullMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->fixModPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->fixFullLay((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->fixLayPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->fixPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcMille*) G__getstructoffset())->doLayerPart2Align((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcMille*) G__getstructoffset())->doLayerPart2Align();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->useCellThicknessParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcMille*) G__getstructoffset())->creatPedeTaskFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcMille*) G__getstructoffset())->creatPedeTaskFile();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcMille*) G__getstructoffset())->useInversionMethod((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcMille*) G__getstructoffset())->useInversionMethod((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcMille*) G__getstructoffset())->useInversionMethod();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcMille*) G__getstructoffset())->useBandCholeskyMethod((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcMille*) G__getstructoffset())->useBandCholeskyMethod((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcMille*) G__getstructoffset())->useBandCholeskyMethod((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcMille*) G__getstructoffset())->useBandCholeskyMethod();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HMdcMille*) G__getstructoffset())->useCholeskyMethod((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HMdcMille*) G__getstructoffset())->useCholeskyMethod((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcMille*) G__getstructoffset())->useCholeskyMethod((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcMille*) G__getstructoffset())->useCholeskyMethod();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcMille*) G__getstructoffset())->useSparseGMRESMethod((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcMille*) G__getstructoffset())->useSparseGMRESMethod((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcMille*) G__getstructoffset())->useSparseGMRESMethod();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcMille*) G__getstructoffset())->useFullGMRESMethod((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcMille*) G__getstructoffset())->useFullGMRESMethod((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcMille*) G__getstructoffset())->useFullGMRESMethod();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcMille*) G__getstructoffset())->useDiagonalizationMethod((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcMille*) G__getstructoffset())->useDiagonalizationMethod((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcMille*) G__getstructoffset())->useDiagonalizationMethod();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setParConstrainFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setNoHistsFlag();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setClusterMultCut((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->noFiltering();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->doFiltering();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->doFilteringOnly();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setMaxNumWiresCut((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->setMaxNumWiresCut((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcMille::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcMille::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcMille::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcMille::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcMille*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcMille::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcMille::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcMille::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AlignmentDict_639_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcMille::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcMille G__THMdcMille;
static int G__AlignmentDict_639_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcMille*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcMille*) (soff+(sizeof(HMdcMille)*i)))->~G__THMdcMille();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcMille*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcMille*) (soff))->~G__THMdcMille();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HAlignmentGData */

/* HAlignmentGGeom */

/* HAlignmentGParticle */

/* HAlignmentGRotations */

/* HAlignmentGBase */

/* HAlignmentGParticleBase */

/* HAlignmentGNoMag */

/* HAlignmentGCosmics */

/* HAlignmentGShower */

/* HMdcCosmicsCandidate */

/* HCosmicCalibEvSkip */

/* HAlignmentMeta */

/* Mille */

/* HMdcMille */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncAlignmentDict {
 public:
  G__Sizep2memfuncAlignmentDict(): p(&G__Sizep2memfuncAlignmentDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncAlignmentDict::*p)();
};

size_t G__get_sizep2memfuncAlignmentDict()
{
  G__Sizep2memfuncAlignmentDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceAlignmentDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGData))) {
     HAlignmentGData *G__Lderived;
     G__Lderived=(HAlignmentGData*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGData),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom))) {
     HAlignmentGGeom *G__Lderived;
     G__Lderived=(HAlignmentGGeom*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticle))) {
     HAlignmentGParticle *G__Lderived;
     G__Lderived=(HAlignmentGParticle*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticle),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations))) {
     HAlignmentGRotations *G__Lderived;
     G__Lderived=(HAlignmentGRotations*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGBase))) {
     HAlignmentGBase *G__Lderived;
     G__Lderived=(HAlignmentGBase*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGBase),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticleBase))) {
     HAlignmentGParticleBase *G__Lderived;
     G__Lderived=(HAlignmentGParticleBase*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticleBase),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGNoMag))) {
     HAlignmentGNoMag *G__Lderived;
     G__Lderived=(HAlignmentGNoMag*)0x1000;
     {
       HAlignmentGBase *G__Lpbase=(HAlignmentGBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGNoMag),G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGNoMag),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGCosmics))) {
     HAlignmentGCosmics *G__Lderived;
     G__Lderived=(HAlignmentGCosmics*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGCosmics),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGShower))) {
     HAlignmentGShower *G__Lderived;
     G__Lderived=(HAlignmentGShower*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGShower),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidate))) {
     HMdcCosmicsCandidate *G__Lderived;
     G__Lderived=(HMdcCosmicsCandidate*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidate),G__get_linked_tagnum(&G__AlignmentDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidate),G__get_linked_tagnum(&G__AlignmentDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidate),G__get_linked_tagnum(&G__AlignmentDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidate),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_HCosmicCalibEvSkip))) {
     HCosmicCalibEvSkip *G__Lderived;
     G__Lderived=(HCosmicCalibEvSkip*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HCosmicCalibEvSkip),G__get_linked_tagnum(&G__AlignmentDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HCosmicCalibEvSkip),G__get_linked_tagnum(&G__AlignmentDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HCosmicCalibEvSkip),G__get_linked_tagnum(&G__AlignmentDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HCosmicCalibEvSkip),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentMeta))) {
     HAlignmentMeta *G__Lderived;
     G__Lderived=(HAlignmentMeta*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentMeta),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcMille))) {
     HMdcMille *G__Lderived;
     G__Lderived=(HMdcMille*)0x1000;
     {
       HMdc12Fit *G__Lpbase=(HMdc12Fit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcMille),G__get_linked_tagnum(&G__AlignmentDictLN_HMdc12Fit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcMille),G__get_linked_tagnum(&G__AlignmentDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcMille),G__get_linked_tagnum(&G__AlignmentDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcMille),G__get_linked_tagnum(&G__AlignmentDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcMille),G__get_linked_tagnum(&G__AlignmentDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableAlignmentDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__AlignmentDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AlignmentDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlignmentDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AlignmentDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlignmentDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__AlignmentDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AlignmentDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlignmentDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AlignmentDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AlignmentDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__AlignmentDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__AlignmentDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__AlignmentDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__AlignmentDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("void (*)(Float_t&, Float_t&, Float_t&, Float_t&, HGeomVector&, HGeomVector&)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__AlignmentDictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HAlignmentGData */
static void G__setup_memvarHAlignmentGData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGData));
   { HAlignmentGData *p; p=(HAlignmentGData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Aplane=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Bplane=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Cplane=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Dplane=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Xp=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Yp=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Zp=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,4,"POINT=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,4,"DIRPOINT=",0,"do not worry about normalization");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,4,"vertexPoint1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,4,"vertexPointDir1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,4,"vertexPoint2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,4,"vertexPointDir2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGData),-1,-2,4,"oneInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HAlignmentGGeom */
static void G__setup_memvarHAlignmentGGeom(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom));
   { HAlignmentGGeom *p; p=(HAlignmentGGeom*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGData),-1,-1,4,"alignData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HAlignmentGParticle */
static void G__setup_memvarHAlignmentGParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticle));
   { HAlignmentGParticle *p; p=(HAlignmentGParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"X[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Xdir[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Y[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Ydir[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,4,"Point[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,4,"Dir[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isGood=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HAlignmentGRotations */
static void G__setup_memvarHAlignmentGRotations(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations));
   { HAlignmentGRotations *p; p=(HAlignmentGRotations*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transMdcLabToMod[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transMdcSecToMod[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transMdcLabToSec[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcGetContainers),-1,-1,4,"fGetCont=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HAlignmentGBase */
static void G__setup_memvarHAlignmentGBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGBase));
   { HAlignmentGBase *p; p=(HAlignmentGBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClonesArray),-1,-1,2,"alignTracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClonesArray),-1,-1,2,"histoClones=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"histoNumbers=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TFile),-1,-1,2,"ff=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TNtuple),-1,-1,2,"nt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TMinuit),-1,-1,2,"fMinuit=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"UsedMod=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"UsedSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom),-1,-1,2,"fAlignGeom=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations),-1,-1,2,"fAlignRot=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,2,"transBefore=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,2,"transAfter=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cloneSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ntEntries=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HAlignmentGParticleBase */
static void G__setup_memvarHAlignmentGParticleBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticleBase));
   { HAlignmentGParticleBase *p; p=(HAlignmentGParticleBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isGood=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HAlignmentGNoMag */
static void G__setup_memvarHAlignmentGNoMag(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGNoMag));
   { HAlignmentGNoMag *p; p=(HAlignmentGNoMag*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isThirdChamber=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isFouthChamber=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"AcceptRadius=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"AcceptRadiusFour=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"AcceptRadiusTarg=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"AcceptDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"AcceptDirFour=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fitVersion=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"numberOfTracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isAligned=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ifstream"),-1,4,"in=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,4,"inName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,4,"outName=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"mod=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"X=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Y=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Xdir=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Ydir=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"FirstEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"FirstMod=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"FirstX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"FirstXdir=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"FirstY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"FirstYdir=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nCount[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticle),-1,-1,4,"testP=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticle),-1,-1,4,"fAlignParticle=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"XValue[4][50]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"XdirValue[4][50]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"YValue[4][50]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"YdirValue[4][50]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoDiffYBeforeMod3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoDiffYAfterMod3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,4,"histoDiffYBeforeVsPhiMod3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,4,"histoDiffYAfterVsPhiMod3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,4,"histoDiffYBeforeVsThetaMod3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,4,"histoDiffYAfterVsThetaMod3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoDiffYBeforeMod4=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoDiffYAfterMod4=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,4,"histoDiffYBeforeVsPhiMod4=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,4,"histoDiffYAfterVsPhiMod4=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,4,"histoDiffYBeforeVsThetaMod4=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,4,"histoDiffYAfterVsThetaMod4=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoTheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,4,"RasterPlotBefore3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,4,"RasterPlotAfter3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,4,"RasterPlotBefore4=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,4,"RasterPlotAfter4=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transBefore[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transAfter[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transStarting[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"mdcSetup[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HAlignmentGCosmics */
static void G__setup_memvarHAlignmentGCosmics(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGCosmics));
   { HAlignmentGCosmics *p; p=(HAlignmentGCosmics*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"accRange=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"accRange3=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"localAlign=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fixedSector=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TMinuit),-1,-1,4,"fMinuit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TNtuple),-1,-1,4,"nt=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"refTrans[6]=",0,"gsi 0-ci modulun o biri sectoralara nisbeten");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transGSIBefore[6]=",0,"gsi modules before alignment");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transGSIAfter[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transDubna[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom),-1,-1,4,"fAlignGeom=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations),-1,-1,4,"fAlignRot=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoX0=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoY0=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoX0After=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoY0After=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoX1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoY1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoX1After=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoY1After=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoX2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoY2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoX2After=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoY2After=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoX03=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoY03=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoX0After3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoY0After3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoX13=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoY13=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoX1After3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoY1After3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoX23=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoY23=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoX2After3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,4,"histoY2After3=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"x1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"y1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"x2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"y2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"x3=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"y3=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"x4=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"y4=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sec1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sec2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"missing=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HAlignmentGShower */
static void G__setup_memvarHAlignmentGShower(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGShower));
   { HAlignmentGShower *p; p=(HAlignmentGShower*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,4,"point1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,4,"point2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,4,"pointSh=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"alignSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"diffZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"diffX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"diffY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xCr=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"yCr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"alignMode=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom),-1,-1,4,"fAlignGeom=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations),-1,-1,4,"fAlignRot=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transOld=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transNew=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TMinuit),-1,-1,4,"fMinuit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TNtuple),-1,-1,4,"nt=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"x1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"y1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"z1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"x2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"y2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"z2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xsh=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ysh=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zsh=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xshl=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"yshl=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zshl=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sec=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcCosmicsCandidate */
static void G__setup_memvarHMdcCosmicsCandidate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidate));
   { HMdcCosmicsCandidate *p; p=(HMdcCosmicsCandidate*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidatecLcLMetaHit),-1,-1,2,"metaHits[250]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nMetaHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nMetaHitSec[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nSectors=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zTofShift=",0,"Shift z position of TofCluster/Hit on this value");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zRpcShift=",0,"Shift z position of RpcCluster/Hit on this value");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isGeant=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nWiresStat[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numWiresAllMod=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,2,"hit1=",0,"Meta hit in sector coor.sys");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,2,"hit2=",0,"Meta hit in sector coor.sys");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidatecLcLTrackCand),-1,-1,2,"bestTrCand=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidatecLcLTrackCand),-1,-1,2,"currTrCand=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"betaMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"betaMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dCellWind[4]=",0,"[mod] window of cell-cell_calc");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nLayInModCut=",0,"numFiredLayers/numModInTrack must be >= meanNLayCutu");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxNWiresOutTr=",0,"maximal num.of wires out of track in the crossed modules");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"selQualCut=",0,"cut for numWiresInTrack/totalNunWiresInCrossedModules");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nEventsTot=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nEventsSel=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nSelTr[9]=",0,"index is number of MDC modules in track");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"trackScaling[9]=",0,"index is number of MDC modules in track");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nSelTrSc[9]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nEventsSelSc=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TRandom),-1,-1,2,"rndm=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HCategory),-1,-1,2,"pCatTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"useTofCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HCategory),-1,-1,2,"pCatRpc=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"useRpcCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HCategory),-1,-1,2,"pCatMdcCal1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HLocation),-1,-1,2,"locCal1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HCategory),-1,-1,2,"pCatMdcClus=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HLocation),-1,-1,2,"locClus=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcSizesCells),-1,-1,2,"sizes=",0,"! comment to fill in.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcGetContainers),-1,-1,2,"pGetCont=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"index=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"returnFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mdcsetup[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"setParContStat=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidatecLcLLayerSize),-1,-1,2,"laySize[4]=",0,"[MDCplane][0-layer1; 1-layer6]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,2,"hsBeta=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,2,"plStat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH2F),-1,-1,2,"plQualVsWrLo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,2,"hsDCell[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TH1F),-1,-1,2,"hsDCellL[6][4][6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"makeHists=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TFile),-1,-1,2,"histFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,2,"histFileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,2,"histFileOption=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HCosmicCalibEvSkip */
static void G__setup_memvarHCosmicCalibEvSkip(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HCosmicCalibEvSkip));
   { HCosmicCalibEvSkip *p; p=(HCosmicCalibEvSkip*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HAlignmentMeta */
static void G__setup_memvarHAlignmentMeta(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentMeta));
   { HAlignmentMeta *p; p=(HAlignmentMeta*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentMetacLcLTrackMdcMeta),-1,-1,4,"tracks[1000000]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"metaDetector=",0,"0-TOF, 1-Shower, 2-RPC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"yMinMetaLocal=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"yMaxMetaLocal=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"alignSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nTracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"trackSelecCutX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"trackSelecCutY=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"filterFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transMetaModLabOld[8]=",0,"8 - for tof");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transMetaModLabNew[8]=",0,"8 - for tof");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transMetaModSecOld[8]=",0,"8 - for tof");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"transMetaModSecNew[8]=",0,"8 - for tof");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nMetaModules=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fitTofModYPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tofModYSh[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"cellStat[192]=",0,"192 = 32*6");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"cellXCorr[192]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nCellsTot=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"xShitfRpc=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"calcCellXOffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TNtuple),-1,-1,4,"nt=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sec=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"x1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"y1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"z1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"x2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"y2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"z2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"metaModule=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"metaColumn=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"metaCell=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xMetaLocal=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"yMetaLocal=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zMetaLocal=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xRMS=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"yRMS=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zRMS=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"meanX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"sigmX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"meanY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"sigmY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"meanZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"sigmZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isFirstSIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Mille */
static void G__setup_memvarMille(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_Mille));
   { Mille *p; p=(Mille*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ofstream"),-1,4,"myOutFile=",0,"C-binary for output");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"myAsBinary=",0,"if false output as text");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"myWriteZero=",0,"if true also write out derivatives/lables ==0");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__AlignmentDictLN_MillecLcLdA),-1,-2,4,"myBufferSize=5000LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"myBufferInt[5000]=",0,"to collect labels etc.");
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"myBufferFloat[5000]=",0,"to collect derivatives etc.");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"myBufferPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"myHasSpecial=",0,"if true, special(..) already called for this record");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__AlignmentDictLN_MillecLcLdA),-1,-2,4,"myMaxLabel=2147483647LL",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcMille */
static void G__setup_memvarHMdcMille(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcMille));
   { HMdcMille *p; p=(HMdcMille*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_Mille),-1,-1,4,"mille=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"shiftType=",0,"=0 shift in sec.sys; ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fixFitTOffset=",0,"For deriv.assume fixed TOffset");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"parSteps[40]=",0,"[glob.param.] - step for der");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"derNorm[40]=",0,"[glob.par.] = 1./(2.*parSteps)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"nTracks=",0,"Tracks number sended to Mille");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"nWiresTot=",0,"Wires number sended to Mille");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"nLayersTot=",0,"Layers number sended to Mille");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"doCopyGeomFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"doCopySumShFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"doCopyResFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"doCopyLogFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"doCopyHisFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useMdcShParOnly=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"beamTimeId=",0,"beam time ident. (<=9)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcGetContainers),-1,-1,4,"pGetCont=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcDetector),-1,-1,4,"pMdcDet=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,4,"milleFileName=",0,"millepede binary file name");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nBinaryFiles=",0,"number of files");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"milleFileSize=",0,"size of current binary file");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"cellThicknFree=",0,"=kTRUE - cell thickness is free param.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useSector[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"nClustersCut=",0,"Number of clusters in sec. must be <= nClustersCut");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nWiresCut[6]=",0,"Max.number of fired wires in each sector.");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"filteringFlag=",0,"0 - no filtering, 1 - filtering on, ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nWiresMin=",0,"min. num. of wires per track");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nMods[6]=",0,"num.of mod. in sector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nWiresMinTr=",0,"Cut for current track");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"thetaCut=",0,"Select clus.theta>thetaCut");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcSizesCellsMod),-1,-1,4,"pSCMod[24]=",0,"[sec*4+mod]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcSizesCellsLayer),-1,-1,4,"pSCLayer[144]=",0,"[sec*24+mod*6+layer]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"posShifts[40]=",0,"[glob.param.]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"negShifts[40]=",0,"[glob.param.]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"posLThSh[6]=",0,"[lay] for cell thickness");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"negLThSh[6]=",0,"[lay] for cell thickness");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"derLThNorm[6]=",0,"[lay] for cell thickness");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"layPosSh[144][40]=",0,"[layerIndex][param.+20*(LayPart-1)]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"layNegSh[144][40]=",0,"[layerIndex][param.+20*(LayPart-1)]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,4,"shitsInfo[9]=",0,"Descriptions of shifts");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"nLayerParts[144]=",0,"number of parts in layer");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isMdcInAlign[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcWireData),-1,-1,4,"wireData=",0,"Pointer to current wire date");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"sector=",0,"Address of wireData object");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"module=",0,"...");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"layer=",0,"...");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iMod=",0,"= sec*4+mod");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iLay=",0,"= sec*24+mod*6+layer");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"layerPart=",0,"=0 or 1 (first or second part of layer)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"doLayP2Align=",0,"=kTRUE - determine MdcLayerCorrPar");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"layPosShCurr=",0,"=layPosSh[iLay]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform),-1,-1,4,"layNegShCurr=",0,"=layNegSh[iLay]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HMdcTrackParam),-1,-1,4,"finalParam=",0,"Track parameters");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,4,"p1=",0,"Track line in");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector),-1,-1,4,"p2=",0,"sector coor. system");
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"locDer[4]=",0,"Local(track) par.derivatives");
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"globDer[40]=",0,"Global(alignment) par.deriv.");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"globLabel[40]=",0,"Global(alignment) par.labels");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,4,"pedeResFName=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iteration=",0,"Iteration number");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,4,"stepIter=",0,"= \"Step%i\",Iteration");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,4,"sumOfShiftsFName=",0,"File name with shifts sum ???");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,4,"geomParFileName=",0,"File name with geom.parameters");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isGeomFileExist=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isGeomChanged=",0,"= kFILSE if no param.was chan.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"mdcMods[6][4]=",0,"MDC setup");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"shiftSysMdc[6][4]=",0,"[s][m]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nParMax=",0,"max. number of parameters (=9)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"shiftsMdc[6][4][9]=",0,"[s][m][par]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"sigmaMdc[6][4][9]=",0,"[s][m][par]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"shiftSysLay[6][4][6]=",0,"[s][m][l]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"shiftsLay[6][4][6][9]=",0,"[s][m][l][par]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"sigmaLay[6][4][6][9]=",0,"[s][m][l][par]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"createPedeInFile=",0,"kTRUE-create par.file for Pede");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,4,"pedeInParFName=",0,"Name of parameters file");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"mShFlag[6][4][9]=",0,"[sec][mod][par]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"lShFlag[6][4][6][9]=",0,"[sec][mod][lay][par]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"mFixFlag[6][4][9]=",0,"[sec][mod][par]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"lFixFlag[6][4][6][9]=",0,"[sec][mod][lay][par]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tofDerCorr[24][9]=",0,"[sec*4+mod][par]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nHists=",0,"number of histograms");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"histInd[6]=",0,"[sec] index of first sec.hist.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"crPedeTaskFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,4,"pedeTaskFileName=",0,"pede task file name");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,4,"method=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"numOfIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"accuracy=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,4,"mthDescr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"bandwidth=",0,"for Cholesky method only");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TString),-1,-1,4,"parConstrainFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"printDebugFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"doHists=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AlignmentDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarAlignmentDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHAlignmentGData(void) {
   /* HAlignmentGData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGData));
   G__memfunc_setup("HAlignmentGData",1448,G__AlignmentDict_189_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Instance",821,G__AlignmentDict_189_0_2, 85, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGData), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HAlignmentGData* (*)())(&HAlignmentGData::Instance) ), 0);
   G__memfunc_setup("DeleteInstance",1416,G__AlignmentDict_189_0_3, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HAlignmentGData::DeleteInstance) ), 0);
   G__memfunc_setup("CalcDistanceToPlane",1873,G__AlignmentDict_189_0_4, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "u 'HGeomVector' - 0 - point", "distance from point to plane", (void*) NULL, 0);
   G__memfunc_setup("CalcDistanceToLine",1769,G__AlignmentDict_189_0_5, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "u 'HGeomVector' - 0 - point", "distance from point to line", (void*) NULL, 0);
   G__memfunc_setup("CalcVertex",1009,G__AlignmentDict_189_0_6, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcIntersection",1642,G__AlignmentDict_189_0_7, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPlane",796,G__AlignmentDict_189_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HGeomVector' - 0 - - u 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPlane",796,G__AlignmentDict_189_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomTransform' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLine",692,G__AlignmentDict_189_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HGeomVector' - 0 - - u 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertexLine1",1379,G__AlignmentDict_189_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HGeomVector' - 0 - - u 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertexLine2",1380,G__AlignmentDict_189_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HGeomVector' - 0 - - u 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_189_0_13, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HAlignmentGData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_189_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_189_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HAlignmentGData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_189_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HAlignmentGData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_189_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_189_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_189_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_189_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_189_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGData::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HAlignmentGData", 1448, G__AlignmentDict_189_0_25, (int) ('i'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGData), -1, 0, 1, 1, 1, 0, "u 'HAlignmentGData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HAlignmentGData", 1574, G__AlignmentDict_189_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlignmentDict_189_0_27, (int) ('u'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGData), -1, 1, 1, 1, 1, 0, "u 'HAlignmentGData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHAlignmentGGeom(void) {
   /* HAlignmentGGeom */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom));
   G__memfunc_setup("HAlignmentGGeom",1462,G__AlignmentDict_190_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__AlignmentDict_190_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__AlignmentDict_190_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcDistanceToPlane",1873,G__AlignmentDict_190_0_4, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"u 'HGeomVector' - 0 - - u 'HGeomVector' - 0 - - "
"u 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcDistanceToPlane",1873,G__AlignmentDict_190_0_5, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"u 'HGeomVector' - 0 - - u 'HGeomTransform' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcDistanceToLine",1769,G__AlignmentDict_190_0_6, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"u 'HGeomVector' - 0 - - u 'HGeomVector' - 0 - - "
"u 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcVertex",1009,G__AlignmentDict_190_0_7, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector), -1, 0, 4, 1, 1, 0, 
"u 'HGeomVector' - 0 - - u 'HGeomVector' - 0 - - "
"u 'HGeomVector' - 0 - - u 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcIntersection",1642,G__AlignmentDict_190_0_8, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector), -1, 0, 4, 1, 1, 0, 
"u 'HGeomVector' - 0 - - u 'HGeomVector' - 0 - - "
"u 'HGeomVector' - 0 - - u 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcIntersection",1642,G__AlignmentDict_190_0_9, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector), -1, 0, 3, 1, 1, 0, 
"u 'HGeomVector' - 0 - - u 'HGeomVector' - 0 - - "
"u 'HGeomTransform' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcVectorDistance",1809,G__AlignmentDict_190_0_10, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"u 'HGeomVector' - 0 - - u 'HGeomVector' - 0 - - "
"u 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTheta",790,G__AlignmentDict_190_0_11, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"u 'HGeomTransform' - 11 - - f - 'Float_t' 11 - - "
"f - 'Float_t' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhi",577,G__AlignmentDict_190_0_12, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"u 'HGeomTransform' - 11 - - f - 'Float_t' 11 - - "
"f - 'Float_t' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_190_0_13, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HAlignmentGGeom::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_190_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGGeom::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_190_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HAlignmentGGeom::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_190_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HAlignmentGGeom::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_190_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_190_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGGeom::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_190_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGGeom::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_190_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGGeom::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_190_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGGeom::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HAlignmentGGeom", 1462, G__AlignmentDict_190_0_25, (int) ('i'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom), -1, 0, 1, 1, 1, 0, "u 'HAlignmentGGeom' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HAlignmentGGeom", 1588, G__AlignmentDict_190_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlignmentDict_190_0_27, (int) ('u'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom), -1, 1, 1, 1, 1, 0, "u 'HAlignmentGGeom' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHAlignmentGParticle(void) {
   /* HAlignmentGParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticle));
   G__memfunc_setup("HAlignmentGParticle",1890,G__AlignmentDict_199_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HAlignmentGParticle",1890,G__AlignmentDict_199_0_2, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticle), -1, 0, 1, 1, 1, 0, "u 'HAlignmentGParticle' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetX",388,G__AlignmentDict_199_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXdir",707,G__AlignmentDict_199_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY",389,G__AlignmentDict_199_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetYdir",708,G__AlignmentDict_199_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPoints",937,G__AlignmentDict_199_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPoint",810,G__AlignmentDict_199_0_8, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDir",575,G__AlignmentDict_199_0_9, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIsGood",881,G__AlignmentDict_199_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - _isGood", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIsGood",869,G__AlignmentDict_199_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__AlignmentDict_199_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXdir",695,G__AlignmentDict_199_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__AlignmentDict_199_0_14, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYdir",696,G__AlignmentDict_199_0_15, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_199_0_16, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HAlignmentGParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_199_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_199_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HAlignmentGParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_199_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HAlignmentGParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_199_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_199_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_199_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_199_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_199_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGParticle::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HAlignmentGParticle", 2016, G__AlignmentDict_199_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlignmentDict_199_0_29, (int) ('u'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticle), -1, 1, 1, 1, 1, 0, "u 'HAlignmentGParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHAlignmentGRotations(void) {
   /* HAlignmentGRotations */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations));
   G__memfunc_setup("HAlignmentGRotations",2033,G__AlignmentDict_514_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransMdc",796,G__AlignmentDict_514_0_2, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector), -1, 0, 4, 1, 1, 0, 
"u 'HGeomVector' - 1 - - u 'TString' - 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransMdc",796,G__AlignmentDict_514_0_3, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomVector), -1, 0, 3, 1, 1, 0, 
"u 'HGeomVector' - 1 - - u 'TString' - 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTransMdc",1084,G__AlignmentDict_514_0_4, 85, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTransMdc",1084,G__AlignmentDict_514_0_5, 85, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeTransMatrix",1531,G__AlignmentDict_514_0_6, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform), -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEulerAngles",1399,G__AlignmentDict_514_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'HGeomTransform' - 1 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTransVector",1435,G__AlignmentDict_514_0_8, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'HGeomTransform' - 1 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_514_0_9, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HAlignmentGRotations::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_514_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGRotations::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_514_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HAlignmentGRotations::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_514_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HAlignmentGRotations::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_514_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_514_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGRotations::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_514_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGRotations::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_514_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGRotations::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_514_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGRotations::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HAlignmentGRotations", 2033, G__AlignmentDict_514_0_21, (int) ('i'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations), -1, 0, 1, 1, 1, 0, "u 'HAlignmentGRotations' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HAlignmentGRotations", 2159, G__AlignmentDict_514_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlignmentDict_514_0_23, (int) ('u'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations), -1, 1, 1, 1, 1, 0, "u 'HAlignmentGRotations' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHAlignmentGBase(void) {
   /* HAlignmentGBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGBase));
   G__memfunc_setup("CollectTracks",1326,G__AlignmentDict_518_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ResetCounts",1151,G__AlignmentDict_518_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("AddToClones",1072,G__AlignmentDict_518_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("FillHistograms",1448,G__AlignmentDict_518_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Align",491,G__AlignmentDict_518_0_6, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 11 - - i - 'Int_t' 11 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetNtBranches",1300,G__AlignmentDict_518_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetAlignGeom",1171,G__AlignmentDict_518_0_8, 85, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlignRot",1088,G__AlignmentDict_518_0_9, 85, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCloneSize",1196,G__AlignmentDict_518_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistoNumbers",1539,G__AlignmentDict_518_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlignTracks",1395,G__AlignmentDict_518_0_12, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistoClones",1419,G__AlignmentDict_518_0_13, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUsedMod",977,G__AlignmentDict_518_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUsedSec",972,G__AlignmentDict_518_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNtuple",932,G__AlignmentDict_518_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TNtuple' - 0 - _nt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNtuple",920,G__AlignmentDict_518_0_17, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TNtuple), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPoints",925,G__AlignmentDict_518_0_18, 121, -1, -1, 0, 7, 1, 1, 0, 
"1 - 'void (*)(Float_t&, Float_t&, Float_t&, Float_t&, HGeomVector&, HGeomVector&)' 0 - pFunc f - 'Float_t' 1 - - "
"f - 'Float_t' 1 - - f - 'Float_t' 1 - - "
"f - 'Float_t' 1 - - u 'HGeomVector' - 1 - - "
"u 'HGeomVector' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_518_0_19, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HAlignmentGBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_518_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_518_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HAlignmentGBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_518_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HAlignmentGBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_518_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_518_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_518_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_518_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_518_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGBase::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HAlignmentGBase", 1575, G__AlignmentDict_518_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlignmentDict_518_0_32, (int) ('u'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGBase), -1, 1, 1, 1, 1, 0, "u 'HAlignmentGBase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHAlignmentGParticleBase(void) {
   /* HAlignmentGParticleBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticleBase));
   G__memfunc_setup("ResetAll",796,G__AlignmentDict_519_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetIsGood",881,G__AlignmentDict_519_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - _isGood", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIsGood",869,G__AlignmentDict_519_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_519_0_5, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HAlignmentGParticleBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_519_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGParticleBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_519_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HAlignmentGParticleBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_519_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HAlignmentGParticleBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_519_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_519_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGParticleBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_519_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGParticleBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_519_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGParticleBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_519_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGParticleBase::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HAlignmentGParticleBase", 2395, G__AlignmentDict_519_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlignmentDict_519_0_18, (int) ('u'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGParticleBase), -1, 1, 1, 1, 1, 0, "u 'HAlignmentGParticleBase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHAlignmentGNoMag(void) {
   /* HAlignmentGNoMag */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGNoMag));
   G__memfunc_setup("HAlignmentGNoMag",1536,G__AlignmentDict_520_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGNoMag), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIname",790,G__AlignmentDict_520_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - _inName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIname",778,G__AlignmentDict_520_0_3, 117, G__get_linked_tagnum(&G__AlignmentDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__AlignmentDict_520_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - - u 'TString' - 0 - - "
"i - 'Int_t' 0 - - g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CollectTracks",1326,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetCounts",1151,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddToClones",1072,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Align",491,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 11 - - i - 'Int_t' 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckAlignment",1405,G__AlignmentDict_520_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillHistograms",1448,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNtBranches",1300,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddData",643,G__AlignmentDict_520_0_12, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Selected",809,G__AlignmentDict_520_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HAlignmentGParticle' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTargetHisto",1422,G__AlignmentDict_520_0_14, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignMod",779,G__AlignmentDict_520_0_15, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Raster",625,G__AlignmentDict_520_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH2F' - 0 - - U 'TH2F' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("JustPlot",837,G__AlignmentDict_520_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFitVersion",1321,G__AlignmentDict_520_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFitVersion",1333,G__AlignmentDict_520_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - _fitVersion", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefault",1041,G__AlignmentDict_520_0_20, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - - "
"f - 'Float_t' 1 - - f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcSetup",1137,G__AlignmentDict_520_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 2 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isMdc",496,G__AlignmentDict_520_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetRaster",1140,G__AlignmentDict_520_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_520_0_24, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HAlignmentGNoMag::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_520_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGNoMag::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_520_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HAlignmentGNoMag::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_520_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HAlignmentGNoMag::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_520_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_520_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGNoMag::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_520_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGNoMag::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_520_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGNoMag::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_520_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGNoMag::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HAlignmentGNoMag", 1662, G__AlignmentDict_520_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHAlignmentGCosmics(void) {
   /* HAlignmentGCosmics */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGCosmics));
   G__memfunc_setup("HAlignmentGCosmics",1791,G__AlignmentDict_522_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGCosmics), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNtuple",932,G__AlignmentDict_522_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TNtuple' - 0 - _nt", "{ nt = _nt;} ", (void*) NULL, 0);
   G__memfunc_setup("GetNtuple",920,G__AlignmentDict_522_0_3, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TNtuple), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlignGeom",1171,G__AlignmentDict_522_0_4, 85, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlignRot",1088,G__AlignmentDict_522_0_5, 85, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRefTrans",1093,G__AlignmentDict_522_0_6, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTransGSI",1035,G__AlignmentDict_522_0_7, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Align",491,G__AlignmentDict_522_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignLocal",982,G__AlignmentDict_522_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkAlignment",1437,G__AlignmentDict_522_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Yoxlama",731,G__AlignmentDict_522_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinFunction",1418,G__AlignmentDict_522_0_12, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"U 'HGeomTransform' - 0 - - g - 'Bool_t' 0 'kFALSE' test "
"u 'TString' - 0 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("changename",1031,G__AlignmentDict_522_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH1F' - 0 - - u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHistograms",1480,G__AlignmentDict_522_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'HGeomVector' - 1 - - u 'HGeomVector' - 1 - - "
"i - 'Int_t' 0 - - u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinFunction3",1469,G__AlignmentDict_522_0_15, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"U 'HGeomVector' - 0 - - U 'HGeomTransform' - 0 - - "
"g - 'Bool_t' 0 'kFALSE' test u 'TString' - 0 '\"\"' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHistograms3",1531,G__AlignmentDict_522_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'HGeomVector' - 1 - - i - 'Int_t' 0 - - "
"u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFixedSector",1408,G__AlignmentDict_522_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFixedSector",1420,G__AlignmentDict_522_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - _fixedSector", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_522_0_19, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HAlignmentGCosmics::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_522_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGCosmics::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_522_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HAlignmentGCosmics::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_522_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HAlignmentGCosmics::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_522_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_522_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGCosmics::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_522_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGCosmics::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_522_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGCosmics::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_522_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGCosmics::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HAlignmentGCosmics", 1791, G__AlignmentDict_522_0_31, (int) ('i'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGCosmics), -1, 0, 1, 1, 1, 0, "u 'HAlignmentGCosmics' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HAlignmentGCosmics", 1917, G__AlignmentDict_522_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlignmentDict_522_0_33, (int) ('u'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGCosmics), -1, 1, 1, 1, 1, 0, "u 'HAlignmentGCosmics' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHAlignmentGShower(void) {
   /* HAlignmentGShower */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGShower));
   G__memfunc_setup("HAlignmentGShower",1702,G__AlignmentDict_524_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGShower), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNtuple",932,G__AlignmentDict_524_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TNtuple' - 0 - _nt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNtuple",920,G__AlignmentDict_524_0_3, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TNtuple), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlignGeom",1171,G__AlignmentDict_524_0_4, 85, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGGeom), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlignRot",1088,G__AlignmentDict_524_0_5, 85, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGRotations), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinFunction",1418,G__AlignmentDict_524_0_6, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "u 'HGeomTransform' - 1 - trans", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("seTrans",736,G__AlignmentDict_524_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomTransform' - 1 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTransOld",1127,G__AlignmentDict_524_0_8, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTransNew",1138,G__AlignmentDict_524_0_9, 117, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPoints",957,G__AlignmentDict_524_0_10, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'HGeomVector' - 1 - - u 'HGeomVector' - 1 - - "
"u 'HGeomVector' - 1 - - u 'HGeomTransform' - 1 - - "
"F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckAlignment",1405,G__AlignmentDict_524_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'HGeomTransform' - 0 - - u 'HGeomTransform' - 0 - - "
"U 'TFile' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlignSec",1094,G__AlignmentDict_524_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAlignMode",1212,G__AlignmentDict_524_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - _alignMode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlignMode",1200,G__AlignmentDict_524_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignShower",1123,G__AlignmentDict_524_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_524_0_16, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HAlignmentGShower::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_524_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGShower::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_524_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HAlignmentGShower::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_524_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HAlignmentGShower::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_524_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_524_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGShower::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_524_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGShower::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_524_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentGShower::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_524_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentGShower::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HAlignmentGShower", 1702, G__AlignmentDict_524_0_28, (int) ('i'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGShower), -1, 0, 1, 1, 1, 0, "u 'HAlignmentGShower' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HAlignmentGShower", 1828, G__AlignmentDict_524_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlignmentDict_524_0_30, (int) ('u'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentGShower), -1, 1, 1, 1, 1, 0, "u 'HAlignmentGShower' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcCosmicsCandidate(void) {
   /* HMdcCosmicsCandidate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidate));
   G__memfunc_setup("printParam",1054,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createHists",1151,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initVariables",1357,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectTofHits",1447,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectRpcHits",1443,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testBeta",828,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 4, 0, 
"u 'HMdcCosmicsCandidate::MetaHit' - 11 - h1 u 'HMdcCosmicsCandidate::MetaHit' - 11 - h2 "
"g - 'Bool_t' 0 'kFALSE' mHists", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCluster",1161,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__AlignmentDictLN_HMdcClus), -1, 0, 4, 1, 4, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - seg "
"u 'HMdcList12GroupCells' - 1 - listCells U 'HMdcClus' - 0 - prevClus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillTrack",924,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'HMdcCosmicsCandidate::TrackCand' - 1 - bestCand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testTrack",949,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isCrossMod",1030,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testSectors",1187,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"u 'HMdcCosmicsCandidate::TrackCand' - 1 - trackCand i - 'Int_t' 0 - sec "
"i - 'Int_t' 0 '0' part", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSectors",1142,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'HMdcCosmicsCandidate::TrackCand' - 1 - trackCand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcCosmicsCandidate",1962,G__AlignmentDict_545_0_13, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidate), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcCosmicsCandidate",1962,G__AlignmentDict_545_0_14, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HMdcCosmicsCandidate), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setBetaCut",1012,G__AlignmentDict_545_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - min d - 'Double_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDCellWindow",1416,G__AlignmentDict_545_0_20, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - wM1 f - 'Float_t' 0 - wM2 "
"f - 'Float_t' 0 - wM3 f - 'Float_t' 0 - wM4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNLayPerModCut",1587,G__AlignmentDict_545_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSelectionCut",1566,G__AlignmentDict_545_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - maxLW d - 'Double_t' 0 - qu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeHistograms",1471,G__AlignmentDict_545_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHistFile",1124,G__AlignmentDict_545_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"./\"' dir C - 'Char_t' 10 '\"cosmCandHists\"' fileNm "
"C - 'Char_t' 10 '\"NEW\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSkipEvent",1253,G__AlignmentDict_545_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scaleDownTrack",1429,G__AlignmentDict_545_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - nMdcTr d - 'Double_t' 0 - sc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scaleDownTrack",1429,G__AlignmentDict_545_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - sca", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParContainersStatic",2285,G__AlignmentDict_545_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZShiftForTof",1524,G__AlignmentDict_545_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZShiftForRpc",1520,G__AlignmentDict_545_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useTofHits",1038,G__AlignmentDict_545_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useRpcHits",1034,G__AlignmentDict_545_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useTofClusters",1483,G__AlignmentDict_545_0_33, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useRpcClusters",1479,G__AlignmentDict_545_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_545_0_35, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcCosmicsCandidate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_545_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCosmicsCandidate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_545_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcCosmicsCandidate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_545_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcCosmicsCandidate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_545_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_545_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCosmicsCandidate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_545_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCosmicsCandidate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_545_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcCosmicsCandidate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_545_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcCosmicsCandidate::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcCosmicsCandidate", 2088, G__AlignmentDict_545_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHCosmicCalibEvSkip(void) {
   /* HCosmicCalibEvSkip */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HCosmicCalibEvSkip));
   G__memfunc_setup("HCosmicCalibEvSkip",1747,G__AlignmentDict_549_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HCosmicCalibEvSkip), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HCosmicCalibEvSkip",1747,G__AlignmentDict_549_0_2, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HCosmicCalibEvSkip), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__AlignmentDict_549_0_7, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HCosmicCalibEvSkip::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_549_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HCosmicCalibEvSkip::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_549_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HCosmicCalibEvSkip::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_549_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HCosmicCalibEvSkip::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_549_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_549_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HCosmicCalibEvSkip::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_549_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HCosmicCalibEvSkip::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_549_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HCosmicCalibEvSkip::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_549_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HCosmicCalibEvSkip::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HCosmicCalibEvSkip", 1873, G__AlignmentDict_549_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHAlignmentMeta(void) {
   /* HAlignmentMeta */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentMeta));
   G__memfunc_setup("fillArray",934,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectTracksIter",1660,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "d - 'Double_t' 0 - nSigmasCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectTracks",1256,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "d - 'Double_t' 0 - nSigmasCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMinDist",1099,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMinDist",1099,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMinDist",1099,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'HGeomTransform' - 1 - trans", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWeights",1063,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNtuple",964,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TNtuple' - 0 - nt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcXOffset",1106,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "d - 'Double_t' 0 - nSigmasCut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcXOffset",1106,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"d - 'Double_t' 0 - nSigmasCut s - 'Short_t' 0 - cellInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HAlignmentMeta",1390,G__AlignmentDict_550_0_11, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentMeta), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doFiltering",1143,G__AlignmentDict_550_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - st", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("alignMeta",914,G__AlignmentDict_550_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec U 'TNtuple' - 0 - nt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkAlignment",1437,G__AlignmentDict_550_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlignSec",1094,G__AlignmentDict_550_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCuts",747,G__AlignmentDict_550_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - cutX d - 'Double_t' 0 - cutY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinFunction",1450,G__AlignmentDict_550_0_17, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fcnMeta",702,G__AlignmentDict_550_0_18, 121, -1, -1, 0, 5, 3, 1, 0, 
"i - 'Int_t' 1 - npar D - 'Double_t' 0 - gin "
"d - 'Double_t' 1 - fn D - 'Double_t' 0 - par "
"i - 'Int_t' 0 - iflag", (char*)NULL, (void*) G__func2void( (void (*)(Int_t&, Double_t*, Double_t&, Double_t*, Int_t))(&HAlignmentMeta::fcnMeta) ), 0);
   G__memfunc_setup("getArrTansOld",1306,G__AlignmentDict_550_0_19, 85, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArrTansNew",1317,G__AlignmentDict_550_0_20, 85, G__get_linked_tagnum(&G__AlignmentDictLN_HGeomTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNMetaModules",1530,G__AlignmentDict_550_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcDetector",1451,G__AlignmentDict_550_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '2.4' cutX d - 'Double_t' 0 '2.2' cutY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShowerDetector",1790,G__AlignmentDict_550_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '2.0' cutX d - 'Double_t' 0 '2.0' cutY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofDetector",1455,G__AlignmentDict_550_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '3.6' cutX d - 'Double_t' 0 '2.6' cutY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitTofModYPositions",1965,G__AlignmentDict_550_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcXCorr",1107,G__AlignmentDict_550_0_26, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - co i - 'Int_t' 0 - ce", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofXCorr",1111,G__AlignmentDict_550_0_27, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - mo i - 'Int_t' 0 - ce", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcRpcCellXOffset",1783,G__AlignmentDict_550_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_550_0_29, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HAlignmentMeta::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_550_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentMeta::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_550_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HAlignmentMeta::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_550_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HAlignmentMeta::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_550_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_550_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentMeta::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_550_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentMeta::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_550_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HAlignmentMeta::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_550_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HAlignmentMeta::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HAlignmentMeta", 1390, G__AlignmentDict_550_0_41, (int) ('i'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentMeta), -1, 0, 1, 1, 1, 0, "u 'HAlignmentMeta' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HAlignmentMeta", 1516, G__AlignmentDict_550_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AlignmentDict_550_0_43, (int) ('u'), G__get_linked_tagnum(&G__AlignmentDictLN_HAlignmentMeta), -1, 1, 1, 1, 1, 0, "u 'HAlignmentMeta' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMille(void) {
   /* Mille */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_Mille));
   G__memfunc_setup("Mille",499,G__AlignmentDict_552_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_Mille), -1, 0, 3, 1, 1, 0, 
"C - - 10 - outFileName g - - 0 'true' asBinary "
"g - - 0 'false' writeZero", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mille",531,G__AlignmentDict_552_0_2, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - - 0 - NLC F - - 10 - derLc "
"i - - 0 - NGL F - - 10 - derGl "
"I - - 10 - label f - - 0 - rMeas "
"f - - 0 - sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("special",737,G__AlignmentDict_552_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - nSpecial F - - 10 - floatings "
"I - - 10 - integers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("kill",428,G__AlignmentDict_552_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__AlignmentDict_552_0_5, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("newSet",630,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkBufferSize",1523,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 4, 0, 
"i - - 0 - nLocal i - - 0 - nGlobal", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Mille", 625, G__AlignmentDict_552_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcMille(void) {
   /* HMdcMille */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AlignmentDictLN_HMdcMille));
   G__memfunc_setup("HMdcMille",847,G__AlignmentDict_639_0_1, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HMdcMille), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 - milleOutFName C - 'Char_t' 10 '0' geomPFName "
"i - 'Int_t' 0 '0' bmTimeID C - 'Char_t' 10 '0' sumOfShFName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcMille",847,G__AlignmentDict_639_0_2, 105, G__get_linked_tagnum(&G__AlignmentDictLN_HMdcMille), -1, 0, 0, 1, 1, 0, "", "Don't use it", (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setWiresMinNum",1450,G__AlignmentDict_639_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doShiftsInSecSys",1621,G__AlignmentDict_639_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doShiftsInModSys",1626,G__AlignmentDict_639_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doShiftsInLabSys",1609,G__AlignmentDict_639_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFixFitTOffsetFlag",1995,G__AlignmentDict_639_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMille",831,G__AlignmentDict_639_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Mille' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCopyGeomFile",1519,G__AlignmentDict_639_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCopySumShFile",1623,G__AlignmentDict_639_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCopyResFile",1425,G__AlignmentDict_639_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setyCopyLogFile",1538,G__AlignmentDict_639_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCopyHisFile",1419,G__AlignmentDict_639_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcShiftParOnly",1827,G__AlignmentDict_639_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThetaCut",1134,G__AlignmentDict_639_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("packLabel",895,G__AlignmentDict_639_0_20, 105, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - parn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unpackLabel",1122,G__AlignmentDict_639_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 7, 3, 1, 0, 
"i - 'Int_t' 0 - label i - 'Int_t' 1 - btId "
"i - 'Int_t' 1 - sys i - 'Int_t' 1 - sec "
"i - 'Int_t' 1 - mod i - 'Int_t' 1 - lay "
"i - 'Int_t' 1 - parn", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&))(&HMdcMille::unpackLabel) ), 0);
   G__memfunc_setup("getIterationNumber",1880,G__AlignmentDict_639_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIterName",1109,G__AlignmentDict_639_0_23, 117, G__get_linked_tagnum(&G__AlignmentDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPedeInFileName",1666,G__AlignmentDict_639_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fixFullMod",1018,G__AlignmentDict_639_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fixModPar",906,G__AlignmentDict_639_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fixFullLay",1024,G__AlignmentDict_639_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fixLayPar",912,G__AlignmentDict_639_0_28, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fixPar",618,G__AlignmentDict_639_0_29, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doLayerPart2Align",1668,G__AlignmentDict_639_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useCellThicknessParam",2154,G__AlignmentDict_639_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("creatPedeTaskFile",1696,G__AlignmentDict_639_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"pedeTask.txt\"' fileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useInversionMethod",1899,G__AlignmentDict_639_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '3' nit f - 'Float_t' 0 '0.001' acc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useBandCholeskyMethod",2149,G__AlignmentDict_639_0_34, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '8' nit f - 'Float_t' 0 '0.01' acc "
"i - 'Int_t' 0 '6' bwidth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useCholeskyMethod",1776,G__AlignmentDict_639_0_35, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '5' nit f - 'Float_t' 0 '0.001' acc "
"i - 'Int_t' 0 '6' bwidth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useSparseGMRESMethod",1946,G__AlignmentDict_639_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '5' nit f - 'Float_t' 0 '0.01' acc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useFullGMRESMethod",1727,G__AlignmentDict_639_0_37, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '5' nit f - 'Float_t' 0 '0.01' acc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useDiagonalizationMethod",2507,G__AlignmentDict_639_0_38, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '5' nit f - 'Float_t' 0 '0.01' acc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParConstrainFile",1952,G__AlignmentDict_639_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoHistsFlag",1422,G__AlignmentDict_639_0_40, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusterMultCut",1788,G__AlignmentDict_639_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("noFiltering",1153,G__AlignmentDict_639_0_42, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doFiltering",1143,G__AlignmentDict_639_0_43, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doFilteringOnly",1561,G__AlignmentDict_639_0_44, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxNumWiresCut",1752,G__AlignmentDict_639_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - wc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxNumWiresCut",1752,G__AlignmentDict_639_0_46, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - cs1 i - 'Int_t' 0 - cs2 "
"i - 'Int_t' 0 - cs3 i - 'Int_t' 0 - cs4 "
"i - 'Int_t' 0 - cs5 i - 'Int_t' 0 - cs6", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDef",603,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIMod",693,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setILay",699,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIModILay",1060,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIModILay",1060,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShiftTransformation",2337,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrShiftInModSys",1830,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcShiftInModSys",1703,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"U 'HGeomTransform' - 10 - mdcSys U 'HGeomTransform' - 10 - laySysMod "
"u 'HGeomTransform' - 11 - shift u 'HGeomTransform' - 1 - laySh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrShiftInSecSys",1825,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcShiftInSecSys",1698,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"U 'HGeomTransform' - 10 - laySec u 'HGeomTransform' - 11 - shift "
"u 'HGeomTransform' - 1 - laySh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrShiftInLabSys",1813,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcShiftInLabSys",1686,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"U 'HGeomTransform' - 10 - secSys U 'HGeomTransform' - 10 - laySysMod "
"u 'HGeomTransform' - 11 - shift u 'HGeomTransform' - 1 - laySh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitAlgorithmForMille",2052,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitAlgForMilleCosmic",1999,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sendToMille",1120,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGlobalDer",1196,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGlobalDerWTof",1580,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcGlobDer",1074,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - parNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDriftTime",1307,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 0, 
"u 'HGeomTransform' - 11 - laySys i - 'Int_t' 1 - distSign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDerTofCorr",1389,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - p D - 'Double_t' 0 '0' dDrTm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("creatPedeInParamFile",1973,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("creatSumOfShiftsFile",2026,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readPedeResFile",1476,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - - 10 - fileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadGeometryPar",1551,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeShifts",1039,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeParAsciiFile",1719,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printErrorAndExit",1764,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"C - - 10 - func C - - 10 - form "
"C - - 10 '0' str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readSumOfShiftsFile",1911,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addShifts",922,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - buffer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createHists",1151,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openNewBinaryFile",1729,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writePedeTaskFile",1724,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyFile",827,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"C - - 10 - op u 'TString' - 1 - file "
"C - - 10 '0' ext", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDDriftTime",1375,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eventFilter",1160,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AlignmentDict_639_0_82, 85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcMille::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AlignmentDict_639_0_83, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcMille::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AlignmentDict_639_0_84, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcMille::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AlignmentDict_639_0_85, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcMille::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AlignmentDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AlignmentDict_639_0_89, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AlignmentDict_639_0_90, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcMille::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AlignmentDict_639_0_91, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcMille::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AlignmentDict_639_0_92, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcMille::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AlignmentDict_639_0_93, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcMille::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcMille", 973, G__AlignmentDict_639_0_94, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncAlignmentDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalAlignmentDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcAlignmentDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__AlignmentDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ifstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ofstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HGeomVector = { "HGeomVector" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HGeomTransform = { "HGeomTransform" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HAlignmentGData = { "HAlignmentGData" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HAlignmentGGeom = { "HAlignmentGGeom" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HAlignmentGParticle = { "HAlignmentGParticle" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__AlignmentDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TNtuple = { "TNtuple" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HAlignmentGRotations = { "HAlignmentGRotations" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMinuit = { "TMinuit" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HAlignmentGBase = { "HAlignmentGBase" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HAlignmentGParticleBase = { "HAlignmentGParticleBase" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HAlignmentGNoMag = { "HAlignmentGNoMag" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HAlignmentGCosmics = { "HAlignmentGCosmics" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdcGetContainers = { "HMdcGetContainers" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HAlignmentGShower = { "HAlignmentGShower" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HTask = { "HTask" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HReconstructor = { "HReconstructor" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TRandom = { "TRandom" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdcSizesCells = { "HMdcSizesCells" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdcSizesCellsLayer = { "HMdcSizesCellsLayer" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdcList12GroupCells = { "HMdcList12GroupCells" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdcClus = { "HMdcClus" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdcCosmicsCandidate = { "HMdcCosmicsCandidate" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdcCosmicsCandidatecLcLMetaHit = { "HMdcCosmicsCandidate::MetaHit" , 115 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdcCosmicsCandidatecLcLTrackCand = { "HMdcCosmicsCandidate::TrackCand" , 115 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdcCosmicsCandidatecLcLLayerSize = { "HMdcCosmicsCandidate::LayerSize" , 115 , -1 };
G__linked_taginfo G__AlignmentDictLN_HCosmicCalibEvSkip = { "HCosmicCalibEvSkip" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HAlignmentMeta = { "HAlignmentMeta" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HAlignmentMetacLcLTrackMdcMeta = { "HAlignmentMeta::TrackMdcMeta" , 115 , -1 };
G__linked_taginfo G__AlignmentDictLN_Mille = { "Mille" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_MillecLcLdA = { "Mille::$" , 101 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdcWireData = { "HMdcWireData" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdcTrackParam = { "HMdcTrackParam" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdcSizesCellsMod = { "HMdcSizesCellsMod" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdc12Fit = { "HMdc12Fit" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdcDetector = { "HMdcDetector" , 99 , -1 };
G__linked_taginfo G__AlignmentDictLN_HMdcMille = { "HMdcMille" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableAlignmentDict() {
  G__AlignmentDictLN_TClass.tagnum = -1 ;
  G__AlignmentDictLN_TBuffer.tagnum = -1 ;
  G__AlignmentDictLN_TMemberInspector.tagnum = -1 ;
  G__AlignmentDictLN_TObject.tagnum = -1 ;
  G__AlignmentDictLN_TNamed.tagnum = -1 ;
  G__AlignmentDictLN_TString.tagnum = -1 ;
  G__AlignmentDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__AlignmentDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__AlignmentDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__AlignmentDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AlignmentDictLN_TClonesArray.tagnum = -1 ;
  G__AlignmentDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__AlignmentDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AlignmentDictLN_HGeomVector.tagnum = -1 ;
  G__AlignmentDictLN_HGeomTransform.tagnum = -1 ;
  G__AlignmentDictLN_HAlignmentGData.tagnum = -1 ;
  G__AlignmentDictLN_HAlignmentGGeom.tagnum = -1 ;
  G__AlignmentDictLN_HAlignmentGParticle.tagnum = -1 ;
  G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__AlignmentDictLN_TFile.tagnum = -1 ;
  G__AlignmentDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__AlignmentDictLN_TNtuple.tagnum = -1 ;
  G__AlignmentDictLN_HAlignmentGRotations.tagnum = -1 ;
  G__AlignmentDictLN_TH2F.tagnum = -1 ;
  G__AlignmentDictLN_TH1F.tagnum = -1 ;
  G__AlignmentDictLN_TMinuit.tagnum = -1 ;
  G__AlignmentDictLN_HAlignmentGBase.tagnum = -1 ;
  G__AlignmentDictLN_HAlignmentGParticleBase.tagnum = -1 ;
  G__AlignmentDictLN_HAlignmentGNoMag.tagnum = -1 ;
  G__AlignmentDictLN_HAlignmentGCosmics.tagnum = -1 ;
  G__AlignmentDictLN_HMdcGetContainers.tagnum = -1 ;
  G__AlignmentDictLN_HAlignmentGShower.tagnum = -1 ;
  G__AlignmentDictLN_HTask.tagnum = -1 ;
  G__AlignmentDictLN_HLocation.tagnum = -1 ;
  G__AlignmentDictLN_HReconstructor.tagnum = -1 ;
  G__AlignmentDictLN_TRandom.tagnum = -1 ;
  G__AlignmentDictLN_HCategory.tagnum = -1 ;
  G__AlignmentDictLN_HMdcSizesCells.tagnum = -1 ;
  G__AlignmentDictLN_HMdcSizesCellsLayer.tagnum = -1 ;
  G__AlignmentDictLN_HMdcList12GroupCells.tagnum = -1 ;
  G__AlignmentDictLN_HMdcClus.tagnum = -1 ;
  G__AlignmentDictLN_HMdcCosmicsCandidate.tagnum = -1 ;
  G__AlignmentDictLN_HMdcCosmicsCandidatecLcLMetaHit.tagnum = -1 ;
  G__AlignmentDictLN_HMdcCosmicsCandidatecLcLTrackCand.tagnum = -1 ;
  G__AlignmentDictLN_HMdcCosmicsCandidatecLcLLayerSize.tagnum = -1 ;
  G__AlignmentDictLN_HCosmicCalibEvSkip.tagnum = -1 ;
  G__AlignmentDictLN_HAlignmentMeta.tagnum = -1 ;
  G__AlignmentDictLN_HAlignmentMetacLcLTrackMdcMeta.tagnum = -1 ;
  G__AlignmentDictLN_Mille.tagnum = -1 ;
  G__AlignmentDictLN_MillecLcLdA.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__AlignmentDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__AlignmentDictLN_HMdcWireData.tagnum = -1 ;
  G__AlignmentDictLN_HMdcTrackParam.tagnum = -1 ;
  G__AlignmentDictLN_HMdcSizesCellsMod.tagnum = -1 ;
  G__AlignmentDictLN_HMdc12Fit.tagnum = -1 ;
  G__AlignmentDictLN_HMdcDetector.tagnum = -1 ;
  G__AlignmentDictLN_HMdcMille.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableAlignmentDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TString);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HGeomVector);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HGeomTransform);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HAlignmentGData),sizeof(HAlignmentGData),-1,29952,(char*)NULL,G__setup_memvarHAlignmentGData,G__setup_memfuncHAlignmentGData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HAlignmentGGeom),sizeof(HAlignmentGGeom),-1,29952,(char*)NULL,G__setup_memvarHAlignmentGGeom,G__setup_memfuncHAlignmentGGeom);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HAlignmentGParticle),sizeof(HAlignmentGParticle),-1,30464,(char*)NULL,G__setup_memvarHAlignmentGParticle,G__setup_memfuncHAlignmentGParticle);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TNtuple);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HAlignmentGRotations),sizeof(HAlignmentGRotations),-1,29952,(char*)NULL,G__setup_memvarHAlignmentGRotations,G__setup_memfuncHAlignmentGRotations);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TH2F);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMinuit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HAlignmentGBase),sizeof(HAlignmentGBase),-1,29958,(char*)NULL,G__setup_memvarHAlignmentGBase,G__setup_memfuncHAlignmentGBase);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HAlignmentGParticleBase),sizeof(HAlignmentGParticleBase),-1,29953,(char*)NULL,G__setup_memvarHAlignmentGParticleBase,G__setup_memfuncHAlignmentGParticleBase);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HAlignmentGNoMag),sizeof(HAlignmentGNoMag),-1,29952,(char*)NULL,G__setup_memvarHAlignmentGNoMag,G__setup_memfuncHAlignmentGNoMag);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HAlignmentGCosmics),sizeof(HAlignmentGCosmics),-1,29952,(char*)NULL,G__setup_memvarHAlignmentGCosmics,G__setup_memfuncHAlignmentGCosmics);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdcGetContainers);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HAlignmentGShower),sizeof(HAlignmentGShower),-1,29952,(char*)NULL,G__setup_memvarHAlignmentGShower,G__setup_memfuncHAlignmentGShower);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HTask);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HLocation);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HReconstructor);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TRandom);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HCategory);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdcSizesCells);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdcSizesCellsLayer);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdcList12GroupCells);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdcClus);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdcCosmicsCandidate),sizeof(HMdcCosmicsCandidate),-1,62720,(char*)NULL,G__setup_memvarHMdcCosmicsCandidate,G__setup_memfuncHMdcCosmicsCandidate);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdcCosmicsCandidatecLcLMetaHit);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdcCosmicsCandidatecLcLTrackCand);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdcCosmicsCandidatecLcLLayerSize);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HCosmicCalibEvSkip),sizeof(HCosmicCalibEvSkip),-1,62720,(char*)NULL,G__setup_memvarHCosmicCalibEvSkip,G__setup_memfuncHCosmicCalibEvSkip);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HAlignmentMeta),sizeof(HAlignmentMeta),-1,29952,(char*)NULL,G__setup_memvarHAlignmentMeta,G__setup_memfuncHAlignmentMeta);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HAlignmentMetacLcLTrackMdcMeta);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_Mille),sizeof(Mille),-1,33792,(char*)NULL,G__setup_memvarMille,G__setup_memfuncMille);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_MillecLcLdA);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdcWireData);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdcTrackParam);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdcSizesCellsMod);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdc12Fit);
   G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdcDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AlignmentDictLN_HMdcMille),sizeof(HMdcMille),-1,62720,"Interface class for Millipede alignment.",G__setup_memvarHMdcMille,G__setup_memfuncHMdcMille);
}
extern "C" void G__cpp_setupAlignmentDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupAlignmentDict()");
  G__set_cpp_environmentAlignmentDict();
  G__cpp_setup_tagtableAlignmentDict();

  G__cpp_setup_inheritanceAlignmentDict();

  G__cpp_setup_typetableAlignmentDict();

  G__cpp_setup_memvarAlignmentDict();

  G__cpp_setup_memfuncAlignmentDict();
  G__cpp_setup_globalAlignmentDict();
  G__cpp_setup_funcAlignmentDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncAlignmentDict();
  return;
}
class G__cpp_setup_initAlignmentDict {
  public:
    G__cpp_setup_initAlignmentDict() { G__add_setup_func("AlignmentDict",(G__incsetup)(&G__cpp_setupAlignmentDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initAlignmentDict() { G__remove_setup_func("AlignmentDict"); }
};
G__cpp_setup_initAlignmentDict G__cpp_setup_initializerAlignmentDict;


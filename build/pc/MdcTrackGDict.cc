//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:48:43 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIMdcTrackGDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MdcTrackGDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HMdcTrackGField_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrackGField(void *p = 0);
   static void *newArray_HMdcTrackGField(Long_t size, void *p);
   static void delete_HMdcTrackGField(void *p);
   static void deleteArray_HMdcTrackGField(void *p);
   static void destruct_HMdcTrackGField(void *p);
   static void streamer_HMdcTrackGField(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackGField*)
   {
      ::HMdcTrackGField *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackGField >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackGField", ::HMdcTrackGField::Class_Version(), "././hmdctrackgfield.h", 28,
                  typeid(::HMdcTrackGField), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackGField::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcTrackGField) );
      instance.SetNew(&new_HMdcTrackGField);
      instance.SetNewArray(&newArray_HMdcTrackGField);
      instance.SetDelete(&delete_HMdcTrackGField);
      instance.SetDeleteArray(&deleteArray_HMdcTrackGField);
      instance.SetDestructor(&destruct_HMdcTrackGField);
      instance.SetStreamerFunc(&streamer_HMdcTrackGField);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackGField*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackGField*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackGField*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackGCorrections_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrackGCorrections(void *p = 0);
   static void *newArray_HMdcTrackGCorrections(Long_t size, void *p);
   static void delete_HMdcTrackGCorrections(void *p);
   static void deleteArray_HMdcTrackGCorrections(void *p);
   static void destruct_HMdcTrackGCorrections(void *p);
   static void streamer_HMdcTrackGCorrections(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackGCorrections*)
   {
      ::HMdcTrackGCorrections *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackGCorrections >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackGCorrections", ::HMdcTrackGCorrections::Class_Version(), "././hmdctrackgcorrections.h", 10,
                  typeid(::HMdcTrackGCorrections), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackGCorrections::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcTrackGCorrections) );
      instance.SetNew(&new_HMdcTrackGCorrections);
      instance.SetNewArray(&newArray_HMdcTrackGCorrections);
      instance.SetDelete(&delete_HMdcTrackGCorrections);
      instance.SetDeleteArray(&deleteArray_HMdcTrackGCorrections);
      instance.SetDestructor(&destruct_HMdcTrackGCorrections);
      instance.SetStreamerFunc(&streamer_HMdcTrackGCorrections);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackGCorrections*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackGCorrections*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackGCorrections*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackGSpline_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrackGSpline(void *p = 0);
   static void *newArray_HMdcTrackGSpline(Long_t size, void *p);
   static void delete_HMdcTrackGSpline(void *p);
   static void deleteArray_HMdcTrackGSpline(void *p);
   static void destruct_HMdcTrackGSpline(void *p);
   static void streamer_HMdcTrackGSpline(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackGSpline*)
   {
      ::HMdcTrackGSpline *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackGSpline >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackGSpline", ::HMdcTrackGSpline::Class_Version(), "././hmdctrackgspline.h", 16,
                  typeid(::HMdcTrackGSpline), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackGSpline::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackGSpline) );
      instance.SetNew(&new_HMdcTrackGSpline);
      instance.SetNewArray(&newArray_HMdcTrackGSpline);
      instance.SetDelete(&delete_HMdcTrackGSpline);
      instance.SetDeleteArray(&deleteArray_HMdcTrackGSpline);
      instance.SetDestructor(&destruct_HMdcTrackGSpline);
      instance.SetStreamerFunc(&streamer_HMdcTrackGSpline);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackGSpline*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackGSpline*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackGSpline*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackGFieldPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrackGFieldPar(void *p = 0);
   static void *newArray_HMdcTrackGFieldPar(Long_t size, void *p);
   static void delete_HMdcTrackGFieldPar(void *p);
   static void deleteArray_HMdcTrackGFieldPar(void *p);
   static void destruct_HMdcTrackGFieldPar(void *p);
   static void streamer_HMdcTrackGFieldPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackGFieldPar*)
   {
      ::HMdcTrackGFieldPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackGFieldPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackGFieldPar", ::HMdcTrackGFieldPar::Class_Version(), "././hmdctrackgfieldpar.h", 12,
                  typeid(::HMdcTrackGFieldPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackGFieldPar::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackGFieldPar) );
      instance.SetNew(&new_HMdcTrackGFieldPar);
      instance.SetNewArray(&newArray_HMdcTrackGFieldPar);
      instance.SetDelete(&delete_HMdcTrackGFieldPar);
      instance.SetDeleteArray(&deleteArray_HMdcTrackGFieldPar);
      instance.SetDestructor(&destruct_HMdcTrackGFieldPar);
      instance.SetStreamerFunc(&streamer_HMdcTrackGFieldPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackGFieldPar*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackGFieldPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackGFieldPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackGCorrPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrackGCorrPar(void *p = 0);
   static void *newArray_HMdcTrackGCorrPar(Long_t size, void *p);
   static void delete_HMdcTrackGCorrPar(void *p);
   static void deleteArray_HMdcTrackGCorrPar(void *p);
   static void destruct_HMdcTrackGCorrPar(void *p);
   static void streamer_HMdcTrackGCorrPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackGCorrPar*)
   {
      ::HMdcTrackGCorrPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackGCorrPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackGCorrPar", ::HMdcTrackGCorrPar::Class_Version(), "././hmdctrackgcorrpar.h", 16,
                  typeid(::HMdcTrackGCorrPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackGCorrPar::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcTrackGCorrPar) );
      instance.SetNew(&new_HMdcTrackGCorrPar);
      instance.SetNewArray(&newArray_HMdcTrackGCorrPar);
      instance.SetDelete(&delete_HMdcTrackGCorrPar);
      instance.SetDeleteArray(&deleteArray_HMdcTrackGCorrPar);
      instance.SetDestructor(&destruct_HMdcTrackGCorrPar);
      instance.SetStreamerFunc(&streamer_HMdcTrackGCorrPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackGCorrPar*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackGCorrPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackGCorrPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackGContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrackGContFact(void *p = 0);
   static void *newArray_HMdcTrackGContFact(Long_t size, void *p);
   static void delete_HMdcTrackGContFact(void *p);
   static void deleteArray_HMdcTrackGContFact(void *p);
   static void destruct_HMdcTrackGContFact(void *p);
   static void streamer_HMdcTrackGContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackGContFact*)
   {
      ::HMdcTrackGContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackGContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackGContFact", ::HMdcTrackGContFact::Class_Version(), "././hmdctrackgcontfact.h", 12,
                  typeid(::HMdcTrackGContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackGContFact::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackGContFact) );
      instance.SetNew(&new_HMdcTrackGContFact);
      instance.SetNewArray(&newArray_HMdcTrackGContFact);
      instance.SetDelete(&delete_HMdcTrackGContFact);
      instance.SetDeleteArray(&deleteArray_HMdcTrackGContFact);
      instance.SetDestructor(&destruct_HMdcTrackGContFact);
      instance.SetStreamerFunc(&streamer_HMdcTrackGContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackGContFact*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackGContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackGContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HBaseTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HBaseTrack(void *p = 0);
   static void *newArray_HBaseTrack(Long_t size, void *p);
   static void delete_HBaseTrack(void *p);
   static void deleteArray_HBaseTrack(void *p);
   static void destruct_HBaseTrack(void *p);
   static void streamer_HBaseTrack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HBaseTrack*)
   {
      ::HBaseTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HBaseTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HBaseTrack", ::HBaseTrack::Class_Version(), "././hbasetrack.h", 8,
                  typeid(::HBaseTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HBaseTrack::Dictionary, isa_proxy, 1,
                  sizeof(::HBaseTrack) );
      instance.SetNew(&new_HBaseTrack);
      instance.SetNewArray(&newArray_HBaseTrack);
      instance.SetDelete(&delete_HBaseTrack);
      instance.SetDeleteArray(&deleteArray_HBaseTrack);
      instance.SetDestructor(&destruct_HBaseTrack);
      instance.SetStreamerFunc(&streamer_HBaseTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HBaseTrack*)
   {
      return GenerateInitInstanceLocal((::HBaseTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HBaseTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMetaMatch2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMetaMatch2(void *p = 0);
   static void *newArray_HMetaMatch2(Long_t size, void *p);
   static void delete_HMetaMatch2(void *p);
   static void deleteArray_HMetaMatch2(void *p);
   static void destruct_HMetaMatch2(void *p);
   static void streamer_HMetaMatch2(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMetaMatch2*)
   {
      ::HMetaMatch2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMetaMatch2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMetaMatch2", ::HMetaMatch2::Class_Version(), "././hmetamatch2.h", 10,
                  typeid(::HMetaMatch2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMetaMatch2::Dictionary, isa_proxy, 0,
                  sizeof(::HMetaMatch2) );
      instance.SetNew(&new_HMetaMatch2);
      instance.SetNewArray(&newArray_HMetaMatch2);
      instance.SetDelete(&delete_HMetaMatch2);
      instance.SetDeleteArray(&deleteArray_HMetaMatch2);
      instance.SetDestructor(&destruct_HMetaMatch2);
      instance.SetStreamerFunc(&streamer_HMetaMatch2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMetaMatch2*)
   {
      return GenerateInitInstanceLocal((::HMetaMatch2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMetaMatch2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMetaMatchPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMetaMatchPar(void *p = 0);
   static void *newArray_HMetaMatchPar(Long_t size, void *p);
   static void delete_HMetaMatchPar(void *p);
   static void deleteArray_HMetaMatchPar(void *p);
   static void destruct_HMetaMatchPar(void *p);
   static void streamer_HMetaMatchPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMetaMatchPar*)
   {
      ::HMetaMatchPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMetaMatchPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMetaMatchPar", ::HMetaMatchPar::Class_Version(), "././hmetamatchpar.h", 8,
                  typeid(::HMetaMatchPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMetaMatchPar::Dictionary, isa_proxy, 1,
                  sizeof(::HMetaMatchPar) );
      instance.SetNew(&new_HMetaMatchPar);
      instance.SetNewArray(&newArray_HMetaMatchPar);
      instance.SetDelete(&delete_HMetaMatchPar);
      instance.SetDeleteArray(&deleteArray_HMetaMatchPar);
      instance.SetDestructor(&destruct_HMetaMatchPar);
      instance.SetStreamerFunc(&streamer_HMetaMatchPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMetaMatchPar*)
   {
      return GenerateInitInstanceLocal((::HMetaMatchPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMetaMatchPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMetaMatchF2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMetaMatchF2(void *p = 0);
   static void *newArray_HMetaMatchF2(Long_t size, void *p);
   static void delete_HMetaMatchF2(void *p);
   static void deleteArray_HMetaMatchF2(void *p);
   static void destruct_HMetaMatchF2(void *p);
   static void streamer_HMetaMatchF2(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMetaMatchF2*)
   {
      ::HMetaMatchF2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMetaMatchF2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMetaMatchF2", ::HMetaMatchF2::Class_Version(), "././hmetamatchF2.h", 31,
                  typeid(::HMetaMatchF2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMetaMatchF2::Dictionary, isa_proxy, 0,
                  sizeof(::HMetaMatchF2) );
      instance.SetNew(&new_HMetaMatchF2);
      instance.SetNewArray(&newArray_HMetaMatchF2);
      instance.SetDelete(&delete_HMetaMatchF2);
      instance.SetDeleteArray(&deleteArray_HMetaMatchF2);
      instance.SetDestructor(&destruct_HMetaMatchF2);
      instance.SetStreamerFunc(&streamer_HMetaMatchF2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMetaMatchF2*)
   {
      return GenerateInitInstanceLocal((::HMetaMatchF2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMetaMatchF2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSplineTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSplineTrack(void *p = 0);
   static void *newArray_HSplineTrack(Long_t size, void *p);
   static void delete_HSplineTrack(void *p);
   static void deleteArray_HSplineTrack(void *p);
   static void destruct_HSplineTrack(void *p);
   static void streamer_HSplineTrack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSplineTrack*)
   {
      ::HSplineTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSplineTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSplineTrack", ::HSplineTrack::Class_Version(), "././hsplinetrack.h", 6,
                  typeid(::HSplineTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSplineTrack::Dictionary, isa_proxy, 0,
                  sizeof(::HSplineTrack) );
      instance.SetNew(&new_HSplineTrack);
      instance.SetNewArray(&newArray_HSplineTrack);
      instance.SetDelete(&delete_HSplineTrack);
      instance.SetDeleteArray(&deleteArray_HSplineTrack);
      instance.SetDestructor(&destruct_HSplineTrack);
      instance.SetStreamerFunc(&streamer_HSplineTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSplineTrack*)
   {
      return GenerateInitInstanceLocal((::HSplineTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSplineTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSplinePar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSplinePar(void *p = 0);
   static void *newArray_HSplinePar(Long_t size, void *p);
   static void delete_HSplinePar(void *p);
   static void deleteArray_HSplinePar(void *p);
   static void destruct_HSplinePar(void *p);
   static void streamer_HSplinePar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSplinePar*)
   {
      ::HSplinePar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSplinePar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSplinePar", ::HSplinePar::Class_Version(), "././hsplinepar.h", 6,
                  typeid(::HSplinePar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSplinePar::Dictionary, isa_proxy, 0,
                  sizeof(::HSplinePar) );
      instance.SetNew(&new_HSplinePar);
      instance.SetNewArray(&newArray_HSplinePar);
      instance.SetDelete(&delete_HSplinePar);
      instance.SetDeleteArray(&deleteArray_HSplinePar);
      instance.SetDestructor(&destruct_HSplinePar);
      instance.SetStreamerFunc(&streamer_HSplinePar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSplinePar*)
   {
      return GenerateInitInstanceLocal((::HSplinePar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSplinePar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSplineTrackF2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSplineTrackF2(void *p = 0);
   static void *newArray_HSplineTrackF2(Long_t size, void *p);
   static void delete_HSplineTrackF2(void *p);
   static void deleteArray_HSplineTrackF2(void *p);
   static void destruct_HSplineTrackF2(void *p);
   static void streamer_HSplineTrackF2(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSplineTrackF2*)
   {
      ::HSplineTrackF2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSplineTrackF2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSplineTrackF2", ::HSplineTrackF2::Class_Version(), "././hsplinetrackF2.h", 30,
                  typeid(::HSplineTrackF2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSplineTrackF2::Dictionary, isa_proxy, 0,
                  sizeof(::HSplineTrackF2) );
      instance.SetNew(&new_HSplineTrackF2);
      instance.SetNewArray(&newArray_HSplineTrackF2);
      instance.SetDelete(&delete_HSplineTrackF2);
      instance.SetDeleteArray(&deleteArray_HSplineTrackF2);
      instance.SetDestructor(&destruct_HSplineTrackF2);
      instance.SetStreamerFunc(&streamer_HSplineTrackF2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSplineTrackF2*)
   {
      return GenerateInitInstanceLocal((::HSplineTrackF2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSplineTrackF2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRungeKutta_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRungeKutta(void *p = 0);
   static void *newArray_HRungeKutta(Long_t size, void *p);
   static void delete_HRungeKutta(void *p);
   static void deleteArray_HRungeKutta(void *p);
   static void destruct_HRungeKutta(void *p);
   static void streamer_HRungeKutta(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRungeKutta*)
   {
      ::HRungeKutta *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRungeKutta >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRungeKutta", ::HRungeKutta::Class_Version(), "././hrungekutta.h", 16,
                  typeid(::HRungeKutta), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRungeKutta::Dictionary, isa_proxy, 0,
                  sizeof(::HRungeKutta) );
      instance.SetNew(&new_HRungeKutta);
      instance.SetNewArray(&newArray_HRungeKutta);
      instance.SetDelete(&delete_HRungeKutta);
      instance.SetDeleteArray(&deleteArray_HRungeKutta);
      instance.SetDestructor(&destruct_HRungeKutta);
      instance.SetStreamerFunc(&streamer_HRungeKutta);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRungeKutta*)
   {
      return GenerateInitInstanceLocal((::HRungeKutta*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRungeKutta*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRKTrackB_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRKTrackB(void *p = 0);
   static void *newArray_HRKTrackB(Long_t size, void *p);
   static void delete_HRKTrackB(void *p);
   static void deleteArray_HRKTrackB(void *p);
   static void destruct_HRKTrackB(void *p);
   static void streamer_HRKTrackB(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRKTrackB*)
   {
      ::HRKTrackB *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRKTrackB >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRKTrackB", ::HRKTrackB::Class_Version(), "././hrktrackB.h", 9,
                  typeid(::HRKTrackB), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRKTrackB::Dictionary, isa_proxy, 0,
                  sizeof(::HRKTrackB) );
      instance.SetNew(&new_HRKTrackB);
      instance.SetNewArray(&newArray_HRKTrackB);
      instance.SetDelete(&delete_HRKTrackB);
      instance.SetDeleteArray(&deleteArray_HRKTrackB);
      instance.SetDestructor(&destruct_HRKTrackB);
      instance.SetStreamerFunc(&streamer_HRKTrackB);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRKTrackB*)
   {
      return GenerateInitInstanceLocal((::HRKTrackB*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRKTrackB*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRKTrackBF2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRKTrackBF2(void *p = 0);
   static void *newArray_HRKTrackBF2(Long_t size, void *p);
   static void delete_HRKTrackBF2(void *p);
   static void deleteArray_HRKTrackBF2(void *p);
   static void destruct_HRKTrackBF2(void *p);
   static void streamer_HRKTrackBF2(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRKTrackBF2*)
   {
      ::HRKTrackBF2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRKTrackBF2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRKTrackBF2", ::HRKTrackBF2::Class_Version(), "././hrktrackBF2.h", 36,
                  typeid(::HRKTrackBF2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRKTrackBF2::Dictionary, isa_proxy, 0,
                  sizeof(::HRKTrackBF2) );
      instance.SetNew(&new_HRKTrackBF2);
      instance.SetNewArray(&newArray_HRKTrackBF2);
      instance.SetDelete(&delete_HRKTrackBF2);
      instance.SetDeleteArray(&deleteArray_HRKTrackBF2);
      instance.SetDestructor(&destruct_HRKTrackBF2);
      instance.SetStreamerFunc(&streamer_HRKTrackBF2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRKTrackBF2*)
   {
      return GenerateInitInstanceLocal((::HRKTrackBF2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRKTrackBF2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSplineTaskSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSplineTaskSet(void *p = 0);
   static void *newArray_HSplineTaskSet(Long_t size, void *p);
   static void delete_HSplineTaskSet(void *p);
   static void deleteArray_HSplineTaskSet(void *p);
   static void destruct_HSplineTaskSet(void *p);
   static void streamer_HSplineTaskSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSplineTaskSet*)
   {
      ::HSplineTaskSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSplineTaskSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSplineTaskSet", ::HSplineTaskSet::Class_Version(), "././hsplinetaskset.h", 7,
                  typeid(::HSplineTaskSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSplineTaskSet::Dictionary, isa_proxy, 0,
                  sizeof(::HSplineTaskSet) );
      instance.SetNew(&new_HSplineTaskSet);
      instance.SetNewArray(&newArray_HSplineTaskSet);
      instance.SetDelete(&delete_HSplineTaskSet);
      instance.SetDeleteArray(&deleteArray_HSplineTaskSet);
      instance.SetDestructor(&destruct_HSplineTaskSet);
      instance.SetStreamerFunc(&streamer_HSplineTaskSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSplineTaskSet*)
   {
      return GenerateInitInstanceLocal((::HSplineTaskSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSplineTaskSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSplineTofClF2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSplineTofClF2(void *p = 0);
   static void *newArray_HSplineTofClF2(Long_t size, void *p);
   static void delete_HSplineTofClF2(void *p);
   static void deleteArray_HSplineTofClF2(void *p);
   static void destruct_HSplineTofClF2(void *p);
   static void streamer_HSplineTofClF2(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSplineTofClF2*)
   {
      ::HSplineTofClF2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSplineTofClF2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSplineTofClF2", ::HSplineTofClF2::Class_Version(), "././hsplinetofclF2.h", 10,
                  typeid(::HSplineTofClF2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSplineTofClF2::Dictionary, isa_proxy, 0,
                  sizeof(::HSplineTofClF2) );
      instance.SetNew(&new_HSplineTofClF2);
      instance.SetNewArray(&newArray_HSplineTofClF2);
      instance.SetDelete(&delete_HSplineTofClF2);
      instance.SetDeleteArray(&deleteArray_HSplineTofClF2);
      instance.SetDestructor(&destruct_HSplineTofClF2);
      instance.SetStreamerFunc(&streamer_HSplineTofClF2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSplineTofClF2*)
   {
      return GenerateInitInstanceLocal((::HSplineTofClF2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSplineTofClF2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEnergyLossCorrPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEnergyLossCorrPar(void *p = 0);
   static void *newArray_HEnergyLossCorrPar(Long_t size, void *p);
   static void delete_HEnergyLossCorrPar(void *p);
   static void deleteArray_HEnergyLossCorrPar(void *p);
   static void destruct_HEnergyLossCorrPar(void *p);
   static void streamer_HEnergyLossCorrPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEnergyLossCorrPar*)
   {
      ::HEnergyLossCorrPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEnergyLossCorrPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEnergyLossCorrPar", ::HEnergyLossCorrPar::Class_Version(), "././henergylosscorrpar.h", 6,
                  typeid(::HEnergyLossCorrPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEnergyLossCorrPar::Dictionary, isa_proxy, 0,
                  sizeof(::HEnergyLossCorrPar) );
      instance.SetNew(&new_HEnergyLossCorrPar);
      instance.SetNewArray(&newArray_HEnergyLossCorrPar);
      instance.SetDelete(&delete_HEnergyLossCorrPar);
      instance.SetDeleteArray(&deleteArray_HEnergyLossCorrPar);
      instance.SetDestructor(&destruct_HEnergyLossCorrPar);
      instance.SetStreamerFunc(&streamer_HEnergyLossCorrPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEnergyLossCorrPar*)
   {
      return GenerateInitInstanceLocal((::HEnergyLossCorrPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEnergyLossCorrPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HLvl1EvtFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HLvl1EvtFilter(void *p = 0);
   static void *newArray_HLvl1EvtFilter(Long_t size, void *p);
   static void delete_HLvl1EvtFilter(void *p);
   static void deleteArray_HLvl1EvtFilter(void *p);
   static void destruct_HLvl1EvtFilter(void *p);
   static void streamer_HLvl1EvtFilter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HLvl1EvtFilter*)
   {
      ::HLvl1EvtFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HLvl1EvtFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HLvl1EvtFilter", ::HLvl1EvtFilter::Class_Version(), "././hlvl1evtfilter.h", 8,
                  typeid(::HLvl1EvtFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HLvl1EvtFilter::Dictionary, isa_proxy, 0,
                  sizeof(::HLvl1EvtFilter) );
      instance.SetNew(&new_HLvl1EvtFilter);
      instance.SetNewArray(&newArray_HLvl1EvtFilter);
      instance.SetDelete(&delete_HLvl1EvtFilter);
      instance.SetDeleteArray(&deleteArray_HLvl1EvtFilter);
      instance.SetDestructor(&destruct_HLvl1EvtFilter);
      instance.SetStreamerFunc(&streamer_HLvl1EvtFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HLvl1EvtFilter*)
   {
      return GenerateInitInstanceLocal((::HLvl1EvtFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HLvl1EvtFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTimeLvl1EvtFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTimeLvl1EvtFilter(void *p = 0);
   static void *newArray_HTimeLvl1EvtFilter(Long_t size, void *p);
   static void delete_HTimeLvl1EvtFilter(void *p);
   static void deleteArray_HTimeLvl1EvtFilter(void *p);
   static void destruct_HTimeLvl1EvtFilter(void *p);
   static void streamer_HTimeLvl1EvtFilter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTimeLvl1EvtFilter*)
   {
      ::HTimeLvl1EvtFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTimeLvl1EvtFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTimeLvl1EvtFilter", ::HTimeLvl1EvtFilter::Class_Version(), "././htimelvl1evtfilter.h", 12,
                  typeid(::HTimeLvl1EvtFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTimeLvl1EvtFilter::Dictionary, isa_proxy, 0,
                  sizeof(::HTimeLvl1EvtFilter) );
      instance.SetNew(&new_HTimeLvl1EvtFilter);
      instance.SetNewArray(&newArray_HTimeLvl1EvtFilter);
      instance.SetDelete(&delete_HTimeLvl1EvtFilter);
      instance.SetDeleteArray(&deleteArray_HTimeLvl1EvtFilter);
      instance.SetDestructor(&destruct_HTimeLvl1EvtFilter);
      instance.SetStreamerFunc(&streamer_HTimeLvl1EvtFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTimeLvl1EvtFilter*)
   {
      return GenerateInitInstanceLocal((::HTimeLvl1EvtFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTimeLvl1EvtFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackGField::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackGField::Class_Name()
{
   return "HMdcTrackGField";
}

//______________________________________________________________________________
const char *HMdcTrackGField::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGField*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackGField::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGField*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackGField::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGField*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackGField::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGField*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackGCorrections::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackGCorrections::Class_Name()
{
   return "HMdcTrackGCorrections";
}

//______________________________________________________________________________
const char *HMdcTrackGCorrections::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGCorrections*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackGCorrections::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGCorrections*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackGCorrections::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGCorrections*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackGCorrections::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGCorrections*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackGSpline::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackGSpline::Class_Name()
{
   return "HMdcTrackGSpline";
}

//______________________________________________________________________________
const char *HMdcTrackGSpline::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGSpline*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackGSpline::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGSpline*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackGSpline::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGSpline*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackGSpline::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGSpline*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackGFieldPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackGFieldPar::Class_Name()
{
   return "HMdcTrackGFieldPar";
}

//______________________________________________________________________________
const char *HMdcTrackGFieldPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGFieldPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackGFieldPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGFieldPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackGFieldPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGFieldPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackGFieldPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGFieldPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackGCorrPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackGCorrPar::Class_Name()
{
   return "HMdcTrackGCorrPar";
}

//______________________________________________________________________________
const char *HMdcTrackGCorrPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGCorrPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackGCorrPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGCorrPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackGCorrPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGCorrPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackGCorrPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGCorrPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackGContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackGContFact::Class_Name()
{
   return "HMdcTrackGContFact";
}

//______________________________________________________________________________
const char *HMdcTrackGContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackGContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackGContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackGContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackGContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HBaseTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HBaseTrack::Class_Name()
{
   return "HBaseTrack";
}

//______________________________________________________________________________
const char *HBaseTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HBaseTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HBaseTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HBaseTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HBaseTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HBaseTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HBaseTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HBaseTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMetaMatch2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMetaMatch2::Class_Name()
{
   return "HMetaMatch2";
}

//______________________________________________________________________________
const char *HMetaMatch2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMetaMatch2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMetaMatch2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMetaMatch2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMetaMatch2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMetaMatch2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMetaMatch2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMetaMatch2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMetaMatchPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMetaMatchPar::Class_Name()
{
   return "HMetaMatchPar";
}

//______________________________________________________________________________
const char *HMetaMatchPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMetaMatchPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMetaMatchPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMetaMatchPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMetaMatchPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMetaMatchPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMetaMatchPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMetaMatchPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMetaMatchF2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMetaMatchF2::Class_Name()
{
   return "HMetaMatchF2";
}

//______________________________________________________________________________
const char *HMetaMatchF2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMetaMatchF2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMetaMatchF2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMetaMatchF2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMetaMatchF2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMetaMatchF2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMetaMatchF2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMetaMatchF2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSplineTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSplineTrack::Class_Name()
{
   return "HSplineTrack";
}

//______________________________________________________________________________
const char *HSplineTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSplineTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSplineTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSplineTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSplinePar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSplinePar::Class_Name()
{
   return "HSplinePar";
}

//______________________________________________________________________________
const char *HSplinePar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSplinePar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSplinePar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSplinePar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSplinePar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSplinePar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSplinePar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSplinePar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSplineTrackF2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSplineTrackF2::Class_Name()
{
   return "HSplineTrackF2";
}

//______________________________________________________________________________
const char *HSplineTrackF2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTrackF2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSplineTrackF2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTrackF2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSplineTrackF2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTrackF2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSplineTrackF2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTrackF2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRungeKutta::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRungeKutta::Class_Name()
{
   return "HRungeKutta";
}

//______________________________________________________________________________
const char *HRungeKutta::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRungeKutta*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRungeKutta::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRungeKutta*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRungeKutta::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRungeKutta*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRungeKutta::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRungeKutta*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRKTrackB::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRKTrackB::Class_Name()
{
   return "HRKTrackB";
}

//______________________________________________________________________________
const char *HRKTrackB::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRKTrackB*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRKTrackB::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRKTrackB*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRKTrackB::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRKTrackB*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRKTrackB::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRKTrackB*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRKTrackBF2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRKTrackBF2::Class_Name()
{
   return "HRKTrackBF2";
}

//______________________________________________________________________________
const char *HRKTrackBF2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRKTrackBF2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRKTrackBF2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRKTrackBF2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRKTrackBF2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRKTrackBF2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRKTrackBF2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRKTrackBF2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSplineTaskSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSplineTaskSet::Class_Name()
{
   return "HSplineTaskSet";
}

//______________________________________________________________________________
const char *HSplineTaskSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTaskSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSplineTaskSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTaskSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSplineTaskSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTaskSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSplineTaskSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTaskSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSplineTofClF2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSplineTofClF2::Class_Name()
{
   return "HSplineTofClF2";
}

//______________________________________________________________________________
const char *HSplineTofClF2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTofClF2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSplineTofClF2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTofClF2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSplineTofClF2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTofClF2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSplineTofClF2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSplineTofClF2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEnergyLossCorrPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEnergyLossCorrPar::Class_Name()
{
   return "HEnergyLossCorrPar";
}

//______________________________________________________________________________
const char *HEnergyLossCorrPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEnergyLossCorrPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEnergyLossCorrPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEnergyLossCorrPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEnergyLossCorrPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEnergyLossCorrPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEnergyLossCorrPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEnergyLossCorrPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HLvl1EvtFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HLvl1EvtFilter::Class_Name()
{
   return "HLvl1EvtFilter";
}

//______________________________________________________________________________
const char *HLvl1EvtFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HLvl1EvtFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HLvl1EvtFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HLvl1EvtFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HLvl1EvtFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HLvl1EvtFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HLvl1EvtFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HLvl1EvtFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTimeLvl1EvtFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTimeLvl1EvtFilter::Class_Name()
{
   return "HTimeLvl1EvtFilter";
}

//______________________________________________________________________________
const char *HTimeLvl1EvtFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTimeLvl1EvtFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTimeLvl1EvtFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTimeLvl1EvtFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTimeLvl1EvtFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTimeLvl1EvtFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTimeLvl1EvtFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTimeLvl1EvtFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HMdcTrackGField::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackGField.
      TClass *R__cl = ::HMdcTrackGField::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nfz", &nfz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nfr", &nfr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nfp", &nfp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zflmin", &zflmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zflmax", &zflmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zfldel", &zfldel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rflmin", &rflmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rflmax", &rflmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rfldel", &rfldel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pflmin", &pflmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pflmax", &pflmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfldel", &pfldel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*p_tzfl", &p_tzfl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*p_trfl", &p_trfl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*p_tpfl", &p_tpfl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*acos_table", &acos_table);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Pvector[3]", Pvector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Fvector[3]", Fvector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "step1z", &step1z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "step1r", &step1r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "step1p", &step1p);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dconv", &dconv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nfz_nfr", &nfz_nfr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "one_sixtyth", &one_sixtyth);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrackGField(void *p) {
      return  p ? new(p) ::HMdcTrackGField : new ::HMdcTrackGField;
   }
   static void *newArray_HMdcTrackGField(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrackGField[nElements] : new ::HMdcTrackGField[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrackGField(void *p) {
      delete ((::HMdcTrackGField*)p);
   }
   static void deleteArray_HMdcTrackGField(void *p) {
      delete [] ((::HMdcTrackGField*)p);
   }
   static void destruct_HMdcTrackGField(void *p) {
      typedef ::HMdcTrackGField current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackGField(TBuffer &buf, void *obj) {
      ((::HMdcTrackGField*)obj)->::HMdcTrackGField::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackGField

//______________________________________________________________________________
void HMdcTrackGCorrections::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackGCorrections.
      TClass *R__cl = ::HMdcTrackGCorrections::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiI[16]", phiI);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tetaI[34]", tetaI);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "precI[60]", precI);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corrE[34][16][60]", corrE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corrP[34][16][60]", corrP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corrE1[34][16][60]", corrE1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corrP1[34][16][60]", corrP1);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrackGCorrections(void *p) {
      return  p ? new(p) ::HMdcTrackGCorrections : new ::HMdcTrackGCorrections;
   }
   static void *newArray_HMdcTrackGCorrections(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrackGCorrections[nElements] : new ::HMdcTrackGCorrections[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrackGCorrections(void *p) {
      delete ((::HMdcTrackGCorrections*)p);
   }
   static void deleteArray_HMdcTrackGCorrections(void *p) {
      delete [] ((::HMdcTrackGCorrections*)p);
   }
   static void destruct_HMdcTrackGCorrections(void *p) {
      typedef ::HMdcTrackGCorrections current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackGCorrections(TBuffer &buf, void *obj) {
      ((::HMdcTrackGCorrections*)obj)->::HMdcTrackGCorrections::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackGCorrections

//______________________________________________________________________________
void HMdcTrackGCorrPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackGCorrPar.
      TClass *R__cl = ::HMdcTrackGCorrPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doCorrections", &doCorrections);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*corr", &corr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*corr1", &corr1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*corrScan0", &corrScan0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*corrScan1", &corrScan1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*corrScan2", &corrScan2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*spline", &spline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fieldmap", &fieldmap);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrackGCorrPar(void *p) {
      return  p ? new(p) ::HMdcTrackGCorrPar : new ::HMdcTrackGCorrPar;
   }
   static void *newArray_HMdcTrackGCorrPar(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrackGCorrPar[nElements] : new ::HMdcTrackGCorrPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrackGCorrPar(void *p) {
      delete ((::HMdcTrackGCorrPar*)p);
   }
   static void deleteArray_HMdcTrackGCorrPar(void *p) {
      delete [] ((::HMdcTrackGCorrPar*)p);
   }
   static void destruct_HMdcTrackGCorrPar(void *p) {
      typedef ::HMdcTrackGCorrPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackGCorrPar(TBuffer &buf, void *obj) {
      ((::HMdcTrackGCorrPar*)obj)->::HMdcTrackGCorrPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackGCorrPar

//______________________________________________________________________________
void HMdcTrackGFieldPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackGFieldPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> field;
      R__b.CheckByteCount(R__s, R__c, HMdcTrackGFieldPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HMdcTrackGFieldPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << field;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMdcTrackGFieldPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackGFieldPar.
      TClass *R__cl = ::HMdcTrackGFieldPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*field", &field);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrackGFieldPar(void *p) {
      return  p ? new(p) ::HMdcTrackGFieldPar : new ::HMdcTrackGFieldPar;
   }
   static void *newArray_HMdcTrackGFieldPar(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrackGFieldPar[nElements] : new ::HMdcTrackGFieldPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrackGFieldPar(void *p) {
      delete ((::HMdcTrackGFieldPar*)p);
   }
   static void deleteArray_HMdcTrackGFieldPar(void *p) {
      delete [] ((::HMdcTrackGFieldPar*)p);
   }
   static void destruct_HMdcTrackGFieldPar(void *p) {
      typedef ::HMdcTrackGFieldPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackGFieldPar(TBuffer &buf, void *obj) {
      ((::HMdcTrackGFieldPar*)obj)->::HMdcTrackGFieldPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackGFieldPar

//______________________________________________________________________________
void HMdcTrackGContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackGContFact.

   HContFact::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcTrackGContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackGContFact.
      TClass *R__cl = ::HMdcTrackGContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      HContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrackGContFact(void *p) {
      return  p ? new(p) ::HMdcTrackGContFact : new ::HMdcTrackGContFact;
   }
   static void *newArray_HMdcTrackGContFact(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrackGContFact[nElements] : new ::HMdcTrackGContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrackGContFact(void *p) {
      delete ((::HMdcTrackGContFact*)p);
   }
   static void deleteArray_HMdcTrackGContFact(void *p) {
      delete [] ((::HMdcTrackGContFact*)p);
   }
   static void destruct_HMdcTrackGContFact(void *p) {
      typedef ::HMdcTrackGContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackGContFact(TBuffer &buf, void *obj) {
      ((::HMdcTrackGContFact*)obj)->::HMdcTrackGContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackGContFact

//______________________________________________________________________________
void HMdcTrackGSpline::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackGSpline.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcTrackGSpline::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackGSpline.
      TClass *R__cl = ::HMdcTrackGSpline::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pi", &pi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "XX", &XX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "YY", &YY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZZ", &ZZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "XXdir", &XXdir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "YYdir", &YYdir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZZdir", &ZZdir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distfield", &distfield);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errorY", &errorY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "polarity", &polarity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "target", &target);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "A1", &A1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "B1", &B1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "D1", &D1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "A2", &A2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "B2", &B2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "D2", &D2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "A3", &A3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "B3", &B3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "D3", &D3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "A4", &A4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "B4", &B4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "D4", &D4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "N", &N);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "N1", &N1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "N2", &N2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*equationXY", &equationXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Bx", &Bx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*By", &By);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Bz", &Bz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "teta", &teta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*XZ", &XZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*YZ", &YZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*XZP", &XZP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*YZP", &YZP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*FXZ", &FXZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*FYZ", &FYZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*FXZP", &FXZP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*FYZP", &FYZP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dydz", &dydz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dxdz", &dxdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*d2ydz", &d2ydz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*d2xdz", &d2xdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*curv", &curv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*x2", &x2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zz2", &zz2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*z2", &z2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*y2", &y2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "precon", &precon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "preconErr", &preconErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "precon111", &precon111);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dist", &dist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metaDistance", &metaDistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tetadig", &tetadig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phidig", &phidig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phidigg", &phidigg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "teta2dig", &teta2dig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi2dig", &phi2dig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b", &b);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*kickplane", &kickplane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*c", &c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*corrScan[3]", &corrScan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*point", &point);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fieldpoints", &fieldpoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*secDer", &secDer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Tfieldpoints", &Tfieldpoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*BB", &BB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*field", &field);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScal", &fScal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isInitialized", &isInitialized);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isKickIsInitialized", &isKickIsInitialized);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qSpline", &qSpline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "middleA", &middleA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "middleB", &middleB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "middleD", &middleD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "middleA4", &middleA4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "middleB4", &middleB4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "middleD4", &middleD4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SegmentPoints", &SegmentPoints);
      R__insp.InspectMember(SegmentPoints, "SegmentPoints.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zGlobal", &zGlobal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSecDerY", &isSecDerY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geomParams[6][4]", geomParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "middleGA[6][4]", middleGA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "middleGB[6][4]", middleGB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "middleGD[6][4]", middleGD);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrackGSpline(void *p) {
      return  p ? new(p) ::HMdcTrackGSpline : new ::HMdcTrackGSpline;
   }
   static void *newArray_HMdcTrackGSpline(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrackGSpline[nElements] : new ::HMdcTrackGSpline[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrackGSpline(void *p) {
      delete ((::HMdcTrackGSpline*)p);
   }
   static void deleteArray_HMdcTrackGSpline(void *p) {
      delete [] ((::HMdcTrackGSpline*)p);
   }
   static void destruct_HMdcTrackGSpline(void *p) {
      typedef ::HMdcTrackGSpline current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackGSpline(TBuffer &buf, void *obj) {
      ((::HMdcTrackGSpline*)obj)->::HMdcTrackGSpline::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackGSpline

//______________________________________________________________________________
void HBaseTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HBaseTrack.
      TClass *R__cl = ::HBaseTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r", &r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofHitInd", &tofHitInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofClustInd", &tofClustInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "showerHitInd", &showerHitInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcClustInd", &rpcClustInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p", &p);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta", &beta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass2", &mass2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof", &tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "polarity", &polarity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cov", &cov);
      R__insp.InspectMember(cov, "cov.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metaEloss", &metaEloss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tarDist", &tarDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofdist", &tofdist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qIOMatch", &qIOMatch);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HBaseTrack(void *p) {
      return  p ? new(p) ::HBaseTrack : new ::HBaseTrack;
   }
   static void *newArray_HBaseTrack(Long_t nElements, void *p) {
      return p ? new(p) ::HBaseTrack[nElements] : new ::HBaseTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_HBaseTrack(void *p) {
      delete ((::HBaseTrack*)p);
   }
   static void deleteArray_HBaseTrack(void *p) {
      delete [] ((::HBaseTrack*)p);
   }
   static void destruct_HBaseTrack(void *p) {
      typedef ::HBaseTrack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HBaseTrack(TBuffer &buf, void *obj) {
      ((::HBaseTrack*)obj)->::HBaseTrack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HBaseTrack

//______________________________________________________________________________
void HMetaMatch2::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMetaMatch2.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> trkCandInd;
      R__b >> ownIndex;
      R__b >> sector;
      R__b >> nRpcClust;
      R__b >> nShrHits;
      R__b >> nTofHits;
      R__b >> rungeKuttaInd;
      R__b.ReadStaticArray((short*)rkIndShower);
      R__b.ReadStaticArray((short*)rkIndTofCl);
      R__b.ReadStaticArray((short*)rkIndTof1);
      R__b.ReadStaticArray((short*)rkIndTof2);
      R__b.ReadStaticArray((short*)rkIndRpc);
      R__b >> kalmanFilterInd;
      R__b.ReadStaticArray((short*)kfIndShower);
      R__b.ReadStaticArray((short*)kfIndTofCl);
      R__b.ReadStaticArray((short*)kfIndTof1);
      R__b.ReadStaticArray((short*)kfIndTof2);
      R__b.ReadStaticArray((short*)kfIndRpc);
      R__b.ReadStaticArray((short*)rpcClstInd);
      R__b.ReadStaticArray((short*)shrHitInd);
      R__b.ReadStaticArray((short*)tofClstInd);
      R__b.ReadStaticArray((short*)tofHit1Ind);
      R__b.ReadStaticArray((short*)tofHit2Ind);
      R__b.ReadStaticArray((float*)rpcQuality);
      R__b.ReadStaticArray((float*)rpcDX);
      R__b.ReadStaticArray((float*)rpcDY);
      R__b.ReadStaticArray((float*)shrQuality);
      R__b.ReadStaticArray((float*)shrDX);
      R__b.ReadStaticArray((float*)shrDY);
      R__b.ReadStaticArray((float*)tofClstQuality);
      R__b.ReadStaticArray((float*)tofClstDX);
      R__b.ReadStaticArray((float*)tofClstDY);
      R__b.ReadStaticArray((float*)tofHit1Quality);
      R__b.ReadStaticArray((float*)tofHit1DX);
      R__b.ReadStaticArray((float*)tofHit1DY);
      R__b.ReadStaticArray((float*)tofHit2Quality);
      R__b.ReadStaticArray((float*)tofHit2DX);
      R__b.ReadStaticArray((float*)tofHit2DY);
      R__b >> splineInd;
      R__b >> nRichId;
      R__b >> nRichIPUId;
      R__b.ReadStaticArray((int*)richInd);
      R__b.ReadStaticArray((int*)richIPUInd);
      R__b >> flag;
      R__b >> isFakeInner;
      R__b >> isFakeOuter;
      R__b.CheckByteCount(R__s, R__c, HMetaMatch2::IsA());
   } else {
      R__c = R__b.WriteVersion(HMetaMatch2::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << trkCandInd;
      R__b << ownIndex;
      R__b << sector;
      R__b << nRpcClust;
      R__b << nShrHits;
      R__b << nTofHits;
      R__b << rungeKuttaInd;
      R__b.WriteArray(rkIndShower, 3);
      R__b.WriteArray(rkIndTofCl, 3);
      R__b.WriteArray(rkIndTof1, 3);
      R__b.WriteArray(rkIndTof2, 3);
      R__b.WriteArray(rkIndRpc, 3);
      R__b << kalmanFilterInd;
      R__b.WriteArray(kfIndShower, 3);
      R__b.WriteArray(kfIndTofCl, 3);
      R__b.WriteArray(kfIndTof1, 3);
      R__b.WriteArray(kfIndTof2, 3);
      R__b.WriteArray(kfIndRpc, 3);
      R__b.WriteArray(rpcClstInd, 3);
      R__b.WriteArray(shrHitInd, 3);
      R__b.WriteArray(tofClstInd, 3);
      R__b.WriteArray(tofHit1Ind, 3);
      R__b.WriteArray(tofHit2Ind, 3);
      R__b.WriteArray(rpcQuality, 3);
      R__b.WriteArray(rpcDX, 3);
      R__b.WriteArray(rpcDY, 3);
      R__b.WriteArray(shrQuality, 3);
      R__b.WriteArray(shrDX, 3);
      R__b.WriteArray(shrDY, 3);
      R__b.WriteArray(tofClstQuality, 3);
      R__b.WriteArray(tofClstDX, 3);
      R__b.WriteArray(tofClstDY, 3);
      R__b.WriteArray(tofHit1Quality, 3);
      R__b.WriteArray(tofHit1DX, 3);
      R__b.WriteArray(tofHit1DY, 3);
      R__b.WriteArray(tofHit2Quality, 3);
      R__b.WriteArray(tofHit2DX, 3);
      R__b.WriteArray(tofHit2DY, 3);
      R__b << splineInd;
      R__b << nRichId;
      R__b << nRichIPUId;
      R__b.WriteArray(richInd, 3);
      R__b.WriteArray(richIPUInd, 3);
      R__b << flag;
      R__b << isFakeInner;
      R__b << isFakeOuter;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMetaMatch2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMetaMatch2.
      TClass *R__cl = ::HMetaMatch2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkCandInd", &trkCandInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ownIndex", &ownIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRpcClust", &nRpcClust);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nShrHits", &nShrHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTofHits", &nTofHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rungeKuttaInd", &rungeKuttaInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rkIndShower[3]", rkIndShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rkIndTofCl[3]", rkIndTofCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rkIndTof1[3]", rkIndTof1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rkIndTof2[3]", rkIndTof2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rkIndRpc[3]", rkIndRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kalmanFilterInd", &kalmanFilterInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kfIndShower[3]", kfIndShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kfIndTofCl[3]", kfIndTofCl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kfIndTof1[3]", kfIndTof1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kfIndTof2[3]", kfIndTof2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kfIndRpc[3]", kfIndRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcClstInd[3]", rpcClstInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shrHitInd[3]", shrHitInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofClstInd[3]", tofClstInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofHit1Ind[3]", tofHit1Ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofHit2Ind[3]", tofHit2Ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcQuality[3]", rpcQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcDX[3]", rpcDX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcDY[3]", rpcDY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shrQuality[3]", shrQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shrDX[3]", shrDX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shrDY[3]", shrDY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofClstQuality[3]", tofClstQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofClstDX[3]", tofClstDX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofClstDY[3]", tofClstDY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofHit1Quality[3]", tofHit1Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofHit1DX[3]", tofHit1DX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofHit1DY[3]", tofHit1DY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofHit2Quality[3]", tofHit2Quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofHit2DX[3]", tofHit2DX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofHit2DY[3]", tofHit2DY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "splineInd", &splineInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRichId", &nRichId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRichIPUId", &nRichIPUId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richInd[3]", richInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richIPUInd[3]", richIPUInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag", &flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFakeInner", &isFakeInner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isFakeOuter", &isFakeOuter);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMetaMatch2(void *p) {
      return  p ? new(p) ::HMetaMatch2 : new ::HMetaMatch2;
   }
   static void *newArray_HMetaMatch2(Long_t nElements, void *p) {
      return p ? new(p) ::HMetaMatch2[nElements] : new ::HMetaMatch2[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMetaMatch2(void *p) {
      delete ((::HMetaMatch2*)p);
   }
   static void deleteArray_HMetaMatch2(void *p) {
      delete [] ((::HMetaMatch2*)p);
   }
   static void destruct_HMetaMatch2(void *p) {
      typedef ::HMetaMatch2 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMetaMatch2(TBuffer &buf, void *obj) {
      ((::HMetaMatch2*)obj)->::HMetaMatch2::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMetaMatch2

//______________________________________________________________________________
void HMetaMatchF2::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMetaMatchF2.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMetaMatchF2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMetaMatchF2.
      TClass *R__cl = ::HMetaMatchF2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSizesCells", &pSizesCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMatchPar", &fMatchPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "invSigma2TofX[6]", invSigma2TofX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "invSigma2TofY[6]", invSigma2TofY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sTofX[6]", sTofX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sTofY[6]", sTofY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality2TOFCut[6]", quality2TOFCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2MdcInRpcX[6]", sigma2MdcInRpcX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2MdcInRpcY[6]", sigma2MdcInRpcY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2MdcInShrX[6]", sigma2MdcInShrX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2MdcInShrY[6]", sigma2MdcInShrY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sShowerX[6]", sShowerX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sShowerY[6]", sShowerY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sRpcX[6]", sRpcX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sRpcY[6]", sRpcY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality2RPCCut[6]", quality2RPCCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality2SHOWERCut[6]", quality2SHOWERCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dThRich[6]", dThRich);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhRich[6]", dPhRich);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhRichOff[6]", dPhRichOff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qualityRichCut[6]", qualityRichCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richThetaMinCut[6]", richThetaMinCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richThetaMaxCut[6]", richThetaMaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*labTrans[6]", &labTrans);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGetCont", &fGetCont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*meta", &meta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatTrkCand", &fCatTrkCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatMetaMatch", &fCatMetaMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatMdcSeg", &fCatMdcSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatTof", &fCatTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatTofCluster", &fCatTofCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatShower", &fCatShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRich", &fCatRich);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRpcCluster", &fCatRpcCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kickplane", &kickplane);
      R__insp.InspectMember(kickplane, "kickplane.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSpline", &pSpline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrkCandIter", &fTrkCandIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterTof", &iterTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterTofCluster", &iterTofCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterShower", &iterShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterRich", &iterRich);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterRpcCluster", &iterRpcCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sectorLoc", &sectorLoc);
      R__insp.InspectMember(sectorLoc, "sectorLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTofGeometry", &fTofGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fShrGeometry", &fShrGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRpcGeometry", &fRpcGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRpcClusters[6]", nRpcClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRpcClusters[6][200]", &fRpcClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nShowerHits[6]", nShowerHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fShowerHits[6][200]", &fShowerHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indexShrHit[6][200]", indexShrHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTofHits[6]", nTofHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofHits[6][100]", tofHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofModule[6][100]", tofModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indexTofHit[6][100]", indexTofHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofClustSize[6][100]", tofClustSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*segments[2]", &segments);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcTrackPar[4]", mdcTrackPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTofMatched", &nTofMatched);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qual2TofBestAr[5]", qual2TofBestAr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qual2TofAr[5][9]", qual2TofAr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofInd[5][3]", tofInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nShrMatched", &nShrMatched);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qual2ShrAr[5][3]", qual2ShrAr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shrInd[5]", shrInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRpcMatched", &nRpcMatched);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qual2RpcAr[5][3]", qual2RpcAr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcInd[5]", rpcInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRichId", &nRichId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richInd[3]", richInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qualRich[3]", qualRich);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nShowerHitsSec", &nShowerHitsSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fShowerHitsSec", &fShowerHitsSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*indexShrHitSec", &indexShrHitSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRpcClustersSec", &nRpcClustersSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRpcClustersSec", &fRpcClustersSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*indexRpcClustersSec", &indexRpcClustersSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p1SegInMod", &p1SegInMod);
      R__insp.InspectMember(p1SegInMod, "p1SegInMod.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p2SegInMod", &p2SegInMod);
      R__insp.InspectMember(p2SegInMod, "p2SegInMod.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "invDZ", &invDZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTofHitsSec", &nTofHitsSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tofHitsSec", &tofHitsSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*indexTofHitSec", &indexTofHitSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tofClustSizeSec", &tofClustSizeSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tofModuleSec", &tofModuleSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*secLabTrans", &secLabTrans);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isPrint", &isPrint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dX", &dX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dY", &dY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qual2TofC[9]", qual2TofC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indTofC[3]", indTofC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stNotMatTracks", &stNotMatTracks);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMetaMatchF2(void *p) {
      return  p ? new(p) ::HMetaMatchF2 : new ::HMetaMatchF2;
   }
   static void *newArray_HMetaMatchF2(Long_t nElements, void *p) {
      return p ? new(p) ::HMetaMatchF2[nElements] : new ::HMetaMatchF2[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMetaMatchF2(void *p) {
      delete ((::HMetaMatchF2*)p);
   }
   static void deleteArray_HMetaMatchF2(void *p) {
      delete [] ((::HMetaMatchF2*)p);
   }
   static void destruct_HMetaMatchF2(void *p) {
      typedef ::HMetaMatchF2 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMetaMatchF2(TBuffer &buf, void *obj) {
      ((::HMetaMatchF2*)obj)->::HMetaMatchF2::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMetaMatchF2

//______________________________________________________________________________
void HMetaMatchPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMetaMatchPar.
      TClass *R__cl = ::HMetaMatchPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richThetaMinCut", &richThetaMinCut);
      R__insp.InspectMember(richThetaMinCut, "richThetaMinCut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richThetaMaxCut", &richThetaMaxCut);
      R__insp.InspectMember(richThetaMaxCut, "richThetaMaxCut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richSigmaPhi", &richSigmaPhi);
      R__insp.InspectMember(richSigmaPhi, "richSigmaPhi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richSigmaPhiOffset", &richSigmaPhiOffset);
      R__insp.InspectMember(richSigmaPhiOffset, "richSigmaPhiOffset.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richQualityCut", &richQualityCut);
      R__insp.InspectMember(richQualityCut, "richQualityCut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richIPUThetaMinCut", &richIPUThetaMinCut);
      R__insp.InspectMember(richIPUThetaMinCut, "richIPUThetaMinCut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richIPUThetaMaxCut", &richIPUThetaMaxCut);
      R__insp.InspectMember(richIPUThetaMaxCut, "richIPUThetaMaxCut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richIPUSigmaPhi", &richIPUSigmaPhi);
      R__insp.InspectMember(richIPUSigmaPhi, "richIPUSigmaPhi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richIPUSigmaPhiOffset", &richIPUSigmaPhiOffset);
      R__insp.InspectMember(richIPUSigmaPhiOffset, "richIPUSigmaPhiOffset.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richIPUQualityCut", &richIPUQualityCut);
      R__insp.InspectMember(richIPUQualityCut, "richIPUQualityCut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "showerSigmaXMdc", &showerSigmaXMdc);
      R__insp.InspectMember(showerSigmaXMdc, "showerSigmaXMdc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "showerSigmaYMdc", &showerSigmaYMdc);
      R__insp.InspectMember(showerSigmaYMdc, "showerSigmaYMdc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "showerSigmaXOffset", &showerSigmaXOffset);
      R__insp.InspectMember(showerSigmaXOffset, "showerSigmaXOffset.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "showerSigmaYOffset", &showerSigmaYOffset);
      R__insp.InspectMember(showerSigmaYOffset, "showerSigmaYOffset.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "showerQualityCut", &showerQualityCut);
      R__insp.InspectMember(showerQualityCut, "showerQualityCut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofSigmaX", &tofSigmaX);
      R__insp.InspectMember(tofSigmaX, "tofSigmaX.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofSigmaY", &tofSigmaY);
      R__insp.InspectMember(tofSigmaY, "tofSigmaY.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofSigmaXOffset", &tofSigmaXOffset);
      R__insp.InspectMember(tofSigmaXOffset, "tofSigmaXOffset.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofSigmaYOffset", &tofSigmaYOffset);
      R__insp.InspectMember(tofSigmaYOffset, "tofSigmaYOffset.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofQualityCut", &tofQualityCut);
      R__insp.InspectMember(tofQualityCut, "tofQualityCut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcSigmaXMdc", &rpcSigmaXMdc);
      R__insp.InspectMember(rpcSigmaXMdc, "rpcSigmaXMdc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcSigmaYMdc", &rpcSigmaYMdc);
      R__insp.InspectMember(rpcSigmaYMdc, "rpcSigmaYMdc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcSigmaXOffset", &rpcSigmaXOffset);
      R__insp.InspectMember(rpcSigmaXOffset, "rpcSigmaXOffset.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcSigmaYOffset", &rpcSigmaYOffset);
      R__insp.InspectMember(rpcSigmaYOffset, "rpcSigmaYOffset.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcQualityCut", &rpcQualityCut);
      R__insp.InspectMember(rpcQualityCut, "rpcQualityCut.");
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMetaMatchPar(void *p) {
      return  p ? new(p) ::HMetaMatchPar : new ::HMetaMatchPar;
   }
   static void *newArray_HMetaMatchPar(Long_t nElements, void *p) {
      return p ? new(p) ::HMetaMatchPar[nElements] : new ::HMetaMatchPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMetaMatchPar(void *p) {
      delete ((::HMetaMatchPar*)p);
   }
   static void deleteArray_HMetaMatchPar(void *p) {
      delete [] ((::HMetaMatchPar*)p);
   }
   static void destruct_HMetaMatchPar(void *p) {
      typedef ::HMetaMatchPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMetaMatchPar(TBuffer &buf, void *obj) {
      ((::HMetaMatchPar*)obj)->::HMetaMatchPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMetaMatchPar

//______________________________________________________________________________
void HSplineTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSplineTrack.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HBaseTrack::Streamer(R__b);
      R__b >> qSpline;
      R__b >> numOfChambers;
      R__b.CheckByteCount(R__s, R__c, HSplineTrack::IsA());
   } else {
      R__c = R__b.WriteVersion(HSplineTrack::IsA(), kTRUE);
      HBaseTrack::Streamer(R__b);
      R__b << qSpline;
      R__b << numOfChambers;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HSplineTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSplineTrack.
      TClass *R__cl = ::HSplineTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qSpline", &qSpline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numOfChambers", &numOfChambers);
      HBaseTrack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSplineTrack(void *p) {
      return  p ? new(p) ::HSplineTrack : new ::HSplineTrack;
   }
   static void *newArray_HSplineTrack(Long_t nElements, void *p) {
      return p ? new(p) ::HSplineTrack[nElements] : new ::HSplineTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSplineTrack(void *p) {
      delete ((::HSplineTrack*)p);
   }
   static void deleteArray_HSplineTrack(void *p) {
      delete [] ((::HSplineTrack*)p);
   }
   static void destruct_HSplineTrack(void *p) {
      typedef ::HSplineTrack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSplineTrack(TBuffer &buf, void *obj) {
      ((::HSplineTrack*)obj)->::HSplineTrack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSplineTrack

//______________________________________________________________________________
void HSplineTrackF2::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSplineTrackF2.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HSplineTrackF2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSplineTrackF2.
      TClass *R__cl = ::HSplineTrackF2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pointMeta", &pointMeta);
      R__insp.InspectMember(pointMeta, "pointMeta.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tRans[6]", &tRans);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSizesCells", &pSizesCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qIOMatching", &qIOMatching);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*evHeader", &evHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tarDist", &tarDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "target", &target);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distanceTof", &distanceTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xTof", &xTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yTof", &yTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zTof", &zTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "C", &C);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "system", &system);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outerHitInd", &outerHitInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indTrkCand", &indTrkCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index1", &index1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index2", &index2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof", &tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass2", &mass2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta", &beta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TOFdistance", &TOFdistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGetCont", &fGetCont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*segments[2]", &segments);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRpc", &pRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "polarity", &polarity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dist", &dist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IndTrkCand", &IndTrkCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofClSize", &tofClSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metaInd", &metaInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sp", &sp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatMdcTrkCand", &fCatMdcTrkCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatSplineTrack", &fCatSplineTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatSplinePar", &fCatSplinePar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatMdcSegSim", &fCatMdcSegSim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatTof", &fCatTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatTofCluster", &fCatTofCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMetaMatch", &pMetaMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcTrkCand", &pMdcTrkCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRpcCluster", &fCatRpcCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatShowerHit", &fCatShowerHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatMetaMatch", &fCatMetaMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMdcGeometry", &fMdcGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSpecGeomPar", &fSpecGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTofHit[3]", &pTofHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pShowerHit", &pShowerHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Spline", &Spline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMetaMatchIter", &fMetaMatchIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*IterTof", &IterTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*IterShower", &IterShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*field", &field);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*corr", &corr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMagnet", &pMagnet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Momentum", &Momentum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errP", &errP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errMass2", &errMass2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sectorloc", &sectorloc);
      R__insp.InspectMember(sectorloc, "sectorloc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstCandIndex", &firstCandIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScal", &fScal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qSpline", &qSpline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numChambers", &numChambers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSplinePar", &isSplinePar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xPoints[52]", xPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yPoints[52]", yPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zPoints[52]", zPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indRpc", &indRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indTof[3]", indTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indShower", &indShower);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSplineTrackF2(void *p) {
      return  p ? new(p) ::HSplineTrackF2 : new ::HSplineTrackF2;
   }
   static void *newArray_HSplineTrackF2(Long_t nElements, void *p) {
      return p ? new(p) ::HSplineTrackF2[nElements] : new ::HSplineTrackF2[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSplineTrackF2(void *p) {
      delete ((::HSplineTrackF2*)p);
   }
   static void deleteArray_HSplineTrackF2(void *p) {
      delete [] ((::HSplineTrackF2*)p);
   }
   static void destruct_HSplineTrackF2(void *p) {
      typedef ::HSplineTrackF2 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSplineTrackF2(TBuffer &buf, void *obj) {
      ((::HSplineTrackF2*)obj)->::HSplineTrackF2::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSplineTrackF2

//______________________________________________________________________________
void HSplineTaskSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSplineTaskSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTaskSet::Streamer(R__b);
      R__b >> isSplinePar;
      R__b.CheckByteCount(R__s, R__c, HSplineTaskSet::IsA());
   } else {
      R__c = R__b.WriteVersion(HSplineTaskSet::IsA(), kTRUE);
      HTaskSet::Streamer(R__b);
      R__b << isSplinePar;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HSplineTaskSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSplineTaskSet.
      TClass *R__cl = ::HSplineTaskSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSplinePar", &isSplinePar);
      HTaskSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSplineTaskSet(void *p) {
      return  p ? new(p) ::HSplineTaskSet : new ::HSplineTaskSet;
   }
   static void *newArray_HSplineTaskSet(Long_t nElements, void *p) {
      return p ? new(p) ::HSplineTaskSet[nElements] : new ::HSplineTaskSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSplineTaskSet(void *p) {
      delete ((::HSplineTaskSet*)p);
   }
   static void deleteArray_HSplineTaskSet(void *p) {
      delete [] ((::HSplineTaskSet*)p);
   }
   static void destruct_HSplineTaskSet(void *p) {
      typedef ::HSplineTaskSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSplineTaskSet(TBuffer &buf, void *obj) {
      ((::HSplineTaskSet*)obj)->::HSplineTaskSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSplineTaskSet

//______________________________________________________________________________
void HSplineTofClF2::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSplineTofClF2.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HSplineTofClF2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSplineTofClF2.
      TClass *R__cl = ::HSplineTofClF2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind1", &ind1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind2", &ind2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind3", &ind3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind4", &ind4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mode", &mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "step", &step);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "step1", &step1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMetaMatch1", &pMetaMatch1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMetaMatch2", &pMetaMatch2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterMetaMatch1", &iterMetaMatch1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterMetaMatch2", &iterMetaMatch2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatMetaMatch", &fCatMetaMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatTrkCand", &fCatTrkCand);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSplineTofClF2(void *p) {
      return  p ? new(p) ::HSplineTofClF2 : new ::HSplineTofClF2;
   }
   static void *newArray_HSplineTofClF2(Long_t nElements, void *p) {
      return p ? new(p) ::HSplineTofClF2[nElements] : new ::HSplineTofClF2[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSplineTofClF2(void *p) {
      delete ((::HSplineTofClF2*)p);
   }
   static void deleteArray_HSplineTofClF2(void *p) {
      delete [] ((::HSplineTofClF2*)p);
   }
   static void destruct_HSplineTofClF2(void *p) {
      typedef ::HSplineTofClF2 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSplineTofClF2(TBuffer &buf, void *obj) {
      ((::HSplineTofClF2*)obj)->::HSplineTofClF2::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSplineTofClF2

//______________________________________________________________________________
void HRungeKutta::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRungeKutta.

   ::Error("HRungeKutta::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void HRungeKutta::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRungeKutta.
      TClass *R__cl = ::HRungeKutta::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fieldMap", &fieldMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fieldScalFact", &fieldScalFact);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcInstalled[4][6]", mdcInstalled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcPos[4][6][3]", mdcPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normVecMdc[4][6][3]", normVecMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pointForVertexRec[6][3]", pointForVertexRec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzfacMdc[2][6]", dzfacMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p0Guess", &p0Guess);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "initialStepSize", &initialStepSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepSizeInc", &stepSizeInc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepSizeDec", &stepSizeDec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxStepSize", &maxStepSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minStepSize", &minStepSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minPrecision", &minPrecision);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxPrecision", &maxPrecision);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxNumSteps", &maxNumSteps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxDist", &maxDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfit", &pfit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackLength", &trackLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dpar[5]", dpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "resolution[8]", resolution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sig[8]", sig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hit[4][3]", hit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fit[4][3]", fit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitdp[4][3]", fitdp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitdh[4][3]", fitdh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitdv[4][3]", fitdv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fit1h[4][3]", fit1h);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fit1v[4][3]", fit1v);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcModules[4]", mdcModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcLookup[4]", mdcLookup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dydpar[5][8]", dydpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ydata[8]", ydata);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitpar[5]", fitpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndf", &ndf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMaxMod", &nMaxMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dirAtFirstMDC[3]", dirAtFirstMDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "posNearLastMDC[3]", posNearLastMDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dirAtLastMDC[3]", dirAtLastMDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepSizeAtLastMDC", &stepSizeAtLastMDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackLengthAtLastMDC", &trackLengthAtLastMDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackPosOnMETA[3]", trackPosOnMETA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jstep", &jstep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zSeg1", &zSeg1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rSeg1", &rSeg1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaSeg1", &thetaSeg1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiSeg1", &phiSeg1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zSeg2", &zSeg2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rSeg2", &rSeg2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaSeg2", &thetaSeg2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiSeg2", &phiSeg2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "polbending", &polbending);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTol", &mTol);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRungeKutta(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HRungeKutta : new ::HRungeKutta;
   }
   static void *newArray_HRungeKutta(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HRungeKutta[nElements] : new ::HRungeKutta[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRungeKutta(void *p) {
      delete ((::HRungeKutta*)p);
   }
   static void deleteArray_HRungeKutta(void *p) {
      delete [] ((::HRungeKutta*)p);
   }
   static void destruct_HRungeKutta(void *p) {
      typedef ::HRungeKutta current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRungeKutta(TBuffer &buf, void *obj) {
      ((::HRungeKutta*)obj)->::HRungeKutta::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRungeKutta

//______________________________________________________________________________
void HRKTrackB::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRKTrackB.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HBaseTrack::Streamer(R__b);
      R__b >> chiq;
      R__b >> zSeg1RK;
      R__b >> rSeg1RK;
      R__b >> thetaSeg1RK;
      R__b >> phiSeg1RK;
      R__b >> zSeg2RK;
      R__b >> rSeg2RK;
      R__b >> thetaSeg2RK;
      R__b >> phiSeg2RK;
      R__b >> dxRkMeta;
      R__b >> dyRkMeta;
      R__b >> dzRkMeta;
      R__b >> qualityRpc;
      R__b >> qualityShower;
      R__b >> qualityTof;
      R__b.CheckByteCount(R__s, R__c, HRKTrackB::IsA());
   } else {
      R__c = R__b.WriteVersion(HRKTrackB::IsA(), kTRUE);
      HBaseTrack::Streamer(R__b);
      R__b << chiq;
      R__b << zSeg1RK;
      R__b << rSeg1RK;
      R__b << thetaSeg1RK;
      R__b << phiSeg1RK;
      R__b << zSeg2RK;
      R__b << rSeg2RK;
      R__b << thetaSeg2RK;
      R__b << phiSeg2RK;
      R__b << dxRkMeta;
      R__b << dyRkMeta;
      R__b << dzRkMeta;
      R__b << qualityRpc;
      R__b << qualityShower;
      R__b << qualityTof;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRKTrackB::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRKTrackB.
      TClass *R__cl = ::HRKTrackB::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chiq", &chiq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zSeg1RK", &zSeg1RK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rSeg1RK", &rSeg1RK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaSeg1RK", &thetaSeg1RK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiSeg1RK", &phiSeg1RK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zSeg2RK", &zSeg2RK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rSeg2RK", &rSeg2RK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaSeg2RK", &thetaSeg2RK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiSeg2RK", &phiSeg2RK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxRkMeta", &dxRkMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dyRkMeta", &dyRkMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzRkMeta", &dzRkMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qualityRpc", &qualityRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qualityShower", &qualityShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qualityTof", &qualityTof);
      HBaseTrack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRKTrackB(void *p) {
      return  p ? new(p) ::HRKTrackB : new ::HRKTrackB;
   }
   static void *newArray_HRKTrackB(Long_t nElements, void *p) {
      return p ? new(p) ::HRKTrackB[nElements] : new ::HRKTrackB[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRKTrackB(void *p) {
      delete ((::HRKTrackB*)p);
   }
   static void deleteArray_HRKTrackB(void *p) {
      delete [] ((::HRKTrackB*)p);
   }
   static void destruct_HRKTrackB(void *p) {
      typedef ::HRKTrackB current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRKTrackB(TBuffer &buf, void *obj) {
      ((::HRKTrackB*)obj)->::HRKTrackB::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRKTrackB

//______________________________________________________________________________
void HRKTrackBF2::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRKTrackBF2.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HRKTrackBF2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRKTrackBF2.
      TClass *R__cl = ::HRKTrackBF2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fieldFactor", &fieldFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mode", &mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "secTrans[6]", secTrans);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "showerSM[6]", showerSM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofSM[6][8]", tofSM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcSM[6]", rpcSM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "transMetaSM", &transMetaSM);
      R__insp.InspectMember(transMetaSM, "transMetaSM.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2TofX[6]", sigma2TofX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2TofY[6]", sigma2TofY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sTofX[6]", sTofX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sTofY[6]", sTofY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality2TOFCut[6]", quality2TOFCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2MdcInRpcX[6]", sigma2MdcInRpcX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2MdcInRpcY[6]", sigma2MdcInRpcY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2MdcInShrX[6]", sigma2MdcInShrX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2MdcInShrY[6]", sigma2MdcInShrY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sShowerX[6]", sShowerX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sShowerY[6]", sShowerY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sRpcX[6]", sRpcX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sRpcY[6]", sRpcY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality2RPCCut[6]", quality2RPCCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality2SHOWERCut[6]", quality2SHOWERCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*field", &field);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMagnet", &pMagnet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSpecGeomPar", &fSpecGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGetCont", &fGetCont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTofGeometry", &fTofGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRpcGeometry", &fRpcGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fShowerGeometry", &fShowerGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMSizesCells", &pMSizesCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatMetaMatch", &fCatMetaMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMetaMatchIter", &fMetaMatchIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMetaMatch", &pMetaMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMatchPar", &fMatchPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatMdcTrkCand", &fCatMdcTrkCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcTrkCand", &pMdcTrkCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatMdcSeg", &fCatMdcSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatMdcHit", &fCatMdcHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSplineTrack", &fSplineTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSplineTrack", &pSplineTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatKine", &fCatKine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatShower", &fCatShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatTof", &fCatTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTofHit[3]", &pTofHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatTofCluster", &fCatTofCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRpcCluster", &fCatRpcCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTofCluster", &pTofCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRKTrack", &fCatRKTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRungeKutta", &pRungeKutta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sectorloc", &sectorloc);
      R__insp.InspectMember(sectorloc, "sectorloc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "system", &system);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcSeg1", &pMdcSeg1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcSeg2", &pMdcSeg2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcInstalled[4][6]", mdcInstalled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "multSig[8]", multSig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertex[3]", vertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normVecRpc[6]", normVecRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centerRpc[6]", centerRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normVecShower[6]", normVecShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normVecTof[6][8]", normVecTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metaNormVec", &metaNormVec);
      R__insp.InspectMember(metaNormVec, "metaNormVec.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pointMeta", &pointMeta);
      R__insp.InspectMember(pointMeta, "pointMeta.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "success", &success);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qRK", &qRK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pRK", &pRK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momentumGuess", &momentumGuess);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chiqRK", &chiqRK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackLength", &trackLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof", &tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metaeloss", &metaeloss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta", &beta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass2", &mass2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RKxyzMETA[3]", RKxyzMETA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xTof", &xTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yTof", &yTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zTof", &zTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zMod", &zMod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dXrms2", &dXrms2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dYrms2", &dYrms2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dX", &dX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dY", &dY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qualityRpc", &qualityRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qualityShower", &qualityShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qualityTof", &qualityTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pShowerHit", &pShowerHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRpc", &pRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indRpc", &indRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indTof[3]", indTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indShower", &indShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indexRK", &indexRK);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRKTrackBF2(void *p) {
      return  p ? new(p) ::HRKTrackBF2 : new ::HRKTrackBF2;
   }
   static void *newArray_HRKTrackBF2(Long_t nElements, void *p) {
      return p ? new(p) ::HRKTrackBF2[nElements] : new ::HRKTrackBF2[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRKTrackBF2(void *p) {
      delete ((::HRKTrackBF2*)p);
   }
   static void deleteArray_HRKTrackBF2(void *p) {
      delete [] ((::HRKTrackBF2*)p);
   }
   static void destruct_HRKTrackBF2(void *p) {
      typedef ::HRKTrackBF2 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRKTrackBF2(TBuffer &buf, void *obj) {
      ((::HRKTrackBF2*)obj)->::HRKTrackBF2::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRKTrackBF2

//______________________________________________________________________________
void HEnergyLossCorrPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEnergyLossCorrPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> nThetaReg;
      R__b >> thetaStep;
      R__b >> thetaMiddle0;
      R__b >> momInt1;
      R__b >> momInt2;
      R__b >> nParams;
      R__b.ReadStaticArray((double*)parMomCorrH);
      R__b >> typePar;
      R__b >> nParamsElect;
      R__b.ReadStaticArray((double*)parMomCorrElect);
      R__b.CheckByteCount(R__s, R__c, HEnergyLossCorrPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HEnergyLossCorrPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << nThetaReg;
      R__b << thetaStep;
      R__b << thetaMiddle0;
      R__b << momInt1;
      R__b << momInt2;
      R__b << nParams;
      R__b.WriteArray(parMomCorrH, 264);
      R__b << typePar;
      R__b << nParamsElect;
      R__b.WriteArray(parMomCorrElect, 7);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEnergyLossCorrPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEnergyLossCorrPar.
      TClass *R__cl = ::HEnergyLossCorrPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nThetaReg", &nThetaReg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaStep", &thetaStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaMiddle0", &thetaMiddle0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momInt1", &momInt1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momInt2", &momInt2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nParams", &nParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parMomCorrH[264]", parMomCorrH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "typePar", &typePar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nParamsElect", &nParamsElect);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parMomCorrElect[7]", parMomCorrElect);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEnergyLossCorrPar(void *p) {
      return  p ? new(p) ::HEnergyLossCorrPar : new ::HEnergyLossCorrPar;
   }
   static void *newArray_HEnergyLossCorrPar(Long_t nElements, void *p) {
      return p ? new(p) ::HEnergyLossCorrPar[nElements] : new ::HEnergyLossCorrPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEnergyLossCorrPar(void *p) {
      delete ((::HEnergyLossCorrPar*)p);
   }
   static void deleteArray_HEnergyLossCorrPar(void *p) {
      delete [] ((::HEnergyLossCorrPar*)p);
   }
   static void destruct_HEnergyLossCorrPar(void *p) {
      typedef ::HEnergyLossCorrPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEnergyLossCorrPar(TBuffer &buf, void *obj) {
      ((::HEnergyLossCorrPar*)obj)->::HEnergyLossCorrPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEnergyLossCorrPar

//______________________________________________________________________________
void HSplinePar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSplinePar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.ReadStaticArray((float*)xPoints);
      R__b.ReadStaticArray((float*)yPoints);
      R__b.ReadStaticArray((float*)zPoints);
      R__b.CheckByteCount(R__s, R__c, HSplinePar::IsA());
   } else {
      R__c = R__b.WriteVersion(HSplinePar::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.WriteArray(xPoints, 52);
      R__b.WriteArray(yPoints, 52);
      R__b.WriteArray(zPoints, 52);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HSplinePar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSplinePar.
      TClass *R__cl = ::HSplinePar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xPoints[52]", xPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yPoints[52]", yPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zPoints[52]", zPoints);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSplinePar(void *p) {
      return  p ? new(p) ::HSplinePar : new ::HSplinePar;
   }
   static void *newArray_HSplinePar(Long_t nElements, void *p) {
      return p ? new(p) ::HSplinePar[nElements] : new ::HSplinePar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSplinePar(void *p) {
      delete ((::HSplinePar*)p);
   }
   static void deleteArray_HSplinePar(void *p) {
      delete [] ((::HSplinePar*)p);
   }
   static void destruct_HSplinePar(void *p) {
      typedef ::HSplinePar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSplinePar(TBuffer &buf, void *obj) {
      ((::HSplinePar*)obj)->::HSplinePar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSplinePar

//______________________________________________________________________________
void HLvl1EvtFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HLvl1EvtFilter.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HLvl1EvtFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HLvl1EvtFilter.
      TClass *R__cl = ::HLvl1EvtFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTofRaw", &fTofRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTofIter", &fTofIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCntProcessedEvents", &nCntProcessedEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCounterNbRejectedEvts", &nCounterNbRejectedEvts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kOpSec", &kOpSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSimulation", &isSimulation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMetaMult", &nMetaMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTofinoMult", &nTofinoMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTofMult", &nTofMult);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HLvl1EvtFilter(void *p) {
      return  p ? new(p) ::HLvl1EvtFilter : new ::HLvl1EvtFilter;
   }
   static void *newArray_HLvl1EvtFilter(Long_t nElements, void *p) {
      return p ? new(p) ::HLvl1EvtFilter[nElements] : new ::HLvl1EvtFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_HLvl1EvtFilter(void *p) {
      delete ((::HLvl1EvtFilter*)p);
   }
   static void deleteArray_HLvl1EvtFilter(void *p) {
      delete [] ((::HLvl1EvtFilter*)p);
   }
   static void destruct_HLvl1EvtFilter(void *p) {
      typedef ::HLvl1EvtFilter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HLvl1EvtFilter(TBuffer &buf, void *obj) {
      ((::HLvl1EvtFilter*)obj)->::HLvl1EvtFilter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HLvl1EvtFilter

//______________________________________________________________________________
void HTimeLvl1EvtFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTimeLvl1EvtFilter.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HReconstructor::Streamer(R__b);
      R__b >> fTimeCut;
      R__b >> fMultSmearing;
      R__b.CheckByteCount(R__s, R__c, HTimeLvl1EvtFilter::IsA());
   } else {
      R__c = R__b.WriteVersion(HTimeLvl1EvtFilter::IsA(), kTRUE);
      HReconstructor::Streamer(R__b);
      R__b << fTimeCut;
      R__b << fMultSmearing;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTimeLvl1EvtFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTimeLvl1EvtFilter.
      TClass *R__cl = ::HTimeLvl1EvtFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTofHits", &fTofHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTofIter", &fTofIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCntProcessedEvents", &nCntProcessedEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCounterNbRejectedEvts", &nCounterNbRejectedEvts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMult", &nMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeCut", &fTimeCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMultSmearing", &fMultSmearing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nFilter", &nFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filterOption", &filterOption);
      R__insp.InspectMember(filterOption, "filterOption.");
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTimeLvl1EvtFilter(void *p) {
      return  p ? new(p) ::HTimeLvl1EvtFilter : new ::HTimeLvl1EvtFilter;
   }
   static void *newArray_HTimeLvl1EvtFilter(Long_t nElements, void *p) {
      return p ? new(p) ::HTimeLvl1EvtFilter[nElements] : new ::HTimeLvl1EvtFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTimeLvl1EvtFilter(void *p) {
      delete ((::HTimeLvl1EvtFilter*)p);
   }
   static void deleteArray_HTimeLvl1EvtFilter(void *p) {
      delete [] ((::HTimeLvl1EvtFilter*)p);
   }
   static void destruct_HTimeLvl1EvtFilter(void *p) {
      typedef ::HTimeLvl1EvtFilter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTimeLvl1EvtFilter(TBuffer &buf, void *obj) {
      ((::HTimeLvl1EvtFilter*)obj)->::HTimeLvl1EvtFilter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTimeLvl1EvtFilter

/********************************************************
* ../build/pc/MdcTrackGDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMdcTrackGDict();

extern "C" void G__set_cpp_environmentMdcTrackGDict() {
  G__cpp_reset_tagtableMdcTrackGDict();
}
#include <new>
extern "C" int G__cpp_dllrevMdcTrackGDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HMdcTrackGField */
static int G__MdcTrackGDict_184_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackGField* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackGField((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTrackGField((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackGField((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTrackGField((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTrackGField[n];
       } else {
         p = new((void*) gvp) HMdcTrackGField[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTrackGField;
       } else {
         p = new((void*) gvp) HMdcTrackGField;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGField));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_184_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGField*) G__getstructoffset())->init(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_184_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGField*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_184_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGField*) G__getstructoffset())->calcField((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_184_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackGField::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_184_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGField::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_184_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackGField::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_184_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackGField::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_184_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGField*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_184_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGField::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_184_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackGField::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_184_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGField::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_184_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackGField::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackGDict_184_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackGField* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackGField(*(HMdcTrackGField*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGField));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackGField G__THMdcTrackGField;
static int G__MdcTrackGDict_184_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackGField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackGField*) (soff+(sizeof(HMdcTrackGField)*i)))->~G__THMdcTrackGField();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackGField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackGField*) (soff))->~G__THMdcTrackGField();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackGDict_184_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackGField* dest = (HMdcTrackGField*) G__getstructoffset();
   *dest = *(HMdcTrackGField*) libp->para[0].ref;
   const HMdcTrackGField& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackGCorrections */
static int G__MdcTrackGDict_185_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackGCorrections* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackGCorrections((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTrackGCorrections((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackGCorrections((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTrackGCorrections((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTrackGCorrections[n];
       } else {
         p = new((void*) gvp) HMdcTrackGCorrections[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTrackGCorrections;
       } else {
         p = new((void*) gvp) HMdcTrackGCorrections;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackGCorrections* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcTrackGCorrections(*(HMdcTrackGCorrections*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HMdcTrackGCorrections(*(HMdcTrackGCorrections*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGCorrections*) G__getstructoffset())->init(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGCorrections*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrections*) G__getstructoffset())->getPhiI((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrections*) G__getstructoffset())->getThetaI((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrections*) G__getstructoffset())->getPrecI((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrections*) G__getstructoffset())->getCorrE((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrections*) G__getstructoffset())->getCorrP((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrections*) G__getstructoffset())->getCorrE1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrections*) G__getstructoffset())->getCorrP1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackGCorrections::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGCorrections::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackGCorrections::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackGCorrections::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGCorrections*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGCorrections::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackGCorrections::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGCorrections::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_185_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackGCorrections::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackGCorrections G__THMdcTrackGCorrections;
static int G__MdcTrackGDict_185_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackGCorrections*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackGCorrections*) (soff+(sizeof(HMdcTrackGCorrections)*i)))->~G__THMdcTrackGCorrections();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackGCorrections*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackGCorrections*) (soff))->~G__THMdcTrackGCorrections();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackGDict_185_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackGCorrections* dest = (HMdcTrackGCorrections*) G__getstructoffset();
   *dest = *(HMdcTrackGCorrections*) libp->para[0].ref;
   const HMdcTrackGCorrections& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackGSpline */
static int G__MdcTrackGDict_186_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcIOMatching((HMdcSeg**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->checkSecDer((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->getXYpoint((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->getField((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->SplineMinimize((HGeomVector*) G__int(libp->para[0]), (HGeomVector*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->SolveDiffEquation((HGeomVector*) G__int(libp->para[0]), (HGeomVector*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Double_t a[1][3]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->det3(G__Ap0->a));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->spline((HGeomVector*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcTarDist(*(HVertex*) libp->para[0].ref, (HMdcSeg*) G__int(libp->para[1])
, (HGeomTransform*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcTarDist(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HMdcTrackGSpline*) G__getstructoffset())->getSegmentPoints();
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->getFieldDistance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackGSpline*) G__getstructoffset())->getqSpline());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->getErrP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->calcSegPoints((HMdcSeg**) G__int(libp->para[0]), (HGeomVector*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->calcSegPoints((HGeomVector*) G__int(libp->para[0]), (HMdcSeg*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->mixPoints(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->calcSegPoints123((HMdcSeg**) G__int(libp->para[0]), (HGeomVector*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->calcSegPoints123P4((HMdcSeg**) G__int(libp->para[0]), (HGeomVector*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMdcTrackGSpline*) G__getstructoffset())->getPolarity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->setMagnetScaling((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->equationofLine((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->equationofLine3D(*((HGeomVector*) G__int(libp->para[0])), *((HGeomVector*) G__int(libp->para[1]))
, (Double_t) G__double(libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HMdcTrackGSpline*) G__getstructoffset())->calcMetaDir((HMdcSeg*) G__int(libp->para[0]), *((HGeomVector*) G__int(libp->para[1])));
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HMdcTrackGSpline*) G__getstructoffset())->calcKickIntersection((HMdcSeg*) G__int(libp->para[0]));
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->calcKickIntersectionErr((HMdcSeg*) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HMdcTrackGSpline*) G__getstructoffset())->getDistField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector* pobj;
         const HGeomVector xobj = ((const HMdcTrackGSpline*) G__getstructoffset())->getPointOne();
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->calcInter((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), *((HGeomVector*) G__int(libp->para[3]))
, *((HGeomVector*) G__int(libp->para[4])), *(HGeomVector*) libp->para[5].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackGSpline* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackGSpline((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTrackGSpline((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackGSpline((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTrackGSpline((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTrackGSpline[n];
       } else {
         p = new((void*) gvp) HMdcTrackGSpline[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTrackGSpline;
       } else {
         p = new((void*) gvp) HMdcTrackGSpline;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGSpline));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcTrackGSpline*) G__getstructoffset())->setDataPointer((HMdcTrackGField*) G__int(libp->para[0]), (HMdcTrackGCorrections*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcTrackGSpline*) G__getstructoffset())->setDataPointer((HMdcTrackGField*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcTrackGSpline*) G__getstructoffset())->setDataPointer();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->setCorrScan((HMdcTrackGCorrections**) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->setF((HMdcTrackGField*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcTrackGSpline*) G__getstructoffset())->setCorrPointer((HMdcTrackGCorrections*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcTrackGSpline*) G__getstructoffset())->setCorrPointer();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcTrackGSpline*) G__getstructoffset())->setKickPointer((HMdcKickPlane*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcTrackGSpline*) G__getstructoffset())->setKickPointer();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcMomentum((HGeomVector*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcMomentum((HGeomVector*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcMomentum((HGeomVector*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcMomentum((HGeomVector*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcMomentum((HMdcSeg**) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcMomentum((HMdcSeg**) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcMomentum((HMdcSeg**) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcMomentum123((HMdcSeg**) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcMomentum123((HMdcSeg**) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcMomentum123((HMdcSeg**) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcMomentum123P4((HMdcSeg**) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcMomentum123P4((HMdcSeg**) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->calcMomentum123P4((HMdcSeg**) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->getDistance((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackGSpline*) G__getstructoffset())->getMetaDistance((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->transSpline((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(HGeomVector*) libp->para[2].ref, *(HGeomVector*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->transSplineB((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(HGeomVector*) libp->para[2].ref, *(HGeomVector*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->transSplineLocal((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(HGeomVector*) libp->para[2].ref, *(HGeomVector*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackGSpline*) G__getstructoffset())->scanCorrections());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->initPlanes();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->setZGlobal((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->initMiddleParams(*((HGeomVector*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->initMiddleParamsP4(*((HGeomVector*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HMdcTrackGSpline*) G__getstructoffset())->takeMiddleParams((HMdcGetContainers*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTrackGSpline*) G__getstructoffset())->takeMiddleParams((HGeomTransform*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->initMiddleParamsAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackGSpline*) G__getstructoffset())->splineIsInitialized());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcTrackGSpline*) G__getstructoffset())->splineKickIsInitialized());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackGSpline::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGSpline::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackGSpline::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackGSpline::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGSpline*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGSpline::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackGSpline::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGSpline::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_186_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackGSpline::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackGDict_186_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackGSpline* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackGSpline(*(HMdcTrackGSpline*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGSpline));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackGSpline G__THMdcTrackGSpline;
static int G__MdcTrackGDict_186_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackGSpline*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackGSpline*) (soff+(sizeof(HMdcTrackGSpline)*i)))->~G__THMdcTrackGSpline();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackGSpline*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackGSpline*) (soff))->~G__THMdcTrackGSpline();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackGDict_186_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackGSpline* dest = (HMdcTrackGSpline*) G__getstructoffset();
   *dest = *(HMdcTrackGSpline*) libp->para[0].ref;
   const HMdcTrackGSpline& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackGFieldPar */
static int G__MdcTrackGDict_206_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackGFieldPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackGFieldPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcTrackGFieldPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackGFieldPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTrackGFieldPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackGFieldPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTrackGFieldPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTrackGFieldPar[n];
       } else {
         p = new((void*) gvp) HMdcTrackGFieldPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTrackGFieldPar;
       } else {
         p = new((void*) gvp) HMdcTrackGFieldPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_206_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGFieldPar*) G__getstructoffset())->initFieldMap(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_206_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGFieldPar*) G__getstructoffset())->calcField((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_206_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackGFieldPar*) G__getstructoffset())->getPointer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_206_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackGFieldPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_206_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGFieldPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_206_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackGFieldPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_206_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackGFieldPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_206_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGFieldPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_206_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGFieldPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_206_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackGFieldPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_206_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGFieldPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_206_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackGFieldPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackGDict_206_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackGFieldPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackGFieldPar(*(HMdcTrackGFieldPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackGFieldPar G__THMdcTrackGFieldPar;
static int G__MdcTrackGDict_206_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackGFieldPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackGFieldPar*) (soff+(sizeof(HMdcTrackGFieldPar)*i)))->~G__THMdcTrackGFieldPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackGFieldPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackGFieldPar*) (soff))->~G__THMdcTrackGFieldPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackGDict_206_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackGFieldPar* dest = (HMdcTrackGFieldPar*) G__getstructoffset();
   *dest = *(HMdcTrackGFieldPar*) libp->para[0].ref;
   const HMdcTrackGFieldPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackGCorrPar */
static int G__MdcTrackGDict_208_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackGCorrPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackGCorrPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMdcTrackGCorrPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackGCorrPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMdcTrackGCorrPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackGCorrPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMdcTrackGCorrPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTrackGCorrPar[n];
       } else {
         p = new((void*) gvp) HMdcTrackGCorrPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMdcTrackGCorrPar;
       } else {
         p = new((void*) gvp) HMdcTrackGCorrPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGCorrPar*) G__getstructoffset())->setCorrectionFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcTrackGCorrPar*) G__getstructoffset())->getCorrectionFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGCorrPar*) G__getstructoffset())->initCorrections(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGCorrPar*) G__getstructoffset())->initCorrections1(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGCorrPar*) G__getstructoffset())->initCorrectionsScan((TString*) G__int(libp->para[0]), (TString*) G__int(libp->para[1])
, (TString*) G__int(libp->para[2]), (TString*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrPar*) G__getstructoffset())->calcMomentum((HGeomVector*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrPar*) G__getstructoffset())->calcMomentum((HGeomVector*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrPar*) G__getstructoffset())->calcMomentum((HGeomVector*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrPar*) G__getstructoffset())->calcMomentum((HMdcSeg**) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrPar*) G__getstructoffset())->calcMomentum((HMdcSeg**) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrPar*) G__getstructoffset())->calcMomentum((HMdcSeg**) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrPar*) G__getstructoffset())->calcMomentum123((HMdcSeg**) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrPar*) G__getstructoffset())->calcMomentum123((HMdcSeg**) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrPar*) G__getstructoffset())->calcMomentum123((HMdcSeg**) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGCorrPar*) G__getstructoffset())->getDistance((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HMdcTrackGCorrPar*) G__getstructoffset())->getMetaDistance((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackGCorrPar*) G__getstructoffset())->getCorr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackGCorrPar*) G__getstructoffset())->getSPline());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMdcTrackGCorrPar*) G__getstructoffset())->getCorr1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGCorrPar*) G__getstructoffset())->getCorrScan((HMdcTrackGCorrections**) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackGCorrPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGCorrPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackGCorrPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackGCorrPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGCorrPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGCorrPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackGCorrPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGCorrPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_208_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackGCorrPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackGDict_208_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackGCorrPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackGCorrPar(*(HMdcTrackGCorrPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackGCorrPar G__THMdcTrackGCorrPar;
static int G__MdcTrackGDict_208_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackGCorrPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackGCorrPar*) (soff+(sizeof(HMdcTrackGCorrPar)*i)))->~G__THMdcTrackGCorrPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackGCorrPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackGCorrPar*) (soff))->~G__THMdcTrackGCorrPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackGDict_208_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackGCorrPar* dest = (HMdcTrackGCorrPar*) G__getstructoffset();
   *dest = *(HMdcTrackGCorrPar*) libp->para[0].ref;
   const HMdcTrackGCorrPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackGContFact */
static int G__MdcTrackGDict_597_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackGContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackGContFact[n];
     } else {
       p = new((void*) gvp) HMdcTrackGContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackGContFact;
     } else {
       p = new((void*) gvp) HMdcTrackGContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_597_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackGContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_597_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_597_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackGContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_597_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackGContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_597_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackGContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_597_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_597_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackGContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_597_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackGContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_597_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackGContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackGDict_597_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcTrackGContFact* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcTrackGContFact(*(HMdcTrackGContFact*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackGContFact G__THMdcTrackGContFact;
static int G__MdcTrackGDict_597_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackGContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackGContFact*) (soff+(sizeof(HMdcTrackGContFact)*i)))->~G__THMdcTrackGContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackGContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackGContFact*) (soff))->~G__THMdcTrackGContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackGDict_597_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackGContFact* dest = (HMdcTrackGContFact*) G__getstructoffset();
   *dest = *(HMdcTrackGContFact*) libp->para[0].ref;
   const HMdcTrackGContFact& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HBaseTrack */
static int G__MdcTrackGDict_598_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HBaseTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HBaseTrack[n];
     } else {
       p = new((void*) gvp) HBaseTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HBaseTrack;
     } else {
       p = new((void*) gvp) HBaseTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HBaseTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HBaseTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HBaseTrack(*(HBaseTrack*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HBaseTrack(*(HBaseTrack*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HBaseTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setIOMatching((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setZ((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setR((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setP((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setTheta((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setPhi((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setTofHitInd((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setTofClustInd((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setShowerHitInd((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setRpcClustInd((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setMass2((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setTof((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setPolarity((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setSector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setBeta((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setMetaEloss((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setTarDist((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->setTofDist((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HBaseTrack*) G__getstructoffset())->getIOMatch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HBaseTrack*) G__getstructoffset())->getIOMatching());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HBaseTrack*) G__getstructoffset())->getZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HBaseTrack*) G__getstructoffset())->getErrZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HBaseTrack*) G__getstructoffset())->getR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HBaseTrack*) G__getstructoffset())->getErrR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HBaseTrack*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HBaseTrack*) G__getstructoffset())->getErrTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HBaseTrack*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HBaseTrack*) G__getstructoffset())->getErrPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HBaseTrack*) G__getstructoffset())->isOverlap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HBaseTrack*) G__getstructoffset())->getSystem());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HBaseTrack*) G__getstructoffset())->getShowerHitInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HBaseTrack*) G__getstructoffset())->getTofHitInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HBaseTrack*) G__getstructoffset())->getTofClustInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HBaseTrack*) G__getstructoffset())->getRpcClustInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HBaseTrack*) G__getstructoffset())->getP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HBaseTrack*) G__getstructoffset())->getErrP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HBaseTrack*) G__getstructoffset())->getMass2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HBaseTrack*) G__getstructoffset())->getErrMass2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HBaseTrack*) G__getstructoffset())->getTof());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HBaseTrack*) G__getstructoffset())->getPolarity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HBaseTrack*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HBaseTrack*) G__getstructoffset())->getBeta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HBaseTrack*) G__getstructoffset())->getMetaEloss());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HSymMat& obj = ((HBaseTrack*) G__getstructoffset())->getCovariance();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HBaseTrack*) G__getstructoffset())->getTarDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HBaseTrack*) G__getstructoffset())->getTofDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HBaseTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBaseTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HBaseTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HBaseTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBaseTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBaseTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HBaseTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBaseTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_598_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HBaseTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HBaseTrack G__THBaseTrack;
static int G__MdcTrackGDict_598_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HBaseTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HBaseTrack*) (soff+(sizeof(HBaseTrack)*i)))->~G__THBaseTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HBaseTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HBaseTrack*) (soff))->~G__THBaseTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackGDict_598_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HBaseTrack* dest = (HBaseTrack*) G__getstructoffset();
   *dest = *(HBaseTrack*) libp->para[0].ref;
   const HBaseTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMetaMatch2 */
static int G__MdcTrackGDict_600_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMetaMatch2* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMetaMatch2[n];
     } else {
       p = new((void*) gvp) HMetaMatch2[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMetaMatch2;
     } else {
       p = new((void*) gvp) HMetaMatch2;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMetaMatch2* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMetaMatch2(
(Short_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HMetaMatch2(
(Short_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setTrkCandInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setOwnIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setNRpcClust((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setNShrHits((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setNTofHits((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setRpcClst((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setShrHit((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setTofClst((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setTofHit1((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setTofHit2((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp2 { Float_t a[1][3]; }* G__Ap2 = (struct G__aRyp2*) G__int(libp->para[2]);
      ((HMetaMatch2*) G__getstructoffset())->setRpcClstMMF((UChar_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])
, G__Ap2->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp2 { Float_t a[1][3]; }* G__Ap2 = (struct G__aRyp2*) G__int(libp->para[2]);
      ((HMetaMatch2*) G__getstructoffset())->setShrHitMMF((UChar_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])
, G__Ap2->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp1 { Short_t a[1][3]; }* G__Ap1 = (struct G__aRyp1*) G__int(libp->para[1]);
  struct G__aRyp2 { Float_t a[1][9]; }* G__Ap2 = (struct G__aRyp2*) G__int(libp->para[2]);
      ((HMetaMatch2*) G__getstructoffset())->setTofClstMMF((UChar_t) G__int(libp->para[0]), G__Ap1->a
, G__Ap2->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setSplineInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setSector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setNCandForRich((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setNCandForIPU((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setRichInd((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setRichIPUInd((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setRungeKuttaIndShowerHit((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setRungeKuttaIndTofClst((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setRungeKuttaIndTofHit1((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setRungeKuttaIndTofHit2((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setRungeKuttaIndRpcClst((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setRungeKuttaInd((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setKalmanFilterInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setKalmanFilterIndShowerHit((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setKalmanFilterIndTofClst((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setKalmanFilterIndTofHit1((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setKalmanFilterIndTofHit2((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setKalmanFilterIndRpcClst((UChar_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setInnerFake((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->setOuterFake((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HMetaMatch2*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMetaMatch2*) G__getstructoffset())->getTrkCandInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMetaMatch2*) G__getstructoffset())->getOwnIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMetaMatch2*) G__getstructoffset())->getMetaArrSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMetaMatch2*) G__getstructoffset())->getSystem());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMetaMatch2*) G__getstructoffset())->getNRpcClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMetaMatch2*) G__getstructoffset())->getNShrHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMetaMatch2*) G__getstructoffset())->getNTofHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getRpcClstInd((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getShowerHitInd((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getTofClstInd((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getTofHit1Ind((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getTofHit2Ind((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getRpcClstQuality((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getShowerHitQuality((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getTofClstQuality((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getTofHit1Quality((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getTofHit2Quality((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getRpcClstDX((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getShowerHitDX((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getTofClstDX((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getTofHit1DX((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getTofHit2DX((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getRpcClstDY((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getShowerHitDY((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getTofClstDY((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getTofHit1DY((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HMetaMatch2*) G__getstructoffset())->getTofHit2DY((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HMetaMatch2*) G__getstructoffset())->getSplineInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getRungeKuttaIndShowerHit((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getRungeKuttaIndTofClst((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getRungeKuttaIndTofHit1((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getRungeKuttaIndTofHit2((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getRungeKuttaIndRpcClst((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getRungeKuttaInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getKalmanFilterInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getKalmanFilterIndShowerHit((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getKalmanFilterIndTofClst((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getKalmanFilterIndTofHit1((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getKalmanFilterIndTofHit2((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getKalmanFilterIndRpcClst((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMetaMatch2*) G__getstructoffset())->getNCandForRich());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HMetaMatch2*) G__getstructoffset())->getNCandForIPU());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getARichInd((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HMetaMatch2*) G__getstructoffset())->getARichIPUInd((UChar_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMetaMatch2*) G__getstructoffset())->isFake());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMetaMatch2*) G__getstructoffset())->isInnerFake());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMetaMatch2*) G__getstructoffset())->isOuterFake());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMetaMatch2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMetaMatch2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMetaMatch2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMetaMatch2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatch2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMetaMatch2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMetaMatch2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMetaMatch2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_600_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMetaMatch2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackGDict_600_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMetaMatch2* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMetaMatch2(*(HMetaMatch2*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMetaMatch2 G__THMetaMatch2;
static int G__MdcTrackGDict_600_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMetaMatch2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMetaMatch2*) (soff+(sizeof(HMetaMatch2)*i)))->~G__THMetaMatch2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMetaMatch2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMetaMatch2*) (soff))->~G__THMetaMatch2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackGDict_600_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMetaMatch2* dest = (HMetaMatch2*) G__getstructoffset();
   *dest = *(HMetaMatch2*) libp->para[0].ref;
   const HMetaMatch2& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMetaMatchPar */
static int G__MdcTrackGDict_611_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMetaMatchPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMetaMatchPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMetaMatchPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMetaMatchPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMetaMatchPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMetaMatchPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMetaMatchPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMetaMatchPar[n];
       } else {
         p = new((void*) gvp) HMetaMatchPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMetaMatchPar;
       } else {
         p = new((void*) gvp) HMetaMatchPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRichThetaMinCut((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRichThetaMaxCut((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRichSigmaPhi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRichSigmaPhiOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRichQualityCut((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRichIPUThetaMinCut((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRichIPUThetaMaxCut((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRichIPUSigmaPhi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRichIPUSigmaPhiOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRichIPUQualityCut((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getShowerSigmaXMdc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getShowerSigmaYMdc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getShowerSigmaXOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getShowerSigmaYOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getShowerQualityCut((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRpcSigmaXMdc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRpcSigmaYMdc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRpcSigmaXOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRpcSigmaYOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getRpcQualityCut((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getTofSigmaX((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getTofSigmaY((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getTofSigmaXOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getTofSigmaYOffset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMetaMatchPar*) G__getstructoffset())->getTofQualityCut((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRichThetaMinCut((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRichThetaMaxCut((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRichSigmaPhi((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRichSigmaPhiOffset((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRichQualityCut((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRichIPUThetaMinCut((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRichIPUThetaMaxCut((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRichIPUSigmaPhi((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRichIPUSigmaPhiOffset((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRichIPUQualityCut((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setShowerSigmaXMdc((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setShowerSigmaYMdc((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setShowerSigmaXOffset((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setShowerSigmaYOffset((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setShowerQualityCut((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRpcSigmaXMdc((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRpcSigmaYMdc((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRpcSigmaXOffset((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRpcSigmaYOffset((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setRpcQualityCut((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setTofSigmaX((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setTofSigmaY((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setTofSigmaXOffset((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setTofSigmaYOffset((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->setTofQualityCut((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMetaMatchPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMetaMatchPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMetaMatchPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMetaMatchPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMetaMatchPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMetaMatchPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMetaMatchPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_611_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMetaMatchPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackGDict_611_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMetaMatchPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMetaMatchPar(*(HMetaMatchPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMetaMatchPar G__THMetaMatchPar;
static int G__MdcTrackGDict_611_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMetaMatchPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMetaMatchPar*) (soff+(sizeof(HMetaMatchPar)*i)))->~G__THMetaMatchPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMetaMatchPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMetaMatchPar*) (soff))->~G__THMetaMatchPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackGDict_611_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMetaMatchPar* dest = (HMetaMatchPar*) G__getstructoffset();
   *dest = *(HMetaMatchPar*) libp->para[0].ref;
   const HMetaMatchPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMetaMatchF2 */
static int G__MdcTrackGDict_613_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMetaMatchF2* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMetaMatchF2[n];
     } else {
       p = new((void*) gvp) HMetaMatchF2[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMetaMatchF2;
     } else {
       p = new((void*) gvp) HMetaMatchF2;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchF2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_613_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMetaMatchF2* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMetaMatchF2((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMetaMatchF2((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchF2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_613_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMetaMatchF2*) G__getstructoffset())->storeNotMatchedTracks((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMetaMatchF2*) G__getstructoffset())->storeNotMatchedTracks();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_613_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMetaMatchF2::setScaleRMS((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_613_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMetaMatchF2::setScaleCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_613_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMetaMatchF2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_613_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMetaMatchF2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_613_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMetaMatchF2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_613_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMetaMatchF2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_613_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMetaMatchF2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_613_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMetaMatchF2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_613_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMetaMatchF2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_613_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMetaMatchF2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_613_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMetaMatchF2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMetaMatchF2 G__THMetaMatchF2;
static int G__MdcTrackGDict_613_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMetaMatchF2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMetaMatchF2*) (soff+(sizeof(HMetaMatchF2)*i)))->~G__THMetaMatchF2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMetaMatchF2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMetaMatchF2*) (soff))->~G__THMetaMatchF2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSplineTrack */
static int G__MdcTrackGDict_614_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSplineTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSplineTrack[n];
     } else {
       p = new((void*) gvp) HSplineTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSplineTrack;
     } else {
       p = new((void*) gvp) HSplineTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_614_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplineTrack*) G__getstructoffset())->setNumOfChambers((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_614_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSplineTrack*) G__getstructoffset())->getNumOfChambers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_614_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplineTrack*) G__getstructoffset())->setQSpline((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_614_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HSplineTrack*) G__getstructoffset())->getQSpline());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_614_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSplineTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_614_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplineTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_614_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSplineTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_614_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSplineTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_614_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplineTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_614_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplineTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_614_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSplineTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_614_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplineTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_614_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSplineTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackGDict_614_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSplineTrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSplineTrack(*(HSplineTrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSplineTrack G__THSplineTrack;
static int G__MdcTrackGDict_614_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSplineTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSplineTrack*) (soff+(sizeof(HSplineTrack)*i)))->~G__THSplineTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSplineTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSplineTrack*) (soff))->~G__THSplineTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackGDict_614_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSplineTrack* dest = (HSplineTrack*) G__getstructoffset();
   *dest = *(HSplineTrack*) libp->para[0].ref;
   const HSplineTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSplinePar */
static int G__MdcTrackGDict_616_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSplinePar* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSplinePar[n];
     } else {
       p = new((void*) gvp) HSplinePar[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSplinePar;
     } else {
       p = new((void*) gvp) HSplinePar;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplinePar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplinePar*) G__getstructoffset())->init((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplinePar*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplinePar*) G__getstructoffset())->remove((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplinePar*) G__getstructoffset())->remove((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplinePar*) G__getstructoffset())->setSplinePoints((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplinePar*) G__getstructoffset())->getSplinePoints((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSplinePar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplinePar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSplinePar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSplinePar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplinePar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplinePar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSplinePar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplinePar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_616_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSplinePar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackGDict_616_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSplinePar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSplinePar(*(HSplinePar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplinePar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSplinePar G__THSplinePar;
static int G__MdcTrackGDict_616_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSplinePar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSplinePar*) (soff+(sizeof(HSplinePar)*i)))->~G__THSplinePar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSplinePar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSplinePar*) (soff))->~G__THSplinePar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackGDict_616_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSplinePar* dest = (HSplinePar*) G__getstructoffset();
   *dest = *(HSplinePar*) libp->para[0].ref;
   const HSplinePar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSplineTrackF2 */
static int G__MdcTrackGDict_618_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HSplineTrackF2*) G__getstructoffset())->fillData((HMdcSeg*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HSplineTrackF2*) G__getstructoffset())->fillData((HMdcSeg*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_618_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HSplineTrackF2*) G__getstructoffset())->fillParData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_618_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSplineTrackF2* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSplineTrackF2[n];
     } else {
       p = new((void*) gvp) HSplineTrackF2[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSplineTrackF2;
     } else {
       p = new((void*) gvp) HSplineTrackF2;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrackF2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_618_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSplineTrackF2* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HSplineTrackF2((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HSplineTrackF2((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrackF2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_618_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplineTrackF2*) G__getstructoffset())->makeSplinePar();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_618_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSplineTrackF2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_618_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplineTrackF2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_618_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSplineTrackF2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_618_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSplineTrackF2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_618_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplineTrackF2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_618_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplineTrackF2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_618_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSplineTrackF2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_618_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplineTrackF2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_618_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSplineTrackF2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSplineTrackF2 G__THSplineTrackF2;
static int G__MdcTrackGDict_618_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSplineTrackF2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSplineTrackF2*) (soff+(sizeof(HSplineTrackF2)*i)))->~G__THSplineTrackF2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSplineTrackF2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSplineTrackF2*) (soff))->~G__THSplineTrackF2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRungeKutta */
static int G__MdcTrackGDict_656_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRungeKutta* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRungeKutta[n];
     } else {
       p = new((void*) gvp) HRungeKutta[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRungeKutta;
     } else {
       p = new((void*) gvp) HRungeKutta;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HRungeKutta));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRungeKutta*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRungeKutta*) G__getstructoffset())->setField((HMdcTrackGField*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRungeKutta*) G__getstructoffset())->setFieldFactor((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRungeKutta*) G__getstructoffset())->setMdcPosition((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(HGeomTransform*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 103, (long) ((HRungeKutta*) G__getstructoffset())->fit4Hits(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) ((HRungeKutta*) G__getstructoffset())->fit4Hits((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 103, (long) ((HRungeKutta*) G__getstructoffset())->fit3Hits(
(Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) ((HRungeKutta*) G__getstructoffset())->fit3Hits((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRungeKutta*) G__getstructoffset())->traceToVertex((HMdcSizesCells*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HRungeKutta*) G__getstructoffset())->traceToMETA(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, (HGeomVector*) G__int(libp->para[2]), (HGeomVector*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HRungeKutta*) G__getstructoffset())->traceToMETA(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, (HGeomVector*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HRungeKutta*) G__getstructoffset())->traceToMETA(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getPfit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRungeKutta*) G__getstructoffset())->getNMaxMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getXfit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getYfit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getZfit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getXhit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getYhit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getXfithit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getYfithit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getXtrackFirstMDCFitPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getYtrackFirstMDCFitPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getZtrackFirstMDCFitPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getDXtrackFirstMDCFitPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getDYtrackFirstMDCFitPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getDZtrackFirstMDCFitPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getXtrackLastMDCFitPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getYtrackLastMDCFitPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getZtrackLastMDCFitPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getDXtrackLastMDCFitPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getDYtrackLastMDCFitPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getDZtrackLastMDCFitPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getXtrackOnMETA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getYtrackOnMETA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getZtrackOnMETA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getTrackLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getZSeg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getRSeg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getThetaSeg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getPhiSeg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getZSeg2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getRSeg2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getThetaSeg2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRungeKutta*) G__getstructoffset())->getPhiSeg2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRungeKutta*) G__getstructoffset())->setMTol((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HRungeKutta*) G__getstructoffset())->getMTol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRungeKutta::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRungeKutta::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRungeKutta::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRungeKutta::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HRungeKutta*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRungeKutta*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRungeKutta*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRungeKutta*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRungeKutta::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRungeKutta::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRungeKutta::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_656_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRungeKutta::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackGDict_656_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRungeKutta* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRungeKutta(*(HRungeKutta*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HRungeKutta));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRungeKutta G__THRungeKutta;
static int G__MdcTrackGDict_656_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRungeKutta*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRungeKutta*) (soff+(sizeof(HRungeKutta)*i)))->~G__THRungeKutta();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRungeKutta*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRungeKutta*) (soff))->~G__THRungeKutta();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackGDict_656_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRungeKutta* dest = (HRungeKutta*) G__getstructoffset();
   *dest = *(HRungeKutta*) libp->para[0].ref;
   const HRungeKutta& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRKTrackB */
static int G__MdcTrackGDict_657_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRKTrackB* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRKTrackB[n];
     } else {
       p = new((void*) gvp) HRKTrackB[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRKTrackB;
     } else {
       p = new((void*) gvp) HRKTrackB;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackB));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setChiq((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setZSeg1RK((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setRSeg1RK((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setThetaSeg1RK((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setPhiSeg1RK((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setZSeg2RK((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setRSeg2RK((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setThetaSeg2RK((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setPhiSeg2RK((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setMETAdx((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setMETAdy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setMETAdz((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setQualityRpc((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setQualityShower((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->setQualityTof((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getChiq());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getZSeg1RK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getRSeg1RK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getThetaSeg1RK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getPhiSeg1RK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getZSeg2RK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getRSeg2RK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getThetaSeg2RK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getPhiSeg2RK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getMETAdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getMETAdy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getMETAdz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getQualityRpc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getQualityShower());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRKTrackB*) G__getstructoffset())->getQualityTof());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRKTrackB*) G__getstructoffset())->getMetaRadius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRKTrackB::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRKTrackB::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRKTrackB::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRKTrackB::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackB*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRKTrackB::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRKTrackB::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRKTrackB::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_657_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRKTrackB::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackGDict_657_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRKTrackB* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRKTrackB(*(HRKTrackB*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackB));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRKTrackB G__THRKTrackB;
static int G__MdcTrackGDict_657_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRKTrackB*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRKTrackB*) (soff+(sizeof(HRKTrackB)*i)))->~G__THRKTrackB();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRKTrackB*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRKTrackB*) (soff))->~G__THRKTrackB();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackGDict_657_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRKTrackB* dest = (HRKTrackB*) G__getstructoffset();
   *dest = *(HRKTrackB*) libp->para[0].ref;
   const HRKTrackB& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRKTrackBF2 */
static int G__MdcTrackGDict_663_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRKTrackBF2* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRKTrackBF2[n];
     } else {
       p = new((void*) gvp) HRKTrackBF2[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRKTrackBF2;
     } else {
       p = new((void*) gvp) HRKTrackBF2;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackBF2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_663_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRKTrackBF2* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRKTrackBF2((const Text_t*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRKTrackBF2((const Text_t*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRKTrackBF2((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRKTrackBF2((const Text_t*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackBF2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_663_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackBF2*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_663_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRKTrackBF2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_663_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRKTrackBF2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_663_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRKTrackBF2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_663_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRKTrackBF2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_663_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRKTrackBF2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_663_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRKTrackBF2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_663_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRKTrackBF2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_663_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRKTrackBF2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_663_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRKTrackBF2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRKTrackBF2 G__THRKTrackBF2;
static int G__MdcTrackGDict_663_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRKTrackBF2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRKTrackBF2*) (soff+(sizeof(HRKTrackBF2)*i)))->~G__THRKTrackBF2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRKTrackBF2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRKTrackBF2*) (soff))->~G__THRKTrackBF2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSplineTaskSet */
static int G__MdcTrackGDict_667_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSplineTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSplineTaskSet[n];
     } else {
       p = new((void*) gvp) HSplineTaskSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSplineTaskSet;
     } else {
       p = new((void*) gvp) HSplineTaskSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_667_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSplineTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HSplineTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HSplineTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_667_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HSplineTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HSplineTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HSplineTaskSet*) G__getstructoffset())->make());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_667_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplineTaskSet*) G__getstructoffset())->setSplinePar();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_667_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSplineTaskSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_667_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplineTaskSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_667_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSplineTaskSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_667_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSplineTaskSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_667_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplineTaskSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_667_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplineTaskSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_667_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSplineTaskSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_667_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplineTaskSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_667_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSplineTaskSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSplineTaskSet G__THSplineTaskSet;
static int G__MdcTrackGDict_667_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSplineTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSplineTaskSet*) (soff+(sizeof(HSplineTaskSet)*i)))->~G__THSplineTaskSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSplineTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSplineTaskSet*) (soff))->~G__THSplineTaskSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSplineTofClF2 */
static int G__MdcTrackGDict_668_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSplineTofClF2* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSplineTofClF2[n];
     } else {
       p = new((void*) gvp) HSplineTofClF2[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSplineTofClF2;
     } else {
       p = new((void*) gvp) HSplineTofClF2;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTofClF2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_668_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSplineTofClF2* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSplineTofClF2(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HSplineTofClF2(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSplineTofClF2((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HSplineTofClF2((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTofClF2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_668_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSplineTofClF2*) G__getstructoffset())->unsetTofHitsFromCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_668_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSplineTofClF2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_668_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplineTofClF2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_668_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSplineTofClF2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_668_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSplineTofClF2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_668_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSplineTofClF2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_668_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplineTofClF2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_668_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSplineTofClF2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_668_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSplineTofClF2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_668_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSplineTofClF2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSplineTofClF2 G__THSplineTofClF2;
static int G__MdcTrackGDict_668_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSplineTofClF2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSplineTofClF2*) (soff+(sizeof(HSplineTofClF2)*i)))->~G__THSplineTofClF2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSplineTofClF2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSplineTofClF2*) (soff))->~G__THSplineTofClF2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEnergyLossCorrPar */
static int G__MdcTrackGDict_669_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEnergyLossCorrPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEnergyLossCorrPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HEnergyLossCorrPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEnergyLossCorrPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HEnergyLossCorrPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEnergyLossCorrPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HEnergyLossCorrPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEnergyLossCorrPar[n];
       } else {
         p = new((void*) gvp) HEnergyLossCorrPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEnergyLossCorrPar;
       } else {
         p = new((void*) gvp) HEnergyLossCorrPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HEnergyLossCorrPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_669_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEnergyLossCorrPar::getObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_669_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HEnergyLossCorrPar*) G__getstructoffset())->setDefaultPar(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_669_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HEnergyLossCorrPar*) G__getstructoffset())->getDeltaMom((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_669_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HEnergyLossCorrPar*) G__getstructoffset())->getCorrMom((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_669_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEnergyLossCorrPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_669_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEnergyLossCorrPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_669_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEnergyLossCorrPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_669_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEnergyLossCorrPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_669_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEnergyLossCorrPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_669_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEnergyLossCorrPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_669_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEnergyLossCorrPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_669_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEnergyLossCorrPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_669_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEnergyLossCorrPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcTrackGDict_669_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEnergyLossCorrPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEnergyLossCorrPar(*(HEnergyLossCorrPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HEnergyLossCorrPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEnergyLossCorrPar G__THEnergyLossCorrPar;
static int G__MdcTrackGDict_669_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEnergyLossCorrPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEnergyLossCorrPar*) (soff+(sizeof(HEnergyLossCorrPar)*i)))->~G__THEnergyLossCorrPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEnergyLossCorrPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEnergyLossCorrPar*) (soff))->~G__THEnergyLossCorrPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcTrackGDict_669_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEnergyLossCorrPar* dest = (HEnergyLossCorrPar*) G__getstructoffset();
   *dest = *(HEnergyLossCorrPar*) libp->para[0].ref;
   const HEnergyLossCorrPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HLvl1EvtFilter */
static int G__MdcTrackGDict_670_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLvl1EvtFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLvl1EvtFilter[n];
     } else {
       p = new((void*) gvp) HLvl1EvtFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLvl1EvtFilter;
     } else {
       p = new((void*) gvp) HLvl1EvtFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HLvl1EvtFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_670_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLvl1EvtFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLvl1EvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HLvl1EvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLvl1EvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HLvl1EvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLvl1EvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
     } else {
       p = new((void*) gvp) HLvl1EvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HLvl1EvtFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_670_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLvl1EvtFilter*) G__getstructoffset())->resetCounters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_670_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HLvl1EvtFilter*) G__getstructoffset())->isFilteredEvt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_670_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HLvl1EvtFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_670_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLvl1EvtFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_670_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HLvl1EvtFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_670_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HLvl1EvtFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_670_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLvl1EvtFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_670_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLvl1EvtFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_670_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HLvl1EvtFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_670_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLvl1EvtFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_670_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HLvl1EvtFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HLvl1EvtFilter G__THLvl1EvtFilter;
static int G__MdcTrackGDict_670_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HLvl1EvtFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HLvl1EvtFilter*) (soff+(sizeof(HLvl1EvtFilter)*i)))->~G__THLvl1EvtFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HLvl1EvtFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HLvl1EvtFilter*) (soff))->~G__THLvl1EvtFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTimeLvl1EvtFilter */
static int G__MdcTrackGDict_671_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTimeLvl1EvtFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTimeLvl1EvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) HTimeLvl1EvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTimeLvl1EvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) HTimeLvl1EvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTimeLvl1EvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HTimeLvl1EvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTimeLvl1EvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
     } else {
       p = new((void*) gvp) HTimeLvl1EvtFilter(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTimeLvl1EvtFilter((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTimeLvl1EvtFilter((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTimeLvl1EvtFilter((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTimeLvl1EvtFilter((const Text_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTimeLvl1EvtFilter[n];
       } else {
         p = new((void*) gvp) HTimeLvl1EvtFilter[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTimeLvl1EvtFilter;
       } else {
         p = new((void*) gvp) HTimeLvl1EvtFilter;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcTrackGDictLN_HTimeLvl1EvtFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_671_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTimeLvl1EvtFilter*) G__getstructoffset())->getHitTofCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_671_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTimeLvl1EvtFilter*) G__getstructoffset())->resetCounters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_671_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTimeLvl1EvtFilter*) G__getstructoffset())->isFilteredEvt(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_671_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTimeLvl1EvtFilter*) G__getstructoffset())->isSkipNextTask((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_671_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTimeLvl1EvtFilter*) G__getstructoffset())->isTofMultTrigger());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_671_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTimeLvl1EvtFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_671_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTimeLvl1EvtFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_671_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTimeLvl1EvtFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_671_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTimeLvl1EvtFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_671_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTimeLvl1EvtFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_671_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTimeLvl1EvtFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_671_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTimeLvl1EvtFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_671_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTimeLvl1EvtFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcTrackGDict_671_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTimeLvl1EvtFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTimeLvl1EvtFilter G__THTimeLvl1EvtFilter;
static int G__MdcTrackGDict_671_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTimeLvl1EvtFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTimeLvl1EvtFilter*) (soff+(sizeof(HTimeLvl1EvtFilter)*i)))->~G__THTimeLvl1EvtFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTimeLvl1EvtFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTimeLvl1EvtFilter*) (soff))->~G__THTimeLvl1EvtFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HMdcTrackGField */

/* HMdcTrackGCorrections */

/* HMdcTrackGSpline */

/* HMdcTrackGFieldPar */

/* HMdcTrackGCorrPar */

/* HMdcTrackGContFact */

/* HBaseTrack */

/* HMetaMatch2 */

/* HMetaMatchPar */

/* HMetaMatchF2 */

/* HSplineTrack */

/* HSplinePar */

/* HSplineTrackF2 */

/* HRungeKutta */

/* HRKTrackB */

/* HRKTrackBF2 */

/* HSplineTaskSet */

/* HSplineTofClF2 */

/* HEnergyLossCorrPar */

/* HLvl1EvtFilter */

/* HTimeLvl1EvtFilter */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMdcTrackGDict {
 public:
  G__Sizep2memfuncMdcTrackGDict(): p(&G__Sizep2memfuncMdcTrackGDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMdcTrackGDict::*p)();
};

size_t G__get_sizep2memfuncMdcTrackGDict()
{
  G__Sizep2memfuncMdcTrackGDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMdcTrackGDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGField))) {
     HMdcTrackGField *G__Lderived;
     G__Lderived=(HMdcTrackGField*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGField),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGField),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections))) {
     HMdcTrackGCorrections *G__Lderived;
     G__Lderived=(HMdcTrackGCorrections*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGSpline))) {
     HMdcTrackGSpline *G__Lderived;
     G__Lderived=(HMdcTrackGSpline*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGSpline),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGSpline),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar))) {
     HMdcTrackGFieldPar *G__Lderived;
     G__Lderived=(HMdcTrackGFieldPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrPar))) {
     HMdcTrackGCorrPar *G__Lderived;
     G__Lderived=(HMdcTrackGCorrPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGContFact))) {
     HMdcTrackGContFact *G__Lderived;
     G__Lderived=(HMdcTrackGContFact*)0x1000;
     {
       HContFact *G__Lpbase=(HContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGContFact),G__get_linked_tagnum(&G__MdcTrackGDictLN_HContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGContFact),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGContFact),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HBaseTrack))) {
     HBaseTrack *G__Lderived;
     G__Lderived=(HBaseTrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HBaseTrack),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2))) {
     HMetaMatch2 *G__Lderived;
     G__Lderived=(HMetaMatch2*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchPar))) {
     HMetaMatchPar *G__Lderived;
     G__Lderived=(HMetaMatchPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchF2))) {
     HMetaMatchF2 *G__Lderived;
     G__Lderived=(HMetaMatchF2*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrack))) {
     HSplineTrack *G__Lderived;
     G__Lderived=(HSplineTrack*)0x1000;
     {
       HBaseTrack *G__Lpbase=(HBaseTrack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrack),G__get_linked_tagnum(&G__MdcTrackGDictLN_HBaseTrack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrack),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplinePar))) {
     HSplinePar *G__Lderived;
     G__Lderived=(HSplinePar*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplinePar),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrackF2))) {
     HSplineTrackF2 *G__Lderived;
     G__Lderived=(HSplineTrackF2*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrackF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrackF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrackF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrackF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackB))) {
     HRKTrackB *G__Lderived;
     G__Lderived=(HRKTrackB*)0x1000;
     {
       HBaseTrack *G__Lpbase=(HBaseTrack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackB),G__get_linked_tagnum(&G__MdcTrackGDictLN_HBaseTrack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackB),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackBF2))) {
     HRKTrackBF2 *G__Lderived;
     G__Lderived=(HRKTrackBF2*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackBF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackBF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackBF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackBF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTaskSet))) {
     HSplineTaskSet *G__Lderived;
     G__Lderived=(HSplineTaskSet*)0x1000;
     {
       HTaskSet *G__Lpbase=(HTaskSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTaskSet),G__get_linked_tagnum(&G__MdcTrackGDictLN_HTaskSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTaskSet),G__get_linked_tagnum(&G__MdcTrackGDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTaskSet),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTaskSet),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTofClF2))) {
     HSplineTofClF2 *G__Lderived;
     G__Lderived=(HSplineTofClF2*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTofClF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTofClF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTofClF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTofClF2),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HEnergyLossCorrPar))) {
     HEnergyLossCorrPar *G__Lderived;
     G__Lderived=(HEnergyLossCorrPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HEnergyLossCorrPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HEnergyLossCorrPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HEnergyLossCorrPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HEnergyLossCorrPar),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HLvl1EvtFilter))) {
     HLvl1EvtFilter *G__Lderived;
     G__Lderived=(HLvl1EvtFilter*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HLvl1EvtFilter),G__get_linked_tagnum(&G__MdcTrackGDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HLvl1EvtFilter),G__get_linked_tagnum(&G__MdcTrackGDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HLvl1EvtFilter),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HLvl1EvtFilter),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcTrackGDictLN_HTimeLvl1EvtFilter))) {
     HTimeLvl1EvtFilter *G__Lderived;
     G__Lderived=(HTimeLvl1EvtFilter*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HTimeLvl1EvtFilter),G__get_linked_tagnum(&G__MdcTrackGDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HTimeLvl1EvtFilter),G__get_linked_tagnum(&G__MdcTrackGDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HTimeLvl1EvtFilter),G__get_linked_tagnum(&G__MdcTrackGDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HTimeLvl1EvtFilter),G__get_linked_tagnum(&G__MdcTrackGDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMdcTrackGDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcTrackGDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcTrackGDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcTrackGDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcTrackGDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__MdcTrackGDictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HMdcTrackGField */
static void G__setup_memvarHMdcTrackGField(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGField));
   { HMdcTrackGField *p; p=(HMdcTrackGField*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nfz)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nfz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nfr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nfr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nfp)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nfp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zflmin)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"zflmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zflmax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"zflmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zfldel)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"zfldel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rflmin)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"rflmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rflmax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"rflmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rfldel)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"rfldel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pflmin)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pflmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pflmax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pflmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfldel)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pfldel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p_tzfl)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"p_tzfl=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p_trfl)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"p_trfl=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p_tpfl)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"p_tpfl=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->acos_table)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"acos_table=",0,"!");
   G__memvar_setup((void*)((long)(&p->Pvector)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Pvector[3]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Fvector)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Fvector[3]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->step1z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"step1z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->step1r)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"step1r=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->step1p)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"step1p=",0,"!");
   G__memvar_setup((void*)((long)(&p->dconv)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dconv=",0,"!");
   G__memvar_setup((void*)((long)(&p->nfz_nfr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nfz_nfr=",0,"!");
   G__memvar_setup((void*)((long)(&p->one_sixtyth)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"one_sixtyth=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackGCorrections */
static void G__setup_memvarHMdcTrackGCorrections(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections));
   { HMdcTrackGCorrections *p; p=(HMdcTrackGCorrections*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"phiI[16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tetaI[34]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"precI[60]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"corrE[34][16][60]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"corrP[34][16][60]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"corrE1[34][16][60]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"corrP1[34][16][60]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackGSpline */
static void G__setup_memvarHMdcTrackGSpline(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGSpline));
   { HMdcTrackGSpline *p; p=(HMdcTrackGSpline*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"pi=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"XX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"YY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ZZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"XXdir=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"YYdir=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ZZdir=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"distfield=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"errorY=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"polarity=",0,"polarity of particle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"target=",0,"targets z position in mm");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"A1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"B1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"D1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"A2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"B2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"D2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"A3=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"B3=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"D3=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"A4=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"B4=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"D4=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"N=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"N1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"N2=",0,"number of points in the field region");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"equationXY=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"x=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"Bx=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"By=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"Bz=",0,"Field components");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"teta=",0,"in radian");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"XZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"YZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"XZP=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"YZP=",0,"parameters of spline fit");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"FXZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"FYZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"FXZP=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"FYZP=",0,"parameters of spline fit");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"dydz=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"dxdz=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"d2ydz=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"d2xdz=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"curv=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"x2=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"zz2=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"z2=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"y2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"precon=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"preconErr=",0,"reconstructed momentum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"precon111=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"dist=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"metaDistance=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"tetadig=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"phidig=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"phidigg=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"teta2dig=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"phi2dig=",0,"in degrees");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGField),-1,-1,4,"b=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcKickPlane),-1,-1,4,"kickplane=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections),-1,-1,4,"c=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections),-1,-1,4,"corrScan[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"point=",0,"Intitial points from MDC's");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"fieldpoints=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"secDer=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"Tfieldpoints=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"BB=",0,"points selected in field region");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"field=",0,"field components ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fScal=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isInitialized=",0,"! if middle Plane params have been set =kTRUE");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isKickIsInitialized=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"qSpline=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"middleA=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"middleB=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"middleD=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"middleA4=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"middleB4=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"middleD4=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"SegmentPoints=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zGlobal=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isSecDerY=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"geomParams[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"middleGA[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"middleGB[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"middleGD[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackGFieldPar */
static void G__setup_memvarHMdcTrackGFieldPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar));
   { HMdcTrackGFieldPar *p; p=(HMdcTrackGFieldPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGField),-1,-1,2,"field=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackGCorrPar */
static void G__setup_memvarHMdcTrackGCorrPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrPar));
   { HMdcTrackGCorrPar *p; p=(HMdcTrackGCorrPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"doCorrections=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections),-1,-1,2,"corr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections),-1,-1,2,"corr1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections),-1,-1,2,"corrScan0=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections),-1,-1,2,"corrScan1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections),-1,-1,2,"corrScan2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGSpline),-1,-1,2,"spline=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar),-1,-1,2,"fieldmap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackGContFact */
static void G__setup_memvarHMdcTrackGContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGContFact));
   { HMdcTrackGContFact *p; p=(HMdcTrackGContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HBaseTrack */
static void G__setup_memvarHBaseTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HBaseTrack));
   { HBaseTrack *p; p=(HBaseTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"z=",0,"From HMdcSeg               (in Lab.?)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"r=",0,"From HMdcSeg");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"theta=",0,"From HMdcSeg");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phi=",0,"From HMdcSeg");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"tofHitInd=",0,"Index of HTofHit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"tofClustInd=",0,"Index of HTofCluster");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"showerHitInd=",0,"Index of HShowerHitTof");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"rpcClustInd=",0,"Index of HRpcCluster");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"p=",0,"Momentum of particle");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"beta=",0,"speed of paricle");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"mass2=",0,"mass squared");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tof=",0,"time of flight");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"polarity=",0,"polarity (+1 or -1)");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"sector=",0,"Sector number");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSymMat6),-1,-1,2,"cov=",0,"covariance matrix of size 6");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"metaEloss=",0,"corrected energy loss in TOF or TOFINO");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tarDist=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"tofdist=",0,"Track length from Target-to-META detector");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"qIOMatch=",0,"Matching quality if inner and outer segments");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMetaMatch2 */
static void G__setup_memvarHMetaMatch2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2));
   { HMetaMatch2 *p; p=(HMetaMatch2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"trkCandInd=",0,"index of HTrkCand object");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ownIndex=",0,"index of \"this\" object in categoty");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"sector=",0,"sector number");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"nRpcClust=",0,"Number of matched rpc clusters");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"nShrHits=",0,"Number of matched shower hits");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"nTofHits=",0,"Number of matched tof clusters or hits");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"rungeKuttaInd=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"rkIndShower[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"rkIndTofCl[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"rkIndTof1[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"rkIndTof2[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"rkIndRpc[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"kalmanFilterInd=",0,"index of HKalTrack in catKalTrack");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"kfIndShower[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"kfIndTofCl[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"kfIndTof1[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"kfIndTof2[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"kfIndRpc[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"rpcClstInd[3]=",0,"Index of HRpcCluster object");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"shrHitInd[3]=",0,"Index of HShowerHit object");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"tofClstInd[3]=",0,"Index of HTofCluster object");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"tofHit1Ind[3]=",0,"Index of HTofHit object  ???");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"tofHit2Ind[3]=",0,"Index of HTofHit object  ???");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"rpcQuality[3]=",0,"Matching quality");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"rpcDX[3]=",0,"Deviation in X-coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"rpcDY[3]=",0,"Deviation in Y-coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"shrQuality[3]=",0,"Matching quality");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"shrDX[3]=",0,"Deviation in X-coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"shrDY[3]=",0,"Deviation in Y-coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tofClstQuality[3]=",0,"Matching quality");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tofClstDX[3]=",0,"Deviation in X-coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tofClstDY[3]=",0,"Deviation in Y-coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tofHit1Quality[3]=",0,"Matching quality");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tofHit1DX[3]=",0,"Deviation in X-coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tofHit1DY[3]=",0,"Deviation in Y-coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tofHit2Quality[3]=",0,"Matching quality");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tofHit2DX[3]=",0,"Deviation in X-coordinate");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tofHit2DY[3]=",0,"Deviation in Y-coordinate");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"splineInd=",0,"index of HSplineTrack object");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"nRichId=",0,"number of matched rings in richInd[]");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"nRichIPUId=",0,"number of matched rings in richIPUInd[]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"richInd[3]=",0,"arr.of indexes of HRichHit objects");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"richIPUInd[3]=",0,"arr.of indexes of HRichHitIPU objects");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"flag=",0,"User flags bit array (8 flags, one bit / flag)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isFakeInner=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isFakeOuter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMetaMatchPar */
static void G__setup_memvarHMetaMatchPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchPar));
   { HMetaMatchPar *p; p=(HMetaMatchPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"richThetaMinCut=",0,"lower limit of delta theta cut in RICH MDC matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"richThetaMaxCut=",0,"upper limit of delta theta cut in RICH MDC matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"richSigmaPhi=",0,"sigma phi of RICH MDC matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"richSigmaPhiOffset=",0,"phi-offset for sigma in RICH MDC matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"richQualityCut=",0,"cut for quality RICH MDC matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"richIPUThetaMinCut=",0,"lower limit of delta theta cut in RICHIPU MDC matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"richIPUThetaMaxCut=",0,"upper limit of delta theta cut in RICHIPU MDC matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"richIPUSigmaPhi=",0,"sigma phi of RICHIPU MDC matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"richIPUSigmaPhiOffset=",0,"phi-offset for sigma in RICHIPU MDC matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"richIPUQualityCut=",0,"cut for quality RICHIPU MDC matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"showerSigmaXMdc=",0,"sigma of MDC segment cross point of SHOWER");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"showerSigmaYMdc=",0,"sigma of MDC segment cross point of SHOWER");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"showerSigmaXOffset=",0,"x-offset for sigma in MDC SHOWER matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"showerSigmaYOffset=",0,"y-offset for sigma in MDC SHOWER matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"showerQualityCut=",0,"cut for quality of MDC SHOWER matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"tofSigmaX=",0,"sigma (x-dir) of MDC TOF matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"tofSigmaY=",0,"sigma (y-dir) of MDC TOF matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"tofSigmaXOffset=",0,"x-offset for sigma in MDC TOF matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"tofSigmaYOffset=",0,"y-offset for sigma in MDC TOF matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"tofQualityCut=",0,"cut for quality of MDC TOF matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"rpcSigmaXMdc=",0,"sigma of MDC segment cross point of rpc");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"rpcSigmaYMdc=",0,"sigma of MDC segment cross point of rpc");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"rpcSigmaXOffset=",0,"x-offset for sigma in MDC rpc matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"rpcSigmaYOffset=",0,"y-offset for sigma in MDC rpc matching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TArrayF),-1,-1,2,"rpcQualityCut=",0,"cut for quality of MDC rpc matching");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMetaMatchF2 */
static void G__setup_memvarHMetaMatchF2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchF2));
   { HMetaMatchF2 *p; p=(HMetaMatchF2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcSizesCells),-1,-1,4,"pSizesCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchPar),-1,-1,4,"fMatchPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"invSigma2TofX[6]=",0,"[6] - for 6 sectors");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"invSigma2TofY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sTofX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sTofY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"quality2TOFCut[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2MdcInRpcX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2MdcInRpcY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2MdcInShrX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2MdcInShrY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sShowerX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sShowerY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sRpcX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sRpcY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"quality2RPCCut[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"quality2SHOWERCut[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dThRich[6]=",0,"matching window for 6 sectors");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dPhRich[6]=",0,"...");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dPhRichOff[6]=",0,"...");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qualityRichCut[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"richThetaMinCut[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"richThetaMaxCut[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomTransform),-1,-1,4,"labTrans[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcGetContainers),-1,-1,4,"fGetCont=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2),-1,-1,4,"meta=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatTrkCand=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatMetaMatch=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatMdcSeg=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatTofCluster=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatShower=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatRich=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatRpcCluster=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcKickPlane),-1,-1,4,"kickplane=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGSpline),-1,-1,4,"pSpline=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HIterator),-1,-1,4,"fTrkCandIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HIterator),-1,-1,4,"iterTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HIterator),-1,-1,4,"iterTofCluster=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HIterator),-1,-1,4,"iterShower=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HIterator),-1,-1,4,"iterRich=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HIterator),-1,-1,4,"iterRpcCluster=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HLocation),-1,-1,4,"sectorLoc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HTofGeomPar),-1,-1,4,"fTofGeometry=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HShowerGeometry),-1,-1,4,"fShrGeometry=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HRpcGeomPar),-1,-1,4,"fRpcGeometry=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nRpcClusters[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HRpcCluster),-1,-1,4,"fRpcClusters[6][200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nShowerHits[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HShowerHit),-1,-1,4,"fShowerHits[6][200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"indexShrHit[6][200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nTofHits[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"tofHits[6][100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"tofModule[6][100]=",0,"Tof module of hit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"indexTofHit[6][100]=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"tofClustSize[6][100]=",0,"0 - HTofHit obj., >=1 - HTofCluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcSeg),-1,-1,4,"segments[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"mdcTrackPar[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"nTofMatched=",0,"Number of matched tof hits/clusters");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qual2TofBestAr[5]=",0,"Array of best quality of cluster,hit1 and hit2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qual2TofAr[5][9]=",0,"Matchung quality^2,dx,dx of clust.,hit1 and hit2");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"tofInd[5][3]=",0,"[][0]-HTofCluster index, [][1,2]-HTofHit index");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"nShrMatched=",0,"Number of matched shower hits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qual2ShrAr[5][3]=",0,"[][0]-quality^2,[][1]-dx,[][2]-dy");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"shrInd[5]=",0,"HShowerHit indexis");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"nRpcMatched=",0,"Number of matched rpc clusters");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qual2RpcAr[5][3]=",0,"[?][0]-quality^2,[?][1]-dx,[?][2]-dy");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"rpcInd[5]=",0,"HRpcCluster indexis");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"nRichId=",0,"Number of matched HRichHit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"richInd[3]=",0,"indexis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qualRich[3]=",0,"Matching quality");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"sector=",0,"current sector                           ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nShowerHitsSec=",0,"== nShowerHits[sec] for current sector");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HShowerHit),-1,-1,4,"fShowerHitsSec=",0,"...");
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,4,"indexShrHitSec=",0,"...");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nRpcClustersSec=",0,"== nRpcClusters[sec] for current sector");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HRpcCluster),-1,-1,4,"fRpcClustersSec=",0,"...");
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,4,"indexRpcClustersSec=",0,"...");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"p1SegInMod=",0,"Segment point 1 in rpc or shower module coor.sys.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"p2SegInMod=",0,"Segment point 2 in rpc or shower module coor.sys.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"invDZ=",0,"= 1./(p1SegInMod.Z()-p2SegInMod.Z())");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nTofHitsSec=",0,"== nTofHits[sec] for current sector    ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"tofHitsSec=",0,"...");
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,4,"indexTofHitSec=",0,"...");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,4,"tofClustSizeSec=",0,"...");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,4,"tofModuleSec=",0,"...");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomTransform),-1,-1,4,"secLabTrans=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isPrint=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dX=",0,"Matching current deviation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dY=",0,"Current va");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qual2TofC[9]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"indTofC[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"scaleRpcRMS[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"scaleShowerRMS[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"scaleTofRMS[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"scaleRpcCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"scaleShowerCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"scaleTofCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"stNotMatTracks=",0,"kTRUE - store not matched tracks in cat.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSplineTrack */
static void G__setup_memvarHSplineTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrack));
   { HSplineTrack *p; p=(HSplineTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qSpline=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"numOfChambers=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSplinePar */
static void G__setup_memvarHSplinePar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplinePar));
   { HSplinePar *p; p=(HSplinePar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xPoints[52]=",0,"x coordinate of the points used in spline");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"yPoints[52]=",0,"y coordinate of the points used in spline");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zPoints[52]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSplineTrackF2 */
static void G__setup_memvarHSplineTrackF2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrackF2));
   { HSplineTrackF2 *p; p=(HSplineTrackF2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"pointMeta=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomTransform),-1,-1,4,"tRans[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcSizesCells),-1,-1,4,"pSizesCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qIOMatching=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HEventHeader),-1,-1,4,"evHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tarDist=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"target=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"distanceTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"yTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"C=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"system=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"outerHitInd=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"indTrkCand=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"index1=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"index2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tof=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"mass2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"beta=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"TOFdistance=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcGetContainers),-1,-1,4,"fGetCont=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcSeg),-1,-1,4,"segments[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HRpcCluster),-1,-1,4,"pRpc=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"polarity=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"dist=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"IndTrkCand=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"tofClSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"metaInd=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrack),-1,-1,4,"sp=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatMdcTrkCand=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatSplineTrack=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatSplinePar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatMdcSegSim=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatTofCluster=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2),-1,-1,4,"pMetaMatch=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrkCand),-1,-1,4,"pMdcTrkCand=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatRpcCluster=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatShowerHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatMetaMatch=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcGeomPar),-1,-1,4,"fMdcGeometry=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSpecGeomPar),-1,-1,4,"fSpecGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HTofHit),-1,-1,4,"pTofHit[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HShowerHit),-1,-1,4,"pShowerHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGSpline),-1,-1,4,"Spline=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HIterator),-1,-1,4,"fMetaMatchIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HIterator),-1,-1,4,"IterTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HIterator),-1,-1,4,"IterShower=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar),-1,-1,4,"field=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrPar),-1,-1,4,"corr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMagnetPar),-1,-1,4,"pMagnet=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Momentum=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"errP=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"errMass2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HLocation),-1,-1,4,"sectorloc=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"firstCandIndex=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fScal=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qSpline=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"numChambers=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isSplinePar=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xPoints[52]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"yPoints[52]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zPoints[52]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->indRpc)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"indRpc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->indTof)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"indTof[3]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->indShower)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"indShower=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRungeKutta */
static void G__setup_memvarHRungeKutta(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HRungeKutta));
   { HRungeKutta *p; p=(HRungeKutta*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGField),-1,-1,4,"fieldMap=",0,"pointer to field map");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fieldScalFact=",0,"factor of the magnetic field strength");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"mdcInstalled[4][6]=",0,"remembers which MDCs have known geometry");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"mdcPos[4][6][3]=",0,"real position of mdc's in sector coordinate system");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"normVecMdc[4][6][3]=",0,"normal vector on each Mdc module in sector coordinate system");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"pointForVertexRec[6][3]=",0,"point on virtual plane in front of MDC1 used for vertex reconstruction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"dzfacMdc[2][6]=",0,"factor to calculate dz from dy in the first two MDC planes");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"p0Guess=",0,"initial momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"initialStepSize=",0,"initial RK step size");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"stepSizeInc=",0,"factor to increase stepsize");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"stepSizeDec=",0,"factor to decrease stepsize");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"maxStepSize=",0,"maximum stepsize");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"minStepSize=",0,"minimum stepsize");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"minPrecision=",0,"minimum required precision for a single step");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"maxPrecision=",0,"maximum required precision for a single step");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"maxNumSteps=",0,"maximum number of steps");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"maxDist=",0,"maximum distance for straight line approximation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"pfit=",0,"momentum after RK-fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"chi2=",0,"normalized chi^2 after RK-fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"trackLength=",0,"track length");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dpar[5]=",0,"variations (momentum, xdir, ydir, xpos, ypos)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"resolution[8]=",0,"resolution");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sig[8]=",0,"sigmas for hit points");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"hit[4][3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fit[4][3]=",0,"hits and fitted points at mdc's");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fitdp[4][3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fitdh[4][3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fitdv[4][3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fit1h[4][3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fit1v[4][3]=",0,"fitted positions for derivatives");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"mdcModules[4]=",0,"module number in hit/fit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"mdcLookup[4]=",0,"index in mdcModules for all 4 modules");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"dydpar[5][8]=",0,"derivatives");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ydata[8]=",0,"difference between fitted and measured hit positions");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fitpar[5]=",0,"fit parameters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ndf=",0,"number of degrees of freedom");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nMaxMod=",0,"maximum hit module number (3 or 4)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"sector=",0,"sector index");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"dirAtFirstMDC[3]=",0,"fitted direction at first MDC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"posNearLastMDC[3]=",0,"fitted direction at last MDC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"dirAtLastMDC[3]=",0,"fitted direction at last MDC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"stepSizeAtLastMDC=",0,"RK step size at last MDC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"trackLengthAtLastMDC=",0,"track length from target to last MDC");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"trackPosOnMETA[3]=",0,"fitted trajectory point on META");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"jstep=",0,"step number");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zSeg1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"rSeg1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"thetaSeg1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"phiSeg1=",0,"fitted data for inner segment");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"zSeg2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"rSeg2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"thetaSeg2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"phiSeg2=",0,"fitted data for outer segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"polbending=",0,"polarity of bending (field scaling factor * pfit)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"mTol=",0,"! tolerance for invertion of matrix (default : DBL_EPSILON)");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRKTrackB */
static void G__setup_memvarHRKTrackB(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackB));
   { HRKTrackB *p; p=(HRKTrackB*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"chiq=",0,"Quality of Runge-Kutta track propagation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zSeg1RK=",0,"z of inner segment from Runge Kutta fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"rSeg1RK=",0,"r of inner segment from Runge Kutta fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"thetaSeg1RK=",0,"theta of inner segment from Runge Kutta fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"phiSeg1RK=",0,"phi of inner segment from Runge Kutta fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zSeg2RK=",0,"z of outer segment from Runge Kutta fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"rSeg2RK=",0,"r of outer segment from Runge Kutta fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"thetaSeg2RK=",0,"theta of outer segment from Runge Kutta fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"phiSeg2RK=",0,"phi of outer segment from Runge Kutta fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dxRkMeta=",0,"x_RK_intersectionPointOnMeta - x_MetaHit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dyRkMeta=",0,"y_RK_intersectionPointOnMeta - y_MetaHit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dzRkMeta=",0,"z_RK_intersectionPointOnMeta - z_MetaHit)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qualityRpc=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qualityShower=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qualityTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRKTrackBF2 */
static void G__setup_memvarHRKTrackBF2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackBF2));
   { HRKTrackBF2 *p; p=(HRKTrackBF2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fieldFactor=",0,"field scaling factor");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"mode=",0,"mode = {0 || 2} for initial momentum as {selfGuess, SplineTrack-Guess}");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomTransform),-1,-1,4,"secTrans[6]=",0,"sector transformation, used to transform META point to MdcSegment-ccord-system");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomTransform),-1,-1,4,"showerSM[6]=",0,"trans shower, modtosec");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomTransform),-1,-1,4,"tofSM[6][8]=",0,"trans tof,  modtosec");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomTransform),-1,-1,4,"rpcSM[6]=",0,"trans rpc,  modtosec");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomTransform),-1,-1,4,"transMetaSM=",0,"trans meta, modtosec");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2TofX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2TofY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sTofX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sTofY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"quality2TOFCut[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2MdcInRpcX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2MdcInRpcY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2MdcInShrX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2MdcInShrY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sShowerX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sShowerY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sRpcX[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sRpcY[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"quality2RPCCut[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"quality2SHOWERCut[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar),-1,-1,4,"field=",0,"field map");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMagnetPar),-1,-1,4,"pMagnet=",0,"parameter container for magnet settings");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSpecGeomPar),-1,-1,4,"fSpecGeomPar=",0,"sector and target geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcGetContainers),-1,-1,4,"fGetCont=",0,"pointer to HMdcGetContainers object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HTofGeomPar),-1,-1,4,"fTofGeometry=",0,"TOF geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HRpcGeomPar),-1,-1,4,"fRpcGeometry=",0,"Tofino geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HShowerGeometry),-1,-1,4,"fShowerGeometry=",0,"Shower geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcSizesCells),-1,-1,4,"pMSizesCells=",0,"pointer to HMdcSizesCells objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatMetaMatch=",0,"pointer to MetaMatch category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HIterator),-1,-1,4,"fMetaMatchIter=",0,"iterator on the MetaMatch category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2),-1,-1,4,"pMetaMatch=",0,"pointer to the MetaMatch object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchPar),-1,-1,4,"fMatchPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatMdcTrkCand=",0,"pointer to MDC track candidate category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrkCand),-1,-1,4,"pMdcTrkCand=",0,"pointer to the MDC track candidate");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatMdcSeg=",0,"pointer to the MDC segments category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatMdcHit=",0,"pointer to the MDC hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fSplineTrack=",0,"pointer to the Spline track category (for initial momentum guess)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrack),-1,-1,4,"pSplineTrack=",0,"Spline track ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatKine=",0,"pointer to the Kine category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatShower=",0,"pointer to the Shower category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatTof=",0,"pointer to the Tof hit category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HTofHit),-1,-1,4,"pTofHit[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatTofCluster=",0,"pointer to the Tof cluster category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatRpcCluster=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HTofCluster),-1,-1,4,"pTofCluster=",0,"Tof cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatRKTrack=",0,"pointer to the Runge Kutta track category ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HRungeKutta),-1,-1,4,"pRungeKutta=",0,"Runge Kutta track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HLocation),-1,-1,4,"sectorloc=",0,"sector location");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"sector=",0,"sector number (0..5)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"system=",0,"meta detector (0==Tofino, 1==Tof)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcSeg),-1,-1,4,"pMdcSeg1=",0,"pointer to inner segment");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcSeg),-1,-1,4,"pMdcSeg2=",0,"pointer to outer segment");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"mdcInstalled[4][6]=",0,"! remembers which MDCs have known geometry");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"multSig[8]=",0,"multiplicators for resolution");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"vertex[3]=",0,"vertex");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"normVecRpc[6]=",0,"normal vector on the Tofino module in the sector coordinate system");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"centerRpc[6]=",0,"physical center of Tofino module in the sector coordinate system");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"normVecShower[6]=",0,"normal vector on the Shower module in the sector coordinate system");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"normVecTof[6][8]=",0,"normal vector on each Tof module in the sector coordinate system");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"metaNormVec=",0,"normal vector on the meta module in the sector coordinate system");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector),-1,-1,4,"pointMeta=",0,"META hit");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"success=",0,"flag indicating severe problems on input of RK");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"qRK=",0,"polarity");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"pRK=",0,"momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"momentumGuess=",0,"initial value for momentum if supplied");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"chiqRK=",0,"chi2 of Runge Kutta");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"trackLength=",0,"full track length (Target--MDC1--MDC4--META)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tof=",0,"time-of-flight");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"metaeloss=",0,"energy loss from meta detector");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"beta=",0,"beta value");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"mass2=",0,"mass**2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"RKxyzMETA[3]=",0,"META point after RK fitting");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"yTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zMod=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dXrms2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dYrms2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qualityRpc=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qualityShower=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"qualityTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HShowerHit),-1,-1,4,"pShowerHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HRpcCluster),-1,-1,4,"pRpc=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"indRpc=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"indTof[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"indShower=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"indexRK=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSplineTaskSet */
static void G__setup_memvarHSplineTaskSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTaskSet));
   { HSplineTaskSet *p; p=(HSplineTaskSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"isSpline=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"isClustering=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"isRunge=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"isRejectUnMatched=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isSplinePar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSplineTofClF2 */
static void G__setup_memvarHSplineTofClF2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTofClF2));
   { HSplineTofClF2 *p; p=(HSplineTofClF2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ind1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ind2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ind3=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ind4=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"mode=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"step=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"step1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2),-1,-1,4,"pMetaMatch1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2),-1,-1,4,"pMetaMatch2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HIterator),-1,-1,4,"iterMetaMatch1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HIterator),-1,-1,4,"iterMetaMatch2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatMetaMatch=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fCatTrkCand=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEnergyLossCorrPar */
static void G__setup_memvarHEnergyLossCorrPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HEnergyLossCorrPar));
   { HEnergyLossCorrPar *p; p=(HEnergyLossCorrPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nThetaReg=",0,"number of theta regions ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"thetaStep=",0,"size of one theta region, degrees");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"thetaMiddle0=",0,"middle of first theta region, degrees");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"momInt1=",0,"end of first momentum interval, MeV");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"momInt2=",0,"end of second momentum interval, MeV");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nParams=",0,"number of parameters for one theta region");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"parMomCorrH[264]=",0,"parameters. Size=nThetaReg*nParams");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"typePar=",0,"type of parametrisation ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nParamsElect=",0,"number of parameters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"parMomCorrElect[7]=",0,"parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HEnergyLossCorrPar),-1,-2,2,"gEnergyLossCorrPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HLvl1EvtFilter */
static void G__setup_memvarHLvl1EvtFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HLvl1EvtFilter));
   { HLvl1EvtFilter *p; p=(HLvl1EvtFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fTofRaw=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HIterator),-1,-1,4,"fTofIter=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nCntProcessedEvents=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nCounterNbRejectedEvts=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"kOpSec=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isSimulation=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nMetaMult=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nTofinoMult=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nTofMult=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTimeLvl1EvtFilter */
static void G__setup_memvarHTimeLvl1EvtFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HTimeLvl1EvtFilter));
   { HTimeLvl1EvtFilter *p; p=(HTimeLvl1EvtFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory),-1,-1,4,"fTofHits=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_HIterator),-1,-1,4,"fTofIter=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nCntProcessedEvents=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nCounterNbRejectedEvts=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nMult=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMultSmearing=",0,"smearing in multiplicity due to analogue summing");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nFilter=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcTrackGDictLN_TString),-1,-1,4,"filterOption=",0,"!");
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMdcTrackGDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHMdcTrackGField(void) {
   /* HMdcTrackGField */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGField));
   G__memfunc_setup("HMdcTrackGField",1404,G__MdcTrackGDict_184_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGField), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' name C - 'Char_t' 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__MdcTrackGDict_184_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - infile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackGDict_184_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcField",887,G__MdcTrackGDict_184_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - xv D - 'Double_t' 0 - btos "
"d - 'Double_t' 0 - fpol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_184_0_5, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackGField::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_184_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGField::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_184_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackGField::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_184_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackGField::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_184_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_184_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGField::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_184_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackGField::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_184_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGField::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_184_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackGField::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackGField", 1404, G__MdcTrackGDict_184_0_17, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGField), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackGField' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackGField", 1530, G__MdcTrackGDict_184_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackGDict_184_0_19, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGField), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackGField' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackGCorrections(void) {
   /* HMdcTrackGCorrections */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections));
   G__memfunc_setup("HMdcTrackGCorrections",2083,G__MdcTrackGDict_185_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' name C - 'Char_t' 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTrackGCorrections",2083,G__MdcTrackGDict_185_0_2, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackGCorrections' - 1 - corr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__MdcTrackGDict_185_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - - u 'TString' - 0 - - "
"u 'TString' - 0 - - u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackGDict_185_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiI",682,G__MdcTrackGDict_185_0_5, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaI",895,G__MdcTrackGDict_185_0_6, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPrecI",787,G__MdcTrackGDict_185_0_7, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrE",795,G__MdcTrackGDict_185_0_8, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j "
"i - 'Int_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrP",806,G__MdcTrackGDict_185_0_9, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j "
"i - 'Int_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrE1",844,G__MdcTrackGDict_185_0_10, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j "
"i - 'Int_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrP1",855,G__MdcTrackGDict_185_0_11, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j "
"i - 'Int_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_185_0_12, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackGCorrections::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_185_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGCorrections::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_185_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackGCorrections::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_185_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackGCorrections::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_185_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_185_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGCorrections::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_185_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackGCorrections::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_185_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGCorrections::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_185_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackGCorrections::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackGCorrections", 2209, G__MdcTrackGDict_185_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackGDict_185_0_25, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackGCorrections' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackGSpline(void) {
   /* HMdcTrackGSpline */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGSpline));
   G__memfunc_setup("getPoint",842,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transteta",982,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transPhi",841,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init1",485,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getpoints",989,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fieldequation",1386,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("solveMomentum",1403,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMomentum",1170,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"g - 'Bool_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transFieldpoints",1705,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getcorrE",827,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - d - 'Double_t' 1 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getcorrP",838,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - d - 'Double_t' 1 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initParams",1048,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearParams",1131,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove",654,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove",654,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcErrors",1040,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcIOMatching",1366,G__MdcTrackGDict_186_0_17, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "U 'HMdcSeg' - 2 - segments", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkSecDer",1076,G__MdcTrackGDict_186_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXYpoint",1051,G__MdcTrackGDict_186_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 0 - - F - 'Float_t' 0 - - "
"F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getField",804,G__MdcTrackGDict_186_0_20, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 0 - - F - 'Float_t' 0 - - "
"F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SplineMinimize",1453,G__MdcTrackGDict_186_0_21, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"U 'HGeomVector' - 0 - - U 'HGeomVector' - 0 - - "
"i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SolveDiffEquation",1736,G__MdcTrackGDict_186_0_22, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'HGeomVector' - 0 - - U 'HGeomVector' - 0 - - "
"i - 'Int_t' 0 - - F - 'Float_t' 0 - - "
"F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("det3",368,G__MdcTrackGDict_186_0_23, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "D - 'Double_t' 2 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("spline",651,G__MdcTrackGDict_186_0_24, 121, -1, -1, 0, 6, 1, 1, 0, 
"U 'HGeomVector' - 0 - - D - 'Double_t' 0 - - "
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"D - 'Double_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTarDist",1102,G__MdcTrackGDict_186_0_25, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"u 'HVertex' - 1 - - U 'HMdcSeg' - 0 - SEG "
"U 'HGeomTransform' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcTarDist",1102,G__MdcTrackGDict_186_0_26, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"u 'HGeomVector' - 1 - - u 'HGeomVector' - 1 - - "
"u 'HGeomVector' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSegmentPoints",1680,G__MdcTrackGDict_186_0_27, 117, G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFieldDistance",1615,G__MdcTrackGDict_186_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getqSpline",1052,G__MdcTrackGDict_186_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrP",697,G__MdcTrackGDict_186_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSegPoints",1327,G__MdcTrackGDict_186_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcSeg' - 2 - seg U 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSegPoints",1327,G__MdcTrackGDict_186_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HGeomVector' - 0 - - U 'HMdcSeg' - 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mixPoints",971,G__MdcTrackGDict_186_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HGeomVector' - 1 - - u 'HGeomVector' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSegPoints123",1477,G__MdcTrackGDict_186_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcSeg' - 2 - seg U 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSegPoints123P4",1609,G__MdcTrackGDict_186_0_35, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcSeg' - 2 - seg U 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPolarity",1172,G__MdcTrackGDict_186_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMagnetScaling",1641,G__MdcTrackGDict_186_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - FScal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("equationofLine",1475,G__MdcTrackGDict_186_0_38, 121, -1, -1, 0, 4, 1, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("equationofLine3D",1594,G__MdcTrackGDict_186_0_39, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'HGeomVector' - 0 - - u 'HGeomVector' - 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMetaDir",1081,G__MdcTrackGDict_186_0_40, 117, G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector), -1, 0, 2, 1, 1, 0, 
"U 'HMdcSeg' - 0 - - u 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcKickIntersection",2060,G__MdcTrackGDict_186_0_41, 117, G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector), -1, 0, 1, 1, 1, 0, "U 'HMdcSeg' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcKickIntersectionErr",2357,G__MdcTrackGDict_186_0_42, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HMdcSeg' - 0 - - u 'HGeomVector' - 1 - - "
"u 'HGeomVector' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistField",1208,G__MdcTrackGDict_186_0_43, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPointOne",1132,G__MdcTrackGDict_186_0_44, 117, G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcInter",917,G__MdcTrackGDict_186_0_45, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - u 'HGeomVector' - 0 - - "
"u 'HGeomVector' - 0 - - u 'HGeomVector' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTrackGSpline",1539,G__MdcTrackGDict_186_0_46, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGSpline), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"Spline\"' name C - 'Char_t' 10 '\"Spline\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDataPointer",1447,G__MdcTrackGDict_186_0_47, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcTrackGField' - 0 '0' field U 'HMdcTrackGCorrections' - 0 '0' corr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCorrScan",1127,G__MdcTrackGDict_186_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcTrackGCorrections' - 2 - corr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setF",402,G__MdcTrackGDict_186_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcTrackGField' - 0 - field", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCorrPointer",1475,G__MdcTrackGDict_186_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcTrackGCorrections' - 0 '0' corr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setKickPointer",1455,G__MdcTrackGDict_186_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcKickPlane' - 0 '0' kickpointer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMomentum",1253,G__MdcTrackGDict_186_0_52, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"U 'HGeomVector' - 0 - - g - 'Bool_t' 0 'kTRUE' cond "
"d - 'Double_t' 0 '0.' targetz i - 'Int_t' 0 '4' nch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMomentum",1253,G__MdcTrackGDict_186_0_53, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"U 'HMdcSeg' - 2 - seg g - 'Bool_t' 0 'kTRUE' cond "
"d - 'Double_t' 0 '0.' targetz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMomentum123",1403,G__MdcTrackGDict_186_0_54, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"U 'HMdcSeg' - 2 - seg g - 'Bool_t' 0 'kTRUE' cond "
"d - 'Double_t' 0 '0.' targetz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMomentum123P4",1535,G__MdcTrackGDict_186_0_55, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"U 'HMdcSeg' - 2 - seg g - 'Bool_t' 0 'kTRUE' cond "
"d - 'Double_t' 0 '0.' targetz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistance",1131,G__MdcTrackGDict_186_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaDistance",1522,G__MdcTrackGDict_186_0_57, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transSpline",1171,G__MdcTrackGDict_186_0_58, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"u 'HGeomVector' - 1 - - u 'HGeomVector' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transSplineB",1237,G__MdcTrackGDict_186_0_59, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"u 'HGeomVector' - 1 - - u 'HGeomVector' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transSplineLocal",1662,G__MdcTrackGDict_186_0_60, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"u 'HGeomVector' - 1 - in u 'HGeomVector' - 1 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scanCorrections",1584,G__MdcTrackGDict_186_0_61, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initPlanes",1047,G__MdcTrackGDict_186_0_62, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZGlobal",1015,G__MdcTrackGDict_186_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - _zGlobal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initMiddleParams",1639,G__MdcTrackGDict_186_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initMiddleParamsP4",1771,G__MdcTrackGDict_186_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("takeMiddleParams",1624,G__MdcTrackGDict_186_0_66, 117, G__get_linked_tagnum(&G__MdcTrackGDictLN_HGeomVector), -1, 0, 3, 1, 1, 0, 
"U 'HMdcGetContainers' - 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("takeMiddleParams",1624,G__MdcTrackGDict_186_0_67, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"U 'HGeomTransform' - 10 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initMiddleParamsAll",1920,G__MdcTrackGDict_186_0_68, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splineIsInitialized",1981,G__MdcTrackGDict_186_0_69, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splineKickIsInitialized",2367,G__MdcTrackGDict_186_0_70, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_186_0_71, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackGSpline::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_186_0_72, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGSpline::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_186_0_73, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackGSpline::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_186_0_74, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackGSpline::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_186_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_186_0_79, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGSpline::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_186_0_80, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackGSpline::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_186_0_81, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGSpline::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_186_0_82, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackGSpline::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackGSpline", 1539, G__MdcTrackGDict_186_0_83, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGSpline), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackGSpline' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackGSpline", 1665, G__MdcTrackGDict_186_0_84, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackGDict_186_0_85, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGSpline), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackGSpline' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackGFieldPar(void) {
   /* HMdcTrackGFieldPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar));
   G__memfunc_setup("HMdcTrackGFieldPar",1695,G__MdcTrackGDict_206_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcTrackGFieldPar\"' name C - 'Char_t' 10 '\"Fieldmap\"' title "
"C - 'Char_t' 10 '\"MdcTrackGFieldParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", "{return kTRUE;}", (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initFieldMap",1206,G__MdcTrackGDict_206_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcField",887,G__MdcTrackGDict_206_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPointer",1057,G__MdcTrackGDict_206_0_7, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_206_0_8, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackGFieldPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_206_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGFieldPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_206_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackGFieldPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_206_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackGFieldPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_206_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_206_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGFieldPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_206_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackGFieldPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_206_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGFieldPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_206_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackGFieldPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackGFieldPar", 1695, G__MdcTrackGDict_206_0_20, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackGFieldPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackGFieldPar", 1821, G__MdcTrackGDict_206_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackGDict_206_0_22, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGFieldPar), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackGFieldPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackGCorrPar(void) {
   /* HMdcTrackGCorrPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrPar));
   G__memfunc_setup("HMdcTrackGCorrPar",1617,G__MdcTrackGDict_208_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"MdcTrackGCorrPar\"' name C - 'Char_t' 10 '\"Correction parameters for Spline fitting\"' title "
"C - 'Char_t' 10 '\"MdcTrackGCorrParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", "{return kTRUE;}", (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setCorrectionFlag",1758,G__MdcTrackGDict_208_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrectionFlag",1746,G__MdcTrackGDict_208_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCorrections",1599,G__MdcTrackGDict_208_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - - u 'TString' - 0 - - "
"u 'TString' - 0 - - u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCorrections1",1648,G__MdcTrackGDict_208_0_8, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - - u 'TString' - 0 - - "
"u 'TString' - 0 - - u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCorrectionsScan",1988,G__MdcTrackGDict_208_0_9, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TString' - 0 - - U 'TString' - 0 - - "
"U 'TString' - 0 - - U 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMomentum",1253,G__MdcTrackGDict_208_0_10, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"U 'HGeomVector' - 0 - - g - 'Bool_t' 0 'kTRUE' cond "
"d - 'Double_t' 0 '0.' targetz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMomentum",1253,G__MdcTrackGDict_208_0_11, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"U 'HMdcSeg' - 2 - seg g - 'Bool_t' 0 'kTRUE' cond "
"d - 'Double_t' 0 '0.' targetz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMomentum123",1403,G__MdcTrackGDict_208_0_12, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"U 'HMdcSeg' - 2 - seg g - 'Bool_t' 0 'kTRUE' cond "
"d - 'Double_t' 0 '0.' targetz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistance",1131,G__MdcTrackGDict_208_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaDistance",1522,G__MdcTrackGDict_208_0_14, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorr",726,G__MdcTrackGDict_208_0_15, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSPline",907,G__MdcTrackGDict_208_0_16, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGSpline), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorr1",775,G__MdcTrackGDict_208_0_17, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrections), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrScan",1115,G__MdcTrackGDict_208_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcTrackGCorrections' - 2 - corrScanAll", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_208_0_19, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackGCorrPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_208_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGCorrPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_208_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackGCorrPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_208_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackGCorrPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_208_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_208_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGCorrPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_208_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackGCorrPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_208_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGCorrPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_208_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackGCorrPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackGCorrPar", 1617, G__MdcTrackGDict_208_0_31, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrPar), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackGCorrPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackGCorrPar", 1743, G__MdcTrackGDict_208_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackGDict_208_0_33, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGCorrPar), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackGCorrPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackGContFact(void) {
   /* HMdcTrackGContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTrackGContFact",1706,G__MdcTrackGDict_597_0_2, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_HParSet), -1, 0, 1, 1, 1, 0, "U 'HContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_597_0_4, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackGContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_597_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_597_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackGContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_597_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackGContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_597_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_597_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_597_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackGContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_597_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackGContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_597_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackGContFact::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcTrackGContFact", 1706, G__MdcTrackGDict_597_0_16, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGContFact), -1, 0, 1, 1, 1, 0, "u 'HMdcTrackGContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackGContFact", 1832, G__MdcTrackGDict_597_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackGDict_597_0_18, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMdcTrackGContFact), -1, 1, 1, 1, 1, 0, "u 'HMdcTrackGContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHBaseTrack(void) {
   /* HBaseTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HBaseTrack));
   G__memfunc_setup("HBaseTrack",952,G__MdcTrackGDict_598_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HBaseTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HBaseTrack",952,G__MdcTrackGDict_598_0_2, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HBaseTrack), -1, 0, 1, 1, 1, 0, "u 'HBaseTrack' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIOMatching",1295,G__MdcTrackGDict_598_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - _qIOMatch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ",422,G__MdcTrackGDict_598_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - Z f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setR",414,G__MdcTrackGDict_598_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - R f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setP",412,G__MdcTrackGDict_598_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - P f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__MdcTrackGDict_598_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - THETA f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__MdcTrackGDict_598_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - PHI f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofHitInd",1205,G__MdcTrackGDict_598_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - tof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofClustInd",1435,G__MdcTrackGDict_598_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - tof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShowerHitInd",1540,G__MdcTrackGDict_598_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - shower", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcClustInd",1431,G__MdcTrackGDict_598_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - rpc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMass2",786,G__MdcTrackGDict_598_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - MASS2 f - 'Float_t' 0 - err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTof",629,G__MdcTrackGDict_598_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - TOF", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPolarity",1184,G__MdcTrackGDict_598_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - POLARYTY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__MdcTrackGDict_598_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - SECTOR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBeta",712,G__MdcTrackGDict_598_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - BETA", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetaEloss",1241,G__MdcTrackGDict_598_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTarDist",1031,G__MdcTrackGDict_598_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - _tarDist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofDist",1033,G__MdcTrackGDict_598_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIOMatch",965,G__MdcTrackGDict_598_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIOMatching",1283,G__MdcTrackGDict_598_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ",410,G__MdcTrackGDict_598_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrZ",707,G__MdcTrackGDict_598_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getR",402,G__MdcTrackGDict_598_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrR",699,G__MdcTrackGDict_598_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__MdcTrackGDict_598_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrTheta",1119,G__MdcTrackGDict_598_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__MdcTrackGDict_598_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrPhi",906,G__MdcTrackGDict_598_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOverlap",949,G__MdcTrackGDict_598_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSystem",965,G__MdcTrackGDict_598_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "???", (void*) NULL, 0);
   G__memfunc_setup("getShowerHitInd",1528,G__MdcTrackGDict_598_0_33, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHitInd",1193,G__MdcTrackGDict_598_0_34, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofClustInd",1423,G__MdcTrackGDict_598_0_35, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcClustInd",1419,G__MdcTrackGDict_598_0_36, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getP",400,G__MdcTrackGDict_598_0_37, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrP",697,G__MdcTrackGDict_598_0_38, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMass2",774,G__MdcTrackGDict_598_0_39, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrMass2",1071,G__MdcTrackGDict_598_0_40, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTof",617,G__MdcTrackGDict_598_0_41, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPolarity",1172,G__MdcTrackGDict_598_0_42, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcTrackGDict_598_0_43, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBeta",700,G__MdcTrackGDict_598_0_44, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaEloss",1229,G__MdcTrackGDict_598_0_45, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCovariance",1339,G__MdcTrackGDict_598_0_46, 117, G__get_linked_tagnum(&G__MdcTrackGDictLN_HSymMat), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTarDist",1019,G__MdcTrackGDict_598_0_47, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofDist",1021,G__MdcTrackGDict_598_0_48, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_598_0_49, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HBaseTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_598_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBaseTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_598_0_51, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HBaseTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_598_0_52, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HBaseTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_598_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_598_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBaseTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_598_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HBaseTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_598_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBaseTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_598_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HBaseTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HBaseTrack", 1078, G__MdcTrackGDict_598_0_61, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackGDict_598_0_62, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HBaseTrack), -1, 1, 1, 1, 1, 0, "u 'HBaseTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMetaMatch2(void) {
   /* HMetaMatch2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2));
   G__memfunc_setup("HMetaMatch2",1006,G__MdcTrackGDict_600_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMetaMatch2",1006,G__MdcTrackGDict_600_0_2, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2), -1, 0, 3, 1, 1, 0, 
"s - 'Short_t' 0 - sec i - 'Int_t' 0 - tkInd "
"i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrkCandInd",1294,G__MdcTrackGDict_600_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOwnIndex",1144,G__MdcTrackGDict_600_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNRpcClust",1226,G__MdcTrackGDict_600_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNShrHits",1119,G__MdcTrackGDict_600_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTofHits",1115,G__MdcTrackGDict_600_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcClst",1031,G__MdcTrackGDict_600_0_8, 121, -1, -1, 0, 5, 1, 1, 0, 
"b - 'UChar_t' 0 - el s - 'Short_t' 0 - ind "
"f - 'Float_t' 0 - ql f - 'Float_t' 0 - dx "
"f - 'Float_t' 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShrHit",926,G__MdcTrackGDict_600_0_9, 121, -1, -1, 0, 5, 1, 1, 0, 
"b - 'UChar_t' 0 - el s - 'Short_t' 0 - ind "
"f - 'Float_t' 0 - ql f - 'Float_t' 0 - dx "
"f - 'Float_t' 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofClst",1035,G__MdcTrackGDict_600_0_10, 121, -1, -1, 0, 5, 1, 1, 0, 
"b - 'UChar_t' 0 - el s - 'Short_t' 0 - ind "
"f - 'Float_t' 0 - ql f - 'Float_t' 0 - dx "
"f - 'Float_t' 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofHit1",971,G__MdcTrackGDict_600_0_11, 121, -1, -1, 0, 5, 1, 1, 0, 
"b - 'UChar_t' 0 - el s - 'Short_t' 0 - ind "
"f - 'Float_t' 0 - ql f - 'Float_t' 0 - dx "
"f - 'Float_t' 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofHit2",972,G__MdcTrackGDict_600_0_12, 121, -1, -1, 0, 5, 1, 1, 0, 
"b - 'UChar_t' 0 - el s - 'Short_t' 0 - ind "
"f - 'Float_t' 0 - ql f - 'Float_t' 0 - dx "
"f - 'Float_t' 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcClstMMF",1255,G__MdcTrackGDict_600_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"b - 'UChar_t' 0 - nln S - 'Short_t' 0 - ind "
"F - 'Float_t' 2 - ql2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShrHitMMF",1150,G__MdcTrackGDict_600_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"b - 'UChar_t' 0 - nln S - 'Short_t' 0 - ind "
"F - 'Float_t' 2 - ql2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofClstMMF",1259,G__MdcTrackGDict_600_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"b - 'UChar_t' 0 - nln S - 'Short_t' 2 - ind "
"F - 'Float_t' 2 - ql2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSplineInd",1234,G__MdcTrackGDict_600_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - _splineInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__MdcTrackGDict_600_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNCandForRich",1469,G__MdcTrackGDict_600_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - nrich", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNCandForIPU",1317,G__MdcTrackGDict_600_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - nrich", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichInd",1005,G__MdcTrackGDict_600_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - id s - 'Short_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichIPUInd",1243,G__MdcTrackGDict_600_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - id s - 'Short_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRungeKuttaIndShowerHit",2574,G__MdcTrackGDict_600_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - n s - 'Short_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRungeKuttaIndTofClst",2352,G__MdcTrackGDict_600_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - n s - 'Short_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRungeKuttaIndTofHit1",2288,G__MdcTrackGDict_600_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - n s - 'Short_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRungeKuttaIndTofHit2",2289,G__MdcTrackGDict_600_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - n s - 'Short_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRungeKuttaIndRpcClst",2348,G__MdcTrackGDict_600_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - n s - 'Short_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRungeKuttaInd",1649,G__MdcTrackGDict_600_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - _rungeKuttaInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setKalmanFilterInd",1825,G__MdcTrackGDict_600_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - _kalmanFilterInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setKalmanFilterIndShowerHit",2750,G__MdcTrackGDict_600_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - n s - 'Short_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setKalmanFilterIndTofClst",2528,G__MdcTrackGDict_600_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - n s - 'Short_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setKalmanFilterIndTofHit1",2464,G__MdcTrackGDict_600_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - n s - 'Short_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setKalmanFilterIndTofHit2",2465,G__MdcTrackGDict_600_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - n s - 'Short_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setKalmanFilterIndRpcClst",2524,G__MdcTrackGDict_600_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 - n s - 'Short_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInnerFake",1215,G__MdcTrackGDict_600_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fake", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOuterFake",1234,G__MdcTrackGDict_600_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fake", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcTrackGDict_600_0_36, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrkCandInd",1282,G__MdcTrackGDict_600_0_37, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOwnIndex",1132,G__MdcTrackGDict_600_0_38, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaArrSize",1415,G__MdcTrackGDict_600_0_39, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSystem",965,G__MdcTrackGDict_600_0_40, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNRpcClusters",1544,G__MdcTrackGDict_600_0_41, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNShrHits",1107,G__MdcTrackGDict_600_0_42, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTofHits",1103,G__MdcTrackGDict_600_0_43, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcClstInd",1302,G__MdcTrackGDict_600_0_44, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerHitInd",1528,G__MdcTrackGDict_600_0_45, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofClstInd",1306,G__MdcTrackGDict_600_0_46, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHit1Ind",1242,G__MdcTrackGDict_600_0_47, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHit2Ind",1243,G__MdcTrackGDict_600_0_48, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcClstQuality",1764,G__MdcTrackGDict_600_0_49, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerHitQuality",1990,G__MdcTrackGDict_600_0_50, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofClstQuality",1768,G__MdcTrackGDict_600_0_51, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHit1Quality",1704,G__MdcTrackGDict_600_0_52, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHit2Quality",1705,G__MdcTrackGDict_600_0_53, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcClstDX",1175,G__MdcTrackGDict_600_0_54, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerHitDX",1401,G__MdcTrackGDict_600_0_55, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofClstDX",1179,G__MdcTrackGDict_600_0_56, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHit1DX",1115,G__MdcTrackGDict_600_0_57, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHit2DX",1116,G__MdcTrackGDict_600_0_58, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcClstDY",1176,G__MdcTrackGDict_600_0_59, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerHitDY",1402,G__MdcTrackGDict_600_0_60, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofClstDY",1180,G__MdcTrackGDict_600_0_61, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHit1DY",1116,G__MdcTrackGDict_600_0_62, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHit2DY",1117,G__MdcTrackGDict_600_0_63, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSplineInd",1222,G__MdcTrackGDict_600_0_64, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRungeKuttaIndShowerHit",2562,G__MdcTrackGDict_600_0_65, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRungeKuttaIndTofClst",2340,G__MdcTrackGDict_600_0_66, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRungeKuttaIndTofHit1",2276,G__MdcTrackGDict_600_0_67, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRungeKuttaIndTofHit2",2277,G__MdcTrackGDict_600_0_68, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRungeKuttaIndRpcClst",2336,G__MdcTrackGDict_600_0_69, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRungeKuttaInd",1637,G__MdcTrackGDict_600_0_70, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKalmanFilterInd",1813,G__MdcTrackGDict_600_0_71, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKalmanFilterIndShowerHit",2738,G__MdcTrackGDict_600_0_72, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKalmanFilterIndTofClst",2516,G__MdcTrackGDict_600_0_73, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKalmanFilterIndTofHit1",2452,G__MdcTrackGDict_600_0_74, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKalmanFilterIndTofHit2",2453,G__MdcTrackGDict_600_0_75, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKalmanFilterIndRpcClst",2512,G__MdcTrackGDict_600_0_76, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCandForRich",1457,G__MdcTrackGDict_600_0_77, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCandForIPU",1305,G__MdcTrackGDict_600_0_78, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getARichInd",1058,G__MdcTrackGDict_600_0_79, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getARichIPUInd",1296,G__MdcTrackGDict_600_0_80, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'UChar_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFake",595,G__MdcTrackGDict_600_0_81, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInnerFake",1103,G__MdcTrackGDict_600_0_82, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOuterFake",1122,G__MdcTrackGDict_600_0_83, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MdcTrackGDict_600_0_84, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefForRest",1312,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_600_0_86, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMetaMatch2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_600_0_87, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMetaMatch2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_600_0_88, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMetaMatch2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_600_0_89, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMetaMatch2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_600_0_93, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_600_0_94, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMetaMatch2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_600_0_95, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMetaMatch2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_600_0_96, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMetaMatch2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_600_0_97, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMetaMatch2::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMetaMatch2", 1006, G__MdcTrackGDict_600_0_98, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2), -1, 0, 1, 1, 1, 0, "u 'HMetaMatch2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMetaMatch2", 1132, G__MdcTrackGDict_600_0_99, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackGDict_600_0_100, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatch2), -1, 1, 1, 1, 1, 0, "u 'HMetaMatch2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMetaMatchPar(void) {
   /* HMetaMatchPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchPar));
   G__memfunc_setup("HMetaMatchPar",1247,G__MdcTrackGDict_611_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"MetaMatchPar\"' name C - 'Char_t' 10 '\"Meta match parameters\"' title "
"C - 'Char_t' 10 '\"MetaMatchProductionCuts\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichThetaMinCut",1804,G__MdcTrackGDict_611_0_2, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichThetaMaxCut",1806,G__MdcTrackGDict_611_0_3, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichSigmaPhi",1496,G__MdcTrackGDict_611_0_4, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichSigmaPhiOffset",2111,G__MdcTrackGDict_611_0_5, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichQualityCut",1755,G__MdcTrackGDict_611_0_6, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichIPUThetaMinCut",2042,G__MdcTrackGDict_611_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichIPUThetaMaxCut",2044,G__MdcTrackGDict_611_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichIPUSigmaPhi",1734,G__MdcTrackGDict_611_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichIPUSigmaPhiOffset",2349,G__MdcTrackGDict_611_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichIPUQualityCut",1993,G__MdcTrackGDict_611_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerSigmaXMdc",1813,G__MdcTrackGDict_611_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerSigmaYMdc",1814,G__MdcTrackGDict_611_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerSigmaXOffset",2152,G__MdcTrackGDict_611_0_14, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerSigmaYOffset",2153,G__MdcTrackGDict_611_0_15, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerQualityCut",1997,G__MdcTrackGDict_611_0_16, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcSigmaXMdc",1474,G__MdcTrackGDict_611_0_17, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcSigmaYMdc",1475,G__MdcTrackGDict_611_0_18, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcSigmaXOffset",1813,G__MdcTrackGDict_611_0_19, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcSigmaYOffset",1814,G__MdcTrackGDict_611_0_20, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcQualityCut",1658,G__MdcTrackGDict_611_0_21, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofSigmaX",1202,G__MdcTrackGDict_611_0_22, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofSigmaY",1203,G__MdcTrackGDict_611_0_23, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofSigmaXOffset",1817,G__MdcTrackGDict_611_0_24, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofSigmaYOffset",1818,G__MdcTrackGDict_611_0_25, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofQualityCut",1662,G__MdcTrackGDict_611_0_26, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichThetaMinCut",1816,G__MdcTrackGDict_611_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichThetaMaxCut",1818,G__MdcTrackGDict_611_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichSigmaPhi",1508,G__MdcTrackGDict_611_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichSigmaPhiOffset",2123,G__MdcTrackGDict_611_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichQualityCut",1767,G__MdcTrackGDict_611_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichIPUThetaMinCut",2054,G__MdcTrackGDict_611_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichIPUThetaMaxCut",2056,G__MdcTrackGDict_611_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichIPUSigmaPhi",1746,G__MdcTrackGDict_611_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichIPUSigmaPhiOffset",2361,G__MdcTrackGDict_611_0_35, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichIPUQualityCut",2005,G__MdcTrackGDict_611_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShowerSigmaXMdc",1825,G__MdcTrackGDict_611_0_37, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShowerSigmaYMdc",1826,G__MdcTrackGDict_611_0_38, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShowerSigmaXOffset",2164,G__MdcTrackGDict_611_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShowerSigmaYOffset",2165,G__MdcTrackGDict_611_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShowerQualityCut",2009,G__MdcTrackGDict_611_0_41, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcSigmaXMdc",1486,G__MdcTrackGDict_611_0_42, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcSigmaYMdc",1487,G__MdcTrackGDict_611_0_43, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcSigmaXOffset",1825,G__MdcTrackGDict_611_0_44, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcSigmaYOffset",1826,G__MdcTrackGDict_611_0_45, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcQualityCut",1670,G__MdcTrackGDict_611_0_46, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofSigmaX",1214,G__MdcTrackGDict_611_0_47, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofSigmaY",1215,G__MdcTrackGDict_611_0_48, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofSigmaXOffset",1829,G__MdcTrackGDict_611_0_49, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofSigmaYOffset",1830,G__MdcTrackGDict_611_0_50, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofQualityCut",1674,G__MdcTrackGDict_611_0_51, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - v i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_611_0_55, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMetaMatchPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_611_0_56, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMetaMatchPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_611_0_57, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMetaMatchPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_611_0_58, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMetaMatchPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_611_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_611_0_63, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMetaMatchPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_611_0_64, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMetaMatchPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_611_0_65, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMetaMatchPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_611_0_66, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMetaMatchPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMetaMatchPar", 1247, G__MdcTrackGDict_611_0_67, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchPar), -1, 0, 1, 1, 1, 0, "u 'HMetaMatchPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMetaMatchPar", 1373, G__MdcTrackGDict_611_0_68, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackGDict_611_0_69, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchPar), -1, 1, 1, 1, 1, 0, "u 'HMetaMatchPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMetaMatchF2(void) {
   /* HMetaMatchF2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchF2));
   G__memfunc_setup("HMetaMatchF2",1076,G__MdcTrackGDict_613_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchF2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMetaMatchF2",1076,G__MdcTrackGDict_613_0_2, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HMetaMatchF2), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("storeNotMatchedTracks",2172,G__MdcTrackGDict_613_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScaleRMS",1062,G__MdcTrackGDict_613_0_8, 121, -1, -1, 0, 6, 3, 1, 0, 
"f - 'Float_t' 0 - tofrmsx f - 'Float_t' 0 - tofrmsy "
"f - 'Float_t' 0 - rpcrmsx f - 'Float_t' 0 - rpcrmsy "
"f - 'Float_t' 0 - shrrmsx f - 'Float_t' 0 - shrrmsy", (char*)NULL, (void*) G__func2void( (void (*)(Float_t, Float_t, Float_t, Float_t, Float_t, Float_t))(&HMetaMatchF2::setScaleRMS) ), 0);
   G__memfunc_setup("setScaleCut",1120,G__MdcTrackGDict_613_0_9, 121, -1, -1, 0, 3, 3, 1, 0, 
"f - 'Float_t' 0 - tofcut f - 'Float_t' 0 - rpccut "
"f - 'Float_t' 0 - shrcut", (char*)NULL, (void*) G__func2void( (void (*)(Float_t, Float_t, Float_t))(&HMetaMatchF2::setScaleCut) ), 0);
   G__memfunc_setup("setInitParam",1233,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeRichMatching",1615,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectTofHits",1447,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectRpcClusters",1888,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("collectShowerHits",1782,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeOuterSegMatch",1721,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HMdcTrkCand' - 0 - pTrkCand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaMatchSlot",1622,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - trkCandIndex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("quality2TofClustS2",1780,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 1 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("quality2TofClustS1",1779,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("quality2TofHit",1417,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("quality2Shower",1459,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 4, 0, "U 'HShowerHit' - 0 - pShrHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("quality2Rpc",1120,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 4, 0, "U 'HRpcCluster' - 0 - pRpcCl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCurrentSector",1695,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTofCluster",1332,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HTofCluster' - 0 - pTofCluster", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTofHit",887,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'HTofHit' - 0 - pTofHit i - 'Int_t' 0 '0' clSize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTof",594,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"U 'HTofHit' - 0 - pTofHit i - 'Int_t' 0 - index "
"i - 'Int_t' 0 - clSize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addRing",697,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"f - 'Float_t' 0 - quality s - 'Short_t' 0 - ind "
"S - 'Short_t' 0 - indTable b - 'UChar_t' 1 - nRich", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMatchingParam",1640,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insertQual",1064,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"f - 'Float_t' 0 - qual s - 'Short_t' 0 - ind "
"b - 'UChar_t' 1 - nEl f - 'Float_t' 0 - qualArr[][3] "
"S - 'Short_t' 0 - indArr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insertQualTof",1361,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "f - 'Float_t' 0 - qual", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transMdcToMeta",1414,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'HGeomTransform' - 11 - modSys", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_613_0_31, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMetaMatchF2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_613_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMetaMatchF2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_613_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMetaMatchF2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_613_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMetaMatchF2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_613_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_613_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMetaMatchF2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_613_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMetaMatchF2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_613_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMetaMatchF2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_613_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMetaMatchF2::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMetaMatchF2", 1202, G__MdcTrackGDict_613_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSplineTrack(void) {
   /* HSplineTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrack));
   G__memfunc_setup("HSplineTrack",1192,G__MdcTrackGDict_614_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumOfChambers",1622,G__MdcTrackGDict_614_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumOfChambers",1610,G__MdcTrackGDict_614_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQSpline",1032,G__MdcTrackGDict_614_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - QS", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQSpline",1020,G__MdcTrackGDict_614_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_614_0_6, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSplineTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_614_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplineTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_614_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSplineTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_614_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSplineTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_614_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_614_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplineTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_614_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSplineTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_614_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplineTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_614_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSplineTrack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSplineTrack", 1192, G__MdcTrackGDict_614_0_18, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrack), -1, 0, 1, 1, 1, 0, "u 'HSplineTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSplineTrack", 1318, G__MdcTrackGDict_614_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackGDict_614_0_20, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrack), -1, 1, 1, 1, 1, 0, "u 'HSplineTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSplinePar(void) {
   /* HSplinePar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplinePar));
   G__memfunc_setup("HSplinePar",982,G__MdcTrackGDict_616_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplinePar), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__MdcTrackGDict_616_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackGDict_616_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove",654,G__MdcTrackGDict_616_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove",654,G__MdcTrackGDict_616_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSplinePoints",1588,G__MdcTrackGDict_616_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 0 - - F - 'Float_t' 0 - - "
"F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSplinePoints",1576,G__MdcTrackGDict_616_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 0 - - F - 'Float_t' 0 - - "
"F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_616_0_8, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSplinePar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_616_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplinePar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_616_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSplinePar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_616_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSplinePar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_616_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_616_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplinePar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_616_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSplinePar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_616_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplinePar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_616_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSplinePar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSplinePar", 982, G__MdcTrackGDict_616_0_20, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplinePar), -1, 0, 1, 1, 1, 0, "u 'HSplinePar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSplinePar", 1108, G__MdcTrackGDict_616_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackGDict_616_0_22, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplinePar), -1, 1, 1, 1, 1, 0, "u 'HSplinePar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSplineTrackF2(void) {
   /* HSplineTrackF2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrackF2));
   G__memfunc_setup("calcMomentum",1253,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'HMdcSeg' - 2 - - U 'HMetaMatch2' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMomentum",1253,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HMdcSeg' - 2 - segments", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doMassStuff",1135,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'HMetaMatch2' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doMassStuff2",1185,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'TString' - 0 - - U 'HMetaMatch2' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcBeta",783,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doMomentum",1061,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'HMetaMatch2' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillData",801,G__MdcTrackGDict_618_0_7, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrack), -1, 0, 2, 1, 1, 0, 
"U 'HMdcSeg' - 0 - - g - 'Bool_t' 0 'kTRUE' cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillParData",1092,G__MdcTrackGDict_618_0_8, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplinePar), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSplineTrackF2",1312,G__MdcTrackGDict_618_0_9, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrackF2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSplineTrackF2",1312,G__MdcTrackGDict_618_0_10, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTrackF2), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("makeSplinePar",1324,G__MdcTrackGDict_618_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDef",603,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_618_0_17, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSplineTrackF2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_618_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplineTrackF2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_618_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSplineTrackF2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_618_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSplineTrackF2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_618_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_618_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplineTrackF2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_618_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSplineTrackF2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_618_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplineTrackF2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_618_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSplineTrackF2::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HSplineTrackF2", 1438, G__MdcTrackGDict_618_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRungeKutta(void) {
   /* HRungeKutta */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HRungeKutta));
   G__memfunc_setup("HRungeKutta",1106,G__MdcTrackGDict_656_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HRungeKutta), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackGDict_656_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setField",816,G__MdcTrackGDict_656_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMdcTrackGField' - 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFieldFactor",1423,G__MdcTrackGDict_656_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fpol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcPosition",1461,G__MdcTrackGDict_656_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"u 'HGeomTransform' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fit4Hits",783,G__MdcTrackGDict_656_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"F - 'Float_t' 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 '999999999.' pGuess", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fit3Hits",782,G__MdcTrackGDict_656_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"F - 'Float_t' 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 '999999999.' pGuess", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("traceToVertex",1360,G__MdcTrackGDict_656_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcSizesCells' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("traceToMETA",1017,G__MdcTrackGDict_656_0_9, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'HGeomVector' - 1 - - u 'HGeomVector' - 1 - - "
"U 'HGeomVector' - 0 '0' point U 'HGeomVector' - 0 '0' norm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPfit",723,G__MdcTrackGDict_656_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2",646,G__MdcTrackGDict_656_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNMaxMod",980,G__MdcTrackGDict_656_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXfit",731,G__MdcTrackGDict_656_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iMdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYfit",732,G__MdcTrackGDict_656_0_14, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iMdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZfit",733,G__MdcTrackGDict_656_0_15, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iMdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXhit",733,G__MdcTrackGDict_656_0_16, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iMdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYhit",734,G__MdcTrackGDict_656_0_17, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iMdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXfithit",1056,G__MdcTrackGDict_656_0_18, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iMdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYfithit",1057,G__MdcTrackGDict_656_0_19, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iMdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXtrackFirstMDCFitPos",2270,G__MdcTrackGDict_656_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "x", (void*) NULL, 0);
   G__memfunc_setup("getYtrackFirstMDCFitPos",2271,G__MdcTrackGDict_656_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "y", (void*) NULL, 0);
   G__memfunc_setup("getZtrackFirstMDCFitPos",2272,G__MdcTrackGDict_656_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "z", (void*) NULL, 0);
   G__memfunc_setup("getDXtrackFirstMDCFitPos",2338,G__MdcTrackGDict_656_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "dx", (void*) NULL, 0);
   G__memfunc_setup("getDYtrackFirstMDCFitPos",2339,G__MdcTrackGDict_656_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "dy", (void*) NULL, 0);
   G__memfunc_setup("getDZtrackFirstMDCFitPos",2340,G__MdcTrackGDict_656_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "dz", (void*) NULL, 0);
   G__memfunc_setup("getXtrackLastMDCFitPos",2154,G__MdcTrackGDict_656_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "x", (void*) NULL, 0);
   G__memfunc_setup("getYtrackLastMDCFitPos",2155,G__MdcTrackGDict_656_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "y", (void*) NULL, 0);
   G__memfunc_setup("getZtrackLastMDCFitPos",2156,G__MdcTrackGDict_656_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "z", (void*) NULL, 0);
   G__memfunc_setup("getDXtrackLastMDCFitPos",2222,G__MdcTrackGDict_656_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "dx", (void*) NULL, 0);
   G__memfunc_setup("getDYtrackLastMDCFitPos",2223,G__MdcTrackGDict_656_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "dy", (void*) NULL, 0);
   G__memfunc_setup("getDZtrackLastMDCFitPos",2224,G__MdcTrackGDict_656_0_31, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "dz", (void*) NULL, 0);
   G__memfunc_setup("getXtrackOnMETA",1425,G__MdcTrackGDict_656_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "x", (void*) NULL, 0);
   G__memfunc_setup("getYtrackOnMETA",1426,G__MdcTrackGDict_656_0_33, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "y", (void*) NULL, 0);
   G__memfunc_setup("getZtrackOnMETA",1427,G__MdcTrackGDict_656_0_34, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "z", (void*) NULL, 0);
   G__memfunc_setup("getTrackLength",1431,G__MdcTrackGDict_656_0_35, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "RK-track length", (void*) NULL, 0);
   G__memfunc_setup("getZSeg1",746,G__MdcTrackGDict_656_0_36, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "z of inner segment after RK-fit", (void*) NULL, 0);
   G__memfunc_setup("getRSeg1",738,G__MdcTrackGDict_656_0_37, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "r of inner segment after RK-fit", (void*) NULL, 0);
   G__memfunc_setup("getThetaSeg1",1158,G__MdcTrackGDict_656_0_38, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "theta of inner segment after RK-fit", (void*) NULL, 0);
   G__memfunc_setup("getPhiSeg1",945,G__MdcTrackGDict_656_0_39, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "phi of inner segment after RK-fit", (void*) NULL, 0);
   G__memfunc_setup("getZSeg2",747,G__MdcTrackGDict_656_0_40, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "z of outer segment after RK-fit", (void*) NULL, 0);
   G__memfunc_setup("getRSeg2",739,G__MdcTrackGDict_656_0_41, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "r of outer segment after RK-fit", (void*) NULL, 0);
   G__memfunc_setup("getThetaSeg2",1159,G__MdcTrackGDict_656_0_42, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "theta of outer segment after RK-fit", (void*) NULL, 0);
   G__memfunc_setup("getPhiSeg2",946,G__MdcTrackGDict_656_0_43, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "phi of outer segment after RK-fit", (void*) NULL, 0);
   G__memfunc_setup("setMTol",712,G__MdcTrackGDict_656_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - tol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMTol",700,G__MdcTrackGDict_656_0_45, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitMdc",599,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findMdcIntersectionPoint",2486,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"i - 'Int_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findIntersectionPoint",2210,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 4, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initMom",733,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance",843,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("parSetNew0",969,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("parSetNewVar",1218,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cosines",756,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gentrkNew",949,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"f - 'Float_t' 0 - - D - 'Double_t' 0 - - "
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rkgtrk",661,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 4, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"i - 'Int_t' 0 '0' kind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rkeqfw",656,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"D - 'Double_t' 0 - - f - 'Float_t' 0 - - "
"D - 'Double_t' 0 - - F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("derive",639,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"D - 'Double_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("linSys",642,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 4, 0, 
"u 'TMatrixT<double>' 'TMatrixD' 1 - lu d - 'Double_t' 1 - sign "
"d - 'Double_t' 0 - tol i - 'Int_t' 1 - nrZeros", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_656_0_60, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRungeKutta::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_656_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRungeKutta::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_656_0_62, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRungeKutta::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_656_0_63, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRungeKutta::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__MdcTrackGDict_656_0_64, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__MdcTrackGDict_656_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__MdcTrackGDict_656_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_656_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_656_0_68, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRungeKutta::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_656_0_69, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRungeKutta::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_656_0_70, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRungeKutta::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_656_0_71, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRungeKutta::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRungeKutta", 1106, G__MdcTrackGDict_656_0_72, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HRungeKutta), -1, 0, 1, 1, 1, 0, "u 'HRungeKutta' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRungeKutta", 1232, G__MdcTrackGDict_656_0_73, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackGDict_656_0_74, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HRungeKutta), -1, 1, 1, 1, 1, 0, "u 'HRungeKutta' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRKTrackB(void) {
   /* HRKTrackB */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackB));
   G__memfunc_setup("HRKTrackB",796,G__MdcTrackGDict_657_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackB), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChiq",721,G__MdcTrackGDict_657_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZSeg1RK",915,G__MdcTrackGDict_657_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRSeg1RK",907,G__MdcTrackGDict_657_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThetaSeg1RK",1327,G__MdcTrackGDict_657_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhiSeg1RK",1114,G__MdcTrackGDict_657_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZSeg2RK",916,G__MdcTrackGDict_657_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRSeg2RK",908,G__MdcTrackGDict_657_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThetaSeg2RK",1328,G__MdcTrackGDict_657_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhiSeg2RK",1115,G__MdcTrackGDict_657_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMETAdx",847,G__MdcTrackGDict_657_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMETAdy",848,G__MdcTrackGDict_657_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMETAdz",849,G__MdcTrackGDict_657_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQualityRpc",1370,G__MdcTrackGDict_657_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - _qualityRpc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQualityShower",1709,G__MdcTrackGDict_657_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - _qualityShower", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQualityTof",1374,G__MdcTrackGDict_657_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - _qualityTof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChiq",709,G__MdcTrackGDict_657_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZSeg1RK",903,G__MdcTrackGDict_657_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRSeg1RK",895,G__MdcTrackGDict_657_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaSeg1RK",1315,G__MdcTrackGDict_657_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiSeg1RK",1102,G__MdcTrackGDict_657_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZSeg2RK",904,G__MdcTrackGDict_657_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRSeg2RK",896,G__MdcTrackGDict_657_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaSeg2RK",1316,G__MdcTrackGDict_657_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiSeg2RK",1103,G__MdcTrackGDict_657_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMETAdx",835,G__MdcTrackGDict_657_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMETAdy",836,G__MdcTrackGDict_657_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMETAdz",837,G__MdcTrackGDict_657_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQualityRpc",1358,G__MdcTrackGDict_657_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQualityShower",1697,G__MdcTrackGDict_657_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQualityTof",1362,G__MdcTrackGDict_657_0_31, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaRadius",1327,G__MdcTrackGDict_657_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_657_0_33, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRKTrackB::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_657_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRKTrackB::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_657_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRKTrackB::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_657_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRKTrackB::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_657_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_657_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRKTrackB::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_657_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRKTrackB::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_657_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRKTrackB::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_657_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRKTrackB::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRKTrackB", 796, G__MdcTrackGDict_657_0_45, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackB), -1, 0, 1, 1, 1, 0, "u 'HRKTrackB' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRKTrackB", 922, G__MdcTrackGDict_657_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackGDict_657_0_47, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackB), -1, 1, 1, 1, 1, 0, "u 'HRKTrackB' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRKTrackBF2(void) {
   /* HRKTrackBF2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackBF2));
   G__memfunc_setup("doMassStuff",1135,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("matchWithRpc",1230,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("matchWithShower",1569,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("matchWithTof",1234,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcBeta",783,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"f - 'Float_t' 0 - - i - 'Int_t' 0 - - "
"g - 'Bool_t' 0 'kTRUE' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillData",801,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackB), -1, 0, 4, 1, 4, 0, 
"U 'HMdcSeg' - 0 - - U 'HMdcSeg' - 0 - - "
"U 'HSplineTrack' - 0 - - i - 'Int_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcPosDirFromSegment",2123,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 4, 0, 
"U 'HMdcSeg' - 0 - pSeg i - 'Int_t' 0 - ioseg "
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMatchingParams",1755,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQuality",1065,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 4, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRKTrackBF2",916,G__MdcTrackGDict_663_0_10, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackBF2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRKTrackBF2",916,G__MdcTrackGDict_663_0_11, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HRKTrackBF2), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name s - 'Short_t' 0 '2' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MdcTrackGDict_663_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_663_0_17, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRKTrackBF2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_663_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRKTrackBF2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_663_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRKTrackBF2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_663_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRKTrackBF2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_663_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_663_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRKTrackBF2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_663_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRKTrackBF2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_663_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRKTrackBF2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_663_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRKTrackBF2::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRKTrackBF2", 1042, G__MdcTrackGDict_663_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSplineTaskSet(void) {
   /* HSplineTaskSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTaskSet));
   G__memfunc_setup("HSplineTaskSet",1394,G__MdcTrackGDict_667_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTaskSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSplineTaskSet",1394,G__MdcTrackGDict_667_0_2, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTaskSet), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("make",414,G__MdcTrackGDict_667_0_3, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_HTask), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' sel C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSplinePar",1242,G__MdcTrackGDict_667_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("parseArguments",1489,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_667_0_6, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSplineTaskSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_667_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplineTaskSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_667_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSplineTaskSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_667_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSplineTaskSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_667_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_667_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplineTaskSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_667_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSplineTaskSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_667_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplineTaskSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_667_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSplineTaskSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HSplineTaskSet", 1520, G__MdcTrackGDict_667_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSplineTofClF2(void) {
   /* HSplineTofClF2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTofClF2));
   G__memfunc_setup("cond",420,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 4, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkForSeg",1092,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"U 'HMetaMatch2' - 0 - - U 'HMetaMatch2' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("condMeta",811,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"U 'HMetaMatch2' - 0 - - U 'HMetaMatch2' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkCluster",1248,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HMetaMatch2' - 0 - pMetaMatch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkNextTofHits",1630,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'HMetaMatch2' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkCandForSameMeta",1960,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'HMetaMatch2' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkShowerOverlap",1871,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSplineTofClF2",1283,G__MdcTrackGDict_668_0_8, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTofClF2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSplineTofClF2",1283,G__MdcTrackGDict_668_0_9, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HSplineTofClF2), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"i - 'Int_t' 0 '0' mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("unsetTofHitsFromCluster",2406,G__MdcTrackGDict_668_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_668_0_15, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSplineTofClF2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_668_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplineTofClF2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_668_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSplineTofClF2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_668_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSplineTofClF2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_668_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_668_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplineTofClF2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_668_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSplineTofClF2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_668_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSplineTofClF2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_668_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSplineTofClF2::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HSplineTofClF2", 1409, G__MdcTrackGDict_668_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEnergyLossCorrPar(void) {
   /* HEnergyLossCorrPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HEnergyLossCorrPar));
   G__memfunc_setup("HEnergyLossCorrPar",1804,G__MdcTrackGDict_669_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HEnergyLossCorrPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"EnergyLossCorrPar\"' name C - 'Char_t' 10 '\"Energy losses correction parameters\"' title "
"C - 'Char_t' 10 '\"EnergyLossCorrProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getObject",919,G__MdcTrackGDict_669_0_2, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_HEnergyLossCorrPar), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HEnergyLossCorrPar* (*)())(&HEnergyLossCorrPar::getObject) ), 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setDefaultPar",1332,G__MdcTrackGDict_669_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDeltaMom",1107,G__MdcTrackGDict_669_0_7, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - pId d - 'Double_t' 0 - mom "
"d - 'Double_t' 0 - theta", "units: MeV for mom, degrees for theta", (void*) NULL, 0);
   G__memfunc_setup("getCorrMom",1023,G__MdcTrackGDict_669_0_8, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - pId d - 'Double_t' 0 - mom "
"d - 'Double_t' 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillParMomCorrH",1489,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - size D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDeltaMomT1",1240,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 8, 
"i - 'Int_t' 0 - pId d - 'Double_t' 0 - mom "
"d - 'Double_t' 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDeltaMomT3",1242,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 8, 
"i - 'Int_t' 0 - pId d - 'Double_t' 0 - mom "
"d - 'Double_t' 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deltaMomT2",953,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 8, 
"d - 'Double_t' 0 - b d - 'Double_t' 0 - rs "
"D - 'Double_t' 10 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_669_0_13, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEnergyLossCorrPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_669_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEnergyLossCorrPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_669_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEnergyLossCorrPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_669_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEnergyLossCorrPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_669_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_669_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEnergyLossCorrPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_669_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEnergyLossCorrPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_669_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEnergyLossCorrPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_669_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEnergyLossCorrPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEnergyLossCorrPar", 1804, G__MdcTrackGDict_669_0_25, (int) ('i'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HEnergyLossCorrPar), -1, 0, 1, 1, 1, 0, "u 'HEnergyLossCorrPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEnergyLossCorrPar", 1930, G__MdcTrackGDict_669_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcTrackGDict_669_0_27, (int) ('u'), G__get_linked_tagnum(&G__MdcTrackGDictLN_HEnergyLossCorrPar), -1, 1, 1, 1, 1, 0, "u 'HEnergyLossCorrPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHLvl1EvtFilter(void) {
   /* HLvl1EvtFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HLvl1EvtFilter));
   G__memfunc_setup("HLvl1EvtFilter",1340,G__MdcTrackGDict_670_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HLvl1EvtFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HLvl1EvtFilter",1340,G__MdcTrackGDict_670_0_2, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HLvl1EvtFilter), -1, 0, 5, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"u 'TString' - 0 - opt i - 'Int_t' 0 '0' multMeta "
"i - 'Int_t' 0 '0' multTof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("resetCounters",1398,G__MdcTrackGDict_670_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFilteredEvt",1338,G__MdcTrackGDict_670_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_670_0_8, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HLvl1EvtFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_670_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLvl1EvtFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_670_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HLvl1EvtFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_670_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HLvl1EvtFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_670_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_670_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLvl1EvtFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_670_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HLvl1EvtFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_670_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLvl1EvtFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_670_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HLvl1EvtFilter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HLvl1EvtFilter", 1466, G__MdcTrackGDict_670_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTimeLvl1EvtFilter(void) {
   /* HTimeLvl1EvtFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcTrackGDictLN_HTimeLvl1EvtFilter));
   G__memfunc_setup("HTimeLvl1EvtFilter",1739,G__MdcTrackGDict_671_0_1, 105, G__get_linked_tagnum(&G__MdcTrackGDictLN_HTimeLvl1EvtFilter), -1, 0, 6, 1, 1, 0, 
"C - 'Text_t' 10 '\"TimeLvl1EvetFilter\"' name C - 'Text_t' 10 '\"TimeLvl1EvetFilter\"' title "
"u 'TString' - 0 '\"tofmult\"' opt i - 'Int_t' 0 '0' m "
"f - 'Float_t' 0 '100.' timecut f - 'Float_t' 0 '0.' MultSmearing", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getHitTofCat",1190,G__MdcTrackGDict_671_0_5, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounters",1398,G__MdcTrackGDict_671_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFilteredEvt",1338,G__MdcTrackGDict_671_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSkipNextTask",1445,G__MdcTrackGDict_671_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - swt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTofMultTrigger",1659,G__MdcTrackGDict_671_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcTrackGDict_671_0_10, 85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTimeLvl1EvtFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcTrackGDict_671_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTimeLvl1EvtFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcTrackGDict_671_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTimeLvl1EvtFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcTrackGDict_671_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTimeLvl1EvtFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcTrackGDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcTrackGDict_671_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcTrackGDict_671_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTimeLvl1EvtFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcTrackGDict_671_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTimeLvl1EvtFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcTrackGDict_671_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTimeLvl1EvtFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcTrackGDict_671_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTimeLvl1EvtFilter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HTimeLvl1EvtFilter", 1865, G__MdcTrackGDict_671_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMdcTrackGDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
   G__memvar_setup((void*)(&catBaseTrack),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catBaseTrack=",0,(char*)NULL);
   G__memvar_setup((void*)(&catSplineTrack),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catSplineTrack=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMetaMatch),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMetaMatch=",0,(char*)NULL);
   G__memvar_setup((void*)(&catRKTrackB),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catRKTrackB=",0,(char*)NULL);
   G__memvar_setup((void*)(&catSplinePar),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catSplinePar=",0,(char*)NULL);
   G__memvar_setup((void*)(&catKalTrack),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catKalTrack=",0,(char*)NULL);
   G__memvar_setup((void*)(&catKalSite),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catKalSite=",0,(char*)NULL);
   G__memvar_setup((void*)(&catKalHitWire),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catKalHitWire=",0,(char*)NULL);
   G__memvar_setup((void*)(&catKalHit2d),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catKalHit2d=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMdcTrackGDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMdcTrackGDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MdcTrackGDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMdcTrackGField = { "HMdcTrackGField" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMdcTrackGCorrections = { "HMdcTrackGCorrections" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMdcTrackGSpline = { "HMdcTrackGSpline" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HParSet = { "HParSet" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HParamList = { "HParamList" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HParCond = { "HParCond" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HSymMat = { "HSymMat" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HSymMat6 = { "HSymMat6" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMdcSeg = { "HMdcSeg" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMdcTrackGFieldPar = { "HMdcTrackGFieldPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HGeomVector = { "HGeomVector" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMdcTrackGCorrPar = { "HMdcTrackGCorrPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMdcKickPlane = { "HMdcKickPlane" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HTask = { "HTask" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HTaskSet = { "HTaskSet" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMdcGeomPar = { "HMdcGeomPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HSpecGeomPar = { "HSpecGeomPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HGeomTransform = { "HGeomTransform" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMdcGetContainers = { "HMdcGetContainers" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HVertex = { "HVertex" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HEventHeader = { "HEventHeader" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HContainer = { "HContainer" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HContFact = { "HContFact" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMdcTrackGContFact = { "HMdcTrackGContFact" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HBaseTrack = { "HBaseTrack" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HReconstructor = { "HReconstructor" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMetaMatch2 = { "HMetaMatch2" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HTofCluster = { "HTofCluster" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HTofHit = { "HTofHit" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HRpcCluster = { "HRpcCluster" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HShowerHit = { "HShowerHit" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HIterator = { "HIterator" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMdcTrkCand = { "HMdcTrkCand" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HTofGeomPar = { "HTofGeomPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HRpcGeomPar = { "HRpcGeomPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HShowerGeometry = { "HShowerGeometry" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMetaMatchPar = { "HMetaMatchPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMdcSizesCells = { "HMdcSizesCells" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMetaMatchF2 = { "HMetaMatchF2" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HSplineTrack = { "HSplineTrack" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HSplinePar = { "HSplinePar" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HMagnetPar = { "HMagnetPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HSplineTrackF2 = { "HSplineTrackF2" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HRungeKutta = { "HRungeKutta" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HRKTrackB = { "HRKTrackB" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HRKTrackBF2 = { "HRKTrackBF2" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HSplineTaskSet = { "HSplineTaskSet" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HSplineTofClF2 = { "HSplineTofClF2" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HEnergyLossCorrPar = { "HEnergyLossCorrPar" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HLvl1EvtFilter = { "HLvl1EvtFilter" , 99 , -1 };
G__linked_taginfo G__MdcTrackGDictLN_HTimeLvl1EvtFilter = { "HTimeLvl1EvtFilter" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMdcTrackGDict() {
  G__MdcTrackGDictLN_TClass.tagnum = -1 ;
  G__MdcTrackGDictLN_TBuffer.tagnum = -1 ;
  G__MdcTrackGDictLN_TMemberInspector.tagnum = -1 ;
  G__MdcTrackGDictLN_TObject.tagnum = -1 ;
  G__MdcTrackGDictLN_TNamed.tagnum = -1 ;
  G__MdcTrackGDictLN_TString.tagnum = -1 ;
  G__MdcTrackGDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MdcTrackGDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MdcTrackGDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MdcTrackGDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MdcTrackGDictLN_HMdcTrackGField.tagnum = -1 ;
  G__MdcTrackGDictLN_HMdcTrackGCorrections.tagnum = -1 ;
  G__MdcTrackGDictLN_HMdcTrackGSpline.tagnum = -1 ;
  G__MdcTrackGDictLN_HParSet.tagnum = -1 ;
  G__MdcTrackGDictLN_HParamList.tagnum = -1 ;
  G__MdcTrackGDictLN_HParCond.tagnum = -1 ;
  G__MdcTrackGDictLN_TArrayF.tagnum = -1 ;
  G__MdcTrackGDictLN_HSymMat.tagnum = -1 ;
  G__MdcTrackGDictLN_HSymMat6.tagnum = -1 ;
  G__MdcTrackGDictLN_HMdcSeg.tagnum = -1 ;
  G__MdcTrackGDictLN_HMdcTrackGFieldPar.tagnum = -1 ;
  G__MdcTrackGDictLN_HGeomVector.tagnum = -1 ;
  G__MdcTrackGDictLN_HMdcTrackGCorrPar.tagnum = -1 ;
  G__MdcTrackGDictLN_HMdcKickPlane.tagnum = -1 ;
  G__MdcTrackGDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__MdcTrackGDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__MdcTrackGDictLN_HTask.tagnum = -1 ;
  G__MdcTrackGDictLN_HTaskSet.tagnum = -1 ;
  G__MdcTrackGDictLN_HLocation.tagnum = -1 ;
  G__MdcTrackGDictLN_HCategory.tagnum = -1 ;
  G__MdcTrackGDictLN_HMdcGeomPar.tagnum = -1 ;
  G__MdcTrackGDictLN_HSpecGeomPar.tagnum = -1 ;
  G__MdcTrackGDictLN_HGeomTransform.tagnum = -1 ;
  G__MdcTrackGDictLN_HMdcGetContainers.tagnum = -1 ;
  G__MdcTrackGDictLN_HVertex.tagnum = -1 ;
  G__MdcTrackGDictLN_HEventHeader.tagnum = -1 ;
  G__MdcTrackGDictLN_HContainer.tagnum = -1 ;
  G__MdcTrackGDictLN_HContFact.tagnum = -1 ;
  G__MdcTrackGDictLN_HMdcTrackGContFact.tagnum = -1 ;
  G__MdcTrackGDictLN_HBaseTrack.tagnum = -1 ;
  G__MdcTrackGDictLN_HReconstructor.tagnum = -1 ;
  G__MdcTrackGDictLN_HMetaMatch2.tagnum = -1 ;
  G__MdcTrackGDictLN_HTofCluster.tagnum = -1 ;
  G__MdcTrackGDictLN_HTofHit.tagnum = -1 ;
  G__MdcTrackGDictLN_HRpcCluster.tagnum = -1 ;
  G__MdcTrackGDictLN_HShowerHit.tagnum = -1 ;
  G__MdcTrackGDictLN_HIterator.tagnum = -1 ;
  G__MdcTrackGDictLN_HMdcTrkCand.tagnum = -1 ;
  G__MdcTrackGDictLN_HTofGeomPar.tagnum = -1 ;
  G__MdcTrackGDictLN_HRpcGeomPar.tagnum = -1 ;
  G__MdcTrackGDictLN_HShowerGeometry.tagnum = -1 ;
  G__MdcTrackGDictLN_HMetaMatchPar.tagnum = -1 ;
  G__MdcTrackGDictLN_HMdcSizesCells.tagnum = -1 ;
  G__MdcTrackGDictLN_HMetaMatchF2.tagnum = -1 ;
  G__MdcTrackGDictLN_HSplineTrack.tagnum = -1 ;
  G__MdcTrackGDictLN_HSplinePar.tagnum = -1 ;
  G__MdcTrackGDictLN_HMagnetPar.tagnum = -1 ;
  G__MdcTrackGDictLN_HSplineTrackF2.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MdcTrackGDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__MdcTrackGDictLN_HRungeKutta.tagnum = -1 ;
  G__MdcTrackGDictLN_HRKTrackB.tagnum = -1 ;
  G__MdcTrackGDictLN_HRKTrackBF2.tagnum = -1 ;
  G__MdcTrackGDictLN_HSplineTaskSet.tagnum = -1 ;
  G__MdcTrackGDictLN_HSplineTofClF2.tagnum = -1 ;
  G__MdcTrackGDictLN_HEnergyLossCorrPar.tagnum = -1 ;
  G__MdcTrackGDictLN_HLvl1EvtFilter.tagnum = -1 ;
  G__MdcTrackGDictLN_HTimeLvl1EvtFilter.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMdcTrackGDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TString);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMdcTrackGField),sizeof(HMdcTrackGField),-1,128256,(char*)NULL,G__setup_memvarHMdcTrackGField,G__setup_memfuncHMdcTrackGField);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMdcTrackGCorrections),sizeof(HMdcTrackGCorrections),-1,128768,(char*)NULL,G__setup_memvarHMdcTrackGCorrections,G__setup_memfuncHMdcTrackGCorrections);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMdcTrackGSpline),sizeof(HMdcTrackGSpline),-1,62720,(char*)NULL,G__setup_memvarHMdcTrackGSpline,G__setup_memfuncHMdcTrackGSpline);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HParSet);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HParamList);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HParCond);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HSymMat);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HSymMat6);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMdcSeg);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMdcTrackGFieldPar),sizeof(HMdcTrackGFieldPar),-1,62720,(char*)NULL,G__setup_memvarHMdcTrackGFieldPar,G__setup_memfuncHMdcTrackGFieldPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HGeomVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMdcTrackGCorrPar),sizeof(HMdcTrackGCorrPar),-1,128256,(char*)NULL,G__setup_memvarHMdcTrackGCorrPar,G__setup_memfuncHMdcTrackGCorrPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMdcKickPlane);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HTask);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HTaskSet);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HLocation);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HCategory);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMdcGeomPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HSpecGeomPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HGeomTransform);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMdcGetContainers);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HVertex);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HEventHeader);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HContainer);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMdcTrackGContFact),sizeof(HMdcTrackGContFact),-1,62720,"Factory for all MdcTrackG parameter containers",G__setup_memvarHMdcTrackGContFact,G__setup_memfuncHMdcTrackGContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HBaseTrack),sizeof(HBaseTrack),-1,96000,(char*)NULL,G__setup_memvarHBaseTrack,G__setup_memfuncHBaseTrack);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HReconstructor);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMetaMatch2),sizeof(HMetaMatch2),-1,62720,(char*)NULL,G__setup_memvarHMetaMatch2,G__setup_memfuncHMetaMatch2);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HTofCluster);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HTofHit);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HRpcCluster);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HShowerHit);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HIterator);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMdcTrkCand);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HTofGeomPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HRpcGeomPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HShowerGeometry);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMetaMatchPar),sizeof(HMetaMatchPar),-1,128256,"parameter container for HMetaMatchF",G__setup_memvarHMetaMatchPar,G__setup_memfuncHMetaMatchPar);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMdcSizesCells);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMetaMatchF2),sizeof(HMetaMatchF2),-1,62720,(char*)NULL,G__setup_memvarHMetaMatchF2,G__setup_memfuncHMetaMatchF2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HSplineTrack),sizeof(HSplineTrack),-1,29952,(char*)NULL,G__setup_memvarHSplineTrack,G__setup_memfuncHSplineTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HSplinePar),sizeof(HSplinePar),-1,29952,(char*)NULL,G__setup_memvarHSplinePar,G__setup_memfuncHSplinePar);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HMagnetPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HSplineTrackF2),sizeof(HSplineTrackF2),-1,62720,(char*)NULL,G__setup_memvarHSplineTrackF2,G__setup_memfuncHSplineTrackF2);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_TMatrixTSparseDiaglEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HRungeKutta),sizeof(HRungeKutta),-1,1280,(char*)NULL,G__setup_memvarHRungeKutta,G__setup_memfuncHRungeKutta);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HRKTrackB),sizeof(HRKTrackB),-1,29952,"Runge-Kutta tracking data container",G__setup_memvarHRKTrackB,G__setup_memfuncHRKTrackB);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HRKTrackBF2),sizeof(HRKTrackBF2),-1,62720,"Runge-Kutta reconstructor",G__setup_memvarHRKTrackBF2,G__setup_memfuncHRKTrackBF2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HSplineTaskSet),sizeof(HSplineTaskSet),-1,62720,(char*)NULL,G__setup_memvarHSplineTaskSet,G__setup_memfuncHSplineTaskSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HSplineTofClF2),sizeof(HSplineTofClF2),-1,62720,(char*)NULL,G__setup_memvarHSplineTofClF2,G__setup_memfuncHSplineTofClF2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HEnergyLossCorrPar),sizeof(HEnergyLossCorrPar),-1,62720,"Parameter container for energy loss correction",G__setup_memvarHEnergyLossCorrPar,G__setup_memfuncHEnergyLossCorrPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HLvl1EvtFilter),sizeof(HLvl1EvtFilter),-1,62720,"ROOT extension",G__setup_memvarHLvl1EvtFilter,G__setup_memfuncHLvl1EvtFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcTrackGDictLN_HTimeLvl1EvtFilter),sizeof(HTimeLvl1EvtFilter),-1,62720,"ROOT extension",G__setup_memvarHTimeLvl1EvtFilter,G__setup_memfuncHTimeLvl1EvtFilter);
}
extern "C" void G__cpp_setupMdcTrackGDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMdcTrackGDict()");
  G__set_cpp_environmentMdcTrackGDict();
  G__cpp_setup_tagtableMdcTrackGDict();

  G__cpp_setup_inheritanceMdcTrackGDict();

  G__cpp_setup_typetableMdcTrackGDict();

  G__cpp_setup_memvarMdcTrackGDict();

  G__cpp_setup_memfuncMdcTrackGDict();
  G__cpp_setup_globalMdcTrackGDict();
  G__cpp_setup_funcMdcTrackGDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMdcTrackGDict();
  return;
}
class G__cpp_setup_initMdcTrackGDict {
  public:
    G__cpp_setup_initMdcTrackGDict() { G__add_setup_func("MdcTrackGDict",(G__incsetup)(&G__cpp_setupMdcTrackGDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMdcTrackGDict() { G__remove_setup_func("MdcTrackGDict"); }
};
G__cpp_setup_initMdcTrackGDict G__cpp_setup_initializerMdcTrackGDict;


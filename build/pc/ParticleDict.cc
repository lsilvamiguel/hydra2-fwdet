//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:49:45 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIParticleDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ParticleDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HParticleCut< ::HParticleCand > HParticleCutlEHParticleCandgR;
      #else
      class HParticleCutlEHParticleCandgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HParticleCutlEHParticleCandgR() throw() {};
         int fCutNumber; //a unique cut number to handle this cut
         ::TString fcondition; //formular expression for this object to cut on
         unsigned int fmaxCut; //how many version can be used at max
         ::TDirectory* fsaveDir; //!  remember the actual directory before strting to work (will be restored)
         vector< ULong64_t > fctFail; //count evaluation == kFALSE
         vector< ULong64_t > fctCall; //count all call to the evaluation
         bool fbInverseCut; //default kFALSE , kTRUE will invert selection
         ::HParticleCand* fc; //template class pointer
         ::TTree* fTree; //mini tree on the object to cut on
         ::TTreeFormula* fselect; //formula object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HParticleCut< ::HParticleCandSim > HParticleCutlEHParticleCandSimgR;
      #else
      class HParticleCutlEHParticleCandSimgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HParticleCutlEHParticleCandSimgR() throw() {};
         int fCutNumber; //a unique cut number to handle this cut
         ::TString fcondition; //formular expression for this object to cut on
         unsigned int fmaxCut; //how many version can be used at max
         ::TDirectory* fsaveDir; //!  remember the actual directory before strting to work (will be restored)
         vector< ULong64_t > fctFail; //count evaluation == kFALSE
         vector< ULong64_t > fctCall; //count all call to the evaluation
         bool fbInverseCut; //default kFALSE , kTRUE will invert selection
         ::HParticleCandSim* fc; //template class pointer
         ::TTree* fTree; //mini tree on the object to cut on
         ::TTreeFormula* fselect; //formula object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HParticleCut< ::HParticlePair > HParticleCutlEHParticlePairgR;
      #else
      class HParticleCutlEHParticlePairgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HParticleCutlEHParticlePairgR() throw() {};
         int fCutNumber; //a unique cut number to handle this cut
         ::TString fcondition; //formular expression for this object to cut on
         unsigned int fmaxCut; //how many version can be used at max
         ::TDirectory* fsaveDir; //!  remember the actual directory before strting to work (will be restored)
         vector< ULong64_t > fctFail; //count evaluation == kFALSE
         vector< ULong64_t > fctCall; //count all call to the evaluation
         bool fbInverseCut; //default kFALSE , kTRUE will invert selection
         ::HParticlePair* fc; //template class pointer
         ::TTree* fTree; //mini tree on the object to cut on
         ::TTreeFormula* fselect; //formula object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HParticleCut< ::HParticleGeantPair > HParticleCutlEHParticleGeantPairgR;
      #else
      class HParticleCutlEHParticleGeantPairgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HParticleCutlEHParticleGeantPairgR() throw() {};
         int fCutNumber; //a unique cut number to handle this cut
         ::TString fcondition; //formular expression for this object to cut on
         unsigned int fmaxCut; //how many version can be used at max
         ::TDirectory* fsaveDir; //!  remember the actual directory before strting to work (will be restored)
         vector< ULong64_t > fctFail; //count evaluation == kFALSE
         vector< ULong64_t > fctCall; //count all call to the evaluation
         bool fbInverseCut; //default kFALSE , kTRUE will invert selection
         ::HParticleGeantPair* fc; //template class pointer
         ::TTree* fTree; //mini tree on the object to cut on
         ::TTreeFormula* fselect; //formula object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HParticleCut< ::HParticleGeant > HParticleCutlEHParticleGeantgR;
      #else
      class HParticleCutlEHParticleGeantgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HParticleCutlEHParticleGeantgR() throw() {};
         int fCutNumber; //a unique cut number to handle this cut
         ::TString fcondition; //formular expression for this object to cut on
         unsigned int fmaxCut; //how many version can be used at max
         ::TDirectory* fsaveDir; //!  remember the actual directory before strting to work (will be restored)
         vector< ULong64_t > fctFail; //count evaluation == kFALSE
         vector< ULong64_t > fctCall; //count all call to the evaluation
         bool fbInverseCut; //default kFALSE , kTRUE will invert selection
         ::HParticleGeant* fc; //template class pointer
         ::TTree* fTree; //mini tree on the object to cut on
         ::TTreeFormula* fselect; //formula object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HParticleCut< ::HParticleGeantDecay > HParticleCutlEHParticleGeantDecaygR;
      #else
      class HParticleCutlEHParticleGeantDecaygR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HParticleCutlEHParticleGeantDecaygR() throw() {};
         int fCutNumber; //a unique cut number to handle this cut
         ::TString fcondition; //formular expression for this object to cut on
         unsigned int fmaxCut; //how many version can be used at max
         ::TDirectory* fsaveDir; //!  remember the actual directory before strting to work (will be restored)
         vector< ULong64_t > fctFail; //count evaluation == kFALSE
         vector< ULong64_t > fctCall; //count all call to the evaluation
         bool fbInverseCut; //default kFALSE , kTRUE will invert selection
         ::HParticleGeantDecay* fc; //template class pointer
         ::TTree* fTree; //mini tree on the object to cut on
         ::TTreeFormula* fselect; //formula object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HParticleCut< ::HParticleEvtInfo > HParticleCutlEHParticleEvtInfogR;
      #else
      class HParticleCutlEHParticleEvtInfogR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HParticleCutlEHParticleEvtInfogR() throw() {};
         int fCutNumber; //a unique cut number to handle this cut
         ::TString fcondition; //formular expression for this object to cut on
         unsigned int fmaxCut; //how many version can be used at max
         ::TDirectory* fsaveDir; //!  remember the actual directory before strting to work (will be restored)
         vector< ULong64_t > fctFail; //count evaluation == kFALSE
         vector< ULong64_t > fctCall; //count all call to the evaluation
         bool fbInverseCut; //default kFALSE , kTRUE will invert selection
         ::HParticleEvtInfo* fc; //template class pointer
         ::TTree* fTree; //mini tree on the object to cut on
         ::TTreeFormula* fselect; //formula object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HParticleCut< ::HRichHit > HParticleCutlEHRichHitgR;
      #else
      class HParticleCutlEHRichHitgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HParticleCutlEHRichHitgR() throw() {};
         int fCutNumber; //a unique cut number to handle this cut
         ::TString fcondition; //formular expression for this object to cut on
         unsigned int fmaxCut; //how many version can be used at max
         ::TDirectory* fsaveDir; //!  remember the actual directory before strting to work (will be restored)
         vector< ULong64_t > fctFail; //count evaluation == kFALSE
         vector< ULong64_t > fctCall; //count all call to the evaluation
         bool fbInverseCut; //default kFALSE , kTRUE will invert selection
         ::HRichHit* fc; //template class pointer
         ::TTree* fTree; //mini tree on the object to cut on
         ::TTreeFormula* fselect; //formula object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HParticleCut< ::HRichHitSim > HParticleCutlEHRichHitSimgR;
      #else
      class HParticleCutlEHRichHitSimgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HParticleCutlEHRichHitSimgR() throw() {};
         int fCutNumber; //a unique cut number to handle this cut
         ::TString fcondition; //formular expression for this object to cut on
         unsigned int fmaxCut; //how many version can be used at max
         ::TDirectory* fsaveDir; //!  remember the actual directory before strting to work (will be restored)
         vector< ULong64_t > fctFail; //count evaluation == kFALSE
         vector< ULong64_t > fctCall; //count all call to the evaluation
         bool fbInverseCut; //default kFALSE , kTRUE will invert selection
         ::HRichHitSim* fc; //template class pointer
         ::TTree* fTree; //mini tree on the object to cut on
         ::TTreeFormula* fselect; //formula object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HParticleCut< ::HEventHeader > HParticleCutlEHEventHeadergR;
      #else
      class HParticleCutlEHEventHeadergR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HParticleCutlEHEventHeadergR() throw() {};
         int fCutNumber; //a unique cut number to handle this cut
         ::TString fcondition; //formular expression for this object to cut on
         unsigned int fmaxCut; //how many version can be used at max
         ::TDirectory* fsaveDir; //!  remember the actual directory before strting to work (will be restored)
         vector< ULong64_t > fctFail; //count evaluation == kFALSE
         vector< ULong64_t > fctCall; //count all call to the evaluation
         bool fbInverseCut; //default kFALSE , kTRUE will invert selection
         ::HEventHeader* fc; //template class pointer
         ::TTree* fTree; //mini tree on the object to cut on
         ::TTreeFormula* fselect; //formula object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HParticleCut< ::HVertex > HParticleCutlEHVertexgR;
      #else
      class HParticleCutlEHVertexgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HParticleCutlEHVertexgR() throw() {};
         int fCutNumber; //a unique cut number to handle this cut
         ::TString fcondition; //formular expression for this object to cut on
         unsigned int fmaxCut; //how many version can be used at max
         ::TDirectory* fsaveDir; //!  remember the actual directory before strting to work (will be restored)
         vector< ULong64_t > fctFail; //count evaluation == kFALSE
         vector< ULong64_t > fctCall; //count all call to the evaluation
         bool fbInverseCut; //default kFALSE , kTRUE will invert selection
         ::HVertex* fc; //template class pointer
         ::TTree* fTree; //mini tree on the object to cut on
         ::TTreeFormula* fselect; //formula object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HParticleCut< ::HGeantKine > HParticleCutlEHGeantKinegR;
      #else
      class HParticleCutlEHGeantKinegR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HParticleCutlEHGeantKinegR() throw() {};
         int fCutNumber; //a unique cut number to handle this cut
         ::TString fcondition; //formular expression for this object to cut on
         unsigned int fmaxCut; //how many version can be used at max
         ::TDirectory* fsaveDir; //!  remember the actual directory before strting to work (will be restored)
         vector< ULong64_t > fctFail; //count evaluation == kFALSE
         vector< ULong64_t > fctCall; //count all call to the evaluation
         bool fbInverseCut; //default kFALSE , kTRUE will invert selection
         ::HGeantKine* fc; //template class pointer
         ::TTree* fTree; //mini tree on the object to cut on
         ::TTreeFormula* fselect; //formula object
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace Particle {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void Particle_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("Particle", 0 /*version*/, "././hparticledef.h", 18,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &Particle_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void Particle_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOTDict {
   void HParticleCand_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleCand(void *p = 0);
   static void *newArray_HParticleCand(Long_t size, void *p);
   static void delete_HParticleCand(void *p);
   static void deleteArray_HParticleCand(void *p);
   static void destruct_HParticleCand(void *p);
   static void streamer_HParticleCand(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCand*)
   {
      ::HParticleCand *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCand >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCand", ::HParticleCand::Class_Version(), "././hparticlecand.h", 13,
                  typeid(::HParticleCand), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleCand::Dictionary, isa_proxy, 1,
                  sizeof(::HParticleCand) );
      instance.SetNew(&new_HParticleCand);
      instance.SetNewArray(&newArray_HParticleCand);
      instance.SetDelete(&delete_HParticleCand);
      instance.SetDeleteArray(&deleteArray_HParticleCand);
      instance.SetDestructor(&destruct_HParticleCand);
      instance.SetStreamerFunc(&streamer_HParticleCand);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCand*)
   {
      return GenerateInitInstanceLocal((::HParticleCand*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCand*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCandSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleCandSim(void *p = 0);
   static void *newArray_HParticleCandSim(Long_t size, void *p);
   static void delete_HParticleCandSim(void *p);
   static void deleteArray_HParticleCandSim(void *p);
   static void destruct_HParticleCandSim(void *p);
   static void streamer_HParticleCandSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCandSim*)
   {
      ::HParticleCandSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCandSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCandSim", ::HParticleCandSim::Class_Version(), "././hparticlecandsim.h", 8,
                  typeid(::HParticleCandSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleCandSim::Dictionary, isa_proxy, 1,
                  sizeof(::HParticleCandSim) );
      instance.SetNew(&new_HParticleCandSim);
      instance.SetNewArray(&newArray_HParticleCandSim);
      instance.SetDelete(&delete_HParticleCandSim);
      instance.SetDeleteArray(&deleteArray_HParticleCandSim);
      instance.SetDestructor(&destruct_HParticleCandSim);
      instance.SetStreamerFunc(&streamer_HParticleCandSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCandSim*)
   {
      return GenerateInitInstanceLocal((::HParticleCandSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCandSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleWallHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleWallHit(void *p = 0);
   static void *newArray_HParticleWallHit(Long_t size, void *p);
   static void delete_HParticleWallHit(void *p);
   static void deleteArray_HParticleWallHit(void *p);
   static void destruct_HParticleWallHit(void *p);
   static void streamer_HParticleWallHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleWallHit*)
   {
      ::HParticleWallHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleWallHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleWallHit", ::HParticleWallHit::Class_Version(), "././hparticlewallhit.h", 9,
                  typeid(::HParticleWallHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleWallHit::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleWallHit) );
      instance.SetNew(&new_HParticleWallHit);
      instance.SetNewArray(&newArray_HParticleWallHit);
      instance.SetDelete(&delete_HParticleWallHit);
      instance.SetDeleteArray(&deleteArray_HParticleWallHit);
      instance.SetDestructor(&destruct_HParticleWallHit);
      instance.SetStreamerFunc(&streamer_HParticleWallHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleWallHit*)
   {
      return GenerateInitInstanceLocal((::HParticleWallHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleWallHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleWallHitSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleWallHitSim(void *p = 0);
   static void *newArray_HParticleWallHitSim(Long_t size, void *p);
   static void delete_HParticleWallHitSim(void *p);
   static void deleteArray_HParticleWallHitSim(void *p);
   static void destruct_HParticleWallHitSim(void *p);
   static void streamer_HParticleWallHitSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleWallHitSim*)
   {
      ::HParticleWallHitSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleWallHitSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleWallHitSim", ::HParticleWallHitSim::Class_Version(), "././hparticlewallhitsim.h", 10,
                  typeid(::HParticleWallHitSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleWallHitSim::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleWallHitSim) );
      instance.SetNew(&new_HParticleWallHitSim);
      instance.SetNewArray(&newArray_HParticleWallHitSim);
      instance.SetDelete(&delete_HParticleWallHitSim);
      instance.SetDeleteArray(&deleteArray_HParticleWallHitSim);
      instance.SetDestructor(&destruct_HParticleWallHitSim);
      instance.SetStreamerFunc(&streamer_HParticleWallHitSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleWallHitSim*)
   {
      return GenerateInitInstanceLocal((::HParticleWallHitSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleWallHitSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleCal(void *p = 0);
   static void *newArray_HParticleCal(Long_t size, void *p);
   static void delete_HParticleCal(void *p);
   static void deleteArray_HParticleCal(void *p);
   static void destruct_HParticleCal(void *p);
   static void streamer_HParticleCal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCal*)
   {
      ::HParticleCal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCal", ::HParticleCal::Class_Version(), "././hparticlecal.h", 10,
                  typeid(::HParticleCal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleCal::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCal) );
      instance.SetNew(&new_HParticleCal);
      instance.SetNewArray(&newArray_HParticleCal);
      instance.SetDelete(&delete_HParticleCal);
      instance.SetDeleteArray(&deleteArray_HParticleCal);
      instance.SetDestructor(&destruct_HParticleCal);
      instance.SetStreamerFunc(&streamer_HParticleCal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCal*)
   {
      return GenerateInitInstanceLocal((::HParticleCal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleMdc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleMdc(void *p = 0);
   static void *newArray_HParticleMdc(Long_t size, void *p);
   static void delete_HParticleMdc(void *p);
   static void deleteArray_HParticleMdc(void *p);
   static void destruct_HParticleMdc(void *p);
   static void streamer_HParticleMdc(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleMdc*)
   {
      ::HParticleMdc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleMdc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleMdc", ::HParticleMdc::Class_Version(), "././hparticlemdc.h", 11,
                  typeid(::HParticleMdc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleMdc::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleMdc) );
      instance.SetNew(&new_HParticleMdc);
      instance.SetNewArray(&newArray_HParticleMdc);
      instance.SetDelete(&delete_HParticleMdc);
      instance.SetDeleteArray(&deleteArray_HParticleMdc);
      instance.SetDestructor(&destruct_HParticleMdc);
      instance.SetStreamerFunc(&streamer_HParticleMdc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleMdc*)
   {
      return GenerateInitInstanceLocal((::HParticleMdc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleMdc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleEvtInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleEvtInfo(void *p = 0);
   static void *newArray_HParticleEvtInfo(Long_t size, void *p);
   static void delete_HParticleEvtInfo(void *p);
   static void deleteArray_HParticleEvtInfo(void *p);
   static void destruct_HParticleEvtInfo(void *p);
   static void streamer_HParticleEvtInfo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleEvtInfo*)
   {
      ::HParticleEvtInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleEvtInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleEvtInfo", ::HParticleEvtInfo::Class_Version(), "././hparticleevtinfo.h", 12,
                  typeid(::HParticleEvtInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleEvtInfo::Dictionary, isa_proxy, 1,
                  sizeof(::HParticleEvtInfo) );
      instance.SetNew(&new_HParticleEvtInfo);
      instance.SetNewArray(&newArray_HParticleEvtInfo);
      instance.SetDelete(&delete_HParticleEvtInfo);
      instance.SetDeleteArray(&deleteArray_HParticleEvtInfo);
      instance.SetDestructor(&destruct_HParticleEvtInfo);
      instance.SetStreamerFunc(&streamer_HParticleEvtInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleEvtInfo*)
   {
      return GenerateInitInstanceLocal((::HParticleEvtInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleEvtInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticlePair_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticlePair(void *p = 0);
   static void *newArray_HParticlePair(Long_t size, void *p);
   static void delete_HParticlePair(void *p);
   static void deleteArray_HParticlePair(void *p);
   static void destruct_HParticlePair(void *p);
   static void streamer_HParticlePair(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticlePair*)
   {
      ::HParticlePair *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticlePair >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticlePair", ::HParticlePair::Class_Version(), "././hparticlepair.h", 15,
                  typeid(::HParticlePair), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticlePair::Dictionary, isa_proxy, 0,
                  sizeof(::HParticlePair) );
      instance.SetNew(&new_HParticlePair);
      instance.SetNewArray(&newArray_HParticlePair);
      instance.SetDelete(&delete_HParticlePair);
      instance.SetDeleteArray(&deleteArray_HParticlePair);
      instance.SetDestructor(&destruct_HParticlePair);
      instance.SetStreamerFunc(&streamer_HParticlePair);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticlePair*)
   {
      return GenerateInitInstanceLocal((::HParticlePair*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticlePair*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleTool_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleTool(void *p = 0);
   static void *newArray_HParticleTool(Long_t size, void *p);
   static void delete_HParticleTool(void *p);
   static void deleteArray_HParticleTool(void *p);
   static void destruct_HParticleTool(void *p);
   static void streamer_HParticleTool(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleTool*)
   {
      ::HParticleTool *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleTool >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleTool", ::HParticleTool::Class_Version(), "././hparticletool.h", 47,
                  typeid(::HParticleTool), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleTool::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleTool) );
      instance.SetNew(&new_HParticleTool);
      instance.SetNewArray(&newArray_HParticleTool);
      instance.SetDelete(&delete_HParticleTool);
      instance.SetDeleteArray(&deleteArray_HParticleTool);
      instance.SetDestructor(&destruct_HParticleTool);
      instance.SetStreamerFunc(&streamer_HParticleTool);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleTool*)
   {
      return GenerateInitInstanceLocal((::HParticleTool*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleTool*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void pointers_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_pointers(void *p = 0);
   static void *newArray_pointers(Long_t size, void *p);
   static void delete_pointers(void *p);
   static void deleteArray_pointers(void *p);
   static void destruct_pointers(void *p);
   static void streamer_pointers(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::pointers*)
   {
      ::pointers *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::pointers >(0);
      static ::ROOT::TGenericClassInfo 
         instance("pointers", ::pointers::Class_Version(), "././hparticlestructs.h", 50,
                  typeid(::pointers), ::ROOT::DefineBehavior(ptr, ptr),
                  &::pointers::Dictionary, isa_proxy, 0,
                  sizeof(::pointers) );
      instance.SetNew(&new_pointers);
      instance.SetNewArray(&newArray_pointers);
      instance.SetDelete(&delete_pointers);
      instance.SetDeleteArray(&deleteArray_pointers);
      instance.SetDestructor(&destruct_pointers);
      instance.SetStreamerFunc(&streamer_pointers);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::pointers*)
   {
      return GenerateInitInstanceLocal((::pointers*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::pointers*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void closetrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_closetrack(void *p = 0);
   static void *newArray_closetrack(Long_t size, void *p);
   static void delete_closetrack(void *p);
   static void deleteArray_closetrack(void *p);
   static void destruct_closetrack(void *p);
   static void streamer_closetrack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::closetrack*)
   {
      ::closetrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::closetrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("closetrack", ::closetrack::Class_Version(), "././hparticlestructs.h", 90,
                  typeid(::closetrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::closetrack::Dictionary, isa_proxy, 0,
                  sizeof(::closetrack) );
      instance.SetNew(&new_closetrack);
      instance.SetNewArray(&newArray_closetrack);
      instance.SetDelete(&delete_closetrack);
      instance.SetDeleteArray(&deleteArray_closetrack);
      instance.SetDestructor(&destruct_closetrack);
      instance.SetStreamerFunc(&streamer_closetrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::closetrack*)
   {
      return GenerateInitInstanceLocal((::closetrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::closetrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void closeVec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_closeVec(void *p = 0);
   static void *newArray_closeVec(Long_t size, void *p);
   static void delete_closeVec(void *p);
   static void deleteArray_closeVec(void *p);
   static void destruct_closeVec(void *p);
   static void streamer_closeVec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::closeVec*)
   {
      ::closeVec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::closeVec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("closeVec", ::closeVec::Class_Version(), "././hparticlestructs.h", 102,
                  typeid(::closeVec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::closeVec::Dictionary, isa_proxy, 0,
                  sizeof(::closeVec) );
      instance.SetNew(&new_closeVec);
      instance.SetNewArray(&newArray_closeVec);
      instance.SetDelete(&delete_closeVec);
      instance.SetDeleteArray(&deleteArray_closeVec);
      instance.SetDestructor(&destruct_closeVec);
      instance.SetStreamerFunc(&streamer_closeVec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::closeVec*)
   {
      return GenerateInitInstanceLocal((::closeVec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::closeVec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void trackinfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_trackinfo(void *p = 0);
   static void *newArray_trackinfo(Long_t size, void *p);
   static void delete_trackinfo(void *p);
   static void deleteArray_trackinfo(void *p);
   static void destruct_trackinfo(void *p);
   static void streamer_trackinfo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::trackinfo*)
   {
      ::trackinfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::trackinfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("trackinfo", ::trackinfo::Class_Version(), "././hparticlestructs.h", 138,
                  typeid(::trackinfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::trackinfo::Dictionary, isa_proxy, 0,
                  sizeof(::trackinfo) );
      instance.SetNew(&new_trackinfo);
      instance.SetNewArray(&newArray_trackinfo);
      instance.SetDelete(&delete_trackinfo);
      instance.SetDeleteArray(&deleteArray_trackinfo);
      instance.SetDestructor(&destruct_trackinfo);
      instance.SetStreamerFunc(&streamer_trackinfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::trackinfo*)
   {
      return GenerateInitInstanceLocal((::trackinfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::trackinfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void tracksVec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tracksVec(void *p = 0);
   static void *newArray_tracksVec(Long_t size, void *p);
   static void delete_tracksVec(void *p);
   static void deleteArray_tracksVec(void *p);
   static void destruct_tracksVec(void *p);
   static void streamer_tracksVec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::tracksVec*)
   {
      ::tracksVec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tracksVec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tracksVec", ::tracksVec::Class_Version(), "././hparticlestructs.h", 177,
                  typeid(::tracksVec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::tracksVec::Dictionary, isa_proxy, 0,
                  sizeof(::tracksVec) );
      instance.SetNew(&new_tracksVec);
      instance.SetNewArray(&newArray_tracksVec);
      instance.SetDelete(&delete_tracksVec);
      instance.SetDeleteArray(&deleteArray_tracksVec);
      instance.SetDestructor(&destruct_tracksVec);
      instance.SetStreamerFunc(&streamer_tracksVec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::tracksVec*)
   {
      return GenerateInitInstanceLocal((::tracksVec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tracksVec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void mdc_trk_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_mdc_trk(void *p = 0);
   static void *newArray_mdc_trk(Long_t size, void *p);
   static void delete_mdc_trk(void *p);
   static void deleteArray_mdc_trk(void *p);
   static void destruct_mdc_trk(void *p);
   static void streamer_mdc_trk(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::mdc_trk*)
   {
      ::mdc_trk *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::mdc_trk >(0);
      static ::ROOT::TGenericClassInfo 
         instance("mdc_trk", ::mdc_trk::Class_Version(), "././hparticlestructs.h", 301,
                  typeid(::mdc_trk), ::ROOT::DefineBehavior(ptr, ptr),
                  &::mdc_trk::Dictionary, isa_proxy, 0,
                  sizeof(::mdc_trk) );
      instance.SetNew(&new_mdc_trk);
      instance.SetNewArray(&newArray_mdc_trk);
      instance.SetDelete(&delete_mdc_trk);
      instance.SetDeleteArray(&deleteArray_mdc_trk);
      instance.SetDestructor(&destruct_mdc_trk);
      instance.SetStreamerFunc(&streamer_mdc_trk);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::mdc_trk*)
   {
      return GenerateInitInstanceLocal((::mdc_trk*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::mdc_trk*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void mdc_seg_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_mdc_seg(void *p = 0);
   static void *newArray_mdc_seg(Long_t size, void *p);
   static void delete_mdc_seg(void *p);
   static void deleteArray_mdc_seg(void *p);
   static void destruct_mdc_seg(void *p);
   static void streamer_mdc_seg(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::mdc_seg*)
   {
      ::mdc_seg *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::mdc_seg >(0);
      static ::ROOT::TGenericClassInfo 
         instance("mdc_seg", ::mdc_seg::Class_Version(), "././hparticlestructs.h", 342,
                  typeid(::mdc_seg), ::ROOT::DefineBehavior(ptr, ptr),
                  &::mdc_seg::Dictionary, isa_proxy, 0,
                  sizeof(::mdc_seg) );
      instance.SetNew(&new_mdc_seg);
      instance.SetNewArray(&newArray_mdc_seg);
      instance.SetDelete(&delete_mdc_seg);
      instance.SetDeleteArray(&deleteArray_mdc_seg);
      instance.SetDestructor(&destruct_mdc_seg);
      instance.SetStreamerFunc(&streamer_mdc_seg);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::mdc_seg*)
   {
      return GenerateInitInstanceLocal((::mdc_seg*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::mdc_seg*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void rpc_clst_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_rpc_clst(void *p = 0);
   static void *newArray_rpc_clst(Long_t size, void *p);
   static void delete_rpc_clst(void *p);
   static void deleteArray_rpc_clst(void *p);
   static void destruct_rpc_clst(void *p);
   static void streamer_rpc_clst(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::rpc_clst*)
   {
      ::rpc_clst *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::rpc_clst >(0);
      static ::ROOT::TGenericClassInfo 
         instance("rpc_clst", ::rpc_clst::Class_Version(), "././hparticlestructs.h", 390,
                  typeid(::rpc_clst), ::ROOT::DefineBehavior(ptr, ptr),
                  &::rpc_clst::Dictionary, isa_proxy, 0,
                  sizeof(::rpc_clst) );
      instance.SetNew(&new_rpc_clst);
      instance.SetNewArray(&newArray_rpc_clst);
      instance.SetDelete(&delete_rpc_clst);
      instance.SetDeleteArray(&deleteArray_rpc_clst);
      instance.SetDestructor(&destruct_rpc_clst);
      instance.SetStreamerFunc(&streamer_rpc_clst);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::rpc_clst*)
   {
      return GenerateInitInstanceLocal((::rpc_clst*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rpc_clst*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void tof_hit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tof_hit(void *p = 0);
   static void *newArray_tof_hit(Long_t size, void *p);
   static void delete_tof_hit(void *p);
   static void deleteArray_tof_hit(void *p);
   static void destruct_tof_hit(void *p);
   static void streamer_tof_hit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::tof_hit*)
   {
      ::tof_hit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tof_hit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tof_hit", ::tof_hit::Class_Version(), "././hparticlestructs.h", 457,
                  typeid(::tof_hit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::tof_hit::Dictionary, isa_proxy, 0,
                  sizeof(::tof_hit) );
      instance.SetNew(&new_tof_hit);
      instance.SetNewArray(&newArray_tof_hit);
      instance.SetDelete(&delete_tof_hit);
      instance.SetDeleteArray(&deleteArray_tof_hit);
      instance.SetDestructor(&destruct_tof_hit);
      instance.SetStreamerFunc(&streamer_tof_hit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::tof_hit*)
   {
      return GenerateInitInstanceLocal((::tof_hit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tof_hit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void shower_hit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_shower_hit(void *p = 0);
   static void *newArray_shower_hit(Long_t size, void *p);
   static void delete_shower_hit(void *p);
   static void deleteArray_shower_hit(void *p);
   static void destruct_shower_hit(void *p);
   static void streamer_shower_hit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::shower_hit*)
   {
      ::shower_hit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::shower_hit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("shower_hit", ::shower_hit::Class_Version(), "././hparticlestructs.h", 556,
                  typeid(::shower_hit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::shower_hit::Dictionary, isa_proxy, 0,
                  sizeof(::shower_hit) );
      instance.SetNew(&new_shower_hit);
      instance.SetNewArray(&newArray_shower_hit);
      instance.SetDelete(&delete_shower_hit);
      instance.SetDeleteArray(&deleteArray_shower_hit);
      instance.SetDestructor(&destruct_shower_hit);
      instance.SetStreamerFunc(&streamer_shower_hit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::shower_hit*)
   {
      return GenerateInitInstanceLocal((::shower_hit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::shower_hit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void rich_hit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_rich_hit(void *p = 0);
   static void *newArray_rich_hit(Long_t size, void *p);
   static void delete_rich_hit(void *p);
   static void deleteArray_rich_hit(void *p);
   static void destruct_rich_hit(void *p);
   static void streamer_rich_hit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::rich_hit*)
   {
      ::rich_hit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::rich_hit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("rich_hit", ::rich_hit::Class_Version(), "././hparticlestructs.h", 625,
                  typeid(::rich_hit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::rich_hit::Dictionary, isa_proxy, 0,
                  sizeof(::rich_hit) );
      instance.SetNew(&new_rich_hit);
      instance.SetNewArray(&newArray_rich_hit);
      instance.SetDelete(&delete_rich_hit);
      instance.SetDeleteArray(&deleteArray_rich_hit);
      instance.SetDestructor(&destruct_rich_hit);
      instance.SetStreamerFunc(&streamer_rich_hit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::rich_hit*)
   {
      return GenerateInitInstanceLocal((::rich_hit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rich_hit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void spline_track_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_spline_track(void *p = 0);
   static void *newArray_spline_track(Long_t size, void *p);
   static void delete_spline_track(void *p);
   static void deleteArray_spline_track(void *p);
   static void destruct_spline_track(void *p);
   static void streamer_spline_track(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::spline_track*)
   {
      ::spline_track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::spline_track >(0);
      static ::ROOT::TGenericClassInfo 
         instance("spline_track", ::spline_track::Class_Version(), "././hparticlestructs.h", 691,
                  typeid(::spline_track), ::ROOT::DefineBehavior(ptr, ptr),
                  &::spline_track::Dictionary, isa_proxy, 0,
                  sizeof(::spline_track) );
      instance.SetNew(&new_spline_track);
      instance.SetNewArray(&newArray_spline_track);
      instance.SetDelete(&delete_spline_track);
      instance.SetDeleteArray(&deleteArray_spline_track);
      instance.SetDestructor(&destruct_spline_track);
      instance.SetStreamerFunc(&streamer_spline_track);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::spline_track*)
   {
      return GenerateInitInstanceLocal((::spline_track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::spline_track*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void rk_track_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_rk_track(void *p = 0);
   static void *newArray_rk_track(Long_t size, void *p);
   static void delete_rk_track(void *p);
   static void deleteArray_rk_track(void *p);
   static void destruct_rk_track(void *p);
   static void streamer_rk_track(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::rk_track*)
   {
      ::rk_track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::rk_track >(0);
      static ::ROOT::TGenericClassInfo 
         instance("rk_track", ::rk_track::Class_Version(), "././hparticlestructs.h", 718,
                  typeid(::rk_track), ::ROOT::DefineBehavior(ptr, ptr),
                  &::rk_track::Dictionary, isa_proxy, 0,
                  sizeof(::rk_track) );
      instance.SetNew(&new_rk_track);
      instance.SetNewArray(&newArray_rk_track);
      instance.SetDelete(&delete_rk_track);
      instance.SetDeleteArray(&deleteArray_rk_track);
      instance.SetDestructor(&destruct_rk_track);
      instance.SetStreamerFunc(&streamer_rk_track);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::rk_track*)
   {
      return GenerateInitInstanceLocal((::rk_track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rk_track*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void kal_track_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_kal_track(void *p = 0);
   static void *newArray_kal_track(Long_t size, void *p);
   static void delete_kal_track(void *p);
   static void deleteArray_kal_track(void *p);
   static void destruct_kal_track(void *p);
   static void streamer_kal_track(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::kal_track*)
   {
      ::kal_track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::kal_track >(0);
      static ::ROOT::TGenericClassInfo 
         instance("kal_track", ::kal_track::Class_Version(), "././hparticlestructs.h", 789,
                  typeid(::kal_track), ::ROOT::DefineBehavior(ptr, ptr),
                  &::kal_track::Dictionary, isa_proxy, 0,
                  sizeof(::kal_track) );
      instance.SetNew(&new_kal_track);
      instance.SetNewArray(&newArray_kal_track);
      instance.SetDelete(&delete_kal_track);
      instance.SetDeleteArray(&deleteArray_kal_track);
      instance.SetDestructor(&destruct_kal_track);
      instance.SetStreamerFunc(&streamer_kal_track);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::kal_track*)
   {
      return GenerateInitInstanceLocal((::kal_track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::kal_track*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void candidate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_candidate(void *p = 0);
   static void *newArray_candidate(Long_t size, void *p);
   static void delete_candidate(void *p);
   static void deleteArray_candidate(void *p);
   static void destruct_candidate(void *p);
   static void streamer_candidate(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::candidate*)
   {
      ::candidate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::candidate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("candidate", ::candidate::Class_Version(), "././hparticlestructs.h", 860,
                  typeid(::candidate), ::ROOT::DefineBehavior(ptr, ptr),
                  &::candidate::Dictionary, isa_proxy, 0,
                  sizeof(::candidate) );
      instance.SetNew(&new_candidate);
      instance.SetNewArray(&newArray_candidate);
      instance.SetDelete(&delete_candidate);
      instance.SetDeleteArray(&deleteArray_candidate);
      instance.SetDestructor(&destruct_candidate);
      instance.SetStreamerFunc(&streamer_candidate);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::candidate*)
   {
      return GenerateInitInstanceLocal((::candidate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::candidate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleEvtChara_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleEvtChara(void *p = 0);
   static void *newArray_HParticleEvtChara(Long_t size, void *p);
   static void delete_HParticleEvtChara(void *p);
   static void deleteArray_HParticleEvtChara(void *p);
   static void destruct_HParticleEvtChara(void *p);
   static void streamer_HParticleEvtChara(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleEvtChara*)
   {
      ::HParticleEvtChara *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleEvtChara >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleEvtChara", ::HParticleEvtChara::Class_Version(), "././hparticleevtchara.h", 56,
                  typeid(::HParticleEvtChara), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleEvtChara::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleEvtChara) );
      instance.SetNew(&new_HParticleEvtChara);
      instance.SetNewArray(&newArray_HParticleEvtChara);
      instance.SetDelete(&delete_HParticleEvtChara);
      instance.SetDeleteArray(&deleteArray_HParticleEvtChara);
      instance.SetDestructor(&destruct_HParticleEvtChara);
      instance.SetStreamerFunc(&streamer_HParticleEvtChara);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleEvtChara*)
   {
      return GenerateInitInstanceLocal((::HParticleEvtChara*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleEvtChara*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCandFillerPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleCandFillerPar(void *p = 0);
   static void *newArray_HParticleCandFillerPar(Long_t size, void *p);
   static void delete_HParticleCandFillerPar(void *p);
   static void deleteArray_HParticleCandFillerPar(void *p);
   static void destruct_HParticleCandFillerPar(void *p);
   static void streamer_HParticleCandFillerPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCandFillerPar*)
   {
      ::HParticleCandFillerPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCandFillerPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCandFillerPar", ::HParticleCandFillerPar::Class_Version(), "././hparticlecandfillerpar.h", 12,
                  typeid(::HParticleCandFillerPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleCandFillerPar::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCandFillerPar) );
      instance.SetNew(&new_HParticleCandFillerPar);
      instance.SetNewArray(&newArray_HParticleCandFillerPar);
      instance.SetDelete(&delete_HParticleCandFillerPar);
      instance.SetDeleteArray(&deleteArray_HParticleCandFillerPar);
      instance.SetDestructor(&destruct_HParticleCandFillerPar);
      instance.SetStreamerFunc(&streamer_HParticleCandFillerPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCandFillerPar*)
   {
      return GenerateInitInstanceLocal((::HParticleCandFillerPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCandFillerPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCandFiller_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleCandFiller(void *p = 0);
   static void *newArray_HParticleCandFiller(Long_t size, void *p);
   static void delete_HParticleCandFiller(void *p);
   static void deleteArray_HParticleCandFiller(void *p);
   static void destruct_HParticleCandFiller(void *p);
   static void streamer_HParticleCandFiller(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCandFiller*)
   {
      ::HParticleCandFiller *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCandFiller >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCandFiller", ::HParticleCandFiller::Class_Version(), "././hparticlecandfiller.h", 20,
                  typeid(::HParticleCandFiller), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleCandFiller::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCandFiller) );
      instance.SetNew(&new_HParticleCandFiller);
      instance.SetNewArray(&newArray_HParticleCandFiller);
      instance.SetDelete(&delete_HParticleCandFiller);
      instance.SetDeleteArray(&deleteArray_HParticleCandFiller);
      instance.SetDestructor(&destruct_HParticleCandFiller);
      instance.SetStreamerFunc(&streamer_HParticleCandFiller);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCandFiller*)
   {
      return GenerateInitInstanceLocal((::HParticleCandFiller*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCandFiller*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleTrackSorter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleTrackSorter(void *p = 0);
   static void *newArray_HParticleTrackSorter(Long_t size, void *p);
   static void delete_HParticleTrackSorter(void *p);
   static void deleteArray_HParticleTrackSorter(void *p);
   static void destruct_HParticleTrackSorter(void *p);
   static void streamer_HParticleTrackSorter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleTrackSorter*)
   {
      ::HParticleTrackSorter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleTrackSorter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleTrackSorter", ::HParticleTrackSorter::Class_Version(), "././hparticletracksorter.h", 58,
                  typeid(::HParticleTrackSorter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleTrackSorter::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleTrackSorter) );
      instance.SetNew(&new_HParticleTrackSorter);
      instance.SetNewArray(&newArray_HParticleTrackSorter);
      instance.SetDelete(&delete_HParticleTrackSorter);
      instance.SetDeleteArray(&deleteArray_HParticleTrackSorter);
      instance.SetDestructor(&destruct_HParticleTrackSorter);
      instance.SetStreamerFunc(&streamer_HParticleTrackSorter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleTrackSorter*)
   {
      return GenerateInitInstanceLocal((::HParticleTrackSorter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleTrackSorter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleTrackCleaner_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleTrackCleaner(void *p = 0);
   static void *newArray_HParticleTrackCleaner(Long_t size, void *p);
   static void delete_HParticleTrackCleaner(void *p);
   static void deleteArray_HParticleTrackCleaner(void *p);
   static void destruct_HParticleTrackCleaner(void *p);
   static void streamer_HParticleTrackCleaner(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleTrackCleaner*)
   {
      ::HParticleTrackCleaner *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleTrackCleaner >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleTrackCleaner", ::HParticleTrackCleaner::Class_Version(), "././hparticletrackcleaner.h", 12,
                  typeid(::HParticleTrackCleaner), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleTrackCleaner::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleTrackCleaner) );
      instance.SetNew(&new_HParticleTrackCleaner);
      instance.SetNewArray(&newArray_HParticleTrackCleaner);
      instance.SetDelete(&delete_HParticleTrackCleaner);
      instance.SetDeleteArray(&deleteArray_HParticleTrackCleaner);
      instance.SetDestructor(&destruct_HParticleTrackCleaner);
      instance.SetStreamerFunc(&streamer_HParticleTrackCleaner);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleTrackCleaner*)
   {
      return GenerateInitInstanceLocal((::HParticleTrackCleaner*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleTrackCleaner*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleRunningMeanI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleRunningMeanI(void *p = 0);
   static void *newArray_HParticleRunningMeanI(Long_t size, void *p);
   static void delete_HParticleRunningMeanI(void *p);
   static void deleteArray_HParticleRunningMeanI(void *p);
   static void destruct_HParticleRunningMeanI(void *p);
   static void streamer_HParticleRunningMeanI(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleRunningMeanI*)
   {
      ::HParticleRunningMeanI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleRunningMeanI >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleRunningMeanI", ::HParticleRunningMeanI::Class_Version(), "././hparticlerunningmean.h", 6,
                  typeid(::HParticleRunningMeanI), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleRunningMeanI::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleRunningMeanI) );
      instance.SetNew(&new_HParticleRunningMeanI);
      instance.SetNewArray(&newArray_HParticleRunningMeanI);
      instance.SetDelete(&delete_HParticleRunningMeanI);
      instance.SetDeleteArray(&deleteArray_HParticleRunningMeanI);
      instance.SetDestructor(&destruct_HParticleRunningMeanI);
      instance.SetStreamerFunc(&streamer_HParticleRunningMeanI);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleRunningMeanI*)
   {
      return GenerateInitInstanceLocal((::HParticleRunningMeanI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleRunningMeanI*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleEvtInfoFiller_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleEvtInfoFiller(void *p = 0);
   static void *newArray_HParticleEvtInfoFiller(Long_t size, void *p);
   static void delete_HParticleEvtInfoFiller(void *p);
   static void deleteArray_HParticleEvtInfoFiller(void *p);
   static void destruct_HParticleEvtInfoFiller(void *p);
   static void streamer_HParticleEvtInfoFiller(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleEvtInfoFiller*)
   {
      ::HParticleEvtInfoFiller *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleEvtInfoFiller >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleEvtInfoFiller", ::HParticleEvtInfoFiller::Class_Version(), "././hparticleevtinfofiller.h", 18,
                  typeid(::HParticleEvtInfoFiller), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleEvtInfoFiller::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleEvtInfoFiller) );
      instance.SetNew(&new_HParticleEvtInfoFiller);
      instance.SetNewArray(&newArray_HParticleEvtInfoFiller);
      instance.SetDelete(&delete_HParticleEvtInfoFiller);
      instance.SetDeleteArray(&deleteArray_HParticleEvtInfoFiller);
      instance.SetDestructor(&destruct_HParticleEvtInfoFiller);
      instance.SetStreamerFunc(&streamer_HParticleEvtInfoFiller);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleEvtInfoFiller*)
   {
      return GenerateInitInstanceLocal((::HParticleEvtInfoFiller*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleEvtInfoFiller*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleContFact(void *p = 0);
   static void *newArray_HParticleContFact(Long_t size, void *p);
   static void delete_HParticleContFact(void *p);
   static void deleteArray_HParticleContFact(void *p);
   static void destruct_HParticleContFact(void *p);
   static void streamer_HParticleContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleContFact*)
   {
      ::HParticleContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleContFact", ::HParticleContFact::Class_Version(), "././hparticlecontfact.h", 9,
                  typeid(::HParticleContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleContFact::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleContFact) );
      instance.SetNew(&new_HParticleContFact);
      instance.SetNewArray(&newArray_HParticleContFact);
      instance.SetDelete(&delete_HParticleContFact);
      instance.SetDeleteArray(&deleteArray_HParticleContFact);
      instance.SetDestructor(&destruct_HParticleContFact);
      instance.SetStreamerFunc(&streamer_HParticleContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleContFact*)
   {
      return GenerateInitInstanceLocal((::HParticleContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleStart2HitF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleStart2HitF(void *p = 0);
   static void *newArray_HParticleStart2HitF(Long_t size, void *p);
   static void delete_HParticleStart2HitF(void *p);
   static void deleteArray_HParticleStart2HitF(void *p);
   static void destruct_HParticleStart2HitF(void *p);
   static void streamer_HParticleStart2HitF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleStart2HitF*)
   {
      ::HParticleStart2HitF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleStart2HitF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleStart2HitF", ::HParticleStart2HitF::Class_Version(), "././hparticlestart2hitf.h", 16,
                  typeid(::HParticleStart2HitF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleStart2HitF::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleStart2HitF) );
      instance.SetNew(&new_HParticleStart2HitF);
      instance.SetNewArray(&newArray_HParticleStart2HitF);
      instance.SetDelete(&delete_HParticleStart2HitF);
      instance.SetDeleteArray(&deleteArray_HParticleStart2HitF);
      instance.SetDestructor(&destruct_HParticleStart2HitF);
      instance.SetStreamerFunc(&streamer_HParticleStart2HitF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleStart2HitF*)
   {
      return GenerateInitInstanceLocal((::HParticleStart2HitF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleStart2HitF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleTree_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleTree(void *p = 0);
   static void *newArray_HParticleTree(Long_t size, void *p);
   static void delete_HParticleTree(void *p);
   static void deleteArray_HParticleTree(void *p);
   static void destruct_HParticleTree(void *p);
   static void streamer_HParticleTree(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleTree*)
   {
      ::HParticleTree *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleTree >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleTree", ::HParticleTree::Class_Version(), "././hparticletree.h", 21,
                  typeid(::HParticleTree), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleTree::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleTree) );
      instance.SetNew(&new_HParticleTree);
      instance.SetNewArray(&newArray_HParticleTree);
      instance.SetDelete(&delete_HParticleTree);
      instance.SetDeleteArray(&deleteArray_HParticleTree);
      instance.SetDestructor(&destruct_HParticleTree);
      instance.SetStreamerFunc(&streamer_HParticleTree);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleTree*)
   {
      return GenerateInitInstanceLocal((::HParticleTree*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleTree*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleAngleCor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleAngleCor(void *p = 0);
   static void *newArray_HParticleAngleCor(Long_t size, void *p);
   static void delete_HParticleAngleCor(void *p);
   static void deleteArray_HParticleAngleCor(void *p);
   static void destruct_HParticleAngleCor(void *p);
   static void streamer_HParticleAngleCor(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleAngleCor*)
   {
      ::HParticleAngleCor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleAngleCor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleAngleCor", ::HParticleAngleCor::Class_Version(), "././hparticleanglecor.h", 20,
                  typeid(::HParticleAngleCor), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleAngleCor::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleAngleCor) );
      instance.SetNew(&new_HParticleAngleCor);
      instance.SetNewArray(&newArray_HParticleAngleCor);
      instance.SetDelete(&delete_HParticleAngleCor);
      instance.SetDeleteArray(&deleteArray_HParticleAngleCor);
      instance.SetDestructor(&destruct_HParticleAngleCor);
      instance.SetStreamerFunc(&streamer_HParticleAngleCor);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleAngleCor*)
   {
      return GenerateInitInstanceLocal((::HParticleAngleCor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleAngleCor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleGeantDecay_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleGeantDecay(void *p = 0);
   static void *newArray_HParticleGeantDecay(Long_t size, void *p);
   static void delete_HParticleGeantDecay(void *p);
   static void deleteArray_HParticleGeantDecay(void *p);
   static void destruct_HParticleGeantDecay(void *p);
   static void streamer_HParticleGeantDecay(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleGeantDecay*)
   {
      ::HParticleGeantDecay *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleGeantDecay >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleGeantDecay", ::HParticleGeantDecay::Class_Version(), "././hparticlegeantdecay.h", 14,
                  typeid(::HParticleGeantDecay), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleGeantDecay::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleGeantDecay) );
      instance.SetNew(&new_HParticleGeantDecay);
      instance.SetNewArray(&newArray_HParticleGeantDecay);
      instance.SetDelete(&delete_HParticleGeantDecay);
      instance.SetDeleteArray(&deleteArray_HParticleGeantDecay);
      instance.SetDestructor(&destruct_HParticleGeantDecay);
      instance.SetStreamerFunc(&streamer_HParticleGeantDecay);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleGeantDecay*)
   {
      return GenerateInitInstanceLocal((::HParticleGeantDecay*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleGeantDecay*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleGeant_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleGeant(void *p = 0);
   static void *newArray_HParticleGeant(Long_t size, void *p);
   static void delete_HParticleGeant(void *p);
   static void deleteArray_HParticleGeant(void *p);
   static void destruct_HParticleGeant(void *p);
   static void streamer_HParticleGeant(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleGeant*)
   {
      ::HParticleGeant *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleGeant >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleGeant", ::HParticleGeant::Class_Version(), "././hparticlegeant.h", 19,
                  typeid(::HParticleGeant), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleGeant::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleGeant) );
      instance.SetNew(&new_HParticleGeant);
      instance.SetNewArray(&newArray_HParticleGeant);
      instance.SetDelete(&delete_HParticleGeant);
      instance.SetDeleteArray(&deleteArray_HParticleGeant);
      instance.SetDestructor(&destruct_HParticleGeant);
      instance.SetStreamerFunc(&streamer_HParticleGeant);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleGeant*)
   {
      return GenerateInitInstanceLocal((::HParticleGeant*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleGeant*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleGeantEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleGeantEvent(void *p = 0);
   static void *newArray_HParticleGeantEvent(Long_t size, void *p);
   static void delete_HParticleGeantEvent(void *p);
   static void deleteArray_HParticleGeantEvent(void *p);
   static void destruct_HParticleGeantEvent(void *p);
   static void streamer_HParticleGeantEvent(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleGeantEvent*)
   {
      ::HParticleGeantEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleGeantEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleGeantEvent", ::HParticleGeantEvent::Class_Version(), "././hparticlegeantevent.h", 19,
                  typeid(::HParticleGeantEvent), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleGeantEvent::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleGeantEvent) );
      instance.SetNew(&new_HParticleGeantEvent);
      instance.SetNewArray(&newArray_HParticleGeantEvent);
      instance.SetDelete(&delete_HParticleGeantEvent);
      instance.SetDeleteArray(&deleteArray_HParticleGeantEvent);
      instance.SetDestructor(&destruct_HParticleGeantEvent);
      instance.SetStreamerFunc(&streamer_HParticleGeantEvent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleGeantEvent*)
   {
      return GenerateInitInstanceLocal((::HParticleGeantEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleGeantEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleGeantPair_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleGeantPair(void *p = 0);
   static void *newArray_HParticleGeantPair(Long_t size, void *p);
   static void delete_HParticleGeantPair(void *p);
   static void deleteArray_HParticleGeantPair(void *p);
   static void destruct_HParticleGeantPair(void *p);
   static void streamer_HParticleGeantPair(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleGeantPair*)
   {
      ::HParticleGeantPair *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleGeantPair >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleGeantPair", ::HParticleGeantPair::Class_Version(), "././hparticlegeantpair.h", 9,
                  typeid(::HParticleGeantPair), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleGeantPair::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleGeantPair) );
      instance.SetNew(&new_HParticleGeantPair);
      instance.SetNewArray(&newArray_HParticleGeantPair);
      instance.SetDelete(&delete_HParticleGeantPair);
      instance.SetDeleteArray(&deleteArray_HParticleGeantPair);
      instance.SetDestructor(&destruct_HParticleGeantPair);
      instance.SetStreamerFunc(&streamer_HParticleGeantPair);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleGeantPair*)
   {
      return GenerateInitInstanceLocal((::HParticleGeantPair*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleGeantPair*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleDraw_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleDraw(void *p = 0);
   static void *newArray_HParticleDraw(Long_t size, void *p);
   static void delete_HParticleDraw(void *p);
   static void deleteArray_HParticleDraw(void *p);
   static void destruct_HParticleDraw(void *p);
   static void streamer_HParticleDraw(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleDraw*)
   {
      ::HParticleDraw *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleDraw >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleDraw", ::HParticleDraw::Class_Version(), "././hparticlepairdraw.h", 22,
                  typeid(::HParticleDraw), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleDraw::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleDraw) );
      instance.SetNew(&new_HParticleDraw);
      instance.SetNewArray(&newArray_HParticleDraw);
      instance.SetDelete(&delete_HParticleDraw);
      instance.SetDeleteArray(&deleteArray_HParticleDraw);
      instance.SetDestructor(&destruct_HParticleDraw);
      instance.SetStreamerFunc(&streamer_HParticleDraw);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleDraw*)
   {
      return GenerateInitInstanceLocal((::HParticleDraw*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleDraw*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticlePairDraw_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticlePairDraw(void *p = 0);
   static void *newArray_HParticlePairDraw(Long_t size, void *p);
   static void delete_HParticlePairDraw(void *p);
   static void deleteArray_HParticlePairDraw(void *p);
   static void destruct_HParticlePairDraw(void *p);
   static void streamer_HParticlePairDraw(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticlePairDraw*)
   {
      ::HParticlePairDraw *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticlePairDraw >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticlePairDraw", ::HParticlePairDraw::Class_Version(), "././hparticlepairdraw.h", 48,
                  typeid(::HParticlePairDraw), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticlePairDraw::Dictionary, isa_proxy, 0,
                  sizeof(::HParticlePairDraw) );
      instance.SetNew(&new_HParticlePairDraw);
      instance.SetNewArray(&newArray_HParticlePairDraw);
      instance.SetDelete(&delete_HParticlePairDraw);
      instance.SetDeleteArray(&deleteArray_HParticlePairDraw);
      instance.SetDestructor(&destruct_HParticlePairDraw);
      instance.SetStreamerFunc(&streamer_HParticlePairDraw);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticlePairDraw*)
   {
      return GenerateInitInstanceLocal((::HParticlePairDraw*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticlePairDraw*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticlePairMaker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticlePairMaker(void *p = 0);
   static void *newArray_HParticlePairMaker(Long_t size, void *p);
   static void delete_HParticlePairMaker(void *p);
   static void deleteArray_HParticlePairMaker(void *p);
   static void destruct_HParticlePairMaker(void *p);
   static void streamer_HParticlePairMaker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticlePairMaker*)
   {
      ::HParticlePairMaker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticlePairMaker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticlePairMaker", ::HParticlePairMaker::Class_Version(), "././hparticlepairmaker.h", 25,
                  typeid(::HParticlePairMaker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticlePairMaker::Dictionary, isa_proxy, 0,
                  sizeof(::HParticlePairMaker) );
      instance.SetNew(&new_HParticlePairMaker);
      instance.SetNewArray(&newArray_HParticlePairMaker);
      instance.SetDelete(&delete_HParticlePairMaker);
      instance.SetDeleteArray(&deleteArray_HParticlePairMaker);
      instance.SetDestructor(&destruct_HParticlePairMaker);
      instance.SetStreamerFunc(&streamer_HParticlePairMaker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticlePairMaker*)
   {
      return GenerateInitInstanceLocal((::HParticlePairMaker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticlePairMaker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleBooker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleBooker(void *p = 0);
   static void *newArray_HParticleBooker(Long_t size, void *p);
   static void delete_HParticleBooker(void *p);
   static void deleteArray_HParticleBooker(void *p);
   static void destruct_HParticleBooker(void *p);
   static void streamer_HParticleBooker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleBooker*)
   {
      ::HParticleBooker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleBooker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleBooker", ::HParticleBooker::Class_Version(), "././hparticlebooker.h", 33,
                  typeid(::HParticleBooker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleBooker::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleBooker) );
      instance.SetNew(&new_HParticleBooker);
      instance.SetNewArray(&newArray_HParticleBooker);
      instance.SetDelete(&delete_HParticleBooker);
      instance.SetDeleteArray(&deleteArray_HParticleBooker);
      instance.SetDestructor(&destruct_HParticleBooker);
      instance.SetStreamerFunc(&streamer_HParticleBooker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleBooker*)
   {
      return GenerateInitInstanceLocal((::HParticleBooker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleBooker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleVertexFind_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleVertexFind(void *p = 0);
   static void *newArray_HParticleVertexFind(Long_t size, void *p);
   static void delete_HParticleVertexFind(void *p);
   static void deleteArray_HParticleVertexFind(void *p);
   static void destruct_HParticleVertexFind(void *p);
   static void streamer_HParticleVertexFind(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleVertexFind*)
   {
      ::HParticleVertexFind *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleVertexFind >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleVertexFind", ::HParticleVertexFind::Class_Version(), "././hparticlevertexfind.h", 21,
                  typeid(::HParticleVertexFind), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleVertexFind::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleVertexFind) );
      instance.SetNew(&new_HParticleVertexFind);
      instance.SetNewArray(&newArray_HParticleVertexFind);
      instance.SetDelete(&delete_HParticleVertexFind);
      instance.SetDeleteArray(&deleteArray_HParticleVertexFind);
      instance.SetDestructor(&destruct_HParticleVertexFind);
      instance.SetStreamerFunc(&streamer_HParticleVertexFind);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleVertexFind*)
   {
      return GenerateInitInstanceLocal((::HParticleVertexFind*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleVertexFind*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCutRange_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleCutRange(void *p = 0);
   static void *newArray_HParticleCutRange(Long_t size, void *p);
   static void delete_HParticleCutRange(void *p);
   static void deleteArray_HParticleCutRange(void *p);
   static void destruct_HParticleCutRange(void *p);
   static void streamer_HParticleCutRange(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCutRange*)
   {
      ::HParticleCutRange *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCutRange >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCutRange", ::HParticleCutRange::Class_Version(), "././hparticlecutrange.h", 11,
                  typeid(::HParticleCutRange), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleCutRange::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCutRange) );
      instance.SetNew(&new_HParticleCutRange);
      instance.SetNewArray(&newArray_HParticleCutRange);
      instance.SetDelete(&delete_HParticleCutRange);
      instance.SetDeleteArray(&deleteArray_HParticleCutRange);
      instance.SetDestructor(&destruct_HParticleCutRange);
      instance.SetStreamerFunc(&streamer_HParticleCutRange);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCutRange*)
   {
      return GenerateInitInstanceLocal((::HParticleCutRange*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCutRange*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleBtPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleBtPar(void *p = 0);
   static void *newArray_HParticleBtPar(Long_t size, void *p);
   static void delete_HParticleBtPar(void *p);
   static void deleteArray_HParticleBtPar(void *p);
   static void destruct_HParticleBtPar(void *p);
   static void streamer_HParticleBtPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleBtPar*)
   {
      ::HParticleBtPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleBtPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleBtPar", ::HParticleBtPar::Class_Version(), "././hparticlebtpar.h", 13,
                  typeid(::HParticleBtPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleBtPar::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleBtPar) );
      instance.SetNew(&new_HParticleBtPar);
      instance.SetNewArray(&newArray_HParticleBtPar);
      instance.SetDelete(&delete_HParticleBtPar);
      instance.SetDeleteArray(&deleteArray_HParticleBtPar);
      instance.SetDestructor(&destruct_HParticleBtPar);
      instance.SetStreamerFunc(&streamer_HParticleBtPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleBtPar*)
   {
      return GenerateInitInstanceLocal((::HParticleBtPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleBtPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleBtRingInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleBtRingInfo(void *p = 0);
   static void *newArray_HParticleBtRingInfo(Long_t size, void *p);
   static void delete_HParticleBtRingInfo(void *p);
   static void deleteArray_HParticleBtRingInfo(void *p);
   static void destruct_HParticleBtRingInfo(void *p);
   static void streamer_HParticleBtRingInfo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleBtRingInfo*)
   {
      ::HParticleBtRingInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleBtRingInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleBtRingInfo", ::HParticleBtRingInfo::Class_Version(), "././hparticlebtringinfo.h", 7,
                  typeid(::HParticleBtRingInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleBtRingInfo::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleBtRingInfo) );
      instance.SetNew(&new_HParticleBtRingInfo);
      instance.SetNewArray(&newArray_HParticleBtRingInfo);
      instance.SetDelete(&delete_HParticleBtRingInfo);
      instance.SetDeleteArray(&deleteArray_HParticleBtRingInfo);
      instance.SetDestructor(&destruct_HParticleBtRingInfo);
      instance.SetStreamerFunc(&streamer_HParticleBtRingInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleBtRingInfo*)
   {
      return GenerateInitInstanceLocal((::HParticleBtRingInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleBtRingInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleBtRingF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleBtRingF(void *p = 0);
   static void *newArray_HParticleBtRingF(Long_t size, void *p);
   static void delete_HParticleBtRingF(void *p);
   static void deleteArray_HParticleBtRingF(void *p);
   static void destruct_HParticleBtRingF(void *p);
   static void streamer_HParticleBtRingF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleBtRingF*)
   {
      ::HParticleBtRingF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleBtRingF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleBtRingF", ::HParticleBtRingF::Class_Version(), "././hparticlebtringf.h", 19,
                  typeid(::HParticleBtRingF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleBtRingF::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleBtRingF) );
      instance.SetNew(&new_HParticleBtRingF);
      instance.SetNewArray(&newArray_HParticleBtRingF);
      instance.SetDelete(&delete_HParticleBtRingF);
      instance.SetDeleteArray(&deleteArray_HParticleBtRingF);
      instance.SetDestructor(&destruct_HParticleBtRingF);
      instance.SetStreamerFunc(&streamer_HParticleBtRingF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleBtRingF*)
   {
      return GenerateInitInstanceLocal((::HParticleBtRingF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleBtRingF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleBtClusterF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleBtClusterF(void *p = 0);
   static void *newArray_HParticleBtClusterF(Long_t size, void *p);
   static void delete_HParticleBtClusterF(void *p);
   static void deleteArray_HParticleBtClusterF(void *p);
   static void destruct_HParticleBtClusterF(void *p);
   static void streamer_HParticleBtClusterF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleBtClusterF*)
   {
      ::HParticleBtClusterF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleBtClusterF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleBtClusterF", ::HParticleBtClusterF::Class_Version(), "././hparticlebtclusterf.h", 15,
                  typeid(::HParticleBtClusterF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleBtClusterF::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleBtClusterF) );
      instance.SetNew(&new_HParticleBtClusterF);
      instance.SetNewArray(&newArray_HParticleBtClusterF);
      instance.SetDelete(&delete_HParticleBtClusterF);
      instance.SetDeleteArray(&deleteArray_HParticleBtClusterF);
      instance.SetDestructor(&destruct_HParticleBtClusterF);
      instance.SetStreamerFunc(&streamer_HParticleBtClusterF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleBtClusterF*)
   {
      return GenerateInitInstanceLocal((::HParticleBtClusterF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleBtClusterF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleBtRing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleBtRing(void *p = 0);
   static void *newArray_HParticleBtRing(Long_t size, void *p);
   static void delete_HParticleBtRing(void *p);
   static void deleteArray_HParticleBtRing(void *p);
   static void destruct_HParticleBtRing(void *p);
   static void streamer_HParticleBtRing(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleBtRing*)
   {
      ::HParticleBtRing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleBtRing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleBtRing", ::HParticleBtRing::Class_Version(), "././hparticlebtring.h", 7,
                  typeid(::HParticleBtRing), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleBtRing::Dictionary, isa_proxy, 1,
                  sizeof(::HParticleBtRing) );
      instance.SetNew(&new_HParticleBtRing);
      instance.SetNewArray(&newArray_HParticleBtRing);
      instance.SetDelete(&delete_HParticleBtRing);
      instance.SetDeleteArray(&deleteArray_HParticleBtRing);
      instance.SetDestructor(&destruct_HParticleBtRing);
      instance.SetStreamerFunc(&streamer_HParticleBtRing);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleBtRing*)
   {
      return GenerateInitInstanceLocal((::HParticleBtRing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleBtRing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleBt_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleBt(void *p = 0);
   static void *newArray_HParticleBt(Long_t size, void *p);
   static void delete_HParticleBt(void *p);
   static void deleteArray_HParticleBt(void *p);
   static void destruct_HParticleBt(void *p);
   static void streamer_HParticleBt(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleBt*)
   {
      ::HParticleBt *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleBt >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleBt", ::HParticleBt::Class_Version(), "././hparticlebt.h", 14,
                  typeid(::HParticleBt), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleBt::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleBt) );
      instance.SetNew(&new_HParticleBt);
      instance.SetNewArray(&newArray_HParticleBt);
      instance.SetDelete(&delete_HParticleBt);
      instance.SetDeleteArray(&deleteArray_HParticleBt);
      instance.SetDestructor(&destruct_HParticleBt);
      instance.SetStreamerFunc(&streamer_HParticleBt);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleBt*)
   {
      return GenerateInitInstanceLocal((::HParticleBt*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleBt*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleBtAngleTrafo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleBtAngleTrafo(void *p = 0);
   static void *newArray_HParticleBtAngleTrafo(Long_t size, void *p);
   static void delete_HParticleBtAngleTrafo(void *p);
   static void deleteArray_HParticleBtAngleTrafo(void *p);
   static void destruct_HParticleBtAngleTrafo(void *p);
   static void streamer_HParticleBtAngleTrafo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleBtAngleTrafo*)
   {
      ::HParticleBtAngleTrafo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleBtAngleTrafo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleBtAngleTrafo", ::HParticleBtAngleTrafo::Class_Version(), "././hparticlebtangletrafo.h", 7,
                  typeid(::HParticleBtAngleTrafo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleBtAngleTrafo::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleBtAngleTrafo) );
      instance.SetNew(&new_HParticleBtAngleTrafo);
      instance.SetNewArray(&newArray_HParticleBtAngleTrafo);
      instance.SetDelete(&delete_HParticleBtAngleTrafo);
      instance.SetDeleteArray(&deleteArray_HParticleBtAngleTrafo);
      instance.SetDestructor(&destruct_HParticleBtAngleTrafo);
      instance.SetStreamerFunc(&streamer_HParticleBtAngleTrafo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleBtAngleTrafo*)
   {
      return GenerateInitInstanceLocal((::HParticleBtAngleTrafo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleBtAngleTrafo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticlePathLengthCorr_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticlePathLengthCorr(void *p = 0);
   static void *newArray_HParticlePathLengthCorr(Long_t size, void *p);
   static void delete_HParticlePathLengthCorr(void *p);
   static void deleteArray_HParticlePathLengthCorr(void *p);
   static void destruct_HParticlePathLengthCorr(void *p);
   static void streamer_HParticlePathLengthCorr(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticlePathLengthCorr*)
   {
      ::HParticlePathLengthCorr *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticlePathLengthCorr >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticlePathLengthCorr", ::HParticlePathLengthCorr::Class_Version(), "././hparticlepathlengthcorr.h", 14,
                  typeid(::HParticlePathLengthCorr), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticlePathLengthCorr::Dictionary, isa_proxy, 0,
                  sizeof(::HParticlePathLengthCorr) );
      instance.SetNew(&new_HParticlePathLengthCorr);
      instance.SetNewArray(&newArray_HParticlePathLengthCorr);
      instance.SetDelete(&delete_HParticlePathLengthCorr);
      instance.SetDeleteArray(&deleteArray_HParticlePathLengthCorr);
      instance.SetDestructor(&destruct_HParticlePathLengthCorr);
      instance.SetStreamerFunc(&streamer_HParticlePathLengthCorr);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticlePathLengthCorr*)
   {
      return GenerateInitInstanceLocal((::HParticlePathLengthCorr*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticlePathLengthCorr*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleT0Reco_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HParticleT0Reco(void *p = 0);
   static void *newArray_HParticleT0Reco(Long_t size, void *p);
   static void delete_HParticleT0Reco(void *p);
   static void deleteArray_HParticleT0Reco(void *p);
   static void destruct_HParticleT0Reco(void *p);
   static void streamer_HParticleT0Reco(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleT0Reco*)
   {
      ::HParticleT0Reco *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleT0Reco >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleT0Reco", ::HParticleT0Reco::Class_Version(), "././hparticlet0reco.h", 32,
                  typeid(::HParticleT0Reco), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HParticleT0Reco::Dictionary, isa_proxy, 0,
                  sizeof(::HParticleT0Reco) );
      instance.SetNew(&new_HParticleT0Reco);
      instance.SetNewArray(&newArray_HParticleT0Reco);
      instance.SetDelete(&delete_HParticleT0Reco);
      instance.SetDeleteArray(&deleteArray_HParticleT0Reco);
      instance.SetDestructor(&destruct_HParticleT0Reco);
      instance.SetStreamerFunc(&streamer_HParticleT0Reco);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleT0Reco*)
   {
      return GenerateInitInstanceLocal((::HParticleT0Reco*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleT0Reco*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCutlEHParticleCandgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HParticleCutlEHParticleCandgR_Dictionary();
   static void delete_HParticleCutlEHParticleCandgR(void *p);
   static void deleteArray_HParticleCutlEHParticleCandgR(void *p);
   static void destruct_HParticleCutlEHParticleCandgR(void *p);
   static void streamer_HParticleCutlEHParticleCandgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCut<HParticleCand>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HParticleCut<HParticleCand>) == sizeof( ::ROOTShadow::Shadow::HParticleCutlEHParticleCandgR));
      ::HParticleCut<HParticleCand> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCut<HParticleCand> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCut<HParticleCand>", ::HParticleCut<HParticleCand>::Class_Version(), "././hparticlecut.h", 20,
                  typeid(::HParticleCut<HParticleCand>), ::ROOT::DefineBehavior(ptr, ptr),
                  &HParticleCutlEHParticleCandgR_Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCut<HParticleCand>) );
      instance.SetDelete(&delete_HParticleCutlEHParticleCandgR);
      instance.SetDeleteArray(&deleteArray_HParticleCutlEHParticleCandgR);
      instance.SetDestructor(&destruct_HParticleCutlEHParticleCandgR);
      instance.SetStreamerFunc(&streamer_HParticleCutlEHParticleCandgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCut<HParticleCand>*)
   {
      return GenerateInitInstanceLocal((::HParticleCut<HParticleCand>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCut<HParticleCand>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HParticleCutlEHParticleCandgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleCand>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCutlEHParticleCandSimgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HParticleCutlEHParticleCandSimgR_Dictionary();
   static void delete_HParticleCutlEHParticleCandSimgR(void *p);
   static void deleteArray_HParticleCutlEHParticleCandSimgR(void *p);
   static void destruct_HParticleCutlEHParticleCandSimgR(void *p);
   static void streamer_HParticleCutlEHParticleCandSimgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCut<HParticleCandSim>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HParticleCut<HParticleCandSim>) == sizeof( ::ROOTShadow::Shadow::HParticleCutlEHParticleCandSimgR));
      ::HParticleCut<HParticleCandSim> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCut<HParticleCandSim> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCut<HParticleCandSim>", ::HParticleCut<HParticleCandSim>::Class_Version(), "././hparticlecut.h", 20,
                  typeid(::HParticleCut<HParticleCandSim>), ::ROOT::DefineBehavior(ptr, ptr),
                  &HParticleCutlEHParticleCandSimgR_Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCut<HParticleCandSim>) );
      instance.SetDelete(&delete_HParticleCutlEHParticleCandSimgR);
      instance.SetDeleteArray(&deleteArray_HParticleCutlEHParticleCandSimgR);
      instance.SetDestructor(&destruct_HParticleCutlEHParticleCandSimgR);
      instance.SetStreamerFunc(&streamer_HParticleCutlEHParticleCandSimgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCut<HParticleCandSim>*)
   {
      return GenerateInitInstanceLocal((::HParticleCut<HParticleCandSim>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCut<HParticleCandSim>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HParticleCutlEHParticleCandSimgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleCandSim>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCutlEHParticlePairgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HParticleCutlEHParticlePairgR_Dictionary();
   static void delete_HParticleCutlEHParticlePairgR(void *p);
   static void deleteArray_HParticleCutlEHParticlePairgR(void *p);
   static void destruct_HParticleCutlEHParticlePairgR(void *p);
   static void streamer_HParticleCutlEHParticlePairgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCut<HParticlePair>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HParticleCut<HParticlePair>) == sizeof( ::ROOTShadow::Shadow::HParticleCutlEHParticlePairgR));
      ::HParticleCut<HParticlePair> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCut<HParticlePair> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCut<HParticlePair>", ::HParticleCut<HParticlePair>::Class_Version(), "././hparticlecut.h", 20,
                  typeid(::HParticleCut<HParticlePair>), ::ROOT::DefineBehavior(ptr, ptr),
                  &HParticleCutlEHParticlePairgR_Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCut<HParticlePair>) );
      instance.SetDelete(&delete_HParticleCutlEHParticlePairgR);
      instance.SetDeleteArray(&deleteArray_HParticleCutlEHParticlePairgR);
      instance.SetDestructor(&destruct_HParticleCutlEHParticlePairgR);
      instance.SetStreamerFunc(&streamer_HParticleCutlEHParticlePairgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCut<HParticlePair>*)
   {
      return GenerateInitInstanceLocal((::HParticleCut<HParticlePair>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCut<HParticlePair>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HParticleCutlEHParticlePairgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticlePair>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCutlEHParticleGeantPairgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HParticleCutlEHParticleGeantPairgR_Dictionary();
   static void delete_HParticleCutlEHParticleGeantPairgR(void *p);
   static void deleteArray_HParticleCutlEHParticleGeantPairgR(void *p);
   static void destruct_HParticleCutlEHParticleGeantPairgR(void *p);
   static void streamer_HParticleCutlEHParticleGeantPairgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCut<HParticleGeantPair>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HParticleCut<HParticleGeantPair>) == sizeof( ::ROOTShadow::Shadow::HParticleCutlEHParticleGeantPairgR));
      ::HParticleCut<HParticleGeantPair> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCut<HParticleGeantPair> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCut<HParticleGeantPair>", ::HParticleCut<HParticleGeantPair>::Class_Version(), "././hparticlecut.h", 20,
                  typeid(::HParticleCut<HParticleGeantPair>), ::ROOT::DefineBehavior(ptr, ptr),
                  &HParticleCutlEHParticleGeantPairgR_Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCut<HParticleGeantPair>) );
      instance.SetDelete(&delete_HParticleCutlEHParticleGeantPairgR);
      instance.SetDeleteArray(&deleteArray_HParticleCutlEHParticleGeantPairgR);
      instance.SetDestructor(&destruct_HParticleCutlEHParticleGeantPairgR);
      instance.SetStreamerFunc(&streamer_HParticleCutlEHParticleGeantPairgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCut<HParticleGeantPair>*)
   {
      return GenerateInitInstanceLocal((::HParticleCut<HParticleGeantPair>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeantPair>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HParticleCutlEHParticleGeantPairgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeantPair>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCutlEHParticleGeantgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HParticleCutlEHParticleGeantgR_Dictionary();
   static void delete_HParticleCutlEHParticleGeantgR(void *p);
   static void deleteArray_HParticleCutlEHParticleGeantgR(void *p);
   static void destruct_HParticleCutlEHParticleGeantgR(void *p);
   static void streamer_HParticleCutlEHParticleGeantgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCut<HParticleGeant>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HParticleCut<HParticleGeant>) == sizeof( ::ROOTShadow::Shadow::HParticleCutlEHParticleGeantgR));
      ::HParticleCut<HParticleGeant> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCut<HParticleGeant> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCut<HParticleGeant>", ::HParticleCut<HParticleGeant>::Class_Version(), "././hparticlecut.h", 20,
                  typeid(::HParticleCut<HParticleGeant>), ::ROOT::DefineBehavior(ptr, ptr),
                  &HParticleCutlEHParticleGeantgR_Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCut<HParticleGeant>) );
      instance.SetDelete(&delete_HParticleCutlEHParticleGeantgR);
      instance.SetDeleteArray(&deleteArray_HParticleCutlEHParticleGeantgR);
      instance.SetDestructor(&destruct_HParticleCutlEHParticleGeantgR);
      instance.SetStreamerFunc(&streamer_HParticleCutlEHParticleGeantgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCut<HParticleGeant>*)
   {
      return GenerateInitInstanceLocal((::HParticleCut<HParticleGeant>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeant>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HParticleCutlEHParticleGeantgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeant>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCutlEHParticleGeantDecaygR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HParticleCutlEHParticleGeantDecaygR_Dictionary();
   static void delete_HParticleCutlEHParticleGeantDecaygR(void *p);
   static void deleteArray_HParticleCutlEHParticleGeantDecaygR(void *p);
   static void destruct_HParticleCutlEHParticleGeantDecaygR(void *p);
   static void streamer_HParticleCutlEHParticleGeantDecaygR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCut<HParticleGeantDecay>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HParticleCut<HParticleGeantDecay>) == sizeof( ::ROOTShadow::Shadow::HParticleCutlEHParticleGeantDecaygR));
      ::HParticleCut<HParticleGeantDecay> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCut<HParticleGeantDecay> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCut<HParticleGeantDecay>", ::HParticleCut<HParticleGeantDecay>::Class_Version(), "././hparticlecut.h", 20,
                  typeid(::HParticleCut<HParticleGeantDecay>), ::ROOT::DefineBehavior(ptr, ptr),
                  &HParticleCutlEHParticleGeantDecaygR_Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCut<HParticleGeantDecay>) );
      instance.SetDelete(&delete_HParticleCutlEHParticleGeantDecaygR);
      instance.SetDeleteArray(&deleteArray_HParticleCutlEHParticleGeantDecaygR);
      instance.SetDestructor(&destruct_HParticleCutlEHParticleGeantDecaygR);
      instance.SetStreamerFunc(&streamer_HParticleCutlEHParticleGeantDecaygR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCut<HParticleGeantDecay>*)
   {
      return GenerateInitInstanceLocal((::HParticleCut<HParticleGeantDecay>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeantDecay>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HParticleCutlEHParticleGeantDecaygR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeantDecay>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCutlEHParticleEvtInfogR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HParticleCutlEHParticleEvtInfogR_Dictionary();
   static void delete_HParticleCutlEHParticleEvtInfogR(void *p);
   static void deleteArray_HParticleCutlEHParticleEvtInfogR(void *p);
   static void destruct_HParticleCutlEHParticleEvtInfogR(void *p);
   static void streamer_HParticleCutlEHParticleEvtInfogR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCut<HParticleEvtInfo>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HParticleCut<HParticleEvtInfo>) == sizeof( ::ROOTShadow::Shadow::HParticleCutlEHParticleEvtInfogR));
      ::HParticleCut<HParticleEvtInfo> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCut<HParticleEvtInfo> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCut<HParticleEvtInfo>", ::HParticleCut<HParticleEvtInfo>::Class_Version(), "././hparticlecut.h", 20,
                  typeid(::HParticleCut<HParticleEvtInfo>), ::ROOT::DefineBehavior(ptr, ptr),
                  &HParticleCutlEHParticleEvtInfogR_Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCut<HParticleEvtInfo>) );
      instance.SetDelete(&delete_HParticleCutlEHParticleEvtInfogR);
      instance.SetDeleteArray(&deleteArray_HParticleCutlEHParticleEvtInfogR);
      instance.SetDestructor(&destruct_HParticleCutlEHParticleEvtInfogR);
      instance.SetStreamerFunc(&streamer_HParticleCutlEHParticleEvtInfogR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCut<HParticleEvtInfo>*)
   {
      return GenerateInitInstanceLocal((::HParticleCut<HParticleEvtInfo>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCut<HParticleEvtInfo>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HParticleCutlEHParticleEvtInfogR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleEvtInfo>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCutlEHRichHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HParticleCutlEHRichHitgR_Dictionary();
   static void delete_HParticleCutlEHRichHitgR(void *p);
   static void deleteArray_HParticleCutlEHRichHitgR(void *p);
   static void destruct_HParticleCutlEHRichHitgR(void *p);
   static void streamer_HParticleCutlEHRichHitgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCut<HRichHit>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HParticleCut<HRichHit>) == sizeof( ::ROOTShadow::Shadow::HParticleCutlEHRichHitgR));
      ::HParticleCut<HRichHit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCut<HRichHit> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCut<HRichHit>", ::HParticleCut<HRichHit>::Class_Version(), "././hparticlecut.h", 20,
                  typeid(::HParticleCut<HRichHit>), ::ROOT::DefineBehavior(ptr, ptr),
                  &HParticleCutlEHRichHitgR_Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCut<HRichHit>) );
      instance.SetDelete(&delete_HParticleCutlEHRichHitgR);
      instance.SetDeleteArray(&deleteArray_HParticleCutlEHRichHitgR);
      instance.SetDestructor(&destruct_HParticleCutlEHRichHitgR);
      instance.SetStreamerFunc(&streamer_HParticleCutlEHRichHitgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCut<HRichHit>*)
   {
      return GenerateInitInstanceLocal((::HParticleCut<HRichHit>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCut<HRichHit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HParticleCutlEHRichHitgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HRichHit>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCutlEHRichHitSimgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HParticleCutlEHRichHitSimgR_Dictionary();
   static void delete_HParticleCutlEHRichHitSimgR(void *p);
   static void deleteArray_HParticleCutlEHRichHitSimgR(void *p);
   static void destruct_HParticleCutlEHRichHitSimgR(void *p);
   static void streamer_HParticleCutlEHRichHitSimgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCut<HRichHitSim>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HParticleCut<HRichHitSim>) == sizeof( ::ROOTShadow::Shadow::HParticleCutlEHRichHitSimgR));
      ::HParticleCut<HRichHitSim> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCut<HRichHitSim> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCut<HRichHitSim>", ::HParticleCut<HRichHitSim>::Class_Version(), "././hparticlecut.h", 20,
                  typeid(::HParticleCut<HRichHitSim>), ::ROOT::DefineBehavior(ptr, ptr),
                  &HParticleCutlEHRichHitSimgR_Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCut<HRichHitSim>) );
      instance.SetDelete(&delete_HParticleCutlEHRichHitSimgR);
      instance.SetDeleteArray(&deleteArray_HParticleCutlEHRichHitSimgR);
      instance.SetDestructor(&destruct_HParticleCutlEHRichHitSimgR);
      instance.SetStreamerFunc(&streamer_HParticleCutlEHRichHitSimgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCut<HRichHitSim>*)
   {
      return GenerateInitInstanceLocal((::HParticleCut<HRichHitSim>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCut<HRichHitSim>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HParticleCutlEHRichHitSimgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HRichHitSim>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCutlEHEventHeadergR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HParticleCutlEHEventHeadergR_Dictionary();
   static void delete_HParticleCutlEHEventHeadergR(void *p);
   static void deleteArray_HParticleCutlEHEventHeadergR(void *p);
   static void destruct_HParticleCutlEHEventHeadergR(void *p);
   static void streamer_HParticleCutlEHEventHeadergR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCut<HEventHeader>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HParticleCut<HEventHeader>) == sizeof( ::ROOTShadow::Shadow::HParticleCutlEHEventHeadergR));
      ::HParticleCut<HEventHeader> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCut<HEventHeader> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCut<HEventHeader>", ::HParticleCut<HEventHeader>::Class_Version(), "././hparticlecut.h", 20,
                  typeid(::HParticleCut<HEventHeader>), ::ROOT::DefineBehavior(ptr, ptr),
                  &HParticleCutlEHEventHeadergR_Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCut<HEventHeader>) );
      instance.SetDelete(&delete_HParticleCutlEHEventHeadergR);
      instance.SetDeleteArray(&deleteArray_HParticleCutlEHEventHeadergR);
      instance.SetDestructor(&destruct_HParticleCutlEHEventHeadergR);
      instance.SetStreamerFunc(&streamer_HParticleCutlEHEventHeadergR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCut<HEventHeader>*)
   {
      return GenerateInitInstanceLocal((::HParticleCut<HEventHeader>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCut<HEventHeader>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HParticleCutlEHEventHeadergR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HEventHeader>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCutlEHVertexgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HParticleCutlEHVertexgR_Dictionary();
   static void delete_HParticleCutlEHVertexgR(void *p);
   static void deleteArray_HParticleCutlEHVertexgR(void *p);
   static void destruct_HParticleCutlEHVertexgR(void *p);
   static void streamer_HParticleCutlEHVertexgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCut<HVertex>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HParticleCut<HVertex>) == sizeof( ::ROOTShadow::Shadow::HParticleCutlEHVertexgR));
      ::HParticleCut<HVertex> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCut<HVertex> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCut<HVertex>", ::HParticleCut<HVertex>::Class_Version(), "././hparticlecut.h", 20,
                  typeid(::HParticleCut<HVertex>), ::ROOT::DefineBehavior(ptr, ptr),
                  &HParticleCutlEHVertexgR_Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCut<HVertex>) );
      instance.SetDelete(&delete_HParticleCutlEHVertexgR);
      instance.SetDeleteArray(&deleteArray_HParticleCutlEHVertexgR);
      instance.SetDestructor(&destruct_HParticleCutlEHVertexgR);
      instance.SetStreamerFunc(&streamer_HParticleCutlEHVertexgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCut<HVertex>*)
   {
      return GenerateInitInstanceLocal((::HParticleCut<HVertex>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCut<HVertex>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HParticleCutlEHVertexgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HVertex>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HParticleCutlEHGeantKinegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HParticleCutlEHGeantKinegR_Dictionary();
   static void delete_HParticleCutlEHGeantKinegR(void *p);
   static void deleteArray_HParticleCutlEHGeantKinegR(void *p);
   static void destruct_HParticleCutlEHGeantKinegR(void *p);
   static void streamer_HParticleCutlEHGeantKinegR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HParticleCut<HGeantKine>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HParticleCut<HGeantKine>) == sizeof( ::ROOTShadow::Shadow::HParticleCutlEHGeantKinegR));
      ::HParticleCut<HGeantKine> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HParticleCut<HGeantKine> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HParticleCut<HGeantKine>", ::HParticleCut<HGeantKine>::Class_Version(), "././hparticlecut.h", 20,
                  typeid(::HParticleCut<HGeantKine>), ::ROOT::DefineBehavior(ptr, ptr),
                  &HParticleCutlEHGeantKinegR_Dictionary, isa_proxy, 0,
                  sizeof(::HParticleCut<HGeantKine>) );
      instance.SetDelete(&delete_HParticleCutlEHGeantKinegR);
      instance.SetDeleteArray(&deleteArray_HParticleCutlEHGeantKinegR);
      instance.SetDestructor(&destruct_HParticleCutlEHGeantKinegR);
      instance.SetStreamerFunc(&streamer_HParticleCutlEHGeantKinegR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HParticleCut<HGeantKine>*)
   {
      return GenerateInitInstanceLocal((::HParticleCut<HGeantKine>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HParticleCut<HGeantKine>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HParticleCutlEHGeantKinegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HGeantKine>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HParticleCand::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleCand::Class_Name()
{
   return "HParticleCand";
}

//______________________________________________________________________________
const char *HParticleCand::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCand*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleCand::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCand*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleCand::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCand*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleCand::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCand*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleCandSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleCandSim::Class_Name()
{
   return "HParticleCandSim";
}

//______________________________________________________________________________
const char *HParticleCandSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCandSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleCandSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCandSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleCandSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCandSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleCandSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCandSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleWallHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleWallHit::Class_Name()
{
   return "HParticleWallHit";
}

//______________________________________________________________________________
const char *HParticleWallHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleWallHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleWallHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleWallHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleWallHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleWallHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleWallHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleWallHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleWallHitSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleWallHitSim::Class_Name()
{
   return "HParticleWallHitSim";
}

//______________________________________________________________________________
const char *HParticleWallHitSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleWallHitSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleWallHitSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleWallHitSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleWallHitSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleWallHitSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleWallHitSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleWallHitSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleCal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleCal::Class_Name()
{
   return "HParticleCal";
}

//______________________________________________________________________________
const char *HParticleCal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleCal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleCal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleCal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleMdc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleMdc::Class_Name()
{
   return "HParticleMdc";
}

//______________________________________________________________________________
const char *HParticleMdc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleMdc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleMdc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleMdc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleMdc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleMdc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleMdc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleMdc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleEvtInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleEvtInfo::Class_Name()
{
   return "HParticleEvtInfo";
}

//______________________________________________________________________________
const char *HParticleEvtInfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleEvtInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleEvtInfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleEvtInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleEvtInfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleEvtInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleEvtInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleEvtInfo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticlePair::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticlePair::Class_Name()
{
   return "HParticlePair";
}

//______________________________________________________________________________
const char *HParticlePair::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePair*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticlePair::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePair*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticlePair::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePair*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticlePair::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePair*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleTool::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleTool::Class_Name()
{
   return "HParticleTool";
}

//______________________________________________________________________________
const char *HParticleTool::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTool*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleTool::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTool*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleTool::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTool*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleTool::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTool*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr pointers::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *pointers::Class_Name()
{
   return "pointers";
}

//______________________________________________________________________________
const char *pointers::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::pointers*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int pointers::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::pointers*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void pointers::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::pointers*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *pointers::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::pointers*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr closetrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *closetrack::Class_Name()
{
   return "closetrack";
}

//______________________________________________________________________________
const char *closetrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::closetrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int closetrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::closetrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void closetrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::closetrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *closetrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::closetrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr closeVec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *closeVec::Class_Name()
{
   return "closeVec";
}

//______________________________________________________________________________
const char *closeVec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::closeVec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int closeVec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::closeVec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void closeVec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::closeVec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *closeVec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::closeVec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr trackinfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *trackinfo::Class_Name()
{
   return "trackinfo";
}

//______________________________________________________________________________
const char *trackinfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::trackinfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int trackinfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::trackinfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void trackinfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::trackinfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *trackinfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::trackinfo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr tracksVec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *tracksVec::Class_Name()
{
   return "tracksVec";
}

//______________________________________________________________________________
const char *tracksVec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::tracksVec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int tracksVec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::tracksVec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void tracksVec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::tracksVec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *tracksVec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::tracksVec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr mdc_trk::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *mdc_trk::Class_Name()
{
   return "mdc_trk";
}

//______________________________________________________________________________
const char *mdc_trk::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::mdc_trk*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int mdc_trk::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::mdc_trk*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void mdc_trk::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::mdc_trk*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *mdc_trk::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::mdc_trk*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr mdc_seg::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *mdc_seg::Class_Name()
{
   return "mdc_seg";
}

//______________________________________________________________________________
const char *mdc_seg::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::mdc_seg*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int mdc_seg::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::mdc_seg*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void mdc_seg::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::mdc_seg*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *mdc_seg::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::mdc_seg*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr rpc_clst::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *rpc_clst::Class_Name()
{
   return "rpc_clst";
}

//______________________________________________________________________________
const char *rpc_clst::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::rpc_clst*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int rpc_clst::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::rpc_clst*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void rpc_clst::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::rpc_clst*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *rpc_clst::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::rpc_clst*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr tof_hit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *tof_hit::Class_Name()
{
   return "tof_hit";
}

//______________________________________________________________________________
const char *tof_hit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::tof_hit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int tof_hit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::tof_hit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void tof_hit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::tof_hit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *tof_hit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::tof_hit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr shower_hit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *shower_hit::Class_Name()
{
   return "shower_hit";
}

//______________________________________________________________________________
const char *shower_hit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::shower_hit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int shower_hit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::shower_hit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void shower_hit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::shower_hit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *shower_hit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::shower_hit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr rich_hit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *rich_hit::Class_Name()
{
   return "rich_hit";
}

//______________________________________________________________________________
const char *rich_hit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::rich_hit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int rich_hit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::rich_hit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void rich_hit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::rich_hit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *rich_hit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::rich_hit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr spline_track::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *spline_track::Class_Name()
{
   return "spline_track";
}

//______________________________________________________________________________
const char *spline_track::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::spline_track*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int spline_track::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::spline_track*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void spline_track::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::spline_track*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *spline_track::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::spline_track*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr rk_track::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *rk_track::Class_Name()
{
   return "rk_track";
}

//______________________________________________________________________________
const char *rk_track::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::rk_track*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int rk_track::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::rk_track*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void rk_track::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::rk_track*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *rk_track::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::rk_track*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr kal_track::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *kal_track::Class_Name()
{
   return "kal_track";
}

//______________________________________________________________________________
const char *kal_track::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::kal_track*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int kal_track::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::kal_track*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void kal_track::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::kal_track*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *kal_track::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::kal_track*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr candidate::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *candidate::Class_Name()
{
   return "candidate";
}

//______________________________________________________________________________
const char *candidate::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::candidate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int candidate::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::candidate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void candidate::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::candidate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *candidate::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::candidate*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleEvtChara::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleEvtChara::Class_Name()
{
   return "HParticleEvtChara";
}

//______________________________________________________________________________
const char *HParticleEvtChara::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleEvtChara*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleEvtChara::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleEvtChara*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleEvtChara::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleEvtChara*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleEvtChara::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleEvtChara*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleCandFillerPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleCandFillerPar::Class_Name()
{
   return "HParticleCandFillerPar";
}

//______________________________________________________________________________
const char *HParticleCandFillerPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCandFillerPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleCandFillerPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCandFillerPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleCandFillerPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCandFillerPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleCandFillerPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCandFillerPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleCandFiller::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleCandFiller::Class_Name()
{
   return "HParticleCandFiller";
}

//______________________________________________________________________________
const char *HParticleCandFiller::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCandFiller*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleCandFiller::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCandFiller*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleCandFiller::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCandFiller*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleCandFiller::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCandFiller*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleTrackSorter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleTrackSorter::Class_Name()
{
   return "HParticleTrackSorter";
}

//______________________________________________________________________________
const char *HParticleTrackSorter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTrackSorter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleTrackSorter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTrackSorter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleTrackSorter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTrackSorter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleTrackSorter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTrackSorter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleTrackCleaner::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleTrackCleaner::Class_Name()
{
   return "HParticleTrackCleaner";
}

//______________________________________________________________________________
const char *HParticleTrackCleaner::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTrackCleaner*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleTrackCleaner::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTrackCleaner*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleTrackCleaner::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTrackCleaner*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleTrackCleaner::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTrackCleaner*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleRunningMeanI::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleRunningMeanI::Class_Name()
{
   return "HParticleRunningMeanI";
}

//______________________________________________________________________________
const char *HParticleRunningMeanI::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleRunningMeanI*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleRunningMeanI::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleRunningMeanI*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleRunningMeanI::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleRunningMeanI*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleRunningMeanI::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleRunningMeanI*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleEvtInfoFiller::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleEvtInfoFiller::Class_Name()
{
   return "HParticleEvtInfoFiller";
}

//______________________________________________________________________________
const char *HParticleEvtInfoFiller::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleEvtInfoFiller*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleEvtInfoFiller::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleEvtInfoFiller*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleEvtInfoFiller::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleEvtInfoFiller*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleEvtInfoFiller::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleEvtInfoFiller*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleContFact::Class_Name()
{
   return "HParticleContFact";
}

//______________________________________________________________________________
const char *HParticleContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleStart2HitF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleStart2HitF::Class_Name()
{
   return "HParticleStart2HitF";
}

//______________________________________________________________________________
const char *HParticleStart2HitF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleStart2HitF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleStart2HitF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleStart2HitF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleStart2HitF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleStart2HitF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleStart2HitF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleStart2HitF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleTree::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleTree::Class_Name()
{
   return "HParticleTree";
}

//______________________________________________________________________________
const char *HParticleTree::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTree*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleTree::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTree*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleTree::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTree*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleTree::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleTree*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleAngleCor::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleAngleCor::Class_Name()
{
   return "HParticleAngleCor";
}

//______________________________________________________________________________
const char *HParticleAngleCor::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleAngleCor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleAngleCor::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleAngleCor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleAngleCor::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleAngleCor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleAngleCor::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleAngleCor*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleGeantDecay::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleGeantDecay::Class_Name()
{
   return "HParticleGeantDecay";
}

//______________________________________________________________________________
const char *HParticleGeantDecay::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeantDecay*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleGeantDecay::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeantDecay*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleGeantDecay::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeantDecay*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleGeantDecay::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeantDecay*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleGeant::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleGeant::Class_Name()
{
   return "HParticleGeant";
}

//______________________________________________________________________________
const char *HParticleGeant::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeant*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleGeant::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeant*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleGeant::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeant*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleGeant::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeant*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleGeantEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleGeantEvent::Class_Name()
{
   return "HParticleGeantEvent";
}

//______________________________________________________________________________
const char *HParticleGeantEvent::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeantEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleGeantEvent::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeantEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleGeantEvent::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeantEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleGeantEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeantEvent*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleGeantPair::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleGeantPair::Class_Name()
{
   return "HParticleGeantPair";
}

//______________________________________________________________________________
const char *HParticleGeantPair::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeantPair*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleGeantPair::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeantPair*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleGeantPair::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeantPair*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleGeantPair::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleGeantPair*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleDraw::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleDraw::Class_Name()
{
   return "HParticleDraw";
}

//______________________________________________________________________________
const char *HParticleDraw::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleDraw*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleDraw::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleDraw*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleDraw::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleDraw*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleDraw::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleDraw*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticlePairDraw::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticlePairDraw::Class_Name()
{
   return "HParticlePairDraw";
}

//______________________________________________________________________________
const char *HParticlePairDraw::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePairDraw*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticlePairDraw::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePairDraw*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticlePairDraw::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePairDraw*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticlePairDraw::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePairDraw*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticlePairMaker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticlePairMaker::Class_Name()
{
   return "HParticlePairMaker";
}

//______________________________________________________________________________
const char *HParticlePairMaker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePairMaker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticlePairMaker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePairMaker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticlePairMaker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePairMaker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticlePairMaker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePairMaker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleBooker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleBooker::Class_Name()
{
   return "HParticleBooker";
}

//______________________________________________________________________________
const char *HParticleBooker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBooker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleBooker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBooker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleBooker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBooker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleBooker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBooker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleVertexFind::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleVertexFind::Class_Name()
{
   return "HParticleVertexFind";
}

//______________________________________________________________________________
const char *HParticleVertexFind::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleVertexFind*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleVertexFind::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleVertexFind*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleVertexFind::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleVertexFind*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleVertexFind::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleVertexFind*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleCutRange::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleCutRange::Class_Name()
{
   return "HParticleCutRange";
}

//______________________________________________________________________________
const char *HParticleCutRange::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCutRange*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleCutRange::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCutRange*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleCutRange::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCutRange*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleCutRange::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCutRange*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleBtPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleBtPar::Class_Name()
{
   return "HParticleBtPar";
}

//______________________________________________________________________________
const char *HParticleBtPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleBtPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleBtPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleBtPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleBtRingInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleBtRingInfo::Class_Name()
{
   return "HParticleBtRingInfo";
}

//______________________________________________________________________________
const char *HParticleBtRingInfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtRingInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleBtRingInfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtRingInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleBtRingInfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtRingInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleBtRingInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtRingInfo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleBtRingF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleBtRingF::Class_Name()
{
   return "HParticleBtRingF";
}

//______________________________________________________________________________
const char *HParticleBtRingF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtRingF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleBtRingF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtRingF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleBtRingF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtRingF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleBtRingF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtRingF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleBtClusterF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleBtClusterF::Class_Name()
{
   return "HParticleBtClusterF";
}

//______________________________________________________________________________
const char *HParticleBtClusterF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtClusterF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleBtClusterF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtClusterF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleBtClusterF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtClusterF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleBtClusterF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtClusterF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleBtRing::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleBtRing::Class_Name()
{
   return "HParticleBtRing";
}

//______________________________________________________________________________
const char *HParticleBtRing::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtRing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleBtRing::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtRing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleBtRing::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtRing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleBtRing::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtRing*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleBt::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleBt::Class_Name()
{
   return "HParticleBt";
}

//______________________________________________________________________________
const char *HParticleBt::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBt*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleBt::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBt*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleBt::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBt*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleBt::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBt*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleBtAngleTrafo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleBtAngleTrafo::Class_Name()
{
   return "HParticleBtAngleTrafo";
}

//______________________________________________________________________________
const char *HParticleBtAngleTrafo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtAngleTrafo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleBtAngleTrafo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtAngleTrafo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleBtAngleTrafo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtAngleTrafo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleBtAngleTrafo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleBtAngleTrafo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticlePathLengthCorr::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticlePathLengthCorr::Class_Name()
{
   return "HParticlePathLengthCorr";
}

//______________________________________________________________________________
const char *HParticlePathLengthCorr::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePathLengthCorr*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticlePathLengthCorr::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePathLengthCorr*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticlePathLengthCorr::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePathLengthCorr*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticlePathLengthCorr::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticlePathLengthCorr*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HParticleT0Reco::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HParticleT0Reco::Class_Name()
{
   return "HParticleT0Reco";
}

//______________________________________________________________________________
const char *HParticleT0Reco::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleT0Reco*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HParticleT0Reco::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleT0Reco*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HParticleT0Reco::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleT0Reco*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HParticleT0Reco::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleT0Reco*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr HParticleCut<HParticleCand>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *HParticleCut<HParticleCand>::Class_Name()
{
   return "HParticleCut<HParticleCand>";
}

//______________________________________________________________________________
template <> const char *HParticleCut<HParticleCand>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleCand>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int HParticleCut<HParticleCand>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleCand>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void HParticleCut<HParticleCand>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleCand>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *HParticleCut<HParticleCand>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleCand>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr HParticleCut<HParticleCandSim>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *HParticleCut<HParticleCandSim>::Class_Name()
{
   return "HParticleCut<HParticleCandSim>";
}

//______________________________________________________________________________
template <> const char *HParticleCut<HParticleCandSim>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleCandSim>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int HParticleCut<HParticleCandSim>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleCandSim>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void HParticleCut<HParticleCandSim>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleCandSim>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *HParticleCut<HParticleCandSim>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleCandSim>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr HParticleCut<HParticlePair>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *HParticleCut<HParticlePair>::Class_Name()
{
   return "HParticleCut<HParticlePair>";
}

//______________________________________________________________________________
template <> const char *HParticleCut<HParticlePair>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticlePair>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int HParticleCut<HParticlePair>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticlePair>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void HParticleCut<HParticlePair>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticlePair>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *HParticleCut<HParticlePair>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticlePair>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr HParticleCut<HParticleGeantPair>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *HParticleCut<HParticleGeantPair>::Class_Name()
{
   return "HParticleCut<HParticleGeantPair>";
}

//______________________________________________________________________________
template <> const char *HParticleCut<HParticleGeantPair>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeantPair>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int HParticleCut<HParticleGeantPair>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeantPair>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void HParticleCut<HParticleGeantPair>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeantPair>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *HParticleCut<HParticleGeantPair>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeantPair>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr HParticleCut<HParticleGeant>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *HParticleCut<HParticleGeant>::Class_Name()
{
   return "HParticleCut<HParticleGeant>";
}

//______________________________________________________________________________
template <> const char *HParticleCut<HParticleGeant>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeant>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int HParticleCut<HParticleGeant>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeant>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void HParticleCut<HParticleGeant>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeant>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *HParticleCut<HParticleGeant>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeant>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr HParticleCut<HParticleGeantDecay>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *HParticleCut<HParticleGeantDecay>::Class_Name()
{
   return "HParticleCut<HParticleGeantDecay>";
}

//______________________________________________________________________________
template <> const char *HParticleCut<HParticleGeantDecay>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeantDecay>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int HParticleCut<HParticleGeantDecay>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeantDecay>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void HParticleCut<HParticleGeantDecay>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeantDecay>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *HParticleCut<HParticleGeantDecay>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeantDecay>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr HParticleCut<HParticleEvtInfo>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *HParticleCut<HParticleEvtInfo>::Class_Name()
{
   return "HParticleCut<HParticleEvtInfo>";
}

//______________________________________________________________________________
template <> const char *HParticleCut<HParticleEvtInfo>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleEvtInfo>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int HParticleCut<HParticleEvtInfo>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleEvtInfo>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void HParticleCut<HParticleEvtInfo>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleEvtInfo>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *HParticleCut<HParticleEvtInfo>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleEvtInfo>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr HParticleCut<HRichHit>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *HParticleCut<HRichHit>::Class_Name()
{
   return "HParticleCut<HRichHit>";
}

//______________________________________________________________________________
template <> const char *HParticleCut<HRichHit>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HRichHit>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int HParticleCut<HRichHit>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HRichHit>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void HParticleCut<HRichHit>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HRichHit>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *HParticleCut<HRichHit>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HRichHit>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr HParticleCut<HRichHitSim>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *HParticleCut<HRichHitSim>::Class_Name()
{
   return "HParticleCut<HRichHitSim>";
}

//______________________________________________________________________________
template <> const char *HParticleCut<HRichHitSim>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HRichHitSim>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int HParticleCut<HRichHitSim>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HRichHitSim>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void HParticleCut<HRichHitSim>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HRichHitSim>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *HParticleCut<HRichHitSim>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HRichHitSim>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr HParticleCut<HEventHeader>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *HParticleCut<HEventHeader>::Class_Name()
{
   return "HParticleCut<HEventHeader>";
}

//______________________________________________________________________________
template <> const char *HParticleCut<HEventHeader>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HEventHeader>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int HParticleCut<HEventHeader>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HEventHeader>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void HParticleCut<HEventHeader>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HEventHeader>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *HParticleCut<HEventHeader>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HEventHeader>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr HParticleCut<HVertex>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *HParticleCut<HVertex>::Class_Name()
{
   return "HParticleCut<HVertex>";
}

//______________________________________________________________________________
template <> const char *HParticleCut<HVertex>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HVertex>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int HParticleCut<HVertex>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HVertex>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void HParticleCut<HVertex>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HVertex>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *HParticleCut<HVertex>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HVertex>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
template <> atomic_TClass_ptr HParticleCut<HGeantKine>::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
template <> const char *HParticleCut<HGeantKine>::Class_Name()
{
   return "HParticleCut<HGeantKine>";
}

//______________________________________________________________________________
template <> const char *HParticleCut<HGeantKine>::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HGeantKine>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int HParticleCut<HGeantKine>::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HGeantKine>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void HParticleCut<HGeantKine>::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HGeantKine>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *HParticleCut<HGeantKine>::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HGeantKine>*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HParticleCand::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleCand.
      TClass *R__cl = ::HParticleCand::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlags", &fFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPID", &fPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSector", &fSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSystem", &fSystem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTofRec", &fTofRec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingCorr", &fRingCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndex", &fIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeta", &fBeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomentum", &fMomentum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMass2", &fMass2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTheta", &fTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fR", &fR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2", &fChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDistanceToMetaHit", &fDistanceToMetaHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMdcdEdx", &fMdcdEdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTofdEdx", &fTofdEdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInnerSegmentChi2", &fInnerSegmentChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOuterSegmentChi2", &fOuterSegmentChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAngleToNearbyFittedInner", &fAngleToNearbyFittedInner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAngleToNearbyUnfittedInner", &fAngleToNearbyUnfittedInner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingNumPads", &fRingNumPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingAmplitude", &fRingAmplitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingHouTra", &fRingHouTra);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingPatternMatrix", &fRingPatternMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingCentroid", &fRingCentroid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRichPhi", &fRichPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRichTheta", &fRichTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingChi2", &fRingChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMetaMatchQuality", &fMetaMatchQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMetaMatchQualityShower", &fMetaMatchQualityShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMetaMatchRadius", &fMetaMatchRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMetaMatchRadiusShower", &fMetaMatchRadiusShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRkMetaDx", &fRkMetaDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRkMetaDy", &fRkMetaDy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBetaOrg", &fBetaOrg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomentumOrg", &fMomentumOrg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDistanceToMetaHitOrg", &fDistanceToMetaHitOrg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShowerSum0", &fShowerSum0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShowerSum1", &fShowerSum1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShowerSum2", &fShowerSum2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSelectedMeta", &fSelectedMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMetaInd", &fMetaInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRichInd", &fRichInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRichBTInd", &fRichBTInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInnerSegInd", &fInnerSegInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOuterSegInd", &fOuterSegInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRpcInd", &fRpcInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShowerInd", &fShowerInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTofHitInd", &fTofHitInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTofClstInd", &fTofClstInd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLayers", &fLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWires", &fWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmetaAddress", &fmetaAddress);
      TLorentzVector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleCand(void *p) {
      return  p ? new(p) ::HParticleCand : new ::HParticleCand;
   }
   static void *newArray_HParticleCand(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleCand[nElements] : new ::HParticleCand[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleCand(void *p) {
      delete ((::HParticleCand*)p);
   }
   static void deleteArray_HParticleCand(void *p) {
      delete [] ((::HParticleCand*)p);
   }
   static void destruct_HParticleCand(void *p) {
      typedef ::HParticleCand current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCand(TBuffer &buf, void *obj) {
      ((::HParticleCand*)obj)->::HParticleCand::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCand

//______________________________________________________________________________
void HParticleCandSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleCandSim.
      TClass *R__cl = ::HParticleCandSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantPID", &fGeantPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantTrack", &fGeantTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantCorrTrackIds", &fGeantCorrTrackIds);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantxMom", &fGeantxMom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantyMom", &fGeantyMom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantzMom", &fGeantzMom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantxVertex", &fGeantxVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantyVertex", &fGeantyVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantzVertex", &fGeantzVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantParentTrackNum", &fGeantParentTrackNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantParentPID", &fGeantParentPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantGrandParentTrackNum", &fGeantGrandParentTrackNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantGrandParentPID", &fGeantGrandParentPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantCreationMechanism", &fGeantCreationMechanism);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantMediumNumber", &fGeantMediumNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantgeninfo", &fGeantgeninfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantgeninfo1", &fGeantgeninfo1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantgeninfo2", &fGeantgeninfo2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantgenweight", &fGeantgenweight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantTrackRich[3]", fGeantTrackRich);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantTrackMeta[4]", fGeantTrackMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantTrackShower[4]", fGeantTrackShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantTrackInnerMdc[2]", fGeantTrackInnerMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantTrackOuterMdc[2]", fGeantTrackOuterMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantTrackInnerMdcN[2]", fGeantTrackInnerMdcN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantTrackOuterMdcN[2]", fGeantTrackOuterMdcN);
      HParticleCand::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleCandSim(void *p) {
      return  p ? new(p) ::HParticleCandSim : new ::HParticleCandSim;
   }
   static void *newArray_HParticleCandSim(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleCandSim[nElements] : new ::HParticleCandSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleCandSim(void *p) {
      delete ((::HParticleCandSim*)p);
   }
   static void deleteArray_HParticleCandSim(void *p) {
      delete [] ((::HParticleCandSim*)p);
   }
   static void destruct_HParticleCandSim(void *p) {
      typedef ::HParticleCandSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCandSim(TBuffer &buf, void *obj) {
      ((::HParticleCandSim*)obj)->::HParticleCandSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCandSim

//______________________________________________________________________________
void HParticleWallHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleWallHit.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TLorentzVector::Streamer(R__b);
      R__b >> fWallCell;
      R__b >> fWallCharge;
      R__b >> fWallTime;
      R__b >> fWallXlab;
      R__b >> fWallYlab;
      R__b >> fWallZlab;
      R__b.CheckByteCount(R__s, R__c, HParticleWallHit::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleWallHit::IsA(), kTRUE);
      TLorentzVector::Streamer(R__b);
      R__b << fWallCell;
      R__b << fWallCharge;
      R__b << fWallTime;
      R__b << fWallXlab;
      R__b << fWallYlab;
      R__b << fWallZlab;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HParticleWallHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleWallHit.
      TClass *R__cl = ::HParticleWallHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWallCell", &fWallCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWallCharge", &fWallCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWallTime", &fWallTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWallXlab", &fWallXlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWallYlab", &fWallYlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWallZlab", &fWallZlab);
      TLorentzVector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleWallHit(void *p) {
      return  p ? new(p) ::HParticleWallHit : new ::HParticleWallHit;
   }
   static void *newArray_HParticleWallHit(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleWallHit[nElements] : new ::HParticleWallHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleWallHit(void *p) {
      delete ((::HParticleWallHit*)p);
   }
   static void deleteArray_HParticleWallHit(void *p) {
      delete [] ((::HParticleWallHit*)p);
   }
   static void destruct_HParticleWallHit(void *p) {
      typedef ::HParticleWallHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleWallHit(TBuffer &buf, void *obj) {
      ((::HParticleWallHit*)obj)->::HParticleWallHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleWallHit

//______________________________________________________________________________
void HParticleWallHitSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleWallHitSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParticleWallHit::Streamer(R__b);
      R__b >> fGeantPID;
      R__b >> fGeantxMom;
      R__b >> fGeantyMom;
      R__b >> fGeantzMom;
      R__b >> fGeantxVertex;
      R__b >> fGeantyVertex;
      R__b >> fGeantzVertex;
      R__b >> fGeantPartentTrackNum;
      R__b >> fGeantCreationMechanism;
      R__b >> fGeantMediumNumber;
      R__b >> fGeantgeninfo;
      R__b >> fGeantgeninfo1;
      R__b >> fGeantgeninfo2;
      R__b >> fGeantgenweight;
      R__b.CheckByteCount(R__s, R__c, HParticleWallHitSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleWallHitSim::IsA(), kTRUE);
      HParticleWallHit::Streamer(R__b);
      R__b << fGeantPID;
      R__b << fGeantxMom;
      R__b << fGeantyMom;
      R__b << fGeantzMom;
      R__b << fGeantxVertex;
      R__b << fGeantyVertex;
      R__b << fGeantzVertex;
      R__b << fGeantPartentTrackNum;
      R__b << fGeantCreationMechanism;
      R__b << fGeantMediumNumber;
      R__b << fGeantgeninfo;
      R__b << fGeantgeninfo1;
      R__b << fGeantgeninfo2;
      R__b << fGeantgenweight;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HParticleWallHitSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleWallHitSim.
      TClass *R__cl = ::HParticleWallHitSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantPID", &fGeantPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantxMom", &fGeantxMom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantyMom", &fGeantyMom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantzMom", &fGeantzMom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantxVertex", &fGeantxVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantyVertex", &fGeantyVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantzVertex", &fGeantzVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantPartentTrackNum", &fGeantPartentTrackNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantCreationMechanism", &fGeantCreationMechanism);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantMediumNumber", &fGeantMediumNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantgeninfo", &fGeantgeninfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantgeninfo1", &fGeantgeninfo1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantgeninfo2", &fGeantgeninfo2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeantgenweight", &fGeantgenweight);
      HParticleWallHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleWallHitSim(void *p) {
      return  p ? new(p) ::HParticleWallHitSim : new ::HParticleWallHitSim;
   }
   static void *newArray_HParticleWallHitSim(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleWallHitSim[nElements] : new ::HParticleWallHitSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleWallHitSim(void *p) {
      delete ((::HParticleWallHitSim*)p);
   }
   static void deleteArray_HParticleWallHitSim(void *p) {
      delete [] ((::HParticleWallHitSim*)p);
   }
   static void destruct_HParticleWallHitSim(void *p) {
      typedef ::HParticleWallHitSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleWallHitSim(TBuffer &buf, void *obj) {
      ((::HParticleWallHitSim*)obj)->::HParticleWallHitSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleWallHitSim

//______________________________________________________________________________
void HParticleCal::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fTOFModule;
      R__b >> fTOFCell;
      R__b >> fMETACell;
      R__b >> fTOFLeftAmp;
      R__b >> fTOFRightAmp;
      R__b >> fMETALocX;
      R__b >> fMETALocY;
      R__b.CheckByteCount(R__s, R__c, HParticleCal::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCal::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fTOFModule;
      R__b << fTOFCell;
      R__b << fMETACell;
      R__b << fTOFLeftAmp;
      R__b << fTOFRightAmp;
      R__b << fMETALocX;
      R__b << fMETALocY;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HParticleCal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleCal.
      TClass *R__cl = ::HParticleCal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFModule", &fTOFModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFCell", &fTOFCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMETACell", &fMETACell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFLeftAmp", &fTOFLeftAmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFRightAmp", &fTOFRightAmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMETALocX", &fMETALocX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMETALocY", &fMETALocY);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleCal(void *p) {
      return  p ? new(p) ::HParticleCal : new ::HParticleCal;
   }
   static void *newArray_HParticleCal(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleCal[nElements] : new ::HParticleCal[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleCal(void *p) {
      delete ((::HParticleCal*)p);
   }
   static void deleteArray_HParticleCal(void *p) {
      delete [] ((::HParticleCal*)p);
   }
   static void destruct_HParticleCal(void *p) {
      typedef ::HParticleCal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCal(TBuffer &buf, void *obj) {
      ((::HParticleCal*)obj)->::HParticleCal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCal

//______________________________________________________________________________
void HParticleMdc::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleMdc.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fIndex;
      R__b >> fMdcFlag;
      R__b >> fMdc1x;
      R__b >> fMdc1y;
      R__b >> fMdc2x;
      R__b >> fMdc2y;
      R__b >> fMdc3x;
      R__b >> fMdc3y;
      R__b >> fMdc4x;
      R__b >> fMdc4y;
      R__b >> dedxInner;
      R__b >> dedxSigmaInner;
      R__b >> dedxOuter;
      R__b >> dedxSigmaOuter;
      R__b >> dedxCombined;
      R__b >> dedxSigmaCombined;
      R__b >> dedxNWireCutCombined;
      R__b >> dedxNWireCutInner;
      R__b >> dedxNWireCutOuter;
      R__b.ReadStaticArray((float*)dedx);
      R__b.ReadStaticArray((float*)dedxSigma);
      R__b.ReadStaticArray((unsigned char*)dedxNWire);
      R__b.ReadStaticArray((unsigned char*)dedxNWireCut);
      R__b.CheckByteCount(R__s, R__c, HParticleMdc::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleMdc::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fIndex;
      R__b << fMdcFlag;
      R__b << fMdc1x;
      R__b << fMdc1y;
      R__b << fMdc2x;
      R__b << fMdc2y;
      R__b << fMdc3x;
      R__b << fMdc3y;
      R__b << fMdc4x;
      R__b << fMdc4y;
      R__b << dedxInner;
      R__b << dedxSigmaInner;
      R__b << dedxOuter;
      R__b << dedxSigmaOuter;
      R__b << dedxCombined;
      R__b << dedxSigmaCombined;
      R__b << dedxNWireCutCombined;
      R__b << dedxNWireCutInner;
      R__b << dedxNWireCutOuter;
      R__b.WriteArray(dedx, 4);
      R__b.WriteArray(dedxSigma, 4);
      R__b.WriteArray(dedxNWire, 4);
      R__b.WriteArray(dedxNWireCut, 4);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HParticleMdc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleMdc.
      TClass *R__cl = ::HParticleMdc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndex", &fIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMdcFlag", &fMdcFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMdc1x", &fMdc1x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMdc1y", &fMdc1y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMdc2x", &fMdc2x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMdc2y", &fMdc2y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMdc3x", &fMdc3x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMdc3y", &fMdc3y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMdc4x", &fMdc4x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMdc4y", &fMdc4y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxInner", &dedxInner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxSigmaInner", &dedxSigmaInner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxOuter", &dedxOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxSigmaOuter", &dedxSigmaOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxCombined", &dedxCombined);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxSigmaCombined", &dedxSigmaCombined);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWireCutCombined", &dedxNWireCutCombined);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWireCutInner", &dedxNWireCutInner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWireCutOuter", &dedxNWireCutOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedx[4]", dedx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxSigma[4]", dedxSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWire[4]", dedxNWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedxNWireCut[4]", dedxNWireCut);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleMdc(void *p) {
      return  p ? new(p) ::HParticleMdc : new ::HParticleMdc;
   }
   static void *newArray_HParticleMdc(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleMdc[nElements] : new ::HParticleMdc[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleMdc(void *p) {
      delete ((::HParticleMdc*)p);
   }
   static void deleteArray_HParticleMdc(void *p) {
      delete [] ((::HParticleMdc*)p);
   }
   static void destruct_HParticleMdc(void *p) {
      typedef ::HParticleMdc current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleMdc(TBuffer &buf, void *obj) {
      ((::HParticleMdc*)obj)->::HParticleMdc::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleMdc

//______________________________________________________________________________
void HParticleEvtInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleEvtInfo.
      TClass *R__cl = ::HParticleEvtInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aRichMult[6]", aRichMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aRichCorrMult[6]", aRichCorrMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aRichClusMult[6]", aRichClusMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aMdcClusMult[6][2]", aMdcClusMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aMdcSegFittedMult[6][2]", aMdcSegFittedMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aMdcSegUnfittedMult[6][2]", aMdcSegUnfittedMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aTofMult[6]", aTofMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aShowerMult[6]", aShowerMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aRpcMult[6]", aRpcMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aRpcMultHit[6]", aRpcMultHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aTofMultCut[6]", aTofMultCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aRpcMultCut[6]", aRpcMultCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aRpcMultHitCut[6]", aRpcMultHitCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aParticleCandMult[6]", aParticleCandMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aSelectedParticleCandMult[6]", aSelectedParticleCandMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aPrimaryParticleCandMult[6]", aPrimaryParticleCandMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aMdcWires[6][4][6]", aMdcWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aMdcWiresUnused[6][4][6]", aMdcWiresUnused);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aMdcWiresRaw[6][4][6]", aMdcWiresRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nFWallMult", &nFWallMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFWallVector", &fFWallVector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRPlanePhi", &fRPlanePhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fwallPhiA", &fwallPhiA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fwallPhiB", &fwallPhiB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fwallPhiAB", &fwallPhiAB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fwallNA", &fwallNA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fwallNB", &fwallNB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventSelector", &fEventSelector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanMult", &fMeanMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanMIPSMult", &fMeanMIPSMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanLEPMult", &fMeanLEPMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanMultSec[6]", fMeanMultSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanMIPSMultSec[6]", fMeanMIPSMultSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanLEPMultSec[6]", fMeanLEPMultSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaMult", &fSigmaMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaMIPSMult", &fSigmaMIPSMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaLEPMult", &fSigmaLEPMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaMultSec[6]", fSigmaMultSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaMIPSMultSec[6]", fSigmaMIPSMultSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaLEPMultSec[6]", fSigmaLEPMultSec);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleEvtInfo(void *p) {
      return  p ? new(p) ::HParticleEvtInfo : new ::HParticleEvtInfo;
   }
   static void *newArray_HParticleEvtInfo(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleEvtInfo[nElements] : new ::HParticleEvtInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleEvtInfo(void *p) {
      delete ((::HParticleEvtInfo*)p);
   }
   static void deleteArray_HParticleEvtInfo(void *p) {
      delete [] ((::HParticleEvtInfo*)p);
   }
   static void destruct_HParticleEvtInfo(void *p) {
      typedef ::HParticleEvtInfo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleEvtInfo(TBuffer &buf, void *obj) {
      ((::HParticleEvtInfo*)obj)->::HParticleEvtInfo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleEvtInfo

//______________________________________________________________________________
void HParticleEvtChara::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleEvtChara.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleEvtChara::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleEvtChara.
      TClass *R__cl = ::HParticleEvtChara::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticleEvtInfoCat", &fParticleEvtInfoCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatWallHit", &fCatWallHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParameterFile", &fParameterFile);
      R__insp.InspectMember(fParameterFile, "fParameterFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFile", &fFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseParameterFile", &fUseParameterFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRun", &fRun);
      R__insp.InspectMember(fRun, "fRun.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGen", &fGen);
      R__insp.InspectMember(fGen, "fGen.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCentralityEstimator", &fCentralityEstimator);
      R__insp.InspectMember(fCentralityEstimator, "fCentralityEstimator.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSimulation", &isSimulation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQuality", &fQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFWSumChargeSpec", &fFWSumChargeSpec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDirectivity", &fDirectivity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRatioEtEz", &fRatioEtEz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEt", &fEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReferenceMeanSelTrack", &fReferenceMeanSelTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHtempTOFtimecut", &fHtempTOFtimecut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHtempRPC", &fHtempRPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHtempTOFRPC", &fHtempTOFRPC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHtempTOFRPCtimecut", &fHtempTOFRPCtimecut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHtempSelecTrack", &fHtempSelecTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHtempSelecTrackCorr", &fHtempSelecTrackCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHtempSelecTrackNorm", &fHtempSelecTrackNorm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHtempFWSumChargeSpec", &fHtempFWSumChargeSpec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHtempDirectivity", &fHtempDirectivity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHtempRatioEtEz", &fHtempRatioEtEz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHtempEt", &fHtempEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hMultTOFRPCtimecut_5percent_fixedCuts", &hMultTOFRPCtimecut_5percent_fixedCuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hMultTOFRPCtimecut_10percent_fixedCuts", &hMultTOFRPCtimecut_10percent_fixedCuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hMultTOFRPCtimecut_FOPI_fixedCuts", &hMultTOFRPCtimecut_FOPI_fixedCuts);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleEvtChara(void *p) {
      return  p ? new(p) ::HParticleEvtChara : new ::HParticleEvtChara;
   }
   static void *newArray_HParticleEvtChara(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleEvtChara[nElements] : new ::HParticleEvtChara[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleEvtChara(void *p) {
      delete ((::HParticleEvtChara*)p);
   }
   static void deleteArray_HParticleEvtChara(void *p) {
      delete [] ((::HParticleEvtChara*)p);
   }
   static void destruct_HParticleEvtChara(void *p) {
      typedef ::HParticleEvtChara current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleEvtChara(TBuffer &buf, void *obj) {
      ((::HParticleEvtChara*)obj)->::HParticleEvtChara::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleEvtChara

//______________________________________________________________________________
void HParticleBtRing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleBtRing.
      TClass *R__cl = ::HParticleBtRing::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadsRing", &fPadsRing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadsSum", &fPadsSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeRing", &fChargeRing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeSum", &fChargeSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusters", &fClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxima", &fMaxima);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximaCharge", &fMaximaCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNearbyMaxima", &fNearbyMaxima);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2", &fChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanDist", &fMeanDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingMatrix", &fRingMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximaShared", &fMaximaShared);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximaSharedTrack[10]", fMaximaSharedTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximaSharedTrackIdx[10]", fMaximaSharedTrackIdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximaSharedBad", &fMaximaSharedBad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximaSharedBadTrack[10]", fMaximaSharedBadTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximaSharedBadTrackIdx[10]", fMaximaSharedBadTrackIdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximaChargeShared", &fMaximaChargeShared);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximaChargeSharedTrack[10]", fMaximaChargeSharedTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximaChargeSharedTrackIdx[10]", fMaximaChargeSharedTrackIdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximaChargeSharedBad", &fMaximaChargeSharedBad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximaChargeSharedBadTrack[10]", fMaximaChargeSharedBadTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximaChargeSharedBadTrackIdx[10]", fMaximaChargeSharedBadTrackIdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNearbyMaximaShared", &fNearbyMaximaShared);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNearbyMaximaSharedTrack[10]", fNearbyMaximaSharedTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNearbyMaximaSharedTrackIdx[10]", fNearbyMaximaSharedTrackIdx);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleBtRing(void *p) {
      return  p ? new(p) ::HParticleBtRing : new ::HParticleBtRing;
   }
   static void *newArray_HParticleBtRing(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleBtRing[nElements] : new ::HParticleBtRing[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleBtRing(void *p) {
      delete ((::HParticleBtRing*)p);
   }
   static void deleteArray_HParticleBtRing(void *p) {
      delete [] ((::HParticleBtRing*)p);
   }
   static void destruct_HParticleBtRing(void *p) {
      typedef ::HParticleBtRing current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleBtRing(TBuffer &buf, void *obj) {
      ((::HParticleBtRing*)obj)->::HParticleBtRing::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleBtRing

//______________________________________________________________________________
void HParticleBtRingInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleBtRingInfo.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.ReadStaticArray((int*)fPrediction);
      R__b.ReadStaticArray((int*)fRingMatrix);
      R__b.ReadStaticArray((int*)fRichHitAdd);
      R__b.ReadStaticArray((float*)fRichHitCharge);
      R__b.ReadStaticArray((int*)fIsInCluster);
      R__b.ReadStaticArray((float*)fTrackTheta);
      R__b.ReadStaticArray((float*)fTrackPhi);
      R__b.ReadStaticArray((int*)fTrackVertex);
      R__b.ReadStaticArray((int*)fTrackSec);
      R__b.ReadStaticArray((int*)fTrackPCandIdx);
      R__b.ReadStaticArray((bool*)fIsGoodTrack);
      R__b.ReadStaticArray((float*)fPosXCenter);
      R__b.ReadStaticArray((float*)fPosYCenter);
      R__b.ReadStaticArray((int*)fClusTrackNo);
      R__b.ReadStaticArray((bool*)fClusIsGood);
      R__b.ReadStaticArray((int*)fClusPadSum);
      R__b.ReadStaticArray((int*)fClusPadRing);
      R__b.ReadStaticArray((float*)fClusChargeSum);
      R__b.ReadStaticArray((float*)fClusChargeRing);
      R__b.ReadStaticArray((float*)fClusPosX);
      R__b.ReadStaticArray((float*)fClusPosY);
      R__b.ReadStaticArray((int*)fClusClass);
      R__b.ReadStaticArray((int*)fClusNMaxima);
      R__b.ReadStaticArray((int*)fClusNMaximaPad);
      R__b.ReadStaticArray((float*)fClusNMaximaPosX);
      R__b.ReadStaticArray((float*)fClusNMaximaPosY);
      R__b.ReadStaticArray((float*)fClusChi2);
      R__b.ReadStaticArray((float*)fClusChi2XMM);
      R__b.ReadStaticArray((float*)fClusChi2YMM);
      R__b.ReadStaticArray((float*)fClusCircleX);
      R__b.ReadStaticArray((float*)fClusCircleY);
      R__b.ReadStaticArray((float*)fClusSig1X);
      R__b.ReadStaticArray((float*)fClusSig1Y);
      R__b.ReadStaticArray((float*)fClusSig2X);
      R__b.ReadStaticArray((float*)fClusSig2Y);
      R__b.CheckByteCount(R__s, R__c, HParticleBtRingInfo::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleBtRingInfo::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.WriteArray((int*)fPrediction, 16384);
      R__b.WriteArray((int*)fRingMatrix, 16384);
      R__b.WriteArray(fRichHitAdd, 1024);
      R__b.WriteArray(fRichHitCharge, 1024);
      R__b.WriteArray(fIsInCluster, 1024);
      R__b.WriteArray(fTrackTheta, 128);
      R__b.WriteArray(fTrackPhi, 128);
      R__b.WriteArray(fTrackVertex, 128);
      R__b.WriteArray(fTrackSec, 128);
      R__b.WriteArray(fTrackPCandIdx, 128);
      R__b.WriteArray(fIsGoodTrack, 128);
      R__b.WriteArray(fPosXCenter, 128);
      R__b.WriteArray(fPosYCenter, 128);
      R__b.WriteArray((int*)fClusTrackNo, 1024);
      R__b.WriteArray(fClusIsGood, 32);
      R__b.WriteArray(fClusPadSum, 32);
      R__b.WriteArray(fClusPadRing, 32);
      R__b.WriteArray(fClusChargeSum, 32);
      R__b.WriteArray(fClusChargeRing, 32);
      R__b.WriteArray(fClusPosX, 32);
      R__b.WriteArray(fClusPosY, 32);
      R__b.WriteArray(fClusClass, 32);
      R__b.WriteArray((int*)fClusNMaxima, 1024);
      R__b.WriteArray((int*)fClusNMaximaPad, 32768);
      R__b.WriteArray((float*)fClusNMaximaPosX, 32768);
      R__b.WriteArray((float*)fClusNMaximaPosY, 32768);
      R__b.WriteArray((float*)fClusChi2, 32768);
      R__b.WriteArray((float*)fClusChi2XMM, 32768);
      R__b.WriteArray((float*)fClusChi2YMM, 32768);
      R__b.WriteArray((float*)fClusCircleX, 32768);
      R__b.WriteArray((float*)fClusCircleY, 32768);
      R__b.WriteArray((float*)fClusSig1X, 32768);
      R__b.WriteArray((float*)fClusSig1Y, 32768);
      R__b.WriteArray((float*)fClusSig2X, 32768);
      R__b.WriteArray((float*)fClusSig2Y, 32768);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HParticleBtRingInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleBtRingInfo.
      TClass *R__cl = ::HParticleBtRingInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrediction[128][128]", fPrediction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingMatrix[128][128]", fRingMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRichHitAdd[1024]", fRichHitAdd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRichHitCharge[1024]", fRichHitCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsInCluster[1024]", fIsInCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackTheta[128]", fTrackTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackPhi[128]", fTrackPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackVertex[128]", fTrackVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackSec[128]", fTrackSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackPCandIdx[128]", fTrackPCandIdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsGoodTrack[128]", fIsGoodTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosXCenter[128]", fPosXCenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosYCenter[128]", fPosYCenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusTrackNo[32][32]", fClusTrackNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusIsGood[32]", fClusIsGood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusPadSum[32]", fClusPadSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusPadRing[32]", fClusPadRing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusChargeSum[32]", fClusChargeSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusChargeRing[32]", fClusChargeRing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusPosX[32]", fClusPosX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusPosY[32]", fClusPosY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusClass[32]", fClusClass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusNMaxima[32][32]", fClusNMaxima);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusNMaximaPad[32][32][32]", fClusNMaximaPad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusNMaximaPosX[32][32][32]", fClusNMaximaPosX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusNMaximaPosY[32][32][32]", fClusNMaximaPosY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusChi2[32][32][32]", fClusChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusChi2XMM[32][32][32]", fClusChi2XMM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusChi2YMM[32][32][32]", fClusChi2YMM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusCircleX[32][32][32]", fClusCircleX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusCircleY[32][32][32]", fClusCircleY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusSig1X[32][32][32]", fClusSig1X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusSig1Y[32][32][32]", fClusSig1Y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusSig2X[32][32][32]", fClusSig2X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusSig2Y[32][32][32]", fClusSig2Y);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleBtRingInfo(void *p) {
      return  p ? new(p) ::HParticleBtRingInfo : new ::HParticleBtRingInfo;
   }
   static void *newArray_HParticleBtRingInfo(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleBtRingInfo[nElements] : new ::HParticleBtRingInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleBtRingInfo(void *p) {
      delete ((::HParticleBtRingInfo*)p);
   }
   static void deleteArray_HParticleBtRingInfo(void *p) {
      delete [] ((::HParticleBtRingInfo*)p);
   }
   static void destruct_HParticleBtRingInfo(void *p) {
      typedef ::HParticleBtRingInfo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleBtRingInfo(TBuffer &buf, void *obj) {
      ((::HParticleBtRingInfo*)obj)->::HParticleBtRingInfo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleBtRingInfo

//______________________________________________________________________________
void HParticleBtRingF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleBtRingF.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleBtRingF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleBtRingF.
      TClass *R__cl = ::HParticleBtRingF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBtPar", &fBtPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAngleCor", &fAngleCor);
      R__insp.InspectMember(fAngleCor, "fAngleCor.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNSector", &fNSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNVertex", &fNVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNParMean", &fNParMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNParSigma", &fNParSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRingSeg", &fNRingSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRingSegStep", &fNRingSegStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRingSegOffset", &fNRingSegOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRichSeg", &fNRichSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRichSegBorderX", &fRichSegBorderX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRichSegBorderY", &fRichSegBorderY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaAngleMin", &fThetaAngleMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaAngleMax", &fThetaAngleMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParThetaAngleMin", &fParThetaAngleMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParThetaAngleMax", &fParThetaAngleMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSizeMatrix", &fSizeMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeLimit[6]", fChargeLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeLimitMaximum[6]", fChargeLimitMaximum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNSigma", &fNSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxSigmaRange", &fMaxSigmaRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinimumSigmaValue", &fMinimumSigmaValue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaErrorPad", &fSigmaErrorPad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVertexPosMin", &fVertexPosMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVertexPosMax", &fVertexPosMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVertexStep", &fVertexStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiOff[6]", fPhiOff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiOff2[6]", fPhiOff2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiOffsetPar", &fPhiOffsetPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRad2Deg", (void*)&fRad2Deg);
      R__insp.InspectMember("vector<Float_t>", (void*)&fRad2Deg, "fRad2Deg.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRad2DegX", (void*)&fRad2DegX);
      R__insp.InspectMember("vector<Float_t>", (void*)&fRad2DegX, "fRad2DegX.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRad2DegY", (void*)&fRad2DegY);
      R__insp.InspectMember("vector<Float_t>", (void*)&fRad2DegY, "fRad2DegY.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPol2DMean", (void*)&fPol2DMean);
      R__insp.InspectMember("vector<vector<TF2*> >", (void*)&fPol2DMean, "fPol2DMean.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPol2DSigma", (void*)&fPol2DSigma);
      R__insp.InspectMember("vector<vector<TF2*> >", (void*)&fPol2DSigma, "fPol2DSigma.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFiredPads", (void*)&fFiredPads);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&fFiredPads, "fFiredPads.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrediction", (void*)&fPrediction);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&fPrediction, "fPrediction.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingMatrix", (void*)&fRingMatrix);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&fRingMatrix, "fRingMatrix.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRichHitAdd", (void*)&fRichHitAdd);
      R__insp.InspectMember("vector<Int_t>", (void*)&fRichHitAdd, "fRichHitAdd.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRichHitCharge", (void*)&fRichHitCharge);
      R__insp.InspectMember("vector<Float_t>", (void*)&fRichHitCharge, "fRichHitCharge.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackTheta", (void*)&fTrackTheta);
      R__insp.InspectMember("vector<Float_t>", (void*)&fTrackTheta, "fTrackTheta.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackPhi", (void*)&fTrackPhi);
      R__insp.InspectMember("vector<Float_t>", (void*)&fTrackPhi, "fTrackPhi.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackVertex", (void*)&fTrackVertex);
      R__insp.InspectMember("vector<Int_t>", (void*)&fTrackVertex, "fTrackVertex.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackSec", (void*)&fTrackSec);
      R__insp.InspectMember("vector<Int_t>", (void*)&fTrackSec, "fTrackSec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackPCandIdx", (void*)&fTrackPCandIdx);
      R__insp.InspectMember("vector<Int_t>", (void*)&fTrackPCandIdx, "fTrackPCandIdx.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsGoodTrack", (void*)&fIsGoodTrack);
      R__insp.InspectMember("vector<Bool_t>", (void*)&fIsGoodTrack, "fIsGoodTrack.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosXCenter", (void*)&fPosXCenter);
      R__insp.InspectMember("vector<Float_t>", (void*)&fPosXCenter, "fPosXCenter.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosYCenter", (void*)&fPosYCenter);
      R__insp.InspectMember("vector<Float_t>", (void*)&fPosYCenter, "fPosYCenter.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleBtRingF(void *p) {
      return  p ? new(p) ::HParticleBtRingF : new ::HParticleBtRingF;
   }
   static void *newArray_HParticleBtRingF(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleBtRingF[nElements] : new ::HParticleBtRingF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleBtRingF(void *p) {
      delete ((::HParticleBtRingF*)p);
   }
   static void deleteArray_HParticleBtRingF(void *p) {
      delete [] ((::HParticleBtRingF*)p);
   }
   static void destruct_HParticleBtRingF(void *p) {
      typedef ::HParticleBtRingF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleBtRingF(TBuffer &buf, void *obj) {
      ((::HParticleBtRingF*)obj)->::HParticleBtRingF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleBtRingF

//______________________________________________________________________________
void HParticleBtClusterF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleBtClusterF.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleBtClusterF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleBtClusterF.
      TClass *R__cl = ::HParticleBtClusterF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBtPar", &fBtPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRing", &fRing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadUp", &fPadUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadUpRight", &fPadUpRight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadRight", &fPadRight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadDownRight", &fPadDownRight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadDown", &fPadDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadDownLeft", &fPadDownLeft);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadLeft", &fPadLeft);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadUpLeft", &fPadUpLeft);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeLimit[6]", fChargeLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeLimitMaximum[6]", fChargeLimitMaximum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadWidthX", &fPadWidthX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadWidthY", &fPadWidthY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNSigma", &fNSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxSigmaRange", &fMaxSigmaRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxSigmaRangeSmall", &fMaxSigmaRangeSmall);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaErrorPad", &fSigmaErrorPad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMaxLimit", &fNMaxLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusSizeLimit", &fClusSizeLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinimumSigmaValue", &fMinimumSigmaValue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximumType", &fMaximumType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaGaus[2]", fSigmaGaus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaGausRange[2]", fSigmaGausRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeDiagonalPar[3]", fChargeDiagonalPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeVerticalPar[3]", fChargeVerticalPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeHorizontalPar[3]", fChargeHorizontalPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiOff[6]", fPhiOff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiOff2[6]", fPhiOff2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiOffsetPar", &fPhiOffsetPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRingSeg", &fNRingSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRingSegStep", &fNRingSegStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRingSegOffset", &fNRingSegOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNVertex", &fNVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNParMean", &fNParMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNParSigma", &fNParSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParThetaAngleMin", &fParThetaAngleMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParThetaAngleMax", &fParThetaAngleMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPol2DMean", (void*)&fPol2DMean);
      R__insp.InspectMember("vector<vector<TF2*> >", (void*)&fPol2DMean, "fPol2DMean.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPol2DSigma", (void*)&fPol2DSigma);
      R__insp.InspectMember("vector<vector<TF2*> >", (void*)&fPol2DSigma, "fPol2DSigma.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRad2Deg", (void*)&fRad2Deg);
      R__insp.InspectMember("vector<Float_t>", (void*)&fRad2Deg, "fRad2Deg.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRad2DegX", (void*)&fRad2DegX);
      R__insp.InspectMember("vector<Float_t>", (void*)&fRad2DegX, "fRad2DegX.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRad2DegY", (void*)&fRad2DegY);
      R__insp.InspectMember("vector<Float_t>", (void*)&fRad2DegY, "fRad2DegY.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsInCluster", (void*)&fIsInCluster);
      R__insp.InspectMember("vector<Int_t>", (void*)&fIsInCluster, "fIsInCluster.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusTrackNoShared", (void*)&fClusTrackNoShared);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&fClusTrackNoShared, "fClusTrackNoShared.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusIsGood", (void*)&fClusIsGood);
      R__insp.InspectMember("vector<Bool_t>", (void*)&fClusIsGood, "fClusIsGood.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusPadSum", (void*)&fClusPadSum);
      R__insp.InspectMember("vector<Int_t>", (void*)&fClusPadSum, "fClusPadSum.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusPadRing", (void*)&fClusPadRing);
      R__insp.InspectMember("vector<Int_t>", (void*)&fClusPadRing, "fClusPadRing.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusChargeSum", (void*)&fClusChargeSum);
      R__insp.InspectMember("vector<Float_t>", (void*)&fClusChargeSum, "fClusChargeSum.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusChargeRing", (void*)&fClusChargeRing);
      R__insp.InspectMember("vector<Float_t>", (void*)&fClusChargeRing, "fClusChargeRing.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusPosX", (void*)&fClusPosX);
      R__insp.InspectMember("vector<Float_t>", (void*)&fClusPosX, "fClusPosX.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusPosY", (void*)&fClusPosY);
      R__insp.InspectMember("vector<Float_t>", (void*)&fClusPosY, "fClusPosY.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusClass", (void*)&fClusClass);
      R__insp.InspectMember("vector<Int_t>", (void*)&fClusClass, "fClusClass.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusNMaxima", (void*)&fClusNMaxima);
      R__insp.InspectMember("vector<vector<Int_t> >", (void*)&fClusNMaxima, "fClusNMaxima.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusNMaximaPad", (void*)&fClusNMaximaPad);
      R__insp.InspectMember("vector<vector<vector<Int_t> > >", (void*)&fClusNMaximaPad, "fClusNMaximaPad.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusNMaximaPosX", (void*)&fClusNMaximaPosX);
      R__insp.InspectMember("vector<vector<vector<Float_t> > >", (void*)&fClusNMaximaPosX, "fClusNMaximaPosX.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusNMaximaPosY", (void*)&fClusNMaximaPosY);
      R__insp.InspectMember("vector<vector<vector<Float_t> > >", (void*)&fClusNMaximaPosY, "fClusNMaximaPosY.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusChi2", (void*)&fClusChi2);
      R__insp.InspectMember("vector<vector<vector<Float_t> > >", (void*)&fClusChi2, "fClusChi2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusChi2XMM", (void*)&fClusChi2XMM);
      R__insp.InspectMember("vector<vector<vector<Float_t> > >", (void*)&fClusChi2XMM, "fClusChi2XMM.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusChi2YMM", (void*)&fClusChi2YMM);
      R__insp.InspectMember("vector<vector<vector<Float_t> > >", (void*)&fClusChi2YMM, "fClusChi2YMM.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusCircleX", (void*)&fClusCircleX);
      R__insp.InspectMember("vector<vector<vector<Float_t> > >", (void*)&fClusCircleX, "fClusCircleX.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusCircleY", (void*)&fClusCircleY);
      R__insp.InspectMember("vector<vector<vector<Float_t> > >", (void*)&fClusCircleY, "fClusCircleY.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusSig1X", (void*)&fClusSig1X);
      R__insp.InspectMember("vector<vector<vector<Float_t> > >", (void*)&fClusSig1X, "fClusSig1X.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusSig1Y", (void*)&fClusSig1Y);
      R__insp.InspectMember("vector<vector<vector<Float_t> > >", (void*)&fClusSig1Y, "fClusSig1Y.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusSig2X", (void*)&fClusSig2X);
      R__insp.InspectMember("vector<vector<vector<Float_t> > >", (void*)&fClusSig2X, "fClusSig2X.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusSig2Y", (void*)&fClusSig2Y);
      R__insp.InspectMember("vector<vector<vector<Float_t> > >", (void*)&fClusSig2Y, "fClusSig2Y.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPrediction", &fPrediction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRichHitAdd", &fRichHitAdd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRichHitCharge", &fRichHitCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingMeanDistX", (void*)&fRingMeanDistX);
      R__insp.InspectMember("vector<Float_t>", (void*)&fRingMeanDistX, "fRingMeanDistX.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingMeanDistY", (void*)&fRingMeanDistY);
      R__insp.InspectMember("vector<Float_t>", (void*)&fRingMeanDistY, "fRingMeanDistY.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleBtClusterF(void *p) {
      return  p ? new(p) ::HParticleBtClusterF : new ::HParticleBtClusterF;
   }
   static void *newArray_HParticleBtClusterF(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleBtClusterF[nElements] : new ::HParticleBtClusterF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleBtClusterF(void *p) {
      delete ((::HParticleBtClusterF*)p);
   }
   static void deleteArray_HParticleBtClusterF(void *p) {
      delete [] ((::HParticleBtClusterF*)p);
   }
   static void destruct_HParticleBtClusterF(void *p) {
      typedef ::HParticleBtClusterF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleBtClusterF(TBuffer &buf, void *obj) {
      ((::HParticleBtClusterF*)obj)->::HParticleBtClusterF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleBtClusterF

//______________________________________________________________________________
void HParticleBtAngleTrafo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleBtAngleTrafo.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleBtAngleTrafo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleBtAngleTrafo.
      TClass *R__cl = ::HParticleBtAngleTrafo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yThetaPar[6]", yThetaPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yPadThetaPar[6]", yPadThetaPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yPadYPar[6]", yPadYPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaYPar[7]", thetaYPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaYPadPar[6]", thetaYPadPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yYPadPar[6]", yYPadPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xPar[2]", xPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xPadPar[5]", xPadPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzPar[6]", dzPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz2Par[6]", dz2Par);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzPadPar[6]", dzPadPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz2PadPar[6]", dz2PadPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzYPar[6]", dzYPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz2YPar[6]", dz2YPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzThetaPar[6]", dzThetaPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz2ThetaPar[6]", dz2ThetaPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzThetaPhiPar[2]", dzThetaPhiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz2ThetaPhiPar[2]", dz2ThetaPhiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaOffset[3]", thetaOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiOffset", &phiOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaSlope[2]", thetaSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaPadSlope[6]", thetaPadSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dyPadSlope[4]", dyPadSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiSlope[2]", phiSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiPadSlope[4]", phiPadSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiThetaSlope[5]", phiThetaSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "padThetaSlope[4]", padThetaSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yThetaSlope[4]", yThetaSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yOffset[6]", yOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yProjOffset[2]", yProjOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yPadOffset[3]", yPadOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xPadSize", &xPadSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xPadOffset", &xPadOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxVertex", &dxVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxPadVertex", &dxPadVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zRichCenter", &zRichCenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzTarg", &dzTarg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zRef", &zRef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zNorm", &zNorm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaRef", &thetaRef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yRef", &yRef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rad2deg", &rad2deg);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleBtAngleTrafo(void *p) {
      return  p ? new(p) ::HParticleBtAngleTrafo : new ::HParticleBtAngleTrafo;
   }
   static void *newArray_HParticleBtAngleTrafo(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleBtAngleTrafo[nElements] : new ::HParticleBtAngleTrafo[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleBtAngleTrafo(void *p) {
      delete ((::HParticleBtAngleTrafo*)p);
   }
   static void deleteArray_HParticleBtAngleTrafo(void *p) {
      delete [] ((::HParticleBtAngleTrafo*)p);
   }
   static void destruct_HParticleBtAngleTrafo(void *p) {
      typedef ::HParticleBtAngleTrafo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleBtAngleTrafo(TBuffer &buf, void *obj) {
      ((::HParticleBtAngleTrafo*)obj)->::HParticleBtAngleTrafo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleBtAngleTrafo

//______________________________________________________________________________
void HParticleBtPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleBtPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> fNSigma;
      R__b >> fSizeMatrix;
      R__b >> fPhiOffsetPar;
      R__b >> fMinimumSigmaVal;
      R__b >> fMaximumType;
      fRingFitPar.Streamer(R__b);
      fChargeThres.Streamer(R__b);
      fGeomConst.Streamer(R__b);
      fRingSeg.Streamer(R__b);
      fSharedCharge.Streamer(R__b);
      fSigmaGaus.Streamer(R__b);
      fParThetaAngle.Streamer(R__b);
      fPhiOffset.Streamer(R__b);
      fSigmaRange.Streamer(R__b);
      fClusterLimits.Streamer(R__b);
      fVertexPos.Streamer(R__b);
      fRichSeg.Streamer(R__b);
      fNeighbourPad.Streamer(R__b);
      fTF2ParMean.Streamer(R__b);
      fTF2ParSigma.Streamer(R__b);
      fLeptonSelection.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HParticleBtPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleBtPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << fNSigma;
      R__b << fSizeMatrix;
      R__b << fPhiOffsetPar;
      R__b << fMinimumSigmaVal;
      R__b << fMaximumType;
      fRingFitPar.Streamer(R__b);
      fChargeThres.Streamer(R__b);
      fGeomConst.Streamer(R__b);
      fRingSeg.Streamer(R__b);
      fSharedCharge.Streamer(R__b);
      fSigmaGaus.Streamer(R__b);
      fParThetaAngle.Streamer(R__b);
      fPhiOffset.Streamer(R__b);
      fSigmaRange.Streamer(R__b);
      fClusterLimits.Streamer(R__b);
      fVertexPos.Streamer(R__b);
      fRichSeg.Streamer(R__b);
      fNeighbourPad.Streamer(R__b);
      fTF2ParMean.Streamer(R__b);
      fTF2ParSigma.Streamer(R__b);
      fLeptonSelection.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HParticleBtPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleBtPar.
      TClass *R__cl = ::HParticleBtPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNSigma", &fNSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSizeMatrix", &fSizeMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiOffsetPar", &fPhiOffsetPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinimumSigmaVal", &fMinimumSigmaVal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximumType", &fMaximumType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingFitPar", &fRingFitPar);
      R__insp.InspectMember(fRingFitPar, "fRingFitPar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeThres", &fChargeThres);
      R__insp.InspectMember(fChargeThres, "fChargeThres.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeomConst", &fGeomConst);
      R__insp.InspectMember(fGeomConst, "fGeomConst.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingSeg", &fRingSeg);
      R__insp.InspectMember(fRingSeg, "fRingSeg.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSharedCharge", &fSharedCharge);
      R__insp.InspectMember(fSharedCharge, "fSharedCharge.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaGaus", &fSigmaGaus);
      R__insp.InspectMember(fSigmaGaus, "fSigmaGaus.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParThetaAngle", &fParThetaAngle);
      R__insp.InspectMember(fParThetaAngle, "fParThetaAngle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiOffset", &fPhiOffset);
      R__insp.InspectMember(fPhiOffset, "fPhiOffset.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaRange", &fSigmaRange);
      R__insp.InspectMember(fSigmaRange, "fSigmaRange.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusterLimits", &fClusterLimits);
      R__insp.InspectMember(fClusterLimits, "fClusterLimits.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVertexPos", &fVertexPos);
      R__insp.InspectMember(fVertexPos, "fVertexPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRichSeg", &fRichSeg);
      R__insp.InspectMember(fRichSeg, "fRichSeg.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNeighbourPad", &fNeighbourPad);
      R__insp.InspectMember(fNeighbourPad, "fNeighbourPad.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTF2ParMean", &fTF2ParMean);
      R__insp.InspectMember(fTF2ParMean, "fTF2ParMean.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTF2ParSigma", &fTF2ParSigma);
      R__insp.InspectMember(fTF2ParSigma, "fTF2ParSigma.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLeptonSelection", &fLeptonSelection);
      R__insp.InspectMember(fLeptonSelection, "fLeptonSelection.");
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleBtPar(void *p) {
      return  p ? new(p) ::HParticleBtPar : new ::HParticleBtPar;
   }
   static void *newArray_HParticleBtPar(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleBtPar[nElements] : new ::HParticleBtPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleBtPar(void *p) {
      delete ((::HParticleBtPar*)p);
   }
   static void deleteArray_HParticleBtPar(void *p) {
      delete [] ((::HParticleBtPar*)p);
   }
   static void destruct_HParticleBtPar(void *p) {
      typedef ::HParticleBtPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleBtPar(TBuffer &buf, void *obj) {
      ((::HParticleBtPar*)obj)->::HParticleBtPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleBtPar

//______________________________________________________________________________
void HParticleBt::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleBt.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleBt::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleBt.
      TClass *R__cl = ::HParticleBt::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticleBtOutCat", &fParticleBtOutCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticleBtRingInfoCat", &fParticleBtRingInfoCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRing", &fRing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClus", &fClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCandCat", &fCandCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRichCal", &fRichCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSorter", &fSorter);
      R__insp.InspectMember(fSorter, "fSorter.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAngleCor", &fAngleCor);
      R__insp.InspectMember(fAngleCor, "fAngleCor.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBtPar", &fBtPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDebugInfo", &fDebugInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdoAngleCorr", &fdoAngleCorr);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleBt(void *p) {
      return  p ? new(p) ::HParticleBt : new ::HParticleBt;
   }
   static void *newArray_HParticleBt(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleBt[nElements] : new ::HParticleBt[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleBt(void *p) {
      delete ((::HParticleBt*)p);
   }
   static void deleteArray_HParticleBt(void *p) {
      delete [] ((::HParticleBt*)p);
   }
   static void destruct_HParticleBt(void *p) {
      typedef ::HParticleBt current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleBt(TBuffer &buf, void *obj) {
      ((::HParticleBt*)obj)->::HParticleBt::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleBt

//______________________________________________________________________________
void HParticleCandFiller::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCandFiller.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleCandFiller::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleCandFiller.
      TClass *R__cl = ::HParticleCandFiller::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatMetaMatch", &fCatMetaMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatMdcTrkCand", &fCatMdcTrkCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatMdcSeg", &fCatMdcSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatTofHit", &fCatTofHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatTofCluster", &fCatTofCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatShowerHit", &fCatShowerHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichHit", &fCatRichHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRpcCluster", &fCatRpcCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatSpline", &fCatSpline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRK", &fCatRK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatKalman", &fCatKalman);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatGeantKine", &fCatGeantKine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMetaMatchIter", &fMetaMatchIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatParticleCand", &fCatParticleCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatParticleDebug", &fCatParticleDebug);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatParticleMdc", &fCatParticleMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbIsSimulation", &fbIsSimulation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbIsDebug", &fbIsDebug);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbFillMdc", &fbFillMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbgoodSeg0", &fbgoodSeg0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbgoodSeg1", &fbgoodSeg1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbgoodMeta", &fbgoodMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbgoodRK", &fbgoodRK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbgoodLepton", &fbgoodLepton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbnoFake", &fbnoFake);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbdoRichAlign", &fbdoRichAlign);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbdoRichVertexCorr", &fbdoRichVertexCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbdoMETAQANorm", &fbdoMETAQANorm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbdoMomentumCorr", &fbdoMomentumCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbdoPathLengthCorr", &fbdoPathLengthCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbdoGeantAcceptance", &fbdoGeantAcceptance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmomSwitch", &fmomSwitch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fsortSwitch", &fsortSwitch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFillerPar", &fFillerPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTofWalkPar", &fTofWalkPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSizesCells", &fSizesCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cropLay", &cropLay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "all_candidates", (void*)&all_candidates);
      R__insp.InspectMember("vector<candidate*>", (void*)&all_candidates, "all_candidates.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinWireGoodTrack", &fMinWireGoodTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScaleGhostTrack", &fScaleGhostTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScaleGoodTrack", &fScaleGoodTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAngleCloseTrack", &fAngleCloseTrack);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleCandFiller(void *p) {
      return  p ? new(p) ::HParticleCandFiller : new ::HParticleCandFiller;
   }
   static void *newArray_HParticleCandFiller(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleCandFiller[nElements] : new ::HParticleCandFiller[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleCandFiller(void *p) {
      delete ((::HParticleCandFiller*)p);
   }
   static void deleteArray_HParticleCandFiller(void *p) {
      delete [] ((::HParticleCandFiller*)p);
   }
   static void destruct_HParticleCandFiller(void *p) {
      typedef ::HParticleCandFiller current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCandFiller(TBuffer &buf, void *obj) {
      ((::HParticleCandFiller*)obj)->::HParticleCandFiller::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCandFiller

//______________________________________________________________________________
void HParticleTrackSorter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleTrackSorter.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleTrackSorter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleTrackSorter.
      TClass *R__cl = ::HParticleTrackSorter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kSwitchRICHMatchingBackup", &kSwitchRICHMatchingBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRICHMDCWindowBackup", &fRICHMDCWindowBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kIgnoreRICHBackup", &kIgnoreRICHBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kIgnoreInnerMDCBackup", &kIgnoreInnerMDCBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kIgnoreOuterMDCBackup", &kIgnoreOuterMDCBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kIgnoreMETABackup", &kIgnoreMETABackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kIgnorePreviousIndexBackup", &kIgnorePreviousIndexBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kUseYMatchingBackup", &kUseYMatchingBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kUseYMatchingScalingBackup", &kUseYMatchingScalingBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kUseBetaBackup", &kUseBetaBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kUseFakeRejectionBackup", &kUseFakeRejectionBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kUseMETAQABackup", &kUseMETAQABackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMetaBoundaryBackup", &fMetaBoundaryBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBetaLepCutBackup", &fBetaLepCutBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMETAQACutBackup", &fMETAQACutBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOFMAXCutBackup", &fTOFMAXCutBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pUserSortBackup", &pUserSortBackup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fill_Iteration", &fill_Iteration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "selectBest_Iteration", &selectBest_Iteration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "currentEvent", &currentEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "all_candidates", (void*)&all_candidates);
      R__insp.InspectMember("vector<candidateSort*>", (void*)&all_candidates, "all_candidates.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index_RICH", (void*)&index_RICH);
      R__insp.InspectMember("vector<Int_t>", (void*)&index_RICH, "index_RICH.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index_InnerMDC", (void*)&index_InnerMDC);
      R__insp.InspectMember("vector<Int_t>", (void*)&index_InnerMDC, "index_InnerMDC.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index_OuterMDC", (void*)&index_OuterMDC);
      R__insp.InspectMember("vector<Int_t>", (void*)&index_OuterMDC, "index_OuterMDC.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index_SHOWER", (void*)&index_SHOWER);
      R__insp.InspectMember("vector<Int_t>", (void*)&index_SHOWER, "index_SHOWER.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index_TOFHit", (void*)&index_TOFHit);
      R__insp.InspectMember("vector<Int_t>", (void*)&index_TOFHit, "index_TOFHit.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index_TOFClst", (void*)&index_TOFClst);
      R__insp.InspectMember("vector<Int_t>", (void*)&index_TOFClst, "index_TOFClst.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index_RPC", (void*)&index_RPC);
      R__insp.InspectMember("vector<Int_t>", (void*)&index_RPC, "index_RPC.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "old_flags", (void*)&old_flags);
      R__insp.InspectMember("vector<Int_t>", (void*)&old_flags, "old_flags.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nameIndex", &nameIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nameQuality", &nameQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSimulation", &isSimulation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fout", &fout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nt", &nt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pParticleCandCat", &pParticleCandCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterParticleCandCat", &iterParticleCandCat);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleTrackSorter(void *p) {
      return  p ? new(p) ::HParticleTrackSorter : new ::HParticleTrackSorter;
   }
   static void *newArray_HParticleTrackSorter(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleTrackSorter[nElements] : new ::HParticleTrackSorter[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleTrackSorter(void *p) {
      delete ((::HParticleTrackSorter*)p);
   }
   static void deleteArray_HParticleTrackSorter(void *p) {
      delete [] ((::HParticleTrackSorter*)p);
   }
   static void destruct_HParticleTrackSorter(void *p) {
      typedef ::HParticleTrackSorter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleTrackSorter(TBuffer &buf, void *obj) {
      ((::HParticleTrackSorter*)obj)->::HParticleTrackSorter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleTrackSorter

//______________________________________________________________________________
void HParticleTrackCleaner::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleTrackCleaner.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleTrackCleaner::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleTrackCleaner.
      TClass *R__cl = ::HParticleTrackCleaner::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sorter", &sorter);
      R__insp.InspectMember(sorter, "sorter.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pParticleCandCat", &pParticleCandCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pUserSelectLeptons", &pUserSelectLeptons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pUserSelectHadrons", &pUserSelectHadrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pUserSort", &pUserSort);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sortType", &sortType);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleTrackCleaner(void *p) {
      return  p ? new(p) ::HParticleTrackCleaner : new ::HParticleTrackCleaner;
   }
   static void *newArray_HParticleTrackCleaner(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleTrackCleaner[nElements] : new ::HParticleTrackCleaner[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleTrackCleaner(void *p) {
      delete ((::HParticleTrackCleaner*)p);
   }
   static void deleteArray_HParticleTrackCleaner(void *p) {
      delete [] ((::HParticleTrackCleaner*)p);
   }
   static void destruct_HParticleTrackCleaner(void *p) {
      typedef ::HParticleTrackCleaner current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleTrackCleaner(TBuffer &buf, void *obj) {
      ((::HParticleTrackCleaner*)obj)->::HParticleTrackCleaner::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleTrackCleaner

//______________________________________________________________________________
void HParticleRunningMeanI::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleRunningMeanI.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleRunningMeanI::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleRunningMeanI.
      TClass *R__cl = ::HParticleRunningMeanI::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fnMax", &fnMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fminEvts", &fminEvts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fscaleFacSigma", &fscaleFacSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxMin", &fmaxMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmin", &fmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "initialMean", &initialMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "initialSigma", &initialSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmean", &fmean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fsigma", &fsigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmax", &fmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fvalid", &fvalid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fnPoints", &fnPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "findex", &findex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSum", &fSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSum2", &fSum2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fn", &fn);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleRunningMeanI(void *p) {
      return  p ? new(p) ::HParticleRunningMeanI : new ::HParticleRunningMeanI;
   }
   static void *newArray_HParticleRunningMeanI(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleRunningMeanI[nElements] : new ::HParticleRunningMeanI[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleRunningMeanI(void *p) {
      delete ((::HParticleRunningMeanI*)p);
   }
   static void deleteArray_HParticleRunningMeanI(void *p) {
      delete [] ((::HParticleRunningMeanI*)p);
   }
   static void destruct_HParticleRunningMeanI(void *p) {
      typedef ::HParticleRunningMeanI current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleRunningMeanI(TBuffer &buf, void *obj) {
      ((::HParticleRunningMeanI*)obj)->::HParticleRunningMeanI::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleRunningMeanI

//______________________________________________________________________________
void HParticleEvtInfoFiller::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleEvtInfoFiller.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleEvtInfoFiller::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleEvtInfoFiller.
      TClass *R__cl = ::HParticleEvtInfoFiller::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zeroLoc", &zeroLoc);
      R__insp.InspectMember(zeroLoc, "zeroLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWallHitIter", &pWallHitIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRichHitIter", &pRichHitIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRichClusIter", &pRichClusIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcClusIter", &pMdcClusIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcSegIter", &pMdcSegIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTofHitIter", &pTofHitIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRpcClusterIter", &pRpcClusterIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRpcHitIter", &pRpcHitIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pShowerHitIter", &pShowerHitIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pParticleCandIter", &pParticleCandIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pParticleEvtInfoCat", &pParticleEvtInfoCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWallEventPlaneCat", &pWallEventPlaneCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beamtime", &beamtime);
      R__insp.InspectMember(beamtime, "beamtime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lookupMdcGeom", &lookupMdcGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*calparMdc", &calparMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ftimeTofCut", &ftimeTofCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ftimeRpcCut", &ftimeRpcCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fprimary_mindist", &fprimary_mindist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fvertexzCut", &fvertexzCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMetaPILEUPCut", &fMetaPILEUPCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMetaNPILEUPCut", &fMetaNPILEUPCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMdcPILEUPCut[4]", fMdcPILEUPCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMdcPILEUPNCut", &fMdcPILEUPNCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanMult", &fMeanMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanMIPSMult", &fMeanMIPSMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanLEPMult", &fMeanLEPMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaMult", &fSigmaMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaMIPSMult", &fSigmaMIPSMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaLEPMult", &fSigmaLEPMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fminEvts", &fminEvts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxEvts", &fmaxEvts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fminLEPEvts", &fminLEPEvts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxLEPEvts", &fmaxLEPEvts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanMIPSBetaCut", &fMeanMIPSBetaCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanLEPBetaCut", &fMeanLEPBetaCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanLEPMomCut", &fMeanLEPMomCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanLEPRichQACut", &fMeanLEPRichQACut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ftriggerBit", &ftriggerBit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinStartCorrFlag", &fMinStartCorrFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSecToAll", &fSecToAll);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinMult", &fMinMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxFacToMean", &fMaxFacToMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fvetoMin", &fvetoMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fvetoMax", &fvetoMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fminStartMeta", &fminStartMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxStartMeta", &fmaxStartMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fthreshMeta", &fthreshMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fwindowMeta", &fwindowMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "foffsetMeta", &foffsetMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fminStartVeto", &fminStartVeto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxStartVeto", &fmaxStartVeto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fwindowVeto", &fwindowVeto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanALL", &meanALL);
      R__insp.InspectMember(meanALL, "meanALL.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanMIPS", &meanMIPS);
      R__insp.InspectMember(meanMIPS, "meanMIPS.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanLEP", &meanLEP);
      R__insp.InspectMember(meanLEP, "meanLEP.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanALLSec[6]", meanALLSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanMIPSSec[6]", meanMIPSSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanLEPSec[6]", meanLEPSec);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleEvtInfoFiller(void *p) {
      return  p ? new(p) ::HParticleEvtInfoFiller : new ::HParticleEvtInfoFiller;
   }
   static void *newArray_HParticleEvtInfoFiller(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleEvtInfoFiller[nElements] : new ::HParticleEvtInfoFiller[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleEvtInfoFiller(void *p) {
      delete ((::HParticleEvtInfoFiller*)p);
   }
   static void deleteArray_HParticleEvtInfoFiller(void *p) {
      delete [] ((::HParticleEvtInfoFiller*)p);
   }
   static void destruct_HParticleEvtInfoFiller(void *p) {
      typedef ::HParticleEvtInfoFiller current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleEvtInfoFiller(TBuffer &buf, void *obj) {
      ((::HParticleEvtInfoFiller*)obj)->::HParticleEvtInfoFiller::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleEvtInfoFiller

//______________________________________________________________________________
void HParticleStart2HitF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleStart2HitF.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleStart2HitF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleStart2HitF.
      TClass *R__cl = ::HParticleStart2HitF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatTof", &fCatTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatTofClu", &fCatTofClu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRpc", &fCatRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRpcClu", &fCatRpcClu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatStartCal", &fCatStartCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatStartHit", &fCatStartHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nt1", &nt1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nt2", &nt2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nt3", &nt3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*out", &out);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bDebug", &bDebug);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "startTimeOriginal", &startTimeOriginal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "startFlag", &startFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstCluster", (void*)&firstCluster);
      R__insp.InspectMember("vector<Int_t>", (void*)&firstCluster, "firstCluster.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "secondCluster", (void*)&secondCluster);
      R__insp.InspectMember("vector<Int_t>", (void*)&secondCluster, "secondCluster.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSecondTime", &fSecondTime);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleStart2HitF(void *p) {
      return  p ? new(p) ::HParticleStart2HitF : new ::HParticleStart2HitF;
   }
   static void *newArray_HParticleStart2HitF(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleStart2HitF[nElements] : new ::HParticleStart2HitF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleStart2HitF(void *p) {
      delete ((::HParticleStart2HitF*)p);
   }
   static void deleteArray_HParticleStart2HitF(void *p) {
      delete [] ((::HParticleStart2HitF*)p);
   }
   static void destruct_HParticleStart2HitF(void *p) {
      typedef ::HParticleStart2HitF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleStart2HitF(TBuffer &buf, void *obj) {
      ((::HParticleStart2HitF*)obj)->::HParticleStart2HitF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleStart2HitF

//______________________________________________________________________________
void HParticleVertexFind::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleVertexFind.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HReconstructor::Streamer(R__b);
      R__b >> fTukeyConst;
      R__b >> fMaxIterations;
      R__b >> fUsingTukey;
      R__b >> fEpsilon;
      R__b.CheckByteCount(R__s, R__c, HParticleVertexFind::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleVertexFind::IsA(), kTRUE);
      HReconstructor::Streamer(R__b);
      R__b << fTukeyConst;
      R__b << fMaxIterations;
      R__b << fUsingTukey;
      R__b << fEpsilon;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HParticleVertexFind::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleVertexFind.
      TClass *R__cl = ::HParticleVertexFind::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFitter", &fFitter);
      R__insp.InspectMember(fFitter, "fFitter.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPos", &fPos);
      R__insp.InspectMember(fPos, "fPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAlpha", &fAlpha);
      R__insp.InspectMember(fAlpha, "fAlpha.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCands", (void*)&fCands);
      R__insp.InspectMember("vector<HParticleCand*>", (void*)&fCands, "fCands.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fweights", (void*)&fweights);
      R__insp.InspectMember("vector<Double_t>", (void*)&fweights, "fweights.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInput", &fInput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeometry", &fGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSpecGeometry", &fSpecGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTukeyConst", &fTukeyConst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxIterations", &fMaxIterations);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsingTukey", &fUsingTukey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEpsilon", &fEpsilon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fminZ", &fminZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxZ", &fmaxZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxR", &fmaxR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmomChi2Cut", &fmomChi2Cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fseg0Chi2Cut", &fseg0Chi2Cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fminReqTrack", &fminReqTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fminWindow", &fminWindow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProgressiveTukey", &fProgressiveTukey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcallExecuteManual", &fcallExecuteManual);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleVertexFind(void *p) {
      return  p ? new(p) ::HParticleVertexFind : new ::HParticleVertexFind;
   }
   static void *newArray_HParticleVertexFind(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleVertexFind[nElements] : new ::HParticleVertexFind[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleVertexFind(void *p) {
      delete ((::HParticleVertexFind*)p);
   }
   static void deleteArray_HParticleVertexFind(void *p) {
      delete [] ((::HParticleVertexFind*)p);
   }
   static void destruct_HParticleVertexFind(void *p) {
      typedef ::HParticleVertexFind current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleVertexFind(TBuffer &buf, void *obj) {
      ((::HParticleVertexFind*)obj)->::HParticleVertexFind::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleVertexFind

//______________________________________________________________________________
void HParticlePathLengthCorr::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticlePathLengthCorr.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HParticlePathLengthCorr::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticlePathLengthCorr.
      TClass *R__cl = ::HParticlePathLengthCorr::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*candCat", &candCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pVertex", &pVertex);
      R__insp.InspectMember(pVertex, "pVertex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "A[6]", A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "B[6]", B);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "D[6]", D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "an[6]", an);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hPlane[6]", hPlane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zVm", &zVm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xVm", &xVm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yVm", &yVm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "start", &start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beamVelocity", &beamVelocity);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticlePathLengthCorr(void *p) {
      return  p ? new(p) ::HParticlePathLengthCorr : new ::HParticlePathLengthCorr;
   }
   static void *newArray_HParticlePathLengthCorr(Long_t nElements, void *p) {
      return p ? new(p) ::HParticlePathLengthCorr[nElements] : new ::HParticlePathLengthCorr[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticlePathLengthCorr(void *p) {
      delete ((::HParticlePathLengthCorr*)p);
   }
   static void deleteArray_HParticlePathLengthCorr(void *p) {
      delete [] ((::HParticlePathLengthCorr*)p);
   }
   static void destruct_HParticlePathLengthCorr(void *p) {
      typedef ::HParticlePathLengthCorr current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticlePathLengthCorr(TBuffer &buf, void *obj) {
      ((::HParticlePathLengthCorr*)obj)->::HParticlePathLengthCorr::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticlePathLengthCorr

//______________________________________________________________________________
void HParticleT0Reco::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleT0Reco.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleT0Reco::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleT0Reco.
      TClass *R__cl = ::HParticleT0Reco::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*candCat", &candCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catStart", &catStart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catStartcal", &catStartcal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvHeader", &fEvHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eventMETA[2]", &eventMETA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventTOF", (void*)&eventTOF);
      R__insp.InspectMember("vector<tofvalues>", (void*)&eventTOF, "eventTOF.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventRPC", (void*)&eventRPC);
      R__insp.InspectMember("vector<tofvalues>", (void*)&eventRPC, "eventRPC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "start[2][16]", start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "buff", (void*)&buff);
      R__insp.InspectMember("HParticleT0Reco::buffers", (void*)&buff, "buff.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vparticle", (void*)&vparticle);
      R__insp.InspectMember("vector<Int_t>", (void*)&vparticle, "vparticle.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mIdToIndex", (void*)&mIdToIndex);
      R__insp.InspectMember("map<Int_t,Int_t>", (void*)&mIdToIndex, "mIdToIndex.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mMomCut1Sys[2]", mMomCut1Sys);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mMomCut2Sys[2]", mMomCut2Sys);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0rpc", &t0rpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0tof", &t0tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0startcont", &t0startcont);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0startconterr", &t0startconterr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c", &c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.InspectMember(run, "run.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseFlagged", &fUseFlagged);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fisSimulation", &fisSimulation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fisEmbedding", &fisEmbedding);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eLoss", &eLoss);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleT0Reco(void *p) {
      return  p ? new(p) ::HParticleT0Reco : new ::HParticleT0Reco;
   }
   static void *newArray_HParticleT0Reco(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleT0Reco[nElements] : new ::HParticleT0Reco[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleT0Reco(void *p) {
      delete ((::HParticleT0Reco*)p);
   }
   static void deleteArray_HParticleT0Reco(void *p) {
      delete [] ((::HParticleT0Reco*)p);
   }
   static void destruct_HParticleT0Reco(void *p) {
      typedef ::HParticleT0Reco current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleT0Reco(TBuffer &buf, void *obj) {
      ((::HParticleT0Reco*)obj)->::HParticleT0Reco::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleT0Reco

//______________________________________________________________________________
void HParticleCandFillerPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCandFillerPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 6; R__i++)
         phiLow[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 6; R__i++)
         phiUp[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 6; R__i++)
         thetaLow[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 6; R__i++)
         thetaUp[R__i].Streamer(R__b);
      R__b >> zRichCenter;
      R__b.CheckByteCount(R__s, R__c, HParticleCandFillerPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCandFillerPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 6; R__i++)
         phiLow[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 6; R__i++)
         phiUp[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 6; R__i++)
         thetaLow[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 6; R__i++)
         thetaUp[R__i].Streamer(R__b);
      R__b << zRichCenter;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HParticleCandFillerPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleCandFillerPar.
      TClass *R__cl = ::HParticleCandFillerPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiLow[6]", phiLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiUp[6]", phiUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaLow[6]", thetaLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaUp[6]", thetaUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zRichCenter", &zRichCenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hphiLow[6]", &hphiLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hphiUp[6]", &hphiUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hthetaLow[6]", &hthetaLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hthetaUp[6]", &hthetaUp);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleCandFillerPar(void *p) {
      return  p ? new(p) ::HParticleCandFillerPar : new ::HParticleCandFillerPar;
   }
   static void *newArray_HParticleCandFillerPar(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleCandFillerPar[nElements] : new ::HParticleCandFillerPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleCandFillerPar(void *p) {
      delete ((::HParticleCandFillerPar*)p);
   }
   static void deleteArray_HParticleCandFillerPar(void *p) {
      delete [] ((::HParticleCandFillerPar*)p);
   }
   static void destruct_HParticleCandFillerPar(void *p) {
      typedef ::HParticleCandFillerPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCandFillerPar(TBuffer &buf, void *obj) {
      ((::HParticleCandFillerPar*)obj)->::HParticleCandFillerPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCandFillerPar

//______________________________________________________________________________
void HParticleContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleContFact.

   HContFact::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleContFact.
      TClass *R__cl = ::HParticleContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      HContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleContFact(void *p) {
      return  p ? new(p) ::HParticleContFact : new ::HParticleContFact;
   }
   static void *newArray_HParticleContFact(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleContFact[nElements] : new ::HParticleContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleContFact(void *p) {
      delete ((::HParticleContFact*)p);
   }
   static void deleteArray_HParticleContFact(void *p) {
      delete [] ((::HParticleContFact*)p);
   }
   static void destruct_HParticleContFact(void *p) {
      typedef ::HParticleContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleContFact(TBuffer &buf, void *obj) {
      ((::HParticleContFact*)obj)->::HParticleContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleContFact

//______________________________________________________________________________
void HParticleTool::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleTool.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleTool::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleTool.
      TClass *R__cl = ::HParticleTool::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleTool(void *p) {
      return  p ? new(p) ::HParticleTool : new ::HParticleTool;
   }
   static void *newArray_HParticleTool(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleTool[nElements] : new ::HParticleTool[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleTool(void *p) {
      delete ((::HParticleTool*)p);
   }
   static void deleteArray_HParticleTool(void *p) {
      delete [] ((::HParticleTool*)p);
   }
   static void destruct_HParticleTool(void *p) {
      typedef ::HParticleTool current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleTool(TBuffer &buf, void *obj) {
      ((::HParticleTool*)obj)->::HParticleTool::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleTool

//______________________________________________________________________________
void HParticleTree::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleTree.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleTree::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleTree.
      TClass *R__cl = ::HParticleTree::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurrentEvent", &fCurrentEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputFile", &fOutputFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCycleNumber", &fCycleNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputFileName", &fOutputFileName);
      R__insp.InspectMember(fOutputFileName, "fOutputFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputTitle", &fOutputTitle);
      R__insp.InspectMember(fOutputTitle, "fOutputTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputOption", &fOutputOption);
      R__insp.InspectMember(fOutputOption, "fOutputOption.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputCompression", &fOutputCompression);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputFileSuffix", &fOutputFileSuffix);
      R__insp.InspectMember(fOutputFileSuffix, "fOutputFileSuffix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputDir", &fOutputDir);
      R__insp.InspectMember(fOutputDir, "fOutputDir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutFound", &fOutFound);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kSkipEmptyEvents", &kSkipEmptyEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kSkipTracks", &kSkipTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kSwitchRICHMatching", &kSwitchRICHMatching);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRICHMDCWindow", &fRICHMDCWindow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kIgnoreRICH", &kIgnoreRICH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kIgnoreInnerMDC", &kIgnoreInnerMDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kIgnoreOuterMDC", &kIgnoreOuterMDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kIgnoreMETA", &kIgnoreMETA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kIgnorePreviousIndex", &kIgnorePreviousIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sorter", &sorter);
      R__insp.InspectMember(sorter, "sorter.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCatNums", (void*)&fCatNums);
      R__insp.InspectMember("vector<Int_t>", (void*)&fCatNums, "fCatNums.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmCatNameToNum", (void*)&fmCatNameToNum);
      R__insp.InspectMember("map<TString,Int_t>", (void*)&fmCatNameToNum, "fmCatNameToNum.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmCatNumToName", (void*)&fmCatNumToName);
      R__insp.InspectMember("map<Int_t,TString>", (void*)&fmCatNumToName, "fmCatNumToName.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmCatNumToPointer", (void*)&fmCatNumToPointer);
      R__insp.InspectMember("map<Int_t,HCategory*>", (void*)&fmCatNumToPointer, "fmCatNumToPointer.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmCatNameToPointer", (void*)&fmCatNameToPointer);
      R__insp.InspectMember("map<TString,HCategory*>", (void*)&fmCatNameToPointer, "fmCatNameToPointer.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmCatNumToFullCopy", (void*)&fmCatNumToFullCopy);
      R__insp.InspectMember("map<Int_t,Int_t>", (void*)&fmCatNumToFullCopy, "fmCatNumToFullCopy.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmCatNumSupport", (void*)&fmCatNumSupport);
      R__insp.InspectMember("vector<Int_t>", (void*)&fmCatNumSupport, "fmCatNumSupport.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmCatNumFullCopySupport", (void*)&fmCatNumFullCopySupport);
      R__insp.InspectMember("vector<Int_t>", (void*)&fmCatNumFullCopySupport, "fmCatNumFullCopySupport.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pUserSelectEvent", &pUserSelectEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pUserSelectLeptons", &pUserSelectLeptons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pUserSelectHadrons", &pUserSelectHadrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pUserKeepTrack", &pUserKeepTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParamSelectEvent", &fParamSelectEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ctMdcSeg[6][2]", ctMdcSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ctMdcClus[6][2]", ctMdcClus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ctMdcHit[6][4]", ctMdcHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ctRpcClus[6]", ctRpcClus);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleTree(void *p) {
      return  p ? new(p) ::HParticleTree : new ::HParticleTree;
   }
   static void *newArray_HParticleTree(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleTree[nElements] : new ::HParticleTree[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleTree(void *p) {
      delete ((::HParticleTree*)p);
   }
   static void deleteArray_HParticleTree(void *p) {
      delete [] ((::HParticleTree*)p);
   }
   static void destruct_HParticleTree(void *p) {
      typedef ::HParticleTree current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleTree(TBuffer &buf, void *obj) {
      ((::HParticleTree*)obj)->::HParticleTree::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleTree

//______________________________________________________________________________
void HParticleAngleCor::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleAngleCor.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleAngleCor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleAngleCor.
      TClass *R__cl = ::HParticleAngleCor::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanZTarget", &meanZTarget);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zRichCenter", &zRichCenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zMirror", &zMirror);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rMirror", &rMirror);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "drShield", &drShield);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxRhoShield", &maxRhoShield);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useMeanXY", &useMeanXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useShield", &useShield);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertexType", &vertexType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bDoWarn", &bDoWarn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumXVertex", &sumXVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumYVertex", &sumYVertex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxAverage", &maxAverage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qxVertex", (void*)&qxVertex);
      R__insp.InspectMember("queue<Float_t>", (void*)&qxVertex, "qxVertex.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qyVertex", (void*)&qyVertex);
      R__insp.InspectMember("queue<Float_t>", (void*)&qyVertex, "qyVertex.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleAngleCor(void *p) {
      return  p ? new(p) ::HParticleAngleCor : new ::HParticleAngleCor;
   }
   static void *newArray_HParticleAngleCor(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleAngleCor[nElements] : new ::HParticleAngleCor[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleAngleCor(void *p) {
      delete ((::HParticleAngleCor*)p);
   }
   static void deleteArray_HParticleAngleCor(void *p) {
      delete [] ((::HParticleAngleCor*)p);
   }
   static void destruct_HParticleAngleCor(void *p) {
      typedef ::HParticleAngleCor current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleAngleCor(TBuffer &buf, void *obj) {
      ((::HParticleAngleCor*)obj)->::HParticleAngleCor::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleAngleCor

//______________________________________________________________________________
void HParticleGeant::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleGeant.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleGeant::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleGeant.
      TClass *R__cl = ::HParticleGeant::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fparticle", &fparticle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fmother", &fmother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fmotherDecay", &fmotherDecay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vReco", (void*)&vReco);
      R__insp.InspectMember("vector<HParticleCandSim*>", (void*)&vReco, "vReco.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInAcceptance", &fInAcceptance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fgeneration", &fgeneration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdecayVertex", &fdecayVertex);
      R__insp.InspectMember(fdecayVertex, "fdecayVertex.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleGeant(void *p) {
      return  p ? new(p) ::HParticleGeant : new ::HParticleGeant;
   }
   static void *newArray_HParticleGeant(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleGeant[nElements] : new ::HParticleGeant[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleGeant(void *p) {
      delete ((::HParticleGeant*)p);
   }
   static void deleteArray_HParticleGeant(void *p) {
      delete [] ((::HParticleGeant*)p);
   }
   static void destruct_HParticleGeant(void *p) {
      typedef ::HParticleGeant current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleGeant(TBuffer &buf, void *obj) {
      ((::HParticleGeant*)obj)->::HParticleGeant::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleGeant

//______________________________________________________________________________
void HParticleGeantDecay::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleGeantDecay.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleGeantDecay::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleGeantDecay.
      TClass *R__cl = ::HParticleGeantDecay::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fmother", &fmother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdaughters", (void*)&fdaughters);
      R__insp.InspectMember("vector<HGeantKine*>", (void*)&fdaughters, "fdaughters.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdecayVertex", &fdecayVertex);
      R__insp.InspectMember(fdecayVertex, "fdecayVertex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fgeneration", &fgeneration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fmotherDecay", &fmotherDecay);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleGeantDecay(void *p) {
      return  p ? new(p) ::HParticleGeantDecay : new ::HParticleGeantDecay;
   }
   static void *newArray_HParticleGeantDecay(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleGeantDecay[nElements] : new ::HParticleGeantDecay[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleGeantDecay(void *p) {
      delete ((::HParticleGeantDecay*)p);
   }
   static void deleteArray_HParticleGeantDecay(void *p) {
      delete [] ((::HParticleGeantDecay*)p);
   }
   static void destruct_HParticleGeantDecay(void *p) {
      typedef ::HParticleGeantDecay current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleGeantDecay(TBuffer &buf, void *obj) {
      ((::HParticleGeantDecay*)obj)->::HParticleGeantDecay::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleGeantDecay

//______________________________________________________________________________
void HParticleGeantEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleGeantEvent.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleGeantEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleGeantEvent.
      TClass *R__cl = ::HParticleGeantEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mToDaughters", (void*)&mToDaughters);
      R__insp.InspectMember("map<HGeantKine*,vector<HGeantKine*> >", (void*)&mToDaughters, "mToDaughters.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mToParticle", (void*)&mToParticle);
      R__insp.InspectMember("map<Int_t,HParticleGeant*>", (void*)&mToParticle, "mToParticle.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vDecays", (void*)&vDecays);
      R__insp.InspectMember("vector<HParticleGeantDecay*>", (void*)&vDecays, "vDecays.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vexternalParticles", (void*)&vexternalParticles);
      R__insp.InspectMember("vector<HGeantKine*>", (void*)&vexternalParticles, "vexternalParticles.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vexternalKine", (void*)&vexternalKine);
      R__insp.InspectMember("vector<HGeantKine*>", (void*)&vexternalKine, "vexternalKine.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vParticles", (void*)&vParticles);
      R__insp.InspectMember("vector<HParticleGeant*>", (void*)&vParticles, "vParticles.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "feventVertex", &feventVertex);
      R__insp.InspectMember(feventVertex, "feventVertex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamEnergy", &fBeamEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventPlane", &fEventPlane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpactParam", &fImpactParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bConvertExtThermal", &bConvertExtThermal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bCorrectInfo", &bCorrectInfo);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleGeantEvent(void *p) {
      return  p ? new(p) ::HParticleGeantEvent : new ::HParticleGeantEvent;
   }
   static void *newArray_HParticleGeantEvent(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleGeantEvent[nElements] : new ::HParticleGeantEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleGeantEvent(void *p) {
      delete ((::HParticleGeantEvent*)p);
   }
   static void deleteArray_HParticleGeantEvent(void *p) {
      delete [] ((::HParticleGeantEvent*)p);
   }
   static void destruct_HParticleGeantEvent(void *p) {
      typedef ::HParticleGeantEvent current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleGeantEvent(TBuffer &buf, void *obj) {
      ((::HParticleGeantEvent*)obj)->::HParticleGeantEvent::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleGeantEvent

//______________________________________________________________________________
void HParticleGeantPair::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleGeantPair.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TLorentzVector::Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 2; R__i++)
         fc[R__i].Streamer(R__b);
      R__b.ReadStaticArray((int*)fPID);
      R__b >> fMotherPID;
      R__b >> foAngle;
      R__b >> fstatusFlags;
      fEventVertex.Streamer(R__b);
      fDecayVertex.Streamer(R__b);
      R__b.ReadStaticArray((float*)fVerMinDistCand);
      R__b >> fVerMinDistMother;
      R__b >> fVerDistMother;
      R__b >> fMinDistCandidates;
      R__b.CheckByteCount(R__s, R__c, HParticleGeantPair::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleGeantPair::IsA(), kTRUE);
      TLorentzVector::Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 2; R__i++)
         fc[R__i].Streamer(R__b);
      R__b.WriteArray(fPID, 2);
      R__b << fMotherPID;
      R__b << foAngle;
      R__b << fstatusFlags;
      fEventVertex.Streamer(R__b);
      fDecayVertex.Streamer(R__b);
      R__b.WriteArray(fVerMinDistCand, 2);
      R__b << fVerMinDistMother;
      R__b << fVerDistMother;
      R__b << fMinDistCandidates;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HParticleGeantPair::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleGeantPair.
      TClass *R__cl = ::HParticleGeantPair::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fcand[2]", &fcand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fmother", &fmother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fc[2]", fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPID[2]", fPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMotherPID", &fMotherPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "foAngle", &foAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fstatusFlags", &fstatusFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventVertex", &fEventVertex);
      R__insp.InspectMember(fEventVertex, "fEventVertex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDecayVertex", &fDecayVertex);
      R__insp.InspectMember(fDecayVertex, "fDecayVertex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerMinDistCand[2]", fVerMinDistCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerMinDistMother", &fVerMinDistMother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerDistMother", &fVerDistMother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinDistCandidates", &fMinDistCandidates);
      TLorentzVector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleGeantPair(void *p) {
      return  p ? new(p) ::HParticleGeantPair : new ::HParticleGeantPair;
   }
   static void *newArray_HParticleGeantPair(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleGeantPair[nElements] : new ::HParticleGeantPair[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleGeantPair(void *p) {
      delete ((::HParticleGeantPair*)p);
   }
   static void deleteArray_HParticleGeantPair(void *p) {
      delete [] ((::HParticleGeantPair*)p);
   }
   static void destruct_HParticleGeantPair(void *p) {
      typedef ::HParticleGeantPair current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleGeantPair(TBuffer &buf, void *obj) {
      ((::HParticleGeantPair*)obj)->::HParticleGeantPair::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleGeantPair

//______________________________________________________________________________
void HParticlePair::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticlePair.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TLorentzVector::Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 2; R__i++)
         fc[R__i].Streamer(R__b);
      R__b >> fpairFlags;
      R__b >> fstatusFlags;
      R__b.ReadStaticArray((int*)fPID);
      R__b >> fMotherPID;
      R__b >> foAngle;
      R__b >> fIsSimulation;
      fEventVertex.Streamer(R__b);
      fDecayVertex.Streamer(R__b);
      R__b.ReadStaticArray((float*)fVerMinDistCand);
      R__b >> fVerMinDistMother;
      R__b >> fVerDistMother;
      R__b >> fMinDistCandidates;
      R__b.CheckByteCount(R__s, R__c, HParticlePair::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticlePair::IsA(), kTRUE);
      TLorentzVector::Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 2; R__i++)
         fc[R__i].Streamer(R__b);
      R__b << fpairFlags;
      R__b << fstatusFlags;
      R__b.WriteArray(fPID, 2);
      R__b << fMotherPID;
      R__b << foAngle;
      R__b << fIsSimulation;
      fEventVertex.Streamer(R__b);
      fDecayVertex.Streamer(R__b);
      R__b.WriteArray(fVerMinDistCand, 2);
      R__b << fVerMinDistMother;
      R__b << fVerDistMother;
      R__b << fMinDistCandidates;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HParticlePair::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticlePair.
      TClass *R__cl = ::HParticlePair::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fcand[2]", &fcand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fpair[2]", &fpair);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fc[2]", fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpairFlags", &fpairFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fstatusFlags", &fstatusFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPID[2]", fPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMotherPID", &fMotherPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "foAngle", &foAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsSimulation", &fIsSimulation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventVertex", &fEventVertex);
      R__insp.InspectMember(fEventVertex, "fEventVertex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDecayVertex", &fDecayVertex);
      R__insp.InspectMember(fDecayVertex, "fDecayVertex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerMinDistCand[2]", fVerMinDistCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerMinDistMother", &fVerMinDistMother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerDistMother", &fVerDistMother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinDistCandidates", &fMinDistCandidates);
      TLorentzVector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticlePair(void *p) {
      return  p ? new(p) ::HParticlePair : new ::HParticlePair;
   }
   static void *newArray_HParticlePair(Long_t nElements, void *p) {
      return p ? new(p) ::HParticlePair[nElements] : new ::HParticlePair[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticlePair(void *p) {
      delete ((::HParticlePair*)p);
   }
   static void deleteArray_HParticlePair(void *p) {
      delete [] ((::HParticlePair*)p);
   }
   static void destruct_HParticlePair(void *p) {
      typedef ::HParticlePair current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticlePair(TBuffer &buf, void *obj) {
      ((::HParticlePair*)obj)->::HParticlePair::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticlePair

//______________________________________________________________________________
void HParticleDraw::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleDraw.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleDraw::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleDraw.
      TClass *R__cl = ::HParticleDraw::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flineWidth", &flineWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frefColor", &frefColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fusedColor", &fusedColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fleptonColor", &fleptonColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ffittedStyle", &ffittedStyle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fnoFittedStyle", &fnoFittedStyle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmetaColor", &fmetaColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frichColor", &frichColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fuseRICH", &fuseRICH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ftextSizeScale", &ftextSizeScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ftextSizeInfoScale", &ftextSizeInfoScale);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleDraw(void *p) {
      return  p ? new(p) ::HParticleDraw : new ::HParticleDraw;
   }
   static void *newArray_HParticleDraw(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleDraw[nElements] : new ::HParticleDraw[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleDraw(void *p) {
      delete ((::HParticleDraw*)p);
   }
   static void deleteArray_HParticleDraw(void *p) {
      delete [] ((::HParticleDraw*)p);
   }
   static void destruct_HParticleDraw(void *p) {
      typedef ::HParticleDraw current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleDraw(TBuffer &buf, void *obj) {
      ((::HParticleDraw*)obj)->::HParticleDraw::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleDraw

//______________________________________________________________________________
void HParticlePairDraw::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticlePairDraw.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HParticlePairDraw::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticlePairDraw.
      TClass *R__cl = ::HParticlePairDraw::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flineWidth", &flineWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frefColor", &frefColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fusedColor", &fusedColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fleptonColor", &fleptonColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ffittedStyle", &ffittedStyle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fnoFittedStyle", &fnoFittedStyle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmetaColor", &fmetaColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frichColor", &frichColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fuseRICH", &fuseRICH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ftextSizeScale", &ftextSizeScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ftextSizeInfoScale", &ftextSizeInfoScale);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticlePairDraw(void *p) {
      return  p ? new(p) ::HParticlePairDraw : new ::HParticlePairDraw;
   }
   static void *newArray_HParticlePairDraw(Long_t nElements, void *p) {
      return p ? new(p) ::HParticlePairDraw[nElements] : new ::HParticlePairDraw[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticlePairDraw(void *p) {
      delete ((::HParticlePairDraw*)p);
   }
   static void deleteArray_HParticlePairDraw(void *p) {
      delete [] ((::HParticlePairDraw*)p);
   }
   static void destruct_HParticlePairDraw(void *p) {
      typedef ::HParticlePairDraw current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticlePairDraw(TBuffer &buf, void *obj) {
      ((::HParticlePairDraw*)obj)->::HParticlePairDraw::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticlePairDraw

//______________________________________________________________________________
void HParticlePairMaker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticlePairMaker.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HParticlePairMaker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticlePairMaker.
      TClass *R__cl = ::HParticlePairMaker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "freference", (void*)&freference);
      R__insp.InspectMember("vector<HParticleCand*>", (void*)&freference, "freference.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fothers", (void*)&fothers);
      R__insp.InspectMember("vector<HParticleCand*>", (void*)&fothers, "fothers.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ffullrecoOthers", (void*)&ffullrecoOthers);
      R__insp.InspectMember("vector<HParticleCand*>", (void*)&ffullrecoOthers, "ffullrecoOthers.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fnofullrecoOthers", (void*)&fnofullrecoOthers);
      R__insp.InspectMember("vector<HParticleCand*>", (void*)&fnofullrecoOthers, "fnofullrecoOthers.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpairs", (void*)&fpairs);
      R__insp.InspectMember("vector<HParticlePair>", (void*)&fpairs, "fpairs.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTofHittoCand", (void*)&mTofHittoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCand*> >", (void*)&mTofHittoCand, "mTofHittoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTofClsttoCand", (void*)&mTofClsttoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCand*> >", (void*)&mTofClsttoCand, "mTofClsttoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mRpcClsttoCand", (void*)&mRpcClsttoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCand*> >", (void*)&mRpcClsttoCand, "mRpcClsttoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mShowertoCand", (void*)&mShowertoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCand*> >", (void*)&mShowertoCand, "mShowertoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mInnerMdctoCand", (void*)&mInnerMdctoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCand*> >", (void*)&mInnerMdctoCand, "mInnerMdctoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mOuterMdctoCand", (void*)&mOuterMdctoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCand*> >", (void*)&mOuterMdctoCand, "mOuterMdctoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mRichtoCand", (void*)&mRichtoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCand*> >", (void*)&mRichtoCand, "mRichtoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mCandtoPair", (void*)&mCandtoPair);
      R__insp.InspectMember("map<HParticleCand*,vector<HParticlePair*> >", (void*)&mCandtoPair, "mCandtoPair.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fselectPID1", &fselectPID1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fselectPID2", &fselectPID2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fuserFilter", &fuserFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPID1", &fPID1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPID2", &fPID2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMotherPID", &fMotherPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fuse_kIsLepton", &fuse_kIsLepton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdoSkippedFullCandPairs", &fdoSkippedFullCandPairs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVertexCase", &fVertexCase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVertex", &fVertex);
      R__insp.InspectMember(fVertex, "fVertex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCaseCt", (void*)&fCaseCt);
      R__insp.InspectMember("vector<UInt_t>", (void*)&fCaseCt, "fCaseCt.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCaseVec", (void*)&fCaseVec);
      R__insp.InspectMember("vector<UInt_t>", (void*)&fCaseVec, "fCaseVec.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richCandCt", &richCandCt);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticlePairMaker(void *p) {
      return  p ? new(p) ::HParticlePairMaker : new ::HParticlePairMaker;
   }
   static void *newArray_HParticlePairMaker(Long_t nElements, void *p) {
      return p ? new(p) ::HParticlePairMaker[nElements] : new ::HParticlePairMaker[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticlePairMaker(void *p) {
      delete ((::HParticlePairMaker*)p);
   }
   static void deleteArray_HParticlePairMaker(void *p) {
      delete [] ((::HParticlePairMaker*)p);
   }
   static void destruct_HParticlePairMaker(void *p) {
      typedef ::HParticlePairMaker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticlePairMaker(TBuffer &buf, void *obj) {
      ((::HParticlePairMaker*)obj)->::HParticlePairMaker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticlePairMaker

//______________________________________________________________________________
void HParticleBooker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleBooker.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HParticleBooker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleBooker.
      TClass *R__cl = ::HParticleBooker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTofHittoCand", (void*)&mTofHittoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCand*> >", (void*)&mTofHittoCand, "mTofHittoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTofClsttoCand", (void*)&mTofClsttoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCand*> >", (void*)&mTofClsttoCand, "mTofClsttoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mRpcClsttoCand", (void*)&mRpcClsttoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCand*> >", (void*)&mRpcClsttoCand, "mRpcClsttoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mShowertoCand", (void*)&mShowertoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCand*> >", (void*)&mShowertoCand, "mShowertoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mInnerMdctoCand", (void*)&mInnerMdctoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCand*> >", (void*)&mInnerMdctoCand, "mInnerMdctoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mOuterMdctoCand", (void*)&mOuterMdctoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCand*> >", (void*)&mOuterMdctoCand, "mOuterMdctoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mRichtoCand", (void*)&mRichtoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCand*> >", (void*)&mRichtoCand, "mRichtoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vTofHitInd", (void*)&vTofHitInd);
      R__insp.InspectMember("vector<Int_t>", (void*)&vTofHitInd, "vTofHitInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vTofClstInd", (void*)&vTofClstInd);
      R__insp.InspectMember("vector<Int_t>", (void*)&vTofClstInd, "vTofClstInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vRpcClstInd", (void*)&vRpcClstInd);
      R__insp.InspectMember("vector<Int_t>", (void*)&vRpcClstInd, "vRpcClstInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vShowerInd", (void*)&vShowerInd);
      R__insp.InspectMember("vector<Int_t>", (void*)&vShowerInd, "vShowerInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vInnerMdcInd", (void*)&vInnerMdcInd);
      R__insp.InspectMember("vector<Int_t>", (void*)&vInnerMdcInd, "vInnerMdcInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vOuterMdcInd", (void*)&vOuterMdcInd);
      R__insp.InspectMember("vector<Int_t>", (void*)&vOuterMdcInd, "vOuterMdcInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vRichInd", (void*)&vRichInd);
      R__insp.InspectMember("vector<Int_t>", (void*)&vRichInd, "vRichInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vTofHit", (void*)&vTofHit);
      R__insp.InspectMember("vector<HTofHit*>", (void*)&vTofHit, "vTofHit.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vTofClst", (void*)&vTofClst);
      R__insp.InspectMember("vector<HTofCluster*>", (void*)&vTofClst, "vTofClst.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vRpcClst", (void*)&vRpcClst);
      R__insp.InspectMember("vector<HRpcCluster*>", (void*)&vRpcClst, "vRpcClst.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vShower", (void*)&vShower);
      R__insp.InspectMember("vector<HShowerHit*>", (void*)&vShower, "vShower.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vInnerMdc", (void*)&vInnerMdc);
      R__insp.InspectMember("vector<HMdcSeg*>", (void*)&vInnerMdc, "vInnerMdc.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vOuterMdc", (void*)&vOuterMdc);
      R__insp.InspectMember("vector<HMdcSeg*>", (void*)&vOuterMdc, "vOuterMdc.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vRich", (void*)&vRich);
      R__insp.InspectMember("vector<HRichHit*>", (void*)&vRich, "vRich.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vTofHitAll", (void*)&vTofHitAll);
      R__insp.InspectMember("vector<HTofHit*>", (void*)&vTofHitAll, "vTofHitAll.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vTofClstAll", (void*)&vTofClstAll);
      R__insp.InspectMember("vector<HTofCluster*>", (void*)&vTofClstAll, "vTofClstAll.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vRpcClstAll", (void*)&vRpcClstAll);
      R__insp.InspectMember("vector<HRpcCluster*>", (void*)&vRpcClstAll, "vRpcClstAll.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vShowerAll", (void*)&vShowerAll);
      R__insp.InspectMember("vector<HShowerHit*>", (void*)&vShowerAll, "vShowerAll.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vInnerMdcAll", (void*)&vInnerMdcAll);
      R__insp.InspectMember("vector<HMdcSeg*>", (void*)&vInnerMdcAll, "vInnerMdcAll.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vOuterMdcAll", (void*)&vOuterMdcAll);
      R__insp.InspectMember("vector<HMdcSeg*>", (void*)&vOuterMdcAll, "vOuterMdcAll.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vRichAll", (void*)&vRichAll);
      R__insp.InspectMember("vector<HRichHit*>", (void*)&vRichAll, "vRichAll.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoCand", (void*)&mTracktoCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCandSim*> >", (void*)&mTracktoCand, "mTracktoCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoAnyCand", (void*)&mTracktoAnyCand);
      R__insp.InspectMember("map<Int_t,vector<HParticleCandSim*> >", (void*)&mTracktoAnyCand, "mTracktoAnyCand.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoTofHit", (void*)&mTracktoTofHit);
      R__insp.InspectMember("map<Int_t,vector<HTofHitSim*> >", (void*)&mTracktoTofHit, "mTracktoTofHit.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoTofCluster", (void*)&mTracktoTofCluster);
      R__insp.InspectMember("map<Int_t,vector<HTofClusterSim*> >", (void*)&mTracktoTofCluster, "mTracktoTofCluster.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoRpcCluster", (void*)&mTracktoRpcCluster);
      R__insp.InspectMember("map<Int_t,vector<HRpcClusterSim*> >", (void*)&mTracktoRpcCluster, "mTracktoRpcCluster.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoShowerHit", (void*)&mTracktoShowerHit);
      R__insp.InspectMember("map<Int_t,vector<HShowerHitSim*> >", (void*)&mTracktoShowerHit, "mTracktoShowerHit.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoInnerMdc", (void*)&mTracktoInnerMdc);
      R__insp.InspectMember("map<Int_t,vector<HMdcSegSim*> >", (void*)&mTracktoInnerMdc, "mTracktoInnerMdc.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoOuterMdc", (void*)&mTracktoOuterMdc);
      R__insp.InspectMember("map<Int_t,vector<HMdcSegSim*> >", (void*)&mTracktoOuterMdc, "mTracktoOuterMdc.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoRichHit", (void*)&mTracktoRichHit);
      R__insp.InspectMember("map<Int_t,vector<HRichHitSim*> >", (void*)&mTracktoRichHit, "mTracktoRichHit.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoCandInd", (void*)&mTracktoCandInd);
      R__insp.InspectMember("map<Int_t,vector<Int_t> >", (void*)&mTracktoCandInd, "mTracktoCandInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoAnyCandInd", (void*)&mTracktoAnyCandInd);
      R__insp.InspectMember("map<Int_t,vector<Int_t> >", (void*)&mTracktoAnyCandInd, "mTracktoAnyCandInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoTofHitInd", (void*)&mTracktoTofHitInd);
      R__insp.InspectMember("map<Int_t,vector<Int_t> >", (void*)&mTracktoTofHitInd, "mTracktoTofHitInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoTofClusterInd", (void*)&mTracktoTofClusterInd);
      R__insp.InspectMember("map<Int_t,vector<Int_t> >", (void*)&mTracktoTofClusterInd, "mTracktoTofClusterInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoRpcClusterInd", (void*)&mTracktoRpcClusterInd);
      R__insp.InspectMember("map<Int_t,vector<Int_t> >", (void*)&mTracktoRpcClusterInd, "mTracktoRpcClusterInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoShowerHitInd", (void*)&mTracktoShowerHitInd);
      R__insp.InspectMember("map<Int_t,vector<Int_t> >", (void*)&mTracktoShowerHitInd, "mTracktoShowerHitInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoInnerMdcInd", (void*)&mTracktoInnerMdcInd);
      R__insp.InspectMember("map<Int_t,vector<Int_t> >", (void*)&mTracktoInnerMdcInd, "mTracktoInnerMdcInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoOuterMdcInd", (void*)&mTracktoOuterMdcInd);
      R__insp.InspectMember("map<Int_t,vector<Int_t> >", (void*)&mTracktoOuterMdcInd, "mTracktoOuterMdcInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTracktoRichHitInd", (void*)&mTracktoRichHitInd);
      R__insp.InspectMember("map<Int_t,vector<Int_t> >", (void*)&mTracktoRichHitInd, "mTracktoRichHitInd.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*richhitCat", &richhitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tofhitCat", &tofhitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tofclstCat", &tofclstCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rpcclstCat", &rpcclstCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*showerhitCat", &showerhitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mdcsegCat", &mdcsegCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*candCat", &candCat);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleBooker(void *p) {
      return  p ? new(p) ::HParticleBooker : new ::HParticleBooker;
   }
   static void *newArray_HParticleBooker(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleBooker[nElements] : new ::HParticleBooker[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleBooker(void *p) {
      delete ((::HParticleBooker*)p);
   }
   static void deleteArray_HParticleBooker(void *p) {
      delete [] ((::HParticleBooker*)p);
   }
   static void destruct_HParticleBooker(void *p) {
      typedef ::HParticleBooker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleBooker(TBuffer &buf, void *obj) {
      ((::HParticleBooker*)obj)->::HParticleBooker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleBooker

//______________________________________________________________________________
void HParticleCutRange::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCutRange.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> flow;
      R__b >> fup;
      R__b >> fCutNumber;
      R__b >> fmaxCut;
      R__b >> fCut;
      R__b >> fLowF1;
      R__b >> fUpF1;
      R__b >> fF1Mode;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> fbInverseCut;
      R__b >> fmaxVersion;
      R__b.CheckByteCount(R__s, R__c, HParticleCutRange::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCutRange::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << flow;
      R__b << fup;
      R__b << fCutNumber;
      R__b << fmaxCut;
      R__b << fCut;
      R__b << fLowF1;
      R__b << fUpF1;
      R__b << fF1Mode;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fbInverseCut;
      R__b << fmaxVersion;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HParticleCutRange::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HParticleCutRange.
      TClass *R__cl = ::HParticleCutRange::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flow", &flow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fup", &fup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutNumber", &fCutNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxCut", &fmaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCut", &fCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLowF1", &fLowF1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fUpF1", &fUpF1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fF1Mode", &fF1Mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctFail", (void*)&fctFail);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&fctFail, "fctFail.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctCall", (void*)&fctCall);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&fctCall, "fctCall.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbInverseCut", &fbInverseCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxVersion", &fmaxVersion);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HParticleCutRange(void *p) {
      return  p ? new(p) ::HParticleCutRange : new ::HParticleCutRange;
   }
   static void *newArray_HParticleCutRange(Long_t nElements, void *p) {
      return p ? new(p) ::HParticleCutRange[nElements] : new ::HParticleCutRange[nElements];
   }
   // Wrapper around operator delete
   static void delete_HParticleCutRange(void *p) {
      delete ((::HParticleCutRange*)p);
   }
   static void deleteArray_HParticleCutRange(void *p) {
      delete [] ((::HParticleCutRange*)p);
   }
   static void destruct_HParticleCutRange(void *p) {
      typedef ::HParticleCutRange current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCutRange(TBuffer &buf, void *obj) {
      ((::HParticleCutRange*)obj)->::HParticleCutRange::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCutRange

//______________________________________________________________________________
template <> void HParticleCut<HParticleCand>::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCut<HParticleCand>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fCutNumber;
      fcondition.Streamer(R__b);
      R__b >> fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> fbInverseCut;
      R__b >> fc;
      R__b >> fTree;
      R__b >> fselect;
      R__b.CheckByteCount(R__s, R__c, HParticleCut<HParticleCand>::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCut<HParticleCand>::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fCutNumber;
      fcondition.Streamer(R__b);
      R__b << fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fbInverseCut;
      R__b << fc;
      R__b << fTree;
      R__b << fselect;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void HParticleCutlEHParticleCandgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HParticleCut<HParticleCand>.
      typedef ::ROOTShadow::Shadow::HParticleCutlEHParticleCandgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleCand>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutNumber", &sobj->fCutNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcondition", &sobj->fcondition);
      R__insp.InspectMember(sobj->fcondition, "fcondition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxCut", &sobj->fmaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fsaveDir", &sobj->fsaveDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctFail", (void*)&sobj->fctFail);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctFail, "fctFail.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctCall", (void*)&sobj->fctCall);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctCall, "fctCall.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbInverseCut", &sobj->fbInverseCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fc", &sobj->fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &sobj->fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fselect", &sobj->fselect);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void HParticleCut<HParticleCand>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::HParticleCutlEHParticleCandgR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HParticleCutlEHParticleCandgR(void *p) {
      delete ((::HParticleCut<HParticleCand>*)p);
   }
   static void deleteArray_HParticleCutlEHParticleCandgR(void *p) {
      delete [] ((::HParticleCut<HParticleCand>*)p);
   }
   static void destruct_HParticleCutlEHParticleCandgR(void *p) {
      typedef ::HParticleCut<HParticleCand> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCutlEHParticleCandgR(TBuffer &buf, void *obj) {
      ((::HParticleCut<HParticleCand>*)obj)->::HParticleCut<HParticleCand>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCut<HParticleCand>

//______________________________________________________________________________
template <> void HParticleCut<HParticleCandSim>::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCut<HParticleCandSim>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fCutNumber;
      fcondition.Streamer(R__b);
      R__b >> fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> fbInverseCut;
      R__b >> fc;
      R__b >> fTree;
      R__b >> fselect;
      R__b.CheckByteCount(R__s, R__c, HParticleCut<HParticleCandSim>::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCut<HParticleCandSim>::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fCutNumber;
      fcondition.Streamer(R__b);
      R__b << fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fbInverseCut;
      R__b << fc;
      R__b << fTree;
      R__b << fselect;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void HParticleCutlEHParticleCandSimgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HParticleCut<HParticleCandSim>.
      typedef ::ROOTShadow::Shadow::HParticleCutlEHParticleCandSimgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleCandSim>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutNumber", &sobj->fCutNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcondition", &sobj->fcondition);
      R__insp.InspectMember(sobj->fcondition, "fcondition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxCut", &sobj->fmaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fsaveDir", &sobj->fsaveDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctFail", (void*)&sobj->fctFail);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctFail, "fctFail.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctCall", (void*)&sobj->fctCall);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctCall, "fctCall.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbInverseCut", &sobj->fbInverseCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fc", &sobj->fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &sobj->fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fselect", &sobj->fselect);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void HParticleCut<HParticleCandSim>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::HParticleCutlEHParticleCandSimgR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HParticleCutlEHParticleCandSimgR(void *p) {
      delete ((::HParticleCut<HParticleCandSim>*)p);
   }
   static void deleteArray_HParticleCutlEHParticleCandSimgR(void *p) {
      delete [] ((::HParticleCut<HParticleCandSim>*)p);
   }
   static void destruct_HParticleCutlEHParticleCandSimgR(void *p) {
      typedef ::HParticleCut<HParticleCandSim> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCutlEHParticleCandSimgR(TBuffer &buf, void *obj) {
      ((::HParticleCut<HParticleCandSim>*)obj)->::HParticleCut<HParticleCandSim>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCut<HParticleCandSim>

//______________________________________________________________________________
template <> void HParticleCut<HParticlePair>::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCut<HParticlePair>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fCutNumber;
      fcondition.Streamer(R__b);
      R__b >> fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> fbInverseCut;
      R__b >> fc;
      R__b >> fTree;
      R__b >> fselect;
      R__b.CheckByteCount(R__s, R__c, HParticleCut<HParticlePair>::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCut<HParticlePair>::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fCutNumber;
      fcondition.Streamer(R__b);
      R__b << fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fbInverseCut;
      R__b << fc;
      R__b << fTree;
      R__b << fselect;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void HParticleCutlEHParticlePairgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HParticleCut<HParticlePair>.
      typedef ::ROOTShadow::Shadow::HParticleCutlEHParticlePairgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticlePair>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutNumber", &sobj->fCutNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcondition", &sobj->fcondition);
      R__insp.InspectMember(sobj->fcondition, "fcondition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxCut", &sobj->fmaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fsaveDir", &sobj->fsaveDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctFail", (void*)&sobj->fctFail);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctFail, "fctFail.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctCall", (void*)&sobj->fctCall);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctCall, "fctCall.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbInverseCut", &sobj->fbInverseCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fc", &sobj->fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &sobj->fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fselect", &sobj->fselect);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void HParticleCut<HParticlePair>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::HParticleCutlEHParticlePairgR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HParticleCutlEHParticlePairgR(void *p) {
      delete ((::HParticleCut<HParticlePair>*)p);
   }
   static void deleteArray_HParticleCutlEHParticlePairgR(void *p) {
      delete [] ((::HParticleCut<HParticlePair>*)p);
   }
   static void destruct_HParticleCutlEHParticlePairgR(void *p) {
      typedef ::HParticleCut<HParticlePair> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCutlEHParticlePairgR(TBuffer &buf, void *obj) {
      ((::HParticleCut<HParticlePair>*)obj)->::HParticleCut<HParticlePair>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCut<HParticlePair>

//______________________________________________________________________________
template <> void HParticleCut<HParticleGeantPair>::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCut<HParticleGeantPair>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fCutNumber;
      fcondition.Streamer(R__b);
      R__b >> fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> fbInverseCut;
      R__b >> fc;
      R__b >> fTree;
      R__b >> fselect;
      R__b.CheckByteCount(R__s, R__c, HParticleCut<HParticleGeantPair>::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCut<HParticleGeantPair>::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fCutNumber;
      fcondition.Streamer(R__b);
      R__b << fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fbInverseCut;
      R__b << fc;
      R__b << fTree;
      R__b << fselect;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void HParticleCutlEHParticleGeantPairgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HParticleCut<HParticleGeantPair>.
      typedef ::ROOTShadow::Shadow::HParticleCutlEHParticleGeantPairgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeantPair>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutNumber", &sobj->fCutNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcondition", &sobj->fcondition);
      R__insp.InspectMember(sobj->fcondition, "fcondition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxCut", &sobj->fmaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fsaveDir", &sobj->fsaveDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctFail", (void*)&sobj->fctFail);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctFail, "fctFail.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctCall", (void*)&sobj->fctCall);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctCall, "fctCall.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbInverseCut", &sobj->fbInverseCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fc", &sobj->fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &sobj->fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fselect", &sobj->fselect);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void HParticleCut<HParticleGeantPair>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::HParticleCutlEHParticleGeantPairgR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HParticleCutlEHParticleGeantPairgR(void *p) {
      delete ((::HParticleCut<HParticleGeantPair>*)p);
   }
   static void deleteArray_HParticleCutlEHParticleGeantPairgR(void *p) {
      delete [] ((::HParticleCut<HParticleGeantPair>*)p);
   }
   static void destruct_HParticleCutlEHParticleGeantPairgR(void *p) {
      typedef ::HParticleCut<HParticleGeantPair> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCutlEHParticleGeantPairgR(TBuffer &buf, void *obj) {
      ((::HParticleCut<HParticleGeantPair>*)obj)->::HParticleCut<HParticleGeantPair>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCut<HParticleGeantPair>

//______________________________________________________________________________
template <> void HParticleCut<HParticleGeant>::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCut<HParticleGeant>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fCutNumber;
      fcondition.Streamer(R__b);
      R__b >> fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> fbInverseCut;
      R__b >> fc;
      R__b >> fTree;
      R__b >> fselect;
      R__b.CheckByteCount(R__s, R__c, HParticleCut<HParticleGeant>::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCut<HParticleGeant>::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fCutNumber;
      fcondition.Streamer(R__b);
      R__b << fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fbInverseCut;
      R__b << fc;
      R__b << fTree;
      R__b << fselect;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void HParticleCutlEHParticleGeantgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HParticleCut<HParticleGeant>.
      typedef ::ROOTShadow::Shadow::HParticleCutlEHParticleGeantgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeant>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutNumber", &sobj->fCutNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcondition", &sobj->fcondition);
      R__insp.InspectMember(sobj->fcondition, "fcondition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxCut", &sobj->fmaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fsaveDir", &sobj->fsaveDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctFail", (void*)&sobj->fctFail);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctFail, "fctFail.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctCall", (void*)&sobj->fctCall);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctCall, "fctCall.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbInverseCut", &sobj->fbInverseCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fc", &sobj->fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &sobj->fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fselect", &sobj->fselect);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void HParticleCut<HParticleGeant>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::HParticleCutlEHParticleGeantgR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HParticleCutlEHParticleGeantgR(void *p) {
      delete ((::HParticleCut<HParticleGeant>*)p);
   }
   static void deleteArray_HParticleCutlEHParticleGeantgR(void *p) {
      delete [] ((::HParticleCut<HParticleGeant>*)p);
   }
   static void destruct_HParticleCutlEHParticleGeantgR(void *p) {
      typedef ::HParticleCut<HParticleGeant> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCutlEHParticleGeantgR(TBuffer &buf, void *obj) {
      ((::HParticleCut<HParticleGeant>*)obj)->::HParticleCut<HParticleGeant>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCut<HParticleGeant>

//______________________________________________________________________________
template <> void HParticleCut<HParticleGeantDecay>::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCut<HParticleGeantDecay>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fCutNumber;
      fcondition.Streamer(R__b);
      R__b >> fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> fbInverseCut;
      R__b >> fc;
      R__b >> fTree;
      R__b >> fselect;
      R__b.CheckByteCount(R__s, R__c, HParticleCut<HParticleGeantDecay>::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCut<HParticleGeantDecay>::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fCutNumber;
      fcondition.Streamer(R__b);
      R__b << fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fbInverseCut;
      R__b << fc;
      R__b << fTree;
      R__b << fselect;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void HParticleCutlEHParticleGeantDecaygR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HParticleCut<HParticleGeantDecay>.
      typedef ::ROOTShadow::Shadow::HParticleCutlEHParticleGeantDecaygR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleGeantDecay>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutNumber", &sobj->fCutNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcondition", &sobj->fcondition);
      R__insp.InspectMember(sobj->fcondition, "fcondition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxCut", &sobj->fmaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fsaveDir", &sobj->fsaveDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctFail", (void*)&sobj->fctFail);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctFail, "fctFail.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctCall", (void*)&sobj->fctCall);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctCall, "fctCall.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbInverseCut", &sobj->fbInverseCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fc", &sobj->fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &sobj->fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fselect", &sobj->fselect);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void HParticleCut<HParticleGeantDecay>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::HParticleCutlEHParticleGeantDecaygR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HParticleCutlEHParticleGeantDecaygR(void *p) {
      delete ((::HParticleCut<HParticleGeantDecay>*)p);
   }
   static void deleteArray_HParticleCutlEHParticleGeantDecaygR(void *p) {
      delete [] ((::HParticleCut<HParticleGeantDecay>*)p);
   }
   static void destruct_HParticleCutlEHParticleGeantDecaygR(void *p) {
      typedef ::HParticleCut<HParticleGeantDecay> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCutlEHParticleGeantDecaygR(TBuffer &buf, void *obj) {
      ((::HParticleCut<HParticleGeantDecay>*)obj)->::HParticleCut<HParticleGeantDecay>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCut<HParticleGeantDecay>

//______________________________________________________________________________
template <> void HParticleCut<HParticleEvtInfo>::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCut<HParticleEvtInfo>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fCutNumber;
      fcondition.Streamer(R__b);
      R__b >> fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> fbInverseCut;
      R__b >> fc;
      R__b >> fTree;
      R__b >> fselect;
      R__b.CheckByteCount(R__s, R__c, HParticleCut<HParticleEvtInfo>::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCut<HParticleEvtInfo>::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fCutNumber;
      fcondition.Streamer(R__b);
      R__b << fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fbInverseCut;
      R__b << fc;
      R__b << fTree;
      R__b << fselect;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void HParticleCutlEHParticleEvtInfogR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HParticleCut<HParticleEvtInfo>.
      typedef ::ROOTShadow::Shadow::HParticleCutlEHParticleEvtInfogR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HParticleEvtInfo>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutNumber", &sobj->fCutNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcondition", &sobj->fcondition);
      R__insp.InspectMember(sobj->fcondition, "fcondition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxCut", &sobj->fmaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fsaveDir", &sobj->fsaveDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctFail", (void*)&sobj->fctFail);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctFail, "fctFail.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctCall", (void*)&sobj->fctCall);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctCall, "fctCall.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbInverseCut", &sobj->fbInverseCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fc", &sobj->fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &sobj->fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fselect", &sobj->fselect);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void HParticleCut<HParticleEvtInfo>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::HParticleCutlEHParticleEvtInfogR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HParticleCutlEHParticleEvtInfogR(void *p) {
      delete ((::HParticleCut<HParticleEvtInfo>*)p);
   }
   static void deleteArray_HParticleCutlEHParticleEvtInfogR(void *p) {
      delete [] ((::HParticleCut<HParticleEvtInfo>*)p);
   }
   static void destruct_HParticleCutlEHParticleEvtInfogR(void *p) {
      typedef ::HParticleCut<HParticleEvtInfo> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCutlEHParticleEvtInfogR(TBuffer &buf, void *obj) {
      ((::HParticleCut<HParticleEvtInfo>*)obj)->::HParticleCut<HParticleEvtInfo>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCut<HParticleEvtInfo>

//______________________________________________________________________________
template <> void HParticleCut<HRichHit>::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCut<HRichHit>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fCutNumber;
      fcondition.Streamer(R__b);
      R__b >> fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> fbInverseCut;
      R__b >> fc;
      R__b >> fTree;
      R__b >> fselect;
      R__b.CheckByteCount(R__s, R__c, HParticleCut<HRichHit>::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCut<HRichHit>::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fCutNumber;
      fcondition.Streamer(R__b);
      R__b << fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fbInverseCut;
      R__b << fc;
      R__b << fTree;
      R__b << fselect;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void HParticleCutlEHRichHitgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HParticleCut<HRichHit>.
      typedef ::ROOTShadow::Shadow::HParticleCutlEHRichHitgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HRichHit>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutNumber", &sobj->fCutNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcondition", &sobj->fcondition);
      R__insp.InspectMember(sobj->fcondition, "fcondition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxCut", &sobj->fmaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fsaveDir", &sobj->fsaveDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctFail", (void*)&sobj->fctFail);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctFail, "fctFail.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctCall", (void*)&sobj->fctCall);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctCall, "fctCall.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbInverseCut", &sobj->fbInverseCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fc", &sobj->fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &sobj->fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fselect", &sobj->fselect);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void HParticleCut<HRichHit>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::HParticleCutlEHRichHitgR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HParticleCutlEHRichHitgR(void *p) {
      delete ((::HParticleCut<HRichHit>*)p);
   }
   static void deleteArray_HParticleCutlEHRichHitgR(void *p) {
      delete [] ((::HParticleCut<HRichHit>*)p);
   }
   static void destruct_HParticleCutlEHRichHitgR(void *p) {
      typedef ::HParticleCut<HRichHit> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCutlEHRichHitgR(TBuffer &buf, void *obj) {
      ((::HParticleCut<HRichHit>*)obj)->::HParticleCut<HRichHit>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCut<HRichHit>

//______________________________________________________________________________
template <> void HParticleCut<HRichHitSim>::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCut<HRichHitSim>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fCutNumber;
      fcondition.Streamer(R__b);
      R__b >> fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> fbInverseCut;
      R__b >> fc;
      R__b >> fTree;
      R__b >> fselect;
      R__b.CheckByteCount(R__s, R__c, HParticleCut<HRichHitSim>::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCut<HRichHitSim>::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fCutNumber;
      fcondition.Streamer(R__b);
      R__b << fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fbInverseCut;
      R__b << fc;
      R__b << fTree;
      R__b << fselect;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void HParticleCutlEHRichHitSimgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HParticleCut<HRichHitSim>.
      typedef ::ROOTShadow::Shadow::HParticleCutlEHRichHitSimgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HRichHitSim>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutNumber", &sobj->fCutNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcondition", &sobj->fcondition);
      R__insp.InspectMember(sobj->fcondition, "fcondition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxCut", &sobj->fmaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fsaveDir", &sobj->fsaveDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctFail", (void*)&sobj->fctFail);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctFail, "fctFail.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctCall", (void*)&sobj->fctCall);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctCall, "fctCall.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbInverseCut", &sobj->fbInverseCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fc", &sobj->fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &sobj->fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fselect", &sobj->fselect);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void HParticleCut<HRichHitSim>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::HParticleCutlEHRichHitSimgR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HParticleCutlEHRichHitSimgR(void *p) {
      delete ((::HParticleCut<HRichHitSim>*)p);
   }
   static void deleteArray_HParticleCutlEHRichHitSimgR(void *p) {
      delete [] ((::HParticleCut<HRichHitSim>*)p);
   }
   static void destruct_HParticleCutlEHRichHitSimgR(void *p) {
      typedef ::HParticleCut<HRichHitSim> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCutlEHRichHitSimgR(TBuffer &buf, void *obj) {
      ((::HParticleCut<HRichHitSim>*)obj)->::HParticleCut<HRichHitSim>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCut<HRichHitSim>

//______________________________________________________________________________
template <> void HParticleCut<HEventHeader>::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCut<HEventHeader>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fCutNumber;
      fcondition.Streamer(R__b);
      R__b >> fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> fbInverseCut;
      R__b >> fc;
      R__b >> fTree;
      R__b >> fselect;
      R__b.CheckByteCount(R__s, R__c, HParticleCut<HEventHeader>::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCut<HEventHeader>::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fCutNumber;
      fcondition.Streamer(R__b);
      R__b << fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fbInverseCut;
      R__b << fc;
      R__b << fTree;
      R__b << fselect;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void HParticleCutlEHEventHeadergR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HParticleCut<HEventHeader>.
      typedef ::ROOTShadow::Shadow::HParticleCutlEHEventHeadergR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HEventHeader>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutNumber", &sobj->fCutNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcondition", &sobj->fcondition);
      R__insp.InspectMember(sobj->fcondition, "fcondition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxCut", &sobj->fmaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fsaveDir", &sobj->fsaveDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctFail", (void*)&sobj->fctFail);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctFail, "fctFail.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctCall", (void*)&sobj->fctCall);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctCall, "fctCall.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbInverseCut", &sobj->fbInverseCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fc", &sobj->fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &sobj->fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fselect", &sobj->fselect);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void HParticleCut<HEventHeader>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::HParticleCutlEHEventHeadergR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HParticleCutlEHEventHeadergR(void *p) {
      delete ((::HParticleCut<HEventHeader>*)p);
   }
   static void deleteArray_HParticleCutlEHEventHeadergR(void *p) {
      delete [] ((::HParticleCut<HEventHeader>*)p);
   }
   static void destruct_HParticleCutlEHEventHeadergR(void *p) {
      typedef ::HParticleCut<HEventHeader> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCutlEHEventHeadergR(TBuffer &buf, void *obj) {
      ((::HParticleCut<HEventHeader>*)obj)->::HParticleCut<HEventHeader>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCut<HEventHeader>

//______________________________________________________________________________
template <> void HParticleCut<HVertex>::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCut<HVertex>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fCutNumber;
      fcondition.Streamer(R__b);
      R__b >> fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> fbInverseCut;
      R__b >> fc;
      R__b >> fTree;
      R__b >> fselect;
      R__b.CheckByteCount(R__s, R__c, HParticleCut<HVertex>::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCut<HVertex>::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fCutNumber;
      fcondition.Streamer(R__b);
      R__b << fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fbInverseCut;
      R__b << fc;
      R__b << fTree;
      R__b << fselect;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void HParticleCutlEHVertexgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HParticleCut<HVertex>.
      typedef ::ROOTShadow::Shadow::HParticleCutlEHVertexgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HVertex>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutNumber", &sobj->fCutNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcondition", &sobj->fcondition);
      R__insp.InspectMember(sobj->fcondition, "fcondition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxCut", &sobj->fmaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fsaveDir", &sobj->fsaveDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctFail", (void*)&sobj->fctFail);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctFail, "fctFail.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctCall", (void*)&sobj->fctCall);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctCall, "fctCall.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbInverseCut", &sobj->fbInverseCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fc", &sobj->fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &sobj->fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fselect", &sobj->fselect);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void HParticleCut<HVertex>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::HParticleCutlEHVertexgR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HParticleCutlEHVertexgR(void *p) {
      delete ((::HParticleCut<HVertex>*)p);
   }
   static void deleteArray_HParticleCutlEHVertexgR(void *p) {
      delete [] ((::HParticleCut<HVertex>*)p);
   }
   static void destruct_HParticleCutlEHVertexgR(void *p) {
      typedef ::HParticleCut<HVertex> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCutlEHVertexgR(TBuffer &buf, void *obj) {
      ((::HParticleCut<HVertex>*)obj)->::HParticleCut<HVertex>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCut<HVertex>

//______________________________________________________________________________
template <> void HParticleCut<HGeantKine>::Streamer(TBuffer &R__b)
{
   // Stream an object of class HParticleCut<HGeantKine>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> fCutNumber;
      fcondition.Streamer(R__b);
      R__b >> fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned long long R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> fbInverseCut;
      R__b >> fc;
      R__b >> fTree;
      R__b >> fselect;
      R__b.CheckByteCount(R__s, R__c, HParticleCut<HGeantKine>::IsA());
   } else {
      R__c = R__b.WriteVersion(HParticleCut<HGeantKine>::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << fCutNumber;
      fcondition.Streamer(R__b);
      R__b << fmaxCut;
      {
         vector<ULong64_t> &R__stl =  fctFail;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<ULong64_t> &R__stl =  fctCall;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<ULong64_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << fbInverseCut;
      R__b << fc;
      R__b << fTree;
      R__b << fselect;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOTDict {
   void HParticleCutlEHGeantKinegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HParticleCut<HGeantKine>.
      typedef ::ROOTShadow::Shadow::HParticleCutlEHGeantKinegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::HParticleCut<HGeantKine>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutNumber", &sobj->fCutNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcondition", &sobj->fcondition);
      R__insp.InspectMember(sobj->fcondition, "fcondition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxCut", &sobj->fmaxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fsaveDir", &sobj->fsaveDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctFail", (void*)&sobj->fctFail);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctFail, "fctFail.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fctCall", (void*)&sobj->fctCall);
      R__insp.InspectMember("vector<ULong64_t>", (void*)&sobj->fctCall, "fctCall.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbInverseCut", &sobj->fbInverseCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fc", &sobj->fc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &sobj->fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fselect", &sobj->fselect);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void HParticleCut<HGeantKine>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOTDict::HParticleCutlEHGeantKinegR_ShowMembers(this, R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HParticleCutlEHGeantKinegR(void *p) {
      delete ((::HParticleCut<HGeantKine>*)p);
   }
   static void deleteArray_HParticleCutlEHGeantKinegR(void *p) {
      delete [] ((::HParticleCut<HGeantKine>*)p);
   }
   static void destruct_HParticleCutlEHGeantKinegR(void *p) {
      typedef ::HParticleCut<HGeantKine> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HParticleCutlEHGeantKinegR(TBuffer &buf, void *obj) {
      ((::HParticleCut<HGeantKine>*)obj)->::HParticleCut<HGeantKine>::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HParticleCut<HGeantKine>

//______________________________________________________________________________
void pointers::Streamer(TBuffer &R__b)
{
   // Stream an object of class pointers.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void pointers::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class pointers.
      TClass *R__cl = ::pointers::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMdcTrk", &pMdcTrk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSeg1", &pSeg1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSeg2", &pSeg2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRichHit", &pRichHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTofClst", &pTofClst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTofHit1", &pTofHit1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTofHit2", &pTofHit2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRpcClst", &pRpcClst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pShowerHit", &pShowerHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRk", &pRk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSpline", &pSpline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pKalman", &pKalman);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_pointers(void *p) {
      return  p ? new(p) ::pointers : new ::pointers;
   }
   static void *newArray_pointers(Long_t nElements, void *p) {
      return p ? new(p) ::pointers[nElements] : new ::pointers[nElements];
   }
   // Wrapper around operator delete
   static void delete_pointers(void *p) {
      delete ((::pointers*)p);
   }
   static void deleteArray_pointers(void *p) {
      delete [] ((::pointers*)p);
   }
   static void destruct_pointers(void *p) {
      typedef ::pointers current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_pointers(TBuffer &buf, void *obj) {
      ((::pointers*)obj)->::pointers::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::pointers

//______________________________________________________________________________
void closetrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class closetrack.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> ind;
      R__b >> oAngle;
      R__b.CheckByteCount(R__s, R__c, closetrack::IsA());
   } else {
      R__c = R__b.WriteVersion(closetrack::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << ind;
      R__b << oAngle;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void closetrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class closetrack.
      TClass *R__cl = ::closetrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind", &ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "oAngle", &oAngle);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_closetrack(void *p) {
      return  p ? new(p) ::closetrack : new ::closetrack;
   }
   static void *newArray_closetrack(Long_t nElements, void *p) {
      return p ? new(p) ::closetrack[nElements] : new ::closetrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_closetrack(void *p) {
      delete ((::closetrack*)p);
   }
   static void deleteArray_closetrack(void *p) {
      delete [] ((::closetrack*)p);
   }
   static void destruct_closetrack(void *p) {
      typedef ::closetrack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_closetrack(TBuffer &buf, void *obj) {
      ((::closetrack*)obj)->::closetrack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::closetrack

//______________________________________________________________________________
void closeVec::Streamer(TBuffer &R__b)
{
   // Stream an object of class closeVec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<closetrack> &R__stl =  tracks;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            closetrack R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, closeVec::IsA());
   } else {
      R__c = R__b.WriteVersion(closeVec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<closetrack> &R__stl =  tracks;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<closetrack>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((closetrack&)(*R__k)).Streamer(R__b);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void closeVec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class closeVec.
      TClass *R__cl = ::closeVec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tracks", (void*)&tracks);
      R__insp.InspectMember("vector<closetrack>", (void*)&tracks, "tracks.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_closeVec(void *p) {
      return  p ? new(p) ::closeVec : new ::closeVec;
   }
   static void *newArray_closeVec(Long_t nElements, void *p) {
      return p ? new(p) ::closeVec[nElements] : new ::closeVec[nElements];
   }
   // Wrapper around operator delete
   static void delete_closeVec(void *p) {
      delete ((::closeVec*)p);
   }
   static void deleteArray_closeVec(void *p) {
      delete [] ((::closeVec*)p);
   }
   static void destruct_closeVec(void *p) {
      typedef ::closeVec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_closeVec(TBuffer &buf, void *obj) {
      ((::closeVec*)obj)->::closeVec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::closeVec

//______________________________________________________________________________
void trackinfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class trackinfo.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> tr;
      R__b >> n;
      R__b >> flag;
      R__b >> weight;
      R__b >> scale;
      R__b >> ndet;
      R__b.CheckByteCount(R__s, R__c, trackinfo::IsA());
   } else {
      R__c = R__b.WriteVersion(trackinfo::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << tr;
      R__b << n;
      R__b << flag;
      R__b << weight;
      R__b << scale;
      R__b << ndet;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void trackinfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class trackinfo.
      TClass *R__cl = ::trackinfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tr", &tr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "n", &n);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag", &flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "weight", &weight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scale", &scale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndet", &ndet);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_trackinfo(void *p) {
      return  p ? new(p) ::trackinfo : new ::trackinfo;
   }
   static void *newArray_trackinfo(Long_t nElements, void *p) {
      return p ? new(p) ::trackinfo[nElements] : new ::trackinfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_trackinfo(void *p) {
      delete ((::trackinfo*)p);
   }
   static void deleteArray_trackinfo(void *p) {
      delete [] ((::trackinfo*)p);
   }
   static void destruct_trackinfo(void *p) {
      typedef ::trackinfo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_trackinfo(TBuffer &buf, void *obj) {
      ((::trackinfo*)obj)->::trackinfo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::trackinfo

//______________________________________________________________________________
void tracksVec::Streamer(TBuffer &R__b)
{
   // Stream an object of class tracksVec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<trackinfo*> &R__stl =  tracks;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(trackinfo));
         if (R__tcl1==0) {
            Error("tracks streamer","Missing the TClass object for trackinfo!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            trackinfo* R__t;
            R__t = (trackinfo*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b >> sum;
      R__b.CheckByteCount(R__s, R__c, tracksVec::IsA());
   } else {
      R__c = R__b.WriteVersion(tracksVec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<trackinfo*> &R__stl =  tracks;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<trackinfo*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << sum;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void tracksVec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tracksVec.
      TClass *R__cl = ::tracksVec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tracks", (void*)&tracks);
      R__insp.InspectMember("vector<trackinfo*>", (void*)&tracks, "tracks.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sum", &sum);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_tracksVec(void *p) {
      return  p ? new(p) ::tracksVec : new ::tracksVec;
   }
   static void *newArray_tracksVec(Long_t nElements, void *p) {
      return p ? new(p) ::tracksVec[nElements] : new ::tracksVec[nElements];
   }
   // Wrapper around operator delete
   static void delete_tracksVec(void *p) {
      delete ((::tracksVec*)p);
   }
   static void deleteArray_tracksVec(void *p) {
      delete [] ((::tracksVec*)p);
   }
   static void destruct_tracksVec(void *p) {
      typedef ::tracksVec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_tracksVec(TBuffer &buf, void *obj) {
      ((::tracksVec*)obj)->::tracksVec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::tracksVec

//______________________________________________________________________________
void mdc_trk::Streamer(TBuffer &R__b)
{
   // Stream an object of class mdc_trk.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> ind;
      R__b >> dedx;
      R__b >> dedx0;
      R__b >> dedx1;
      R__b >> seg1fake;
      R__b >> seg2fake;
      R__b >> allfake;
      R__b.CheckByteCount(R__s, R__c, mdc_trk::IsA());
   } else {
      R__c = R__b.WriteVersion(mdc_trk::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << ind;
      R__b << dedx;
      R__b << dedx0;
      R__b << dedx1;
      R__b << seg1fake;
      R__b << seg2fake;
      R__b << allfake;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void mdc_trk::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class mdc_trk.
      TClass *R__cl = ::mdc_trk::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind", &ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedx", &dedx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedx0", &dedx0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedx1", &dedx1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seg1fake", &seg1fake);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seg2fake", &seg2fake);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "allfake", &allfake);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_mdc_trk(void *p) {
      return  p ? new(p) ::mdc_trk : new ::mdc_trk;
   }
   static void *newArray_mdc_trk(Long_t nElements, void *p) {
      return p ? new(p) ::mdc_trk[nElements] : new ::mdc_trk[nElements];
   }
   // Wrapper around operator delete
   static void delete_mdc_trk(void *p) {
      delete ((::mdc_trk*)p);
   }
   static void deleteArray_mdc_trk(void *p) {
      delete [] ((::mdc_trk*)p);
   }
   static void destruct_mdc_trk(void *p) {
      typedef ::mdc_trk current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_mdc_trk(TBuffer &buf, void *obj) {
      ((::mdc_trk*)obj)->::mdc_trk::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::mdc_trk

//______________________________________________________________________________
void mdc_seg::Streamer(TBuffer &R__b)
{
   // Stream an object of class mdc_seg.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> ind;
      R__b >> layers;
      R__b >> wires;
      R__b >> chi2;
      R__b >> phi;
      R__b >> theta;
      R__b >> r;
      R__b >> z;
      R__b >> offvertexclust;
      R__b.CheckByteCount(R__s, R__c, mdc_seg::IsA());
   } else {
      R__c = R__b.WriteVersion(mdc_seg::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << ind;
      R__b << layers;
      R__b << wires;
      R__b << chi2;
      R__b << phi;
      R__b << theta;
      R__b << r;
      R__b << z;
      R__b << offvertexclust;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void mdc_seg::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class mdc_seg.
      TClass *R__cl = ::mdc_seg::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind", &ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layers", &layers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wires", &wires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r", &r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offvertexclust", &offvertexclust);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_mdc_seg(void *p) {
      return  p ? new(p) ::mdc_seg : new ::mdc_seg;
   }
   static void *newArray_mdc_seg(Long_t nElements, void *p) {
      return p ? new(p) ::mdc_seg[nElements] : new ::mdc_seg[nElements];
   }
   // Wrapper around operator delete
   static void delete_mdc_seg(void *p) {
      delete ((::mdc_seg*)p);
   }
   static void deleteArray_mdc_seg(void *p) {
      delete [] ((::mdc_seg*)p);
   }
   static void destruct_mdc_seg(void *p) {
      typedef ::mdc_seg current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_mdc_seg(TBuffer &buf, void *obj) {
      ((::mdc_seg*)obj)->::mdc_seg::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::mdc_seg

//______________________________________________________________________________
void rich_hit::Streamer(TBuffer &R__b)
{
   // Stream an object of class rich_hit.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> ind;
      R__b >> numPads;
      R__b >> amplitude;
      R__b >> houTra;
      R__b >> patternMatrix;
      R__b >> centroid;
      R__b >> phi;
      R__b >> theta;
      R__b >> centerx;
      R__b >> centery;
      R__b >> radius;
      R__b >> chi2;
      R__b >> ncals;
      R__b.CheckByteCount(R__s, R__c, rich_hit::IsA());
   } else {
      R__c = R__b.WriteVersion(rich_hit::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << ind;
      R__b << numPads;
      R__b << amplitude;
      R__b << houTra;
      R__b << patternMatrix;
      R__b << centroid;
      R__b << phi;
      R__b << theta;
      R__b << centerx;
      R__b << centery;
      R__b << radius;
      R__b << chi2;
      R__b << ncals;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void rich_hit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class rich_hit.
      TClass *R__cl = ::rich_hit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind", &ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numPads", &numPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "amplitude", &amplitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "houTra", &houTra);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "patternMatrix", &patternMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centroid", &centroid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centerx", &centerx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centery", &centery);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "radius", &radius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncals", &ncals);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_rich_hit(void *p) {
      return  p ? new(p) ::rich_hit : new ::rich_hit;
   }
   static void *newArray_rich_hit(Long_t nElements, void *p) {
      return p ? new(p) ::rich_hit[nElements] : new ::rich_hit[nElements];
   }
   // Wrapper around operator delete
   static void delete_rich_hit(void *p) {
      delete ((::rich_hit*)p);
   }
   static void deleteArray_rich_hit(void *p) {
      delete [] ((::rich_hit*)p);
   }
   static void destruct_rich_hit(void *p) {
      typedef ::rich_hit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_rich_hit(TBuffer &buf, void *obj) {
      ((::rich_hit*)obj)->::rich_hit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::rich_hit

//______________________________________________________________________________
void tof_hit::Streamer(TBuffer &R__b)
{
   // Stream an object of class tof_hit.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> ind;
      R__b >> quality;
      R__b >> dx;
      R__b >> dy;
      R__b >> dedx;
      R__b >> tof;
      R__b >> metaAddress;
      R__b.CheckByteCount(R__s, R__c, tof_hit::IsA());
   } else {
      R__c = R__b.WriteVersion(tof_hit::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << ind;
      R__b << quality;
      R__b << dx;
      R__b << dy;
      R__b << dedx;
      R__b << tof;
      R__b << metaAddress;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void tof_hit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tof_hit.
      TClass *R__cl = ::tof_hit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind", &ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality", &quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dx", &dx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dy", &dy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dedx", &dedx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof", &tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metaAddress", &metaAddress);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_tof_hit(void *p) {
      return  p ? new(p) ::tof_hit : new ::tof_hit;
   }
   static void *newArray_tof_hit(Long_t nElements, void *p) {
      return p ? new(p) ::tof_hit[nElements] : new ::tof_hit[nElements];
   }
   // Wrapper around operator delete
   static void delete_tof_hit(void *p) {
      delete ((::tof_hit*)p);
   }
   static void deleteArray_tof_hit(void *p) {
      delete [] ((::tof_hit*)p);
   }
   static void destruct_tof_hit(void *p) {
      typedef ::tof_hit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_tof_hit(TBuffer &buf, void *obj) {
      ((::tof_hit*)obj)->::tof_hit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::tof_hit

//______________________________________________________________________________
void shower_hit::Streamer(TBuffer &R__b)
{
   // Stream an object of class shower_hit.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> ind;
      R__b >> quality;
      R__b >> matchradius;
      R__b >> dx;
      R__b >> dy;
      R__b >> showerSum0;
      R__b >> showerSum1;
      R__b >> showerSum2;
      R__b.CheckByteCount(R__s, R__c, shower_hit::IsA());
   } else {
      R__c = R__b.WriteVersion(shower_hit::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << ind;
      R__b << quality;
      R__b << matchradius;
      R__b << dx;
      R__b << dy;
      R__b << showerSum0;
      R__b << showerSum1;
      R__b << showerSum2;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void shower_hit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class shower_hit.
      TClass *R__cl = ::shower_hit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind", &ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality", &quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matchradius", &matchradius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dx", &dx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dy", &dy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "showerSum0", &showerSum0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "showerSum1", &showerSum1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "showerSum2", &showerSum2);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_shower_hit(void *p) {
      return  p ? new(p) ::shower_hit : new ::shower_hit;
   }
   static void *newArray_shower_hit(Long_t nElements, void *p) {
      return p ? new(p) ::shower_hit[nElements] : new ::shower_hit[nElements];
   }
   // Wrapper around operator delete
   static void delete_shower_hit(void *p) {
      delete ((::shower_hit*)p);
   }
   static void deleteArray_shower_hit(void *p) {
      delete [] ((::shower_hit*)p);
   }
   static void destruct_shower_hit(void *p) {
      typedef ::shower_hit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_shower_hit(TBuffer &buf, void *obj) {
      ((::shower_hit*)obj)->::shower_hit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::shower_hit

//______________________________________________________________________________
void rpc_clst::Streamer(TBuffer &R__b)
{
   // Stream an object of class rpc_clst.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> ind;
      R__b >> quality;
      R__b >> dx;
      R__b >> dy;
      R__b >> tof;
      R__b >> nhits;
      R__b >> metaAddress;
      R__b.CheckByteCount(R__s, R__c, rpc_clst::IsA());
   } else {
      R__c = R__b.WriteVersion(rpc_clst::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << ind;
      R__b << quality;
      R__b << dx;
      R__b << dy;
      R__b << tof;
      R__b << nhits;
      R__b << metaAddress;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void rpc_clst::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class rpc_clst.
      TClass *R__cl = ::rpc_clst::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind", &ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality", &quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dx", &dx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dy", &dy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof", &tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nhits", &nhits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metaAddress", &metaAddress);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_rpc_clst(void *p) {
      return  p ? new(p) ::rpc_clst : new ::rpc_clst;
   }
   static void *newArray_rpc_clst(Long_t nElements, void *p) {
      return p ? new(p) ::rpc_clst[nElements] : new ::rpc_clst[nElements];
   }
   // Wrapper around operator delete
   static void delete_rpc_clst(void *p) {
      delete ((::rpc_clst*)p);
   }
   static void deleteArray_rpc_clst(void *p) {
      delete [] ((::rpc_clst*)p);
   }
   static void destruct_rpc_clst(void *p) {
      typedef ::rpc_clst current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_rpc_clst(TBuffer &buf, void *obj) {
      ((::rpc_clst*)obj)->::rpc_clst::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::rpc_clst

//______________________________________________________________________________
void spline_track::Streamer(TBuffer &R__b)
{
   // Stream an object of class spline_track.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> ind;
      R__b >> p;
      R__b.CheckByteCount(R__s, R__c, spline_track::IsA());
   } else {
      R__c = R__b.WriteVersion(spline_track::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << ind;
      R__b << p;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void spline_track::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class spline_track.
      TClass *R__cl = ::spline_track::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind", &ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p", &p);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_spline_track(void *p) {
      return  p ? new(p) ::spline_track : new ::spline_track;
   }
   static void *newArray_spline_track(Long_t nElements, void *p) {
      return p ? new(p) ::spline_track[nElements] : new ::spline_track[nElements];
   }
   // Wrapper around operator delete
   static void delete_spline_track(void *p) {
      delete ((::spline_track*)p);
   }
   static void deleteArray_spline_track(void *p) {
      delete [] ((::spline_track*)p);
   }
   static void destruct_spline_track(void *p) {
      typedef ::spline_track current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_spline_track(TBuffer &buf, void *obj) {
      ((::spline_track*)obj)->::spline_track::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::spline_track

//______________________________________________________________________________
void rk_track::Streamer(TBuffer &R__b)
{
   // Stream an object of class rk_track.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> usedMeta;
      R__b >> selectTof;
      R__b >> ind;
      R__b >> beta;
      R__b >> p;
      R__b >> mass;
      R__b >> path;
      R__b >> chi2;
      R__b >> phi;
      R__b >> theta;
      R__b >> r;
      R__b >> z;
      R__b >> pol;
      R__b >> quality;
      R__b >> matchradius;
      R__b >> metadx;
      R__b >> metady;
      R__b.CheckByteCount(R__s, R__c, rk_track::IsA());
   } else {
      R__c = R__b.WriteVersion(rk_track::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << usedMeta;
      R__b << selectTof;
      R__b << ind;
      R__b << beta;
      R__b << p;
      R__b << mass;
      R__b << path;
      R__b << chi2;
      R__b << phi;
      R__b << theta;
      R__b << r;
      R__b << z;
      R__b << pol;
      R__b << quality;
      R__b << matchradius;
      R__b << metadx;
      R__b << metady;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void rk_track::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class rk_track.
      TClass *R__cl = ::rk_track::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "usedMeta", &usedMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "selectTof", &selectTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind", &ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta", &beta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p", &p);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "path", &path);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r", &r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pol", &pol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality", &quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matchradius", &matchradius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metadx", &metadx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metady", &metady);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_rk_track(void *p) {
      return  p ? new(p) ::rk_track : new ::rk_track;
   }
   static void *newArray_rk_track(Long_t nElements, void *p) {
      return p ? new(p) ::rk_track[nElements] : new ::rk_track[nElements];
   }
   // Wrapper around operator delete
   static void delete_rk_track(void *p) {
      delete ((::rk_track*)p);
   }
   static void deleteArray_rk_track(void *p) {
      delete [] ((::rk_track*)p);
   }
   static void destruct_rk_track(void *p) {
      typedef ::rk_track current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_rk_track(TBuffer &buf, void *obj) {
      ((::rk_track*)obj)->::rk_track::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::rk_track

//______________________________________________________________________________
void kal_track::Streamer(TBuffer &R__b)
{
   // Stream an object of class kal_track.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> usedMeta;
      R__b >> selectTof;
      R__b >> ind;
      R__b >> beta;
      R__b >> p;
      R__b >> mass;
      R__b >> path;
      R__b >> chi2;
      R__b >> phi;
      R__b >> theta;
      R__b >> r;
      R__b >> z;
      R__b >> pol;
      R__b >> quality;
      R__b >> matchradius;
      R__b >> metadx;
      R__b >> metady;
      R__b.CheckByteCount(R__s, R__c, kal_track::IsA());
   } else {
      R__c = R__b.WriteVersion(kal_track::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << usedMeta;
      R__b << selectTof;
      R__b << ind;
      R__b << beta;
      R__b << p;
      R__b << mass;
      R__b << path;
      R__b << chi2;
      R__b << phi;
      R__b << theta;
      R__b << r;
      R__b << z;
      R__b << pol;
      R__b << quality;
      R__b << matchradius;
      R__b << metadx;
      R__b << metady;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void kal_track::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class kal_track.
      TClass *R__cl = ::kal_track::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "usedMeta", &usedMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "selectTof", &selectTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind", &ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta", &beta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p", &p);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "path", &path);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r", &r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pol", &pol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quality", &quality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matchradius", &matchradius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metadx", &metadx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metady", &metady);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_kal_track(void *p) {
      return  p ? new(p) ::kal_track : new ::kal_track;
   }
   static void *newArray_kal_track(Long_t nElements, void *p) {
      return p ? new(p) ::kal_track[nElements] : new ::kal_track[nElements];
   }
   // Wrapper around operator delete
   static void delete_kal_track(void *p) {
      delete ((::kal_track*)p);
   }
   static void deleteArray_kal_track(void *p) {
      delete [] ((::kal_track*)p);
   }
   static void destruct_kal_track(void *p) {
      typedef ::kal_track current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_kal_track(TBuffer &buf, void *obj) {
      ((::kal_track*)obj)->::kal_track::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::kal_track

//______________________________________________________________________________
void candidate::Streamer(TBuffer &R__b)
{
   // Stream an object of class candidate.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> used;
      R__b >> system;
      R__b >> rkSuccess;
      R__b >> usedMeta;
      R__b >> selectTof;
      R__b >> nCand;
      R__b >> hasRingCorrelation;
      R__b >> corrThetaRich;
      R__b >> alignThetaRich;
      R__b >> alignPhiRich;
      R__b >> richMdcQuality;
      R__b >> richRkQuality;
      commonTracks.Streamer(R__b);
      richTracks.Streamer(R__b);
      mdc1Tracks.Streamer(R__b);
      mdc2Tracks.Streamer(R__b);
      tofTracks.Streamer(R__b);
      rpcTracks.Streamer(R__b);
      showerTracks.Streamer(R__b);
      closeTracks.Streamer(R__b);
      R__b >> oAFitted;
      R__b >> oANoFitted;
      R__b >> ind;
      R__b >> sector;
      mdctrk.Streamer(R__b);
      seg1.Streamer(R__b);
      seg2.Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 3; R__i++)
         tof[R__i].Streamer(R__b);
      rpcclst.Streamer(R__b);
      showerhit.Streamer(R__b);
      richhit.Streamer(R__b);
      spline.Streamer(R__b);
      rk.Streamer(R__b);
      kal.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, candidate::IsA());
   } else {
      R__c = R__b.WriteVersion(candidate::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << used;
      R__b << system;
      R__b << rkSuccess;
      R__b << usedMeta;
      R__b << selectTof;
      R__b << nCand;
      R__b << hasRingCorrelation;
      R__b << corrThetaRich;
      R__b << alignThetaRich;
      R__b << alignPhiRich;
      R__b << richMdcQuality;
      R__b << richRkQuality;
      commonTracks.Streamer(R__b);
      richTracks.Streamer(R__b);
      mdc1Tracks.Streamer(R__b);
      mdc2Tracks.Streamer(R__b);
      tofTracks.Streamer(R__b);
      rpcTracks.Streamer(R__b);
      showerTracks.Streamer(R__b);
      closeTracks.Streamer(R__b);
      R__b << oAFitted;
      R__b << oANoFitted;
      R__b << ind;
      R__b << sector;
      mdctrk.Streamer(R__b);
      seg1.Streamer(R__b);
      seg2.Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 3; R__i++)
         tof[R__i].Streamer(R__b);
      rpcclst.Streamer(R__b);
      showerhit.Streamer(R__b);
      richhit.Streamer(R__b);
      spline.Streamer(R__b);
      rk.Streamer(R__b);
      kal.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void candidate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class candidate.
      TClass *R__cl = ::candidate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "objects", &objects);
      R__insp.InspectMember(objects, "objects.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "used", &used);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "system", &system);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rkSuccess", &rkSuccess);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "usedMeta", &usedMeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "selectTof", &selectTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCand", &nCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasRingCorrelation", &hasRingCorrelation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corrThetaRich", &corrThetaRich);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alignThetaRich", &alignThetaRich);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alignPhiRich", &alignPhiRich);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richMdcQuality", &richMdcQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richRkQuality", &richRkQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "commonTracks", &commonTracks);
      R__insp.InspectMember(commonTracks, "commonTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richTracks", &richTracks);
      R__insp.InspectMember(richTracks, "richTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdc1Tracks", &mdc1Tracks);
      R__insp.InspectMember(mdc1Tracks, "mdc1Tracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdc2Tracks", &mdc2Tracks);
      R__insp.InspectMember(mdc2Tracks, "mdc2Tracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tofTracks", &tofTracks);
      R__insp.InspectMember(tofTracks, "tofTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcTracks", &rpcTracks);
      R__insp.InspectMember(rpcTracks, "rpcTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "showerTracks", &showerTracks);
      R__insp.InspectMember(showerTracks, "showerTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "closeTracks", &closeTracks);
      R__insp.InspectMember(closeTracks, "closeTracks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "oAFitted", &oAFitted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "oANoFitted", &oANoFitted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ind", &ind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdctrk", &mdctrk);
      R__insp.InspectMember(mdctrk, "mdctrk.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seg1", &seg1);
      R__insp.InspectMember(seg1, "seg1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seg2", &seg2);
      R__insp.InspectMember(seg2, "seg2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof[3]", tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcclst", &rpcclst);
      R__insp.InspectMember(rpcclst, "rpcclst.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "showerhit", &showerhit);
      R__insp.InspectMember(showerhit, "showerhit.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "richhit", &richhit);
      R__insp.InspectMember(richhit, "richhit.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "spline", &spline);
      R__insp.InspectMember(spline, "spline.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rk", &rk);
      R__insp.InspectMember(rk, "rk.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kal", &kal);
      R__insp.InspectMember(kal, "kal.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_candidate(void *p) {
      return  p ? new(p) ::candidate : new ::candidate;
   }
   static void *newArray_candidate(Long_t nElements, void *p) {
      return p ? new(p) ::candidate[nElements] : new ::candidate[nElements];
   }
   // Wrapper around operator delete
   static void delete_candidate(void *p) {
      delete ((::candidate*)p);
   }
   static void deleteArray_candidate(void *p) {
      delete [] ((::candidate*)p);
   }
   static void destruct_candidate(void *p) {
      typedef ::candidate current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_candidate(TBuffer &buf, void *obj) {
      ((::candidate*)obj)->::candidate::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::candidate

namespace ROOTDict {
   void vectorlEclosetrackgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEclosetrackgR_Dictionary();
   static void *new_vectorlEclosetrackgR(void *p = 0);
   static void *newArray_vectorlEclosetrackgR(Long_t size, void *p);
   static void delete_vectorlEclosetrackgR(void *p);
   static void deleteArray_vectorlEclosetrackgR(void *p);
   static void destruct_vectorlEclosetrackgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<closetrack>*)
   {
      vector<closetrack> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<closetrack>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<closetrack>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<closetrack>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEclosetrackgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<closetrack>) );
      instance.SetNew(&new_vectorlEclosetrackgR);
      instance.SetNewArray(&newArray_vectorlEclosetrackgR);
      instance.SetDelete(&delete_vectorlEclosetrackgR);
      instance.SetDeleteArray(&deleteArray_vectorlEclosetrackgR);
      instance.SetDestructor(&destruct_vectorlEclosetrackgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<closetrack> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<closetrack>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEclosetrackgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<closetrack>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEclosetrackgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<closetrack> : new vector<closetrack>;
   }
   static void *newArray_vectorlEclosetrackgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<closetrack>[nElements] : new vector<closetrack>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEclosetrackgR(void *p) {
      delete ((vector<closetrack>*)p);
   }
   static void deleteArray_vectorlEclosetrackgR(void *p) {
      delete [] ((vector<closetrack>*)p);
   }
   static void destruct_vectorlEclosetrackgR(void *p) {
      typedef vector<closetrack> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<closetrack>

namespace ROOTDict {
   void vectorlEtrackinfomUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEtrackinfomUgR_Dictionary();
   static void *new_vectorlEtrackinfomUgR(void *p = 0);
   static void *newArray_vectorlEtrackinfomUgR(Long_t size, void *p);
   static void delete_vectorlEtrackinfomUgR(void *p);
   static void deleteArray_vectorlEtrackinfomUgR(void *p);
   static void destruct_vectorlEtrackinfomUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<trackinfo*>*)
   {
      vector<trackinfo*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<trackinfo*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<trackinfo*>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<trackinfo*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEtrackinfomUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<trackinfo*>) );
      instance.SetNew(&new_vectorlEtrackinfomUgR);
      instance.SetNewArray(&newArray_vectorlEtrackinfomUgR);
      instance.SetDelete(&delete_vectorlEtrackinfomUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEtrackinfomUgR);
      instance.SetDestructor(&destruct_vectorlEtrackinfomUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<trackinfo*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<trackinfo*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEtrackinfomUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<trackinfo*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEtrackinfomUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<trackinfo*> : new vector<trackinfo*>;
   }
   static void *newArray_vectorlEtrackinfomUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<trackinfo*>[nElements] : new vector<trackinfo*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEtrackinfomUgR(void *p) {
      delete ((vector<trackinfo*>*)p);
   }
   static void deleteArray_vectorlEtrackinfomUgR(void *p) {
      delete [] ((vector<trackinfo*>*)p);
   }
   static void destruct_vectorlEtrackinfomUgR(void *p) {
      typedef vector<trackinfo*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<trackinfo*>

namespace ROOTDict {
   void vectorlEULong64_tgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEULong64_tgR_Dictionary();
   static void *new_vectorlEULong64_tgR(void *p = 0);
   static void *newArray_vectorlEULong64_tgR(Long_t size, void *p);
   static void delete_vectorlEULong64_tgR(void *p);
   static void deleteArray_vectorlEULong64_tgR(void *p);
   static void destruct_vectorlEULong64_tgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<ULong64_t>*)
   {
      vector<ULong64_t> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<ULong64_t>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<ULong64_t>", -2, "vector.dll", 0,
                  typeid(vector<ULong64_t>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEULong64_tgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<ULong64_t>) );
      instance.SetNew(&new_vectorlEULong64_tgR);
      instance.SetNewArray(&newArray_vectorlEULong64_tgR);
      instance.SetDelete(&delete_vectorlEULong64_tgR);
      instance.SetDeleteArray(&deleteArray_vectorlEULong64_tgR);
      instance.SetDestructor(&destruct_vectorlEULong64_tgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<ULong64_t> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<ULong64_t>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEULong64_tgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<ULong64_t>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEULong64_tgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ULong64_t> : new vector<ULong64_t>;
   }
   static void *newArray_vectorlEULong64_tgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ULong64_t>[nElements] : new vector<ULong64_t>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEULong64_tgR(void *p) {
      delete ((vector<ULong64_t>*)p);
   }
   static void deleteArray_vectorlEULong64_tgR(void *p) {
      delete [] ((vector<ULong64_t>*)p);
   }
   static void destruct_vectorlEULong64_tgR(void *p) {
      typedef vector<ULong64_t> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<ULong64_t>

/********************************************************
* ../build/pc/ParticleDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableParticleDict();

extern "C" void G__set_cpp_environmentParticleDict() {
  G__cpp_reset_tagtableParticleDict();
}
#include <new>
extern "C" int G__cpp_dllrevParticleDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Particle */

/* HParticleCand */
static int G__ParticleDict_246_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCand* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCand[n];
     } else {
       p = new((void*) gvp) HParticleCand[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCand;
     } else {
       p = new((void*) gvp) HParticleCand;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setFlagBit((Particle::eFlagBits) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->unsetFlagBit((Particle::eFlagBits) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isFlagBit((Particle::eFlagBits) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setFlagBit((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->unsetFlagBit((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isFlagBit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setFlagBitByValue((Particle::eFlagBits) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setFlagBitByValue((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isFlagDoubleHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isFlagAllBestHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isFlagNoBestHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCand*) G__getstructoffset())->getFlagField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setFlagField((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("isFlagAND: more than 56 var args\n");
   }
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isFlagAND((Int_t) G__int(libp->para[0]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[2], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("isFlagOR: more than 56 var args\n");
   }
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isFlagOR((Int_t) G__int(libp->para[0]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[2], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCand*) G__getstructoffset())->getDoubleHitsLeptons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCand*) G__getstructoffset())->getDoubleHitsHadrons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCand*) G__getstructoffset())->printFlags(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCand*) G__getstructoffset())->printFlags();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCand*) G__getstructoffset())->print((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCand*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->select((Bool_t (*)(HParticleCand*)) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setPID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setSector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setSystem((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRingCorr((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setTofRec((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setMdcdEdx((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setTofdEdx((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setCharge((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setBeta((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setMomentum((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setMass2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setPhi((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setTheta((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setR((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setZ((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setChi2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setDistanceToMetaHit((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setInnerSegmentChi2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setOuterSegmentChi2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setAngleToNearbyFittedInner((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setAngleToNearbyUnfittedInner((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRingNumCals((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRingNumPads((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRingAmplitude((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRingHouTra((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRingPatternMatrix((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRingRadius((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRingChi2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRingCentroid((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRichPhi((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRichTheta((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setMetaMatchQuality((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setMetaMatchQualityShower((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setMetaMatchRadius((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setMetaMatchRadiusShower((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRkMetaDx((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRkMetaDy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setBetaOrg((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setDistanceToMetaHitOrg((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setMomentumOrg((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setShowerSum0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setShowerSum1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setShowerSum2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setSelectedMeta((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setMetaInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRichInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRichBTInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setInnerSegInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setOuterSegInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setRpcInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setShowerInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setTofHitInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setTofClstInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HParticleCand*) G__getstructoffset())->getIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HParticleCand*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HParticleCand*) G__getstructoffset())->getSystem());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HParticleCand*) G__getstructoffset())->getSystemUsed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const HParticleCand*) G__getstructoffset())->getRingCorr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HParticleCand*) G__getstructoffset())->isRichMatch((Particle::eMatching) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HParticleCand*) G__getstructoffset())->getTofRec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getMdcdEdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getTofdEdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HParticleCand*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getBeta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getMomentum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getMass2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getDistanceToMetaHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getTof());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getTofNorm((Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getTofNorm());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getInnerSegmentChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getOuterSegmentChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getAngleToNearbyFittedInner());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getAngleToNearbyUnfittedInner());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getRingNumCals());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getRingNumPads());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getRingAmplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getAverageRingCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getRingHouTra());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getRingPatternMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getRingRadius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getRingChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getRingCentroid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getRichPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getRichTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getMetaMatchQuality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getMetaMatchQualityShower());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getMetaMatchRadius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getMetaMatchRadiusShower());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getRkMetaDx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getRkMetaDy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getBetaOrg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getDistanceToMetaHitOrg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getMomentumOrg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->calcRkMetaMatch((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->calcRkMetaMatch((Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->calcRkMetaMatch());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getShowerSum0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getShowerSum1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getShowerSum2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCand*) G__getstructoffset())->getShowerDeltaSum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getSelectedMeta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HParticleCand*) G__getstructoffset())->isTofHitUsed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HParticleCand*) G__getstructoffset())->isTofClstUsed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HParticleCand*) G__getstructoffset())->isRpcClstUsed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HParticleCand*) G__getstructoffset())->isShowerUsed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HParticleCand*) G__getstructoffset())->isMetaUsed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getMetaInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getRichInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getRichBTInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getInnerSegInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getOuterSegInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getRpcInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getShowerInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getTofHitInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getTofClstInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCand*) G__getstructoffset())->getMetaHitInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCand*) G__getstructoffset())->calc4vectorProperties((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCand*) G__getstructoffset())->calc4vectorProperties();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->getDeltaTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_146(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->getDeltaPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->getRichMatchingQuality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_148(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->getRichMatchingQualityNorm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isNewRich());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->getZprime((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->getZprime((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->getRprime((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->getMomentumPID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_154(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->getMomentumCorrectionPID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_155(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->getCorrectedMomentumPID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_156(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->getMass2PID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_157(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->getMass2CorrectionPID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_158(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCand*) G__getstructoffset())->getCorrectedMass2PID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_159(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setLayers((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_160(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setLayer((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_161(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->unsetAllLayers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_162(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCand::setLayer((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, *(UInt_t*) G__UIntref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_163(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->getLayer((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_164(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCand*) G__getstructoffset())->getNLayer((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_165(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCand*) G__getstructoffset())->getNLayerMod((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_166(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->hasLayers((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_167(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isFakeRejected((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isFakeRejected());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_168(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCand*) G__getstructoffset())->setFakeRejected((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCand*) G__getstructoffset())->setFakeRejected();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_169(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCand*) G__getstructoffset())->unsetFakeRejected((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCand*) G__getstructoffset())->unsetFakeRejected();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_170(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->unsetAllFakeRejected();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_171(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setOffVertexClust();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_172(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->unsetOffVertexClust();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_173(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isOffVertexClust());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_174(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setUsedVertex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_175(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->unsetUsedVertex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_176(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isUsedVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_177(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setPrimaryVertex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_178(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->unsetPrimaryVertex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_179(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isPrimaryVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_180(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->printLayers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_181(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setNWSeg((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_182(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCand*) G__getstructoffset())->getNWSeg((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_183(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setAtMdcEdge((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_184(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->unsetAtMdcEdge((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_185(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isAtMdcEdge((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_186(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isAtAnyMdcEdge((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HParticleCand*) G__getstructoffset())->isAtAnyMdcEdge());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_187(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setMetaModule((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_188(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->unsetMetaModule((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_189(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->setMetaCell((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_190(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->unsetMetaCell((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_191(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCand*) G__getstructoffset())->getMetaModule((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_192(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCand*) G__getstructoffset())->getMetaCell((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_193(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCand::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_194(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCand::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_195(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCand::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_196(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCand::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_200(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCand*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_201(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCand::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_202(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCand::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_203(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCand::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_246_0_204(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCand::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_246_0_205(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCand* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCand(*(HParticleCand*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCand G__THParticleCand;
static int G__ParticleDict_246_0_206(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCand*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCand*) (soff+(sizeof(HParticleCand)*i)))->~G__THParticleCand();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCand*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCand*) (soff))->~G__THParticleCand();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_246_0_207(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCand* dest = (HParticleCand*) G__getstructoffset();
   *dest = *(HParticleCand*) libp->para[0].ref;
   const HParticleCand& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCandSim */
static int G__ParticleDict_247_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCandSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCandSim[n];
     } else {
       p = new((void*) gvp) HParticleCandSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCandSim;
     } else {
       p = new((void*) gvp) HParticleCandSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantPID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantTrackRich((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantTrackMeta((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantTrackShower((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantTrackInnerMdc((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantTrackOuterMdc((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantCorrTrackIds((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantxMom((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantyMom((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantzMom((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantxVertex((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantyVertex((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantzVertex((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantParentTrackNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantParentPID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantGrandParentTrackNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantGrandParentPID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantCreationMechanism((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantMediumNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantGeninfo((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantGeninfo1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantGeninfo2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->setGeantGenweight((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCandSim*) G__getstructoffset())->getGeantPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCandSim*) G__getstructoffset())->getGeantTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCandSim*) G__getstructoffset())->getGeantTrackRich((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCandSim*) G__getstructoffset())->getGeantTrackMeta((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCandSim*) G__getstructoffset())->getGeantTrackShower((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCandSim*) G__getstructoffset())->getGeantTrackInnerMdc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCandSim*) G__getstructoffset())->getGeantTrackOuterMdc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCandSim*) G__getstructoffset())->getGeantTrackInnerMdcN((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCandSim*) G__getstructoffset())->getGeantTrackOuterMdcN((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCandSim*) G__getstructoffset())->getGeantTrackInnerMdcWeight((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCandSim*) G__getstructoffset())->getGeantTrackOuterMdcWeight((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HParticleCandSim*) G__getstructoffset())->getGeantCorrTrackIds());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HParticleCandSim*) G__getstructoffset())->isGhostTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HParticleCandSim*) G__getstructoffset())->isInDetector((Particle::eDetBits) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HParticleCandSim*) G__getstructoffset())->isInDetectors((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCandSim*) G__getstructoffset())->getNDetector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDCWires((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDCWires((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDCWires((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDCWires((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDCWires((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDCWeight((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDCWeight((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDCWeight((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDCWeight((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDCWeight((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDC(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])
, (Bool_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDC((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDC((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDC((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDC((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDC((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCandSim*) G__getstructoffset())->isGoodMDC((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCandSim*) G__getstructoffset())->getGeantxMom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCandSim*) G__getstructoffset())->getGeantyMom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCandSim*) G__getstructoffset())->getGeantzMom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCandSim*) G__getstructoffset())->getGeantTotalMom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCandSim*) G__getstructoffset())->getGeantxVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCandSim*) G__getstructoffset())->getGeantyVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCandSim*) G__getstructoffset())->getGeantzVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCandSim*) G__getstructoffset())->getGeantParentTrackNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCandSim*) G__getstructoffset())->getGeantParentPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCandSim*) G__getstructoffset())->getGeantGrandParentTrackNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCandSim*) G__getstructoffset())->getGeantGrandParentPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCandSim*) G__getstructoffset())->getGeantCreationMechanism());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCandSim*) G__getstructoffset())->getGeantMediumNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCandSim*) G__getstructoffset())->getGeantGeninfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCandSim*) G__getstructoffset())->getGeantGeninfo1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCandSim*) G__getstructoffset())->getGeantGeninfo2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCandSim*) G__getstructoffset())->getGeantGenweight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCandSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCandSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCandSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCandSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCandSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCandSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCandSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_247_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCandSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_247_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCandSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCandSim(*(HParticleCandSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCandSim G__THParticleCandSim;
static int G__ParticleDict_247_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCandSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCandSim*) (soff+(sizeof(HParticleCandSim)*i)))->~G__THParticleCandSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCandSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCandSim*) (soff))->~G__THParticleCandSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_247_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCandSim* dest = (HParticleCandSim*) G__getstructoffset();
   *dest = *(HParticleCandSim*) libp->para[0].ref;
   const HParticleCandSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleWallHit */
static int G__ParticleDict_248_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleWallHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleWallHit[n];
     } else {
       p = new((void*) gvp) HParticleWallHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleWallHit;
     } else {
       p = new((void*) gvp) HParticleWallHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHit*) G__getstructoffset())->setWallCell((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHit*) G__getstructoffset())->setWallCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHit*) G__getstructoffset())->setWallTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHit*) G__getstructoffset())->setWallXlab((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHit*) G__getstructoffset())->setWallYlab((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHit*) G__getstructoffset())->setWallZlab((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleWallHit*) G__getstructoffset())->getWallCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHit*) G__getstructoffset())->getWallCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHit*) G__getstructoffset())->getWallTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHit*) G__getstructoffset())->getWallXlab());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHit*) G__getstructoffset())->getWallYlab());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHit*) G__getstructoffset())->getWallZlab());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleWallHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleWallHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleWallHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleWallHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleWallHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleWallHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleWallHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_248_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleWallHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_248_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleWallHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleWallHit(*(HParticleWallHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleWallHit G__THParticleWallHit;
static int G__ParticleDict_248_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleWallHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleWallHit*) (soff+(sizeof(HParticleWallHit)*i)))->~G__THParticleWallHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleWallHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleWallHit*) (soff))->~G__THParticleWallHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_248_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleWallHit* dest = (HParticleWallHit*) G__getstructoffset();
   *dest = *(HParticleWallHit*) libp->para[0].ref;
   const HParticleWallHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleWallHitSim */
static int G__ParticleDict_249_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleWallHitSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleWallHitSim[n];
     } else {
       p = new((void*) gvp) HParticleWallHitSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleWallHitSim;
     } else {
       p = new((void*) gvp) HParticleWallHitSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->setGeantPID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->setGeantxMom((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->setGeantyMom((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->setGeantzMom((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->setGeantxVertex((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->setGeantyVertex((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->setGeantzVertex((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->setGeantPartentTrackNum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->setGeantCreationMechanism((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->setGeantMediumNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->setGeantGeninfo((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->setGeantGeninfo1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->setGeantGeninfo2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->setGeantGenweight((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleWallHitSim*) G__getstructoffset())->getGeantPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHitSim*) G__getstructoffset())->getGeantxMom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHitSim*) G__getstructoffset())->getGeantyMom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHitSim*) G__getstructoffset())->getGeantzMom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHitSim*) G__getstructoffset())->getGeantxVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHitSim*) G__getstructoffset())->getGeantyVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHitSim*) G__getstructoffset())->getGeantzVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleWallHitSim*) G__getstructoffset())->getGeantPartentTrackNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleWallHitSim*) G__getstructoffset())->getGeantCreationMechanism());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleWallHitSim*) G__getstructoffset())->getGeantMediumNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHitSim*) G__getstructoffset())->getGeantGeninfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHitSim*) G__getstructoffset())->getGeantGeninfo1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHitSim*) G__getstructoffset())->getGeantGeninfo2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleWallHitSim*) G__getstructoffset())->getGeantGenweight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleWallHitSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleWallHitSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleWallHitSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleWallHitSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleWallHitSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleWallHitSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleWallHitSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleWallHitSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_249_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleWallHitSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_249_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleWallHitSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleWallHitSim(*(HParticleWallHitSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleWallHitSim G__THParticleWallHitSim;
static int G__ParticleDict_249_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleWallHitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleWallHitSim*) (soff+(sizeof(HParticleWallHitSim)*i)))->~G__THParticleWallHitSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleWallHitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleWallHitSim*) (soff))->~G__THParticleWallHitSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_249_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleWallHitSim* dest = (HParticleWallHitSim*) G__getstructoffset();
   *dest = *(HParticleWallHitSim*) libp->para[0].ref;
   const HParticleWallHitSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCal */
static int G__ParticleDict_250_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCal[n];
     } else {
       p = new((void*) gvp) HParticleCal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCal;
     } else {
       p = new((void*) gvp) HParticleCal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCal*) G__getstructoffset())->setTOFModule((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCal*) G__getstructoffset())->setTOFCell((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCal*) G__getstructoffset())->setMETACell((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCal*) G__getstructoffset())->setTOFLeftAmp((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCal*) G__getstructoffset())->setTOFRightAmp((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCal*) G__getstructoffset())->setMETALocX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCal*) G__getstructoffset())->setMETALocY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCal*) G__getstructoffset())->getTOFModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCal*) G__getstructoffset())->getTOFCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleCal*) G__getstructoffset())->getMETACell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCal*) G__getstructoffset())->getTOFLeftAmp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCal*) G__getstructoffset())->getTOFRightAmp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCal*) G__getstructoffset())->getMETALocX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleCal*) G__getstructoffset())->getMETALocY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_250_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_250_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCal(*(HParticleCal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCal G__THParticleCal;
static int G__ParticleDict_250_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCal*) (soff+(sizeof(HParticleCal)*i)))->~G__THParticleCal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCal*) (soff))->~G__THParticleCal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_250_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCal* dest = (HParticleCal*) G__getstructoffset();
   *dest = *(HParticleCal*) libp->para[0].ref;
   const HParticleCal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleMdc */
static int G__ParticleDict_253_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleMdc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleMdc[n];
     } else {
       p = new((void*) gvp) HParticleMdc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleMdc;
     } else {
       p = new((void*) gvp) HParticleMdc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleMdc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleMdc*) G__getstructoffset())->setIndex((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HParticleMdc*) G__getstructoffset())->getIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleMdc*) G__getstructoffset())->setFlag((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleMdc*) G__getstructoffset())->getNBinsClus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleMdc*) G__getstructoffset())->getNCellsClus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleMdc*) G__getstructoffset())->getNMergedClus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleMdc*) G__getstructoffset())->getMdc1X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleMdc*) G__getstructoffset())->getMdc1Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleMdc*) G__getstructoffset())->getMdc2X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleMdc*) G__getstructoffset())->getMdc2Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleMdc*) G__getstructoffset())->getMdc3X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleMdc*) G__getstructoffset())->getMdc3Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleMdc*) G__getstructoffset())->getMdc4X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleMdc*) G__getstructoffset())->getMdc4Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleMdc*) G__getstructoffset())->getNRemovedCellsInnerSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleMdc*) G__getstructoffset())->getdedx((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleMdc*) G__getstructoffset())->getSigmadedx((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HParticleMdc*) G__getstructoffset())->getNWirededx((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HParticleMdc*) G__getstructoffset())->getNWireCutdedx((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleMdc*) G__getstructoffset())->getdedxSeg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleMdc*) G__getstructoffset())->getSigmadedxSeg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HParticleMdc*) G__getstructoffset())->getNWireCutdedxSeg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleMdc*) G__getstructoffset())->fill((HMdcSeg*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleMdc*) G__getstructoffset())->fill((HMdcTrkCand*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleMdc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleMdc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleMdc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleMdc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleMdc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleMdc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleMdc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleMdc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_253_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleMdc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_253_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleMdc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleMdc(*(HParticleMdc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleMdc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleMdc G__THParticleMdc;
static int G__ParticleDict_253_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleMdc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleMdc*) (soff+(sizeof(HParticleMdc)*i)))->~G__THParticleMdc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleMdc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleMdc*) (soff))->~G__THParticleMdc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_253_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleMdc* dest = (HParticleMdc*) G__getstructoffset();
   *dest = *(HParticleMdc*) libp->para[0].ref;
   const HParticleMdc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleEvtInfo */
static int G__ParticleDict_254_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleEvtInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleEvtInfo[n];
     } else {
       p = new((void*) gvp) HParticleEvtInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleEvtInfo;
     } else {
       p = new((void*) gvp) HParticleEvtInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setRichMult((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setRichCorrMult((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setRichClusMult((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setTofMult((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setRpcMult((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setRpcMultHit((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setTofMultCut((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setRpcMultCut((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setRpcMultHitCut((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setShowerMult((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setParticleCandMult((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setSelectedParticleCandMult((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setPrimaryParticleCandMult((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Int_t a[1][2]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleEvtInfo*) G__getstructoffset())->setMdcClusMult(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Int_t a[1][2]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleEvtInfo*) G__getstructoffset())->setMdcSegFittedMult(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Int_t a[1][2]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleEvtInfo*) G__getstructoffset())->setMdcSegUnfittedMult(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setMdcWires((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setMdcWiresUnused((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setMdcWiresRaw((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setFWallMult((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setFWallVector((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setRPlanePhi((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setPhiA((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setPhiB((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setPhiAB((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setNA((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setNB((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setMeanMult((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setMeanMIPSMult((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setMeanLEPMult((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setMeanMult((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setMeanMIPSMult((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setMeanLEPMult((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setSigmaMult((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setSigmaMIPSMult((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setSigmaLEPMult((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setSigmaMult((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setSigmaMIPSMult((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setSigmaLEPMult((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleEvtInfo*) G__getstructoffset())->getMeanMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleEvtInfo*) G__getstructoffset())->getMeanMIPSMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleEvtInfo*) G__getstructoffset())->getMeanLEPMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleEvtInfo*) G__getstructoffset())->getMeanMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleEvtInfo*) G__getstructoffset())->getMeanMIPSMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleEvtInfo*) G__getstructoffset())->getMeanLEPMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleEvtInfo*) G__getstructoffset())->getSigmaMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleEvtInfo*) G__getstructoffset())->getSigmaMIPSMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleEvtInfo*) G__getstructoffset())->getSigmaLEPMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleEvtInfo*) G__getstructoffset())->getSigmaMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleEvtInfo*) G__getstructoffset())->getSigmaMIPSMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleEvtInfo*) G__getstructoffset())->getSigmaLEPMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getRichMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getRichCorrMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getRichClusMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getTofMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getRpcMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getRpcMultHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getTofMultCut((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getRpcMultCut((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getRpcMultHitCut((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getShowerMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getParticleCandMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSelectedParticleCandMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getPrimaryParticleCandMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getMdcClusMult((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getMdcSegFittedMult((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getMdcSegUnfittedMult((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumRichMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumRichCorrMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumRichClusMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumTofMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumRpcMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumRpcMultHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumTofMultCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumRpcMultCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumRpcMultHitCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumShowerMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumParticleCandMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumSelectedParticleCandMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumPrimaryParticleCandMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumMdcClusMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumMdcSegFittedMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getSumMdcSegUnfittedMult((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtInfo*) G__getstructoffset())->getMdcWiresLay((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtInfo*) G__getstructoffset())->getMdcWiresMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtInfo*) G__getstructoffset())->getMdcWiresSec((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtInfo*) G__getstructoffset())->getMdcWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtInfo*) G__getstructoffset())->getMdcWiresUnusedLay((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtInfo*) G__getstructoffset())->getMdcWiresUnusedMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtInfo*) G__getstructoffset())->getMdcWiresUnusedSec((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtInfo*) G__getstructoffset())->getMdcWiresUnused());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtInfo*) G__getstructoffset())->getMdcWiresRawLay((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtInfo*) G__getstructoffset())->getMdcWiresRawMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtInfo*) G__getstructoffset())->getMdcWiresRawSec((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtInfo*) G__getstructoffset())->getMdcWiresRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getFWallMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HParticleEvtInfo*) G__getstructoffset())->getFWallVector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HParticleEvtInfo*) G__getstructoffset())->getRPlanePhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleEvtInfo*) G__getstructoffset())->getPhiA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleEvtInfo*) G__getstructoffset())->getPhiB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleEvtInfo*) G__getstructoffset())->getPhiAB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleEvtInfo*) G__getstructoffset())->getNA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleEvtInfo*) G__getstructoffset())->getNB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HParticleEvtInfo*) G__getstructoffset())->getEventSelector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setEventSelector((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleEvtInfo*) G__getstructoffset())->isGoodEvent((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->setSelectorBit((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->unsetSelectorBit((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->clearMembers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleEvtInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleEvtInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleEvtInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleEvtInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleEvtInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleEvtInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleEvtInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_254_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleEvtInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_254_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleEvtInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleEvtInfo(*(HParticleEvtInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleEvtInfo G__THParticleEvtInfo;
static int G__ParticleDict_254_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleEvtInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleEvtInfo*) (soff+(sizeof(HParticleEvtInfo)*i)))->~G__THParticleEvtInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleEvtInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleEvtInfo*) (soff))->~G__THParticleEvtInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_254_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleEvtInfo* dest = (HParticleEvtInfo*) G__getstructoffset();
   *dest = *(HParticleEvtInfo*) libp->para[0].ref;
   const HParticleEvtInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticlePair */
static int G__ParticleDict_936_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticlePair* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticlePair[n];
     } else {
       p = new((void*) gvp) HParticlePair[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticlePair;
     } else {
       p = new((void*) gvp) HParticlePair;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticlePair));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticlePair*) G__getstructoffset())->getCand((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticlePair*) G__getstructoffset())->getPair((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticlePair*) G__getstructoffset())->getCandSim((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TLorentzVector& obj = ((HParticlePair*) G__getstructoffset())->getCandVect((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticlePair*) G__getstructoffset())->index((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticlePair*) G__getstructoffset())->getOpeningAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticlePair*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticlePair*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticlePair*) G__getstructoffset())->getCandPID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticlePair*) G__getstructoffset())->getMotherPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HParticlePair*) G__getstructoffset())->getPairFlags());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticlePair*) G__getstructoffset())->isFakePair());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticlePair*) G__getstructoffset())->isTruePair());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticlePair*) G__getstructoffset())->getFirstDaughter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticlePair*) G__getstructoffset())->isGeantDecay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticlePair*) G__getstructoffset())->isSameExternalSource());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePair*) G__getstructoffset())->getSourceInfo((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticlePair*) G__getstructoffset())->getIsSimulation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticlePair*) G__getstructoffset())->getVerMinDistCand((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticlePair*) G__getstructoffset())->getVerMinDistMother());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticlePair*) G__getstructoffset())->getMinDistCandidates());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticlePair*) G__getstructoffset())->getVerDistMother());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HParticlePair*) G__getstructoffset())->getEventVertex();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HParticlePair*) G__getstructoffset())->getDecayVertex();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePair*) G__getstructoffset())->printFlags();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticlePair*) G__getstructoffset())->print((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticlePair*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePair*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HParticlePair*) G__getstructoffset())->getStatusFlags());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticlePair*) G__getstructoffset())->checkStatus((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticlePair*) G__getstructoffset())->calcVectors((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(HGeomVector*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticlePair*) G__getstructoffset())->setPair(
(HParticleCand*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (HParticleCand*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, *(HGeomVector*) libp->para[6].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticlePair*) G__getstructoffset())->setPair(
(HParticlePair*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (HParticleCand*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, *(HGeomVector*) libp->para[6].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticlePair*) G__getstructoffset())->setPair(
(HParticlePair*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (HParticlePair*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, *(HGeomVector*) libp->para[6].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticlePair::setDoMomentumCorrection((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticlePair::getDoMomentumCorrection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticlePair::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticlePair::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticlePair::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticlePair::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePair*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticlePair::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticlePair::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticlePair::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_936_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticlePair::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_936_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticlePair* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticlePair(*(HParticlePair*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticlePair));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticlePair G__THParticlePair;
static int G__ParticleDict_936_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticlePair*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticlePair*) (soff+(sizeof(HParticlePair)*i)))->~G__THParticlePair();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticlePair*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticlePair*) (soff))->~G__THParticlePair();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_936_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticlePair* dest = (HParticlePair*) G__getstructoffset();
   *dest = *(HParticlePair*) libp->para[0].ref;
   const HParticlePair& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleTool */
static int G__ParticleDict_940_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleTool* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleTool[n];
     } else {
       p = new((void*) gvp) HParticleTool[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleTool;
     } else {
       p = new((void*) gvp) HParticleTool;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTool));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::phiSecToLabDeg((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::thetaToLabDeg((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::phiLabToPhiSecDeg((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleTool::phiLabToSec((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::getOpeningAngle((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::getOpeningAngle(*(TLorentzVector*) libp->para[0].ref, *(TLorentzVector*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::getOpeningAngle((HParticleCand*) G__int(libp->para[0]), (HParticleCand*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::getOpeningAngle((HGeantKine*) G__int(libp->para[0]), (HGeantKine*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HParticleTool::setCloseCandidates((Float_t) G__double(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HParticleTool::setCloseCandidates((Float_t) G__double(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HParticleTool::setCloseCandidates((Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HParticleTool::setCloseCandidates());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 105, (long) HParticleTool::getCloseCandidates((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, *(vector<Float_t>*) libp->para[2].ref, (Float_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) HParticleTool::getCloseCandidates((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, *(vector<Float_t>*) libp->para[2].ref, (Float_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) HParticleTool::getCloseCandidates((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, *(vector<Float_t>*) libp->para[2].ref, (Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) HParticleTool::getCloseCandidates((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, *(vector<Float_t>*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleTool::getCloseCandidatesSegInd((HParticleCand*) G__int(libp->para[0]), *(vector<Int_t>*) libp->para[1].ref
, (Float_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      HParticleTool::getTLorentzVector((HGeantKine*) G__int(libp->para[0]), *(TLorentzVector*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HParticleTool::getTLorentzVector((HGeantKine*) G__int(libp->para[0]), *(TLorentzVector*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleTool::fillTLorentzVector(*(TLorentzVector*) libp->para[0].ref, (HParticleCand*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      HParticleTool::fillTLorentzVector(*(TLorentzVector*) libp->para[0].ref, (HParticleCand*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HParticleTool::fillTLorentzVector(*(TLorentzVector*) libp->para[0].ref, (HParticleCand*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::getLabPhiDeg(*(TLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::calcRichQA((HMdcSeg*) G__int(libp->para[0]), (HRichHit*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::calcRichQA((HMdcSeg*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         HGeomVector* pobj;
         HGeomVector xobj = HParticleTool::getGlobalVertex((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         HGeomVector* pobj;
         HGeomVector xobj = HParticleTool::getGlobalVertex((Int_t) G__int(libp->para[0]));
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::getMinimumDistToVertex((HParticleCand*) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = HParticleTool::getPointOfClosestApproachToVertex((HParticleCand*) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref);
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::scaledy((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) HParticleTool::getScaledDy((HParticleCand*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) HParticleTool::getScaledDy((HParticleCand*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getScaleTF1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) HParticleTool::normDX((HParticleCand*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) HParticleTool::normDX((HParticleCand*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 102, (double) HParticleTool::getNormDX((HParticleCand*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letdouble(result7, 102, (double) HParticleTool::getNormDX((HParticleCand*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 102, (double) HParticleTool::getSigmaDX((HParticleCand*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letdouble(result7, 102, (double) HParticleTool::getSigmaDX((HParticleCand*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::normDX((HParticleCand*) G__int(libp->para[0]), (HTofWalkPar*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::getNormDX((HParticleCand*) G__int(libp->para[0]), (HTofWalkPar*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::getSigmaDX((HParticleCand*) G__int(libp->para[0]), (HTofWalkPar*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getTofXOffsetTF1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getTofXSigmaTF1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::getRpcCellHalfWidth((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::getTofCellHalfWidth((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HParticleTool::isGoodMetaCell((HParticleCand*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HParticleTool::isGoodMetaCell((HParticleCand*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HParticleTool::isGoodMetaCell((HParticleCand*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::getCorrectedMomentum((HParticleCand*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTool::setCorrectedMomentum((HParticleCand*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::isParticledEdx((Int_t) G__int(libp->para[0]), (HParticleCand*) G__int(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      G__letint(result7, 103, (long) HParticleTool::isParticleBeta(
(Int_t) G__int(libp->para[0]), (HParticleCand*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])
, *(Float_t*) G__Floatref(&libp->para[6]), *((TString*) G__int(libp->para[7]))));
      break;
   case 7:
      G__letint(result7, 103, (long) HParticleTool::isParticleBeta(
(Int_t) G__int(libp->para[0]), (HParticleCand*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])
, *(Float_t*) G__Floatref(&libp->para[6])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) HParticleTool::correctPathLength((HParticleCand*) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref
, (HMdcPlane*) G__int(libp->para[2]), *(HGeomVector*) libp->para[3].ref
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) HParticleTool::correctPathLength((HParticleCand*) G__int(libp->para[0]), *(HGeomVector*) libp->para[1].ref
, (HMdcPlane*) G__int(libp->para[2]), *(HGeomVector*) libp->para[3].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) HParticleTool::checkCropedLayer((HGeantKine*) G__int(libp->para[0]), (HMdcLayer*) G__int(libp->para[1])
, (Bool_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) HParticleTool::checkCropedLayer((HGeantKine*) G__int(libp->para[0]), (HMdcLayer*) G__int(libp->para[1])
, (Bool_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HParticleTool::checkCropedLayer((HGeantKine*) G__int(libp->para[0]), (HMdcLayer*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::beta((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::betaToP((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::gamma((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::gammaToBeta((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::gammaToP((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::betagamma((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::betagammaToP((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) HParticleTool::kinEToMom((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) HParticleTool::kinEToMom((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) HParticleTool::kinEToMom());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) HParticleTool::momToKinE((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) HParticleTool::momToKinE((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) HParticleTool::momToKinE());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::dedxfunc((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::betaandgammafunc((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::ptyfunc((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::fcross((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 103, (long) HParticleTool::getIntersectionPoint(
(TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) HParticleTool::getIntersectionPoint((TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 13:
      G__letint(result7, 85, (long) HParticleTool::energyLossTF1(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12])));
      break;
   case 12:
      G__letint(result7, 85, (long) HParticleTool::energyLossTF1(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])));
      break;
   case 11:
      G__letint(result7, 85, (long) HParticleTool::energyLossTF1(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10])));
      break;
   case 10:
      G__letint(result7, 85, (long) HParticleTool::energyLossTF1(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 85, (long) HParticleTool::energyLossTF1(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) HParticleTool::energyLossTF1(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) HParticleTool::energyLossTF1(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) HParticleTool::energyLossTF1((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HParticleTool::energyLossTF1((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HParticleTool::energyLossTF1((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HParticleTool::energyLossTF1((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) HParticleTool::energyLossTF1((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) HParticleTool::energyLossTF1((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 13:
      G__letint(result7, 85, (long) HParticleTool::betaAndGammaTF1(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12])));
      break;
   case 12:
      G__letint(result7, 85, (long) HParticleTool::betaAndGammaTF1(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])));
      break;
   case 11:
      G__letint(result7, 85, (long) HParticleTool::betaAndGammaTF1(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10])));
      break;
   case 10:
      G__letint(result7, 85, (long) HParticleTool::betaAndGammaTF1(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 85, (long) HParticleTool::betaAndGammaTF1(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) HParticleTool::betaAndGammaTF1(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) HParticleTool::betaAndGammaTF1(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) HParticleTool::betaAndGammaTF1((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HParticleTool::betaAndGammaTF1((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HParticleTool::betaAndGammaTF1((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HParticleTool::betaAndGammaTF1((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) HParticleTool::betaAndGammaTF1((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) HParticleTool::betaAndGammaTF1((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      G__letint(result7, 85, (long) HParticleTool::makeCut(
(TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 85, (long) HParticleTool::makeCut(
(TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) HParticleTool::makeCut(
(TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) HParticleTool::makeCut(
(TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) HParticleTool::makeCut((TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HParticleTool::makeCut((TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      G__letint(result7, 85, (long) HParticleTool::ptyTF1(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) HParticleTool::ptyTF1(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) HParticleTool::ptyTF1(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) HParticleTool::ptyTF1((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HParticleTool::ptyTF1((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HParticleTool::ptyTF1((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 85, (long) HParticleTool::ptyTF1((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) HParticleTool::ptyTF1((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HParticleTool::ptyTF1((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 12:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid(
(Int_t) G__int(libp->para[0]), *(vector<Double_t>*) libp->para[1].ref
, *(vector<Double_t>*) libp->para[2].ref, *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 11:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid(
(Int_t) G__int(libp->para[0]), *(vector<Double_t>*) libp->para[1].ref
, *(vector<Double_t>*) libp->para[2].ref, *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 10:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid(
(Int_t) G__int(libp->para[0]), *(vector<Double_t>*) libp->para[1].ref
, *(vector<Double_t>*) libp->para[2].ref, *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 9:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid(
(Int_t) G__int(libp->para[0]), *(vector<Double_t>*) libp->para[1].ref
, *(vector<Double_t>*) libp->para[2].ref, *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 8:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid(
(Int_t) G__int(libp->para[0]), *(vector<Double_t>*) libp->para[1].ref
, *(vector<Double_t>*) libp->para[2].ref, *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 7:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid(
(Int_t) G__int(libp->para[0]), *(vector<Double_t>*) libp->para[1].ref
, *(vector<Double_t>*) libp->para[2].ref, *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 6:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid((Int_t) G__int(libp->para[0]), *(vector<Double_t>*) libp->para[1].ref
, *(vector<Double_t>*) libp->para[2].ref, *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), (Double_t) G__double(libp->para[5]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 5:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid((Int_t) G__int(libp->para[0]), *(vector<Double_t>*) libp->para[1].ref
, *(vector<Double_t>*) libp->para[2].ref, *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 4:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid((Int_t) G__int(libp->para[0]), *(vector<Double_t>*) libp->para[1].ref
, *(vector<Double_t>*) libp->para[2].ref, *((TString*) G__int(libp->para[3])));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid((Int_t) G__int(libp->para[0]), *(vector<Double_t>*) libp->para[1].ref
, *(vector<Double_t>*) libp->para[2].ref);
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 12:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), *((TString*) G__int(libp->para[11])));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 11:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 10:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 9:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 8:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 7:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 6:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 5:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Double_t) G__double(libp->para[4]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 4:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3])));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = HParticleTool::ptyGrid((Int_t) G__int(libp->para[0]));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      HParticleTool::drawPtyGrid(*(vector<TF1*>*) libp->para[0].ref, *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      HParticleTool::drawPtyGrid(*(vector<TF1*>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleTool::calcSegVector((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *(HGeomVector*) libp->para[4].ref, *(HGeomVector*) libp->para[5].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::calcRMS((Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::calcDeterminant(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::calculateMinimumDistanceStraightToPoint(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = HParticleTool::calculatePointOfClosestApproachStraightToPoint(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref);
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HParticleTool::calculateMinimumDistance(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref, *(HGeomVector*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = HParticleTool::calculatePointOfClosestApproach(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref, *(HGeomVector*) libp->para[3].ref);
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = HParticleTool::calculateCrossPoint(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref, *(HGeomVector*) libp->para[3].ref);
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HGeomVector* pobj;
         HGeomVector xobj = HParticleTool::calcVertexAnalytical(*(HGeomVector*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref
, *(HGeomVector*) libp->para[2].ref, *(HGeomVector*) libp->para[3].ref);
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) HParticleTool::findFirstHitInTof((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) HParticleTool::findFirstHitInTof((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) HParticleTool::findFirstHitShowerInTofino((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) HParticleTool::findFirstHitShowerInTofino((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) HParticleTool::findFirstHitShowerInRpc((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) HParticleTool::findFirstHitShowerInRpc((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 102, (double) HParticleTool::getInterpolatedValue((TH1*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) HParticleTool::getInterpolatedValue((TH1*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) HParticleTool::getValue((TH1*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) HParticleTool::getValue((TH1*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) HParticleTool::getValue((TH1*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getRichHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getTofHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getTofCluster((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getRpcCluster((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getShowerHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getMetaMatch((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getMdcTrkCand((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getMdcSeg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) HParticleTool::getMdcHit((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HParticleTool::getMdcHit((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) HParticleTool::getMdcClusInf((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HParticleTool::getMdcClusInf((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getMdcClusFit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getMdcClus((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getMdcWireFitSeg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getMdcCal1Seg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::getMdcCal1Cluster((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) HParticleTool::getMdcWireFitSeg((Int_t) G__int(libp->para[0]), *(vector<HMdcWireFit*>*) libp->para[1].ref
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) HParticleTool::getMdcWireFitSeg((Int_t) G__int(libp->para[0]), *(vector<HMdcWireFit*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) HParticleTool::getMdcCal1Seg((Int_t) G__int(libp->para[0]), *(vector<HMdcCal1*>*) libp->para[1].ref
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) HParticleTool::getMdcCal1Seg((Int_t) G__int(libp->para[0]), *(vector<HMdcCal1*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) HParticleTool::getMdcCal1Cluster((Int_t) G__int(libp->para[0]), *(vector<HMdcCal1*>*) libp->para[1].ref
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) HParticleTool::getMdcCal1Cluster((Int_t) G__int(libp->para[0]), *(vector<HMdcCal1*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::printSimTracks((HParticleCandSim*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      G__letint(result7, 103, (long) HParticleTool::getSimTracks(
(HParticleCandSim*) G__int(libp->para[0]), *(vector<Int_t>*) libp->para[1].ref
, *(vector<Int_t>*) libp->para[2].ref, *(vector<Int_t>*) libp->para[3].ref
, *(vector<Int_t>*) libp->para[4].ref, *(vector<Int_t>*) libp->para[5].ref
, *(vector<Int_t>*) libp->para[6].ref, *(vector<Int_t>*) libp->para[7].ref
, *(vector<Int_t>*) libp->para[8].ref, (Bool_t) G__int(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 103, (long) HParticleTool::getSimTracks(
(HParticleCandSim*) G__int(libp->para[0]), *(vector<Int_t>*) libp->para[1].ref
, *(vector<Int_t>*) libp->para[2].ref, *(vector<Int_t>*) libp->para[3].ref
, *(vector<Int_t>*) libp->para[4].ref, *(vector<Int_t>*) libp->para[5].ref
, *(vector<Int_t>*) libp->para[6].ref, *(vector<Int_t>*) libp->para[7].ref
, *(vector<Int_t>*) libp->para[8].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HParticleTool::setPairFlags(*(UInt_t*) G__UIntref(&libp->para[0]), (HParticleCand*) G__int(libp->para[1])
, (HParticleCand*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HParticleTool::setPairFlags(*(UInt_t*) G__UIntref(&libp->para[0]), (HParticleCand*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HParticleTool::setPairFlags(*(UInt_t*) G__UIntref(&libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::evalPairsFlags((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::isPairsFlagsBit((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::evalPairsFlags((UInt_t) G__int(libp->para[0]), (HParticleCand*) G__int(libp->para[1])
, (HParticleCand*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::evalPairsFlags((UInt_t) G__int(libp->para[0]), *(HParticlePair*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::evalPairsFlags(*(vector<UInt_t>*) libp->para[0].ref, *(HParticlePair*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::evalPairsFlags(*(vector<UInt_t>*) libp->para[0].ref, *(vector<Bool_t>*) libp->para[1].ref
, *(HParticlePair*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::isGoodClusterVertex((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::isGoodRecoVertex((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::isGoodSTART((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) HParticleTool::isNoVETO((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HParticleTool::isNoVETO((Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HParticleTool::isNoVETO());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HParticleTool::isNoSTART((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HParticleTool::isNoSTART((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HParticleTool::isNoSTART((Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HParticleTool::isNoSTART());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HParticleTool::isGoodSTARTVETO((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HParticleTool::isGoodSTARTVETO((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HParticleTool::isGoodSTARTVETO((Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HParticleTool::isGoodSTARTVETO());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) HParticleTool::isGoodSTARTMETA((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) HParticleTool::isGoodSTARTMETA((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) HParticleTool::isGoodSTARTMETA((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HParticleTool::isGoodSTARTMETA((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HParticleTool::isGoodSTARTMETA((Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HParticleTool::isGoodSTARTMETA());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::isNoSTARTPileUp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::isNoMETAPileUp((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleTool::isGoodTrigger((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) HParticleTool::getTofHitMult((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) HParticleTool::getTofHitMult((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) HParticleTool::getTofHitMult((Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) HParticleTool::getTofHitMult());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) HParticleTool::getRpcHitMult((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) HParticleTool::getRpcHitMult((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) HParticleTool::getRpcHitMult((Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) HParticleTool::getRpcHitMult());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTool::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleTool::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleTool::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleTool::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTool*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleTool::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleTool::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleTool::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_940_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleTool::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_940_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleTool* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleTool(*(HParticleTool*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTool));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleTool G__THParticleTool;
static int G__ParticleDict_940_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleTool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleTool*) (soff+(sizeof(HParticleTool)*i)))->~G__THParticleTool();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleTool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleTool*) (soff))->~G__THParticleTool();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_940_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleTool* dest = (HParticleTool*) G__getstructoffset();
   *dest = *(HParticleTool*) libp->para[0].ref;
   const HParticleTool& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pointers */
static int G__ParticleDict_963_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pointers* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pointers[n];
     } else {
       p = new((void*) gvp) pointers[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pointers;
     } else {
       p = new((void*) gvp) pointers;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_pointers));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_963_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pointers*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_963_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) pointers::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_963_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pointers::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_963_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) pointers::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_963_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      pointers::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_963_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((pointers*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_963_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pointers::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_963_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) pointers::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_963_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) pointers::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_963_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) pointers::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_963_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pointers* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pointers(*(pointers*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_pointers));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pointers G__Tpointers;
static int G__ParticleDict_963_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pointers*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pointers*) (soff+(sizeof(pointers)*i)))->~G__Tpointers();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pointers*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pointers*) (soff))->~G__Tpointers();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_963_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pointers* dest = (pointers*) G__getstructoffset();
   *dest = *(pointers*) libp->para[0].ref;
   const pointers& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* closetrack */
static int G__ParticleDict_964_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   closetrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new closetrack[n];
     } else {
       p = new((void*) gvp) closetrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new closetrack;
     } else {
       p = new((void*) gvp) closetrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_closetrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_964_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((closetrack*) G__getstructoffset())->print((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((closetrack*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_964_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) closetrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_964_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) closetrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_964_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) closetrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_964_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      closetrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_964_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((closetrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_964_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) closetrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_964_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) closetrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_964_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) closetrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_964_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) closetrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_964_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   closetrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new closetrack(*(closetrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_closetrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef closetrack G__Tclosetrack;
static int G__ParticleDict_964_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (closetrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((closetrack*) (soff+(sizeof(closetrack)*i)))->~G__Tclosetrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (closetrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((closetrack*) (soff))->~G__Tclosetrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_964_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   closetrack* dest = (closetrack*) G__getstructoffset();
   *dest = *(closetrack*) libp->para[0].ref;
   const closetrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* closeVec */
static int G__ParticleDict_965_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   closeVec* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new closeVec[n];
     } else {
       p = new((void*) gvp) closeVec[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new closeVec;
     } else {
       p = new((void*) gvp) closeVec;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_closeVec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_965_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((closeVec*) G__getstructoffset())->findTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_965_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((closeVec*) G__getstructoffset())->addTrack((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_965_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((closeVec*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_965_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) closeVec::cmpAngle(*(closetrack*) libp->para[0].ref, *(closetrack*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_965_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((closeVec*) G__getstructoffset())->sortAngle();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_965_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) closeVec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_965_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) closeVec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_965_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) closeVec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_965_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      closeVec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_965_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((closeVec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_965_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) closeVec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_965_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) closeVec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_965_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) closeVec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_965_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) closeVec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_965_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   closeVec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new closeVec(*(closeVec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_closeVec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef closeVec G__TcloseVec;
static int G__ParticleDict_965_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (closeVec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((closeVec*) (soff+(sizeof(closeVec)*i)))->~G__TcloseVec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (closeVec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((closeVec*) (soff))->~G__TcloseVec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_965_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   closeVec* dest = (closeVec*) G__getstructoffset();
   *dest = *(closeVec*) libp->para[0].ref;
   const closeVec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* trackinfo */
static int G__ParticleDict_970_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   trackinfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new trackinfo[n];
     } else {
       p = new((void*) gvp) trackinfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new trackinfo;
     } else {
       p = new((void*) gvp) trackinfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_trackinfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_970_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((trackinfo*) G__getstructoffset())->isGhostTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_970_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((trackinfo*) G__getstructoffset())->isInDetector((Particle::eDetBits) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_970_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((trackinfo*) G__getstructoffset())->print((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((trackinfo*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_970_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) trackinfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_970_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) trackinfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_970_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) trackinfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_970_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      trackinfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_970_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((trackinfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_970_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) trackinfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_970_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) trackinfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_970_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) trackinfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_970_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) trackinfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_970_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   trackinfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new trackinfo(*(trackinfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_trackinfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef trackinfo G__Ttrackinfo;
static int G__ParticleDict_970_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (trackinfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((trackinfo*) (soff+(sizeof(trackinfo)*i)))->~G__Ttrackinfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (trackinfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((trackinfo*) (soff))->~G__Ttrackinfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_970_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   trackinfo* dest = (trackinfo*) G__getstructoffset();
   *dest = *(trackinfo*) libp->para[0].ref;
   const trackinfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* tracksVec */
static int G__ParticleDict_971_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tracksVec* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tracksVec[n];
     } else {
       p = new((void*) gvp) tracksVec[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tracksVec;
     } else {
       p = new((void*) gvp) tracksVec;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_tracksVec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tracksVec* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new tracksVec(*(tracksVec*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) tracksVec(*(tracksVec*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_tracksVec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tracksVec*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((tracksVec*) G__getstructoffset())->findTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((tracksVec*) G__getstructoffset())->addTrack((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((tracksVec*) G__getstructoffset())->addTrack((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((tracksVec*) G__getstructoffset())->addTrack((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tracksVec*) G__getstructoffset())->calcWeights();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tracksVec*) G__getstructoffset())->addTrackWeight((trackinfo*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tracksVec*) G__getstructoffset())->addTrackWeight(*(tracksVec*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) tracksVec::cmpNdetWeightFlag((trackinfo*) G__int(libp->para[0]), (trackinfo*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) tracksVec::cmpWeightNdet((trackinfo*) G__int(libp->para[0]), (trackinfo*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tracksVec*) G__getstructoffset())->sortNdetWeightFlag();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tracksVec*) G__getstructoffset())->sortWeightNdet();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tracksVec*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tracksVec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tracksVec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tracksVec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tracksVec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tracksVec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tracksVec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tracksVec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tracksVec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_971_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tracksVec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tracksVec G__TtracksVec;
static int G__ParticleDict_971_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tracksVec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tracksVec*) (soff+(sizeof(tracksVec)*i)))->~G__TtracksVec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tracksVec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tracksVec*) (soff))->~G__TtracksVec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_971_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tracksVec* dest = (tracksVec*) G__getstructoffset();
   *dest = *(tracksVec*) libp->para[0].ref;
   const tracksVec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* mdc_trk */
static int G__ParticleDict_976_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mdc_trk* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mdc_trk[n];
     } else {
       p = new((void*) gvp) mdc_trk[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mdc_trk;
     } else {
       p = new((void*) gvp) mdc_trk;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_mdc_trk));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_976_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mdc_trk*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_976_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mdc_trk*) G__getstructoffset())->fillMeta((HMetaMatch2*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_976_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mdc_trk*) G__getstructoffset())->fill((HMdcTrkCand*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_976_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) mdc_trk::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_976_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mdc_trk::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_976_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) mdc_trk::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_976_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      mdc_trk::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_976_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mdc_trk*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_976_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mdc_trk::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_976_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) mdc_trk::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_976_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mdc_trk::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_976_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) mdc_trk::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_976_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   mdc_trk* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new mdc_trk(*(mdc_trk*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_mdc_trk));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef mdc_trk G__Tmdc_trk;
static int G__ParticleDict_976_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (mdc_trk*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((mdc_trk*) (soff+(sizeof(mdc_trk)*i)))->~G__Tmdc_trk();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (mdc_trk*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((mdc_trk*) (soff))->~G__Tmdc_trk();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_976_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mdc_trk* dest = (mdc_trk*) G__getstructoffset();
   *dest = *(mdc_trk*) libp->para[0].ref;
   const mdc_trk& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* mdc_seg */
static int G__ParticleDict_977_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mdc_seg* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mdc_seg[n];
     } else {
       p = new((void*) gvp) mdc_seg[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mdc_seg;
     } else {
       p = new((void*) gvp) mdc_seg;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_mdc_seg));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_977_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mdc_seg*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_977_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mdc_seg*) G__getstructoffset())->fill((HMdcSeg*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_977_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) mdc_seg::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_977_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mdc_seg::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_977_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) mdc_seg::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_977_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      mdc_seg::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_977_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mdc_seg*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_977_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mdc_seg::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_977_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) mdc_seg::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_977_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mdc_seg::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_977_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) mdc_seg::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_977_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   mdc_seg* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new mdc_seg(*(mdc_seg*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_mdc_seg));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef mdc_seg G__Tmdc_seg;
static int G__ParticleDict_977_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (mdc_seg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((mdc_seg*) (soff+(sizeof(mdc_seg)*i)))->~G__Tmdc_seg();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (mdc_seg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((mdc_seg*) (soff))->~G__Tmdc_seg();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_977_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mdc_seg* dest = (mdc_seg*) G__getstructoffset();
   *dest = *(mdc_seg*) libp->para[0].ref;
   const mdc_seg& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rpc_clst */
static int G__ParticleDict_978_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rpc_clst* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rpc_clst[n];
     } else {
       p = new((void*) gvp) rpc_clst[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rpc_clst;
     } else {
       p = new((void*) gvp) rpc_clst;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_rpc_clst));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rpc_clst*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rpc_clst*) G__getstructoffset())->setMetaModule((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rpc_clst*) G__getstructoffset())->setMetaCell((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rpc_clst*) G__getstructoffset())->unsetMetaModule((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rpc_clst*) G__getstructoffset())->unsetMetaCell((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((rpc_clst*) G__getstructoffset())->getMetaModule((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((rpc_clst*) G__getstructoffset())->getMetaCell((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((rpc_clst*) G__getstructoffset())->fillMeta((HMetaMatch2*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((rpc_clst*) G__getstructoffset())->fillMeta((HMetaMatch2*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rpc_clst*) G__getstructoffset())->fill((HRpcCluster*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) rpc_clst::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rpc_clst::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) rpc_clst::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rpc_clst::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rpc_clst*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rpc_clst::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rpc_clst::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rpc_clst::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_978_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rpc_clst::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_978_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rpc_clst* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rpc_clst(*(rpc_clst*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_rpc_clst));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rpc_clst G__Trpc_clst;
static int G__ParticleDict_978_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rpc_clst*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rpc_clst*) (soff+(sizeof(rpc_clst)*i)))->~G__Trpc_clst();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rpc_clst*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rpc_clst*) (soff))->~G__Trpc_clst();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_978_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rpc_clst* dest = (rpc_clst*) G__getstructoffset();
   *dest = *(rpc_clst*) libp->para[0].ref;
   const rpc_clst& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* tof_hit */
static int G__ParticleDict_979_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tof_hit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tof_hit[n];
     } else {
       p = new((void*) gvp) tof_hit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tof_hit;
     } else {
       p = new((void*) gvp) tof_hit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_tof_hit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tof_hit*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tof_hit*) G__getstructoffset())->setMetaModule((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tof_hit*) G__getstructoffset())->setMetaCell((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tof_hit*) G__getstructoffset())->unsetMetaModule((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tof_hit*) G__getstructoffset())->unsetMetaCell((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((tof_hit*) G__getstructoffset())->getMetaModule((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((tof_hit*) G__getstructoffset())->getMetaCell((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((tof_hit*) G__getstructoffset())->fillMeta((HMetaMatch2*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((tof_hit*) G__getstructoffset())->fillMeta((HMetaMatch2*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((tof_hit*) G__getstructoffset())->fillMeta((HMetaMatch2*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((tof_hit*) G__getstructoffset())->fill((HTofHit*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((tof_hit*) G__getstructoffset())->fill((HTofHit*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tof_hit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tof_hit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tof_hit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tof_hit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tof_hit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tof_hit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tof_hit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tof_hit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_979_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tof_hit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_979_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   tof_hit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new tof_hit(*(tof_hit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_tof_hit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tof_hit G__Ttof_hit;
static int G__ParticleDict_979_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tof_hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tof_hit*) (soff+(sizeof(tof_hit)*i)))->~G__Ttof_hit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tof_hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tof_hit*) (soff))->~G__Ttof_hit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_979_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tof_hit* dest = (tof_hit*) G__getstructoffset();
   *dest = *(tof_hit*) libp->para[0].ref;
   const tof_hit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* shower_hit */
static int G__ParticleDict_980_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   shower_hit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new shower_hit[n];
     } else {
       p = new((void*) gvp) shower_hit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new shower_hit;
     } else {
       p = new((void*) gvp) shower_hit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_shower_hit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_980_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((shower_hit*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_980_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((shower_hit*) G__getstructoffset())->fillMeta((HMetaMatch2*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (HRKTrackB*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((shower_hit*) G__getstructoffset())->fillMeta((HMetaMatch2*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((shower_hit*) G__getstructoffset())->fillMeta((HMetaMatch2*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_980_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((shower_hit*) G__getstructoffset())->fillMetaKal((HMetaMatch2*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (HKalTrack*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((shower_hit*) G__getstructoffset())->fillMetaKal((HMetaMatch2*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((shower_hit*) G__getstructoffset())->fillMetaKal((HMetaMatch2*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_980_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((shower_hit*) G__getstructoffset())->fill((HShowerHit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_980_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) shower_hit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_980_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) shower_hit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_980_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) shower_hit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_980_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      shower_hit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_980_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((shower_hit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_980_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) shower_hit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_980_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) shower_hit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_980_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) shower_hit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_980_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) shower_hit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_980_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   shower_hit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new shower_hit(*(shower_hit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_shower_hit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef shower_hit G__Tshower_hit;
static int G__ParticleDict_980_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (shower_hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((shower_hit*) (soff+(sizeof(shower_hit)*i)))->~G__Tshower_hit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (shower_hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((shower_hit*) (soff))->~G__Tshower_hit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_980_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   shower_hit* dest = (shower_hit*) G__getstructoffset();
   *dest = *(shower_hit*) libp->para[0].ref;
   const shower_hit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rich_hit */
static int G__ParticleDict_981_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rich_hit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rich_hit[n];
     } else {
       p = new((void*) gvp) rich_hit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rich_hit;
     } else {
       p = new((void*) gvp) rich_hit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_rich_hit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_981_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((rich_hit*) G__getstructoffset())->isNewRich());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_981_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rich_hit*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_981_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((rich_hit*) G__getstructoffset())->fillMeta((HMetaMatch2*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((rich_hit*) G__getstructoffset())->fillMeta((HMetaMatch2*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_981_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rich_hit*) G__getstructoffset())->fill((HRichHit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_981_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) rich_hit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_981_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rich_hit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_981_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) rich_hit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_981_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rich_hit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_981_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rich_hit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_981_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rich_hit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_981_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rich_hit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_981_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rich_hit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_981_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rich_hit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_981_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rich_hit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rich_hit(*(rich_hit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_rich_hit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rich_hit G__Trich_hit;
static int G__ParticleDict_981_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rich_hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rich_hit*) (soff+(sizeof(rich_hit)*i)))->~G__Trich_hit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rich_hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rich_hit*) (soff))->~G__Trich_hit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_981_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rich_hit* dest = (rich_hit*) G__getstructoffset();
   *dest = *(rich_hit*) libp->para[0].ref;
   const rich_hit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* spline_track */
static int G__ParticleDict_982_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   spline_track* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new spline_track[n];
     } else {
       p = new((void*) gvp) spline_track[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new spline_track;
     } else {
       p = new((void*) gvp) spline_track;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_spline_track));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_982_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((spline_track*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_982_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((spline_track*) G__getstructoffset())->fillMeta((HMetaMatch2*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_982_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((spline_track*) G__getstructoffset())->fill((HSplineTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_982_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) spline_track::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_982_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) spline_track::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_982_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) spline_track::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_982_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      spline_track::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_982_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((spline_track*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_982_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) spline_track::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_982_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) spline_track::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_982_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) spline_track::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_982_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) spline_track::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_982_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   spline_track* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new spline_track(*(spline_track*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_spline_track));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef spline_track G__Tspline_track;
static int G__ParticleDict_982_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (spline_track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((spline_track*) (soff+(sizeof(spline_track)*i)))->~G__Tspline_track();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (spline_track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((spline_track*) (soff))->~G__Tspline_track();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_982_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   spline_track* dest = (spline_track*) G__getstructoffset();
   *dest = *(spline_track*) libp->para[0].ref;
   const spline_track& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rk_track */
static int G__ParticleDict_983_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rk_track* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rk_track[n];
     } else {
       p = new((void*) gvp) rk_track[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rk_track;
     } else {
       p = new((void*) gvp) rk_track;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_rk_track));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_983_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rk_track*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_983_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((rk_track*) G__getstructoffset())->fillInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((rk_track*) G__getstructoffset())->fillInd();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_983_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rk_track*) G__getstructoffset())->fill((HRKTrackB*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_983_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) rk_track::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_983_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rk_track::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_983_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) rk_track::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_983_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rk_track::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_983_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rk_track*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_983_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rk_track::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_983_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rk_track::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_983_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rk_track::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_983_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rk_track::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_983_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rk_track* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rk_track(*(rk_track*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_rk_track));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rk_track G__Trk_track;
static int G__ParticleDict_983_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rk_track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rk_track*) (soff+(sizeof(rk_track)*i)))->~G__Trk_track();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rk_track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rk_track*) (soff))->~G__Trk_track();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_983_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rk_track* dest = (rk_track*) G__getstructoffset();
   *dest = *(rk_track*) libp->para[0].ref;
   const rk_track& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* kal_track */
static int G__ParticleDict_984_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   kal_track* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new kal_track[n];
     } else {
       p = new((void*) gvp) kal_track[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new kal_track;
     } else {
       p = new((void*) gvp) kal_track;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_kal_track));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_984_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((kal_track*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_984_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((kal_track*) G__getstructoffset())->fillInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((kal_track*) G__getstructoffset())->fillInd();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_984_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((kal_track*) G__getstructoffset())->fill((HKalTrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_984_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) kal_track::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_984_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) kal_track::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_984_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) kal_track::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_984_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      kal_track::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_984_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((kal_track*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_984_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) kal_track::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_984_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) kal_track::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_984_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) kal_track::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_984_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) kal_track::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_984_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   kal_track* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new kal_track(*(kal_track*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_kal_track));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef kal_track G__Tkal_track;
static int G__ParticleDict_984_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (kal_track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((kal_track*) (soff+(sizeof(kal_track)*i)))->~G__Tkal_track();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (kal_track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((kal_track*) (soff))->~G__Tkal_track();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_984_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   kal_track* dest = (kal_track*) G__getstructoffset();
   *dest = *(kal_track*) libp->para[0].ref;
   const kal_track& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* candidate */
static int G__ParticleDict_985_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   candidate* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new candidate[n];
     } else {
       p = new((void*) gvp) candidate[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new candidate;
     } else {
       p = new((void*) gvp) candidate;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_candidate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((candidate*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((candidate*) G__getstructoffset())->fillMeta((HMetaMatch2*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((candidate*) G__getstructoffset())->fillParticleCand((HParticleCand*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((candidate*) G__getstructoffset())->fillParticleCand((HParticleCand*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((candidate*) G__getstructoffset())->fillParticleCandSim((HParticleCandSim*) G__int(libp->para[0]), (HCategory*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((candidate*) G__getstructoffset())->fillParticleCandSim((HParticleCandSim*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((candidate*) G__getstructoffset())->deltaThetaSeg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((candidate*) G__getstructoffset())->deltaPhiSeg1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((candidate*) G__getstructoffset())->deltaThetaRk());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((candidate*) G__getstructoffset())->deltaPhiRk());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((candidate*) G__getstructoffset())->deltaThetaKal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((candidate*) G__getstructoffset())->deltaPhiKal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) candidate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) candidate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) candidate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      candidate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((candidate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) candidate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) candidate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) candidate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_985_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) candidate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_985_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   candidate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new candidate(*(candidate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_candidate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef candidate G__Tcandidate;
static int G__ParticleDict_985_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (candidate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((candidate*) (soff+(sizeof(candidate)*i)))->~G__Tcandidate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (candidate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((candidate*) (soff))->~G__Tcandidate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_985_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   candidate* dest = (candidate*) G__getstructoffset();
   *dest = *(candidate*) libp->para[0].ref;
   const candidate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleEvtChara */
static int G__ParticleDict_987_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleEvtChara* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleEvtChara((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HParticleEvtChara((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleEvtChara((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HParticleEvtChara((const Text_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleEvtChara[n];
       } else {
         p = new((void*) gvp) HParticleEvtChara[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleEvtChara;
       } else {
         p = new((void*) gvp) HParticleEvtChara;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtChara));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtChara*) G__getstructoffset())->setBeamTime(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtChara*) G__getstructoffset())->setGeneration(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleEvtChara*) G__getstructoffset())->setParameterFile(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtChara*) G__getstructoffset())->setEstimator(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtChara*) G__getstructoffset())->useEstimator(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtChara*) G__getstructoffset())->getCentralityClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtChara*) G__getstructoffset())->getCentralityClass(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HParticleEvtChara*) G__getstructoffset())->getCentralityClass((UInt_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtChara*) G__getstructoffset())->printCentralityClass();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtChara*) G__getstructoffset())->printCentralityClass(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtChara*) G__getstructoffset())->getNbins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtChara*) G__getstructoffset())->getNbins(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleEvtChara*) G__getstructoffset())->getCentralityPercentile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HParticleEvtChara*) G__getstructoffset())->getCentralityPercentile(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtChara*) G__getstructoffset())->getCentralityClass5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtChara*) G__getstructoffset())->getCentralityClass5(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtChara*) G__getstructoffset())->getCentralityClass10());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtChara*) G__getstructoffset())->getCentralityClass10(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleEvtChara*) G__getstructoffset())->getFWSumChargeSpec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleEvtChara*) G__getstructoffset())->calcFWSumChargeSpec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtChara*) G__getstructoffset())->setReferenceMean((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtChara*) G__getstructoffset())->setFWSumChargeSpec((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtChara*) G__getstructoffset())->setDirectivity((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtChara*) G__getstructoffset())->setRatioEtEz((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtChara*) G__getstructoffset())->setEt((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtChara*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleEvtChara*) G__getstructoffset())->print());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleEvtChara::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleEvtChara::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleEvtChara::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleEvtChara::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtChara*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleEvtChara::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleEvtChara::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleEvtChara::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_987_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleEvtChara::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleEvtChara G__THParticleEvtChara;
static int G__ParticleDict_987_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleEvtChara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleEvtChara*) (soff+(sizeof(HParticleEvtChara)*i)))->~G__THParticleEvtChara();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleEvtChara*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleEvtChara*) (soff))->~G__THParticleEvtChara();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCandFillerPar */
static int G__ParticleDict_1014_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCandFillerPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCandFillerPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HParticleCandFillerPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCandFillerPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HParticleCandFillerPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCandFillerPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HParticleCandFillerPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleCandFillerPar[n];
       } else {
         p = new((void*) gvp) HParticleCandFillerPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleCandFillerPar;
       } else {
         p = new((void*) gvp) HParticleCandFillerPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFillerPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFillerPar*) G__getstructoffset())->setPhiLow((Int_t) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFillerPar*) G__getstructoffset())->setPhiUp((Int_t) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFillerPar*) G__getstructoffset())->setThetaLow((Int_t) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFillerPar*) G__getstructoffset())->setThetaUp((Int_t) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFillerPar*) G__getstructoffset())->setZRichCenter((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCandFillerPar*) G__getstructoffset())->getPhiLow((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCandFillerPar*) G__getstructoffset())->getPhiUp((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCandFillerPar*) G__getstructoffset())->getThetaLow((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCandFillerPar*) G__getstructoffset())->getThetaUp((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCandFillerPar*) G__getstructoffset())->getPhiLow((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCandFillerPar*) G__getstructoffset())->getPhiUp((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCandFillerPar*) G__getstructoffset())->getThetaLow((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCandFillerPar*) G__getstructoffset())->getThetaUp((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCandFillerPar*) G__getstructoffset())->getRichCorr((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleCandFillerPar*) G__getstructoffset())->getZRichCenter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleCandFillerPar*) G__getstructoffset())->acceptPhiTheta((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFillerPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCandFillerPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCandFillerPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCandFillerPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCandFillerPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFillerPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCandFillerPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCandFillerPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCandFillerPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1014_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCandFillerPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1014_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCandFillerPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCandFillerPar(*(HParticleCandFillerPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFillerPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCandFillerPar G__THParticleCandFillerPar;
static int G__ParticleDict_1014_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCandFillerPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCandFillerPar*) (soff+(sizeof(HParticleCandFillerPar)*i)))->~G__THParticleCandFillerPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCandFillerPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCandFillerPar*) (soff))->~G__THParticleCandFillerPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1014_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCandFillerPar* dest = (HParticleCandFillerPar*) G__getstructoffset();
   *dest = *(HParticleCandFillerPar*) libp->para[0].ref;
   const HParticleCandFillerPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCandFiller */
static int G__ParticleDict_1015_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCandFiller* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCandFiller((Option_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HParticleCandFiller((Option_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleCandFiller[n];
       } else {
         p = new((void*) gvp) HParticleCandFiller[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleCandFiller;
       } else {
         p = new((void*) gvp) HParticleCandFiller;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFiller));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCandFiller* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCandFiller(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HParticleCandFiller(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCandFiller((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HParticleCandFiller((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFiller));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFiller*) G__getstructoffset())->setMinWireGoodTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFiller*) G__getstructoffset())->setScaleGoodTrack((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFiller*) G__getstructoffset())->setScaleGhostTrack((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFiller*) G__getstructoffset())->setAngleCloseTrack((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFiller*) G__getstructoffset())->setMomSwitch((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFiller*) G__getstructoffset())->setDoAlignRich((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFiller*) G__getstructoffset())->setDoRichVertexCorr((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFiller*) G__getstructoffset())->setDoMETAQANorm((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFiller*) G__getstructoffset())->setDoMomentumCorr((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFiller*) G__getstructoffset())->setDoPathLengthCorr((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFiller*) G__getstructoffset())->setDoGeantAcceptance((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFiller*) G__getstructoffset())->setFillMdc((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCandFiller*) G__getstructoffset())->setSortMeta((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCandFiller*) G__getstructoffset())->setSortMeta();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCandFiller::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCandFiller::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCandFiller::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCandFiller::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCandFiller*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCandFiller::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCandFiller::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCandFiller::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1015_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCandFiller::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCandFiller G__THParticleCandFiller;
static int G__ParticleDict_1015_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCandFiller*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCandFiller*) (soff+(sizeof(HParticleCandFiller)*i)))->~G__THParticleCandFiller();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCandFiller*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCandFiller*) (soff))->~G__THParticleCandFiller();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleTrackSorter */
static int G__ParticleDict_1025_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleTrackSorter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleTrackSorter[n];
     } else {
       p = new((void*) gvp) HParticleTrackSorter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleTrackSorter;
     } else {
       p = new((void*) gvp) HParticleTrackSorter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleTrackSorter* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleTrackSorter(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) HParticleTrackSorter(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleTrackSorter*) G__getstructoffset())->init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleTrackSorter*) G__getstructoffset())->finalize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setDebug((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setDebug();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setIgnoreRICH((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setIgnoreRICH();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setIgnoreInnerMDC((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setIgnoreInnerMDC();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setIgnoreOuterMDC((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setIgnoreOuterMDC();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setIgnoreMETA((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setIgnoreMETA();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setIgnorePreviousIndex((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setIgnorePreviousIndex();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setUseYMatching((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setUseYMatching();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setUseYMatchingScaling((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setUseYMatchingScaling();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setUseBeta((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setUseBeta();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setUseFakeRejection((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setUseFakeRejection();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setUseMETAQA((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setUseMETAQA();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleTrackSorter::setPrintLevel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleTrackSorter::setUserSort((Bool_t (*)(candidateSort*, candidateSort*)) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      HParticleTrackSorter::setRICHMatching((HParticleTrackSorter::ERichMatch) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      HParticleTrackSorter::setRICHMatching((HParticleTrackSorter::ERichMatch) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setMetaBoundary((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setMetaBoundary();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setBetaLeptonCut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setBetaLeptonCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setMETAQACut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setMETAQACut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HParticleTrackSorter::setTOFMAXCut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HParticleTrackSorter::setTOFMAXCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTrackSorter::getMetaBoundary());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleTrackSorter::getBetaLeptonCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HParticleTrackSorter*) G__getstructoffset())->resetFlags((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HParticleTrackSorter*) G__getstructoffset())->resetFlags((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HParticleTrackSorter*) G__getstructoffset())->resetFlags((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HParticleTrackSorter*) G__getstructoffset())->resetFlags((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleTrackSorter*) G__getstructoffset())->resetFlags();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleTrackSorter*) G__getstructoffset())->cleanUp((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleTrackSorter*) G__getstructoffset())->cleanUp();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleTrackSorter*) G__getstructoffset())->fill((Bool_t (*)(HParticleCand*)) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleTrackSorter*) G__getstructoffset())->backupFlags((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleTrackSorter*) G__getstructoffset())->backupFlags();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HParticleTrackSorter*) G__getstructoffset())->restoreFlags((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HParticleTrackSorter*) G__getstructoffset())->restoreFlags());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTrackSorter*) G__getstructoffset())->backupSetup();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleTrackSorter*) G__getstructoffset())->restoreSetup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleTrackSorter*) G__getstructoffset())->selectBest((HParticleTrackSorter::ESwitch) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) HParticleTrackSorter::selectLeptons((HParticleCand*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HParticleTrackSorter::selectLeptons());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) HParticleTrackSorter::selectHadrons((HParticleCand*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HParticleTrackSorter::selectHadrons());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) HParticleTrackSorter::selectLeptonsNoOuterFit((HParticleCand*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HParticleTrackSorter::selectLeptonsNoOuterFit());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) HParticleTrackSorter::selectHadronsNoOuterFit((HParticleCand*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HParticleTrackSorter::selectHadronsNoOuterFit());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<candidateSort*>& obj = ((HParticleTrackSorter*) G__getstructoffset())->getCandidates();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTrackSorter*) G__getstructoffset())->printEvent(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTrackSorter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleTrackSorter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleTrackSorter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleTrackSorter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTrackSorter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleTrackSorter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleTrackSorter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleTrackSorter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1025_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleTrackSorter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1025_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleTrackSorter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleTrackSorter(*(HParticleTrackSorter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleTrackSorter G__THParticleTrackSorter;
static int G__ParticleDict_1025_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleTrackSorter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleTrackSorter*) (soff+(sizeof(HParticleTrackSorter)*i)))->~G__THParticleTrackSorter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleTrackSorter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleTrackSorter*) (soff))->~G__THParticleTrackSorter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1025_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleTrackSorter* dest = (HParticleTrackSorter*) G__getstructoffset();
   *dest = *(HParticleTrackSorter*) libp->para[0].ref;
   const HParticleTrackSorter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleTrackCleaner */
static int G__ParticleDict_1033_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleTrackCleaner* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleTrackCleaner[n];
     } else {
       p = new((void*) gvp) HParticleTrackCleaner[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleTrackCleaner;
     } else {
       p = new((void*) gvp) HParticleTrackCleaner;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackCleaner));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleTrackCleaner* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleTrackCleaner((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HParticleTrackCleaner((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackCleaner));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleTrackCleaner::setDebug();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleTrackCleaner::setPrintLevel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTrackCleaner*) G__getstructoffset())->setUserSelectionLeptons((Bool_t (*)(HParticleCand*)) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTrackCleaner*) G__getstructoffset())->setUserSelectionHadrons((Bool_t (*)(HParticleCand*)) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTrackCleaner*) G__getstructoffset())->setUserSort((Bool_t (*)(candidateSort*, candidateSort*)) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTrackCleaner*) G__getstructoffset())->setSortType((HParticleTrackSorter::ESwitch) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HParticleTrackSorter& obj = ((HParticleTrackCleaner*) G__getstructoffset())->getSorter();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTrackCleaner::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleTrackCleaner::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleTrackCleaner::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleTrackCleaner::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTrackCleaner*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleTrackCleaner::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleTrackCleaner::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleTrackCleaner::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1033_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleTrackCleaner::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleTrackCleaner G__THParticleTrackCleaner;
static int G__ParticleDict_1033_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleTrackCleaner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleTrackCleaner*) (soff+(sizeof(HParticleTrackCleaner)*i)))->~G__THParticleTrackCleaner();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleTrackCleaner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleTrackCleaner*) (soff))->~G__THParticleTrackCleaner();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleRunningMeanI */
static int G__ParticleDict_1034_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleRunningMeanI* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleRunningMeanI[n];
     } else {
       p = new((void*) gvp) HParticleRunningMeanI[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleRunningMeanI;
     } else {
       p = new((void*) gvp) HParticleRunningMeanI;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 105, (long) ((HParticleRunningMeanI*) G__getstructoffset())->initParam((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4]), (const Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((HParticleRunningMeanI*) G__getstructoffset())->initParam((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((HParticleRunningMeanI*) G__getstructoffset())->initParam((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticleRunningMeanI*) G__getstructoffset())->initParam((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticleRunningMeanI*) G__getstructoffset())->initParam((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HParticleRunningMeanI*) G__getstructoffset())->initParam((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((HParticleRunningMeanI*) G__getstructoffset())->initParam());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleRunningMeanI*) G__getstructoffset())->reset((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleRunningMeanI*) G__getstructoffset())->reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleRunningMeanI*) G__getstructoffset())->calcMean((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleRunningMeanI*) G__getstructoffset())->getMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleRunningMeanI*) G__getstructoffset())->getSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleRunningMeanI*) G__getstructoffset())->getValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleRunningMeanI*) G__getstructoffset())->getMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleRunningMeanI*) G__getstructoffset())->getMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleRunningMeanI*) G__getstructoffset())->getMaxMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleRunningMeanI*) G__getstructoffset())->getNMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleRunningMeanI*) G__getstructoffset())->getNMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleRunningMeanI*) G__getstructoffset())->getMeanScaleToMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleRunningMeanI::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleRunningMeanI::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleRunningMeanI::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleRunningMeanI::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleRunningMeanI*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleRunningMeanI::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleRunningMeanI::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleRunningMeanI::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1034_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleRunningMeanI::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1034_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleRunningMeanI* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleRunningMeanI(*(HParticleRunningMeanI*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleRunningMeanI G__THParticleRunningMeanI;
static int G__ParticleDict_1034_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleRunningMeanI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleRunningMeanI*) (soff+(sizeof(HParticleRunningMeanI)*i)))->~G__THParticleRunningMeanI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleRunningMeanI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleRunningMeanI*) (soff))->~G__THParticleRunningMeanI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1034_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleRunningMeanI* dest = (HParticleRunningMeanI*) G__getstructoffset();
   *dest = *(HParticleRunningMeanI*) libp->para[0].ref;
   const HParticleRunningMeanI& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleEvtInfoFiller */
static int G__ParticleDict_1037_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleEvtInfoFiller* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleEvtInfoFiller(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
     } else {
       p = new((void*) gvp) HParticleEvtInfoFiller(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleEvtInfoFiller((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HParticleEvtInfoFiller((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleEvtInfoFiller((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HParticleEvtInfoFiller((const Text_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleEvtInfoFiller[n];
       } else {
         p = new((void*) gvp) HParticleEvtInfoFiller[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleEvtInfoFiller;
       } else {
         p = new((void*) gvp) HParticleEvtInfoFiller;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfoFiller));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setTofCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setVertexCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setMetaPileUpCut((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setMdcPileupCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setMeanMult(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setMeanLepMult(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setNoVETOCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setNoVETOCut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setNoVETOCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setSTARTVETOCUT((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setSTARTVETOCUT((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setSTARTVETOCUT((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setSTARTVETOCUT();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setSTARTMETACUT((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setSTARTMETACUT((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setSTARTMETACUT((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setSTARTMETACUT((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleEvtInfoFiller*) G__getstructoffset())->setSTARTMETACUT();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleEvtInfoFiller::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleEvtInfoFiller::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleEvtInfoFiller::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleEvtInfoFiller::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleEvtInfoFiller*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleEvtInfoFiller::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleEvtInfoFiller::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleEvtInfoFiller::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1037_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleEvtInfoFiller::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleEvtInfoFiller G__THParticleEvtInfoFiller;
static int G__ParticleDict_1037_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleEvtInfoFiller*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleEvtInfoFiller*) (soff+(sizeof(HParticleEvtInfoFiller)*i)))->~G__THParticleEvtInfoFiller();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleEvtInfoFiller*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleEvtInfoFiller*) (soff))->~G__THParticleEvtInfoFiller();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleContFact */
static int G__ParticleDict_1040_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleContFact[n];
     } else {
       p = new((void*) gvp) HParticleContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleContFact;
     } else {
       p = new((void*) gvp) HParticleContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1040_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1040_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1040_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1040_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1040_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1040_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1040_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1040_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1040_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1040_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleContFact* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleContFact(*(HParticleContFact*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleContFact G__THParticleContFact;
static int G__ParticleDict_1040_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleContFact*) (soff+(sizeof(HParticleContFact)*i)))->~G__THParticleContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleContFact*) (soff))->~G__THParticleContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1040_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleContFact* dest = (HParticleContFact*) G__getstructoffset();
   *dest = *(HParticleContFact*) libp->para[0].ref;
   const HParticleContFact& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleStart2HitF */
static int G__ParticleDict_1041_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleStart2HitF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleStart2HitF[n];
     } else {
       p = new((void*) gvp) HParticleStart2HitF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleStart2HitF;
     } else {
       p = new((void*) gvp) HParticleStart2HitF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleStart2HitF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1041_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleStart2HitF* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleStart2HitF(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HParticleStart2HitF(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleStart2HitF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HParticleStart2HitF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleStart2HitF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1041_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleStart2HitF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1041_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleStart2HitF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1041_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleStart2HitF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1041_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleStart2HitF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1041_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleStart2HitF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1041_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleStart2HitF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1041_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleStart2HitF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1041_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleStart2HitF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1041_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleStart2HitF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleStart2HitF G__THParticleStart2HitF;
static int G__ParticleDict_1041_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleStart2HitF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleStart2HitF*) (soff+(sizeof(HParticleStart2HitF)*i)))->~G__THParticleStart2HitF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleStart2HitF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleStart2HitF*) (soff))->~G__THParticleStart2HitF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleTree */
static int G__ParticleDict_1042_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleTree((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HParticleTree((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleTree((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HParticleTree((const Text_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleTree[n];
       } else {
         p = new((void*) gvp) HParticleTree[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleTree;
       } else {
         p = new((void*) gvp) HParticleTree;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTree*) G__getstructoffset())->setSkipEmptyEvents((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTree*) G__getstructoffset())->setSkipTracks((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HParticleTree*) G__getstructoffset())->setOutputFile(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HParticleTree*) G__getstructoffset())->setOutputFile(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      ((HParticleTree*) G__getstructoffset())->setOutputFile(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((HParticleTree*) G__getstructoffset())->setOutputFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleTree*) G__getstructoffset())->setOutputFile();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleTree*) G__getstructoffset())->setOutputFileSuffix(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleTree*) G__getstructoffset())->setOutputFileSuffix();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleTree*) G__getstructoffset())->setOutputDir(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleTree*) G__getstructoffset())->setOutputDir();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HParticleTree*) G__getstructoffset())->setEventStructure((Int_t) G__int(libp->para[0]), (Cat_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HParticleTree*) G__getstructoffset())->setEventStructure((Int_t) G__int(libp->para[0]), (Cat_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleTree*) G__getstructoffset())->setIgnoreRICH((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleTree*) G__getstructoffset())->setIgnoreRICH();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleTree*) G__getstructoffset())->setIgnoreInnerMDC((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleTree*) G__getstructoffset())->setIgnoreInnerMDC();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleTree*) G__getstructoffset())->setIgnoreOuterMDC((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleTree*) G__getstructoffset())->setIgnoreOuterMDC();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleTree*) G__getstructoffset())->setIgnoreMETA((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleTree*) G__getstructoffset())->setIgnoreMETA();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleTree*) G__getstructoffset())->setIgnorePreviousIndex((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleTree*) G__getstructoffset())->setIgnorePreviousIndex();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HParticleTree*) G__getstructoffset())->setRICHMatching((HParticleTrackSorter::ERichMatch) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HParticleTree*) G__getstructoffset())->setRICHMatching((HParticleTrackSorter::ERichMatch) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTree*) G__getstructoffset())->setUserSelectionEvent((Bool_t (*)(TObjArray*)) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTree*) G__getstructoffset())->setUserSelectionLeptons((Bool_t (*)(HParticleCand*)) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTree*) G__getstructoffset())->setUserSelectionHadrons((Bool_t (*)(HParticleCand*)) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTree*) G__getstructoffset())->setUserkeepTrack((Bool_t (*)(HParticleCand*)) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleTree::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleTree::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleTree::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleTree::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleTree*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleTree::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleTree::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleTree::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1042_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleTree::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleTree G__THParticleTree;
static int G__ParticleDict_1042_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleTree*) (soff+(sizeof(HParticleTree)*i)))->~G__THParticleTree();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleTree*) (soff))->~G__THParticleTree();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleAngleCor */
static int G__ParticleDict_1078_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleAngleCor* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleAngleCor[n];
     } else {
       p = new((void*) gvp) HParticleAngleCor[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleAngleCor;
     } else {
       p = new((void*) gvp) HParticleAngleCor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleAngleCor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleAngleCor*) G__getstructoffset())->initParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleAngleCor*) G__getstructoffset())->resetMeanVertex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleAngleCor*) G__getstructoffset())->recalcEmission(
(const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleAngleCor*) G__getstructoffset())->recalcEmission((HParticleCand*) G__int(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleAngleCor*) G__getstructoffset())->recalcAngles((HParticleCand*) G__int(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleAngleCor*) G__getstructoffset())->recalcSetAngles((HParticleCand*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleAngleCor*) G__getstructoffset())->recalcSetEmission((HParticleCand*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleAngleCor::alignRichRing((const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleAngleCor::alignRichRing((HParticleCand*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleAngleCor::realignRichRing((HParticleCand*) G__int(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticleAngleCor::realignRichRing((HParticleCand*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HParticleAngleCor::matchRingTrack((HParticleCand*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleAngleCor*) G__getstructoffset())->calcSegVector((const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, *(HGeomVector*) libp->para[4].ref, *(HGeomVector*) libp->para[5].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleAngleCor*) G__getstructoffset())->setMeanZTarget((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleAngleCor*) G__getstructoffset())->setShield((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleAngleCor*) G__getstructoffset())->setDefaults(*((const TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleAngleCor*) G__getstructoffset())->setMaxAverage((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleAngleCor*) G__getstructoffset())->setUseMeanXYVertex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleAngleCor*) G__getstructoffset())->setUseEventXYVertex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleAngleCor*) G__getstructoffset())->setDoWarning((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleAngleCor*) G__getstructoffset())->getMeanXYVertex(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleAngleCor*) G__getstructoffset())->getMeanZTarget());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleAngleCor*) G__getstructoffset())->setVertexType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleAngleCor*) G__getstructoffset())->setVertexType();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleAngleCor*) G__getstructoffset())->getVertexType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HParticleAngleCor*) G__getstructoffset())->getGlobalVertex((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HParticleAngleCor*) G__getstructoffset())->getGlobalVertex((Int_t) G__int(libp->para[0]));
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         HGeomVector* pobj;
         HGeomVector xobj = ((HParticleAngleCor*) G__getstructoffset())->getGlobalVertex();
         pobj = new HGeomVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleAngleCor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleAngleCor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleAngleCor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleAngleCor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleAngleCor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleAngleCor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleAngleCor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleAngleCor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1078_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleAngleCor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1078_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleAngleCor* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleAngleCor(*(HParticleAngleCor*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleAngleCor));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleAngleCor G__THParticleAngleCor;
static int G__ParticleDict_1078_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleAngleCor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleAngleCor*) (soff+(sizeof(HParticleAngleCor)*i)))->~G__THParticleAngleCor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleAngleCor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleAngleCor*) (soff))->~G__THParticleAngleCor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1078_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleAngleCor* dest = (HParticleAngleCor*) G__getstructoffset();
   *dest = *(HParticleAngleCor*) libp->para[0].ref;
   const HParticleAngleCor& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleGeantDecay */
static int G__ParticleDict_1080_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleGeantDecay* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleGeantDecay[n];
     } else {
       p = new((void*) gvp) HParticleGeantDecay[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleGeantDecay;
     } else {
       p = new((void*) gvp) HParticleGeantDecay;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleGeantDecay*) G__getstructoffset())->getMotherID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeantDecay*) G__getstructoffset())->getMother());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HGeantKine*>& obj = ((HParticleGeantDecay*) G__getstructoffset())->getDaughters();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HParticleGeantDecay*) G__getstructoffset())->getNDaughters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeantDecay*) G__getstructoffset())->getDaughter((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleGeantDecay*) G__getstructoffset())->isDaughterPID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleGeantDecay*) G__getstructoffset())->isDaughterPID(*(vector<Int_t>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HParticleGeantDecay*) G__getstructoffset())->getDecayVertex();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleGeantDecay*) G__getstructoffset())->getMedium());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleGeantDecay*) G__getstructoffset())->getMechanism());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleGeantDecay*) G__getstructoffset())->getGeneration());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeantDecay*) G__getstructoffset())->getMotherDecay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleGeantDecay*) G__getstructoffset())->getGeneratorInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleGeantDecay*) G__getstructoffset())->getGeneratorInfo1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleGeantDecay*) G__getstructoffset())->getGeneratorInfo2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantDecay*) G__getstructoffset())->setGeneration((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantDecay*) G__getstructoffset())->setDecayVertex((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantDecay*) G__getstructoffset())->setDecayVertex(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantDecay*) G__getstructoffset())->setMotherDecay((HParticleGeantDecay*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantDecay*) G__getstructoffset())->setMother((HGeantKine*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantDecay*) G__getstructoffset())->addDaughter((HGeantKine*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantDecay*) G__getstructoffset())->setDaughters(*(vector<HGeantKine*>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantDecay*) G__getstructoffset())->sortDaughters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleGeantDecay*) G__getstructoffset())->getDistFromVertex((HGeomVector*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleGeantDecay*) G__getstructoffset())->getDistFromVertex());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleGeantDecay*) G__getstructoffset())->isExternalSource());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantDecay*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleGeantDecay*) G__getstructoffset())->isDaughter((HGeantKine*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleGeantDecay*) G__getstructoffset())->isDaughter(*((vector<HGeantKine*>*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantDecay*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleGeantDecay::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleGeantDecay::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleGeantDecay::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleGeantDecay::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantDecay*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleGeantDecay::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleGeantDecay::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleGeantDecay::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1080_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleGeantDecay::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1080_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleGeantDecay* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleGeantDecay(*(HParticleGeantDecay*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleGeantDecay G__THParticleGeantDecay;
static int G__ParticleDict_1080_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleGeantDecay*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleGeantDecay*) (soff+(sizeof(HParticleGeantDecay)*i)))->~G__THParticleGeantDecay();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleGeantDecay*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleGeantDecay*) (soff))->~G__THParticleGeantDecay();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1080_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleGeantDecay* dest = (HParticleGeantDecay*) G__getstructoffset();
   *dest = *(HParticleGeantDecay*) libp->para[0].ref;
   const HParticleGeantDecay& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleGeant */
static int G__ParticleDict_1081_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleGeant* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleGeant[n];
     } else {
       p = new((void*) gvp) HParticleGeant[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleGeant;
     } else {
       p = new((void*) gvp) HParticleGeant;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeant));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeant*) G__getstructoffset())->setParticle((HGeantKine*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeant*) G__getstructoffset())->getParticle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeant*) G__getstructoffset())->getMother());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeant*) G__getstructoffset())->setMother((HGeantKine*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleGeant*) G__getstructoffset())->getID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HParticleGeant*) G__getstructoffset())->getDecayVertex();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleGeant*) G__getstructoffset())->getMedium());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleGeant*) G__getstructoffset())->getMechanism());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleGeant*) G__getstructoffset())->getGeneration());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeant*) G__getstructoffset())->getMotherDecay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeant*) G__getstructoffset())->setGeneration((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeant*) G__getstructoffset())->setDecayVertex((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeant*) G__getstructoffset())->setDecayVertex(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeant*) G__getstructoffset())->setMotherDecay((HParticleGeantDecay*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleGeant*) G__getstructoffset())->getDistFromVertex((HGeomVector*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleGeant*) G__getstructoffset())->getDistFromVertex());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HParticleCandSim*>* pobj;
         vector<HParticleCandSim*> xobj = ((HParticleGeant*) G__getstructoffset())->getRecoCand();
         pobj = new vector<HParticleCandSim*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeant*) G__getstructoffset())->getRecoCand((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeant*) G__getstructoffset())->addRecoCand((HParticleCandSim*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HParticleGeant*) G__getstructoffset())->getNRecoCand());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HParticleGeant*) G__getstructoffset())->getNRecoUsedCand());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleGeant*) G__getstructoffset())->getNGhosts((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleGeant*) G__getstructoffset())->getNGhosts());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((HParticleGeant*) G__getstructoffset())->getNTrueReco((Bool_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((HParticleGeant*) G__getstructoffset())->getNTrueReco((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleGeant*) G__getstructoffset())->getNTrueReco());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleGeant*) G__getstructoffset())->isInAcceptance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeant*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeant*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleGeant::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleGeant::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleGeant::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleGeant::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeant*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleGeant::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleGeant::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleGeant::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1081_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleGeant::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1081_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleGeant* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleGeant(*(HParticleGeant*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeant));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleGeant G__THParticleGeant;
static int G__ParticleDict_1081_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleGeant*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleGeant*) (soff+(sizeof(HParticleGeant)*i)))->~G__THParticleGeant();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleGeant*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleGeant*) (soff))->~G__THParticleGeant();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1081_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleGeant* dest = (HParticleGeant*) G__getstructoffset();
   *dest = *(HParticleGeant*) libp->para[0].ref;
   const HParticleGeant& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleGeantEvent */
static int G__ParticleDict_1086_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleGeantEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleGeantEvent[n];
     } else {
       p = new((void*) gvp) HParticleGeantEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleGeantEvent;
     } else {
       p = new((void*) gvp) HParticleGeantEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantEvent*) G__getstructoffset())->setConvertExtThermal((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantEvent*) G__getstructoffset())->setCorrectGenInfo((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HGeantKine*>& obj = ((HParticleGeantEvent*) G__getstructoffset())->getExternalParticles();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HParticleGeantEvent*) G__getstructoffset())->getEventVertex();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HParticleGeantDecay*>& obj = ((HParticleGeantEvent*) G__getstructoffset())->getDecays();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HParticleGeant*>& obj = ((HParticleGeantEvent*) G__getstructoffset())->getParticles();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleGeantEvent*) G__getstructoffset())->getBeamEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleGeantEvent*) G__getstructoffset())->getEventPlane());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleGeantEvent*) G__getstructoffset())->getImpactParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantEvent*) G__getstructoffset())->nextEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeantEvent*) G__getstructoffset())->isMotherOfDecay((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeantEvent*) G__getstructoffset())->isMotherOfDecay((HGeantKine*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeantEvent*) G__getstructoffset())->isDaughterOfDecay((HGeantKine*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeantEvent*) G__getstructoffset())->isDaughterOfDecay((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isDecay(*(vector<HParticleGeantDecay*>*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isDecay(*(vector<HParticleGeantDecay*>*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isDecay(*(vector<HParticleGeantDecay*>*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isDecay(*(vector<HParticleGeantDecay*>*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isDecay(*(vector<HParticleGeantDecay*>*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isParticle(*(vector<HGeantKine*>*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isParticle(*(vector<HGeantKine*>*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isParticle(*(vector<HGeantKine*>*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isParticle(*(vector<HGeantKine*>*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isParticle(*(vector<HGeantKine*>*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isParticle(*(vector<HGeantKine*>*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isParticle(*(vector<HParticleGeant*>*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isParticle(*(vector<HParticleGeant*>*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isParticle(*(vector<HParticleGeant*>*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isParticle(*(vector<HParticleGeant*>*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isParticle(*(vector<HParticleGeant*>*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HParticleGeantEvent*) G__getstructoffset())->isParticle(*(vector<HParticleGeant*>*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeantEvent*) G__getstructoffset())->getParticle((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeantEvent*) G__getstructoffset())->getParticle((HGeantKine*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeantEvent*) G__getstructoffset())->getKine((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 104, (long) ((HParticleGeantEvent*) G__getstructoffset())->getMultiplicity((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 104, (long) ((HParticleGeantEvent*) G__getstructoffset())->getMultiplicity((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 104, (long) ((HParticleGeantEvent*) G__getstructoffset())->getMultiplicity((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 104, (long) ((HParticleGeantEvent*) G__getstructoffset())->getMultiplicity((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((HParticleGeantEvent*) G__getstructoffset())->getMultiplicity((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleGeantEvent*) G__getstructoffset())->getMultiplicity());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleGeantEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleGeantEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleGeantEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleGeantEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleGeantEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleGeantEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleGeantEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1086_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleGeantEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1086_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleGeantEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleGeantEvent(*(HParticleGeantEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleGeantEvent G__THParticleGeantEvent;
static int G__ParticleDict_1086_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleGeantEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleGeantEvent*) (soff+(sizeof(HParticleGeantEvent)*i)))->~G__THParticleGeantEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleGeantEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleGeantEvent*) (soff))->~G__THParticleGeantEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1086_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleGeantEvent* dest = (HParticleGeantEvent*) G__getstructoffset();
   *dest = *(HParticleGeantEvent*) libp->para[0].ref;
   const HParticleGeantEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleGeantPair */
static int G__ParticleDict_1111_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleGeantPair* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleGeantPair[n];
     } else {
       p = new((void*) gvp) HParticleGeantPair[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleGeantPair;
     } else {
       p = new((void*) gvp) HParticleGeantPair;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantPair));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeantPair*) G__getstructoffset())->getCand((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleGeantPair*) G__getstructoffset())->getMother());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleGeantPair*) G__getstructoffset())->getOpeningAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleGeantPair*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleGeantPair*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TLorentzVector& obj = ((HParticleGeantPair*) G__getstructoffset())->getCandVect((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleGeantPair*) G__getstructoffset())->getCandPID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleGeantPair*) G__getstructoffset())->getMotherPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleGeantPair*) G__getstructoffset())->getVerMinDistCand((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleGeantPair*) G__getstructoffset())->getVerMinDistMother());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleGeantPair*) G__getstructoffset())->getMinDistCandidates());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleGeantPair*) G__getstructoffset())->getVerDistMother());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HParticleGeantPair*) G__getstructoffset())->getEventVertex();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomVector& obj = ((HParticleGeantPair*) G__getstructoffset())->getDecayVertex();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleGeantPair*) G__getstructoffset())->isFakePair());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleGeantPair*) G__getstructoffset())->isTruePair());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HParticleGeantPair*) G__getstructoffset())->isInAcceptance((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HParticleGeantPair*) G__getstructoffset())->isInAcceptance());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleGeantPair*) G__getstructoffset())->print((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleGeantPair*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantPair*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HParticleGeantPair*) G__getstructoffset())->getStatusFlags());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleGeantPair*) G__getstructoffset())->checkStatus((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleGeantPair*) G__getstructoffset())->calcVectors((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(HGeomVector*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleGeantPair*) G__getstructoffset())->setPair(
(HGeantKine*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (HGeantKine*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (HGeantKine*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *(HGeomVector*) libp->para[6].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleGeantPair*) G__getstructoffset())->setPair((HGeantKine*) G__int(libp->para[0]), (HGeantKine*) G__int(libp->para[1])
, (HGeantKine*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, *(HGeomVector*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleGeantPair::setAcceptanceCheck((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleGeantPair::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleGeantPair::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleGeantPair::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleGeantPair::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleGeantPair*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleGeantPair::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleGeantPair::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleGeantPair::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1111_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleGeantPair::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1111_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleGeantPair* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleGeantPair(*(HParticleGeantPair*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantPair));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleGeantPair G__THParticleGeantPair;
static int G__ParticleDict_1111_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleGeantPair*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleGeantPair*) (soff+(sizeof(HParticleGeantPair)*i)))->~G__THParticleGeantPair();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleGeantPair*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleGeantPair*) (soff))->~G__THParticleGeantPair();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1111_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleGeantPair* dest = (HParticleGeantPair*) G__getstructoffset();
   *dest = *(HParticleGeantPair*) libp->para[0].ref;
   const HParticleGeantPair& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleDraw */
static int G__ParticleDict_1123_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleDraw* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleDraw[n];
     } else {
       p = new((void*) gvp) HParticleDraw[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleDraw;
     } else {
       p = new((void*) gvp) HParticleDraw;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleDraw));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1123_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((HParticleDraw*) G__getstructoffset())->drawParticle(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (UInt_t) G__int(libp->para[4]), *((TString*) G__int(libp->para[5]))
, *((TString*) G__int(libp->para[6])));
      G__setnull(result7);
      break;
   case 6:
      ((HParticleDraw*) G__getstructoffset())->drawParticle((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (UInt_t) G__int(libp->para[4]), *((TString*) G__int(libp->para[5])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1123_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((HParticleDraw*) G__getstructoffset())->drawParticleNDC((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (UInt_t) G__int(libp->para[3])
, *((TString*) G__int(libp->para[4])), *((TString*) G__int(libp->para[5])));
      G__setnull(result7);
      break;
   case 5:
      ((HParticleDraw*) G__getstructoffset())->drawParticleNDC((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (UInt_t) G__int(libp->para[3])
, *((TString*) G__int(libp->para[4])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1123_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleDraw::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1123_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleDraw::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1123_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleDraw::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1123_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleDraw::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1123_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleDraw*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1123_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleDraw::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1123_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleDraw::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1123_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleDraw::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1123_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleDraw::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1123_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleDraw* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleDraw(*(HParticleDraw*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleDraw));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleDraw G__THParticleDraw;
static int G__ParticleDict_1123_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleDraw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleDraw*) (soff+(sizeof(HParticleDraw)*i)))->~G__THParticleDraw();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleDraw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleDraw*) (soff))->~G__THParticleDraw();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1123_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleDraw* dest = (HParticleDraw*) G__getstructoffset();
   *dest = *(HParticleDraw*) libp->para[0].ref;
   const HParticleDraw& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticlePairDraw */
static int G__ParticleDict_1124_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticlePairDraw* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticlePairDraw[n];
     } else {
       p = new((void*) gvp) HParticlePairDraw[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticlePairDraw;
     } else {
       p = new((void*) gvp) HParticlePairDraw;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairDraw));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1124_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((HParticlePairDraw*) G__getstructoffset())->drawPair(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (UInt_t) G__int(libp->para[4]), *((TString*) G__int(libp->para[5]))
, *((TString*) G__int(libp->para[6])));
      G__setnull(result7);
      break;
   case 6:
      ((HParticlePairDraw*) G__getstructoffset())->drawPair((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (UInt_t) G__int(libp->para[4]), *((TString*) G__int(libp->para[5])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1124_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((HParticlePairDraw*) G__getstructoffset())->drawPairNDC((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (UInt_t) G__int(libp->para[3])
, *((TString*) G__int(libp->para[4])), *((TString*) G__int(libp->para[5])));
      G__setnull(result7);
      break;
   case 5:
      ((HParticlePairDraw*) G__getstructoffset())->drawPairNDC((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (UInt_t) G__int(libp->para[3])
, *((TString*) G__int(libp->para[4])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1124_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePairDraw*) G__getstructoffset())->drawPairCases();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1124_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticlePairDraw::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1124_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticlePairDraw::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1124_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticlePairDraw::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1124_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticlePairDraw::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1124_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePairDraw*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1124_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticlePairDraw::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1124_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticlePairDraw::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1124_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticlePairDraw::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1124_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticlePairDraw::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1124_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticlePairDraw* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticlePairDraw(*(HParticlePairDraw*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairDraw));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticlePairDraw G__THParticlePairDraw;
static int G__ParticleDict_1124_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticlePairDraw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticlePairDraw*) (soff+(sizeof(HParticlePairDraw)*i)))->~G__THParticlePairDraw();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticlePairDraw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticlePairDraw*) (soff))->~G__THParticlePairDraw();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1124_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticlePairDraw* dest = (HParticlePairDraw*) G__getstructoffset();
   *dest = *(HParticlePairDraw*) libp->para[0].ref;
   const HParticlePairDraw& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticlePairMaker */
static int G__ParticleDict_1125_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticlePairMaker* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticlePairMaker[n];
     } else {
       p = new((void*) gvp) HParticlePairMaker[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticlePairMaker;
     } else {
       p = new((void*) gvp) HParticlePairMaker;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairMaker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePairMaker*) G__getstructoffset())->setPIDs((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePairMaker*) G__getstructoffset())->setPIDsSelection((Bool_t (*)(HParticleCand*)) G__int(libp->para[0]), (Bool_t (*)(HParticleCand*)) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePairMaker*) G__getstructoffset())->setUserFilter((Bool_t (*)(HParticleCand*)) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePairMaker*) G__getstructoffset())->setDoSkippedFullCandPairs((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePairMaker*) G__getstructoffset())->setUseLeptons((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticlePairMaker::setRequireRich((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticlePairMaker::getRequireRich());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePairMaker*) G__getstructoffset())->setVertexCase((Particle::eVertex) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePairMaker*) G__getstructoffset())->setVertex(*(HGeomVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePairMaker*) G__getstructoffset())->setVertex(*(HVertex*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticlePairMaker::selectPos((HParticleCand*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HParticlePairMaker::selectNeg((HParticleCand*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePairMaker*) G__getstructoffset())->nextEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HParticleCand*>& obj = ((HParticlePairMaker*) G__getstructoffset())->getReferenceVector();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HParticleCand*>& obj = ((HParticlePairMaker*) G__getstructoffset())->getOthersVector();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HParticlePair>& obj = ((HParticlePairMaker*) G__getstructoffset())->getPairsVector();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HParticlePairMaker*) G__getstructoffset())->filterPairsVector(*(vector<HParticlePair*>*) libp->para[0].ref, (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HParticlePairMaker*) G__getstructoffset())->filterPairsVector(*(vector<HParticlePair*>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePairMaker*) G__getstructoffset())->filterPairsVector(*(vector<HParticlePair*>*) libp->para[0].ref, *(vector<UInt_t>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->filterCandidates((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->filterCandidates((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->filterCandidates((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->filterCandidates((HParticleCand*) G__int(libp->para[0]), *(vector<HParticlePair*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->filterCandidates((HParticleCand*) G__int(libp->para[0]), *(vector<HParticlePair*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->filterCandidates((HParticleCand*) G__int(libp->para[0]), *(vector<HParticlePair*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->getSameRich((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->getSameRich((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->getSameRich((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->getSameInnerMdc((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->getSameInnerMdc((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->getSameInnerMdc((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->getSameOuterMdc((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->getSameOuterMdc((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->getSameOuterMdc((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->getSameMeta((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->getSameMeta((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticlePairMaker*) G__getstructoffset())->getSameMeta((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePairMaker*) G__getstructoffset())->plotPairCaseStat();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticlePairMaker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticlePairMaker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticlePairMaker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticlePairMaker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePairMaker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticlePairMaker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticlePairMaker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticlePairMaker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1125_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticlePairMaker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1125_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticlePairMaker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticlePairMaker(*(HParticlePairMaker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairMaker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticlePairMaker G__THParticlePairMaker;
static int G__ParticleDict_1125_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticlePairMaker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticlePairMaker*) (soff+(sizeof(HParticlePairMaker)*i)))->~G__THParticlePairMaker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticlePairMaker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticlePairMaker*) (soff))->~G__THParticlePairMaker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1125_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticlePairMaker* dest = (HParticlePairMaker*) G__getstructoffset();
   *dest = *(HParticlePairMaker*) libp->para[0].ref;
   const HParticlePairMaker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleBooker */
static int G__ParticleDict_1150_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBooker* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBooker[n];
     } else {
       p = new((void*) gvp) HParticleBooker[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBooker;
     } else {
       p = new((void*) gvp) HParticleBooker;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBooker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBooker*) G__getstructoffset())->nextEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>& obj = ((HParticleBooker*) G__getstructoffset())->getTofHitIndices();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>& obj = ((HParticleBooker*) G__getstructoffset())->getTofClstIndices();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>& obj = ((HParticleBooker*) G__getstructoffset())->getRpcClstIndices();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>& obj = ((HParticleBooker*) G__getstructoffset())->getShowerIndices();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>& obj = ((HParticleBooker*) G__getstructoffset())->getInnerMdcIndices();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>& obj = ((HParticleBooker*) G__getstructoffset())->getOuterMdcIndices();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>& obj = ((HParticleBooker*) G__getstructoffset())->getRichIndices();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<Int_t,vector<HParticleCand*> >& obj = ((HParticleBooker*) G__getstructoffset())->getTofHitMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<Int_t,vector<HParticleCand*> >& obj = ((HParticleBooker*) G__getstructoffset())->getTofClstMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<Int_t,vector<HParticleCand*> >& obj = ((HParticleBooker*) G__getstructoffset())->getRpcClstMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<Int_t,vector<HParticleCand*> >& obj = ((HParticleBooker*) G__getstructoffset())->getShowerHitMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<Int_t,vector<HParticleCand*> >& obj = ((HParticleBooker*) G__getstructoffset())->getInnerMdcMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<Int_t,vector<HParticleCand*> >& obj = ((HParticleBooker*) G__getstructoffset())->getOuterMdcMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<Int_t,vector<HParticleCand*> >& obj = ((HParticleBooker*) G__getstructoffset())->getRichMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getCandidatesForTofHit((Int_t) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getCandidatesForTofCluster((Int_t) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getCandidatesForRpcCluster((Int_t) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getCandidatesForShower((Int_t) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getCandidatesForInnerMdc((Int_t) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getCandidatesForOuterMdc((Int_t) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getCandidatesForRich((Int_t) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getCandidatesAnyDetectorForTrack((Int_t) G__int(libp->para[0]), *(vector<HParticleCandSim*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getCandidatesForTrack((Int_t) G__int(libp->para[0]), *(vector<HParticleCandSim*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getTofHitForTrack((Int_t) G__int(libp->para[0]), *(vector<HTofHitSim*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getTofClusterForTrack((Int_t) G__int(libp->para[0]), *(vector<HTofClusterSim*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getRpcClusterForTrack((Int_t) G__int(libp->para[0]), *(vector<HRpcClusterSim*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getShowerHitForTrack((Int_t) G__int(libp->para[0]), *(vector<HShowerHitSim*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getInnerMdcSegForTrack((Int_t) G__int(libp->para[0]), *(vector<HMdcSegSim*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getOuterMdcSegForTrack((Int_t) G__int(libp->para[0]), *(vector<HMdcSegSim*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getRichHitForTrack((Int_t) G__int(libp->para[0]), *(vector<HRichHitSim*>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getCandidatesIndAnyDetectorForTrack((Int_t) G__int(libp->para[0]), *(vector<Int_t>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getCandidatesIndForTrack((Int_t) G__int(libp->para[0]), *(vector<Int_t>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getTofHitIndForTrack((Int_t) G__int(libp->para[0]), *(vector<Int_t>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getTofClusterIndForTrack((Int_t) G__int(libp->para[0]), *(vector<Int_t>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getRpcClusterIndForTrack((Int_t) G__int(libp->para[0]), *(vector<Int_t>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getShowerHitIndForTrack((Int_t) G__int(libp->para[0]), *(vector<Int_t>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getInnerMdcSegIndForTrack((Int_t) G__int(libp->para[0]), *(vector<Int_t>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getOuterMdcSegIndForTrack((Int_t) G__int(libp->para[0]), *(vector<Int_t>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getRichHitIndForTrack((Int_t) G__int(libp->para[0]), *(vector<Int_t>*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HTofHit*>& obj = ((HParticleBooker*) G__getstructoffset())->getTofHits();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HTofCluster*>& obj = ((HParticleBooker*) G__getstructoffset())->getTofClusters();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HRpcCluster*>& obj = ((HParticleBooker*) G__getstructoffset())->getRpcClusters();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HShowerHit*>& obj = ((HParticleBooker*) G__getstructoffset())->getShowerHits();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HMdcSeg*>& obj = ((HParticleBooker*) G__getstructoffset())->getInnerMdcSegs();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HMdcSeg*>& obj = ((HParticleBooker*) G__getstructoffset())->getOuterMdcSegs();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HRichHit*>& obj = ((HParticleBooker*) G__getstructoffset())->getRichHits();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HTofHit*>& obj = ((HParticleBooker*) G__getstructoffset())->getAllTofHits();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HTofCluster*>& obj = ((HParticleBooker*) G__getstructoffset())->getAllTofClusters();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HRpcCluster*>& obj = ((HParticleBooker*) G__getstructoffset())->getAllRpcClusters();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HShowerHit*>& obj = ((HParticleBooker*) G__getstructoffset())->getAllShowerHits();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HMdcSeg*>& obj = ((HParticleBooker*) G__getstructoffset())->getAllInnerMdcSegs();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HMdcSeg*>& obj = ((HParticleBooker*) G__getstructoffset())->getAllOuterMdcSegs();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HRichHit*>& obj = ((HParticleBooker*) G__getstructoffset())->getAllRichHits();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameRich((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameRich((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameRich((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameInnerMdc((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameInnerMdc((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameInnerMdc((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameOuterMdc((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameOuterMdc((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameOuterMdc((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameMeta((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameMeta((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameMeta((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameAny((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameAny((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameAny((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HParticleBooker*) G__getstructoffset())->getSameAny((HParticleCand*) G__int(libp->para[0]), *(vector<HParticleCand*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleBooker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBooker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleBooker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleBooker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBooker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBooker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBooker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBooker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1150_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBooker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1150_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleBooker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleBooker(*(HParticleBooker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBooker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleBooker G__THParticleBooker;
static int G__ParticleDict_1150_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleBooker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleBooker*) (soff+(sizeof(HParticleBooker)*i)))->~G__THParticleBooker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleBooker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleBooker*) (soff))->~G__THParticleBooker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1150_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBooker* dest = (HParticleBooker*) G__getstructoffset();
   *dest = *(HParticleBooker*) libp->para[0].ref;
   const HParticleBooker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleVertexFind */
static int G__ParticleDict_1258_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleVertexFind* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleVertexFind(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HParticleVertexFind(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleVertexFind((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HParticleVertexFind((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleVertexFind((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HParticleVertexFind((const Text_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleVertexFind[n];
       } else {
         p = new((void*) gvp) HParticleVertexFind[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleVertexFind;
       } else {
         p = new((void*) gvp) HParticleVertexFind;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleVertexFind));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HParticleVertexFind*) G__getstructoffset())->setCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HParticleVertexFind*) G__getstructoffset())->setCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HParticleVertexFind*) G__getstructoffset())->setCut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleVertexFind*) G__getstructoffset())->setCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleVertexFind*) G__getstructoffset())->useTukeyWeights((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleVertexFind*) G__getstructoffset())->setTukeyConstant((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleVertexFind*) G__getstructoffset())->setMaxIterations((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleVertexFind*) G__getstructoffset())->setEpsilon((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleVertexFind*) G__getstructoffset())->setMomChi2Cut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleVertexFind*) G__getstructoffset())->setSeg0Chi2Cut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleVertexFind*) G__getstructoffset())->setMinReqTracks((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleVertexFind*) G__getstructoffset())->setMinWindow((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleVertexFind*) G__getstructoffset())->setProgessiveTukey((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleVertexFind*) G__getstructoffset())->setCallExecuteManual((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HParticleVertexFind*) G__getstructoffset())->getTukeyConstant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleVertexFind*) G__getstructoffset())->getMaxIterations());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HParticleVertexFind*) G__getstructoffset())->getEpsilon());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleVertexFind*) G__getstructoffset())->getMomChi2Cut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleVertexFind*) G__getstructoffset())->getSeg0Chi2Cut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleVertexFind*) G__getstructoffset())->getMinReqTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HParticleVertexFind*) G__getstructoffset())->getMinWindow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleVertexFind*) G__getstructoffset())->getProgessiveTukey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleVertexFind*) G__getstructoffset())->doFit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleVertexFind::setSkipFakes((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleVertexFind::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleVertexFind::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleVertexFind::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleVertexFind::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleVertexFind*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleVertexFind::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleVertexFind::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleVertexFind::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1258_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleVertexFind::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleVertexFind G__THParticleVertexFind;
static int G__ParticleDict_1258_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleVertexFind*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleVertexFind*) (soff+(sizeof(HParticleVertexFind)*i)))->~G__THParticleVertexFind();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleVertexFind*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleVertexFind*) (soff))->~G__THParticleVertexFind();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCutRange */
static int G__ParticleDict_1272_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCutRange* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCutRange(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) HParticleCutRange(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCutRange(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) HParticleCutRange(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCutRange(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HParticleCutRange(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleCutRange(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) HParticleCutRange(*((TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleCutRange[n];
       } else {
         p = new((void*) gvp) HParticleCutRange[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleCutRange;
       } else {
         p = new((void*) gvp) HParticleCutRange;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutRange));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCutRange*) G__getstructoffset())->setMaxCut((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCutRange*) G__getstructoffset())->setMaxCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCutRange*) G__getstructoffset())->setInverse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HParticleCutRange*) G__getstructoffset())->set((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HParticleCutRange*) G__getstructoffset())->set((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCutRange*) G__getstructoffset())->set();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HParticleCutRange*) G__getstructoffset())->setTF1((TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      ((HParticleCutRange*) G__getstructoffset())->setTF1((TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HParticleCutRange*) G__getstructoffset())->setTF1((TF1*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCutRange*) G__getstructoffset())->getTF1Low());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCutRange*) G__getstructoffset())->getTF1Up());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCutRange*) G__getstructoffset())->getTCutG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleCutRange*) G__getstructoffset())->getCutRate((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleCutRange*) G__getstructoffset())->getCutRate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCutRange*) G__getstructoffset())->getNCall((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCutRange*) G__getstructoffset())->getNCall());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCutRange*) G__getstructoffset())->getNFail((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCutRange*) G__getstructoffset())->getNFail());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HParticleCutRange*) G__getstructoffset())->getMaxVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleCutRange*) G__getstructoffset())->getCutNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HParticleCutRange*) G__getstructoffset())->getLowCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HParticleCutRange*) G__getstructoffset())->getUpCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HParticleCutRange*) G__getstructoffset())->eval((Double_t) G__double(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCutRange*) G__getstructoffset())->eval((Double_t) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HParticleCutRange*) G__getstructoffset())->evalG((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HParticleCutRange*) G__getstructoffset())->evalG((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HParticleCutRange*) G__getstructoffset())->evalF((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HParticleCutRange*) G__getstructoffset())->evalF((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCutRange*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCutRange*) G__getstructoffset())->resetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCutRange::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCutRange::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCutRange::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCutRange::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCutRange*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCutRange::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCutRange::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCutRange::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1272_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCutRange::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1272_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCutRange* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCutRange(*(HParticleCutRange*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutRange));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCutRange G__THParticleCutRange;
static int G__ParticleDict_1272_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCutRange*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCutRange*) (soff+(sizeof(HParticleCutRange)*i)))->~G__THParticleCutRange();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCutRange*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCutRange*) (soff))->~G__THParticleCutRange();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1272_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCutRange* dest = (HParticleCutRange*) G__getstructoffset();
   *dest = *(HParticleCutRange*) libp->para[0].ref;
   const HParticleCutRange& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleBtPar */
static int G__ParticleDict_1273_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBtPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBtPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HParticleBtPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBtPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HParticleBtPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBtPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HParticleBtPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleBtPar[n];
       } else {
         p = new((void*) gvp) HParticleBtPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleBtPar;
       } else {
         p = new((void*) gvp) HParticleBtPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtPar*) G__getstructoffset())->getNRingSegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtPar*) G__getstructoffset())->getNVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtPar*) G__getstructoffset())->getNParMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtPar*) G__getstructoffset())->getNParSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtPar*) G__getstructoffset())->getChargeThres());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtPar*) G__getstructoffset())->getChargeThresMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getNSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtPar*) G__getstructoffset())->getMaximumType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtPar*) G__getstructoffset())->getSizeMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtPar*) G__getstructoffset())->getRingSegStep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtPar*) G__getstructoffset())->getRingSegOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtPar*) G__getstructoffset())->getSharedChargeDiagonal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtPar*) G__getstructoffset())->getSharedChargeVertical());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtPar*) G__getstructoffset())->getSharedChargeHorizontal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtPar*) G__getstructoffset())->getSigmaGaus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtPar*) G__getstructoffset())->getSigmaGausRange());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getParThetaAngleMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getParThetaAngleMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getSigmaRange());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getSigmaRangeSmall());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getSigmaRangeMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getSigmaRangePadError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtPar*) G__getstructoffset())->getPhiOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtPar*) G__getstructoffset())->getPhiOffset2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getOffsetPar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getPadWidthX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getPadWidthY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getThetaAngleMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getThetaAngleMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtPar*) G__getstructoffset())->getClusMaximaLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtPar*) G__getstructoffset())->getClusSizeLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getVertexPosMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getVertexPosMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getVertexStep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtPar*) G__getstructoffset())->getNRichSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtPar*) G__getstructoffset())->getRichSegBorderX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtPar*) G__getstructoffset())->getRichSegBorderY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtPar*) G__getstructoffset())->getNeighbourPad((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getMinimumSigmaValue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HParticleBtPar*) G__getstructoffset())->getTF2ParMean((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HParticleBtPar*) G__getstructoffset())->getTF2ParSigma((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getBetaRPCLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getBetaTOFLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtPar*) G__getstructoffset())->getMDCdEdxLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setNRingSegments((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setNVertex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setNParMean((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setNParSigma((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setChargeThres((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setChargeThresMax((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setNSigma((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setMaximumType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setSizeMatrix((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setRingSegStep((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setRingSegOffset((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setSharedChargeDiagonal((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setSharedChargeVertical((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setSharedChargeHorizontal((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setSigmaGaus((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setSigmaGausRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setParThetaAngleMin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setParThetaAngleMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setSigmaRange((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setSigmaRangeSmall((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setSigmaRangeMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setSigmaRangePadError((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setPhiOffset((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setPhiOffset2((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setOffsetPar((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setPadWidthX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setPadWidthY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setThetaAngleMin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setThetaAngleMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setClusMaximaLimit((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setClusSizeLimit((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setVertexPosMin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setVertexPosMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setVertexStep((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setNRichSeg((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setRichSegBorderX((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setRichSegBorderY((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setNeighbourPad((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setMinimumSigmaValue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setTF2ParMean((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setTF2ParSigma((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setBetaRPCLimit((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setBetaTOFLimit((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->setMDCdEdxLimit((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleBtPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleBtPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleBtPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBtPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1273_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBtPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1273_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleBtPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleBtPar(*(HParticleBtPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleBtPar G__THParticleBtPar;
static int G__ParticleDict_1273_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleBtPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleBtPar*) (soff+(sizeof(HParticleBtPar)*i)))->~G__THParticleBtPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleBtPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleBtPar*) (soff))->~G__THParticleBtPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1273_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBtPar* dest = (HParticleBtPar*) G__getstructoffset();
   *dest = *(HParticleBtPar*) libp->para[0].ref;
   const HParticleBtPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleBtRingInfo */
static int G__ParticleDict_1274_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBtRingInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBtRingInfo[n];
     } else {
       p = new((void*) gvp) HParticleBtRingInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBtRingInfo;
     } else {
       p = new((void*) gvp) HParticleBtRingInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Int_t a[1][128]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setPrediction(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Int_t a[1][128]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setRingMatrix(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setRichHitAdd((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setRichHitCharge((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setIsInCluster((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setTrackTheta((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setTrackPhi((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setTrackVertex((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setTrackSec((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setTrackPCandIdx((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setIsGoodTrack((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setPosXCenter((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setPosYCenter((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Int_t a[1][32]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusTrackNo(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusIsGood((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusPadSum((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusPadRing((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusChargeSum((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusChargeRing((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusPosX((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusPosY((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusClass((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Int_t a[1][32]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusNMaxima(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Int_t a[1][32][32]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusNMaximaPad(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Float_t a[1][32][32]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusNMaximaPosX(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Float_t a[1][32][32]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusNMaximaPosY(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Float_t a[1][32][32]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusChi2(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Float_t a[1][32][32]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusChi2XMM(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Float_t a[1][32][32]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusChi2YMM(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Float_t a[1][32][32]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusCircleX(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Float_t a[1][32][32]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusCircleY(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Float_t a[1][32][32]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusSig1X(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Float_t a[1][32][32]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusSig1Y(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Float_t a[1][32][32]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusSig2X(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp0 { Float_t a[1][32][32]; }* G__Ap0 = (struct G__aRyp0*) G__int(libp->para[0]);
      ((HParticleBtRingInfo*) G__getstructoffset())->setClusSig2Y(G__Ap0->a);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getPrediction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getRingMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getRichHitAdd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getRichHitCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getIsInCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getTrackTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getTrackPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getTrackVertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getTrackSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getTrackPCandIdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 71, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getIsGoodTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getPosXCenter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getPosYCenter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusTrackNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 71, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusIsGood());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusPadSum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusPadRing());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusChargeSum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusChargeRing());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusPosX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusPosY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusNMaxima());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusNMaximaPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusNMaximaPosX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusNMaximaPosY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusChi2XMM());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusChi2YMM());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusCircleX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusCircleY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusSig1X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusSig1Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusSig2X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HParticleBtRingInfo*) G__getstructoffset())->getClusSig2Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleBtRingInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtRingInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleBtRingInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleBtRingInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtRingInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBtRingInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtRingInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1274_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBtRingInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1274_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleBtRingInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleBtRingInfo(*(HParticleBtRingInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleBtRingInfo G__THParticleBtRingInfo;
static int G__ParticleDict_1274_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleBtRingInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleBtRingInfo*) (soff+(sizeof(HParticleBtRingInfo)*i)))->~G__THParticleBtRingInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleBtRingInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleBtRingInfo*) (soff))->~G__THParticleBtRingInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1274_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBtRingInfo* dest = (HParticleBtRingInfo*) G__getstructoffset();
   *dest = *(HParticleBtRingInfo*) libp->para[0].ref;
   const HParticleBtRingInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleBtRingF */
static int G__ParticleDict_1276_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBtRingF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBtRingF[n];
     } else {
       p = new((void*) gvp) HParticleBtRingF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBtRingF;
     } else {
       p = new((void*) gvp) HParticleBtRingF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleBtRingF*) G__getstructoffset())->init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleBtRingF*) G__getstructoffset())->finalize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingF*) G__getstructoffset())->fillRichCal((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingF*) G__getstructoffset())->fillPrediction((HParticleCand*) G__int(libp->para[0]), *(HVertex*) libp->para[1].ref
, (Bool_t) G__int(libp->para[2]), (const Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingF*) G__getstructoffset())->clearData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtRingF*) G__getstructoffset())->getRingMatrix((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<Int_t> >& obj = ((HParticleBtRingF*) G__getstructoffset())->getPrediction();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>& obj = ((HParticleBtRingF*) G__getstructoffset())->getRichHitAdd();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Float_t>& obj = ((HParticleBtRingF*) G__getstructoffset())->getRichHitCharge();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtRingF*) G__getstructoffset())->getTrackTheta((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtRingF*) G__getstructoffset())->getTrackPhi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtRingF*) G__getstructoffset())->getTrackVertex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtRingF*) G__getstructoffset())->getTrackSec((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtRingF*) G__getstructoffset())->getPosXCenter((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtRingF*) G__getstructoffset())->getPosYCenter((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleBtRingF*) G__getstructoffset())->isGoodTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleBtRingF*) G__getstructoffset())->fillRingInfo((HParticleBtRingInfo*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleBtRingF*) G__getstructoffset())->hasNoisyRichSeg((Bool_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtRingF*) G__getstructoffset())->plotPrediction((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingF*) G__getstructoffset())->plotRichHit((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleBtRingF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtRingF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleBtRingF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleBtRingF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRingF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtRingF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBtRingF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtRingF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1276_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBtRingF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1276_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleBtRingF* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleBtRingF(*(HParticleBtRingF*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleBtRingF G__THParticleBtRingF;
static int G__ParticleDict_1276_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleBtRingF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleBtRingF*) (soff+(sizeof(HParticleBtRingF)*i)))->~G__THParticleBtRingF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleBtRingF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleBtRingF*) (soff))->~G__THParticleBtRingF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1276_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBtRingF* dest = (HParticleBtRingF*) G__getstructoffset();
   *dest = *(HParticleBtRingF*) libp->para[0].ref;
   const HParticleBtRingF& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleBtClusterF */
static int G__ParticleDict_1289_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBtClusterF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBtClusterF[n];
     } else {
       p = new((void*) gvp) HParticleBtClusterF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBtClusterF;
     } else {
       p = new((void*) gvp) HParticleBtClusterF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtClusterF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleBtClusterF*) G__getstructoffset())->init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtClusterF*) G__getstructoffset())->setRingF((HParticleBtRingF*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtClusterF*) G__getstructoffset())->calcCluster((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtClusterF*) G__getstructoffset())->noHitFound();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtClusterF*) G__getstructoffset())->clearCluster();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtClusterF*) G__getstructoffset())->getPadsRing((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtClusterF*) G__getstructoffset())->getPadsSum((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtClusterF*) G__getstructoffset())->getChargeRing((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtClusterF*) G__getstructoffset())->getChargeSum((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtClusterF*) G__getstructoffset())->getNClusters((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtClusterF*) G__getstructoffset())->getMaxima((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtClusterF*) G__getstructoffset())->getMaximaCharge((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtClusterF*) G__getstructoffset())->getNearbyMaxima((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtClusterF*) G__getstructoffset())->getChi2Value((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtClusterF*) G__getstructoffset())->getChi2ValuePrimary((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtClusterF*) G__getstructoffset())->getMaximaShared((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtClusterF*) G__getstructoffset())->getMaximaSharedBad((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtClusterF*) G__getstructoffset())->getMaximaSharedTrack((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtClusterF*) G__getstructoffset())->getMaximaSharedBadTrack((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtClusterF*) G__getstructoffset())->getMaximaChargeShared((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtClusterF*) G__getstructoffset())->getMaximaChargeSharedTrack((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtClusterF*) G__getstructoffset())->getMaximaChargeSharedBad((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtClusterF*) G__getstructoffset())->getMaximaChargeSharedBadTrack((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtClusterF*) G__getstructoffset())->getNearbyMaximaShared((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtClusterF*) G__getstructoffset())->getNearbyMaximaSharedTrack((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtClusterF*) G__getstructoffset())->getMeanDistX((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtClusterF*) G__getstructoffset())->getMeanDistY((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtClusterF*) G__getstructoffset())->getMeanDist((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticleBtClusterF*) G__getstructoffset())->fillRingInfo((HParticleBtRingInfo*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleBtClusterF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtClusterF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleBtClusterF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleBtClusterF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtClusterF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtClusterF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBtClusterF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtClusterF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1289_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBtClusterF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1289_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleBtClusterF* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleBtClusterF(*(HParticleBtClusterF*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtClusterF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleBtClusterF G__THParticleBtClusterF;
static int G__ParticleDict_1289_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleBtClusterF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleBtClusterF*) (soff+(sizeof(HParticleBtClusterF)*i)))->~G__THParticleBtClusterF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleBtClusterF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleBtClusterF*) (soff))->~G__THParticleBtClusterF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1289_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBtClusterF* dest = (HParticleBtClusterF*) G__getstructoffset();
   *dest = *(HParticleBtClusterF*) libp->para[0].ref;
   const HParticleBtClusterF& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleBtRing */
static int G__ParticleDict_1302_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBtRing* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBtRing[n];
     } else {
       p = new((void*) gvp) HParticleBtRing[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBtRing;
     } else {
       p = new((void*) gvp) HParticleBtRing;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setPadsRing((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setPadsClus((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setChargeRing((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setChargeClus((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setClusters((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMaxima((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMaximaCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setNearbyMaxima((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setChi2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMeanDist((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setRingMatrix((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMaximaShared((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMaximaSharedTrack((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMaximaSharedTrackIdx((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMaximaSharedFragment((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMaximaSharedFragmentTrack((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMaximaSharedFragmentTrackIdx((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMaximaChargeShared((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMaximaChargeSharedTrack((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMaximaChargeSharedTrackIdx((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMaximaChargeSharedFragment((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMaximaChargeSharedFragmentTrack((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setMaximaChargeSharedFragmentTrackIdx((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setNearbyMaximaShared((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setNearbyMaximaSharedTrack((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->setNearbyMaximaSharedTrackIdx((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtRing*) G__getstructoffset())->getPadsRing());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtRing*) G__getstructoffset())->getPadsClus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtRing*) G__getstructoffset())->getChargeRing());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtRing*) G__getstructoffset())->getChargeClus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtRing*) G__getstructoffset())->getClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtRing*) G__getstructoffset())->getMaxima());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtRing*) G__getstructoffset())->getMaximaCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtRing*) G__getstructoffset())->getNearbyMaxima());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtRing*) G__getstructoffset())->getChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtRing*) G__getstructoffset())->getMeanDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtRing*) G__getstructoffset())->getRingMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtRing*) G__getstructoffset())->getMaximaShared());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtRing*) G__getstructoffset())->getMaximaSharedFragment());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtRing*) G__getstructoffset())->getMaximaChargeShared());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtRing*) G__getstructoffset())->getMaximaChargeSharedFragment());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtRing*) G__getstructoffset())->getNearbyMaximaShared());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtRing*) G__getstructoffset())->getMaximaSharedTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtRing*) G__getstructoffset())->getMaximaChargeSharedTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HParticleBtRing*) G__getstructoffset())->getNearbyMaximaSharedTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleBtRing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtRing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleBtRing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleBtRing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtRing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtRing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBtRing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtRing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1302_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBtRing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1302_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleBtRing* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleBtRing(*(HParticleBtRing*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRing));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleBtRing G__THParticleBtRing;
static int G__ParticleDict_1302_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleBtRing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleBtRing*) (soff+(sizeof(HParticleBtRing)*i)))->~G__THParticleBtRing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleBtRing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleBtRing*) (soff))->~G__THParticleBtRing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1302_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBtRing* dest = (HParticleBtRing*) G__getstructoffset();
   *dest = *(HParticleBtRing*) libp->para[0].ref;
   const HParticleBtRing& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleBt */
static int G__ParticleDict_1303_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBt* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBt[n];
     } else {
       p = new((void*) gvp) HParticleBt[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBt;
     } else {
       p = new((void*) gvp) HParticleBt;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1303_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBt* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleBt(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((const TString*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) HParticleBt(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, *((const TString*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1303_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBt*) G__getstructoffset())->setDebugInfo((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1303_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleBt::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1303_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBt::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1303_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleBt::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1303_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleBt::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1303_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBt*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1303_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBt::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1303_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBt::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1303_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBt::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1303_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBt::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleBt G__THParticleBt;
static int G__ParticleDict_1303_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleBt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleBt*) (soff+(sizeof(HParticleBt)*i)))->~G__THParticleBt();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleBt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleBt*) (soff))->~G__THParticleBt();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleBtAngleTrafo */
static int G__ParticleDict_1308_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBtAngleTrafo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBtAngleTrafo[n];
     } else {
       p = new((void*) gvp) HParticleBtAngleTrafo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleBtAngleTrafo;
     } else {
       p = new((void*) gvp) HParticleBtAngleTrafo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtAngleTrafo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtAngleTrafo*) G__getstructoffset())->initParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->x2xPad((const Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->xPad2x((const Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->yPhi2x((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->yPhi2xPad((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->angles2y((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->yPhi2Theta((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->angles2x((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->angles2yPad((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->yPadPhi2Theta((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->angles2xPad((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->xy2Phi((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->xPadyPad2Phi((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->yPad2y((const Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->yPadPhi2x((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->yPhi2yPad((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->yPadPhi2y((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->xy2yPad((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->xPadyPad2y((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->xy2Theta((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->xPadyPad2Theta((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->zTheta2dY((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->zTheta2dYPad((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->zTheta2dX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->zTheta2dXPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->zY2dTheta((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->zYPad2dTheta((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->zYPhi2dTheta((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->zTheta2dTheta((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtAngleTrafo*) G__getstructoffset())->setRichPos((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticleBtAngleTrafo*) G__getstructoffset())->getRichPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtAngleTrafo*) G__getstructoffset())->setRichPos((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleBtAngleTrafo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtAngleTrafo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleBtAngleTrafo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleBtAngleTrafo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleBtAngleTrafo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtAngleTrafo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBtAngleTrafo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleBtAngleTrafo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1308_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleBtAngleTrafo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1308_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleBtAngleTrafo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleBtAngleTrafo(*(HParticleBtAngleTrafo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtAngleTrafo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleBtAngleTrafo G__THParticleBtAngleTrafo;
static int G__ParticleDict_1308_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleBtAngleTrafo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleBtAngleTrafo*) (soff+(sizeof(HParticleBtAngleTrafo)*i)))->~G__THParticleBtAngleTrafo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleBtAngleTrafo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleBtAngleTrafo*) (soff))->~G__THParticleBtAngleTrafo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1308_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleBtAngleTrafo* dest = (HParticleBtAngleTrafo*) G__getstructoffset();
   *dest = *(HParticleBtAngleTrafo*) libp->para[0].ref;
   const HParticleBtAngleTrafo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticlePathLengthCorr */
static int G__ParticleDict_1309_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticlePathLengthCorr* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticlePathLengthCorr((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HParticlePathLengthCorr((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticlePathLengthCorr((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HParticlePathLengthCorr((const Text_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticlePathLengthCorr[n];
       } else {
         p = new((void*) gvp) HParticlePathLengthCorr[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticlePathLengthCorr;
       } else {
         p = new((void*) gvp) HParticlePathLengthCorr;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticlePathLengthCorr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1309_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HParticlePathLengthCorr*) G__getstructoffset())->setBeamTime(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1309_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HParticlePathLengthCorr*) G__getstructoffset())->getStart());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1309_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticlePathLengthCorr::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1309_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticlePathLengthCorr::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1309_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticlePathLengthCorr::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1309_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticlePathLengthCorr::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1309_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticlePathLengthCorr*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1309_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticlePathLengthCorr::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1309_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticlePathLengthCorr::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1309_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticlePathLengthCorr::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1309_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticlePathLengthCorr::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticlePathLengthCorr G__THParticlePathLengthCorr;
static int G__ParticleDict_1309_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticlePathLengthCorr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticlePathLengthCorr*) (soff+(sizeof(HParticlePathLengthCorr)*i)))->~G__THParticlePathLengthCorr();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticlePathLengthCorr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticlePathLengthCorr*) (soff))->~G__THParticlePathLengthCorr();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleT0Reco */
static int G__ParticleDict_1332_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleT0Reco* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleT0Reco(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HParticleT0Reco(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleT0Reco((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HParticleT0Reco((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HParticleT0Reco((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HParticleT0Reco((const Text_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleT0Reco[n];
       } else {
         p = new((void*) gvp) HParticleT0Reco[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HParticleT0Reco;
       } else {
         p = new((void*) gvp) HParticleT0Reco;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0Reco));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1332_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleT0Reco*) G__getstructoffset())->setUseFlaggedCandidates((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleT0Reco*) G__getstructoffset())->setUseFlaggedCandidates();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1332_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleT0Reco::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1332_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleT0Reco::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1332_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleT0Reco::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1332_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleT0Reco::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1332_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleT0Reco*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1332_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleT0Reco::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1332_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleT0Reco::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1332_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleT0Reco::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1332_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleT0Reco::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleT0Reco G__THParticleT0Reco;
static int G__ParticleDict_1332_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleT0Reco*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleT0Reco*) (soff+(sizeof(HParticleT0Reco)*i)))->~G__THParticleT0Reco();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleT0Reco*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleT0Reco*) (soff))->~G__THParticleT0Reco();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCut<HParticleCand> */
static int G__ParticleDict_1357_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HParticleCand>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleCut<HParticleCand>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) HParticleCut<HParticleCand>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleCand>*) G__getstructoffset())->setInverse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCut<HParticleCand>*) G__getstructoffset())->setMaxCut((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCut<HParticleCand>*) G__getstructoffset())->setMaxCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HParticleCut<HParticleCand>*) G__getstructoffset())->eval((HParticleCand*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCut<HParticleCand>*) G__getstructoffset())->eval((HParticleCand*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleCand>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleCand>*) G__getstructoffset())->resetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleCut<HParticleCand>*) G__getstructoffset())->getCutRate((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleCut<HParticleCand>*) G__getstructoffset())->getCutRate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleCand>*) G__getstructoffset())->getNCall((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleCand>*) G__getstructoffset())->getNCall());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleCand>*) G__getstructoffset())->getNFail((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleCand>*) G__getstructoffset())->getNFail());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleCand>*) G__getstructoffset())->getClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleCand>*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleCand>*) G__getstructoffset())->getFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HParticleCut<HParticleCand>*) G__getstructoffset())->getCondition();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCut<HParticleCand>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleCand>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCut<HParticleCand>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCut<HParticleCand>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleCand>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleCand>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HParticleCand>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleCand>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1357_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HParticleCand>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1357_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCut<HParticleCand>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCut<HParticleCand>(*(HParticleCut<HParticleCand>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCut<HParticleCand> G__THParticleCutlEHParticleCandgR;
static int G__ParticleDict_1357_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCut<HParticleCand>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCut<HParticleCand>*) (soff+(sizeof(HParticleCut<HParticleCand>)*i)))->~G__THParticleCutlEHParticleCandgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCut<HParticleCand>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCut<HParticleCand>*) (soff))->~G__THParticleCutlEHParticleCandgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1357_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HParticleCand>* dest = (HParticleCut<HParticleCand>*) G__getstructoffset();
   *dest = *(HParticleCut<HParticleCand>*) libp->para[0].ref;
   const HParticleCut<HParticleCand>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCut<HParticleCandSim> */
static int G__ParticleDict_1358_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HParticleCandSim>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleCut<HParticleCandSim>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) HParticleCut<HParticleCandSim>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandSimgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->setInverse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->setMaxCut((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->setMaxCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->eval((HParticleCandSim*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->eval((HParticleCandSim*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->resetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->getCutRate((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->getCutRate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->getNCall((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->getNCall());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->getNFail((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->getNFail());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->getClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->getFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->getCondition();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCut<HParticleCandSim>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleCandSim>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCut<HParticleCandSim>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCut<HParticleCandSim>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleCandSim>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleCandSim>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HParticleCandSim>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleCandSim>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1358_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HParticleCandSim>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1358_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCut<HParticleCandSim>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCut<HParticleCandSim>(*(HParticleCut<HParticleCandSim>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandSimgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCut<HParticleCandSim> G__THParticleCutlEHParticleCandSimgR;
static int G__ParticleDict_1358_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCut<HParticleCandSim>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCut<HParticleCandSim>*) (soff+(sizeof(HParticleCut<HParticleCandSim>)*i)))->~G__THParticleCutlEHParticleCandSimgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCut<HParticleCandSim>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCut<HParticleCandSim>*) (soff))->~G__THParticleCutlEHParticleCandSimgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1358_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HParticleCandSim>* dest = (HParticleCut<HParticleCandSim>*) G__getstructoffset();
   *dest = *(HParticleCut<HParticleCandSim>*) libp->para[0].ref;
   const HParticleCut<HParticleCandSim>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCut<HParticlePair> */
static int G__ParticleDict_1359_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HParticlePair>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleCut<HParticlePair>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) HParticleCut<HParticlePair>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticlePairgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticlePair>*) G__getstructoffset())->setInverse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCut<HParticlePair>*) G__getstructoffset())->setMaxCut((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCut<HParticlePair>*) G__getstructoffset())->setMaxCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HParticleCut<HParticlePair>*) G__getstructoffset())->eval((HParticlePair*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCut<HParticlePair>*) G__getstructoffset())->eval((HParticlePair*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticlePair>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticlePair>*) G__getstructoffset())->resetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleCut<HParticlePair>*) G__getstructoffset())->getCutRate((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleCut<HParticlePair>*) G__getstructoffset())->getCutRate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HParticlePair>*) G__getstructoffset())->getNCall((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HParticlePair>*) G__getstructoffset())->getNCall());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HParticlePair>*) G__getstructoffset())->getNFail((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HParticlePair>*) G__getstructoffset())->getNFail());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticlePair>*) G__getstructoffset())->getClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticlePair>*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticlePair>*) G__getstructoffset())->getFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HParticleCut<HParticlePair>*) G__getstructoffset())->getCondition();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCut<HParticlePair>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticlePair>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCut<HParticlePair>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCut<HParticlePair>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticlePair>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticlePair>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HParticlePair>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticlePair>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1359_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HParticlePair>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1359_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCut<HParticlePair>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCut<HParticlePair>(*(HParticleCut<HParticlePair>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticlePairgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCut<HParticlePair> G__THParticleCutlEHParticlePairgR;
static int G__ParticleDict_1359_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCut<HParticlePair>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCut<HParticlePair>*) (soff+(sizeof(HParticleCut<HParticlePair>)*i)))->~G__THParticleCutlEHParticlePairgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCut<HParticlePair>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCut<HParticlePair>*) (soff))->~G__THParticleCutlEHParticlePairgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1359_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HParticlePair>* dest = (HParticleCut<HParticlePair>*) G__getstructoffset();
   *dest = *(HParticleCut<HParticlePair>*) libp->para[0].ref;
   const HParticleCut<HParticlePair>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCut<HParticleGeantPair> */
static int G__ParticleDict_1360_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HParticleGeantPair>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleCut<HParticleGeantPair>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) HParticleCut<HParticleGeantPair>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantPairgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->setInverse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->setMaxCut((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->setMaxCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->eval((HParticleGeantPair*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->eval((HParticleGeantPair*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->resetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->getCutRate((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->getCutRate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->getNCall((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->getNCall());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->getNFail((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->getNFail());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->getClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->getFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->getCondition();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCut<HParticleGeantPair>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleGeantPair>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCut<HParticleGeantPair>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCut<HParticleGeantPair>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleGeantPair>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleGeantPair>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HParticleGeantPair>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleGeantPair>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1360_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HParticleGeantPair>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1360_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCut<HParticleGeantPair>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCut<HParticleGeantPair>(*(HParticleCut<HParticleGeantPair>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantPairgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCut<HParticleGeantPair> G__THParticleCutlEHParticleGeantPairgR;
static int G__ParticleDict_1360_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCut<HParticleGeantPair>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCut<HParticleGeantPair>*) (soff+(sizeof(HParticleCut<HParticleGeantPair>)*i)))->~G__THParticleCutlEHParticleGeantPairgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCut<HParticleGeantPair>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCut<HParticleGeantPair>*) (soff))->~G__THParticleCutlEHParticleGeantPairgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1360_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HParticleGeantPair>* dest = (HParticleCut<HParticleGeantPair>*) G__getstructoffset();
   *dest = *(HParticleCut<HParticleGeantPair>*) libp->para[0].ref;
   const HParticleCut<HParticleGeantPair>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCut<HParticleGeant> */
static int G__ParticleDict_1361_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HParticleGeant>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleCut<HParticleGeant>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) HParticleCut<HParticleGeant>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleGeant>*) G__getstructoffset())->setInverse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCut<HParticleGeant>*) G__getstructoffset())->setMaxCut((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCut<HParticleGeant>*) G__getstructoffset())->setMaxCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HParticleCut<HParticleGeant>*) G__getstructoffset())->eval((HParticleGeant*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCut<HParticleGeant>*) G__getstructoffset())->eval((HParticleGeant*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleGeant>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleGeant>*) G__getstructoffset())->resetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleCut<HParticleGeant>*) G__getstructoffset())->getCutRate((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleCut<HParticleGeant>*) G__getstructoffset())->getCutRate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleGeant>*) G__getstructoffset())->getNCall((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleGeant>*) G__getstructoffset())->getNCall());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleGeant>*) G__getstructoffset())->getNFail((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleGeant>*) G__getstructoffset())->getNFail());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleGeant>*) G__getstructoffset())->getClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleGeant>*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleGeant>*) G__getstructoffset())->getFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HParticleCut<HParticleGeant>*) G__getstructoffset())->getCondition();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCut<HParticleGeant>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleGeant>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCut<HParticleGeant>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCut<HParticleGeant>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleGeant>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleGeant>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HParticleGeant>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleGeant>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1361_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HParticleGeant>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1361_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCut<HParticleGeant>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCut<HParticleGeant>(*(HParticleCut<HParticleGeant>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCut<HParticleGeant> G__THParticleCutlEHParticleGeantgR;
static int G__ParticleDict_1361_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCut<HParticleGeant>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCut<HParticleGeant>*) (soff+(sizeof(HParticleCut<HParticleGeant>)*i)))->~G__THParticleCutlEHParticleGeantgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCut<HParticleGeant>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCut<HParticleGeant>*) (soff))->~G__THParticleCutlEHParticleGeantgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1361_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HParticleGeant>* dest = (HParticleCut<HParticleGeant>*) G__getstructoffset();
   *dest = *(HParticleCut<HParticleGeant>*) libp->para[0].ref;
   const HParticleCut<HParticleGeant>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCut<HParticleGeantDecay> */
static int G__ParticleDict_1362_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HParticleGeantDecay>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleCut<HParticleGeantDecay>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) HParticleCut<HParticleGeantDecay>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantDecaygR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->setInverse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->setMaxCut((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->setMaxCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->eval((HParticleGeantDecay*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->eval((HParticleGeantDecay*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->resetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->getCutRate((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->getCutRate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->getNCall((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->getNCall());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->getNFail((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->getNFail());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->getClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->getFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->getCondition();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCut<HParticleGeantDecay>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleGeantDecay>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCut<HParticleGeantDecay>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCut<HParticleGeantDecay>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleGeantDecay>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleGeantDecay>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HParticleGeantDecay>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleGeantDecay>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1362_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HParticleGeantDecay>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1362_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCut<HParticleGeantDecay>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCut<HParticleGeantDecay>(*(HParticleCut<HParticleGeantDecay>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantDecaygR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCut<HParticleGeantDecay> G__THParticleCutlEHParticleGeantDecaygR;
static int G__ParticleDict_1362_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCut<HParticleGeantDecay>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCut<HParticleGeantDecay>*) (soff+(sizeof(HParticleCut<HParticleGeantDecay>)*i)))->~G__THParticleCutlEHParticleGeantDecaygR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCut<HParticleGeantDecay>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCut<HParticleGeantDecay>*) (soff))->~G__THParticleCutlEHParticleGeantDecaygR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1362_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HParticleGeantDecay>* dest = (HParticleCut<HParticleGeantDecay>*) G__getstructoffset();
   *dest = *(HParticleCut<HParticleGeantDecay>*) libp->para[0].ref;
   const HParticleCut<HParticleGeantDecay>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCut<HParticleEvtInfo> */
static int G__ParticleDict_1363_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HParticleEvtInfo>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleCut<HParticleEvtInfo>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) HParticleCut<HParticleEvtInfo>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleEvtInfogR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->setInverse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->setMaxCut((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->setMaxCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->eval((HParticleEvtInfo*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->eval((HParticleEvtInfo*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->resetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->getCutRate((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->getCutRate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->getNCall((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->getNCall());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->getNFail((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->getNFail());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->getClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->getFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->getCondition();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCut<HParticleEvtInfo>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleEvtInfo>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCut<HParticleEvtInfo>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCut<HParticleEvtInfo>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HParticleEvtInfo>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleEvtInfo>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HParticleEvtInfo>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HParticleEvtInfo>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1363_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HParticleEvtInfo>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1363_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCut<HParticleEvtInfo>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCut<HParticleEvtInfo>(*(HParticleCut<HParticleEvtInfo>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleEvtInfogR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCut<HParticleEvtInfo> G__THParticleCutlEHParticleEvtInfogR;
static int G__ParticleDict_1363_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCut<HParticleEvtInfo>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCut<HParticleEvtInfo>*) (soff+(sizeof(HParticleCut<HParticleEvtInfo>)*i)))->~G__THParticleCutlEHParticleEvtInfogR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCut<HParticleEvtInfo>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCut<HParticleEvtInfo>*) (soff))->~G__THParticleCutlEHParticleEvtInfogR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1363_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HParticleEvtInfo>* dest = (HParticleCut<HParticleEvtInfo>*) G__getstructoffset();
   *dest = *(HParticleCut<HParticleEvtInfo>*) libp->para[0].ref;
   const HParticleCut<HParticleEvtInfo>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCut<HRichHit> */
static int G__ParticleDict_1364_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HRichHit>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleCut<HRichHit>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) HParticleCut<HRichHit>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HRichHit>*) G__getstructoffset())->setInverse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCut<HRichHit>*) G__getstructoffset())->setMaxCut((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCut<HRichHit>*) G__getstructoffset())->setMaxCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HParticleCut<HRichHit>*) G__getstructoffset())->eval((HRichHit*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCut<HRichHit>*) G__getstructoffset())->eval((HRichHit*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HRichHit>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HRichHit>*) G__getstructoffset())->resetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleCut<HRichHit>*) G__getstructoffset())->getCutRate((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleCut<HRichHit>*) G__getstructoffset())->getCutRate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HRichHit>*) G__getstructoffset())->getNCall((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HRichHit>*) G__getstructoffset())->getNCall());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HRichHit>*) G__getstructoffset())->getNFail((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HRichHit>*) G__getstructoffset())->getNFail());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HRichHit>*) G__getstructoffset())->getClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HRichHit>*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HRichHit>*) G__getstructoffset())->getFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HParticleCut<HRichHit>*) G__getstructoffset())->getCondition();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCut<HRichHit>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HRichHit>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCut<HRichHit>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCut<HRichHit>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HRichHit>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HRichHit>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HRichHit>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HRichHit>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1364_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HRichHit>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1364_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCut<HRichHit>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCut<HRichHit>(*(HParticleCut<HRichHit>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCut<HRichHit> G__THParticleCutlEHRichHitgR;
static int G__ParticleDict_1364_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCut<HRichHit>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCut<HRichHit>*) (soff+(sizeof(HParticleCut<HRichHit>)*i)))->~G__THParticleCutlEHRichHitgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCut<HRichHit>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCut<HRichHit>*) (soff))->~G__THParticleCutlEHRichHitgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1364_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HRichHit>* dest = (HParticleCut<HRichHit>*) G__getstructoffset();
   *dest = *(HParticleCut<HRichHit>*) libp->para[0].ref;
   const HParticleCut<HRichHit>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCut<HRichHitSim> */
static int G__ParticleDict_1365_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HRichHitSim>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleCut<HRichHitSim>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) HParticleCut<HRichHitSim>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitSimgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HRichHitSim>*) G__getstructoffset())->setInverse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCut<HRichHitSim>*) G__getstructoffset())->setMaxCut((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCut<HRichHitSim>*) G__getstructoffset())->setMaxCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HParticleCut<HRichHitSim>*) G__getstructoffset())->eval((HRichHitSim*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCut<HRichHitSim>*) G__getstructoffset())->eval((HRichHitSim*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HRichHitSim>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HRichHitSim>*) G__getstructoffset())->resetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleCut<HRichHitSim>*) G__getstructoffset())->getCutRate((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleCut<HRichHitSim>*) G__getstructoffset())->getCutRate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HRichHitSim>*) G__getstructoffset())->getNCall((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HRichHitSim>*) G__getstructoffset())->getNCall());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HRichHitSim>*) G__getstructoffset())->getNFail((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HRichHitSim>*) G__getstructoffset())->getNFail());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HRichHitSim>*) G__getstructoffset())->getClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HRichHitSim>*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HRichHitSim>*) G__getstructoffset())->getFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HParticleCut<HRichHitSim>*) G__getstructoffset())->getCondition();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCut<HRichHitSim>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HRichHitSim>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCut<HRichHitSim>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCut<HRichHitSim>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HRichHitSim>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HRichHitSim>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HRichHitSim>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HRichHitSim>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1365_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HRichHitSim>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1365_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCut<HRichHitSim>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCut<HRichHitSim>(*(HParticleCut<HRichHitSim>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitSimgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCut<HRichHitSim> G__THParticleCutlEHRichHitSimgR;
static int G__ParticleDict_1365_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCut<HRichHitSim>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCut<HRichHitSim>*) (soff+(sizeof(HParticleCut<HRichHitSim>)*i)))->~G__THParticleCutlEHRichHitSimgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCut<HRichHitSim>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCut<HRichHitSim>*) (soff))->~G__THParticleCutlEHRichHitSimgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1365_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HRichHitSim>* dest = (HParticleCut<HRichHitSim>*) G__getstructoffset();
   *dest = *(HParticleCut<HRichHitSim>*) libp->para[0].ref;
   const HParticleCut<HRichHitSim>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCut<HEventHeader> */
static int G__ParticleDict_1366_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HEventHeader>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleCut<HEventHeader>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) HParticleCut<HEventHeader>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHEventHeadergR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HEventHeader>*) G__getstructoffset())->setInverse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCut<HEventHeader>*) G__getstructoffset())->setMaxCut((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCut<HEventHeader>*) G__getstructoffset())->setMaxCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HParticleCut<HEventHeader>*) G__getstructoffset())->eval((HEventHeader*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCut<HEventHeader>*) G__getstructoffset())->eval((HEventHeader*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HEventHeader>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HEventHeader>*) G__getstructoffset())->resetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleCut<HEventHeader>*) G__getstructoffset())->getCutRate((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleCut<HEventHeader>*) G__getstructoffset())->getCutRate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HEventHeader>*) G__getstructoffset())->getNCall((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HEventHeader>*) G__getstructoffset())->getNCall());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HEventHeader>*) G__getstructoffset())->getNFail((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HEventHeader>*) G__getstructoffset())->getNFail());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HEventHeader>*) G__getstructoffset())->getClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HEventHeader>*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HEventHeader>*) G__getstructoffset())->getFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HParticleCut<HEventHeader>*) G__getstructoffset())->getCondition();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCut<HEventHeader>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HEventHeader>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCut<HEventHeader>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCut<HEventHeader>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HEventHeader>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HEventHeader>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HEventHeader>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HEventHeader>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1366_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HEventHeader>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1366_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCut<HEventHeader>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCut<HEventHeader>(*(HParticleCut<HEventHeader>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHEventHeadergR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCut<HEventHeader> G__THParticleCutlEHEventHeadergR;
static int G__ParticleDict_1366_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCut<HEventHeader>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCut<HEventHeader>*) (soff+(sizeof(HParticleCut<HEventHeader>)*i)))->~G__THParticleCutlEHEventHeadergR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCut<HEventHeader>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCut<HEventHeader>*) (soff))->~G__THParticleCutlEHEventHeadergR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1366_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HEventHeader>* dest = (HParticleCut<HEventHeader>*) G__getstructoffset();
   *dest = *(HParticleCut<HEventHeader>*) libp->para[0].ref;
   const HParticleCut<HEventHeader>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCut<HVertex> */
static int G__ParticleDict_1367_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HVertex>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleCut<HVertex>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) HParticleCut<HVertex>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHVertexgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HVertex>*) G__getstructoffset())->setInverse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCut<HVertex>*) G__getstructoffset())->setMaxCut((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCut<HVertex>*) G__getstructoffset())->setMaxCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HParticleCut<HVertex>*) G__getstructoffset())->eval((HVertex*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCut<HVertex>*) G__getstructoffset())->eval((HVertex*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HVertex>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HVertex>*) G__getstructoffset())->resetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleCut<HVertex>*) G__getstructoffset())->getCutRate((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleCut<HVertex>*) G__getstructoffset())->getCutRate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HVertex>*) G__getstructoffset())->getNCall((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HVertex>*) G__getstructoffset())->getNCall());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HVertex>*) G__getstructoffset())->getNFail((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HVertex>*) G__getstructoffset())->getNFail());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HVertex>*) G__getstructoffset())->getClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HVertex>*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HVertex>*) G__getstructoffset())->getFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HParticleCut<HVertex>*) G__getstructoffset())->getCondition();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCut<HVertex>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HVertex>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCut<HVertex>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCut<HVertex>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HVertex>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HVertex>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HVertex>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HVertex>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1367_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HVertex>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1367_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCut<HVertex>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCut<HVertex>(*(HParticleCut<HVertex>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHVertexgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCut<HVertex> G__THParticleCutlEHVertexgR;
static int G__ParticleDict_1367_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCut<HVertex>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCut<HVertex>*) (soff+(sizeof(HParticleCut<HVertex>)*i)))->~G__THParticleCutlEHVertexgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCut<HVertex>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCut<HVertex>*) (soff))->~G__THParticleCutlEHVertexgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1367_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HVertex>* dest = (HParticleCut<HVertex>*) G__getstructoffset();
   *dest = *(HParticleCut<HVertex>*) libp->para[0].ref;
   const HParticleCut<HVertex>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HParticleCut<HGeantKine> */
static int G__ParticleDict_1368_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HGeantKine>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HParticleCut<HGeantKine>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) HParticleCut<HGeantKine>(
*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHGeantKinegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HGeantKine>*) G__getstructoffset())->setInverse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HParticleCut<HGeantKine>*) G__getstructoffset())->setMaxCut((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HParticleCut<HGeantKine>*) G__getstructoffset())->setMaxCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HParticleCut<HGeantKine>*) G__getstructoffset())->eval((HGeantKine*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HParticleCut<HGeantKine>*) G__getstructoffset())->eval((HGeantKine*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HGeantKine>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HGeantKine>*) G__getstructoffset())->resetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HParticleCut<HGeantKine>*) G__getstructoffset())->getCutRate((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HParticleCut<HGeantKine>*) G__getstructoffset())->getCutRate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HGeantKine>*) G__getstructoffset())->getNCall((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HGeantKine>*) G__getstructoffset())->getNCall());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HParticleCut<HGeantKine>*) G__getstructoffset())->getNFail((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HParticleCut<HGeantKine>*) G__getstructoffset())->getNFail());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HGeantKine>*) G__getstructoffset())->getClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HGeantKine>*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HParticleCut<HGeantKine>*) G__getstructoffset())->getFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HParticleCut<HGeantKine>*) G__getstructoffset())->getCondition();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HParticleCut<HGeantKine>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HGeantKine>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HParticleCut<HGeantKine>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HParticleCut<HGeantKine>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HParticleCut<HGeantKine>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HGeantKine>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HGeantKine>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HParticleCut<HGeantKine>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ParticleDict_1368_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HParticleCut<HGeantKine>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ParticleDict_1368_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HParticleCut<HGeantKine>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HParticleCut<HGeantKine>(*(HParticleCut<HGeantKine>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHGeantKinegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HParticleCut<HGeantKine> G__THParticleCutlEHGeantKinegR;
static int G__ParticleDict_1368_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HParticleCut<HGeantKine>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HParticleCut<HGeantKine>*) (soff+(sizeof(HParticleCut<HGeantKine>)*i)))->~G__THParticleCutlEHGeantKinegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HParticleCut<HGeantKine>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HParticleCut<HGeantKine>*) (soff))->~G__THParticleCutlEHGeantKinegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ParticleDict_1368_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HParticleCut<HGeantKine>* dest = (HParticleCut<HGeantKine>*) G__getstructoffset();
   *dest = *(HParticleCut<HGeantKine>*) libp->para[0].ref;
   const HParticleCut<HGeantKine>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Particle */

/* HParticleCand */

/* HParticleCandSim */

/* HParticleWallHit */

/* HParticleWallHitSim */

/* HParticleCal */

/* HParticleMdc */

/* HParticleEvtInfo */

/* HParticlePair */

/* HParticleTool */

/* pointers */

/* closetrack */

/* closeVec */

/* trackinfo */

/* tracksVec */

/* mdc_trk */

/* mdc_seg */

/* rpc_clst */

/* tof_hit */

/* shower_hit */

/* rich_hit */

/* spline_track */

/* rk_track */

/* kal_track */

/* candidate */

/* HParticleEvtChara */

/* HParticleCandFillerPar */

/* HParticleCandFiller */

/* HParticleTrackSorter */

/* HParticleTrackCleaner */

/* HParticleRunningMeanI */

/* HParticleEvtInfoFiller */

/* HParticleContFact */

/* HParticleStart2HitF */

/* HParticleTree */

/* HParticleAngleCor */

/* HParticleGeantDecay */

/* HParticleGeant */

/* HParticleGeantEvent */

/* HParticleGeantPair */

/* HParticleDraw */

/* HParticlePairDraw */

/* HParticlePairMaker */

/* HParticleBooker */

/* HParticleVertexFind */

/* HParticleCutRange */

/* HParticleBtPar */

/* HParticleBtRingInfo */

/* HParticleBtRingF */

/* HParticleBtClusterF */

/* HParticleBtRing */

/* HParticleBt */

/* HParticleBtAngleTrafo */

/* HParticlePathLengthCorr */

/* HParticleT0Reco */

/* HParticleCut<HParticleCand> */

/* HParticleCut<HParticleCandSim> */

/* HParticleCut<HParticlePair> */

/* HParticleCut<HParticleGeantPair> */

/* HParticleCut<HParticleGeant> */

/* HParticleCut<HParticleGeantDecay> */

/* HParticleCut<HParticleEvtInfo> */

/* HParticleCut<HRichHit> */

/* HParticleCut<HRichHitSim> */

/* HParticleCut<HEventHeader> */

/* HParticleCut<HVertex> */

/* HParticleCut<HGeantKine> */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncParticleDict {
 public:
  G__Sizep2memfuncParticleDict(): p(&G__Sizep2memfuncParticleDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncParticleDict::*p)();
};

size_t G__get_sizep2memfuncParticleDict()
{
  G__Sizep2memfuncParticleDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceParticleDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand))) {
     HParticleCand *G__Lderived;
     G__Lderived=(HParticleCand*)0x1000;
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand),G__get_linked_tagnum(&G__ParticleDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim))) {
     HParticleCandSim *G__Lderived;
     G__Lderived=(HParticleCandSim*)0x1000;
     {
       HParticleCand *G__Lpbase=(HParticleCand*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim),G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim),G__get_linked_tagnum(&G__ParticleDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHit))) {
     HParticleWallHit *G__Lderived;
     G__Lderived=(HParticleWallHit*)0x1000;
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHit),G__get_linked_tagnum(&G__ParticleDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHit),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHitSim))) {
     HParticleWallHitSim *G__Lderived;
     G__Lderived=(HParticleWallHitSim*)0x1000;
     {
       HParticleWallHit *G__Lpbase=(HParticleWallHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHitSim),G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHitSim),G__get_linked_tagnum(&G__ParticleDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHitSim),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCal))) {
     HParticleCal *G__Lderived;
     G__Lderived=(HParticleCal*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCal),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleMdc))) {
     HParticleMdc *G__Lderived;
     G__Lderived=(HParticleMdc*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleMdc),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfo))) {
     HParticleEvtInfo *G__Lderived;
     G__Lderived=(HParticleEvtInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfo),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePair))) {
     HParticlePair *G__Lderived;
     G__Lderived=(HParticlePair*)0x1000;
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePair),G__get_linked_tagnum(&G__ParticleDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePair),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTool))) {
     HParticleTool *G__Lderived;
     G__Lderived=(HParticleTool*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTool),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_pointers))) {
     pointers *G__Lderived;
     G__Lderived=(pointers*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_pointers),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_closetrack))) {
     closetrack *G__Lderived;
     G__Lderived=(closetrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_closetrack),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_closeVec))) {
     closeVec *G__Lderived;
     G__Lderived=(closeVec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_closeVec),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_trackinfo))) {
     trackinfo *G__Lderived;
     G__Lderived=(trackinfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_trackinfo),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_tracksVec))) {
     tracksVec *G__Lderived;
     G__Lderived=(tracksVec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_tracksVec),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_mdc_trk))) {
     mdc_trk *G__Lderived;
     G__Lderived=(mdc_trk*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_mdc_trk),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_mdc_seg))) {
     mdc_seg *G__Lderived;
     G__Lderived=(mdc_seg*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_mdc_seg),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_rpc_clst))) {
     rpc_clst *G__Lderived;
     G__Lderived=(rpc_clst*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_rpc_clst),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_tof_hit))) {
     tof_hit *G__Lderived;
     G__Lderived=(tof_hit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_tof_hit),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_shower_hit))) {
     shower_hit *G__Lderived;
     G__Lderived=(shower_hit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_shower_hit),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_rich_hit))) {
     rich_hit *G__Lderived;
     G__Lderived=(rich_hit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_rich_hit),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_spline_track))) {
     spline_track *G__Lderived;
     G__Lderived=(spline_track*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_spline_track),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_rk_track))) {
     rk_track *G__Lderived;
     G__Lderived=(rk_track*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_rk_track),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_kal_track))) {
     kal_track *G__Lderived;
     G__Lderived=(kal_track*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_kal_track),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_candidate))) {
     candidate *G__Lderived;
     G__Lderived=(candidate*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_candidate),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtChara))) {
     HParticleEvtChara *G__Lderived;
     G__Lderived=(HParticleEvtChara*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtChara),G__get_linked_tagnum(&G__ParticleDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtChara),G__get_linked_tagnum(&G__ParticleDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtChara),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtChara),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFillerPar))) {
     HParticleCandFillerPar *G__Lderived;
     G__Lderived=(HParticleCandFillerPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFillerPar),G__get_linked_tagnum(&G__ParticleDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFillerPar),G__get_linked_tagnum(&G__ParticleDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFillerPar),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFillerPar),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFiller))) {
     HParticleCandFiller *G__Lderived;
     G__Lderived=(HParticleCandFiller*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFiller),G__get_linked_tagnum(&G__ParticleDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFiller),G__get_linked_tagnum(&G__ParticleDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFiller),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFiller),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParSet))) {
     HParSet *G__Lderived;
     G__Lderived=(HParSet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParSet),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParSet),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParCond))) {
     HParCond *G__Lderived;
     G__Lderived=(HParCond*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParCond),G__get_linked_tagnum(&G__ParticleDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParCond),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParCond),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter))) {
     HParticleTrackSorter *G__Lderived;
     G__Lderived=(HParticleTrackSorter*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackCleaner))) {
     HParticleTrackCleaner *G__Lderived;
     G__Lderived=(HParticleTrackCleaner*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackCleaner),G__get_linked_tagnum(&G__ParticleDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackCleaner),G__get_linked_tagnum(&G__ParticleDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackCleaner),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackCleaner),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI))) {
     HParticleRunningMeanI *G__Lderived;
     G__Lderived=(HParticleRunningMeanI*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfoFiller))) {
     HParticleEvtInfoFiller *G__Lderived;
     G__Lderived=(HParticleEvtInfoFiller*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfoFiller),G__get_linked_tagnum(&G__ParticleDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfoFiller),G__get_linked_tagnum(&G__ParticleDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfoFiller),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfoFiller),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleContFact))) {
     HParticleContFact *G__Lderived;
     G__Lderived=(HParticleContFact*)0x1000;
     {
       HContFact *G__Lpbase=(HContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleContFact),G__get_linked_tagnum(&G__ParticleDictLN_HContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleContFact),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleContFact),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleStart2HitF))) {
     HParticleStart2HitF *G__Lderived;
     G__Lderived=(HParticleStart2HitF*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleStart2HitF),G__get_linked_tagnum(&G__ParticleDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleStart2HitF),G__get_linked_tagnum(&G__ParticleDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleStart2HitF),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleStart2HitF),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTree))) {
     HParticleTree *G__Lderived;
     G__Lderived=(HParticleTree*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTree),G__get_linked_tagnum(&G__ParticleDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTree),G__get_linked_tagnum(&G__ParticleDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTree),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTree),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleAngleCor))) {
     HParticleAngleCor *G__Lderived;
     G__Lderived=(HParticleAngleCor*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleAngleCor),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay))) {
     HParticleGeantDecay *G__Lderived;
     G__Lderived=(HParticleGeantDecay*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeant))) {
     HParticleGeant *G__Lderived;
     G__Lderived=(HParticleGeant*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeant),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantEvent))) {
     HParticleGeantEvent *G__Lderived;
     G__Lderived=(HParticleGeantEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantEvent),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantPair))) {
     HParticleGeantPair *G__Lderived;
     G__Lderived=(HParticleGeantPair*)0x1000;
     {
       TLorentzVector *G__Lpbase=(TLorentzVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantPair),G__get_linked_tagnum(&G__ParticleDictLN_TLorentzVector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantPair),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleDraw))) {
     HParticleDraw *G__Lderived;
     G__Lderived=(HParticleDraw*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleDraw),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairDraw))) {
     HParticlePairDraw *G__Lderived;
     G__Lderived=(HParticlePairDraw*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairDraw),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairMaker))) {
     HParticlePairMaker *G__Lderived;
     G__Lderived=(HParticlePairMaker*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairMaker),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBooker))) {
     HParticleBooker *G__Lderived;
     G__Lderived=(HParticleBooker*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBooker),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleVertexFind))) {
     HParticleVertexFind *G__Lderived;
     G__Lderived=(HParticleVertexFind*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleVertexFind),G__get_linked_tagnum(&G__ParticleDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleVertexFind),G__get_linked_tagnum(&G__ParticleDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleVertexFind),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleVertexFind),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutRange))) {
     HParticleCutRange *G__Lderived;
     G__Lderived=(HParticleCutRange*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutRange),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutRange),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar))) {
     HParticleBtPar *G__Lderived;
     G__Lderived=(HParticleBtPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar),G__get_linked_tagnum(&G__ParticleDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar),G__get_linked_tagnum(&G__ParticleDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingInfo))) {
     HParticleBtRingInfo *G__Lderived;
     G__Lderived=(HParticleBtRingInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingInfo),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingF))) {
     HParticleBtRingF *G__Lderived;
     G__Lderived=(HParticleBtRingF*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingF),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtClusterF))) {
     HParticleBtClusterF *G__Lderived;
     G__Lderived=(HParticleBtClusterF*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtClusterF),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRing))) {
     HParticleBtRing *G__Lderived;
     G__Lderived=(HParticleBtRing*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRing),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBt))) {
     HParticleBt *G__Lderived;
     G__Lderived=(HParticleBt*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBt),G__get_linked_tagnum(&G__ParticleDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBt),G__get_linked_tagnum(&G__ParticleDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBt),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBt),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtAngleTrafo))) {
     HParticleBtAngleTrafo *G__Lderived;
     G__Lderived=(HParticleBtAngleTrafo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtAngleTrafo),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePathLengthCorr))) {
     HParticlePathLengthCorr *G__Lderived;
     G__Lderived=(HParticlePathLengthCorr*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePathLengthCorr),G__get_linked_tagnum(&G__ParticleDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePathLengthCorr),G__get_linked_tagnum(&G__ParticleDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePathLengthCorr),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePathLengthCorr),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0Reco))) {
     HParticleT0Reco *G__Lderived;
     G__Lderived=(HParticleT0Reco*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0Reco),G__get_linked_tagnum(&G__ParticleDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0Reco),G__get_linked_tagnum(&G__ParticleDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0Reco),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0Reco),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandgR))) {
     HParticleCut<HParticleCand> *G__Lderived;
     G__Lderived=(HParticleCut<HParticleCand>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandgR),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandgR),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandSimgR))) {
     HParticleCut<HParticleCandSim> *G__Lderived;
     G__Lderived=(HParticleCut<HParticleCandSim>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandSimgR),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandSimgR),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticlePairgR))) {
     HParticleCut<HParticlePair> *G__Lderived;
     G__Lderived=(HParticleCut<HParticlePair>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticlePairgR),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticlePairgR),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantPairgR))) {
     HParticleCut<HParticleGeantPair> *G__Lderived;
     G__Lderived=(HParticleCut<HParticleGeantPair>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantPairgR),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantPairgR),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantgR))) {
     HParticleCut<HParticleGeant> *G__Lderived;
     G__Lderived=(HParticleCut<HParticleGeant>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantgR),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantgR),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantDecaygR))) {
     HParticleCut<HParticleGeantDecay> *G__Lderived;
     G__Lderived=(HParticleCut<HParticleGeantDecay>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantDecaygR),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantDecaygR),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleEvtInfogR))) {
     HParticleCut<HParticleEvtInfo> *G__Lderived;
     G__Lderived=(HParticleCut<HParticleEvtInfo>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleEvtInfogR),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleEvtInfogR),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitgR))) {
     HParticleCut<HRichHit> *G__Lderived;
     G__Lderived=(HParticleCut<HRichHit>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitgR),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitgR),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitSimgR))) {
     HParticleCut<HRichHitSim> *G__Lderived;
     G__Lderived=(HParticleCut<HRichHitSim>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitSimgR),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitSimgR),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHEventHeadergR))) {
     HParticleCut<HEventHeader> *G__Lderived;
     G__Lderived=(HParticleCut<HEventHeader>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHEventHeadergR),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHEventHeadergR),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHVertexgR))) {
     HParticleCut<HVertex> *G__Lderived;
     G__Lderived=(HParticleCut<HVertex>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHVertexgR),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHVertexgR),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHGeantKinegR))) {
     HParticleCut<HGeantKine> *G__Lderived;
     G__Lderived=(HParticleCut<HGeantKine>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHGeantKinegR),G__get_linked_tagnum(&G__ParticleDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHGeantKinegR),G__get_linked_tagnum(&G__ParticleDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableParticleDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Stat_t",100,-1,0,-1);
   G__setnewtype(-1,"Statistics type (double)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ParticleDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ParticleDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__ParticleDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__ParticleDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__ParticleDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Cat_t",115,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Bool_t (*)(HParticleCand*)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,particleproperties>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,particleproperties>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,particleproperties,less<int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,particleproperties>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,particleproperties,less<TString> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,TString>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TString>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TString,less<int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,Int_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TArrayI>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TArrayI,less<TString> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,HCategory*>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOHCategorymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHCategorymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,HCategory*,less<TString> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOHCategorymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHCategorymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,HPartialEvent*>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOHPartialEventmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHPartialEventmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,HPartialEvent*,less<TString> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOHPartialEventmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHPartialEventmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,Int_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,int>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,int,less<TString> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TString>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TString,less<TString> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,Short_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOshortcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,short>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOshortcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,short,less<TString> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOshortcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantKine*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantRichPhoton*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantMdc*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantTof*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantRpc*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantWall*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantEmc*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantStart*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantFwDet*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HParticleCand*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TF1*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HMdcWireFit*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcWireFitmUcOallocatorlEHMdcWireFitmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcWireFitmUcOallocatorlEHMdcWireFitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcWireFitmUcOallocatorlEHMdcWireFitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcWireFitmUcOallocatorlEHMdcWireFitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcWireFitmUcOallocatorlEHMdcWireFitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HMdcCal1*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcCal1mUcOallocatorlEHMdcCal1mUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcCal1mUcOallocatorlEHMdcCal1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcCal1mUcOallocatorlEHMdcCal1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcCal1mUcOallocatorlEHMdcCal1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcCal1mUcOallocatorlEHMdcCal1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Bool_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEboolcOallocatorlEboolgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<closetrack>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEclosetrackcOallocatorlEclosetrackgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEclosetrackcOallocatorlEclosetrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEclosetrackcOallocatorlEclosetrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEclosetrackcOallocatorlEclosetrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEclosetrackcOallocatorlEclosetrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<trackinfo*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEtrackinfomUcOallocatorlEtrackinfomUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEtrackinfomUcOallocatorlEtrackinfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEtrackinfomUcOallocatorlEtrackinfomUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEtrackinfomUcOallocatorlEtrackinfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEtrackinfomUcOallocatorlEtrackinfomUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<candidate*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEcandidatemUcOallocatorlEcandidatemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEcandidatemUcOallocatorlEcandidatemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEcandidatemUcOallocatorlEcandidatemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEcandidatemUcOallocatorlEcandidatemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEcandidatemUcOallocatorlEcandidatemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Bool_t (*)(candidateSort*, candidateSort*)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<candidateSort*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEcandidateSortmUcOallocatorlEcandidateSortmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEcandidateSortmUcOallocatorlEcandidateSortmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEcandidateSortmUcOallocatorlEcandidateSortmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEcandidateSortmUcOallocatorlEcandidateSortmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEcandidateSortmUcOallocatorlEcandidateSortmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,HCategory*>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOHCategorymUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHCategorymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,HCategory*>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOHCategorymUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHCategorymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,HCategory*,less<int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOHCategorymUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHCategorymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Bool_t (*)(TObjArray*)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("queue<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_queuelEfloatcOdequelEfloatcOallocatorlEfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("queue<float>",117,G__get_linked_tagnum(&G__ParticleDictLN_queuelEfloatcOdequelEfloatcOallocatorlEfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HParticleCandSim*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<HGeantKine*,vector<HGeantKine*> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEHGeantKinemUcOvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<HGeantKine*,vector<HGeantKine*,allocator<HGeantKine*> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEHGeantKinemUcOvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<HGeantKine*,vector<HGeantKine*,allocator<HGeantKine*> >,less<HGeantKine*> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEHGeantKinemUcOvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,HParticleGeant*>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOHParticleGeantmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleGeantmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,HParticleGeant*>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOHParticleGeantmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleGeantmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,HParticleGeant*,less<int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOHParticleGeantmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleGeantmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HParticleGeantDecay*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleGeantDecaymUcOallocatorlEHParticleGeantDecaymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleGeantDecaymUcOallocatorlEHParticleGeantDecaymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleGeantDecaymUcOallocatorlEHParticleGeantDecaymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleGeantDecaymUcOallocatorlEHParticleGeantDecaymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleGeantDecaymUcOallocatorlEHParticleGeantDecaymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HParticleGeant*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleGeantmUcOallocatorlEHParticleGeantmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleGeantmUcOallocatorlEHParticleGeantmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleGeantmUcOallocatorlEHParticleGeantmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleGeantmUcOallocatorlEHParticleGeantmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleGeantmUcOallocatorlEHParticleGeantmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HParticlePair>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticlePaircOallocatorlEHParticlePairgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticlePaircOallocatorlEHParticlePairgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticlePaircOallocatorlEHParticlePairgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticlePaircOallocatorlEHParticlePairgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticlePaircOallocatorlEHParticlePairgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,vector<HParticleCand*> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HParticleCand*,allocator<HParticleCand*> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HParticleCand*,allocator<HParticleCand*> >,less<int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HParticlePair*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<HParticleCand*,vector<HParticlePair*> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEHParticleCandmUcOvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRcOlesslEHParticleCandmUgRcOallocatorlEpairlEHParticleCandmUsPconstcOvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<HParticleCand*,vector<HParticlePair*,allocator<HParticlePair*> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEHParticleCandmUcOvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRcOlesslEHParticleCandmUgRcOallocatorlEpairlEHParticleCandmUsPconstcOvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<HParticleCand*,vector<HParticlePair*,allocator<HParticlePair*> >,less<HParticleCand*> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEHParticleCandmUcOvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRcOlesslEHParticleCandmUgRcOallocatorlEpairlEHParticleCandmUsPconstcOvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HTofHit*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HTofCluster*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HRpcCluster*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HShowerHit*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HMdcSeg*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HRichHit*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,vector<HParticleCandSim*> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HParticleCandSim*,allocator<HParticleCandSim*> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HParticleCandSim*,allocator<HParticleCandSim*> >,less<int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HTofHitSim*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,vector<HTofHitSim*> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HTofHitSim*,allocator<HTofHitSim*> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HTofHitSim*,allocator<HTofHitSim*> >,less<int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HTofClusterSim*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,vector<HTofClusterSim*> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HTofClusterSim*,allocator<HTofClusterSim*> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HTofClusterSim*,allocator<HTofClusterSim*> >,less<int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HRpcClusterSim*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,vector<HRpcClusterSim*> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HRpcClusterSim*,allocator<HRpcClusterSim*> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HRpcClusterSim*,allocator<HRpcClusterSim*> >,less<int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HShowerHitSim*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,vector<HShowerHitSim*> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HShowerHitSim*,allocator<HShowerHitSim*> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HShowerHitSim*,allocator<HShowerHitSim*> >,less<int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HMdcSegSim*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,vector<HMdcSegSim*> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HMdcSegSim*,allocator<HMdcSegSim*> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HMdcSegSim*,allocator<HMdcSegSim*> >,less<int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HRichHitSim*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,vector<HRichHitSim*> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HRichHitSim*,allocator<HRichHitSim*> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HRichHitSim*,allocator<HRichHitSim*> >,less<int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,vector<Int_t> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<int,allocator<int> >,less<int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ULong64_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TF2*>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlETF2mUcOallocatorlETF2mUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlETF2mUcOallocatorlETF2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlETF2mUcOallocatorlETF2mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<TF2*> >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<TF2*,allocator<TF2*> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Int_t> >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<Int_t> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Float_t> >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<float,allocator<float> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<Float_t> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HParticleCand>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandcOallocatorlEHParticleCandgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandcOallocatorlEHParticleCandgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandcOallocatorlEHParticleCandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandcOallocatorlEHParticleCandgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandcOallocatorlEHParticleCandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pidvalues",117,G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0RecocLcLpidvalues),0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0Reco));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("startvalues",117,G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0RecocLcLstartvalues),0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0Reco));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("tofvalues",117,G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0RecocLcLtofvalues),0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0Reco));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("buffers",117,G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0RecocLcLbuffers),0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0Reco));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<Float_t>",117,G__get_linked_tagnum(&G__ParticleDictLN_listlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<list<Float_t> >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<list<float,allocator<float> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<list<Float_t> > >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<list<float,allocator<float> >,allocator<list<float,allocator<float> > > > >",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<tofvalues>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HParticleT0Reco::tofvalues>",117,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,momCut>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOHParticleT0RecocLcLmomCutcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleT0RecocLcLmomCutgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,HParticleT0Reco::momCut>",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOHParticleT0RecocLcLmomCutcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleT0RecocLcLmomCutgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,HParticleT0Reco::momCut,less<int> >",117,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOHParticleT0RecocLcLmomCutcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleT0RecocLcLmomCutgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Particle */
static void G__setup_memvarParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_Particle));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeSelMeta),-1,-2,1,G__FastAllocString(2048).Format("kNoUse=%lldLL",(long long)Particle::kNoUse).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeSelMeta),-1,-2,1,G__FastAllocString(2048).Format("kTofClst=%lldLL",(long long)Particle::kTofClst).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeSelMeta),-1,-2,1,G__FastAllocString(2048).Format("kTofHit1=%lldLL",(long long)Particle::kTofHit1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeSelMeta),-1,-2,1,G__FastAllocString(2048).Format("kTofHit2=%lldLL",(long long)Particle::kTofHit2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeSelMeta),-1,-2,1,G__FastAllocString(2048).Format("kRpcClst=%lldLL",(long long)Particle::kRpcClst).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeSelMeta),-1,-2,1,G__FastAllocString(2048).Format("kShowerHit=%lldLL",(long long)Particle::kShowerHit).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeDetBits),-1,-2,1,G__FastAllocString(2048).Format("kIsNotSet=%lldLL",(long long)Particle::kIsNotSet).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeDetBits),-1,-2,1,G__FastAllocString(2048).Format("kIsInRICHIPU=%lldLL",(long long)Particle::kIsInRICHIPU).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeDetBits),-1,-2,1,G__FastAllocString(2048).Format("kIsInOuterMDC=%lldLL",(long long)Particle::kIsInOuterMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeDetBits),-1,-2,1,G__FastAllocString(2048).Format("kIsInRICH=%lldLL",(long long)Particle::kIsInRICH).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeDetBits),-1,-2,1,G__FastAllocString(2048).Format("kIsInInnerMDC=%lldLL",(long long)Particle::kIsInInnerMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeDetBits),-1,-2,1,G__FastAllocString(2048).Format("kIsInSHOWER=%lldLL",(long long)Particle::kIsInSHOWER).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeDetBits),-1,-2,1,G__FastAllocString(2048).Format("kIsInTOF=%lldLL",(long long)Particle::kIsInTOF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeDetBits),-1,-2,1,G__FastAllocString(2048).Format("kIsInRPC=%lldLL",(long long)Particle::kIsInRPC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeDetBits),-1,-2,1,G__FastAllocString(2048).Format("kIsInMETA=%lldLL",(long long)Particle::kIsInMETA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeDetBits),-1,-2,1,G__FastAllocString(2048).Format("kIsGhost=%lldLL",(long long)Particle::kIsGhost).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeDetBits),-1,-2,1,G__FastAllocString(2048).Format("kIsInnerGhost=%lldLL",(long long)Particle::kIsInnerGhost).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeDetBits),-1,-2,1,G__FastAllocString(2048).Format("kIsOuterGhost=%lldLL",(long long)Particle::kIsOuterGhost).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeMatching),-1,-2,1,G__FastAllocString(2048).Format("kIsNoMatch=%lldLL",(long long)Particle::kIsNoMatch).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeMatching),-1,-2,1,G__FastAllocString(2048).Format("kIsRICHMDC=%lldLL",(long long)Particle::kIsRICHMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeMatching),-1,-2,1,G__FastAllocString(2048).Format("kIsRICHRK=%lldLL",(long long)Particle::kIsRICHRK).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeVertex),-1,-2,1,G__FastAllocString(2048).Format("kVertexCluster=%lldLL",(long long)Particle::kVertexCluster).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeVertex),-1,-2,1,G__FastAllocString(2048).Format("kVertexSegment=%lldLL",(long long)Particle::kVertexSegment).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeVertex),-1,-2,1,G__FastAllocString(2048).Format("kVertexParticle=%lldLL",(long long)Particle::kVertexParticle).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeVertex),-1,-2,1,G__FastAllocString(2048).Format("kVertexUser=%lldLL",(long long)Particle::kVertexUser).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeMomReco),-1,-2,1,G__FastAllocString(2048).Format("kMomSpline=%lldLL",(long long)Particle::kMomSpline).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeMomReco),-1,-2,1,G__FastAllocString(2048).Format("kMomRK=%lldLL",(long long)Particle::kMomRK).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeMomReco),-1,-2,1,G__FastAllocString(2048).Format("kMomKalman=%lldLL",(long long)Particle::kMomKalman).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePair),-1,-2,1,G__FastAllocString(2048).Format("kIsUS=%lldLL",(long long)Particle::kIsUS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePair),-1,-2,1,G__FastAllocString(2048).Format("kIsLSPos=%lldLL",(long long)Particle::kIsLSPos).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePair),-1,-2,1,G__FastAllocString(2048).Format("kIsLSNeg=%lldLL",(long long)Particle::kIsLSNeg).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsDoubleHitRICH=%lldLL",(long long)Particle::kIsDoubleHitRICH).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsDoubleHitInnerMDC=%lldLL",(long long)Particle::kIsDoubleHitInnerMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsDoubleHitOuterMDC=%lldLL",(long long)Particle::kIsDoubleHitOuterMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsDoubleHitMETA=%lldLL",(long long)Particle::kIsDoubleHitMETA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsBestHitRICH=%lldLL",(long long)Particle::kIsBestHitRICH).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsBestHitInnerMDC=%lldLL",(long long)Particle::kIsBestHitInnerMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsBestHitOuterMDC=%lldLL",(long long)Particle::kIsBestHitOuterMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsBestHitMETA=%lldLL",(long long)Particle::kIsBestHitMETA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsBestRK=%lldLL",(long long)Particle::kIsBestRK).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsBestRKRKMETA=%lldLL",(long long)Particle::kIsBestRKRKMETA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsBestRKRKMETARadius=%lldLL",(long long)Particle::kIsBestRKRKMETARadius).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsBestUser=%lldLL",(long long)Particle::kIsBestUser).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsAcceptedHitRICH=%lldLL",(long long)Particle::kIsAcceptedHitRICH).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsAcceptedHitRICHMDC=%lldLL",(long long)Particle::kIsAcceptedHitRICHMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsAcceptedHitInnerMDC=%lldLL",(long long)Particle::kIsAcceptedHitInnerMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsAcceptedHitOuterMDC=%lldLL",(long long)Particle::kIsAcceptedHitOuterMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsAcceptedHitMETA=%lldLL",(long long)Particle::kIsAcceptedHitMETA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsAcceptedRKMETA=%lldLL",(long long)Particle::kIsAcceptedRKMETA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsAcceptedRKRICH=%lldLL",(long long)Particle::kIsAcceptedRKRICH).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsAcceptedRK=%lldLL",(long long)Particle::kIsAcceptedRK).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsAcceptedRKRKMETA=%lldLL",(long long)Particle::kIsAcceptedRKRKMETA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsAcceptedRKRKMETARadius=%lldLL",(long long)Particle::kIsAcceptedRKRKMETARadius).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsAcceptedUser=%lldLL",(long long)Particle::kIsAcceptedUser).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsLepton=%lldLL",(long long)Particle::kIsLepton).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsUsed=%lldLL",(long long)Particle::kIsUsed).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeFlagBits),-1,-2,1,G__FastAllocString(2048).Format("kIsRejected=%lldLL",(long long)Particle::kIsRejected).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kSameRICH=%lldLL",(long long)Particle::kSameRICH).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kSameInnerMDC=%lldLL",(long long)Particle::kSameInnerMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kSameOuterMDC=%lldLL",(long long)Particle::kSameOuterMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kSameMETA=%lldLL",(long long)Particle::kSameMETA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kSamePosPolarity=%lldLL",(long long)Particle::kSamePosPolarity).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kSameNegPolarity=%lldLL",(long long)Particle::kSameNegPolarity).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kSamePolarity=%lldLL",(long long)Particle::kSamePolarity).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kRICH2=%lldLL",(long long)Particle::kRICH2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kFittedInnerMDC2=%lldLL",(long long)Particle::kFittedInnerMDC2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kFittedOuterMDC2=%lldLL",(long long)Particle::kFittedOuterMDC2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kOuterMDC2=%lldLL",(long long)Particle::kOuterMDC2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kRK2=%lldLL",(long long)Particle::kRK2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kMETA2=%lldLL",(long long)Particle::kMETA2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kIsLepton2=%lldLL",(long long)Particle::kIsLepton2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kIsUsed2=%lldLL",(long long)Particle::kIsUsed2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoSameRICH=%lldLL",(long long)Particle::kNoSameRICH).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoSameInnerMDC=%lldLL",(long long)Particle::kNoSameInnerMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoSameOuterMDC=%lldLL",(long long)Particle::kNoSameOuterMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoSameMETA=%lldLL",(long long)Particle::kNoSameMETA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoSamePosPolarity=%lldLL",(long long)Particle::kNoSamePosPolarity).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoSameNegPolarity=%lldLL",(long long)Particle::kNoSameNegPolarity).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoSamePolarity=%lldLL",(long long)Particle::kNoSamePolarity).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoRICH2=%lldLL",(long long)Particle::kNoRICH2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoFittedInnerMDC2=%lldLL",(long long)Particle::kNoFittedInnerMDC2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoFittedOuterMDC2=%lldLL",(long long)Particle::kNoFittedOuterMDC2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoOuterMDC2=%lldLL",(long long)Particle::kNoOuterMDC2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoRK2=%lldLL",(long long)Particle::kNoRK2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoMETA2=%lldLL",(long long)Particle::kNoMETA2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoIsLepton2=%lldLL",(long long)Particle::kNoIsLepton2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoIsUsed2=%lldLL",(long long)Particle::kNoIsUsed2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoUseRICH=%lldLL",(long long)Particle::kNoUseRICH).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase1=%lldLL",(long long)Particle::kPairCase1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase2=%lldLL",(long long)Particle::kPairCase2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase3=%lldLL",(long long)Particle::kPairCase3).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase4=%lldLL",(long long)Particle::kPairCase4).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase5=%lldLL",(long long)Particle::kPairCase5).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase6=%lldLL",(long long)Particle::kPairCase6).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase7=%lldLL",(long long)Particle::kPairCase7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase8=%lldLL",(long long)Particle::kPairCase8).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase9=%lldLL",(long long)Particle::kPairCase9).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase10=%lldLL",(long long)Particle::kPairCase10).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase11=%lldLL",(long long)Particle::kPairCase11).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase12=%lldLL",(long long)Particle::kPairCase12).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase13=%lldLL",(long long)Particle::kPairCase13).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase14=%lldLL",(long long)Particle::kPairCase14).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase15=%lldLL",(long long)Particle::kPairCase15).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase16=%lldLL",(long long)Particle::kPairCase16).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase17=%lldLL",(long long)Particle::kPairCase17).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase18=%lldLL",(long long)Particle::kPairCase18).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase19=%lldLL",(long long)Particle::kPairCase19).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase20=%lldLL",(long long)Particle::kPairCase20).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase21=%lldLL",(long long)Particle::kPairCase21).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase22=%lldLL",(long long)Particle::kPairCase22).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase23=%lldLL",(long long)Particle::kPairCase23).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase24=%lldLL",(long long)Particle::kPairCase24).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase25=%lldLL",(long long)Particle::kPairCase25).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase26=%lldLL",(long long)Particle::kPairCase26).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase27=%lldLL",(long long)Particle::kPairCase27).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase28=%lldLL",(long long)Particle::kPairCase28).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase29=%lldLL",(long long)Particle::kPairCase29).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase30=%lldLL",(long long)Particle::kPairCase30).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase31=%lldLL",(long long)Particle::kPairCase31).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLePairCase),-1,-2,1,G__FastAllocString(2048).Format("kPairCase32=%lldLL",(long long)Particle::kPairCase32).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kGoodVertexClust=%lldLL",(long long)Particle::kGoodVertexClust).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kGoodVertexCand=%lldLL",(long long)Particle::kGoodVertexCand).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kGoodSTART=%lldLL",(long long)Particle::kGoodSTART).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoPileUpSTART=%lldLL",(long long)Particle::kNoPileUpSTART).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoPileUpMETA=%lldLL",(long long)Particle::kNoPileUpMETA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoPileUpMDC=%lldLL",(long long)Particle::kNoPileUpMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoFlashMDC=%lldLL",(long long)Particle::kNoFlashMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kGoodMDCMult=%lldLL",(long long)Particle::kGoodMDCMult).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kGoodMDCMIPSMult=%lldLL",(long long)Particle::kGoodMDCMIPSMult).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kGoodLepMult=%lldLL",(long long)Particle::kGoodLepMult).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kGoodTRIGGER=%lldLL",(long long)Particle::kGoodTRIGGER).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kGoodSTART2=%lldLL",(long long)Particle::kGoodSTART2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kNoVETO=%lldLL",(long long)Particle::kNoVETO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kGoodSTARTVETO=%lldLL",(long long)Particle::kGoodSTARTVETO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeEventSelect),-1,-2,1,G__FastAllocString(2048).Format("kGoodSTARTMETA=%lldLL",(long long)Particle::kGoodSTARTMETA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeBeamTime),-1,-2,1,G__FastAllocString(2048).Format("kUnknownBeam=%lldLL",(long long)Particle::kUnknownBeam).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeBeamTime),-1,-2,1,G__FastAllocString(2048).Format("kApr12=%lldLL",(long long)Particle::kApr12).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeBeamTime),-1,-2,1,G__FastAllocString(2048).Format("kJul14=%lldLL",(long long)Particle::kJul14).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_ParticlecLcLeBeamTime),-1,-2,1,G__FastAllocString(2048).Format("kAug14=%lldLL",(long long)Particle::kAug14).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCand */
static void G__setup_memvarHParticleCand(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand));
   { HParticleCand *p; p=(HParticleCand*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fFlags=",0,"bit flags for cleaning");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fPID=",0,"PID of particle");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fSector=",0,"sector information from MDC (0..5)                              (3bit) 0-7");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fSystem=",0,"0 == TOFino, 1 == TOF                                           (2bit) 0-3");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fCharge=",0,"particle's charge (+1,-1)                                       (1bit) 0-1");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fTofRec=",0,"0 -> time-of-flight reconstruction was not succesfull,          (2bit) 0-3");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fRingCorr=",0,"ring - mdc correlation");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fIndex=",0,"index in category");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fBeta=",0,"particle's beta");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fMomentum=",0,"particle's momentum [MeV]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fMass2=",0,"particle's mass^2 [MeV^2]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fPhi=",0,"track's phi in cave coordinates (0..360 deg)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fTheta=",0,"track's theta in cave coordinates (0..90 deg)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fR=",0,"distance of closest point to beamline [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fZ=",0,"z coordinate of closest point to beamline [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fChi2=",0,"tracking chi^2 (1e6 == tracking failed)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fDistanceToMetaHit=",0,"track's distance to meta hit [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fMdcdEdx=",0,"Mdc dE/dx for inner and outer segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fTofdEdx=",0,"Tof dE/dx");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fInnerSegmentChi2=",0,"MDC segment fitter chi^2 (-1 if not fitted)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fOuterSegmentChi2=",0,"MDC segment fitter chi^2 (-1 if not fitted)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fAngleToNearbyFittedInner=",0,"angle to closest fitted inner segment (negative angles indicate segments which belong to hadrons or neighbouring tracks) [deg]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fAngleToNearbyUnfittedInner=",0,"angle to closest unfitted inner segment (negative angles indicate segments which belong to hadrons or neighbouring tracks) [deg]");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fRingNumPads=",0,"number of fired pads typ. (-1 - 100) (OLD) | number of Cal objects (NEW)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fRingAmplitude=",0,"typ. (-1 - 4000)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fRingHouTra=",0,"typ. (-1 - 5000)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fRingPatternMatrix=",0,"pattern matrix of ring");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fRingCentroid=",0,"ring centroid (OLD) | radius (NEW)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fRichPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fRichTheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRingChi2=",0,"chi2 of ring fit (NEW)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fMetaMatchQuality=",0,"distance of the outer segment to the meta hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fMetaMatchQualityShower=",0,"distance of the outer segment to the shower hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fMetaMatchRadius=",0,"distance of the outer segment to the meta hit   [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fMetaMatchRadiusShower=",0,"distance of the outer segment to the shower hit [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fRkMetaDx=",0,"distance in X of outer segment to used Meta  [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fRkMetaDy=",0,"distance in Y of outer segment to used Meta  [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fBetaOrg=",0,"particle's beta  before recalc");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fMomentumOrg=",0,"particle's momentum [MeV]  before correction");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fDistanceToMetaHitOrg=",0,"track's distance to meta hit [mm]  before correction");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fShowerSum0=",0,"charge sum of PreShower cluster (0)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fShowerSum1=",0,"charge sum of PreShower cluster (1)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,2,"fShowerSum2=",0,"charge sum of PreShower cluster (2)");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fSelectedMeta=",0,"which Metahit has been used  kNoUse,kTofClst,kTofHit1,kTofHit2,kRpcClst,kShowerHit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fMetaInd=",0,"index of Metamatch");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fRichInd=",0,"index of RICH hit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fRichBTInd=",0,"index of RICH BT hit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fInnerSegInd=",0,"index of inner MDC Segment");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fOuterSegInd=",0,"index of outer MDC Segment");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fRpcInd=",0,"index of RPC Hit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fShowerInd=",0,"index of SHOWER hit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fTofHitInd=",0,"index of TOF hit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fTofClstInd=",0,"index of TOF cluster");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fLayers=",0,"bit array for fired MDC layers  (1-24 bit layers + 31-29 bit fake reject + 28,27,26 bit clusOffvertex,vertex,primary)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fWires=",0,"lower 10bits for wires per segment , 11,12,13,14 at edge");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fmetaAddress=",0,"store adress (mod+cell / col+cell for TOF+RPC hit 0 and 1)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCandSim */
static void G__setup_memvarHParticleCandSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim));
   { HParticleCandSim *p; p=(HParticleCandSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantPID=",0,"GEANT PID value");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantTrack=",0,"GEANT track number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fGeantCorrTrackIds=",0,"Geant number of correlated track ids (which detector has seen this track?)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantxMom=",0,"GEANT x mom [Mev/c]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantyMom=",0,"GEANT y mom [Mev/c]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantzMom=",0,"GEANT z mom [Mev/c]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantxVertex=",0,"GEANT x vertex [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantyVertex=",0,"GEANT y vertex [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantzVertex=",0,"GEANT z vertex [mm]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantParentTrackNum=",0,"GEANT parent track number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantParentPID=",0,"GEANT parent track PID");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantGrandParentTrackNum=",0,"GEANT grand parent track number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantGrandParentPID=",0,"GEANT grand parent track PID");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantCreationMechanism=",0,"GEANT creatiom mechanism");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantMediumNumber=",0,"GEANT medium number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantgeninfo=",0,"GEANT info on particle generation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantgeninfo1=",0,"GEANT info on particle generation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantgeninfo2=",0,"GEANT info on particle generation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantgenweight=",0,"GEANT info on particle generation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantTrackRich[3]=",0,"GEANT tracks in rich");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantTrackMeta[4]=",0,"GEANT tracks in tof or rpc");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantTrackShower[4]=",0,"GEANT tracks in Shower");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantTrackInnerMdc[2]=",0,"GEANT tracks in inner MDC seg");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantTrackOuterMdc[2]=",0,"GEANT tracks in outer MDC seg");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"fGeantTrackInnerMdcN[2]=",0,"GEANT number of wires contributing for tracks in inner MDC seg");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"fGeantTrackOuterMdcN[2]=",0,"GEANT number of wires contributing for tracks in outer MDC seg");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleWallHit */
static void G__setup_memvarHParticleWallHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHit));
   { HParticleWallHit *p; p=(HParticleWallHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fWallCell=",0,"cell number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWallCharge=",0,"callibrated charge");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWallTime=",0,"callibrated time-of-flight");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWallXlab=",0,"x position in lab frame");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWallYlab=",0,"y position in lab frame");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWallZlab=",0,"z position in lab frame");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleWallHitSim */
static void G__setup_memvarHParticleWallHitSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHitSim));
   { HParticleWallHitSim *p; p=(HParticleWallHitSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantPID=",0,"GEANT PID value");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantxMom=",0,"GEANT x momentum [MeV/c]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantyMom=",0,"GEANT y momentum [MeV/c]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantzMom=",0,"GEANT z momentum [MeV/c]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantxVertex=",0,"GEANT x vertex   [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantyVertex=",0,"GEANT y vertex   [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantzVertex=",0,"GEANT z vertex   [mm]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantPartentTrackNum=",0,"GEANT parent track number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantCreationMechanism=",0,"GEANT creation mechanism");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fGeantMediumNumber=",0,"GEANT medium number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantgeninfo=",0,"GEANT info on particle generation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantgeninfo1=",0,"GEANT info on particle generation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantgeninfo2=",0,"GEANT info on particle generation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGeantgenweight=",0,"GEANT info on particle generation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCal */
static void G__setup_memvarHParticleCal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCal));
   { HParticleCal *p; p=(HParticleCal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTOFModule=",0,"module number of hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTOFCell=",0,"cell number of hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMETACell=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,4,"fTOFLeftAmp=",0,"left amp of TOF signal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,4,"fTOFRightAmp=",0,"left amp of TOF signal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,4,"fMETALocX=",0,"x position hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,4,"fMETALocY=",0,"y position hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleMdc */
static void G__setup_memvarHParticleMdc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleMdc));
   { HParticleMdc *p; p=(HParticleMdc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fIndex=",0,"own index");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMdcFlag=",0,"Cluster info: number of cells, bins and merged clusters");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fMdc1x=",0,"x1,y1 - cross point of the segment line with first mdc layer (in sec.coor.sys.)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fMdc1y=",0,"Convert to mm: Float_t(x1)*0.1; Float_t(y1)*0.1;");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fMdc2x=",0,"x2,y2 - cross point of the segment line with second mdc layer (in sec.coor.sys.)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fMdc2y=",0,"Convert to mm: Float_t(x2)*0.1; Float_t(y2)*0.1;");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fMdc3x=",0,"x1,y1 - cross point of the segment line with third mdc layer (in sec.coor.sys.)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fMdc3y=",0,"Convert to mm: Float_t(x1)*0.1; Float_t(y1)*0.1;");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fMdc4x=",0,"x2,y2 - cross point of the segment line with 4th mdc layer (in sec.coor.sys.)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fMdc4y=",0,"Convert to mm: Float_t(x2)*0.1; Float_t(y2)*0.1;");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,4,"dedxInner=",0,"mean value of t2-t1 for inner segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,4,"dedxSigmaInner=",0,"sigma of t2-t1 distribution in inner segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,4,"dedxOuter=",0,"mean value of t2-t1 for outer segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,4,"dedxSigmaOuter=",0,"sigma of t2-t1 distribution in outer segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,4,"dedxCombined=",0,"mean value of t2-t1 for inner+outer segment");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,4,"dedxSigmaCombined=",0,"sigma of t2-t1 distribution in inner+outer segment");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"dedxNWireCutCombined=",0,"number of wires in inner+outer segment cutted by truncated mean procedure");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"dedxNWireCutInner=",0,"number of wires in inner segment cutted by truncated mean procedure");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"dedxNWireCutOuter=",0,"number of wires in outer segment cutted by truncated mean procedure");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,4,"dedx[4]=",0,"mean value of t2-t1 per module");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("SmallFloat"),-1,4,"dedxSigma[4]=",0,"sigma of t2-t1 distribution per module");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"dedxNWire[4]=",0,"number of wires per module before truncated mean procedure");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"dedxNWireCut[4]=",0,"number of wires per module cutted by truncated mean procedure");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleEvtInfo */
static void G__setup_memvarHParticleEvtInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfo));
   { HParticleEvtInfo *p; p=(HParticleEvtInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aRichMult[6]=",0,"RICH rings");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aRichCorrMult[6]=",0,"correlated RICH rings with a RK track");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aRichClusMult[6]=",0,"RICH charged particle clusters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aMdcClusMult[6][2]=",0,"MDC cluster (segment wise)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aMdcSegFittedMult[6][2]=",0,"fitted MDC segments");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aMdcSegUnfittedMult[6][2]=",0,"unfitted MDc segments");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aTofMult[6]=",0,"TOF hit multiplicity");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aShowerMult[6]=",0,"Shower/TOFino hit multiplicity");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aRpcMult[6]=",0,"RPC cluster multiplicity");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aRpcMultHit[6]=",0,"RPC hit multiplicity");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aTofMultCut[6]=",0,"TOF hit multiplicity after cut < 35 ns");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aRpcMultCut[6]=",0,"RPC cluster multiplicity  after cut < 25 ns");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aRpcMultHitCut[6]=",0,"RPC hit multiplicity      after cut < 25 ns");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aParticleCandMult[6]=",0,"Particle Candidate entries");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aSelectedParticleCandMult[6]=",0,"selected ParticleTrack Candidate entries (flagged kIsUsed)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aPrimaryParticleCandMult[6]=",0,"selected ParticleTrack Candidate from primary vertex entries (flagged kIsUsed)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"aMdcWires[6][4][6]=",0,"all wire of MDC fired in the event (sec,mod,lay)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"aMdcWiresUnused[6][4][6]=",0,"all wire of MDC fired in the event which are not used inside segments (sec,mod,lay)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"aMdcWiresRaw[6][4][6]=",0,"all wire of MDC fired before timecuts (sec,mod,lay)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nFWallMult=",0,"forward wall hits");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fFWallVector=",0,"not yet implemented: vector size of all FW positions");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRPlanePhi=",0,"not yet implemented: phi of reaction plane");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fwallPhiA=",0,"wall sample A phi");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fwallPhiB=",0,"wall sample B phi");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fwallPhiAB=",0,"delta phi sample A-B");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fwallNA=",0,"n hits in sample A");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fwallNB=",0,"n hits in sample B");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fEventSelector=",0,"flags for eventselection (hparticeldef.h eEventSelect)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanMult=",0,"floating mean for all selected cands");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanMIPSMult=",0,"floating mean for all selected mips cands");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanLEPMult=",0,"floating mean for all selected lep cands");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanMultSec[6]=",0,"floating mean for all selected cands per sector");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanMIPSMultSec[6]=",0,"floating mean for all selected mips cands per sector");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanLEPMultSec[6]=",0,"floating mean for all selected mips cands per sector");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigmaMult=",0,"floating sigma for all selected cands");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigmaMIPSMult=",0,"floating sigma for all selected mips cands");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigmaLEPMult=",0,"floating sigma for all selected lep cands");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigmaMultSec[6]=",0,"floating sigma for all selected cands per sector");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigmaMIPSMultSec[6]=",0,"floating sigma for all selected mips cands per sector");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigmaLEPMultSec[6]=",0,"floating sigma for all selected mips cands per sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticlePair */
static void G__setup_memvarHParticlePair(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePair));
   { HParticlePair *p; p=(HParticlePair*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand),-1,-1,2,"fcand[2]=",0,"! pointer to cand1 (reference: should be a lepton candidate) and cand2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticlePair),-1,-1,2,"fpair[2]=",0,"! pointer to cand1 and cand2  from pairs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TLorentzVector),-1,-1,2,"fc[2]=",0,"local copy of lorentz vector of cand1 and cand2");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fpairFlags=",0,"pair classifier");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fstatusFlags=",0,"bit  0x01   true cand1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPID[2]=",0,"assigned PID for cand1 and cand2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMotherPID=",0,"assigned PID for Mother");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"foAngle=",0,"opening angle of pair [deg]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsSimulation=",0,"kTRUE if HParticleCandSim is used");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector),-1,-1,2,"fEventVertex=",0,"used event vertex");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector),-1,-1,2,"fDecayVertex=",0,"secondary vertex of both candidates");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fVerMinDistCand[2]=",0,"vertex cut vars : mindist cand1 and cand2 to event vertex");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fVerMinDistMother=",0,"vertex cut vars : mindist mother to event vertex");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fVerDistMother=",0,"vertex cut vars");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMinDistCandidates=",0,"vertex cut vars : mindist between cand1 and cand2");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"fDoMomCorrection=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleTool */
static void G__setup_memvarHParticleTool(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTool));
   { HParticleTool *p; p=(HParticleTool*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"rpcCellHalfWidth[192]=",0,"! half with of rpc cell for matching [col*32+cell]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"tofCellHalfWidth[64]=",0,"! half with of tof cell for matching [mod*8+cell]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"scaleDyPars[4]=",0,"! params for TF1 gScaledy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TF1),-1,-2,4,"gf1=",0,"helper functions for genereric intersection of tf1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TF1),-1,-2,4,"gf2=",0,"helper functions for genereric intersection of tf1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TF1),-1,-2,4,"gfsum=",0,"helper functions for genereric intersection of tf1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TF1),-1,-2,4,"gScaledy=",0,"scaling function (1/p) for dy matching boundary cut");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TF1),-1,-2,4,"fdxoffset=",0,"tof dx offset function");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TF1),-1,-2,4,"fdxsigma=",0,"tof dx sigma function");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"parsSX[6][8][8][3]=",0,"tof sigma dx normalization parameters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"parsDX[6][8][8][5]=",0,"tof offset dx normalization parameters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"parsSX_apr12[6][8][8][3]=",0,"tof sigma dx normalization parameters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"parsDX_apr12[6][8][8][5]=",0,"tof offset dx normalization parameters");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-2,4,"beamtime_tof=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* pointers */
static void G__setup_memvarpointers(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_pointers));
   { pointers *p; p=(pointers*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pMdcTrk)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HMdcTrkCand),-1,-1,1,"pMdcTrk=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pSeg1)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HMdcSegSim),-1,-1,1,"pSeg1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pSeg2)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HMdcSegSim),-1,-1,1,"pSeg2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pRichHit)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HRichHitSim),-1,-1,1,"pRichHit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pTofClst)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HTofClusterSim),-1,-1,1,"pTofClst=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pTofHit1)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HTofHitSim),-1,-1,1,"pTofHit1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pTofHit2)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HTofHitSim),-1,-1,1,"pTofHit2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pRpcClst)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HRpcClusterSim),-1,-1,1,"pRpcClst=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pShowerHit)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HShowerHitSim),-1,-1,1,"pShowerHit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pRk)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HRKTrackB),-1,-1,1,"pRk=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pSpline)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HSplineTrack),-1,-1,1,"pSpline=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pKalman)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HKalTrack),-1,-1,1,"pKalman=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* closetrack */
static void G__setup_memvarclosetrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_closetrack));
   { closetrack *p; p=(closetrack*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ind)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ind=",0,"index of candidate");
   G__memvar_setup((void*)((long)(&p->oAngle)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"oAngle=",0,"opening angle to candidate");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* closeVec */
static void G__setup_memvarcloseVec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_closeVec));
   { closeVec *p; p=(closeVec*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->tracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEclosetrackcOallocatorlEclosetrackgRsPgR),G__defined_typename("vector<closetrack>"),-1,1,"tracks=",0,"vector of closetrack objects (index,oAngle)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* trackinfo */
static void G__setup_memvartrackinfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_trackinfo));
   { trackinfo *p; p=(trackinfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->tr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"tr=",0,"GEANT tr number");
   G__memvar_setup((void*)((long)(&p->n)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"n=",0,"n-times contributing to hit");
   G__memvar_setup((void*)((long)(&p->flag)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flag=",0,"flag in which detectors the track has been seen");
   G__memvar_setup((void*)((long)(&p->weight)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"weight=",0,"weight of tr in hit");
   G__memvar_setup((void*)((long)(&p->scale)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"scale=",0,"scale the weight by this factor");
   G__memvar_setup((void*)((long)(&p->ndet)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ndet=",0,"number of detectors for this track");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* tracksVec */
static void G__setup_memvartracksVec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_tracksVec));
   { tracksVec *p; p=(tracksVec*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->tracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEtrackinfomUcOallocatorlEtrackinfomUgRsPgR),G__defined_typename("vector<trackinfo*>"),-1,1,"tracks=",0,"vector of trackinfo pointer (tr number, n times, flag)");
   G__memvar_setup((void*)((long)(&p->sum)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sum=",0,"sum of n");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* mdc_trk */
static void G__setup_memvarmdc_trk(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_mdc_trk));
   { mdc_trk *p; p=(mdc_trk*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ind)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ind=",0,"index of HMdcTrkCand");
   G__memvar_setup((void*)((long)(&p->dedx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dedx=",0,"Mdc dE/dx for inner + outer segment");
   G__memvar_setup((void*)((long)(&p->dedx0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dedx0=",0,"Mdc dE/dx for inner segment");
   G__memvar_setup((void*)((long)(&p->dedx1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dedx1=",0,"Mdc dE/dx for outer segment");
   G__memvar_setup((void*)((long)(&p->seg1fake)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"seg1fake=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->seg2fake)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"seg2fake=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->allfake)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"allfake=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* mdc_seg */
static void G__setup_memvarmdc_seg(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_mdc_seg));
   { mdc_seg *p; p=(mdc_seg*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ind)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ind=",0,"index of seg");
   G__memvar_setup((void*)((long)(&p->layers)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"layers=",0,"layer bits");
   G__memvar_setup((void*)((long)(&p->wires)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"wires=",0,"wires per segment");
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chi2=",0,"chi2 of segment fitter");
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,"track's phi in cave coordinates (0..360 deg)");
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"theta=",0,"track's theta in cave coordinates (0..90 deg)");
   G__memvar_setup((void*)((long)(&p->r)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"r=",0,"distance of closest point to beamline [mm]");
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z=",0,"z coordinate of closest point to beamline [mm]");
   G__memvar_setup((void*)((long)(&p->offvertexclust)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"offvertexclust=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rpc_clst */
static void G__setup_memvarrpc_clst(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_rpc_clst));
   { rpc_clst *p; p=(rpc_clst*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ind)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ind=",0,"Index of HRpcCluster object");
   G__memvar_setup((void*)((long)(&p->quality)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"quality=",0,"Matching quality");
   G__memvar_setup((void*)((long)(&p->dx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dx=",0,"Deviation in X-coordinate");
   G__memvar_setup((void*)((long)(&p->dy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dy=",0,"Deviation in Y-coordinate");
   G__memvar_setup((void*)((long)(&p->tof)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"tof=",0,"particle time of flight");
   G__memvar_setup((void*)((long)(&p->nhits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nhits=",0,"number of cells hit (1 or 2)");
   G__memvar_setup((void*)((long)(&p->metaAddress)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"metaAddress=",0,"mod+cell of first and second hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* tof_hit */
static void G__setup_memvartof_hit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_tof_hit));
   { tof_hit *p; p=(tof_hit*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ind)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ind=",0,"Index of HTofHit object");
   G__memvar_setup((void*)((long)(&p->quality)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"quality=",0,"Matching quality");
   G__memvar_setup((void*)((long)(&p->dx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dx=",0,"Deviation in X-coordinate");
   G__memvar_setup((void*)((long)(&p->dy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dy=",0,"Deviation in Y-coordinate");
   G__memvar_setup((void*)((long)(&p->dedx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dedx=",0,"Tof dE/dx");
   G__memvar_setup((void*)((long)(&p->tof)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"tof=",0,"particle time of flight");
   G__memvar_setup((void*)((long)(&p->metaAddress)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"metaAddress=",0,"mod+cell of first and second hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* shower_hit */
static void G__setup_memvarshower_hit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_shower_hit));
   { shower_hit *p; p=(shower_hit*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ind)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ind=",0,"Index of HShowerHit object");
   G__memvar_setup((void*)((long)(&p->quality)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"quality=",0,"Matching quality");
   G__memvar_setup((void*)((long)(&p->matchradius)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"matchradius=",0,"Matching quality");
   G__memvar_setup((void*)((long)(&p->dx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dx=",0,"Deviation in X-coordinate");
   G__memvar_setup((void*)((long)(&p->dy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dy=",0,"Deviation in Y-coordinate");
   G__memvar_setup((void*)((long)(&p->showerSum0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"showerSum0=",0,"charge sum of PreShower cluster (0)");
   G__memvar_setup((void*)((long)(&p->showerSum1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"showerSum1=",0,"charge sum of PreShower cluster (1)");
   G__memvar_setup((void*)((long)(&p->showerSum2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"showerSum2=",0,"charge sum of PreShower cluster (2)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rich_hit */
static void G__setup_memvarrich_hit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_rich_hit));
   { rich_hit *p; p=(rich_hit*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ind)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ind=",0,"Index of HRichHit object");
   G__memvar_setup((void*)((long)(&p->numPads)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"numPads=",0,"number of fired pads typ. (-1 - 100)");
   G__memvar_setup((void*)((long)(&p->amplitude)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"amplitude=",0,"typ. (-1 - 4000)");
   G__memvar_setup((void*)((long)(&p->houTra)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"houTra=",0,"typ. (-1 - 5000)");
   G__memvar_setup((void*)((long)(&p->patternMatrix)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"patternMatrix=",0,"pattern matrix of ring");
   G__memvar_setup((void*)((long)(&p->centroid)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"centroid=",0,"ring centroid");
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,"rich phi   0-360 deg");
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"theta=",0,"rich theta 0-90 deg");
   G__memvar_setup((void*)((long)(&p->centerx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"centerx=",0,"center position in X [mm]");
   G__memvar_setup((void*)((long)(&p->centery)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"centery=",0,"center position in Y [mm]");
   G__memvar_setup((void*)((long)(&p->radius)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"radius=",0,"radius of ring");
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chi2=",0,"chi2 of ring fit");
   G__memvar_setup((void*)((long)(&p->ncals)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ncals=",0,"number of cal objects used");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* spline_track */
static void G__setup_memvarspline_track(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_spline_track));
   { spline_track *p; p=(spline_track*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ind)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ind=",0,"Index of HSplineTrack object");
   G__memvar_setup((void*)((long)(&p->p)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"p=",0,"particle's momentum [MeV]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rk_track */
static void G__setup_memvarrk_track(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_rk_track));
   { rk_track *p; p=(rk_track*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->usedMeta)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"usedMeta=",0,"see enum selMeta");
   G__memvar_setup((void*)((long)(&p->selectTof)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"selectTof=",0,"see enum selMeta");
   G__memvar_setup((void*)((long)(&p->ind)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ind=",0,"Index of HRKBaseTrack object");
   G__memvar_setup((void*)((long)(&p->beta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"beta=",0,"particle's beta");
   G__memvar_setup((void*)((long)(&p->p)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"p=",0,"particle's momentum [MeV]");
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,"particle's mass [MeV]");
   G__memvar_setup((void*)((long)(&p->path)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"path=",0,"length of particle trajetory [mm]");
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chi2=",0,"chi2 of fit");
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,"track's phi in cave coordinates (0..360 deg)");
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"theta=",0,"track's theta in cave coordinates (0..90 deg)");
   G__memvar_setup((void*)((long)(&p->r)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"r=",0,"distance of closest point to beamline [mm]");
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z=",0,"z coordinate of closest point to beamline [mm]");
   G__memvar_setup((void*)((long)(&p->pol)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pol=",0,"polarity");
   G__memvar_setup((void*)((long)(&p->quality)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"quality=",0,"quality rk -Meta matching");
   G__memvar_setup((void*)((long)(&p->matchradius)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"matchradius=",0,"rk -Meta matching sqrt(dx2+dy2) [mm]");
   G__memvar_setup((void*)((long)(&p->metadx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"metadx=",0,"rk -Meta matching in x [mm]");
   G__memvar_setup((void*)((long)(&p->metady)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"metady=",0,"rk -Meta matching in y [mm]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* kal_track */
static void G__setup_memvarkal_track(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_kal_track));
   { kal_track *p; p=(kal_track*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->usedMeta)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"usedMeta=",0,"see enum selMeta");
   G__memvar_setup((void*)((long)(&p->selectTof)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"selectTof=",0,"see enum selMeta");
   G__memvar_setup((void*)((long)(&p->ind)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ind=",0,"Index of HRKBaseTrack object");
   G__memvar_setup((void*)((long)(&p->beta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"beta=",0,"particle's beta");
   G__memvar_setup((void*)((long)(&p->p)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"p=",0,"particle's momentum [MeV]");
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,"particle's mass [MeV]");
   G__memvar_setup((void*)((long)(&p->path)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"path=",0,"length of particle trajetory [mm]");
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chi2=",0,"chi2 of fit");
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,"track's phi in cave coordinates (0..360 deg)");
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"theta=",0,"track's theta in cave coordinates (0..90 deg)");
   G__memvar_setup((void*)((long)(&p->r)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"r=",0,"distance of closest point to beamline [mm]");
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z=",0,"z coordinate of closest point to beamline [mm]");
   G__memvar_setup((void*)((long)(&p->pol)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pol=",0,"polarity");
   G__memvar_setup((void*)((long)(&p->quality)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"quality=",0,"quality rk -Meta matching");
   G__memvar_setup((void*)((long)(&p->matchradius)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"matchradius=",0,"rk -Meta matching sqrt(dx2+dy2) [mm]");
   G__memvar_setup((void*)((long)(&p->metadx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"metadx=",0,"rk -Meta matching in x [mm]");
   G__memvar_setup((void*)((long)(&p->metady)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"metady=",0,"rk -Meta matching in y [mm]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* candidate */
static void G__setup_memvarcandidate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_candidate));
   { candidate *p; p=(candidate*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->objects)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_pointers),-1,-1,1,"objects=",0,"!  keep pointers for this candidate");
   G__memvar_setup((void*)((long)(&p->used)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"used=",0,"should this candidate be used ?");
   G__memvar_setup((void*)((long)(&p->system)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"system=",0,"detector system");
   G__memvar_setup((void*)((long)(&p->rkSuccess)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"rkSuccess=",0,"fitted ?");
   G__memvar_setup((void*)((long)(&p->usedMeta)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"usedMeta=",0,"noUse = -1, 0 =TOFclst, 1 = TOHHIT1, 2 = TOFHIT2, 3 =RPC 4=SHR");
   G__memvar_setup((void*)((long)(&p->selectTof)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"selectTof=",0,"noUse = -1, 0 =TOFclst, 1 = TOHHIT1, 2 = TOFHIT2");
   G__memvar_setup((void*)((long)(&p->nCand)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nCand=",0,"number of candidate in metamatch objects");
   G__memvar_setup((void*)((long)(&p->hasRingCorrelation)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hasRingCorrelation=",0,"pass MDC-RICH correlation cut ?");
   G__memvar_setup((void*)((long)(&p->corrThetaRich)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"corrThetaRich=",0,"z pos theta correction for Rich (to be added to theta)");
   G__memvar_setup((void*)((long)(&p->alignThetaRich)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"alignThetaRich=",0,"align theta correction for Rich (to be added to theta)");
   G__memvar_setup((void*)((long)(&p->alignPhiRich)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"alignPhiRich=",0,"align phi   correction for Rich (to be added to theta)");
   G__memvar_setup((void*)((long)(&p->richMdcQuality)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"richMdcQuality=",0,"match RICH inner Segment quality sqrt( dThetaSeg1 * dThetaSeg1 + dPhiSeg1 * dPhiSeg1)");
   G__memvar_setup((void*)((long)(&p->richRkQuality)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"richRkQuality=",0,"match RICH RK quality");
   G__memvar_setup((void*)((long)(&p->commonTracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_tracksVec),-1,-1,1,"commonTracks=",0,"collected GEANT track number for all detector hits");
   G__memvar_setup((void*)((long)(&p->richTracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_tracksVec),-1,-1,1,"richTracks=",0,"collected GEANT track number for RICH detector hit");
   G__memvar_setup((void*)((long)(&p->mdc1Tracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_tracksVec),-1,-1,1,"mdc1Tracks=",0,"collected GEANT track number for inner MDC segment");
   G__memvar_setup((void*)((long)(&p->mdc2Tracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_tracksVec),-1,-1,1,"mdc2Tracks=",0,"collected GEANT track number for outer MDC segment");
   G__memvar_setup((void*)((long)(&p->tofTracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_tracksVec),-1,-1,1,"tofTracks=",0,"collected GEANT track number for TOF detector hit");
   G__memvar_setup((void*)((long)(&p->rpcTracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_tracksVec),-1,-1,1,"rpcTracks=",0,"collected GEANT track number for RPC detector hit");
   G__memvar_setup((void*)((long)(&p->showerTracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_tracksVec),-1,-1,1,"showerTracks=",0,"collected GEANT track number for SHOWER detector hit");
   G__memvar_setup((void*)((long)(&p->closeTracks)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_closeVec),-1,-1,1,"closeTracks=",0,"keep index and opening angle to close tracks");
   G__memvar_setup((void*)((long)(&p->oAFitted)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"oAFitted=",0,"neg angle = hadron, pos angle lepton , -99 nothing");
   G__memvar_setup((void*)((long)(&p->oANoFitted)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"oANoFitted=",0,"neg angle = hadron, pos angle lepton , -99 nothing");
   G__memvar_setup((void*)((long)(&p->ind)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ind=",0,"metamatch index");
   G__memvar_setup((void*)((long)(&p->sector)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"sector=",0,"sector number");
   G__memvar_setup((void*)((long)(&p->mdctrk)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_mdc_trk),-1,-1,1,"mdctrk=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->seg1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_mdc_seg),-1,-1,1,"seg1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->seg2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_mdc_seg),-1,-1,1,"seg2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tof)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_tof_hit),-1,-1,1,"tof[3]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rpcclst)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_rpc_clst),-1,-1,1,"rpcclst=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->showerhit)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_shower_hit),-1,-1,1,"showerhit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->richhit)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_rich_hit),-1,-1,1,"richhit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->spline)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_spline_track),-1,-1,1,"spline=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rk)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_rk_track),-1,-1,1,"rk=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->kal)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_kal_track),-1,-1,1,"kal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleEvtChara */
static void G__setup_memvarHParticleEvtChara(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtChara));
   { HParticleEvtChara *p; p=(HParticleEvtChara*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"fParticleEvtInfoCat=",0,"output category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"fCatWallHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fParameterFile=",0,"ParameterFile");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TFile),-1,-1,4,"fFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseParameterFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fRun=",0,"beamtime");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fGen=",0,"generation of data set");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fCentralityEstimator=",0,"used CentralityEstimator");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isSimulation=",0,"for simulation if catGeantKine is available");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fQuality=",0,"Quality of centrality determination  not Valid == -1, best == 0");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFWSumChargeSpec=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDirectivity=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRatioEtEz=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEt=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityEsitimator),-1,-2,4,"kTOFRPC=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityEsitimator),-1,-2,4,"kTOF=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityEsitimator),-1,-2,4,"kRPC=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityEsitimator),-1,-2,4,"kTOFRPCtot=4LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityEsitimator),-1,-2,4,"kTOFtot=5LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityEsitimator),-1,-2,4,"kRPCtot=6LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityEsitimator),-1,-2,4,"kSelectedTrack=7LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityEsitimator),-1,-2,4,"kSelectedTrackCorr=8LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityEsitimator),-1,-2,4,"kSelectedTrackNorm=9LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityEsitimator),-1,-2,4,"kFWSumChargeSpec=16LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityEsitimator),-1,-2,4,"kEt=17LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityClass),-1,-2,4,"k5percentPT3=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityClass),-1,-2,4,"kpercentPT3=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityClass),-1,-2,4,"kFOPIPT3=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityClass),-1,-2,4,"k5percentPT2=4LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityClass),-1,-2,4,"kpercentPT2=5LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityClass),-1,-2,4,"kFOPIPT2=6LL",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fReferenceMeanSelTrack=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1F),-1,-1,4,"fHtempTOFtimecut=",0,"histogram with centrality vs multiplicity using TOF");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1F),-1,-1,4,"fHtempRPC=",0,"histogram with centrality vs multiplicity using RPC");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1F),-1,-1,4,"fHtempTOFRPC=",0,"histogram with centrality vs multiplicity using TOFRPC");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1F),-1,-1,4,"fHtempTOFRPCtimecut=",0,"histogram with centrality vs multiplicity using TOFRPCtimecut");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1F),-1,-1,4,"fHtempSelecTrack=",0,"histogram with centrality vs multiplicity using SelectedTrack");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1F),-1,-1,4,"fHtempSelecTrackCorr=",0,"histogram with centrality vs multiplicity using SelectedTrackCorr");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1F),-1,-1,4,"fHtempSelecTrackNorm=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1F),-1,-1,4,"fHtempFWSumChargeSpec=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1F),-1,-1,4,"fHtempDirectivity=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1F),-1,-1,4,"fHtempRatioEtEz=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1F),-1,-1,4,"fHtempEt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1F),-1,-1,4,"hMultTOFRPCtimecut_5percent_fixedCuts=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1F),-1,-1,4,"hMultTOFRPCtimecut_10percent_fixedCuts=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1F),-1,-1,4,"hMultTOFRPCtimecut_FOPI_fixedCuts=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCandFillerPar */
static void G__setup_memvarHParticleCandFillerPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFillerPar));
   { HParticleCandFillerPar *p; p=(HParticleCandFillerPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayD),-1,-1,2,"phiLow[6]=",0,"momentum dependend cut per sec : lower phi boundary");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayD),-1,-1,2,"phiUp[6]=",0,"momentum dependend cut per sec : upper phi boundary");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayD),-1,-1,2,"thetaLow[6]=",0,"momentum dependend cut per sec : lower theta boundary");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayD),-1,-1,2,"thetaUp[6]=",0,"momentum dependend cut per sec : upper theta boundary");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zRichCenter=",0,"Rich shift with respect to nominal lab-position=0 in mm");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1D),-1,-1,2,"hphiLow[6]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1D),-1,-1,2,"hphiUp[6]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1D),-1,-1,2,"hthetaLow[6]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TH1D),-1,-1,2,"hthetaUp[6]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCandFiller */
static void G__setup_memvarHParticleCandFiller(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFiller));
   { HParticleCandFiller *p; p=(HParticleCandFiller*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatMetaMatch=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatMdcTrkCand=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatMdcSeg=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatTofHit=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatTofCluster=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatShowerHit=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatRichHit=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatRpcCluster=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatSpline=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatRK=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatKalman=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatGeantKine=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HIterator),-1,-1,2,"fMetaMatchIter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatParticleCand=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatParticleDebug=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCatParticleMdc=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbIsSimulation=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbIsDebug=",0,"! debug mode ?");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbFillMdc=",0,"! true: fill catParticleMdc");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbgoodSeg0=",0,"! true: keep only fitted seg0");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbgoodSeg1=",0,"! true: keep only fitted seg1");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbgoodMeta=",0,"! true: keep only candidate with META");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbgoodRK=",0,"! true: keep only fitted RK");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbgoodLepton=",0,"! true: keep only candidate with ring match");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbnoFake=",0,"! true: keep only candidate which is not markerd as fake rejected");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbdoRichAlign=",0,"! true: (default)align the rich (real data)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbdoRichVertexCorr=",0,"! true: (default) do correction for vertexz pos in ring sorting");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbdoMETAQANorm=",0,"! true: (default) do normalization of RK meta dx");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbdoMomentumCorr=",0,"! true: (default) do systematic corrections on momentum");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbdoPathLengthCorr=",0,"! true: (default) do correction of path length to vertex");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fbdoGeantAcceptance=",0,"! true: (default) loop geant kine and fill acceptance + crop bits");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fmomSwitch=",0,"! : Particle::kMomRK or Particle::kMomKalman");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fsortSwitch=",0,"! sort by quality (0), radius(1)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFillerPar),-1,-1,2,"fFillerPar=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HTofWalkPar),-1,-1,2,"fTofWalkPar=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HMdcSizesCells),-1,-1,2,"fSizesCells=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HMdcLayer),-1,-1,2,"cropLay=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEcandidatemUcOallocatorlEcandidatemUgRsPgR),G__defined_typename("vector<candidate*>"),-1,2,"all_candidates=",0,"! vector for all metaMatch objects candidates.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMinWireGoodTrack=",0,"! minium number of wire from same track for good track (MDC), otherwise ghost");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fScaleGhostTrack=",0,"! scale weight of wires of ghost track (MDC)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fScaleGoodTrack=",0,"! scale weight of wires of good  track (MDC)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fAngleCloseTrack=",0,"! take into account for filling neighbour tracks with open angle < this");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleTrackSorter */
static void G__setup_memvarHParticleTrackSorter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter));
   { HParticleTrackSorter *p; p=(HParticleTrackSorter*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLERichMatch),-1,-2,1,G__FastAllocString(2048).Format("kUseRICHIndex=%lldLL",(long long)HParticleTrackSorter::kUseRICHIndex).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLERichMatch),-1,-2,1,G__FastAllocString(2048).Format("kUseRKRICHCorrelation=%lldLL",(long long)HParticleTrackSorter::kUseRKRICHCorrelation).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLERichMatch),-1,-2,1,G__FastAllocString(2048).Format("kUseRKRICHWindow=%lldLL",(long long)HParticleTrackSorter::kUseRKRICHWindow).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESelect),-1,-2,1,G__FastAllocString(2048).Format("kIsLepton=%lldLL",(long long)HParticleTrackSorter::kIsLepton).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESelect),-1,-2,1,G__FastAllocString(2048).Format("kIsHadron=%lldLL",(long long)HParticleTrackSorter::kIsHadron).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsIndexRICH=%lldLL",(long long)HParticleTrackSorter::kIsIndexRICH).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsIndexInnerMDC=%lldLL",(long long)HParticleTrackSorter::kIsIndexInnerMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsIndexOuterMDC=%lldLL",(long long)HParticleTrackSorter::kIsIndexOuterMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsIndexTOF=%lldLL",(long long)HParticleTrackSorter::kIsIndexTOF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsIndexSHOWER=%lldLL",(long long)HParticleTrackSorter::kIsIndexSHOWER).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsIndexRPC=%lldLL",(long long)HParticleTrackSorter::kIsIndexRPC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsIndexMETA=%lldLL",(long long)HParticleTrackSorter::kIsIndexMETA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsBestHitRICH=%lldLL",(long long)HParticleTrackSorter::kIsBestHitRICH).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsBestHitInnerMDC=%lldLL",(long long)HParticleTrackSorter::kIsBestHitInnerMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsBestHitOuterMDC=%lldLL",(long long)HParticleTrackSorter::kIsBestHitOuterMDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsBestHitMETA=%lldLL",(long long)HParticleTrackSorter::kIsBestHitMETA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsBestRK=%lldLL",(long long)HParticleTrackSorter::kIsBestRK).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsBestRKRKMETA=%lldLL",(long long)HParticleTrackSorter::kIsBestRKRKMETA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsBestRKRKMETARadius=%lldLL",(long long)HParticleTrackSorter::kIsBestRKRKMETARadius).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-2,1,G__FastAllocString(2048).Format("kIsBestUser=%lldLL",(long long)HParticleTrackSorter::kIsBestUser).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"kDebug=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"printLevel=",0,"! higher -> more prints (1,2,3)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"kSwitchIndex=",0,"! switch to select sort by index");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"kSwitchQuality=",0,"! switch to select sort by quality algorithms");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"kSwitchParticle=",0,"! switch to select leptons/hadrons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"kSwitchRICHMatching=",0,"! switch to select RICH/MDC matching in lepton selection");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fRICHMDCWindow=",0,"! matching window RICH/MDC in phi/theta (symmetric, degree)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"kIgnoreRICH=",0,"! switch to ignore RICH hits for Double_t hit counting");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"kIgnoreInnerMDC=",0,"! switch to ignore InnerMDC hits for Double_t hit counting");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"kIgnoreOuterMDC=",0,"! switch to ignore OuterMDC hits for Double_t hit counting");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"kIgnoreMETA=",0,"! switch to ignore META hits for Double_t hit counting");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"kIgnorePreviousIndex=",0,"! switch to ignore indices from previoius marked ued objects");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"kUseYMatching=",0,"! switch to use Y matching to meta cell (default kTRUE)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"kUseYMatchingScaling=",0,"! switch to use 1/p scaling of Y matching to meta cell (default kTRUE)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"kUseBeta=",0,"! switch to use Beta (in lepton select use fBetaLepCut, in hadron beta>0) (default kTRUE)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"kUseFakeRejection=",0,"! switch to use fakerejection in build in select functions  (default kTRUE)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"kUseMETAQA=",0,"! switch to use metaqa (normed dx) in build in select functions  (default kTRUE)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fMetaBoundary=",0,"! matching window when using Y matching with metacell [mm] (default 3): fabs(dy) < (halfcell+metaBoundary)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fBetaLepCut=",0,"! lower beta cut for lepton selection (default 0.9)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fMETAQACut=",0,"! meta qa (normed dx) cut (default 3.)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fTOFMAXCut=",0,"! max tof [ns] allowed to match (when beta is used)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"kSwitchRICHMatchingBackup=",0,"! switch to select RICH/MDC matching in lepton selection");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRICHMDCWindowBackup=",0,"! matching window RICH/MDC in phi/theta (symmetric, degree)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"kIgnoreRICHBackup=",0,"! switch to ignore RICH hits for Double_t hit counting");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"kIgnoreInnerMDCBackup=",0,"! switch to ignore InnerMDC hits for Double_t hit counting");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"kIgnoreOuterMDCBackup=",0,"! switch to ignore OuterMDC hits for Double_t hit counting");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"kIgnoreMETABackup=",0,"! switch to ignore META hits for Double_t hit counting");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"kIgnorePreviousIndexBackup=",0,"! switch to ignore indices from previoius marked ued objects");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"kUseYMatchingBackup=",0,"! switch to use Y matching to meta cell (default kTRUE)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"kUseYMatchingScalingBackup=",0,"! switch to use 1/p sclaing of Y matching to meta cell (default kTRUE)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"kUseBetaBackup=",0,"! switch to use Beta (in lepton select use fBetaLepCut, in hadron beta>0)  (default kTRUE)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"kUseFakeRejectionBackup=",0,"! switch to use Beta (in lepton select use fBetaLepCut, in hadron beta>0)  (default kTRUE)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"kUseMETAQABackup=",0,"! switch to use metaqa (normed dx) in build in select functions  (default kTRUE)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMetaBoundaryBackup=",0,"! matching window when using Y matching with metacell [mm] (default 3): fabs(dy) < (halfcell+metaBoundary)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBetaLepCutBackup=",0,"! lower beta cut for lepton selection  (default 0.9)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMETAQACutBackup=",0,"! meta qa (normed dx) cut (default 3.)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTOFMAXCutBackup=",0,"! max tof [ns] allowed to match (when beta is used)");
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Bool_t (*)(candidateSort*, candidateSort*)"),-1,2,"pUserSortBackup=",0,"! user provided function pointer to sort algo");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fill_Iteration=",0,"! remember the number of fill() calls");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"selectBest_Iteration=",0,"! remember the number of selectBest() calls");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"currentEvent=",0,"! find new event");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEcandidateSortmUcOallocatorlEcandidateSortmUgRsPgR),G__defined_typename("vector<candidateSort*>"),-1,2,"all_candidates=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"index_RICH=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"index_InnerMDC=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"index_OuterMDC=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"index_SHOWER=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"index_TOFHit=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"index_TOFClst=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"index_RPC=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"old_flags=",0,"! remember the old flags of HPidTrackCand for restoring");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,2,"nameIndex=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,2,"nameQuality=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isSimulation=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TFile),-1,-1,2,"fout=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TNtuple),-1,-1,2,"nt=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"pParticleCandCat=",0,"! HParticleCand category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HIterator),-1,-1,2,"iterParticleCandCat=",0,"! iterator on HParticleCand");
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Bool_t (*)(candidateSort*, candidateSort*)"),-2,2,"pUserSort=",0,"! user provided function pointer to sort algo");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleTrackCleaner */
static void G__setup_memvarHParticleTrackCleaner(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackCleaner));
   { HParticleTrackCleaner *p; p=(HParticleTrackCleaner*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter),-1,-1,2,"sorter=",0,"! for doing the final task of flagging");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"pParticleCandCat=",0,"! HParticleCand category");
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Bool_t (*)(HParticleCand*)"),-1,2,"pUserSelectLeptons=",0,"! user provided function pointer to lepton selection");
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Bool_t (*)(HParticleCand*)"),-1,2,"pUserSelectHadrons=",0,"! user provided function pointer to hadron selection");
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Bool_t (*)(candidateSort*, candidateSort*)"),-1,2,"pUserSort=",0,"! user provided function pointer to sort algo");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch),-1,-1,2,"sortType=",0,"! sort type : default kIsBestRKRKMETA");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleRunningMeanI */
static void G__setup_memvarHParticleRunningMeanI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI));
   { HParticleRunningMeanI *p; p=(HParticleRunningMeanI*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fnMax=",0,"(fixed)    maximum no of events used to calculate mean multiplicity");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fminEvts=",0,"(fixed)    minimum events for valid mean value");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fscaleFacSigma=",0,"(fixed)    scaling factor for cutoff of val distribution in units of the distribution width sigma");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fmaxMin=",0,"(fixed)    minimum value allowed for fmax");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fmin=",0,"(fixed)    minimum allowed value");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"initialMean=",0,"(fixed)    init values for first fminEvts events");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"initialSigma=",0,"(fixed)    init values for first fminEvts events");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fmean=",0,"(floating) mean value");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fsigma=",0,"(floating) mean value");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fmax=",0,"(floating) maximum allowed value");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fvalid=",0,"value < max or fn (event counter) < fminEvts");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fnPoints=",0,"used to calculate a moving average");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"findex=",0,"current index in mean array");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSum=",0,"(floating) sum of all acumulated means");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSum2=",0,"(floating) sum of all acumulated means squared");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fn=",0,"actual counter of entries until fnMax");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleEvtInfoFiller */
static void G__setup_memvarHParticleEvtInfoFiller(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfoFiller));
   { HParticleEvtInfoFiller *p; p=(HParticleEvtInfoFiller*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HLocation),-1,-1,4,"zeroLoc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TIterator),-1,-1,4,"pWallHitIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TIterator),-1,-1,4,"pRichHitIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TIterator),-1,-1,4,"pRichClusIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TIterator),-1,-1,4,"pMdcClusIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TIterator),-1,-1,4,"pMdcSegIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TIterator),-1,-1,4,"pTofHitIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TIterator),-1,-1,4,"pRpcClusterIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TIterator),-1,-1,4,"pRpcHitIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TIterator),-1,-1,4,"pShowerHitIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TIterator),-1,-1,4,"pParticleCandIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"pParticleEvtInfoCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"pWallEventPlaneCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"beamtime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HMdcLookupGeom),-1,-1,4,"lookupMdcGeom=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HMdcCalParRaw),-1,-1,4,"calparMdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ftimeTofCut=",0,"default 35");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ftimeRpcCut=",0,"default 25");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fprimary_mindist=",0,"default 10");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fvertexzCut=",0,"default -65 (apr12) -200 /jul14+aug14");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMetaPILEUPCut=",0,"default 60 ns");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMetaNPILEUPCut=",0,"number of meta hits <0 || > fMetaPILEUPCut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMdcPILEUPCut[4]=",0,"default t1 > 200 (inner) > 400 (outer)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMdcPILEUPNCut=",0,"number of wires in cut region  (7 pion beam 35 apr12)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanMult=",0,"mean mult of all candidates");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanMIPSMult=",0,"mean mult of all mips candidates (beta>fMeanMIPSbetaCut)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanLEPMult=",0,"mean mult of all lep candidates (beta:mom inside wedge cut + richqa <2)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigmaMult=",0,"sigma mult of all candidates");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigmaMIPSMult=",0,"sigma mult of all mips candidates (beta>fMeanMIPSbetaCut)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigmaLEPMult=",0,"sigma mult of all lep candidates (beta:mom inside wedge cut + richqa <2)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fminEvts=",0,"min number of events");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fmaxEvts=",0,"min number of events");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fminLEPEvts=",0,"min number of events");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fmaxLEPEvts=",0,"min number of events");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanMIPSBetaCut=",0,"MIPS selection");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanLEPBetaCut=",0,"lep selection");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanLEPMomCut=",0,"lep selection");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanLEPRichQACut=",0,"lep selection");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ftriggerBit=",0,"trigger for physics");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMinStartCorrFlag=",0,"corr flag from hparticlestart2hitf");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSecToAll=",0,"av sect per evt");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMinMult=",0,"minimum allow mult per evt");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaxFacToMean=",0,"cutoff for big values larger mean*fMaxFacToMean");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fvetoMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fvetoMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fminStartMeta=",0,"[ns] min start time to look for correlation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fmaxStartMeta=",0,"[ns] min start time to look for correlation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fthreshMeta=",0,"min number of meta hist needed");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fwindowMeta=",0,"[ns] integration window");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"foffsetMeta=",0,"[ns] sfift fastest particle to zero");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fminStartVeto=",0,"[ns] min start time to look for correlation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fmaxStartVeto=",0,"[ns] min start time to look for correlation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fwindowVeto=",0,"[ns] +- matching window");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI),-1,-1,4,"meanALL=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI),-1,-1,4,"meanMIPS=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI),-1,-1,4,"meanLEP=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI),-1,-1,4,"meanALLSec[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI),-1,-1,4,"meanMIPSSec[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI),-1,-1,4,"meanLEPSec[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleContFact */
static void G__setup_memvarHParticleContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleContFact));
   { HParticleContFact *p; p=(HParticleContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleStart2HitF */
static void G__setup_memvarHParticleStart2HitF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleStart2HitF));
   { HParticleStart2HitF *p; p=(HParticleStart2HitF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"fCatTof=",0,"! pointer to the tof hit data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"fCatTofClu=",0,"! pointer to the tof cluster data ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"fCatRpc=",0,"! pointer to the rpc hit data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"fCatRpcClu=",0,"! pointer to the rpc cluster data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"fCatStartCal=",0,"! pointer to the start cal data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"fCatStartHit=",0,"! pointer to the start hit data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TNtuple),-1,-1,4,"nt1=",0,"! Debug ntuple 1 (original tofs)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TNtuple),-1,-1,4,"nt2=",0,"! Debug ntuple 2 (start time for both modules)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TNtuple),-1,-1,4,"nt3=",0,"! Debug ntuple 3 (recontructed start times)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TFile),-1,-1,4,"out=",0,"! Output file for debug");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"bDebug=",0,"! Flag to store debug ntuples");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"startTimeOriginal=",0,"! Start time from original HStart2Hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"startFlag=",0,"! flag of reconstruction method (-1,0,1,2)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"firstCluster=",0,"all strips inside 0.5 ns arround best strip");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"secondCluster=",0,"all other strip not in first cluster");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSecondTime=",0,"closest second time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleTree */
static void G__setup_memvarHParticleTree(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTree));
   { HParticleTree *p; p=(HParticleTree*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HRecEvent),-1,-1,4,"fCurrentEvent=",0,"! Event under reconstruction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TFile),-1,-1,4,"fOutputFile=",0,"! File used to store the output tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HTree),-1,-1,4,"fTree=",0,"! Output tree");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCycleNumber=",0,"! cycle number of output file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fOutputFileName=",0,"! output file name (derived from hades output name)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fOutputTitle=",0,"! output file title");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fOutputOption=",0,"! output file option");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fOutputCompression=",0,"! output file compression");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fOutputFileSuffix=",0,"! replace .root by fOutputFileSuffix.root");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fOutputDir=",0,"! outputdir");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fOutFound=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"kSkipEmptyEvents=",0,"! kTRUE = skip not selected events (default = kFALSE)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"kSkipTracks=",0,"! kTRUE = skip not selected tracks (default = kTRUE)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"kSwitchRICHMatching=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRICHMDCWindow=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"kIgnoreRICH=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"kIgnoreInnerMDC=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"kIgnoreOuterMDC=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"kIgnoreMETA=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"kIgnorePreviousIndex=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter),-1,-1,4,"sorter=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fCatNums=",0,"! list of persistent output categories");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),G__defined_typename("map<TString,Int_t>"),-1,4,"fmCatNameToNum=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR),G__defined_typename("map<Int_t,TString>"),-1,4,"fmCatNumToName=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOHCategorymUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHCategorymUgRsPgRsPgR),G__defined_typename("map<Int_t,HCategory*>"),-1,4,"fmCatNumToPointer=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplETStringcOHCategorymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHCategorymUgRsPgRsPgR),G__defined_typename("map<TString,HCategory*>"),-1,4,"fmCatNameToPointer=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),G__defined_typename("map<Int_t,Int_t>"),-1,4,"fmCatNumToFullCopy=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fmCatNumSupport=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fmCatNumFullCopySupport=",0,"!");
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Bool_t (*)(TObjArray*)"),-1,4,"pUserSelectEvent=",0,"! user provided function pointer event selection (TObjArray for parameters)");
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Bool_t (*)(HParticleCand*)"),-1,4,"pUserSelectLeptons=",0,"! user provided function pointer to lepton selection");
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Bool_t (*)(HParticleCand*)"),-1,4,"pUserSelectHadrons=",0,"! user provided function pointer to hadron selection");
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Bool_t (*)(HParticleCand*)"),-1,4,"pUserKeepTrack=",0,"! user provided function pointer to keep/discard tracks independent of sorterflags");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TObjArray),-1,-1,4,"fParamSelectEvent=",0,"! object array for optional parameters of event selection function");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ctMdcSeg[6][2]=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ctMdcClus[6][2]=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ctMdcHit[6][4]=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ctRpcClus[6]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleAngleCor */
static void G__setup_memvarHParticleAngleCor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleAngleCor));
   { HParticleAngleCor *p; p=(HParticleAngleCor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"meanZTarget=",0,"typical shift of target centroid in lab coordinates (in mm)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zRichCenter=",0,"typical shift of rich as compared to design value. Determined via meanZTarget (in mm)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zMirror=",0,"center of Rich mirror in lab coordinates. Depends on zRichCenter and RICH geometry.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rMirror=",0,"effective radius for dominant multiple scattering source (in between mirror and shell radius).");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"drShield=",0,"additional distance from target center to effective multiple scattering point due to delta electron shield");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"maxRhoShield=",0,"end of delta electron shield (perpendicular to beam axis projected onto mirror/shell sphere)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useMeanXY=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useShield=",0,"delta electron shield provides significant contribution to multiple scattering");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"vertexType=",0,"switch cluster,segment,particle global vertex (see Particle:VertexXXX)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"bDoWarn=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sumXVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sumYVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"maxAverage=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_queuelEfloatcOdequelEfloatcOallocatorlEfloatgRsPgRsPgR),G__defined_typename("queue<Float_t>"),-1,2,"qxVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_queuelEfloatcOdequelEfloatcOallocatorlEfloatgRsPgRsPgR),G__defined_typename("queue<Float_t>"),-1,2,"qyVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleGeantDecay */
static void G__setup_memvarHParticleGeantDecay(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay));
   { HParticleGeantDecay *p; p=(HParticleGeantDecay*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeantKine),-1,-1,4,"fmother=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR),G__defined_typename("vector<HGeantKine*>"),-1,4,"fdaughters=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector),-1,-1,4,"fdecayVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fgeneration=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay),-1,-1,4,"fmotherDecay=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleGeant */
static void G__setup_memvarHParticleGeant(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeant));
   { HParticleGeant *p; p=(HParticleGeant*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeantKine),-1,-1,4,"fparticle=",0,"pointer to kine object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeantKine),-1,-1,4,"fmother=",0,"pointer to mother kine object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay),-1,-1,4,"fmotherDecay=",0,"pointer to the mother decay");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgR),G__defined_typename("vector<HParticleCandSim*>"),-1,4,"vReco=",0,"list of reconstructed candidates keeping the same Geant track");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fInAcceptance=",0,"= kTRUE if particle is detected in Acceptance");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fgeneration=",0,"generation of this particle (number of mothers)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector),-1,-1,4,"fdecayVertex=",0,"vertex of this particle");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleGeantEvent */
static void G__setup_memvarHParticleGeantEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantEvent));
   { HParticleGeantEvent *p; p=(HParticleGeantEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEHGeantKinemUcOvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<HGeantKine*,vector<HGeantKine*> >"),-1,4,"mToDaughters=",0,"kine    -> vector of daughters");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOHParticleGeantmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleGeantmUgRsPgRsPgR),G__defined_typename("map<Int_t,HParticleGeant*>"),-1,4,"mToParticle=",0,"trackNr -> particle");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleGeantDecaymUcOallocatorlEHParticleGeantDecaymUgRsPgR),G__defined_typename("vector<HParticleGeantDecay*>"),-1,4,"vDecays=",0,"vector of all decays");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR),G__defined_typename("vector<HGeantKine*>"),-1,4,"vexternalParticles=",0,"vector of all external (PLUTO) particles");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR),G__defined_typename("vector<HGeantKine*>"),-1,4,"vexternalKine=",0,"vector of all arteficial kine mother objects of external particle");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleGeantmUcOallocatorlEHParticleGeantmUgRsPgR),G__defined_typename("vector<HParticleGeant*>"),-1,4,"vParticles=",0,"vector of all particles");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector),-1,-1,4,"feventVertex=",0,"[mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBeamEnergy=",0,"[MeV]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEventPlane=",0,"[deg]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fImpactParam=",0,"[fm]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"bConvertExtThermal=",0,"(default: kTRUE) convert id for external thermal source (sourceID-500)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"bCorrectInfo=",0,"(default: kTRUE) correct geninfo bug from HGeant2 <= 3.2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleGeantPair */
static void G__setup_memvarHParticleGeantPair(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantPair));
   { HParticleGeantPair *p; p=(HParticleGeantPair*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeantKine),-1,-1,2,"fcand[2]=",0,"! pointer to cand1 (reference: should be a lepton candidate) and cand2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeantKine),-1,-1,2,"fmother=",0,"! pointer to other particle");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TLorentzVector),-1,-1,2,"fc[2]=",0,"local copy of lorentz vector of cand1 and cand2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPID[2]=",0,"assigned PID for cand1 and cand2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMotherPID=",0,"assigned PID for Mother");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"foAngle=",0,"opening angle of pair [deg]");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fstatusFlags=",0,"bit  0x01  true pair");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector),-1,-1,2,"fEventVertex=",0,"used event vertex");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector),-1,-1,2,"fDecayVertex=",0,"secondary vertex of both candidates");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fVerMinDistCand[2]=",0,"vertex cut vars : mindist cand1 and cand2 to event vertex");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fVerMinDistMother=",0,"vertex cut vars : mindist mother to event vertex");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fVerDistMother=",0,"vertex cut vars");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMinDistCandidates=",0,"vertex cut vars : mindist between cand1 and cand2");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"fbCheckAcceptance=",0,"! run acceptance check (default: kTRUE)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleDraw */
static void G__setup_memvarHParticleDraw(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleDraw));
   { HParticleDraw *p; p=(HParticleDraw*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->flineWidth)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flineWidth=",0,"!    line with of all lines and ellipses");
   G__memvar_setup((void*)((long)(&p->frefColor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"frefColor=",0,"!    color of reference track (left leg of the pair)");
   G__memvar_setup((void*)((long)(&p->fusedColor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fusedColor=",0,"!    particle sorter flagged cand kIsUsed");
   G__memvar_setup((void*)((long)(&p->fleptonColor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fleptonColor=",0,"!    particle sorter flagged cand kIsLepton");
   G__memvar_setup((void*)((long)(&p->ffittedStyle)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ffittedStyle=",0,"!    line style of fitted MDC");
   G__memvar_setup((void*)((long)(&p->fnoFittedStyle)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fnoFittedStyle=",0,"!    line style of not fitted MDC");
   G__memvar_setup((void*)((long)(&p->fmetaColor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fmetaColor=",0,"!    color of meta hit");
   G__memvar_setup((void*)((long)(&p->frichColor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"frichColor=",0,"!    color of rich hit");
   G__memvar_setup((void*)((long)(&p->fuseRICH)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fuseRICH=",0,"!    = kTRUE for leptons : draw RICH (see kNoUseRICH flag in eClosePairSelect (hparticledef.h))");
   G__memvar_setup((void*)((long)(&p->ftextSizeScale)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ftextSizeScale=",0,"!    scale factor for Title");
   G__memvar_setup((void*)((long)(&p->ftextSizeInfoScale)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ftextSizeInfoScale=",0,"!    scale factor for info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticlePairDraw */
static void G__setup_memvarHParticlePairDraw(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairDraw));
   { HParticlePairDraw *p; p=(HParticlePairDraw*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->flineWidth)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flineWidth=",0,"!    line with of all lines and ellipses");
   G__memvar_setup((void*)((long)(&p->frefColor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"frefColor=",0,"!    color of reference track (left leg of the pair)");
   G__memvar_setup((void*)((long)(&p->fusedColor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fusedColor=",0,"!    particle sorter flagged cand2 kIsUsed");
   G__memvar_setup((void*)((long)(&p->fleptonColor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fleptonColor=",0,"!    particle sorter flagged cand2 kIsLepton");
   G__memvar_setup((void*)((long)(&p->ffittedStyle)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ffittedStyle=",0,"!    line style of fitted MDC");
   G__memvar_setup((void*)((long)(&p->fnoFittedStyle)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fnoFittedStyle=",0,"!    line style of not fitted MDC");
   G__memvar_setup((void*)((long)(&p->fmetaColor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fmetaColor=",0,"!    color of meta hit");
   G__memvar_setup((void*)((long)(&p->frichColor)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"frichColor=",0,"!    color of rich hit");
   G__memvar_setup((void*)((long)(&p->fuseRICH)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fuseRICH=",0,"!    = kTRUE for leptons : draw RICH (see kNoUseRICH flag in eClosePairSelect (hparticledef.h))");
   G__memvar_setup((void*)((long)(&p->ftextSizeScale)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ftextSizeScale=",0,"!    scale factor for Title");
   G__memvar_setup((void*)((long)(&p->ftextSizeInfoScale)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ftextSizeInfoScale=",0,"!    scale factor for info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticlePairMaker */
static void G__setup_memvarHParticlePairMaker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairMaker));
   { HParticlePairMaker *p; p=(HParticlePairMaker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgR),G__defined_typename("vector<HParticleCand*>"),-1,4,"freference=",0,"! reference candidates (kIsLepton flagged)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgR),G__defined_typename("vector<HParticleCand*>"),-1,4,"fothers=",0,"! other candidates (not KIsLepton flagged)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgR),G__defined_typename("vector<HParticleCand*>"),-1,4,"ffullrecoOthers=",0,"! full reco cands (inner/outer MDC + META) inside others");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgR),G__defined_typename("vector<HParticleCand*>"),-1,4,"fnofullrecoOthers=",0,"! not full reco cands (inner/outer MDC or META missing) inside others");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticlePaircOallocatorlEHParticlePairgRsPgR),G__defined_typename("vector<HParticlePair>"),-1,4,"fpairs=",0,"! all pair combinations freference x fothers");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCand*> >"),-1,4,"mTofHittoCand=",0,"!  TOF hit     lookup   detector hit ind -> list of candidates using this hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCand*> >"),-1,4,"mTofClsttoCand=",0,"!  TOF cluster lookup   detector hit ind -> list of candidates using this hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCand*> >"),-1,4,"mRpcClsttoCand=",0,"!  RPC cluster lookup   detector hit ind -> list of candidates using this hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCand*> >"),-1,4,"mShowertoCand=",0,"!  SHOWER hit  lookup   detector hit ind -> list of candidates using this hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCand*> >"),-1,4,"mInnerMdctoCand=",0,"!  inner Seg   lookup   detector hit ind -> list of candidates using this hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCand*> >"),-1,4,"mOuterMdctoCand=",0,"!  outer Seg   lookup   detector hit ind -> list of candidates using this hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCand*> >"),-1,4,"mRichtoCand=",0,"!  RICH hit    lookup   detector hit ind -> list of candidates using this hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEHParticleCandmUcOvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRcOlesslEHParticleCandmUgRcOallocatorlEpairlEHParticleCandmUsPconstcOvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<HParticleCand*,vector<HParticlePair*> >"),-1,4,"mCandtoPair=",0,"!  candidate   lookup   candidate        -> list of pairs using this candidate");
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Bool_t (*)(HParticleCand*)"),-1,4,"fselectPID1=",0,"! selection function pid1 (default positrons)");
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Bool_t (*)(HParticleCand*)"),-1,4,"fselectPID2=",0,"! selection function pid2 (default electrons)");
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Bool_t (*)(HParticleCand*)"),-1,4,"fuserFilter=",0,"! user filter function to avoid unneeded combinatorics");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPID1=",0,"!  pid1 (default positrons)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPID2=",0,"!  pid2 (default electrons)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMotherPID=",0,"!  default dilepton");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fuse_kIsLepton=",0,"! == kTRUE use kIsLepton as refererence selection (default)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fdoSkippedFullCandPairs=",0,"! == kTRUE build also pairs of skipped full reco cands (inner/outer MDC+META) with others");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"frequireRich=",0,"! ask for rich index in selctPos/selectNeg function");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVertexCase=",0,"! which eventvertex to use (see eVertex in hparticledef.h)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector),-1,-1,4,"fVertex=",0,"vertex for  current event");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<UInt_t>"),-1,4,"fCaseCt=",0,"! counter array for cases");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<UInt_t>"),-1,4,"fCaseVec=",0,"! vector for pair cases");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"richCandCt=",0,"! counter for all pair cases with both candidates matching a Rich (check)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleBooker */
static void G__setup_memvarHParticleBooker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBooker));
   { HParticleBooker *p; p=(HParticleBooker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCand*> >"),-1,4,"mTofHittoCand=",0,"!  TOF hit     lookup   detector hit ind -> list of candidates using this hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCand*> >"),-1,4,"mTofClsttoCand=",0,"!  TOF cluster lookup   detector hit ind -> list of candidates using this hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCand*> >"),-1,4,"mRpcClsttoCand=",0,"!  RPC cluster lookup   detector hit ind -> list of candidates using this hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCand*> >"),-1,4,"mShowertoCand=",0,"!  SHOWER hit  lookup   detector hit ind -> list of candidates using this hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCand*> >"),-1,4,"mInnerMdctoCand=",0,"!  inner Seg   lookup   detector hit ind -> list of candidates using this hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCand*> >"),-1,4,"mOuterMdctoCand=",0,"!  outer Seg   lookup   detector hit ind -> list of candidates using this hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCand*> >"),-1,4,"mRichtoCand=",0,"!  RICH hit    lookup   detector hit ind -> list of candidates using this hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"vTofHitInd=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"vTofClstInd=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"vRpcClstInd=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"vShowerInd=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"vInnerMdcInd=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"vOuterMdcInd=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"vRichInd=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgR),G__defined_typename("vector<HTofHit*>"),-1,4,"vTofHit=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgR),G__defined_typename("vector<HTofCluster*>"),-1,4,"vTofClst=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgR),G__defined_typename("vector<HRpcCluster*>"),-1,4,"vRpcClst=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgR),G__defined_typename("vector<HShowerHit*>"),-1,4,"vShower=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgR),G__defined_typename("vector<HMdcSeg*>"),-1,4,"vInnerMdc=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgR),G__defined_typename("vector<HMdcSeg*>"),-1,4,"vOuterMdc=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgR),G__defined_typename("vector<HRichHit*>"),-1,4,"vRich=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgR),G__defined_typename("vector<HTofHit*>"),-1,4,"vTofHitAll=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgR),G__defined_typename("vector<HTofCluster*>"),-1,4,"vTofClstAll=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgR),G__defined_typename("vector<HRpcCluster*>"),-1,4,"vRpcClstAll=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgR),G__defined_typename("vector<HShowerHit*>"),-1,4,"vShowerAll=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgR),G__defined_typename("vector<HMdcSeg*>"),-1,4,"vInnerMdcAll=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgR),G__defined_typename("vector<HMdcSeg*>"),-1,4,"vOuterMdcAll=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgR),G__defined_typename("vector<HRichHit*>"),-1,4,"vRichAll=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCandSim*> >"),-1,4,"mTracktoCand=",0,"!  Geant Track lookup   geant track (assigned track)  -> list of candidates using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HParticleCandSim*> >"),-1,4,"mTracktoAnyCand=",0,"!  Geant Track lookup   geant track (in any detector) -> list of candidates using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HTofHitSim*> >"),-1,4,"mTracktoTofHit=",0,"!  Geant Track lookup   geant track -> list of TofHits using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HTofClusterSim*> >"),-1,4,"mTracktoTofCluster=",0,"!  Geant Track lookup   geant track -> list of TofCluster using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HRpcClusterSim*> >"),-1,4,"mTracktoRpcCluster=",0,"!  Geant Track lookup   geant track -> list of RpcCluster using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HShowerHitSim*> >"),-1,4,"mTracktoShowerHit=",0,"!  Geant Track lookup   geant track -> list of ShowerHit using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HMdcSegSim*> >"),-1,4,"mTracktoInnerMdc=",0,"!  Geant Track lookup   geant track -> list of inner MdcSeg using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HMdcSegSim*> >"),-1,4,"mTracktoOuterMdc=",0,"!  Geant Track lookup   geant track -> list of outer MdcSeg using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HRichHitSim*> >"),-1,4,"mTracktoRichHit=",0,"!  Geant Track lookup   geant track -> list of RichHit using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<Int_t> >"),-1,4,"mTracktoCandInd=",0,"!  Geant Track lookup   geant track (assigned track)  -> list of candidates indices using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<Int_t> >"),-1,4,"mTracktoAnyCandInd=",0,"!  Geant Track lookup   geant track (in any detector) -> list of candidates indicesusing this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<Int_t> >"),-1,4,"mTracktoTofHitInd=",0,"!  Geant Track lookup   geant track -> list of TofHits indices using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<Int_t> >"),-1,4,"mTracktoTofClusterInd=",0,"!  Geant Track lookup   geant track -> list of TofCluster indices using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<Int_t> >"),-1,4,"mTracktoRpcClusterInd=",0,"!  Geant Track lookup   geant track -> list of RpcCluster indices using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<Int_t> >"),-1,4,"mTracktoShowerHitInd=",0,"!  Geant Track lookup   geant track -> list of ShowerHit indices using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<Int_t> >"),-1,4,"mTracktoInnerMdcInd=",0,"!  Geant Track lookup   geant track -> list of inner MdcSeg indices using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<Int_t> >"),-1,4,"mTracktoOuterMdcInd=",0,"!  Geant Track lookup   geant track -> list of outer MdcSeg indices using this track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<Int_t> >"),-1,4,"mTracktoRichHitInd=",0,"!  Geant Track lookup   geant track -> list of RichHit using indices this track");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"richhitCat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"tofhitCat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"tofclstCat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"rpcclstCat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"showerhitCat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"mdcsegCat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"candCat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleVertexFind */
static void G__setup_memvarHParticleVertexFind(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleVertexFind));
   { HParticleVertexFind *p; p=(HParticleVertexFind*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeomVertexFit),-1,-1,2,"fFitter=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClonesArray),-1,-1,2,"fPos=",0,"! r for each track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClonesArray),-1,-1,2,"fAlpha=",0,"! alpha vector for each track");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgR),G__defined_typename("vector<HParticleCand*>"),-1,2,"fCands=",0,"! vector of candidate pointers passed to the fit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,2,"fweights=",0,"! vector of candidate weights");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fInput=",0,"! Geant MDC data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HMdcGeomPar),-1,-1,2,"fGeometry=",0,"! Geometry transformation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HSpecGeomPar),-1,-1,2,"fSpecGeometry=",0,"! Spectrometer's geometry");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTukeyConst=",0,"Value used as Tukey constant");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxIterations=",0,"Maximum number of iterations");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fUsingTukey=",0,"Flag turning on and off Tukey weights");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fEpsilon=",0,"Used for convergence criterium");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fminZ=",0,"! minz range for segments");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fmaxZ=",0,"! maxz range for segments");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fmaxR=",0,"! maxr range for segments");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fmomChi2Cut=",0,"! cut off in inner segment chi2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fseg0Chi2Cut=",0,"! cut off in mom fit chi2");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fminReqTrack=",0,"! minimum required tracks after mean z filter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fminWindow=",0,"! minimum window  for mean z filter");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fProgressiveTukey=",0,"! make stronger cut with rising mult");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fcallExecuteManual=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"doSkipFakes=",0,"! skip candidate smarked as fake (default=kTRUE)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCutRange */
static void G__setup_memvarHParticleCutRange(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutRange));
   { HParticleCutRange *p; p=(HParticleCutRange*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"flow=",0,"lower cut");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fup=",0,"upper cut");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCutNumber=",0,"number of the cut");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fmaxCut=",0,"how many version can be used at max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TCutG),-1,-1,4,"fCut=",0,"graph cut object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TF1),-1,-1,4,"fLowF1=",0,"TFormular for low cut");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TF1),-1,-1,4,"fUpF1=",0,"TFormular for upper cut");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fF1Mode=",0,"0 = \"low+up\" , 1=\"low\" , 2=\"up\" , 3=\"mean+width\"");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctFail=",0,"count evaluation == kFALSE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctCall=",0,"count all call to the evaluation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fbInverseCut=",0,"default kFALSE , kTRUE will invert selection");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fmaxVersion=",0,"how many version have been used");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleBtPar */
static void G__setup_memvarHParticleBtPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar));
   { HParticleBtPar *p; p=(HParticleBtPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fNSigma=",0,"nSigma");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSizeMatrix=",0,"matrix size");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhiOffsetPar=",0,"phiOffsetPar");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMinimumSigmaVal=",0,"Minimum Sigma value for parametrization");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaximumType=",0,"MaximumType:7,8,4");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayI),-1,-1,2,"fRingFitPar=",0,"nRingSegments, nVertex, nParMean, nParSigma");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayF),-1,-1,2,"fChargeThres=",0,"sector-wise charge thresholds");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayF),-1,-1,2,"fGeomConst=",0,"padWidthX, padWidthY thetaAngleMin , thetaAngleMax");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayI),-1,-1,2,"fRingSeg=",0,"ringSegStep, ringSegOffset;");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayF),-1,-1,2,"fSharedCharge=",0,"3 x diagonal pads;3 x vertical pads;3 x hporizontal pads");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayF),-1,-1,2,"fSigmaGaus=",0,"2 x SigmaGauss;2 x SigmaGaussRange");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayF),-1,-1,2,"fParThetaAngle=",0,"min and max theta angles");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayF),-1,-1,2,"fPhiOffset=",0,"6 x 2 Phi offsets");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayF),-1,-1,2,"fSigmaRange=",0,"Sigma, Sigma Small, Sigma Max, PadError");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayI),-1,-1,2,"fClusterLimits=",0,"MaximaLimit, PadLimit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayF),-1,-1,2,"fVertexPos=",0,"pos Min, pos Max, step width");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayI),-1,-1,2,"fRichSeg=",0,"nRichSeg, x-border, y-border");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayI),-1,-1,2,"fNeighbourPad=",0,"up ,upRight, right, downRight, down, downLeft, left, upLeft");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayF),-1,-1,2,"fTF2ParMean=",0,"Radius Parametrization functions (nRingSeg,nVertex,8)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayF),-1,-1,2,"fTF2ParSigma=",0,"Sigma Parametrization functions (nRingSeg,nVertex,8)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TArrayF),-1,-1,2,"fLeptonSelection=",0,"Cuts: beta RPC, beta TOF, MDC dEdx");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleBtRingInfo */
static void G__setup_memvarHParticleBtRingInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingInfo));
   { HParticleBtRingInfo *p; p=(HParticleBtRingInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPrediction[128][128]=",0,"tracks,predicted pads");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRingMatrix[128][128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRichHitAdd[1024]=",0,"fired pads");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRichHitCharge[1024]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIsInCluster[1024]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTrackTheta[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTrackPhi[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTrackVertex[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTrackSec[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTrackPCandIdx[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsGoodTrack[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPosXCenter[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPosYCenter[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fClusTrackNo[32][32]=",0,"clusters, tracks");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fClusIsGood[32]=",0,"clusters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fClusPadSum[32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fClusPadRing[32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusChargeSum[32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusChargeRing[32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusPosX[32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusPosY[32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fClusClass[32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fClusNMaxima[32][32]=",0,"clusters,tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fClusNMaximaPad[32][32][32]=",0,"clusters,tracks,maxima");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusNMaximaPosX[32][32][32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusNMaximaPosY[32][32][32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusChi2[32][32][32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusChi2XMM[32][32][32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusChi2YMM[32][32][32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusCircleX[32][32][32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusCircleY[32][32][32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusSig1X[32][32][32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusSig1Y[32][32][32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusSig2X[32][32][32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClusSig2Y[32][32][32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleBtRingF */
static void G__setup_memvarHParticleBtRingF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingF));
   { HParticleBtRingF *p; p=(HParticleBtRingF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar),-1,-1,2,"fBtPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleAngleCor),-1,-1,2,"fAngleCor=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSector=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNParMean=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNParSigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRingSeg=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRingSegStep=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRingSegOffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRichSeg=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRichSegBorderX=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRichSegBorderY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fThetaAngleMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fThetaAngleMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fParThetaAngleMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fParThetaAngleMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSizeMatrix=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fChargeLimit[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fChargeLimitMaximum[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxSigmaRange=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMinimumSigmaValue=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSigmaErrorPad=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fVertexPosMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fVertexPosMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fVertexStep=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhiOff[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhiOff2[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPhiOffsetPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fRad2Deg=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fRad2DegX=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fRad2DegY=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgR),G__defined_typename("vector<vector<TF2*> >"),-1,2,"fPol2DMean=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgR),G__defined_typename("vector<vector<TF2*> >"),-1,2,"fPol2DSigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,2,"fFiredPads=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,2,"fPrediction=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,2,"fRingMatrix=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fRichHitAdd=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fRichHitCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fTrackTheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fTrackPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fTrackVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fTrackSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fTrackPCandIdx=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<Bool_t>"),-1,2,"fIsGoodTrack=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fPosXCenter=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fPosYCenter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleBtClusterF */
static void G__setup_memvarHParticleBtClusterF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtClusterF));
   { HParticleBtClusterF *p; p=(HParticleBtClusterF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar),-1,-1,2,"fBtPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingF),-1,-1,2,"fRing=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPadUp=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPadUpRight=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPadRight=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPadDownRight=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPadDown=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPadDownLeft=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPadLeft=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPadUpLeft=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fChargeLimit[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fChargeLimitMaximum[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPadWidthX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPadWidthY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fNSigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxSigmaRange=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxSigmaRangeSmall=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSigmaErrorPad=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fNMaxLimit=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fClusSizeLimit=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMinimumSigmaValue=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaximumType=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSigmaGaus[2]=",0,"x,y");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSigmaGausRange[2]=",0,"x,y");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fChargeDiagonalPar[3]=",0,"3 Params per function");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fChargeVerticalPar[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fChargeHorizontalPar[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhiOff[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhiOff2[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPhiOffsetPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRingSeg=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRingSegStep=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRingSegOffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNParMean=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNParSigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fParThetaAngleMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fParThetaAngleMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgR),G__defined_typename("vector<vector<TF2*> >"),-1,2,"fPol2DMean=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgR),G__defined_typename("vector<vector<TF2*> >"),-1,2,"fPol2DSigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fRad2Deg=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fRad2DegX=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fRad2DegY=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fIsInCluster=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,2,"fClusTrackNoShared=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<Bool_t>"),-1,2,"fClusIsGood=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fClusPadSum=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fClusPadRing=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fClusChargeSum=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fClusChargeRing=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fClusPosX=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fClusPosY=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fClusClass=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,2,"fClusNMaxima=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Int_t> > >"),-1,2,"fClusNMaximaPad=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Float_t> > >"),-1,2,"fClusNMaximaPosX=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Float_t> > >"),-1,2,"fClusNMaximaPosY=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Float_t> > >"),-1,2,"fClusChi2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Float_t> > >"),-1,2,"fClusChi2XMM=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Float_t> > >"),-1,2,"fClusChi2YMM=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Float_t> > >"),-1,2,"fClusCircleX=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Float_t> > >"),-1,2,"fClusCircleY=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Float_t> > >"),-1,2,"fClusSig1X=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Float_t> > >"),-1,2,"fClusSig1Y=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Float_t> > >"),-1,2,"fClusSig2X=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<Float_t> > >"),-1,2,"fClusSig2Y=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,2,"fPrediction=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fRichHitAdd=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fRichHitCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fRingMeanDistX=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,2,"fRingMeanDistY=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleBtRing */
static void G__setup_memvarHParticleBtRing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRing));
   { HParticleBtRing *p; p=(HParticleBtRing*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPadsRing=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPadsSum=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeRing=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeSum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fClusters=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaxima=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaximaCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNearbyMaxima=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChi2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanDist=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRingMatrix=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaximaShared=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaximaSharedTrack[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaximaSharedTrackIdx[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaximaSharedBad=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaximaSharedBadTrack[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaximaSharedBadTrackIdx[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaximaChargeShared=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaximaChargeSharedTrack[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaximaChargeSharedTrackIdx[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaximaChargeSharedBad=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaximaChargeSharedBadTrack[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaximaChargeSharedBadTrackIdx[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNearbyMaximaShared=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNearbyMaximaSharedTrack[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNearbyMaximaSharedTrackIdx[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleBt */
static void G__setup_memvarHParticleBt(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBt));
   { HParticleBt *p; p=(HParticleBt*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fParticleBtOutCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fParticleBtRingInfoCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingF),-1,-1,2,"fRing=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtClusterF),-1,-1,2,"fClus=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fCandCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,2,"fRichCal=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter),-1,-1,2,"fSorter=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleAngleCor),-1,-1,2,"fAngleCor=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar),-1,-1,2,"fBtPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDebugInfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fdoAngleCorr=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fBetaRPCLimit=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fBetaTOFLimit=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"fMdcdEdxLimit=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,2,"foAngleLimit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleBtAngleTrafo */
static void G__setup_memvarHParticleBtAngleTrafo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtAngleTrafo));
   { HParticleBtAngleTrafo *p; p=(HParticleBtAngleTrafo*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"yParMax=6LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"thetaParMax=7LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"xParMax=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"xPadParMax=5LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"zParMax=6LL",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yThetaPar[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yPadThetaPar[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yPadYPar[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"thetaYPar[7]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"thetaYPadPar[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yYPadPar[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xPar[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xPadPar[5]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dzPar[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dz2Par[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dzPadPar[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dz2PadPar[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dzYPar[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dz2YPar[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dzThetaPar[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dz2ThetaPar[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dzThetaPhiPar[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dz2ThetaPhiPar[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"thetaOffset[3]=",0,"0: y fit, 1,2: yPad fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phiOffset=",0,"for theta yPad fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"thetaSlope[2]=",0,"correction for theta,phi->y: thetaSlope*theta*phi**2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"thetaPadSlope[6]=",0,"correction for theta,phi->yPad: thetaPadSlope*theta*phi**2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dyPadSlope[4]=",0,"correction for x,y->yPad: dyPadSlope*dy*phi**2 and alike");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phiSlope[2]=",0,"correction for theta,phi->y: phiSlope*phi**2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phiPadSlope[4]=",0,"0-2: correction for theta,phi->yPad: phiPadSlope*phi**2; 3: y,phi->yPad");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phiThetaSlope[5]=",0,"correction for y or yPad -> theta: phiThetaSlope*phi**2 (dPhi**2)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"padThetaSlope[4]=",0,"correction for yPad -> theta: padThetaSlope*yPad*phi**2 (or dyPad**2)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yThetaSlope[4]=",0,"correction for y -> theta: yThetaSlope*y*phi**2 (or dy**2)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yOffset[6]=",0,"used for y,phi -> yPad, xPad, yPad -> Phi, z,y -> deltaTheta");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yProjOffset[2]=",0,"used for y,phi -> theta");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yPadOffset[3]=",0,"[0],[1]: yPad,phi -> theta, [2]: yPad,phi -> y");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xPadSize=",0,"constant value, does not depend on x nor y");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xPadOffset=",0,"x-pad number of the center of  a sector (phi=0)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dxVertex=",0,"intermediate storage, calculated by zTheta2dY, called by zTheta2dX");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dxPadVertex=",0,"intermediate storage, calculated by zTheta2dYPad, called by zTheta2dXPad");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zRichCenter=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dzTarg=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zRef=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zNorm=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"thetaRef=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yRef=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rad2deg=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticlePathLengthCorr */
static void G__setup_memvarHParticlePathLengthCorr(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePathLengthCorr));
   { HParticlePathLengthCorr *p; p=(HParticlePathLengthCorr*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"candCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector),-1,-1,4,"pVertex=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"A[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"B[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"D[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"an[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HMdcPlane),-1,-1,4,"hPlane[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zVm=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xVm=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"yVm=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"start=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"beamVelocity=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleT0Reco */
static void G__setup_memvarHParticleT0Reco(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0Reco));
   { HParticleT0Reco *p; p=(HParticleT0Reco*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"candCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"catStart=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HCategory),-1,-1,4,"catStartcal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HEventHeader),-1,-1,4,"fEvHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgR),G__defined_typename("vector<tofvalues>"),-1,4,"eventMETA[2]=",0,"helper array to switch systems");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgR),G__defined_typename("vector<tofvalues>"),-1,4,"eventTOF=",0,"per event values of all candidates TOF");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgR),G__defined_typename("vector<tofvalues>"),-1,4,"eventRPC=",0,"per event values of all candidates RPC");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0RecocLcLstartvalues),G__defined_typename("startvalues"),-1,4,"start[2][16]=",0,"values per start module:strip");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0RecocLcLbuffers),G__defined_typename("buffers"),-1,4,"buff=",0,"all circular buffers");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"vparticle=",0,"all known ids");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),G__defined_typename("map<Int_t,Int_t>"),-1,4,"mIdToIndex=",0,"all known ids");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOHParticleT0RecocLcLmomCutcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleT0RecocLcLmomCutgRsPgRsPgR),G__defined_typename("map<Int_t,momCut>"),-1,4,"mMomCut1Sys[2]=",0,"mom cuts iteration 1 per sys");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOHParticleT0RecocLcLmomCutcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleT0RecocLcLmomCutgRsPgRsPgR),G__defined_typename("map<Int_t,momCut>"),-1,4,"mMomCut2Sys[2]=",0,"mom cuts iteration 2 per sys");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"t0rpc=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"t0tof=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"t0startcont=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"t0startconterr=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"c=",0,"speed of light");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"run=",0,"beamtime");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseFlagged=",0,"use flagged kIsUsed candidates for t0 reco (default=kTRUE)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fisSimulation=",0,"for simulation START has to be treated different");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fisEmbedding=",0,"embedding mode");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HEnergyLossCorrPar),-1,-1,4,"eLoss=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCut<HParticleCand> */
static void G__setup_memvarHParticleCutlEHParticleCandgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandgR));
   { HParticleCut<HParticleCand> *p; p=(HParticleCut<HParticleCand>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCutNumber=",0,"a unique cut number to handle this cut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fcondition=",0,"formular expression for this object to cut on");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fmaxCut=",0,"how many version can be used at max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TDirectory),-1,-1,4,"fsaveDir=",0,"!  remember the actual directory before strting to work (will be restored)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctFail=",0,"count evaluation == kFALSE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctCall=",0,"count all call to the evaluation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fbInverseCut=",0,"default kFALSE , kTRUE will invert selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand),-1,-1,4,"fc=",0,"template class pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTree),-1,-1,4,"fTree=",0,"mini tree on the object to cut on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula),-1,-1,4,"fselect=",0,"formula object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCut<HParticleCandSim> */
static void G__setup_memvarHParticleCutlEHParticleCandSimgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandSimgR));
   { HParticleCut<HParticleCandSim> *p; p=(HParticleCut<HParticleCandSim>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCutNumber=",0,"a unique cut number to handle this cut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fcondition=",0,"formular expression for this object to cut on");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fmaxCut=",0,"how many version can be used at max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TDirectory),-1,-1,4,"fsaveDir=",0,"!  remember the actual directory before strting to work (will be restored)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctFail=",0,"count evaluation == kFALSE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctCall=",0,"count all call to the evaluation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fbInverseCut=",0,"default kFALSE , kTRUE will invert selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim),-1,-1,4,"fc=",0,"template class pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTree),-1,-1,4,"fTree=",0,"mini tree on the object to cut on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula),-1,-1,4,"fselect=",0,"formula object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCut<HParticlePair> */
static void G__setup_memvarHParticleCutlEHParticlePairgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticlePairgR));
   { HParticleCut<HParticlePair> *p; p=(HParticleCut<HParticlePair>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCutNumber=",0,"a unique cut number to handle this cut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fcondition=",0,"formular expression for this object to cut on");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fmaxCut=",0,"how many version can be used at max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TDirectory),-1,-1,4,"fsaveDir=",0,"!  remember the actual directory before strting to work (will be restored)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctFail=",0,"count evaluation == kFALSE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctCall=",0,"count all call to the evaluation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fbInverseCut=",0,"default kFALSE , kTRUE will invert selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticlePair),-1,-1,4,"fc=",0,"template class pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTree),-1,-1,4,"fTree=",0,"mini tree on the object to cut on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula),-1,-1,4,"fselect=",0,"formula object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCut<HParticleGeantPair> */
static void G__setup_memvarHParticleCutlEHParticleGeantPairgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantPairgR));
   { HParticleCut<HParticleGeantPair> *p; p=(HParticleCut<HParticleGeantPair>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCutNumber=",0,"a unique cut number to handle this cut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fcondition=",0,"formular expression for this object to cut on");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fmaxCut=",0,"how many version can be used at max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TDirectory),-1,-1,4,"fsaveDir=",0,"!  remember the actual directory before strting to work (will be restored)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctFail=",0,"count evaluation == kFALSE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctCall=",0,"count all call to the evaluation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fbInverseCut=",0,"default kFALSE , kTRUE will invert selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantPair),-1,-1,4,"fc=",0,"template class pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTree),-1,-1,4,"fTree=",0,"mini tree on the object to cut on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula),-1,-1,4,"fselect=",0,"formula object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCut<HParticleGeant> */
static void G__setup_memvarHParticleCutlEHParticleGeantgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantgR));
   { HParticleCut<HParticleGeant> *p; p=(HParticleCut<HParticleGeant>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCutNumber=",0,"a unique cut number to handle this cut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fcondition=",0,"formular expression for this object to cut on");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fmaxCut=",0,"how many version can be used at max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TDirectory),-1,-1,4,"fsaveDir=",0,"!  remember the actual directory before strting to work (will be restored)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctFail=",0,"count evaluation == kFALSE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctCall=",0,"count all call to the evaluation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fbInverseCut=",0,"default kFALSE , kTRUE will invert selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeant),-1,-1,4,"fc=",0,"template class pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTree),-1,-1,4,"fTree=",0,"mini tree on the object to cut on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula),-1,-1,4,"fselect=",0,"formula object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCut<HParticleGeantDecay> */
static void G__setup_memvarHParticleCutlEHParticleGeantDecaygR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantDecaygR));
   { HParticleCut<HParticleGeantDecay> *p; p=(HParticleCut<HParticleGeantDecay>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCutNumber=",0,"a unique cut number to handle this cut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fcondition=",0,"formular expression for this object to cut on");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fmaxCut=",0,"how many version can be used at max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TDirectory),-1,-1,4,"fsaveDir=",0,"!  remember the actual directory before strting to work (will be restored)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctFail=",0,"count evaluation == kFALSE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctCall=",0,"count all call to the evaluation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fbInverseCut=",0,"default kFALSE , kTRUE will invert selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay),-1,-1,4,"fc=",0,"template class pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTree),-1,-1,4,"fTree=",0,"mini tree on the object to cut on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula),-1,-1,4,"fselect=",0,"formula object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCut<HParticleEvtInfo> */
static void G__setup_memvarHParticleCutlEHParticleEvtInfogR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleEvtInfogR));
   { HParticleCut<HParticleEvtInfo> *p; p=(HParticleCut<HParticleEvtInfo>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCutNumber=",0,"a unique cut number to handle this cut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fcondition=",0,"formular expression for this object to cut on");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fmaxCut=",0,"how many version can be used at max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TDirectory),-1,-1,4,"fsaveDir=",0,"!  remember the actual directory before strting to work (will be restored)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctFail=",0,"count evaluation == kFALSE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctCall=",0,"count all call to the evaluation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fbInverseCut=",0,"default kFALSE , kTRUE will invert selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfo),-1,-1,4,"fc=",0,"template class pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTree),-1,-1,4,"fTree=",0,"mini tree on the object to cut on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula),-1,-1,4,"fselect=",0,"formula object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCut<HRichHit> */
static void G__setup_memvarHParticleCutlEHRichHitgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitgR));
   { HParticleCut<HRichHit> *p; p=(HParticleCut<HRichHit>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCutNumber=",0,"a unique cut number to handle this cut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fcondition=",0,"formular expression for this object to cut on");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fmaxCut=",0,"how many version can be used at max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TDirectory),-1,-1,4,"fsaveDir=",0,"!  remember the actual directory before strting to work (will be restored)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctFail=",0,"count evaluation == kFALSE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctCall=",0,"count all call to the evaluation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fbInverseCut=",0,"default kFALSE , kTRUE will invert selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HRichHit),-1,-1,4,"fc=",0,"template class pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTree),-1,-1,4,"fTree=",0,"mini tree on the object to cut on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula),-1,-1,4,"fselect=",0,"formula object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCut<HRichHitSim> */
static void G__setup_memvarHParticleCutlEHRichHitSimgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitSimgR));
   { HParticleCut<HRichHitSim> *p; p=(HParticleCut<HRichHitSim>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCutNumber=",0,"a unique cut number to handle this cut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fcondition=",0,"formular expression for this object to cut on");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fmaxCut=",0,"how many version can be used at max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TDirectory),-1,-1,4,"fsaveDir=",0,"!  remember the actual directory before strting to work (will be restored)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctFail=",0,"count evaluation == kFALSE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctCall=",0,"count all call to the evaluation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fbInverseCut=",0,"default kFALSE , kTRUE will invert selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HRichHitSim),-1,-1,4,"fc=",0,"template class pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTree),-1,-1,4,"fTree=",0,"mini tree on the object to cut on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula),-1,-1,4,"fselect=",0,"formula object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCut<HEventHeader> */
static void G__setup_memvarHParticleCutlEHEventHeadergR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHEventHeadergR));
   { HParticleCut<HEventHeader> *p; p=(HParticleCut<HEventHeader>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCutNumber=",0,"a unique cut number to handle this cut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fcondition=",0,"formular expression for this object to cut on");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fmaxCut=",0,"how many version can be used at max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TDirectory),-1,-1,4,"fsaveDir=",0,"!  remember the actual directory before strting to work (will be restored)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctFail=",0,"count evaluation == kFALSE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctCall=",0,"count all call to the evaluation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fbInverseCut=",0,"default kFALSE , kTRUE will invert selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HEventHeader),-1,-1,4,"fc=",0,"template class pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTree),-1,-1,4,"fTree=",0,"mini tree on the object to cut on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula),-1,-1,4,"fselect=",0,"formula object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCut<HVertex> */
static void G__setup_memvarHParticleCutlEHVertexgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHVertexgR));
   { HParticleCut<HVertex> *p; p=(HParticleCut<HVertex>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCutNumber=",0,"a unique cut number to handle this cut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fcondition=",0,"formular expression for this object to cut on");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fmaxCut=",0,"how many version can be used at max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TDirectory),-1,-1,4,"fsaveDir=",0,"!  remember the actual directory before strting to work (will be restored)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctFail=",0,"count evaluation == kFALSE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctCall=",0,"count all call to the evaluation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fbInverseCut=",0,"default kFALSE , kTRUE will invert selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HVertex),-1,-1,4,"fc=",0,"template class pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTree),-1,-1,4,"fTree=",0,"mini tree on the object to cut on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula),-1,-1,4,"fselect=",0,"formula object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HParticleCut<HGeantKine> */
static void G__setup_memvarHParticleCutlEHGeantKinegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHGeantKinegR));
   { HParticleCut<HGeantKine> *p; p=(HParticleCut<HGeantKine>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCutNumber=",0,"a unique cut number to handle this cut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TString),-1,-1,4,"fcondition=",0,"formular expression for this object to cut on");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fmaxCut=",0,"how many version can be used at max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TDirectory),-1,-1,4,"fsaveDir=",0,"!  remember the actual directory before strting to work (will be restored)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctFail=",0,"count evaluation == kFALSE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),G__defined_typename("vector<ULong64_t>"),-1,4,"fctCall=",0,"count all call to the evaluation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fbInverseCut=",0,"default kFALSE , kTRUE will invert selection");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HGeantKine),-1,-1,4,"fc=",0,"template class pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTree),-1,-1,4,"fTree=",0,"mini tree on the object to cut on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula),-1,-1,4,"fselect=",0,"formula object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarParticleDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncParticle(void) {
   /* Particle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_Particle));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCand(void) {
   /* HParticleCand */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand));
   G__memfunc_setup("HParticleCand",1266,G__ParticleDict_246_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlagBit",997,G__ParticleDict_246_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i 'Particle::eFlagBits' - 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetFlagBit",1224,G__ParticleDict_246_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i 'Particle::eFlagBits' - 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFlagBit",885,G__ParticleDict_246_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i 'Particle::eFlagBits' - 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlagBit",997,G__ParticleDict_246_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetFlagBit",1224,G__ParticleDict_246_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFlagBit",885,G__ParticleDict_246_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlagBitByValue",1693,G__ParticleDict_246_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i 'Particle::eFlagBits' - 0 - bit g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlagBitByValue",1693,G__ParticleDict_246_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - bit g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFlagDoubleHit",1494,G__ParticleDict_246_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFlagAllBestHit",1570,G__ParticleDict_246_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFlagNoBestHit",1478,G__ParticleDict_246_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFlagField",1182,G__ParticleDict_246_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlagField",1194,G__ParticleDict_246_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - field", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFlagAND",809,G__ParticleDict_246_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 8, 1, 0, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFlagOR",759,G__ParticleDict_246_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 8, 1, 0, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDoubleHitsLeptons",2072,G__ParticleDict_246_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDoubleHitsHadrons",2050,G__ParticleDict_246_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printFlags",1050,G__ParticleDict_246_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' comment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_246_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '31' selection", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("select",640,G__ParticleDict_246_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "1 - 'Bool_t (*)(HParticleCand*)' 0 - function", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIndex",836,G__ParticleDict_246_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPID",553,G__ParticleDict_246_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__ParticleDict_246_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSystem",977,G__ParticleDict_246_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingCorr",1138,G__ParticleDict_246_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - rc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofRec",911,G__ParticleDict_246_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcdEdx",997,G__ParticleDict_246_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofdEdx",1018,G__ParticleDict_246_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCharge",918,G__ParticleDict_246_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBeta",712,G__ParticleDict_246_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMomentum",1182,G__ParticleDict_246_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMass2",786,G__ParticleDict_246_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__ParticleDict_246_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__ParticleDict_246_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setR",414,G__ParticleDict_246_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ",422,G__ParticleDict_246_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChi2",658,G__ParticleDict_246_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistanceToMetaHit",2022,G__ParticleDict_246_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInnerSegmentChi2",1889,G__ParticleDict_246_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOuterSegmentChi2",1908,G__ParticleDict_246_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAngleToNearbyFittedInner",2739,G__ParticleDict_246_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAngleToNearbyUnfittedInner",2966,G__ParticleDict_246_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingNumCals",1423,G__ParticleDict_246_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", "RICH700", (void*) NULL, 0);
   G__memfunc_setup("setRingNumPads",1428,G__ParticleDict_246_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingAmplitude",1665,G__ParticleDict_246_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingHouTra",1327,G__ParticleDict_246_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingPatternMatrix",2095,G__ParticleDict_246_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingRadius",1348,G__ParticleDict_246_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - c", "RICH700", (void*) NULL, 0);
   G__memfunc_setup("setRingChi2",1058,G__ParticleDict_246_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - c", "RICH700", (void*) NULL, 0);
   G__memfunc_setup("setRingCentroid",1556,G__ParticleDict_246_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichPhi",1011,G__ParticleDict_246_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichTheta",1224,G__ParticleDict_246_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetaMatchQuality",1961,G__ParticleDict_246_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetaMatchQualityShower",2593,G__ParticleDict_246_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetaMatchRadius",1832,G__ParticleDict_246_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetaMatchRadiusShower",2464,G__ParticleDict_246_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRkMetaDx",1100,G__ParticleDict_246_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRkMetaDy",1101,G__ParticleDict_246_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBetaOrg",1008,G__ParticleDict_246_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistanceToMetaHitOrg",2318,G__ParticleDict_246_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMomentumOrg",1478,G__ParticleDict_246_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShowerSum0",1321,G__ParticleDict_246_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShowerSum1",1322,G__ParticleDict_246_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShowerSum2",1323,G__ParticleDict_246_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSelectedMeta",1532,G__ParticleDict_246_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetaInd",1006,G__ParticleDict_246_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichInd",1005,G__ParticleDict_246_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichBTInd",1155,G__ParticleDict_246_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInnerSegInd",1410,G__ParticleDict_246_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOuterSegInd",1429,G__ParticleDict_246_0_71, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcInd",908,G__ParticleDict_246_0_72, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShowerInd",1247,G__ParticleDict_246_0_73, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofHitInd",1205,G__ParticleDict_246_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofClstInd",1318,G__ParticleDict_246_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex",824,G__ParticleDict_246_0_76, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPID",541,G__ParticleDict_246_0_77, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__ParticleDict_246_0_78, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSystem",965,G__ParticleDict_246_0_79, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSystemUsed",1366,G__ParticleDict_246_0_80, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingCorr",1126,G__ParticleDict_246_0_81, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isRichMatch",1103,G__ParticleDict_246_0_82, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'Particle::eMatching' - 0 - match", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofRec",899,G__ParticleDict_246_0_83, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcdEdx",985,G__ParticleDict_246_0_84, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofdEdx",1006,G__ParticleDict_246_0_85, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__ParticleDict_246_0_86, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBeta",700,G__ParticleDict_246_0_87, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMomentum",1170,G__ParticleDict_246_0_88, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMass2",774,G__ParticleDict_246_0_89, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMass",724,G__ParticleDict_246_0_90, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__ParticleDict_246_0_91, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__ParticleDict_246_0_92, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getR",402,G__ParticleDict_246_0_93, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ",410,G__ParticleDict_246_0_94, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2",646,G__ParticleDict_246_0_95, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistanceToMetaHit",2010,G__ParticleDict_246_0_96, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTof",617,G__ParticleDict_246_0_97, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofNorm",1029,G__ParticleDict_246_0_98, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "f - 'Float_t' 0 '2100' dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInnerSegmentChi2",1877,G__ParticleDict_246_0_99, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOuterSegmentChi2",1896,G__ParticleDict_246_0_100, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAngleToNearbyFittedInner",2727,G__ParticleDict_246_0_101, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAngleToNearbyUnfittedInner",2954,G__ParticleDict_246_0_102, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingNumCals",1411,G__ParticleDict_246_0_103, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingNumPads",1416,G__ParticleDict_246_0_104, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingAmplitude",1653,G__ParticleDict_246_0_105, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAverageRingCharge",2005,G__ParticleDict_246_0_106, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingHouTra",1315,G__ParticleDict_246_0_107, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingPatternMatrix",2083,G__ParticleDict_246_0_108, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingRadius",1336,G__ParticleDict_246_0_109, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "RICH700", (void*) NULL, 0);
   G__memfunc_setup("getRingChi2",1046,G__ParticleDict_246_0_110, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "RICH700", (void*) NULL, 0);
   G__memfunc_setup("getRingCentroid",1544,G__ParticleDict_246_0_111, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichPhi",999,G__ParticleDict_246_0_112, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichTheta",1212,G__ParticleDict_246_0_113, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaMatchQuality",1949,G__ParticleDict_246_0_114, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaMatchQualityShower",2581,G__ParticleDict_246_0_115, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaMatchRadius",1820,G__ParticleDict_246_0_116, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaMatchRadiusShower",2452,G__ParticleDict_246_0_117, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRkMetaDx",1088,G__ParticleDict_246_0_118, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRkMetaDy",1089,G__ParticleDict_246_0_119, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBetaOrg",996,G__ParticleDict_246_0_120, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistanceToMetaHitOrg",2306,G__ParticleDict_246_0_121, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMomentumOrg",1466,G__ParticleDict_246_0_122, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcRkMetaMatch",1476,G__ParticleDict_246_0_123, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 '1.' weightX f - 'Float_t' 0 '1.' weightY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerSum0",1309,G__ParticleDict_246_0_124, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerSum1",1310,G__ParticleDict_246_0_125, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerSum2",1311,G__ParticleDict_246_0_126, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerDeltaSum",1751,G__ParticleDict_246_0_127, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSelectedMeta",1520,G__ParticleDict_246_0_128, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "find the defined enum in hparticledef.h", (void*) NULL, 0);
   G__memfunc_setup("isTofHitUsed",1211,G__ParticleDict_246_0_129, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTofClstUsed",1324,G__ParticleDict_246_0_130, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isRpcClstUsed",1320,G__ParticleDict_246_0_131, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isShowerUsed",1253,G__ParticleDict_246_0_132, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isMetaUsed",1012,G__ParticleDict_246_0_133, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaInd",994,G__ParticleDict_246_0_134, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichInd",993,G__ParticleDict_246_0_135, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichBTInd",1143,G__ParticleDict_246_0_136, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInnerSegInd",1398,G__ParticleDict_246_0_137, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOuterSegInd",1417,G__ParticleDict_246_0_138, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcInd",896,G__ParticleDict_246_0_139, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerInd",1235,G__ParticleDict_246_0_140, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHitInd",1193,G__ParticleDict_246_0_141, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofClstInd",1306,G__ParticleDict_246_0_142, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaHitInd",1287,G__ParticleDict_246_0_143, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc4vectorProperties",2183,G__ParticleDict_246_0_144, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0.51099892' mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDeltaTheta",1312,G__ParticleDict_246_0_145, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "delta theta Rich-RK", (void*) NULL, 0);
   G__memfunc_setup("getDeltaPhi",1099,G__ParticleDict_246_0_146, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "delta phi Rich-RK", (void*) NULL, 0);
   G__memfunc_setup("getRichMatchingQuality",2266,G__ParticleDict_246_0_147, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichMatchingQualityNorm",2678,G__ParticleDict_246_0_148, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNewRich",908,G__ParticleDict_246_0_149, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZprime",951,G__ParticleDict_246_0_150, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - xBeam f - 'Float_t' 0 - yBeam "
"f - 'Float_t' 1 - rPrime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZprime",951,G__ParticleDict_246_0_151, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - xBeam f - 'Float_t' 0 - yBeam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRprime",943,G__ParticleDict_246_0_152, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - xBeam f - 'Float_t' 0 - yBeam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMomentumPID",1391,G__ParticleDict_246_0_153, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMomentumCorrectionPID",2439,G__ParticleDict_246_0_154, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrectedMomentumPID",2314,G__ParticleDict_246_0_155, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMass2PID",995,G__ParticleDict_246_0_156, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMass2CorrectionPID",2043,G__ParticleDict_246_0_157, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrectedMass2PID",1918,G__ParticleDict_246_0_158, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayers",956,G__ParticleDict_246_0_159, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - io h - 'UInt_t' 0 - layers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayer",841,G__ParticleDict_246_0_160, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - io h - 'UInt_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetAllLayers",1464,G__ParticleDict_246_0_161, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLayer",841,G__ParticleDict_246_0_162, 121, -1, -1, 0, 3, 3, 1, 0, 
"h - 'UInt_t' 0 - io h - 'UInt_t' 0 - lay "
"h - 'UInt_t' 1 - layers", (char*)NULL, (void*) G__func2void( (void (*)(UInt_t, UInt_t, UInt_t&))(&HParticleCand::setLayer) ), 0);
   G__memfunc_setup("getLayer",829,G__ParticleDict_246_0_163, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - io h - 'UInt_t' 0 - lay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayer",907,G__ParticleDict_246_0_164, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - io", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLayerMod",1195,G__ParticleDict_246_0_165, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasLayers",940,G__ParticleDict_246_0_166, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - io h - 'UInt_t' 0 - layerstest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFakeRejected",1401,G__ParticleDict_246_0_167, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' io", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFakeRejected",1513,G__ParticleDict_246_0_168, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' io", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetFakeRejected",1740,G__ParticleDict_246_0_169, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' io", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetAllFakeRejected",2021,G__ParticleDict_246_0_170, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffVertexClust",1776,G__ParticleDict_246_0_171, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetOffVertexClust",2003,G__ParticleDict_246_0_172, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOffVertexClust",1664,G__ParticleDict_246_0_173, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUsedVertex",1371,G__ParticleDict_246_0_174, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetUsedVertex",1598,G__ParticleDict_246_0_175, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isUsedVertex",1259,G__ParticleDict_246_0_176, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPrimaryVertex",1710,G__ParticleDict_246_0_177, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetPrimaryVertex",1937,G__ParticleDict_246_0_178, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isPrimaryVertex",1598,G__ParticleDict_246_0_179, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printLayers",1181,G__ParticleDict_246_0_180, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNWSeg",784,G__ParticleDict_246_0_181, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - io h - 'UInt_t' 0 - nw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWSeg",772,G__ParticleDict_246_0_182, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - io", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAtMdcEdge",1162,G__ParticleDict_246_0_183, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetAtMdcEdge",1389,G__ParticleDict_246_0_184, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isAtMdcEdge",1050,G__ParticleDict_246_0_185, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isAtAnyMdcEdge",1346,G__ParticleDict_246_0_186, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '2' io", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetaModule",1337,G__ParticleDict_246_0_187, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - hit h - 'UInt_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetMetaModule",1564,G__ParticleDict_246_0_188, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetaCell",1107,G__ParticleDict_246_0_189, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - hit h - 'UInt_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetMetaCell",1334,G__ParticleDict_246_0_190, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaModule",1325,G__ParticleDict_246_0_191, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaCell",1095,G__ParticleDict_246_0_192, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_246_0_193, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCand::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_246_0_194, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCand::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_246_0_195, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCand::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_246_0_196, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCand::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_246_0_200, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_246_0_201, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCand::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_246_0_202, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCand::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_246_0_203, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCand::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_246_0_204, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCand::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCand", 1266, G__ParticleDict_246_0_205, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand), -1, 0, 1, 1, 1, 0, "u 'HParticleCand' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCand", 1392, G__ParticleDict_246_0_206, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_246_0_207, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand), -1, 1, 1, 1, 1, 0, "u 'HParticleCand' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCandSim(void) {
   /* HParticleCandSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim));
   G__memfunc_setup("HParticleCandSim",1563,G__ParticleDict_247_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantPID",1048,G__ParticleDict_247_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantTrack",1328,G__ParticleDict_247_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantTrackRich",1718,G__ParticleDict_247_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - a i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantTrackMeta",1719,G__ParticleDict_247_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - a i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantTrackShower",1960,G__ParticleDict_247_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - a i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantTrackInnerMdc",2112,G__ParticleDict_247_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - a i - 'Int_t' 0 - i "
"i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantTrackOuterMdc",2131,G__ParticleDict_247_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - a i - 'Int_t' 0 - i "
"i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantCorrTrackIds",2022,G__ParticleDict_247_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantxMom",1244,G__ParticleDict_247_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantyMom",1245,G__ParticleDict_247_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantzMom",1246,G__ParticleDict_247_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantxVertex",1585,G__ParticleDict_247_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantyVertex",1586,G__ParticleDict_247_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantzVertex",1587,G__ParticleDict_247_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantParentTrackNum",2250,G__ParticleDict_247_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantParentPID",1666,G__ParticleDict_247_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantGrandParentTrackNum",2742,G__ParticleDict_247_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantGrandParentPID",2158,G__ParticleDict_247_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantCreationMechanism",2565,G__ParticleDict_247_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantMediumNumber",2053,G__ParticleDict_247_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantGeninfo",1537,G__ParticleDict_247_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantGeninfo1",1586,G__ParticleDict_247_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantGeninfo2",1587,G__ParticleDict_247_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantGenweight",1757,G__ParticleDict_247_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantPID",1036,G__ParticleDict_247_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrack",1316,G__ParticleDict_247_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrackRich",1706,G__ParticleDict_247_0_28, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrackMeta",1707,G__ParticleDict_247_0_29, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrackShower",1948,G__ParticleDict_247_0_30, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrackInnerMdc",2100,G__ParticleDict_247_0_31, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrackOuterMdc",2119,G__ParticleDict_247_0_32, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrackInnerMdcN",2178,G__ParticleDict_247_0_33, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrackOuterMdcN",2197,G__ParticleDict_247_0_34, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrackInnerMdcWeight",2716,G__ParticleDict_247_0_35, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTrackOuterMdcWeight",2735,G__ParticleDict_247_0_36, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantCorrTrackIds",2010,G__ParticleDict_247_0_37, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGhostTrack",1238,G__ParticleDict_247_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInDetector",1229,G__ParticleDict_247_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'Particle::eDetBits' - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInDetectors",1344,G__ParticleDict_247_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - flagdetbits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDetector",1224,G__ParticleDict_247_0_41, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodMDCWires",1347,G__ParticleDict_247_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - tr i - 'Int_t' 0 '7' minInner "
"i - 'Int_t' 0 '7' minOuter g - 'Bool_t' 0 'kFALSE' checkall "
"g - 'Bool_t' 0 'kTRUE' requireOuter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodMDCWeight",1441,G__ParticleDict_247_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - tr f - 'Float_t' 0 '0.5' minInner "
"f - 'Float_t' 0 '0.5' minOuter g - 'Bool_t' 0 'kFALSE' checkall "
"g - 'Bool_t' 0 'kTRUE' requireOuter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodMDC",825,G__ParticleDict_247_0_44, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - tr f - 'Float_t' 0 '0.5' minInner "
"f - 'Float_t' 0 '0.5' minOuter i - 'Int_t' 0 '5' minInnerW "
"i - 'Int_t' 0 '5' minOuterW g - 'Bool_t' 0 'kFALSE' checkall "
"g - 'Bool_t' 0 'kTRUE' requireOuter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantxMom",1232,G__ParticleDict_247_0_45, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantyMom",1233,G__ParticleDict_247_0_46, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantzMom",1234,G__ParticleDict_247_0_47, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTotalMom",1628,G__ParticleDict_247_0_48, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantxVertex",1573,G__ParticleDict_247_0_49, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantyVertex",1574,G__ParticleDict_247_0_50, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantzVertex",1575,G__ParticleDict_247_0_51, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantParentTrackNum",2238,G__ParticleDict_247_0_52, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantParentPID",1654,G__ParticleDict_247_0_53, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantGrandParentTrackNum",2730,G__ParticleDict_247_0_54, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantGrandParentPID",2146,G__ParticleDict_247_0_55, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantCreationMechanism",2553,G__ParticleDict_247_0_56, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantMediumNumber",2041,G__ParticleDict_247_0_57, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantGeninfo",1525,G__ParticleDict_247_0_58, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantGeninfo1",1574,G__ParticleDict_247_0_59, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantGeninfo2",1575,G__ParticleDict_247_0_60, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantGenweight",1745,G__ParticleDict_247_0_61, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '31' selection", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ParticleDict_247_0_63, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCandSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_247_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCandSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_247_0_65, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCandSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_247_0_66, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCandSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_247_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_247_0_71, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCandSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_247_0_72, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCandSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_247_0_73, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCandSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_247_0_74, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCandSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCandSim", 1563, G__ParticleDict_247_0_75, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim), -1, 0, 1, 1, 1, 0, "u 'HParticleCandSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCandSim", 1689, G__ParticleDict_247_0_76, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_247_0_77, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim), -1, 1, 1, 1, 1, 0, "u 'HParticleCandSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleWallHit(void) {
   /* HParticleWallHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHit));
   G__memfunc_setup("HParticleWallHit",1585,G__ParticleDict_248_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWallCell",1116,G__ParticleDict_248_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWallCharge",1318,G__ParticleDict_248_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWallTime",1131,G__ParticleDict_248_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWallXlab",1123,G__ParticleDict_248_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWallYlab",1124,G__ParticleDict_248_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWallZlab",1125,G__ParticleDict_248_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWallCell",1104,G__ParticleDict_248_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWallCharge",1306,G__ParticleDict_248_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWallTime",1119,G__ParticleDict_248_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWallXlab",1111,G__ParticleDict_248_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWallYlab",1112,G__ParticleDict_248_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWallZlab",1113,G__ParticleDict_248_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_248_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleWallHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_248_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleWallHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_248_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleWallHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_248_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleWallHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_248_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_248_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleWallHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_248_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleWallHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_248_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleWallHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_248_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleWallHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleWallHit", 1585, G__ParticleDict_248_0_26, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHit), -1, 0, 1, 1, 1, 0, "u 'HParticleWallHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleWallHit", 1711, G__ParticleDict_248_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_248_0_28, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHit), -1, 1, 1, 1, 1, 0, "u 'HParticleWallHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleWallHitSim(void) {
   /* HParticleWallHitSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHitSim));
   G__memfunc_setup("HParticleWallHitSim",1882,G__ParticleDict_249_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHitSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantPID",1048,G__ParticleDict_249_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantxMom",1244,G__ParticleDict_249_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantyMom",1245,G__ParticleDict_249_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantzMom",1246,G__ParticleDict_249_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantxVertex",1585,G__ParticleDict_249_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantyVertex",1586,G__ParticleDict_249_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantzVertex",1587,G__ParticleDict_249_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantPartentTrackNum",2366,G__ParticleDict_249_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantCreationMechanism",2565,G__ParticleDict_249_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantMediumNumber",2053,G__ParticleDict_249_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantGeninfo",1537,G__ParticleDict_249_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantGeninfo1",1586,G__ParticleDict_249_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantGeninfo2",1587,G__ParticleDict_249_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeantGenweight",1757,G__ParticleDict_249_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantPID",1036,G__ParticleDict_249_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantxMom",1232,G__ParticleDict_249_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantyMom",1233,G__ParticleDict_249_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantzMom",1234,G__ParticleDict_249_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantxVertex",1573,G__ParticleDict_249_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantyVertex",1574,G__ParticleDict_249_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantzVertex",1575,G__ParticleDict_249_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantPartentTrackNum",2354,G__ParticleDict_249_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantCreationMechanism",2553,G__ParticleDict_249_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantMediumNumber",2041,G__ParticleDict_249_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantGeninfo",1525,G__ParticleDict_249_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantGeninfo1",1574,G__ParticleDict_249_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantGeninfo2",1575,G__ParticleDict_249_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantGenweight",1745,G__ParticleDict_249_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_249_0_30, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleWallHitSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_249_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleWallHitSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_249_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleWallHitSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_249_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleWallHitSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_249_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_249_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleWallHitSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_249_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleWallHitSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_249_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleWallHitSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_249_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleWallHitSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleWallHitSim", 1882, G__ParticleDict_249_0_42, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHitSim), -1, 0, 1, 1, 1, 0, "u 'HParticleWallHitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleWallHitSim", 2008, G__ParticleDict_249_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_249_0_44, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleWallHitSim), -1, 1, 1, 1, 1, 0, "u 'HParticleWallHitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCal(void) {
   /* HParticleCal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCal));
   G__memfunc_setup("HParticleCal",1164,G__ParticleDict_250_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTOFModule",1179,G__ParticleDict_250_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTOFCell",949,G__ParticleDict_250_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMETACell",1011,G__ParticleDict_250_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTOFLeftAmp",1246,G__ParticleDict_250_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTOFRightAmp",1361,G__ParticleDict_250_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMETALocX",1001,G__ParticleDict_250_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMETALocY",1002,G__ParticleDict_250_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTOFModule",1167,G__ParticleDict_250_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTOFCell",937,G__ParticleDict_250_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMETACell",999,G__ParticleDict_250_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTOFLeftAmp",1234,G__ParticleDict_250_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTOFRightAmp",1349,G__ParticleDict_250_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMETALocX",989,G__ParticleDict_250_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMETALocY",990,G__ParticleDict_250_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_250_0_16, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_250_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_250_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_250_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_250_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_250_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_250_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_250_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_250_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCal::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCal", 1164, G__ParticleDict_250_0_28, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCal), -1, 0, 1, 1, 1, 0, "u 'HParticleCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCal", 1290, G__ParticleDict_250_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_250_0_30, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCal), -1, 1, 1, 1, 1, 0, "u 'HParticleCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleMdc(void) {
   /* HParticleMdc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleMdc));
   G__memfunc_setup("HParticleMdc",1168,G__ParticleDict_253_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleMdc), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIndex",836,G__ParticleDict_253_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex",824,G__ParticleDict_253_0_3, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlag",710,G__ParticleDict_253_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNBinsClus",1201,G__ParticleDict_253_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCellsClus",1304,G__ParticleDict_253_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNMergedClus",1401,G__ParticleDict_253_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdc1X",733,G__ParticleDict_253_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "in [mm]", (void*) NULL, 0);
   G__memfunc_setup("getMdc1Y",734,G__ParticleDict_253_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "in [mm]", (void*) NULL, 0);
   G__memfunc_setup("getMdc2X",734,G__ParticleDict_253_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "in [mm]", (void*) NULL, 0);
   G__memfunc_setup("getMdc2Y",735,G__ParticleDict_253_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "in [mm]", (void*) NULL, 0);
   G__memfunc_setup("getMdc3X",735,G__ParticleDict_253_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "in [mm]", (void*) NULL, 0);
   G__memfunc_setup("getMdc3Y",736,G__ParticleDict_253_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "in [mm]", (void*) NULL, 0);
   G__memfunc_setup("getMdc4X",736,G__ParticleDict_253_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "in [mm]", (void*) NULL, 0);
   G__memfunc_setup("getMdc4Y",737,G__ParticleDict_253_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "in [mm]", (void*) NULL, 0);
   G__memfunc_setup("getNRemovedCellsInnerSeg",2414,G__ParticleDict_253_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getdedx",741,G__ParticleDict_253_0_17, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmadedx",1238,G__ParticleDict_253_0_18, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWirededx",1226,G__ParticleDict_253_0_19, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWireCutdedx",1526,G__ParticleDict_253_0_20, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getdedxSeg",1028,G__ParticleDict_253_0_21, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmadedxSeg",1525,G__ParticleDict_253_0_22, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWireCutdedxSeg",1813,G__ParticleDict_253_0_23, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ParticleDict_253_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcSeg' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ParticleDict_253_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcTrkCand' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_253_0_26, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleMdc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_253_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleMdc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_253_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleMdc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_253_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleMdc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_253_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_253_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleMdc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_253_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleMdc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_253_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleMdc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_253_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleMdc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleMdc", 1168, G__ParticleDict_253_0_38, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleMdc), -1, 0, 1, 1, 1, 0, "u 'HParticleMdc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleMdc", 1294, G__ParticleDict_253_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_253_0_40, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleMdc), -1, 1, 1, 1, 1, 0, "u 'HParticleMdc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleEvtInfo(void) {
   /* HParticleEvtInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfo));
   G__memfunc_setup("HParticleEvtInfo",1591,G__ParticleDict_254_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichMult",1140,G__ParticleDict_254_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichCorrMult",1546,G__ParticleDict_254_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichClusMult",1547,G__ParticleDict_254_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofMult",1047,G__ParticleDict_254_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcMult",1043,G__ParticleDict_254_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcMultHit",1336,G__ParticleDict_254_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofMultCut",1347,G__ParticleDict_254_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcMultCut",1343,G__ParticleDict_254_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcMultHitCut",1636,G__ParticleDict_254_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShowerMult",1382,G__ParticleDict_254_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParticleCandMult",1944,G__ParticleDict_254_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSelectedParticleCandMult",2753,G__ParticleDict_254_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPrimaryParticleCandMult",2684,G__ParticleDict_254_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcClusMult",1433,G__ParticleDict_254_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 12 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcSegFittedMult",1921,G__ParticleDict_254_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 12 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcSegUnfittedMult",2148,G__ParticleDict_254_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 12 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcWires",1130,G__ParticleDict_254_0_18, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - nw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcWiresUnused",1758,G__ParticleDict_254_0_19, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - nw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcWiresRaw",1428,G__ParticleDict_254_0_20, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l i - 'Int_t' 0 - nw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFWallMult",1220,G__ParticleDict_254_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFWallVector",1429,G__ParticleDict_254_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRPlanePhi",1199,G__ParticleDict_254_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhiA",686,G__ParticleDict_254_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhiB",687,G__ParticleDict_254_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhiAB",752,G__ParticleDict_254_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNA",475,G__ParticleDict_254_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNB",476,G__ParticleDict_254_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMeanMult",1135,G__ParticleDict_254_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - mean", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMeanMIPSMult",1448,G__ParticleDict_254_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - mean", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMeanLEPMult",1360,G__ParticleDict_254_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - mean", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMeanMult",1135,G__ParticleDict_254_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s f - 'Float_t' 0 - mean", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMeanMIPSMult",1448,G__ParticleDict_254_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s f - 'Float_t' 0 - mean", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMeanLEPMult",1360,G__ParticleDict_254_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s f - 'Float_t' 0 - mean", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaMult",1247,G__ParticleDict_254_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaMIPSMult",1560,G__ParticleDict_254_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaLEPMult",1472,G__ParticleDict_254_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaMult",1247,G__ParticleDict_254_0_38, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s f - 'Float_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaMIPSMult",1560,G__ParticleDict_254_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s f - 'Float_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaLEPMult",1472,G__ParticleDict_254_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s f - 'Float_t' 0 - sig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanMult",1123,G__ParticleDict_254_0_41, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanMIPSMult",1436,G__ParticleDict_254_0_42, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanLEPMult",1348,G__ParticleDict_254_0_43, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanMult",1123,G__ParticleDict_254_0_44, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanMIPSMult",1436,G__ParticleDict_254_0_45, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanLEPMult",1348,G__ParticleDict_254_0_46, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaMult",1235,G__ParticleDict_254_0_47, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaMIPSMult",1548,G__ParticleDict_254_0_48, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaLEPMult",1460,G__ParticleDict_254_0_49, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaMult",1235,G__ParticleDict_254_0_50, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaMIPSMult",1548,G__ParticleDict_254_0_51, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaLEPMult",1460,G__ParticleDict_254_0_52, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichMult",1128,G__ParticleDict_254_0_53, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichCorrMult",1534,G__ParticleDict_254_0_54, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichClusMult",1535,G__ParticleDict_254_0_55, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofMult",1035,G__ParticleDict_254_0_56, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcMult",1031,G__ParticleDict_254_0_57, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcMultHit",1324,G__ParticleDict_254_0_58, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofMultCut",1335,G__ParticleDict_254_0_59, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcMultCut",1331,G__ParticleDict_254_0_60, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcMultHitCut",1624,G__ParticleDict_254_0_61, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerMult",1370,G__ParticleDict_254_0_62, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParticleCandMult",1932,G__ParticleDict_254_0_63, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSelectedParticleCandMult",2741,G__ParticleDict_254_0_64, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPrimaryParticleCandMult",2672,G__ParticleDict_254_0_65, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcClusMult",1421,G__ParticleDict_254_0_66, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - io", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcSegFittedMult",1909,G__ParticleDict_254_0_67, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - io", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcSegUnfittedMult",2136,G__ParticleDict_254_0_68, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - io", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumRichMult",1437,G__ParticleDict_254_0_69, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumRichCorrMult",1843,G__ParticleDict_254_0_70, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumRichClusMult",1844,G__ParticleDict_254_0_71, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumTofMult",1344,G__ParticleDict_254_0_72, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumRpcMult",1340,G__ParticleDict_254_0_73, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumRpcMultHit",1633,G__ParticleDict_254_0_74, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumTofMultCut",1644,G__ParticleDict_254_0_75, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumRpcMultCut",1640,G__ParticleDict_254_0_76, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumRpcMultHitCut",1933,G__ParticleDict_254_0_77, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumShowerMult",1679,G__ParticleDict_254_0_78, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumParticleCandMult",2241,G__ParticleDict_254_0_79, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumSelectedParticleCandMult",3050,G__ParticleDict_254_0_80, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumPrimaryParticleCandMult",2981,G__ParticleDict_254_0_81, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumMdcClusMult",1730,G__ParticleDict_254_0_82, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - io", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumMdcSegFittedMult",2218,G__ParticleDict_254_0_83, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - io", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumMdcSegUnfittedMult",2445,G__ParticleDict_254_0_84, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - io", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcWiresLay",1412,G__ParticleDict_254_0_85, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcWiresMod",1406,G__ParticleDict_254_0_86, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcWiresSec",1401,G__ParticleDict_254_0_87, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcWires",1118,G__ParticleDict_254_0_88, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcWiresUnusedLay",2040,G__ParticleDict_254_0_89, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcWiresUnusedMod",2034,G__ParticleDict_254_0_90, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcWiresUnusedSec",2029,G__ParticleDict_254_0_91, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcWiresUnused",1746,G__ParticleDict_254_0_92, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcWiresRawLay",1710,G__ParticleDict_254_0_93, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcWiresRawMod",1704,G__ParticleDict_254_0_94, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcWiresRawSec",1699,G__ParticleDict_254_0_95, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcWiresRaw",1416,G__ParticleDict_254_0_96, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFWallMult",1208,G__ParticleDict_254_0_97, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFWallVector",1417,G__ParticleDict_254_0_98, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRPlanePhi",1187,G__ParticleDict_254_0_99, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiA",674,G__ParticleDict_254_0_100, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiB",675,G__ParticleDict_254_0_101, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiAB",740,G__ParticleDict_254_0_102, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNA",463,G__ParticleDict_254_0_103, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNB",464,G__ParticleDict_254_0_104, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventSelector",1667,G__ParticleDict_254_0_105, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEventSelector",1679,G__ParticleDict_254_0_106, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodEvent",1127,G__ParticleDict_254_0_107, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSelectorBit",1452,G__ParticleDict_254_0_108, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetSelectorBit",1679,G__ParticleDict_254_0_109, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearMembers",1234,G__ParticleDict_254_0_110, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_254_0_111, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleEvtInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_254_0_112, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleEvtInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_254_0_113, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleEvtInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_254_0_114, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleEvtInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_254_0_118, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_254_0_119, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleEvtInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_254_0_120, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleEvtInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_254_0_121, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleEvtInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_254_0_122, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleEvtInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleEvtInfo", 1591, G__ParticleDict_254_0_123, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfo), -1, 0, 1, 1, 1, 0, "u 'HParticleEvtInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleEvtInfo", 1717, G__ParticleDict_254_0_124, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_254_0_125, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfo), -1, 1, 1, 1, 1, 0, "u 'HParticleEvtInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticlePair(void) {
   /* HParticlePair */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePair));
   G__memfunc_setup("calcVertex",1041,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSimulation",1281,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTruePair",1144,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticlePair",1288,G__ParticleDict_936_0_4, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticlePair), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCand",694,G__ParticleDict_936_0_5, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPair",716,G__ParticleDict_936_0_6, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticlePair), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandSim",991,G__ParticleDict_936_0_7, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandVect",1096,G__ParticleDict_936_0_8, 117, G__get_linked_tagnum(&G__ParticleDictLN_TLorentzVector), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("index",536,G__ParticleDict_936_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOpeningAngle",1527,G__ParticleDict_936_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__ParticleDict_936_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__ParticleDict_936_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandPID",915,G__ParticleDict_936_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMotherPID",1164,G__ParticleDict_936_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPairFlags",1209,G__ParticleDict_936_0_15, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFakePair",991,G__ParticleDict_936_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTruePair",1032,G__ParticleDict_936_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstDaughter",1660,G__ParticleDict_936_0_18, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGeantDecay",1201,G__ParticleDict_936_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSameExternalSource",2070,G__ParticleDict_936_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSourceInfo",1341,G__ParticleDict_936_0_21, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - index i - 'Int_t' 1 - parentTr "
"i - 'Int_t' 1 - grandparenttr i - 'Int_t' 1 - geninfo "
"i - 'Int_t' 1 - geninfo1 i - 'Int_t' 1 - geninfo2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsSimulation",1569,G__ParticleDict_936_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVerMinDistCand",1691,G__ParticleDict_936_0_23, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVerMinDistMother",1940,G__ParticleDict_936_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinDistCandidates",2024,G__ParticleDict_936_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVerDistMother",1648,G__ParticleDict_936_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventVertex",1472,G__ParticleDict_936_0_27, 117, G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDecayVertex",1444,G__ParticleDict_936_0_28, 117, G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printFlags",1050,G__ParticleDict_936_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_936_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '63' selection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__ParticleDict_936_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatusFlags",1457,G__ParticleDict_936_0_32, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkStatus",1154,G__ParticleDict_936_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVectors",1145,G__ParticleDict_936_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - pid1 i - 'Int_t' 0 - pid2 "
"i - 'Int_t' 0 - motherpid u 'HGeomVector' - 1 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPair",728,G__ParticleDict_936_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"U 'HParticleCand' - 0 - cnd1 i - 'Int_t' 0 - pid1 "
"U 'HParticleCand' - 0 - cnd2 i - 'Int_t' 0 - pid2 "
"i - 'Int_t' 0 - motherpid h - 'UInt_t' 0 - pairflags "
"u 'HGeomVector' - 1 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPair",728,G__ParticleDict_936_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"U 'HParticlePair' - 0 - cnd1 i - 'Int_t' 0 - pid1 "
"U 'HParticleCand' - 0 - cnd2 i - 'Int_t' 0 - pid2 "
"i - 'Int_t' 0 - motherpid h - 'UInt_t' 0 - pairflags "
"u 'HGeomVector' - 1 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPair",728,G__ParticleDict_936_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"U 'HParticlePair' - 0 - cnd1 i - 'Int_t' 0 - pid1 "
"U 'HParticlePair' - 0 - cnd2 i - 'Int_t' 0 - pid2 "
"i - 'Int_t' 0 - motherpid h - 'UInt_t' 0 - pairflags "
"u 'HGeomVector' - 1 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoMomentumCorrection",2409,G__ParticleDict_936_0_38, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - doit", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticlePair::setDoMomentumCorrection) ), 0);
   G__memfunc_setup("getDoMomentumCorrection",2397,G__ParticleDict_936_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HParticlePair::getDoMomentumCorrection) ), 0);
   G__memfunc_setup("Class",502,G__ParticleDict_936_0_40, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticlePair::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_936_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticlePair::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_936_0_42, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticlePair::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_936_0_43, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticlePair::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_936_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_936_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticlePair::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_936_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticlePair::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_936_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticlePair::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_936_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticlePair::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticlePair", 1288, G__ParticleDict_936_0_52, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticlePair), -1, 0, 1, 1, 1, 0, "u 'HParticlePair' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticlePair", 1414, G__ParticleDict_936_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_936_0_54, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticlePair), -1, 1, 1, 1, 1, 0, "u 'HParticlePair' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleTool(void) {
   /* HParticleTool */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTool));
   G__memfunc_setup("HParticleTool",1306,G__ParticleDict_940_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleTool), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiSecToLabDeg",1342,G__ParticleDict_940_0_2, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - sec f - 'Float_t' 0 - phiRad", (char*)NULL, (void*) G__func2void( (Float_t (*)(Int_t, Float_t))(&HParticleTool::phiSecToLabDeg) ), 0);
   G__memfunc_setup("thetaToLabDeg",1272,G__ParticleDict_940_0_3, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "f - 'Float_t' 0 - thetaRad", (char*)NULL, (void*) G__func2void( (Float_t (*)(Float_t))(&HParticleTool::thetaToLabDeg) ), 0);
   G__memfunc_setup("phiLabToPhiSecDeg",1631,G__ParticleDict_940_0_4, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "f - 'Float_t' 0 - phiLabDeg", (char*)NULL, (void*) G__func2void( (Float_t (*)(Float_t))(&HParticleTool::phiLabToPhiSecDeg) ), 0);
   G__memfunc_setup("phiLabToSec",1070,G__ParticleDict_940_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "f - 'Float_t' 0 - phiLabDeg", (char*)NULL, (void*) G__func2void( (Int_t (*)(Float_t))(&HParticleTool::phiLabToSec) ), 0);
   G__memfunc_setup("getOpeningAngle",1527,G__ParticleDict_940_0_6, 102, -1, G__defined_typename("Float_t"), 0, 4, 3, 1, 0, 
"f - 'Float_t' 0 - phi1 f - 'Float_t' 0 - theta1 "
"f - 'Float_t' 0 - phi2 f - 'Float_t' 0 - theta2", (char*)NULL, (void*) G__func2void( (Float_t (*)(Float_t, Float_t, Float_t, Float_t))(&HParticleTool::getOpeningAngle) ), 0);
   G__memfunc_setup("getOpeningAngle",1527,G__ParticleDict_940_0_7, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"u 'TLorentzVector' - 1 - vec1 u 'TLorentzVector' - 1 - vec2", (char*)NULL, (void*) G__func2void( (Float_t (*)(TLorentzVector&, TLorentzVector&))(&HParticleTool::getOpeningAngle) ), 0);
   G__memfunc_setup("getOpeningAngle",1527,G__ParticleDict_940_0_8, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"U 'HParticleCand' - 0 - cand1 U 'HParticleCand' - 0 - cand2", (char*)NULL, (void*) G__func2void( (Float_t (*)(HParticleCand*, HParticleCand*))(&HParticleTool::getOpeningAngle) ), 0);
   G__memfunc_setup("getOpeningAngle",1527,G__ParticleDict_940_0_9, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"U 'HGeantKine' - 0 - kine1 U 'HGeantKine' - 0 - kine2", (char*)NULL, (void*) G__func2void( (Float_t (*)(HGeantKine*, HGeantKine*))(&HParticleTool::getOpeningAngle) ), 0);
   G__memfunc_setup("setCloseCandidates",1842,G__ParticleDict_940_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"f - 'Float_t' 0 '15.' oACut g - 'Bool_t' 0 'kTRUE' sameSector "
"g - 'Bool_t' 0 'kTRUE' skipSameSeg", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Float_t, Bool_t, Bool_t))(&HParticleTool::setCloseCandidates) ), 0);
   G__memfunc_setup("getCloseCandidates",1830,G__ParticleDict_940_0_11, 105, -1, G__defined_typename("Int_t"), 0, 6, 3, 1, 0, 
"U 'HParticleCand' - 0 - cand u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - vcand "
"u 'vector<float,allocator<float> >' 'vector<Float_t>' 1 - vopeninAngle f - 'Float_t' 0 '15.' oACut "
"g - 'Bool_t' 0 'kTRUE' sameSector g - 'Bool_t' 0 'kTRUE' skipSameSeg", (char*)NULL, (void*) G__func2void( (Int_t (*)(HParticleCand*, vector<HParticleCand*>&, vector<Float_t>&, Float_t, Bool_t, Bool_t))(&HParticleTool::getCloseCandidates) ), 0);
   G__memfunc_setup("getCloseCandidatesSegInd",2400,G__ParticleDict_940_0_12, 105, -1, G__defined_typename("Int_t"), 0, 5, 3, 1, 0, 
"U 'HParticleCand' - 0 - cand u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - vSeg "
"f - 'Float_t' 0 - oACut g - 'Bool_t' 0 - sameSector "
"g - 'Bool_t' 0 - skipSameSeg", (char*)NULL, (void*) G__func2void( (Int_t (*)(HParticleCand*, vector<Int_t>&, Float_t, Bool_t, Bool_t))(&HParticleTool::getCloseCandidatesSegInd) ), 0);
   G__memfunc_setup("getTLorentzVector",1781,G__ParticleDict_940_0_13, 121, -1, -1, 0, 3, 3, 1, 0, 
"U 'HGeantKine' - 0 - kine u 'TLorentzVector' - 1 - vec "
"i - 'Int_t' 0 '-1' pid", (char*)NULL, (void*) G__func2void( (void (*)(HGeantKine*, TLorentzVector&, Int_t))(&HParticleTool::getTLorentzVector) ), 0);
   G__memfunc_setup("fillTLorentzVector",1884,G__ParticleDict_940_0_14, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'TLorentzVector' - 1 - v U 'HParticleCand' - 0 - cand "
"f - 'Float_t' 0 - mass", (char*)NULL, (void*) G__func2void( (void (*)(TLorentzVector&, HParticleCand*, Float_t))(&HParticleTool::fillTLorentzVector) ), 0);
   G__memfunc_setup("fillTLorentzVector",1884,G__ParticleDict_940_0_15, 121, -1, -1, 0, 4, 3, 1, 0, 
"u 'TLorentzVector' - 1 - v U 'HParticleCand' - 0 - cand "
"i - 'Int_t' 0 - pid g - 'Bool_t' 0 'kTRUE' correctMom", (char*)NULL, (void*) G__func2void( (void (*)(TLorentzVector&, HParticleCand*, Int_t, Bool_t))(&HParticleTool::fillTLorentzVector) ), 0);
   G__memfunc_setup("getLabPhiDeg",1152,G__ParticleDict_940_0_16, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "u 'TLorentzVector' - 1 - vec", (char*)NULL, (void*) G__func2void( (Float_t (*)(TLorentzVector&))(&HParticleTool::getLabPhiDeg) ), 0);
   G__memfunc_setup("calcRichQA",939,G__ParticleDict_940_0_17, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"U 'HMdcSeg' - 0 - seg U 'HRichHit' - 0 - hit", (char*)NULL, (void*) G__func2void( (Float_t (*)(HMdcSeg*, HRichHit*))(&HParticleTool::calcRichQA) ), 0);
   G__memfunc_setup("calcRichQA",939,G__ParticleDict_940_0_18, 102, -1, G__defined_typename("Float_t"), 0, 3, 3, 1, 0, 
"U 'HMdcSeg' - 0 - seg f - 'Float_t' 0 - richTheta "
"f - 'Float_t' 0 - richPhi", (char*)NULL, (void*) G__func2void( (Float_t (*)(HMdcSeg*, Float_t, Float_t))(&HParticleTool::calcRichQA) ), 0);
   G__memfunc_setup("getGlobalVertex",1551,G__ParticleDict_940_0_19, 117, G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector), -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - v g - 'Bool_t' 0 'kFALSE' warn", (char*)NULL, (void*) G__func2void( (HGeomVector (*)(Int_t, Bool_t))(&HParticleTool::getGlobalVertex) ), 0);
   G__memfunc_setup("getMinimumDistToVertex",2289,G__ParticleDict_940_0_20, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"U 'HParticleCand' - 0 - - u 'HGeomVector' - 1 - vertex", (char*)NULL, (void*) G__func2void( (Double_t (*)(HParticleCand*, HGeomVector&))(&HParticleTool::getMinimumDistToVertex) ), 0);
   G__memfunc_setup("getPointOfClosestApproachToVertex",3403,G__ParticleDict_940_0_21, 117, G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector), -1, 0, 2, 3, 1, 0, 
"U 'HParticleCand' - 0 - - u 'HGeomVector' - 1 - vertex", (char*)NULL, (void*) G__func2void( (HGeomVector (*)(HParticleCand*, HGeomVector&))(&HParticleTool::getPointOfClosestApproachToVertex) ), 0);
   G__memfunc_setup("scaledy",741,G__ParticleDict_940_0_22, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&HParticleTool::scaledy) ), 0);
   G__memfunc_setup("getScaledDy",1097,G__ParticleDict_940_0_23, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"U 'HParticleCand' - 0 - c d - 'Double_t' 0 '-1' dyCut", (char*)NULL, (void*) G__func2void( (Double_t (*)(HParticleCand*, Double_t))(&HParticleTool::getScaledDy) ), 0);
   G__memfunc_setup("getScaleTF1",1011,G__ParticleDict_940_0_24, 85, G__get_linked_tagnum(&G__ParticleDictLN_TF1), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TF1* (*)())(&HParticleTool::getScaleTF1) ), 0);
   G__memfunc_setup("normDX",600,G__ParticleDict_940_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"U 'HParticleCand' - 0 - c u 'TString' - 0 '\"apr12\"' beamtime", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParticleCand*, TString))(&HParticleTool::normDX) ), 0);
   G__memfunc_setup("getNormDX",888,G__ParticleDict_940_0_26, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"U 'HParticleCand' - 0 - c u 'TString' - 0 '\"apr12\"' beamtime", (char*)NULL, (void*) G__func2void( (Float_t (*)(HParticleCand*, TString))(&HParticleTool::getNormDX) ), 0);
   G__memfunc_setup("getSigmaDX",973,G__ParticleDict_940_0_27, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"U 'HParticleCand' - 0 - c u 'TString' - 0 '\"apr12\"' beamtime", (char*)NULL, (void*) G__func2void( (Float_t (*)(HParticleCand*, TString))(&HParticleTool::getSigmaDX) ), 0);
   G__memfunc_setup("normDX",600,G__ParticleDict_940_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"U 'HParticleCand' - 0 - c U 'HTofWalkPar' - 0 - p", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParticleCand*, HTofWalkPar*))(&HParticleTool::normDX) ), 0);
   G__memfunc_setup("getNormDX",888,G__ParticleDict_940_0_29, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"U 'HParticleCand' - 0 - c U 'HTofWalkPar' - 0 - p", (char*)NULL, (void*) G__func2void( (Float_t (*)(HParticleCand*, HTofWalkPar*))(&HParticleTool::getNormDX) ), 0);
   G__memfunc_setup("getSigmaDX",973,G__ParticleDict_940_0_30, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"U 'HParticleCand' - 0 - c U 'HTofWalkPar' - 0 - p", (char*)NULL, (void*) G__func2void( (Float_t (*)(HParticleCand*, HTofWalkPar*))(&HParticleTool::getSigmaDX) ), 0);
   G__memfunc_setup("getTofXOffsetTF1",1523,G__ParticleDict_940_0_31, 85, G__get_linked_tagnum(&G__ParticleDictLN_TF1), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TF1* (*)())(&HParticleTool::getTofXOffsetTF1) ), 0);
   G__memfunc_setup("getTofXSigmaTF1",1405,G__ParticleDict_940_0_32, 85, G__get_linked_tagnum(&G__ParticleDictLN_TF1), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TF1* (*)())(&HParticleTool::getTofXSigmaTF1) ), 0);
   G__memfunc_setup("getRpcCellHalfWidth",1888,G__ParticleDict_940_0_33, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - mod i - 'Int_t' 0 - cell", (char*)NULL, (void*) G__func2void( (Float_t (*)(Int_t, Int_t))(&HParticleTool::getRpcCellHalfWidth) ), 0);
   G__memfunc_setup("getTofCellHalfWidth",1892,G__ParticleDict_940_0_34, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - mod i - 'Int_t' 0 - cell", (char*)NULL, (void*) G__func2void( (Float_t (*)(Int_t, Int_t))(&HParticleTool::getTofCellHalfWidth) ), 0);
   G__memfunc_setup("isGoodMetaCell",1388,G__ParticleDict_940_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"U 'HParticleCand' - 0 - c d - 'Double_t' 0 '3.5' bound "
"g - 'Bool_t' 0 'kTRUE' doScaling", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParticleCand*, Double_t, Bool_t))(&HParticleTool::isGoodMetaCell) ), 0);
   G__memfunc_setup("getCorrectedMomentum",2093,G__ParticleDict_940_0_36, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "U 'HParticleCand' - 0 - c", (char*)NULL, (void*) G__func2void( (Float_t (*)(HParticleCand*))(&HParticleTool::getCorrectedMomentum) ), 0);
   G__memfunc_setup("setCorrectedMomentum",2105,G__ParticleDict_940_0_37, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "U 'HParticleCand' - 0 - c", (char*)NULL, (void*) G__func2void( (Float_t (*)(HParticleCand*))(&HParticleTool::setCorrectedMomentum) ), 0);
   G__memfunc_setup("isParticledEdx",1429,G__ParticleDict_940_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 4, 3, 1, 0, 
"i - 'Int_t' 0 - PID U 'HParticleCand' - 0 - c "
"f - 'Float_t' 1 - deloss f - 'Float_t' 1 - dsigma", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t, HParticleCand*, Float_t&, Float_t&))(&HParticleTool::isParticledEdx) ), 0);
   G__memfunc_setup("isParticleBeta",1420,G__ParticleDict_940_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 8, 3, 1, 0, 
"i - 'Int_t' 0 - PID U 'HParticleCand' - 0 - pCand "
"f - 'Float_t' 0 - nsigma f - 'Float_t' 0 - momMin "
"f - 'Float_t' 0 - momMax f - 'Float_t' 1 - dtime "
"f - 'Float_t' 1 - dsigma u 'TString' - 0 '\"apr12\"' beamtime", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t, HParticleCand*, Float_t, Float_t, Float_t, Float_t&, Float_t&, TString))(&HParticleTool::isParticleBeta) ), 0);
   G__memfunc_setup("correctPathLength",1761,G__ParticleDict_940_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 5, 3, 1, 0, 
"U 'HParticleCand' - 0 - pCand u 'HGeomVector' - 1 - vertex "
"U 'HMdcPlane' - 10 - planes u 'HGeomVector' - 11 - targetMidPoint "
"d - 'Double_t' 0 '1230' beamEnergy", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParticleCand*, HGeomVector&, const HMdcPlane*, const HGeomVector&, Double_t))(&HParticleTool::correctPathLength) ), 0);
   G__memfunc_setup("checkCropedLayer",1624,G__ParticleDict_940_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 4, 3, 1, 0, 
"U 'HGeantKine' - 0 - kine U 'HMdcLayer' - 0 - mdcLayer "
"G - 'Bool_t' 0 '0' croped g - 'Bool_t' 0 'kTRUE' checkHit", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HGeantKine*, HMdcLayer*, Bool_t*, Bool_t))(&HParticleTool::checkCropedLayer) ), 0);
   G__memfunc_setup("beta",412,G__ParticleDict_940_0_42, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - id d - 'Double_t' 0 - p", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t))(&HParticleTool::beta) ), 0);
   G__memfunc_setup("betaToP",687,G__ParticleDict_940_0_43, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - id d - 'Double_t' 0 - beta", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t))(&HParticleTool::betaToP) ), 0);
   G__memfunc_setup("gamma",515,G__ParticleDict_940_0_44, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - id d - 'Double_t' 0 - p", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t))(&HParticleTool::gamma) ), 0);
   G__memfunc_setup("gammaToBeta",1090,G__ParticleDict_940_0_45, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - id d - 'Double_t' 0 - gamma", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t))(&HParticleTool::gammaToBeta) ), 0);
   G__memfunc_setup("gammaToP",790,G__ParticleDict_940_0_46, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - id d - 'Double_t' 0 - gamma", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t))(&HParticleTool::gammaToP) ), 0);
   G__memfunc_setup("betagamma",927,G__ParticleDict_940_0_47, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - id d - 'Double_t' 0 - p", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t))(&HParticleTool::betagamma) ), 0);
   G__memfunc_setup("betagammaToP",1202,G__ParticleDict_940_0_48, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - id d - 'Double_t' 0 - betagamma", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t))(&HParticleTool::betagammaToP) ), 0);
   G__memfunc_setup("kinEToMom",883,G__ParticleDict_940_0_49, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 '14' id d - 'Double_t' 0 '3500' Ekin", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t))(&HParticleTool::kinEToMom) ), 0);
   G__memfunc_setup("momToKinE",883,G__ParticleDict_940_0_50, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 '14' id d - 'Double_t' 0 '3500' p", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t))(&HParticleTool::momToKinE) ), 0);
   G__memfunc_setup("dedxfunc",849,G__ParticleDict_940_0_51, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&HParticleTool::dedxfunc) ), 0);
   G__memfunc_setup("betaandgammafunc",1662,G__ParticleDict_940_0_52, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&HParticleTool::betaandgammafunc) ), 0);
   G__memfunc_setup("ptyfunc",777,G__ParticleDict_940_0_53, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&HParticleTool::ptyfunc) ), 0);
   G__memfunc_setup("fcross",656,G__ParticleDict_940_0_54, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 0 - xin D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&HParticleTool::fcross) ), 0);
   G__memfunc_setup("getIntersectionPoint",2113,G__ParticleDict_940_0_55, 103, -1, G__defined_typename("Bool_t"), 0, 7, 3, 1, 0, 
"U 'TF1' - 0 - f1 U 'TF1' - 0 - f2 "
"d - 'Double_t' 1 - xout d - 'Double_t' 1 - yout "
"d - 'Double_t' 0 - xlow d - 'Double_t' 0 - xup "
"i - 'Int_t' 0 '500' n", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TF1*, TF1*, Double_t&, Double_t&, Double_t, Double_t, Int_t))(&HParticleTool::getIntersectionPoint) ), 0);
   G__memfunc_setup("energyLossTF1",1270,G__ParticleDict_940_0_56, 85, G__get_linked_tagnum(&G__ParticleDictLN_TF1), -1, 0, 13, 3, 1, 0, 
"i - 'Int_t' 0 - id u 'TString' - 0 '\"\"' name "
"u 'TString' - 0 '\"p\"' opt d - 'Double_t' 0 '1' scaleY "
"d - 'Double_t' 0 '0' xoffset d - 'Double_t' 0 '1' scaleX "
"d - 'Double_t' 0 '-1' theta d - 'Double_t' 0 '0.1' frac "
"d - 'Double_t' 0 '20' xmin d - 'Double_t' 0 '2000' xmax "
"i - 'Int_t' 0 '2' linecolor i - 'Int_t' 0 '1' linestyle "
"i - 'Int_t' 0 '500' npoints", (char*)NULL, (void*) G__func2void( (TF1* (*)(Int_t, TString, TString, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Int_t, Int_t, Int_t))(&HParticleTool::energyLossTF1) ), 0);
   G__memfunc_setup("betaAndGammaTF1",1373,G__ParticleDict_940_0_57, 85, G__get_linked_tagnum(&G__ParticleDictLN_TF1), -1, 0, 13, 3, 1, 0, 
"i - 'Int_t' 0 - id u 'TString' - 0 '\"\"' name "
"u 'TString' - 0 '\"beta\"' opt d - 'Double_t' 0 '1' scaleY "
"d - 'Double_t' 0 '0' xoffset d - 'Double_t' 0 '1' scaleX "
"d - 'Double_t' 0 '-1' theta d - 'Double_t' 0 '0.1' frac "
"d - 'Double_t' 0 '20' xmin d - 'Double_t' 0 '2000' xmax "
"i - 'Int_t' 0 '2' linecolor i - 'Int_t' 0 '1' linestyle "
"i - 'Int_t' 0 '500' npoints", (char*)NULL, (void*) G__func2void( (TF1* (*)(Int_t, TString, TString, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Int_t, Int_t, Int_t))(&HParticleTool::betaAndGammaTF1) ), 0);
   G__memfunc_setup("makeCut",714,G__ParticleDict_940_0_58, 85, G__get_linked_tagnum(&G__ParticleDictLN_TCutG), -1, 0, 10, 3, 1, 0, 
"U 'TF1' - 0 - lower U 'TF1' - 0 - upper "
"u 'TString' - 0 - name d - 'Double_t' 0 - xlow "
"d - 'Double_t' 0 - xup d - 'Double_t' 0 '-1000' ymin "
"d - 'Double_t' 0 '1000' ymax i - 'Int_t' 0 '500' npoint "
"i - 'Int_t' 0 '2' linecolor i - 'Int_t' 0 '2' linestyle", (char*)NULL, (void*) G__func2void( (TCutG* (*)(TF1*, TF1*, TString, Double_t, Double_t, Double_t, Double_t, Int_t, Int_t, Int_t))(&HParticleTool::makeCut) ), 0);
   G__memfunc_setup("ptyTF1",552,G__ParticleDict_940_0_59, 85, G__get_linked_tagnum(&G__ParticleDictLN_TF1), -1, 0, 9, 3, 1, 0, 
"i - 'Int_t' 0 - id d - 'Double_t' 0 '45' val "
"u 'TString' - 0 '\"\"' name u 'TString' - 0 '\"theta\"' opt "
"d - 'Double_t' 0 '0' xmin d - 'Double_t' 0 '2' xmax "
"d - 'Double_t' 0 '0' midRap i - 'Int_t' 0 '2' linecolor "
"i - 'Int_t' 0 '1' linestyle", (char*)NULL, (void*) G__func2void( (TF1* (*)(Int_t, Double_t, TString, TString, Double_t, Double_t, Double_t, Int_t, Int_t))(&HParticleTool::ptyTF1) ), 0);
   G__memfunc_setup("ptyGrid",739,G__ParticleDict_940_0_60, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR), G__defined_typename("vector<TF1*>"), 0, 12, 3, 1, 0, 
"i - 'Int_t' 0 - id u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - vtheta "
"u 'vector<double,allocator<double> >' 'vector<Double_t>' 1 - vmom u 'TString' - 0 '\"\"' name "
"u 'TString' - 0 '\"draw\"' opt d - 'Double_t' 0 '0' xmin "
"d - 'Double_t' 0 '2' xmax d - 'Double_t' 0 '0' midRap "
"i - 'Int_t' 0 '1' linecolorTheta i - 'Int_t' 0 '2' linestyleTheta "
"i - 'Int_t' 0 '1' linecolorMom i - 'Int_t' 0 '2' linestyleMom", (char*)NULL, (void*) G__func2void( (vector<TF1*> (*)(Int_t, vector<Double_t>&, vector<Double_t>&, TString, TString, Double_t, Double_t, Double_t, Int_t, Int_t, Int_t, Int_t))(&HParticleTool::ptyGrid) ), 0);
   G__memfunc_setup("ptyGrid",739,G__ParticleDict_940_0_61, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR), G__defined_typename("vector<TF1*>"), 0, 12, 3, 1, 0, 
"i - 'Int_t' 0 - id u 'TString' - 0 '\"@theta:8,0,10@momentum:20,10,100\"' setup "
"u 'TString' - 0 '\"\"' name u 'TString' - 0 '\"draw\"' opt "
"d - 'Double_t' 0 '0' xmin d - 'Double_t' 0 '2' xmax "
"d - 'Double_t' 0 '0' midRap i - 'Int_t' 0 '1' linecolorTheta "
"i - 'Int_t' 0 '2' linestyleTheta i - 'Int_t' 0 '1' linecolorMom "
"i - 'Int_t' 0 '2' linestyleMom u 'TString' - 0 '\"@theta:draw=yes,format=%5.1f#circ,textsize=0.021,angle=0,align=-1@momentum:draw=yes,format=%5.1f MeV/c,textsize=0.023,angle=10,align=-1\"' labels", (char*)NULL, (void*) G__func2void( (vector<TF1*> (*)(Int_t, TString, TString, TString, Double_t, Double_t, Double_t, Int_t, Int_t, Int_t, Int_t, TString))(&HParticleTool::ptyGrid) ), 0);
   G__memfunc_setup("drawPtyGrid",1137,G__ParticleDict_940_0_62, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'vector<TF1*,allocator<TF1*> >' 'vector<TF1*>' 1 - grid u 'TString' - 0 '\"draw\"' opt", (char*)NULL, (void*) G__func2void( (void (*)(vector<TF1*>&, TString))(&HParticleTool::drawPtyGrid) ), 0);
   G__memfunc_setup("calcSegVector",1317,G__ParticleDict_940_0_63, 121, -1, -1, 0, 6, 3, 1, 0, 
"d - 'Double_t' 0 - z d - 'Double_t' 0 - rho "
"d - 'Double_t' 0 - phi d - 'Double_t' 0 - theta "
"u 'HGeomVector' - 1 - base u 'HGeomVector' - 1 - dir", (char*)NULL, (void*) G__func2void( (void (*)(Double_t, Double_t, Double_t, Double_t, HGeomVector&, HGeomVector&))(&HParticleTool::calcSegVector) ), 0);
   G__memfunc_setup("calcRMS",645,G__ParticleDict_940_0_64, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"D - 'Double_t' 10 - valArr d - 'Double_t' 0 - Mean "
"i - 'Int_t' 0 - valNum", (char*)NULL, (void*) G__func2void( (Double_t (*)(const Double_t*, Double_t, Int_t))(&HParticleTool::calcRMS) ), 0);
   G__memfunc_setup("calcDeterminant",1550,G__ParticleDict_940_0_65, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"u 'HGeomVector' - 1 - v1 u 'HGeomVector' - 1 - v2 "
"u 'HGeomVector' - 1 - v3", (char*)NULL, (void*) G__func2void( (Double_t (*)(HGeomVector&, HGeomVector&, HGeomVector&))(&HParticleTool::calcDeterminant) ), 0);
   G__memfunc_setup("calculateMinimumDistanceStraightToPoint",4040,G__ParticleDict_940_0_66, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"u 'HGeomVector' - 1 - base u 'HGeomVector' - 1 - dir "
"u 'HGeomVector' - 1 - point", (char*)NULL, (void*) G__func2void( (Double_t (*)(HGeomVector&, HGeomVector&, HGeomVector&))(&HParticleTool::calculateMinimumDistanceStraightToPoint) ), 0);
   G__memfunc_setup("calculatePointOfClosestApproachStraightToPoint",4747,G__ParticleDict_940_0_67, 117, G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector), -1, 0, 3, 3, 1, 0, 
"u 'HGeomVector' - 1 - base u 'HGeomVector' - 1 - dir "
"u 'HGeomVector' - 1 - point", (char*)NULL, (void*) G__func2void( (HGeomVector (*)(HGeomVector&, HGeomVector&, HGeomVector&))(&HParticleTool::calculatePointOfClosestApproachStraightToPoint) ), 0);
   G__memfunc_setup("calculateMinimumDistance",2485,G__ParticleDict_940_0_68, 100, -1, G__defined_typename("Double_t"), 0, 4, 3, 1, 0, 
"u 'HGeomVector' - 1 - base1 u 'HGeomVector' - 1 - dir1 "
"u 'HGeomVector' - 1 - base2 u 'HGeomVector' - 1 - dir2", (char*)NULL, (void*) G__func2void( (Double_t (*)(HGeomVector&, HGeomVector&, HGeomVector&, HGeomVector&))(&HParticleTool::calculateMinimumDistance) ), 0);
   G__memfunc_setup("calculatePointOfClosestApproach",3192,G__ParticleDict_940_0_69, 117, G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector), -1, 0, 4, 3, 1, 0, 
"u 'HGeomVector' - 1 - base1 u 'HGeomVector' - 1 - dir1 "
"u 'HGeomVector' - 1 - base2 u 'HGeomVector' - 1 - dir2", (char*)NULL, (void*) G__func2void( (HGeomVector (*)(HGeomVector&, HGeomVector&, HGeomVector&, HGeomVector&))(&HParticleTool::calculatePointOfClosestApproach) ), 0);
   G__memfunc_setup("calculateCrossPoint",1986,G__ParticleDict_940_0_70, 117, G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector), -1, 0, 4, 3, 1, 0, 
"u 'HGeomVector' - 1 - base1 u 'HGeomVector' - 1 - dir1 "
"u 'HGeomVector' - 1 - base2 u 'HGeomVector' - 1 - dir2", (char*)NULL, (void*) G__func2void( (HGeomVector (*)(HGeomVector&, HGeomVector&, HGeomVector&, HGeomVector&))(&HParticleTool::calculateCrossPoint) ), 0);
   G__memfunc_setup("calcVertexAnalytical",2067,G__ParticleDict_940_0_71, 117, G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector), -1, 0, 4, 3, 1, 0, 
"u 'HGeomVector' - 1 - base1 u 'HGeomVector' - 1 - dir1 "
"u 'HGeomVector' - 1 - base2 u 'HGeomVector' - 1 - dir2", (char*)NULL, (void*) G__func2void( (HGeomVector (*)(HGeomVector&, HGeomVector&, HGeomVector&, HGeomVector&))(&HParticleTool::calcVertexAnalytical) ), 0);
   G__memfunc_setup("findFirstHitInTof",1710,G__ParticleDict_940_0_72, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - trackID i - 'Int_t' 0 '2' modeTrack", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, Int_t))(&HParticleTool::findFirstHitInTof) ), 0);
   G__memfunc_setup("findFirstHitShowerInTofino",2668,G__ParticleDict_940_0_73, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - trackID i - 'Int_t' 0 '2' modeTrack", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, Int_t))(&HParticleTool::findFirstHitShowerInTofino) ), 0);
   G__memfunc_setup("findFirstHitShowerInRpc",2338,G__ParticleDict_940_0_74, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - trackID i - 'Int_t' 0 '2' modeTrack", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, Int_t))(&HParticleTool::findFirstHitShowerInRpc) ), 0);
   G__memfunc_setup("getInterpolatedValue",2088,G__ParticleDict_940_0_75, 102, -1, G__defined_typename("Float_t"), 0, 3, 3, 1, 0, 
"U 'TH1' - 0 - h f - 'Float_t' 0 - xVal "
"g - 'Bool_t' 0 'kTRUE' warn", (char*)NULL, (void*) G__func2void( (Float_t (*)(TH1*, Float_t, Bool_t))(&HParticleTool::getInterpolatedValue) ), 0);
   G__memfunc_setup("getValue",829,G__ParticleDict_940_0_76, 100, -1, G__defined_typename("Stat_t"), 0, 4, 3, 1, 0, 
"U 'TH1' - 0 - h f - 'Float_t' 0 - xVal "
"f - 'Float_t' 0 '0.0f' yVal f - 'Float_t' 0 '0.0f' zVal", (char*)NULL, (void*) G__func2void( (Stat_t (*)(TH1*, Float_t, Float_t, Float_t))(&HParticleTool::getValue) ), 0);
   G__memfunc_setup("getRichHit",1003,G__ParticleDict_940_0_77, 85, G__get_linked_tagnum(&G__ParticleDictLN_HRichHit), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - richind", (char*)NULL, (void*) G__func2void( (HRichHit* (*)(Int_t))(&HParticleTool::getRichHit) ), 0);
   G__memfunc_setup("getTofHit",910,G__ParticleDict_940_0_78, 85, G__get_linked_tagnum(&G__ParticleDictLN_HTofHit), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - tofind", (char*)NULL, (void*) G__func2void( (HTofHit* (*)(Int_t))(&HParticleTool::getTofHit) ), 0);
   G__memfunc_setup("getTofCluster",1355,G__ParticleDict_940_0_79, 85, G__get_linked_tagnum(&G__ParticleDictLN_HTofCluster), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - tofind", (char*)NULL, (void*) G__func2void( (HTofCluster* (*)(Int_t))(&HParticleTool::getTofCluster) ), 0);
   G__memfunc_setup("getRpcCluster",1351,G__ParticleDict_940_0_80, 85, G__get_linked_tagnum(&G__ParticleDictLN_HRpcCluster), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - rpcind", (char*)NULL, (void*) G__func2void( (HRpcCluster* (*)(Int_t))(&HParticleTool::getRpcCluster) ), 0);
   G__memfunc_setup("getShowerHit",1245,G__ParticleDict_940_0_81, 85, G__get_linked_tagnum(&G__ParticleDictLN_HShowerHit), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - showerind", (char*)NULL, (void*) G__func2void( (HShowerHit* (*)(Int_t))(&HParticleTool::getShowerHit) ), 0);
   G__memfunc_setup("getMetaMatch",1204,G__ParticleDict_940_0_82, 85, G__get_linked_tagnum(&G__ParticleDictLN_HMetaMatch2), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - metaind", (char*)NULL, (void*) G__func2void( (HMetaMatch2* (*)(Int_t))(&HParticleTool::getMetaMatch) ), 0);
   G__memfunc_setup("getMdcTrkCand",1275,G__ParticleDict_940_0_83, 85, G__get_linked_tagnum(&G__ParticleDictLN_HMdcTrkCand), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - metaind", (char*)NULL, (void*) G__func2void( (HMdcTrkCand* (*)(Int_t))(&HParticleTool::getMdcTrkCand) ), 0);
   G__memfunc_setup("getMdcSeg",883,G__ParticleDict_940_0_84, 85, G__get_linked_tagnum(&G__ParticleDictLN_HMdcSeg), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - segind", (char*)NULL, (void*) G__func2void( (HMdcSeg* (*)(Int_t))(&HParticleTool::getMdcSeg) ), 0);
   G__memfunc_setup("getMdcHit",889,G__ParticleDict_940_0_85, 85, G__get_linked_tagnum(&G__ParticleDictLN_HMdcHit), -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - segind i - 'Int_t' 0 '0' nhit", (char*)NULL, (void*) G__func2void( (HMdcHit* (*)(Int_t, Int_t))(&HParticleTool::getMdcHit) ), 0);
   G__memfunc_setup("getMdcClusInf",1288,G__ParticleDict_940_0_86, 85, G__get_linked_tagnum(&G__ParticleDictLN_HMdcClusInf), -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - segind i - 'Int_t' 0 '0' nhit", (char*)NULL, (void*) G__func2void( (HMdcClusInf* (*)(Int_t, Int_t))(&HParticleTool::getMdcClusInf) ), 0);
   G__memfunc_setup("getMdcClusFit",1294,G__ParticleDict_940_0_87, 85, G__get_linked_tagnum(&G__ParticleDictLN_HMdcClusFit), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - segind", (char*)NULL, (void*) G__func2void( (HMdcClusFit* (*)(Int_t))(&HParticleTool::getMdcClusFit) ), 0);
   G__memfunc_setup("getMdcClus",1003,G__ParticleDict_940_0_88, 85, G__get_linked_tagnum(&G__ParticleDictLN_HMdcClus), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - segind", (char*)NULL, (void*) G__func2void( (HMdcClus* (*)(Int_t))(&HParticleTool::getMdcClus) ), 0);
   G__memfunc_setup("getMdcWireFitSeg",1581,G__ParticleDict_940_0_89, 85, G__get_linked_tagnum(&G__ParticleDictLN_TObjArray), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - segind", (char*)NULL, (void*) G__func2void( (TObjArray* (*)(Int_t))(&HParticleTool::getMdcWireFitSeg) ), 0);
   G__memfunc_setup("getMdcCal1Seg",1204,G__ParticleDict_940_0_90, 85, G__get_linked_tagnum(&G__ParticleDictLN_TObjArray), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - segind", (char*)NULL, (void*) G__func2void( (TObjArray* (*)(Int_t))(&HParticleTool::getMdcCal1Seg) ), 0);
   G__memfunc_setup("getMdcCal1Cluster",1655,G__ParticleDict_940_0_91, 85, G__get_linked_tagnum(&G__ParticleDictLN_TObjArray), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - segind", (char*)NULL, (void*) G__func2void( (TObjArray* (*)(Int_t))(&HParticleTool::getMdcCal1Cluster) ), 0);
   G__memfunc_setup("getMdcWireFitSeg",1581,G__ParticleDict_940_0_92, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - segind u 'vector<HMdcWireFit*,allocator<HMdcWireFit*> >' 'vector<HMdcWireFit*>' 1 - v "
"g - 'Bool_t' 0 'kTRUE' clear", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, vector<HMdcWireFit*>&, Bool_t))(&HParticleTool::getMdcWireFitSeg) ), 0);
   G__memfunc_setup("getMdcCal1Seg",1204,G__ParticleDict_940_0_93, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - segind u 'vector<HMdcCal1*,allocator<HMdcCal1*> >' 'vector<HMdcCal1*>' 1 - v "
"g - 'Bool_t' 0 'kTRUE' clear", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, vector<HMdcCal1*>&, Bool_t))(&HParticleTool::getMdcCal1Seg) ), 0);
   G__memfunc_setup("getMdcCal1Cluster",1655,G__ParticleDict_940_0_94, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - segind u 'vector<HMdcCal1*,allocator<HMdcCal1*> >' 'vector<HMdcCal1*>' 1 - v "
"g - 'Bool_t' 0 'kTRUE' clear", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, vector<HMdcCal1*>&, Bool_t))(&HParticleTool::getMdcCal1Cluster) ), 0);
   G__memfunc_setup("printSimTracks",1470,G__ParticleDict_940_0_95, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'HParticleCandSim' - 0 - c", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParticleCandSim*))(&HParticleTool::printSimTracks) ), 0);
   G__memfunc_setup("getSimTracks",1233,G__ParticleDict_940_0_96, 103, -1, G__defined_typename("Bool_t"), 0, 10, 3, 1, 0, 
"U 'HParticleCandSim' - 0 - c u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - tracksMeta "
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - tracksShower u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - tracksRich "
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - weightRich u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - tracksInnerMdc "
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - weightInnerMdc u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - tracksOuterMdc "
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - weightOuterMdc g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParticleCandSim*, vector<Int_t>&, vector<Int_t>&, vector<Int_t>&, vector<Int_t>&, vector<Int_t>&, vector<Int_t>&, vector<Int_t>&, vector<Int_t>&, Bool_t))(&HParticleTool::getSimTracks) ), 0);
   G__memfunc_setup("setPairFlags",1221,G__ParticleDict_940_0_97, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"h - 'UInt_t' 1 - flag U 'HParticleCand' - 0 '0' cand2 "
"U 'HParticleCand' - 0 '0' cand1", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UInt_t&, HParticleCand*, HParticleCand*))(&HParticleTool::setPairFlags) ), 0);
   G__memfunc_setup("evalPairsFlags",1428,G__ParticleDict_940_0_98, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"h - 'UInt_t' 0 - flag h - 'UInt_t' 0 - fl", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UInt_t, UInt_t))(&HParticleTool::evalPairsFlags) ), 0);
   G__memfunc_setup("isPairsFlagsBit",1511,G__ParticleDict_940_0_99, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"h - 'UInt_t' 0 - flag h - 'UInt_t' 0 - fl", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UInt_t, UInt_t))(&HParticleTool::isPairsFlagsBit) ), 0);
   G__memfunc_setup("evalPairsFlags",1428,G__ParticleDict_940_0_100, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"h - 'UInt_t' 0 - flag U 'HParticleCand' - 0 - cand1 "
"U 'HParticleCand' - 0 - cand2", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UInt_t, HParticleCand*, HParticleCand*))(&HParticleTool::evalPairsFlags) ), 0);
   G__memfunc_setup("evalPairsFlags",1428,G__ParticleDict_940_0_101, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"h - 'UInt_t' 0 - flag u 'HParticlePair' - 1 - pair", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UInt_t, HParticlePair&))(&HParticleTool::evalPairsFlags) ), 0);
   G__memfunc_setup("evalPairsFlags",1428,G__ParticleDict_940_0_102, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"u 'vector<unsigned int,allocator<unsigned int> >' 'vector<UInt_t>' 1 - flags u 'HParticlePair' - 1 - pair", (char*)NULL, (void*) G__func2void( (Bool_t (*)(vector<UInt_t>&, HParticlePair&))(&HParticleTool::evalPairsFlags) ), 0);
   G__memfunc_setup("evalPairsFlags",1428,G__ParticleDict_940_0_103, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"u 'vector<unsigned int,allocator<unsigned int> >' 'vector<UInt_t>' 1 - flags u 'vector<bool,allocator<bool> >' 'vector<Bool_t>' 1 - results "
"u 'HParticlePair' - 1 - pair", (char*)NULL, (void*) G__func2void( (Bool_t (*)(vector<UInt_t>&, vector<Bool_t>&, HParticlePair&))(&HParticleTool::evalPairsFlags) ), 0);
   G__memfunc_setup("isGoodClusterVertex",1989,G__ParticleDict_940_0_104, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "f - 'Float_t' 0 - minZ", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Float_t))(&HParticleTool::isGoodClusterVertex) ), 0);
   G__memfunc_setup("isGoodRecoVertex",1644,G__ParticleDict_940_0_105, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "f - 'Float_t' 0 - minZ", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Float_t))(&HParticleTool::isGoodRecoVertex) ), 0);
   G__memfunc_setup("isGoodSTART",1011,G__ParticleDict_940_0_106, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - minFlag", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t))(&HParticleTool::isGoodSTART) ), 0);
   G__memfunc_setup("isNoVETO",727,G__ParticleDict_940_0_107, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"f - 'Float_t' 0 '-15.' minStart f - 'Float_t' 0 '15.' maxStart", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Float_t, Float_t))(&HParticleTool::isNoVETO) ), 0);
   G__memfunc_setup("isNoSTART",807,G__ParticleDict_940_0_108, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"f - 'Float_t' 0 '-15.' minStart f - 'Float_t' 0 '15.' maxStart "
"f - 'Float_t' 0 '1.' window", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Float_t, Float_t, Float_t))(&HParticleTool::isNoSTART) ), 0);
   G__memfunc_setup("isGoodSTARTVETO",1329,G__ParticleDict_940_0_109, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"f - 'Float_t' 0 '15.' minStart f - 'Float_t' 0 '350.' maxStart "
"f - 'Float_t' 0 '1.' window", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Float_t, Float_t, Float_t))(&HParticleTool::isGoodSTARTVETO) ), 0);
   G__memfunc_setup("isGoodSTARTMETA",1306,G__ParticleDict_940_0_110, 103, -1, G__defined_typename("Bool_t"), 0, 5, 3, 1, 0, 
"f - 'Float_t' 0 '80.' minStart f - 'Float_t' 0 '350.' maxStart "
"i - 'Int_t' 0 '4' tresh f - 'Float_t' 0 '5.' window "
"f - 'Float_t' 0 '7.' offset", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Float_t, Float_t, Int_t, Float_t, Float_t))(&HParticleTool::isGoodSTARTMETA) ), 0);
   G__memfunc_setup("isNoSTARTPileUp",1398,G__ParticleDict_940_0_111, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HParticleTool::isNoSTARTPileUp) ), 0);
   G__memfunc_setup("isNoMETAPileUp",1295,G__ParticleDict_940_0_112, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"f - 'Float_t' 0 - ftimeTofCut i - 'Int_t' 0 - threshold", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Float_t, Int_t))(&HParticleTool::isNoMETAPileUp) ), 0);
   G__memfunc_setup("isGoodTrigger",1337,G__ParticleDict_940_0_113, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - triggerbit", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t))(&HParticleTool::isGoodTrigger) ), 0);
   G__memfunc_setup("getTofHitMult",1328,G__ParticleDict_940_0_114, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"f - 'Float_t' 0 '0' minTof f - 'Float_t' 0 '35.' maxTof "
"I - 'Int_t' 0 '0' sector", (char*)NULL, (void*) G__func2void( (Int_t (*)(Float_t, Float_t, Int_t*))(&HParticleTool::getTofHitMult) ), 0);
   G__memfunc_setup("getRpcHitMult",1324,G__ParticleDict_940_0_115, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"f - 'Float_t' 0 '0' minTof f - 'Float_t' 0 '25.' maxTof "
"I - 'Int_t' 0 '0' sector", (char*)NULL, (void*) G__func2void( (Int_t (*)(Float_t, Float_t, Int_t*))(&HParticleTool::getRpcHitMult) ), 0);
   G__memfunc_setup("Class",502,G__ParticleDict_940_0_116, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleTool::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_940_0_117, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleTool::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_940_0_118, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleTool::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_940_0_119, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleTool::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_940_0_123, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_940_0_124, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleTool::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_940_0_125, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleTool::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_940_0_126, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleTool::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_940_0_127, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleTool::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleTool", 1306, G__ParticleDict_940_0_128, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleTool), -1, 0, 1, 1, 1, 0, "u 'HParticleTool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleTool", 1432, G__ParticleDict_940_0_129, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_940_0_130, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleTool), -1, 1, 1, 1, 1, 0, "u 'HParticleTool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpointers(void) {
   /* pointers */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_pointers));
   G__memfunc_setup("pointers",884,G__ParticleDict_963_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_pointers), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ParticleDict_963_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_963_0_3, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&pointers::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_963_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pointers::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_963_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&pointers::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_963_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&pointers::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_963_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_963_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pointers::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_963_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&pointers::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_963_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&pointers::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_963_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&pointers::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("pointers", 884, G__ParticleDict_963_0_15, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_pointers), -1, 0, 1, 1, 1, 0, "u 'pointers' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pointers", 1010, G__ParticleDict_963_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_963_0_17, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_pointers), -1, 1, 1, 1, 1, 0, "u 'pointers' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncclosetrack(void) {
   /* closetrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_closetrack));
   G__memfunc_setup("closetrack",1067,G__ParticleDict_964_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_closetrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_964_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_964_0_3, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&closetrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_964_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&closetrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_964_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&closetrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_964_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&closetrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_964_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_964_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&closetrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_964_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&closetrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_964_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&closetrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_964_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&closetrack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("closetrack", 1067, G__ParticleDict_964_0_15, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_closetrack), -1, 0, 1, 1, 1, 0, "u 'closetrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~closetrack", 1193, G__ParticleDict_964_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_964_0_17, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_closetrack), -1, 1, 1, 1, 1, 0, "u 'closetrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunccloseVec(void) {
   /* closeVec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_closeVec));
   G__memfunc_setup("closeVec",820,G__ParticleDict_965_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_closeVec), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findTrack",918,G__ParticleDict_965_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTrack",798,G__ParticleDict_965_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - index f - 'Float_t' 0 - oAngle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ParticleDict_965_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cmpAngle",807,G__ParticleDict_965_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"u 'closetrack' - 11 - a u 'closetrack' - 11 - b", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const closetrack&, const closetrack&))(&closeVec::cmpAngle) ), 0);
   G__memfunc_setup("sortAngle",943,G__ParticleDict_965_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_965_0_7, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&closeVec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_965_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&closeVec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_965_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&closeVec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_965_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&closeVec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_965_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_965_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&closeVec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_965_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&closeVec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_965_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&closeVec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_965_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&closeVec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("closeVec", 820, G__ParticleDict_965_0_19, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_closeVec), -1, 0, 1, 1, 1, 0, "u 'closeVec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~closeVec", 946, G__ParticleDict_965_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_965_0_21, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_closeVec), -1, 1, 1, 1, 1, 0, "u 'closeVec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctrackinfo(void) {
   /* trackinfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_trackinfo));
   G__memfunc_setup("trackinfo",961,G__ParticleDict_970_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_trackinfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGhostTrack",1238,G__ParticleDict_970_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInDetector",1229,G__ParticleDict_970_0_3, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i 'Particle::eDetBits' - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_970_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_970_0_5, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&trackinfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_970_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&trackinfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_970_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&trackinfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_970_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&trackinfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_970_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_970_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&trackinfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_970_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&trackinfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_970_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&trackinfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_970_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&trackinfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("trackinfo", 961, G__ParticleDict_970_0_17, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_trackinfo), -1, 0, 1, 1, 1, 0, "u 'trackinfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~trackinfo", 1087, G__ParticleDict_970_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_970_0_19, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_trackinfo), -1, 1, 1, 1, 1, 0, "u 'trackinfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctracksVec(void) {
   /* tracksVec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_tracksVec));
   G__memfunc_setup("tracksVec",934,G__ParticleDict_971_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_tracksVec), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tracksVec",934,G__ParticleDict_971_0_2, 105, G__get_linked_tagnum(&G__ParticleDictLN_tracksVec), -1, 0, 1, 1, 1, 0, "u 'tracksVec' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ParticleDict_971_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findTrack",918,G__ParticleDict_971_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTrack",798,G__ParticleDict_971_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - tr i - 'Int_t' 0 - n "
"i - 'Int_t' 0 '0' flag f - 'Float_t' 0 '1.' scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcWeights",1134,G__ParticleDict_971_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTrackWeight",1414,G__ParticleDict_971_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'trackinfo' - 0 - inf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTrackWeight",1414,G__ParticleDict_971_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'tracksVec' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cmpNdetWeightFlag",1709,G__ParticleDict_971_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"U 'trackinfo' - 0 - a U 'trackinfo' - 0 - b", (char*)NULL, (void*) G__func2void( (Bool_t (*)(trackinfo*, trackinfo*))(&tracksVec::cmpNdetWeightFlag) ), 0);
   G__memfunc_setup("cmpWeightNdet",1331,G__ParticleDict_971_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"U 'trackinfo' - 0 - a U 'trackinfo' - 0 - b", (char*)NULL, (void*) G__func2void( (Bool_t (*)(trackinfo*, trackinfo*))(&tracksVec::cmpWeightNdet) ), 0);
   G__memfunc_setup("sortNdetWeightFlag",1845,G__ParticleDict_971_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortWeightNdet",1467,G__ParticleDict_971_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_971_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_971_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tracksVec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_971_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tracksVec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_971_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tracksVec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_971_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tracksVec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_971_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_971_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tracksVec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_971_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tracksVec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_971_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tracksVec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_971_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tracksVec::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~tracksVec", 1060, G__ParticleDict_971_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_971_0_27, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_tracksVec), -1, 1, 1, 1, 1, 0, "u 'tracksVec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmdc_trk(void) {
   /* mdc_trk */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_mdc_trk));
   G__memfunc_setup("mdc_trk",740,G__ParticleDict_976_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_mdc_trk), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ParticleDict_976_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMeta",814,G__ParticleDict_976_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMetaMatch2' - 0 - meta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ParticleDict_976_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcTrkCand' - 0 - trk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_976_0_5, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&mdc_trk::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_976_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mdc_trk::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_976_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&mdc_trk::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_976_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&mdc_trk::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_976_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_976_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mdc_trk::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_976_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&mdc_trk::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_976_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mdc_trk::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_976_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&mdc_trk::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("mdc_trk", 740, G__ParticleDict_976_0_17, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_mdc_trk), -1, 0, 1, 1, 1, 0, "u 'mdc_trk' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~mdc_trk", 866, G__ParticleDict_976_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_976_0_19, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_mdc_trk), -1, 1, 1, 1, 1, 0, "u 'mdc_trk' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmdc_seg(void) {
   /* mdc_seg */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_mdc_seg));
   G__memfunc_setup("mdc_seg",722,G__ParticleDict_977_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_mdc_seg), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ParticleDict_977_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ParticleDict_977_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMdcSeg' - 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_977_0_4, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&mdc_seg::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_977_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mdc_seg::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_977_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&mdc_seg::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_977_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&mdc_seg::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_977_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_977_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mdc_seg::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_977_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&mdc_seg::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_977_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mdc_seg::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_977_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&mdc_seg::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("mdc_seg", 722, G__ParticleDict_977_0_16, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_mdc_seg), -1, 0, 1, 1, 1, 0, "u 'mdc_seg' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~mdc_seg", 848, G__ParticleDict_977_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_977_0_18, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_mdc_seg), -1, 1, 1, 1, 1, 0, "u 'mdc_seg' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrpc_clst(void) {
   /* rpc_clst */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_rpc_clst));
   G__memfunc_setup("rpc_clst",858,G__ParticleDict_978_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_rpc_clst), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ParticleDict_978_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetaModule",1337,G__ParticleDict_978_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - hit h - 'UInt_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetaCell",1107,G__ParticleDict_978_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - hit h - 'UInt_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetMetaModule",1564,G__ParticleDict_978_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetMetaCell",1334,G__ParticleDict_978_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaModule",1325,G__ParticleDict_978_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaCell",1095,G__ParticleDict_978_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMeta",814,G__ParticleDict_978_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMetaMatch2' - 0 - meta i - 'Int_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ParticleDict_978_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HRpcCluster' - 0 - clst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_978_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&rpc_clst::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_978_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rpc_clst::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_978_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&rpc_clst::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_978_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&rpc_clst::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_978_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_978_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rpc_clst::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_978_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rpc_clst::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_978_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rpc_clst::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_978_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rpc_clst::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("rpc_clst", 858, G__ParticleDict_978_0_23, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_rpc_clst), -1, 0, 1, 1, 1, 0, "u 'rpc_clst' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~rpc_clst", 984, G__ParticleDict_978_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_978_0_25, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_rpc_clst), -1, 1, 1, 1, 1, 0, "u 'rpc_clst' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctof_hit(void) {
   /* tof_hit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_tof_hit));
   G__memfunc_setup("tof_hit",749,G__ParticleDict_979_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_tof_hit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ParticleDict_979_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetaModule",1337,G__ParticleDict_979_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - hit h - 'UInt_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetaCell",1107,G__ParticleDict_979_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - hit h - 'UInt_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetMetaModule",1564,G__ParticleDict_979_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetMetaCell",1334,G__ParticleDict_979_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaModule",1325,G__ParticleDict_979_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMetaCell",1095,G__ParticleDict_979_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMeta",814,G__ParticleDict_979_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HMetaMatch2' - 0 - meta i - 'Int_t' 0 '0' n "
"i - 'Int_t' 0 '0' hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ParticleDict_979_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HTofHit' - 0 - hit i - 'Int_t' 0 '1' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_979_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tof_hit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_979_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tof_hit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_979_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tof_hit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_979_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tof_hit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_979_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_979_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tof_hit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_979_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tof_hit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_979_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tof_hit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_979_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tof_hit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("tof_hit", 749, G__ParticleDict_979_0_23, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_tof_hit), -1, 0, 1, 1, 1, 0, "u 'tof_hit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~tof_hit", 875, G__ParticleDict_979_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_979_0_25, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_tof_hit), -1, 1, 1, 1, 1, 0, "u 'tof_hit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncshower_hit(void) {
   /* shower_hit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_shower_hit));
   G__memfunc_setup("shower_hit",1084,G__ParticleDict_980_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_shower_hit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ParticleDict_980_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMeta",814,G__ParticleDict_980_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HMetaMatch2' - 0 - meta i - 'Int_t' 0 '0' n "
"U 'HRKTrackB' - 0 '0' rk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMetaKal",1094,G__ParticleDict_980_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HMetaMatch2' - 0 - meta i - 'Int_t' 0 '0' n "
"U 'HKalTrack' - 0 '0' rk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ParticleDict_980_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HShowerHit' - 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_980_0_6, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&shower_hit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_980_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&shower_hit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_980_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&shower_hit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_980_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&shower_hit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_980_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_980_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&shower_hit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_980_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&shower_hit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_980_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&shower_hit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_980_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&shower_hit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("shower_hit", 1084, G__ParticleDict_980_0_18, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_shower_hit), -1, 0, 1, 1, 1, 0, "u 'shower_hit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~shower_hit", 1210, G__ParticleDict_980_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_980_0_20, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_shower_hit), -1, 1, 1, 1, 1, 0, "u 'shower_hit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrich_hit(void) {
   /* rich_hit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_rich_hit));
   G__memfunc_setup("rich_hit",842,G__ParticleDict_981_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_rich_hit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNewRich",908,G__ParticleDict_981_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ParticleDict_981_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMeta",814,G__ParticleDict_981_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HMetaMatch2' - 0 - meta i - 'Int_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ParticleDict_981_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HRichHit' - 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_981_0_6, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&rich_hit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_981_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rich_hit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_981_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&rich_hit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_981_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&rich_hit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_981_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_981_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rich_hit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_981_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rich_hit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_981_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rich_hit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_981_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rich_hit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("rich_hit", 842, G__ParticleDict_981_0_18, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_rich_hit), -1, 0, 1, 1, 1, 0, "u 'rich_hit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~rich_hit", 968, G__ParticleDict_981_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_981_0_20, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_rich_hit), -1, 1, 1, 1, 1, 0, "u 'rich_hit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncspline_track(void) {
   /* spline_track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_spline_track));
   G__memfunc_setup("spline_track",1279,G__ParticleDict_982_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_spline_track), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ParticleDict_982_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMeta",814,G__ParticleDict_982_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMetaMatch2' - 0 - meta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ParticleDict_982_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HSplineTrack' - 0 - trk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_982_0_5, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&spline_track::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_982_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&spline_track::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_982_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&spline_track::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_982_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&spline_track::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_982_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_982_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&spline_track::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_982_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&spline_track::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_982_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&spline_track::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_982_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&spline_track::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("spline_track", 1279, G__ParticleDict_982_0_17, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_spline_track), -1, 0, 1, 1, 1, 0, "u 'spline_track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~spline_track", 1405, G__ParticleDict_982_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_982_0_19, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_spline_track), -1, 1, 1, 1, 1, 0, "u 'spline_track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrk_track(void) {
   /* rk_track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_rk_track));
   G__memfunc_setup("rk_track",849,G__ParticleDict_983_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_rk_track), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ParticleDict_983_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillInd",706,G__ParticleDict_983_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ParticleDict_983_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HRKTrackB' - 0 - rk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_983_0_5, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&rk_track::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_983_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rk_track::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_983_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&rk_track::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_983_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&rk_track::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_983_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_983_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rk_track::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_983_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rk_track::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_983_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rk_track::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_983_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rk_track::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("rk_track", 849, G__ParticleDict_983_0_17, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_rk_track), -1, 0, 1, 1, 1, 0, "u 'rk_track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~rk_track", 975, G__ParticleDict_983_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_983_0_19, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_rk_track), -1, 1, 1, 1, 1, 0, "u 'rk_track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunckal_track(void) {
   /* kal_track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_kal_track));
   G__memfunc_setup("kal_track",940,G__ParticleDict_984_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_kal_track), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ParticleDict_984_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillInd",706,G__ParticleDict_984_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ParticleDict_984_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HKalTrack' - 0 - trk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_984_0_5, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&kal_track::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_984_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&kal_track::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_984_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&kal_track::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_984_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&kal_track::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_984_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_984_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&kal_track::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_984_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&kal_track::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_984_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&kal_track::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_984_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&kal_track::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("kal_track", 940, G__ParticleDict_984_0_17, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_kal_track), -1, 0, 1, 1, 1, 0, "u 'kal_track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~kal_track", 1066, G__ParticleDict_984_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_984_0_19, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_kal_track), -1, 1, 1, 1, 1, 0, "u 'kal_track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunccandidate(void) {
   /* candidate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_candidate));
   G__memfunc_setup("candidate",925,G__ParticleDict_985_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_candidate), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ParticleDict_985_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMeta",814,G__ParticleDict_985_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HMetaMatch2' - 0 - meta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillParticleCand",1617,G__ParticleDict_985_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HParticleCand' - 0 - part i - 'Int_t' 0 - index "
"i - 'Int_t' 0 'Particle::kMomRK' momSwitch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillParticleCandSim",1914,G__ParticleDict_985_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HParticleCandSim' - 0 - part U 'HCategory' - 0 '0' kineCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deltaThetaSeg1",1360,G__ParticleDict_985_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "delta theta Rich-MDC", (void*) NULL, 0);
   G__memfunc_setup("deltaPhiSeg1",1147,G__ParticleDict_985_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "delta phi Rich-MDC", (void*) NULL, 0);
   G__memfunc_setup("deltaThetaRk",1213,G__ParticleDict_985_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "delta theta Rich-MDC", (void*) NULL, 0);
   G__memfunc_setup("deltaPhiRk",1000,G__ParticleDict_985_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "delta phi Rich-MDC", (void*) NULL, 0);
   G__memfunc_setup("deltaThetaKal",1304,G__ParticleDict_985_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "delta theta Rich-MDC", (void*) NULL, 0);
   G__memfunc_setup("deltaPhiKal",1091,G__ParticleDict_985_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "delta phi Rich-MDC", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_985_0_12, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&candidate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_985_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&candidate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_985_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&candidate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_985_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&candidate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_985_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_985_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&candidate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_985_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&candidate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_985_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&candidate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_985_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&candidate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("candidate", 925, G__ParticleDict_985_0_24, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_candidate), -1, 0, 1, 1, 1, 0, "u 'candidate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~candidate", 1051, G__ParticleDict_985_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_985_0_26, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_candidate), -1, 1, 1, 1, 1, 0, "u 'candidate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleEvtChara(void) {
   /* HParticleEvtChara */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtChara));
   G__memfunc_setup("HParticleEvtChara",1674,G__ParticleDict_987_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtChara), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 '\"HParticleEvtChara\"' name C - 'Text_t' 10 '\"HParticleEvtChara\"' title", "/ constructor", (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setBeamTime",1104,G__ParticleDict_987_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - beamTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeneration",1368,G__ParticleDict_987_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - generation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParameterFile",1645,G__ParticleDict_987_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - ParameterFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEstimator",1284,G__ParticleDict_987_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - estimator", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useEstimator",1285,G__ParticleDict_987_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - estimator", "FIXME", (void*) NULL, 0);
   G__memfunc_setup("getCentralityClass",1877,G__ParticleDict_987_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Return centrality classes with fixed Cuts", (void*) NULL, 0);
   G__memfunc_setup("getCentralityClass",1877,G__ParticleDict_987_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'TString' - 0 - estimator", "Return centrality classes with fixed Cuts", (void*) NULL, 0);
   G__memfunc_setup("getCentralityClass",1877,G__ParticleDict_987_0_12, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"h - 'UInt_t' 0 - buffer u 'TString' - 0 - estimator", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCentralityClass",2114,G__ParticleDict_987_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCentralityClass",2114,G__ParticleDict_987_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - estimator", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNbins",826,G__ParticleDict_987_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNbins",826,G__ParticleDict_987_0_16, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - estimator", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCentralityPercentile",2410,G__ParticleDict_987_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCentralityPercentile",2410,G__ParticleDict_987_0_18, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "u 'TString' - 0 - estimator", "Return centrality percentile [0.0-100.0%] of total cross section - Error is 101%", (void*) NULL, 0);
   G__memfunc_setup("getCentralityClass5",1930,G__ParticleDict_987_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "Return centrality classes in 5%  bins of total cross section", (void*) NULL, 0);
   G__memfunc_setup("getCentralityClass5",1930,G__ParticleDict_987_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - estimator", "Return centrality classes in 5%  bins of total cross section", (void*) NULL, 0);
   G__memfunc_setup("getCentralityClass10",1974,G__ParticleDict_987_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCentralityClass10",1974,G__ParticleDict_987_0_22, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - estimator", "Return centrality classes in 10% bins of total cross section", (void*) NULL, 0);
   G__memfunc_setup("getFWSumChargeSpec",1767,G__ParticleDict_987_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcFWSumChargeSpec",1850,G__ParticleDict_987_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setReferenceMean",1628,G__ParticleDict_987_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - referenceMean", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFWSumChargeSpec",1779,G__ParticleDict_987_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDirectivity",1500,G__ParticleDict_987_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRatioEtEz",1219,G__ParticleDict_987_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEt",517,G__ParticleDict_987_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__ParticleDict_987_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_987_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadParameterFile",1729,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_987_0_33, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleEvtChara::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_987_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleEvtChara::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_987_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleEvtChara::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_987_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleEvtChara::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_987_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_987_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleEvtChara::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_987_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleEvtChara::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_987_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleEvtChara::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_987_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleEvtChara::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HParticleEvtChara", 1800, G__ParticleDict_987_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCandFillerPar(void) {
   /* HParticleCandFillerPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFillerPar));
   G__memfunc_setup("createHists",1151,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "be careful with this function! needs to called after filling!", (void*) NULL, 0);
   G__memfunc_setup("removeHists",1177,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "be careful with this function!", (void*) NULL, 0);
   G__memfunc_setup("HParticleCandFillerPar",2163,G__ParticleDict_1014_0_3, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFillerPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"ParticleCandFillerPar\"' name C - 'Char_t' 10 '\"parameters for PartticleCandFiller\"' title "
"C - 'Char_t' 10 '\"ParticleCandFillerParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhiLow",927,G__ParticleDict_1014_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s u 'TArrayD' - 11 - linData", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhiUp",818,G__ParticleDict_1014_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s u 'TArrayD' - 11 - linData", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThetaLow",1140,G__ParticleDict_1014_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s u 'TArrayD' - 11 - linData", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThetaUp",1031,G__ParticleDict_1014_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s u 'TArrayD' - 11 - linData", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZRichCenter",1421,G__ParticleDict_1014_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - shift", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiLow",915,G__ParticleDict_1014_0_9, 85, G__get_linked_tagnum(&G__ParticleDictLN_TArrayD), -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiUp",806,G__ParticleDict_1014_0_10, 85, G__get_linked_tagnum(&G__ParticleDictLN_TArrayD), -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaLow",1128,G__ParticleDict_1014_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TArrayD), -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaUp",1019,G__ParticleDict_1014_0_12, 85, G__get_linked_tagnum(&G__ParticleDictLN_TArrayD), -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiLow",915,G__ParticleDict_1014_0_13, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s f - 'Float_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiUp",806,G__ParticleDict_1014_0_14, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s f - 'Float_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaLow",1128,G__ParticleDict_1014_0_15, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s f - 'Float_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaUp",1019,G__ParticleDict_1014_0_16, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s f - 'Float_t' 0 - mom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichCorr",1116,G__ParticleDict_1014_0_17, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - zVertex f - 'Float_t' 0 - thetaRich "
"f - 'Float_t' 0 - phiRich", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZRichCenter",1409,G__ParticleDict_1014_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("acceptPhiTheta",1415,G__ParticleDict_1014_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s f - 'Float_t' 0 - mom "
"f - 'Float_t' 0 - dphi f - 'Float_t' 0 - dtheta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__ParticleDict_1014_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1014_0_25, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCandFillerPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1014_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCandFillerPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1014_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCandFillerPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1014_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCandFillerPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1014_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1014_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCandFillerPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1014_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCandFillerPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1014_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCandFillerPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1014_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCandFillerPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCandFillerPar", 2163, G__ParticleDict_1014_0_37, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFillerPar), -1, 0, 1, 1, 1, 0, "u 'HParticleCandFillerPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCandFillerPar", 2289, G__ParticleDict_1014_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1014_0_39, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFillerPar), -1, 1, 1, 1, 1, 0, "u 'HParticleCandFillerPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCandFiller(void) {
   /* HParticleCandFiller */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFiller));
   G__memfunc_setup("initVars",848,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setConditions",1382,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "C - 'Option_t' 10 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findBestRich",1205,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"U 'HMetaMatch2' - 0 - meta U 'HMdcSeg' - 0 - seg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCandNoMeta",1377,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"g - 'Bool_t' 0 - rkSuccess U 'HMetaMatch2' - 0 - meta "
"u 'candidate' - 1 - cand i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCandTof",1094,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"g - 'Bool_t' 0 - rkSuccess U 'HMetaMatch2' - 0 - meta "
"u 'candidate' - 1 - cand i - 'Int_t' 0 - num "
"i - 'Int_t' 0 - slot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCandRpc",1090,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"g - 'Bool_t' 0 - rkSuccess U 'HMetaMatch2' - 0 - meta "
"u 'candidate' - 1 - cand i - 'Int_t' 0 - num "
"i - 'Int_t' 0 - slot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCandShower",1429,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"g - 'Bool_t' 0 - rkSuccess U 'HMetaMatch2' - 0 - meta "
"u 'candidate' - 1 - cand i - 'Int_t' 0 - num "
"i - 'Int_t' 0 - slot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCand",797,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'HMetaMatch2' - 0 - meta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCandSim",1094,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'candidate' - 1 - cand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCollectiveProperties",2526,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillSingleProperties",2102,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillOutput",1080,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearVector",1146,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillGeantAcceptance",1917,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkCropLayer",1423,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'HParticleCand' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleCandFiller",1872,G__ParticleDict_1015_0_16, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFiller), -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' pOpt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleCandFiller",1872,G__ParticleDict_1015_0_17, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandFiller), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"C - 'Option_t' 10 '\"\"' pOpt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setMinWireGoodTrack",1925,G__ParticleDict_1015_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScaleGoodTrack",1714,G__ParticleDict_1015_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScaleGhostTrack",1838,G__ParticleDict_1015_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAngleCloseTrack",1822,G__ParticleDict_1015_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMomSwitch",1255,G__ParticleDict_1015_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoAlignRich",1392,G__ParticleDict_1015_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - align", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoRichVertexCorr",1945,G__ParticleDict_1015_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - corr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoMETAQANorm",1364,G__ParticleDict_1015_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - norm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoMomentumCorr",1767,G__ParticleDict_1015_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - corr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoPathLengthCorr",1924,G__ParticleDict_1015_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - corr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoGeantAcceptance",2005,G__ParticleDict_1015_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - acc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFillMdc",999,G__ParticleDict_1015_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fill", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSortMeta",1147,G__ParticleDict_1015_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1015_0_35, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCandFiller::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1015_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCandFiller::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1015_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCandFiller::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1015_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCandFiller::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1015_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1015_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCandFiller::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1015_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCandFiller::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1015_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCandFiller::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1015_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCandFiller::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCandFiller", 1998, G__ParticleDict_1015_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleTrackSorter(void) {
   /* HParticleTrackSorter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter));
   G__memfunc_setup("printCand",931,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"U 'candidateSort' 'candidateSort' 0 - - i - 'Int_t' 0 - - "
"u 'TString' - 0 '\"    \"' spacer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cmpIndex",824,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 2, 0, 
"U 'candidateSort' 'candidateSort' 0 - - U 'candidateSort' 'candidateSort' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cmpQuality",1065,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 2, 0, 
"U 'candidateSort' 'candidateSort' 0 - - U 'candidateSort' 'candidateSort' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rejectIndex",1141,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 2, 0, 
"U 'candidateSort' 'candidateSort' 0 - - i 'HParticleTrackSorter::ESwitch' - 0 - - "
"i - 'Int_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rejectQuality",1382,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"U 'candidateSort' 'candidateSort' 0 - - i 'HParticleTrackSorter::ESwitch' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("flagAccepted",1203,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"u 'vector<candidateSort*,allocator<candidateSort*> >' 'vector<candidateSort*>' 1 - - i 'HParticleTrackSorter::ESwitch' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("flagDouble",1013,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"u 'vector<candidateSort*,allocator<candidateSort*> >' 'vector<candidateSort*>' 1 - - i 'HParticleTrackSorter::ESwitch' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlagsDouble",1428,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"u 'vector<candidateSort*,allocator<candidateSort*> >' 'vector<candidateSort*>' 1 - - i 'HParticleTrackSorter::ESwitch' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearVector",1146,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'vector<candidateSort*,allocator<candidateSort*> >' 'vector<candidateSort*>' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillInput",951,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'vector<candidateSort*,allocator<candidateSort*> >' 'vector<candidateSort*>' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selection",966,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "1 - 'Bool_t (*)(HParticleCand*)' 0 - function", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillAndSetFlags",1491,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleTrackSorter",2032,G__ParticleDict_1025_0_14, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleTrackSorter",2032,G__ParticleDict_1025_0_15, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name u 'TString' - 0 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__ParticleDict_1025_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finalize",850,G__ParticleDict_1025_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebug",819,G__ParticleDict_1025_0_18, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' debug", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticleTrackSorter::setDebug) ), 0);
   G__memfunc_setup("setIgnoreRICH",1238,G__ParticleDict_1025_0_19, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' ignore", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticleTrackSorter::setIgnoreRICH) ), 0);
   G__memfunc_setup("setIgnoreInnerMDC",1664,G__ParticleDict_1025_0_20, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' ignore", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticleTrackSorter::setIgnoreInnerMDC) ), 0);
   G__memfunc_setup("setIgnoreOuterMDC",1683,G__ParticleDict_1025_0_21, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' ignore", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticleTrackSorter::setIgnoreOuterMDC) ), 0);
   G__memfunc_setup("setIgnoreMETA",1239,G__ParticleDict_1025_0_22, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' ignore", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticleTrackSorter::setIgnoreMETA) ), 0);
   G__memfunc_setup("setIgnorePreviousIndex",2309,G__ParticleDict_1025_0_23, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' ignore", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticleTrackSorter::setIgnorePreviousIndex) ), 0);
   G__memfunc_setup("setUseYMatching",1533,G__ParticleDict_1025_0_24, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' use", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticleTrackSorter::setUseYMatching) ), 0);
   G__memfunc_setup("setUseYMatchingScaling",2238,G__ParticleDict_1025_0_25, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' use", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticleTrackSorter::setUseYMatchingScaling) ), 0);
   G__memfunc_setup("setUseBeta",1013,G__ParticleDict_1025_0_26, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' use", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticleTrackSorter::setUseBeta) ), 0);
   G__memfunc_setup("setUseFakeRejection",1939,G__ParticleDict_1025_0_27, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' use", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticleTrackSorter::setUseFakeRejection) ), 0);
   G__memfunc_setup("setUseMETAQA",1074,G__ParticleDict_1025_0_28, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' use", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticleTrackSorter::setUseMETAQA) ), 0);
   G__memfunc_setup("setPrintLevel",1361,G__ParticleDict_1025_0_29, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - level", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HParticleTrackSorter::setPrintLevel) ), 0);
   G__memfunc_setup("setUserSort",1171,G__ParticleDict_1025_0_30, 121, -1, -1, 0, 1, 3, 1, 0, "1 - 'Bool_t (*)(candidateSort*, candidateSort*)' 0 - function", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t (*)(candidateSort*, candidateSort*)))(&HParticleTrackSorter::setUserSort) ), 0);
   G__memfunc_setup("setRICHMatching",1437,G__ParticleDict_1025_0_31, 121, -1, -1, 0, 2, 3, 1, 0, 
"i 'HParticleTrackSorter::ERichMatch' - 0 - match f - 'Float_t' 0 '4.' window", (char*)NULL, (void*) G__func2void( (void (*)(HParticleTrackSorter::ERichMatch, Float_t))(&HParticleTrackSorter::setRICHMatching) ), 0);
   G__memfunc_setup("setMetaBoundary",1559,G__ParticleDict_1025_0_32, 121, -1, -1, 0, 1, 3, 1, 0, "f - 'Float_t' 0 '3.5' savety", (char*)NULL, (void*) G__func2void( (void (*)(Float_t))(&HParticleTrackSorter::setMetaBoundary) ), 0);
   G__memfunc_setup("setBetaLeptonCut",1638,G__ParticleDict_1025_0_33, 121, -1, -1, 0, 1, 3, 1, 0, "f - 'Float_t' 0 '.9' cut", (char*)NULL, (void*) G__func2void( (void (*)(Float_t))(&HParticleTrackSorter::setBetaLeptonCut) ), 0);
   G__memfunc_setup("setMETAQACut",1073,G__ParticleDict_1025_0_34, 121, -1, -1, 0, 1, 3, 1, 0, "f - 'Float_t' 0 '3.' cut", (char*)NULL, (void*) G__func2void( (void (*)(Float_t))(&HParticleTrackSorter::setMETAQACut) ), 0);
   G__memfunc_setup("setTOFMAXCut",1095,G__ParticleDict_1025_0_35, 121, -1, -1, 0, 1, 3, 1, 0, "f - 'Float_t' 0 '60.' cut", (char*)NULL, (void*) G__func2void( (void (*)(Float_t))(&HParticleTrackSorter::setTOFMAXCut) ), 0);
   G__memfunc_setup("getMetaBoundary",1547,G__ParticleDict_1025_0_36, 102, -1, G__defined_typename("Float_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Float_t (*)())(&HParticleTrackSorter::getMetaBoundary) ), 0);
   G__memfunc_setup("getBetaLeptonCut",1626,G__ParticleDict_1025_0_37, 102, -1, G__defined_typename("Float_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Float_t (*)())(&HParticleTrackSorter::getBetaLeptonCut) ), 0);
   G__memfunc_setup("resetFlags",1040,G__ParticleDict_1025_0_38, 121, -1, -1, 0, 4, 1, 1, 0, 
"g - 'Bool_t' 0 'kTRUE' flag g - 'Bool_t' 0 'kTRUE' reject "
"g - 'Bool_t' 0 'kTRUE' used g - 'Bool_t' 0 'kTRUE' lepton", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cleanUp",712,G__ParticleDict_1025_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' final", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ParticleDict_1025_0_40, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "1 - 'Bool_t (*)(HParticleCand*)' 0 - function", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("backupFlags",1123,G__ParticleDict_1025_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' onlyFlags", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("restoreFlags",1265,G__ParticleDict_1025_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' onlyFlags", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("backupSetup",1159,G__ParticleDict_1025_0_43, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("restoreSetup",1301,G__ParticleDict_1025_0_44, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectBest",1038,G__ParticleDict_1025_0_45, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i 'HParticleTrackSorter::ESwitch' - 0 - byQuality i - 'Int_t' 0 - byParticle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectLeptons",1381,G__ParticleDict_1025_0_46, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'HParticleCand' - 0 '0' pcand", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParticleCand*))(&HParticleTrackSorter::selectLeptons) ), 0);
   G__memfunc_setup("selectHadrons",1359,G__ParticleDict_1025_0_47, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'HParticleCand' - 0 '0' pcand", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParticleCand*))(&HParticleTrackSorter::selectHadrons) ), 0);
   G__memfunc_setup("selectLeptonsNoOuterFit",2388,G__ParticleDict_1025_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'HParticleCand' - 0 '0' pcand", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParticleCand*))(&HParticleTrackSorter::selectLeptonsNoOuterFit) ), 0);
   G__memfunc_setup("selectHadronsNoOuterFit",2366,G__ParticleDict_1025_0_49, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'HParticleCand' - 0 '0' pcand", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParticleCand*))(&HParticleTrackSorter::selectHadronsNoOuterFit) ), 0);
   G__memfunc_setup("getCandidates",1328,G__ParticleDict_1025_0_50, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEcandidateSortmUcOallocatorlEcandidateSortmUgRsPgR), G__defined_typename("vector<candidateSort*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printEvent",1071,G__ParticleDict_1025_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - comment", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1025_0_52, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleTrackSorter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1025_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleTrackSorter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1025_0_54, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleTrackSorter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1025_0_55, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleTrackSorter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1025_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1025_0_60, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleTrackSorter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1025_0_61, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleTrackSorter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1025_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleTrackSorter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1025_0_63, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleTrackSorter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleTrackSorter", 2032, G__ParticleDict_1025_0_64, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter), -1, 0, 1, 1, 1, 0, "u 'HParticleTrackSorter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleTrackSorter", 2158, G__ParticleDict_1025_0_65, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1025_0_66, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter), -1, 1, 1, 1, 1, 0, "u 'HParticleTrackSorter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleTrackCleaner(void) {
   /* HParticleTrackCleaner */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackCleaner));
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleTrackCleaner",2091,G__ParticleDict_1033_0_2, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackCleaner), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleTrackCleaner",2091,G__ParticleDict_1033_0_3, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackCleaner), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setDebug",819,G__ParticleDict_1033_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleTrackCleaner::setDebug) ), 0);
   G__memfunc_setup("setPrintLevel",1361,G__ParticleDict_1033_0_8, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - level", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HParticleTrackCleaner::setPrintLevel) ), 0);
   G__memfunc_setup("setUserSelectionLeptons",2422,G__ParticleDict_1033_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "1 - 'Bool_t (*)(HParticleCand*)' 0 - function", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUserSelectionHadrons",2400,G__ParticleDict_1033_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "1 - 'Bool_t (*)(HParticleCand*)' 0 - function", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUserSort",1171,G__ParticleDict_1033_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "1 - 'Bool_t (*)(candidateSort*, candidateSort*)' 0 - function", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSortType",1174,G__ParticleDict_1033_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i 'HParticleTrackSorter::ESwitch' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSorter",959,G__ParticleDict_1033_0_13, 117, G__get_linked_tagnum(&G__ParticleDictLN_HParticleTrackSorter), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1033_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleTrackCleaner::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1033_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleTrackCleaner::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1033_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleTrackCleaner::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1033_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleTrackCleaner::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1033_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1033_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleTrackCleaner::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1033_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleTrackCleaner::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1033_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleTrackCleaner::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1033_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleTrackCleaner::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HParticleTrackCleaner", 2217, G__ParticleDict_1033_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleRunningMeanI(void) {
   /* HParticleRunningMeanI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI));
   G__memfunc_setup("setInitialMean",1431,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"f - 'Float_t' 10 - initialMean f - 'Float_t' 10 - initialSigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isValid",716,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleRunningMeanI",2087,G__ParticleDict_1034_0_3, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initParam",933,G__ParticleDict_1034_0_4, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 1, 0, 
"i - 'Int_t' 10 '2000' Max i - 'Int_t' 10 '100' minEvents "
"f - 'Float_t' 10 'sqrt(12.0F)' scaleFacSigma f - 'Float_t' 10 '-999999' initMean "
"f - 'Float_t' 10 '-999999' initSigma i - 'Int_t' 10 '1' min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ParticleDict_1034_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' full", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcMean",788,G__ParticleDict_1034_0_6, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMean",705,G__ParticleDict_1034_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigma",817,G__ParticleDict_1034_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getValid",816,G__ParticleDict_1034_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMax",614,G__ParticleDict_1034_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMin",612,G__ParticleDict_1034_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxMin",906,G__ParticleDict_1034_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNMax",692,G__ParticleDict_1034_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNMin",690,G__ParticleDict_1034_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanScaleToMax",1682,G__ParticleDict_1034_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1034_0_16, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleRunningMeanI::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1034_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleRunningMeanI::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1034_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleRunningMeanI::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1034_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleRunningMeanI::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1034_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1034_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleRunningMeanI::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1034_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleRunningMeanI::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1034_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleRunningMeanI::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1034_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleRunningMeanI::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleRunningMeanI", 2087, G__ParticleDict_1034_0_28, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI), -1, 0, 1, 1, 1, 0, "u 'HParticleRunningMeanI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleRunningMeanI", 2213, G__ParticleDict_1034_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1034_0_30, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleRunningMeanI), -1, 1, 1, 1, 1, 0, "u 'HParticleRunningMeanI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleEvtInfoFiller(void) {
   /* HParticleEvtInfoFiller */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfoFiller));
   G__memfunc_setup("isLepton",846,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'HParticleCand' - 0 - cand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearMembers",1234,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleEvtInfoFiller",2197,G__ParticleDict_1037_0_3, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfoFiller), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 '\"EvtInfoFiller\"' name C - 'Text_t' 10 '\"EvtInfoFiller\"' title "
"u 'TString' - 0 '\"apr12\"' beamtime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTofCut",929,G__ParticleDict_1037_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - rpccutoff f - 'Float_t' 0 - tofcutoff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVertexCut",1270,G__ParticleDict_1037_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - z f - 'Float_t' 0 - mindist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetaPileUpCut",1614,G__ParticleDict_1037_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - tof i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMdcPileupCut",1531,G__ParticleDict_1037_0_7, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 - t0 f - 'Float_t' 0 - t1 "
"f - 'Float_t' 0 - t2 f - 'Float_t' 0 - t3 "
"i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMeanMult",1135,G__ParticleDict_1037_0_8, 121, -1, -1, 0, 7, 1, 1, 0, 
"f - 'Float_t' 0 - mean f - 'Float_t' 0 - meanmips "
"f - 'Float_t' 0 - sigmean f - 'Float_t' 0 - sigmeanmips "
"f - 'Float_t' 0 - betacut i - 'Int_t' 0 - minEvt "
"i - 'Int_t' 0 - maxEvt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMeanLepMult",1424,G__ParticleDict_1037_0_9, 121, -1, -1, 0, 7, 1, 1, 0, 
"f - 'Float_t' 0 - mean f - 'Float_t' 0 - sigma "
"f - 'Float_t' 0 - betacut f - 'Float_t' 0 - momcut "
"f - 'Float_t' 0 - richcut i - 'Int_t' 0 - minEvt "
"i - 'Int_t' 0 - maxEvt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoVETOCut",1139,G__ParticleDict_1037_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 '-15' min f - 'Float_t' 0 '15' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSTARTVETOCUT",1284,G__ParticleDict_1037_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 '15' mintstart f - 'Float_t' 0 '350' maxstart "
"f - 'Float_t' 0 '1.' window", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSTARTMETACUT",1261,G__ParticleDict_1037_0_12, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 '80' mintstart f - 'Float_t' 0 '350' maxstart "
"f - 'Float_t' 0 '5.' window f - 'Float_t' 0 '7.' offset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ParticleDict_1037_0_17, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleEvtInfoFiller::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1037_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleEvtInfoFiller::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1037_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleEvtInfoFiller::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1037_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleEvtInfoFiller::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1037_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1037_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleEvtInfoFiller::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1037_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleEvtInfoFiller::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1037_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleEvtInfoFiller::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1037_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleEvtInfoFiller::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HParticleEvtInfoFiller", 2323, G__ParticleDict_1037_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleContFact(void) {
   /* HParticleContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleContFact",1678,G__ParticleDict_1040_0_2, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_HParSet), -1, 0, 1, 1, 1, 0, "U 'HContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ParticleDict_1040_0_4, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1040_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1040_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1040_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1040_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1040_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1040_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1040_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1040_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleContFact::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleContFact", 1678, G__ParticleDict_1040_0_16, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleContFact), -1, 0, 1, 1, 1, 0, "u 'HParticleContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleContFact", 1804, G__ParticleDict_1040_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1040_0_18, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleContFact), -1, 1, 1, 1, 1, 0, "u 'HParticleContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleStart2HitF(void) {
   /* HParticleStart2HitF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleStart2HitF));
   G__memfunc_setup("findMinimumTime",1548,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 0, "", "find the minimum time-of-flight", (void*) NULL, 0);
   G__memfunc_setup("findOriginalStartTime",2163,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 0, "", "find start time from HStart2Hit category", (void*) NULL, 0);
   G__memfunc_setup("findStartTime",1342,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 4, 0, "f - 'Float_t' 0 - tof", "find the proper start time", (void*) NULL, 0);
   G__memfunc_setup("correctTof",1051,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "f - 'Float_t' 0 - corrTime", "modify the HTofHit tof", (void*) NULL, 0);
   G__memfunc_setup("correctRpc",1047,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "f - 'Float_t' 0 - corrTime", "modify the HRpcHit tof", (void*) NULL, 0);
   G__memfunc_setup("correctStart",1280,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "f - 'Float_t' 0 - corrTime", "modify the HStart2Hit time", (void*) NULL, 0);
   G__memfunc_setup("setDebug",819,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "g - 'Bool_t' 0 'kTRUE' mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleStart2HitF",1831,G__ParticleDict_1041_0_8, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleStart2HitF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleStart2HitF",1831,G__ParticleDict_1041_0_9, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleStart2HitF), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"g - 'Bool_t' 0 'kFALSE' skip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ParticleDict_1041_0_13, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleStart2HitF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1041_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleStart2HitF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1041_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleStart2HitF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1041_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleStart2HitF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1041_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1041_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleStart2HitF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1041_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleStart2HitF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1041_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleStart2HitF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1041_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleStart2HitF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HParticleStart2HitF", 1957, G__ParticleDict_1041_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleTree(void) {
   /* HParticleTree */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleTree));
   G__memfunc_setup("makeTree",814,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", "create output tree", (void*) NULL, 0);
   G__memfunc_setup("recreateOutput",1500,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", "open new output file if max filesize is reached", (void*) NULL, 0);
   G__memfunc_setup("closeOutput",1191,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", "close output file", (void*) NULL, 0);
   G__memfunc_setup("setEvent",846,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", "setup the event layout", (void*) NULL, 0);
   G__memfunc_setup("extractMdcSeg",1326,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"U 'HParticleCand' - 0 - cand g - 'Bool_t' 0 - isSim "
"i - 'Int_t' 0 - segInd1 i - 'Int_t' 1 - segInd2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("extractMdcCal1",1360,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"g - 'Bool_t' 0 - isSim i - 'Int_t' 0 - segInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("extractMdcCal1FromClus",2171,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"g - 'Bool_t' 0 - isSim i - 'Int_t' 0 - segInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doFullCopy",1025,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "s - 'Cat_t' 0 - cat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleTree",1292,G__ParticleDict_1042_0_9, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleTree), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 '\"\"' name C - 'Text_t' 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setSkipEmptyEvents",1895,G__ParticleDict_1042_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - skip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSkipTracks",1355,G__ParticleDict_1042_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - skip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutputFile",1373,G__ParticleDict_1042_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 '\"filter_tree.root\"' fname u 'TString' - 0 '\"Filter\"' ftitle "
"u 'TString' - 0 '\"RECREATE\"' fopt i - 'Int_t' 0 '2' fcomp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutputFileSuffix",2002,G__ParticleDict_1042_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"filter_tree\"' suff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutputDir",1276,G__ParticleDict_1042_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEventStructure",1823,G__ParticleDict_1042_0_18, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n S - 'Cat_t' 0 - PersistentCat "
"g - 'Bool_t' 0 'kFALSE' fullCopy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIgnoreRICH",1238,G__ParticleDict_1042_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' ignore", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIgnoreInnerMDC",1664,G__ParticleDict_1042_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' ignore", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIgnoreOuterMDC",1683,G__ParticleDict_1042_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' ignore", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIgnoreMETA",1239,G__ParticleDict_1042_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' ignore", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIgnorePreviousIndex",2309,G__ParticleDict_1042_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' ignore", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRICHMatching",1437,G__ParticleDict_1042_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"i 'HParticleTrackSorter::ERichMatch' - 0 - match f - 'Float_t' 0 '4.' window", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUserSelectionEvent",2195,G__ParticleDict_1042_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"1 - 'Bool_t (*)(TObjArray*)' 0 - function U 'TObjArray' - 0 - ar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUserSelectionLeptons",2422,G__ParticleDict_1042_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "1 - 'Bool_t (*)(HParticleCand*)' 0 - function", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUserSelectionHadrons",2400,G__ParticleDict_1042_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "1 - 'Bool_t (*)(HParticleCand*)' 0 - function", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUserkeepTrack",1669,G__ParticleDict_1042_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "1 - 'Bool_t (*)(HParticleCand*)' 0 - function", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1042_0_29, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleTree::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1042_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleTree::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1042_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleTree::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1042_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleTree::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1042_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1042_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleTree::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1042_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleTree::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1042_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleTree::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1042_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleTree::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HParticleTree", 1418, G__ParticleDict_1042_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleAngleCor(void) {
   /* HParticleAngleCor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleAngleCor));
   G__memfunc_setup("HParticleAngleCor",1671,G__ParticleDict_1078_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleAngleCor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initParam",933,G__ParticleDict_1078_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetMeanVertex",1570,G__ParticleDict_1078_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("recalcEmission",1457,G__ParticleDict_1078_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 0, 
"d - 'Double_t' 10 - z d - 'Double_t' 10 - rho "
"d - 'Double_t' 10 - theta d - 'Double_t' 10 - phi "
"d - 'Double_t' 1 - zCor d - 'Double_t' 1 - rhoCor "
"d - 'Double_t' 1 - thetaCor d - 'Double_t' 1 - phiCor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("recalcEmission",1457,G__ParticleDict_1078_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"U 'HParticleCand' - 10 - pCand d - 'Double_t' 1 - zCor "
"d - 'Double_t' 1 - rhoCor d - 'Double_t' 1 - thetaCor "
"d - 'Double_t' 1 - phiCor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("recalcAngles",1220,G__ParticleDict_1078_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'HParticleCand' - 10 - pCand d - 'Double_t' 1 - thetaCor "
"d - 'Double_t' 1 - phiCor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("recalcSetAngles",1520,G__ParticleDict_1078_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParticleCand' - 0 - pCand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("recalcSetEmission",1757,G__ParticleDict_1078_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParticleCand' - 0 - pCand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("alignRichRing",1313,G__ParticleDict_1078_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 4, 3, 1, 0, 
"d - 'Double_t' 10 - theta d - 'Double_t' 10 - phi "
"d - 'Double_t' 1 - thetaCor d - 'Double_t' 1 - phiCor", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const Double_t, const Double_t, Double_t&, Double_t&))(&HParticleAngleCor::alignRichRing) ), 0);
   G__memfunc_setup("alignRichRing",1313,G__ParticleDict_1078_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'HParticleCand' - 0 - pCand", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParticleCand*))(&HParticleAngleCor::alignRichRing) ), 0);
   G__memfunc_setup("realignRichRing",1528,G__ParticleDict_1078_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"U 'HParticleCand' - 10 - pCand d - 'Double_t' 1 - thetaCor "
"d - 'Double_t' 1 - phiCor", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const HParticleCand*, Double_t&, Double_t&))(&HParticleAngleCor::realignRichRing) ), 0);
   G__memfunc_setup("realignRichRing",1528,G__ParticleDict_1078_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'HParticleCand' - 0 - pCand", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParticleCand*))(&HParticleAngleCor::realignRichRing) ), 0);
   G__memfunc_setup("matchRingTrack",1426,G__ParticleDict_1078_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "U 'HParticleCand' - 0 - cand", (char*)NULL, (void*) G__func2void( (Float_t (*)(HParticleCand*))(&HParticleAngleCor::matchRingTrack) ), 0);
   G__memfunc_setup("calcSegVector",1317,G__ParticleDict_1078_0_14, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 10 - z d - 'Double_t' 10 - rho "
"d - 'Double_t' 10 - phi d - 'Double_t' 10 - theta "
"u 'HGeomVector' - 1 - base u 'HGeomVector' - 1 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMeanZTarget",1422,G__ParticleDict_1078_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - zValue", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShield",933,G__ParticleDict_1078_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 - shieldFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefaults",1156,G__ParticleDict_1078_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 10 - beamtime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxAverage",1325,G__ParticleDict_1078_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseMeanXYVertex",1833,G__ParticleDict_1078_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseEventXYVertex",1962,G__ParticleDict_1078_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoWarning",1237,G__ParticleDict_1078_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - warn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanXYVertex",1520,G__ParticleDict_1078_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 1 - xValue f - 'Float_t' 1 - yValue", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanZTarget",1410,G__ParticleDict_1078_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "center of segmented target", (void*) NULL, 0);
   G__memfunc_setup("setVertexType",1388,G__ParticleDict_1078_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 'Particle::kVertexSegment' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVertexType",1376,G__ParticleDict_1078_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGlobalVertex",1551,G__ParticleDict_1078_0_26, 117, G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 'Particle::kVertexParticle' v g - 'Bool_t' 0 'kFALSE' warn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1078_0_27, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleAngleCor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1078_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleAngleCor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1078_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleAngleCor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1078_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleAngleCor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1078_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1078_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleAngleCor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1078_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleAngleCor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1078_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleAngleCor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1078_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleAngleCor::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleAngleCor", 1671, G__ParticleDict_1078_0_39, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleAngleCor), -1, 0, 1, 1, 1, 0, "u 'HParticleAngleCor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleAngleCor", 1797, G__ParticleDict_1078_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1078_0_41, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleAngleCor), -1, 1, 1, 1, 1, 0, "u 'HParticleAngleCor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleGeantDecay(void) {
   /* HParticleGeantDecay */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay));
   G__memfunc_setup("compareTrackNr",1436,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 4, 0, 
"U 'HGeantKine' - 0 - kine1 U 'HGeantKine' - 0 - kine2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleGeantDecay",1873,G__ParticleDict_1080_0_2, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMotherID",1084,G__ParticleDict_1080_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMother",943,G__ParticleDict_1080_0_4, 85, G__get_linked_tagnum(&G__ParticleDictLN_HGeantKine), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDaughters",1255,G__ParticleDict_1080_0_5, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR), G__defined_typename("vector<HGeantKine*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDaughters",1333,G__ParticleDict_1080_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDaughter",1140,G__ParticleDict_1080_0_7, 85, G__get_linked_tagnum(&G__ParticleDictLN_HGeantKine), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isDaughterPID",1261,G__ParticleDict_1080_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isDaughterPID",1261,G__ParticleDict_1080_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - pids", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDecayVertex",1444,G__ParticleDict_1080_0_10, 117, G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMedium",929,G__ParticleDict_1080_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMechanism",1237,G__ParticleDict_1080_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeneration",1356,G__ParticleDict_1080_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMotherDecay",1429,G__ParticleDict_1080_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeneratorInfo",1651,G__ParticleDict_1080_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeneratorInfo1",1700,G__ParticleDict_1080_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeneratorInfo2",1701,G__ParticleDict_1080_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeneration",1368,G__ParticleDict_1080_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - gen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDecayVertex",1456,G__ParticleDict_1080_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDecayVertex",1456,G__ParticleDict_1080_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 1 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMotherDecay",1441,G__ParticleDict_1080_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParticleGeantDecay' - 0 - mdecay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMother",955,G__ParticleDict_1080_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeantKine' - 0 - mother", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addDaughter",1117,G__ParticleDict_1080_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeantKine' - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDaughters",1267,G__ParticleDict_1080_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<HGeantKine*,allocator<HGeantKine*> >' 'vector<HGeantKine*>' 1 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortDaughters",1391,G__ParticleDict_1080_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistFromVertex",1766,G__ParticleDict_1080_0_26, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "U 'HGeomVector' - 0 '0' primVer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isExternalSource",1680,G__ParticleDict_1080_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__ParticleDict_1080_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isDaughter",1040,G__ParticleDict_1080_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeantKine' - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isDaughter",1040,G__ParticleDict_1080_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'vector<HGeantKine*,allocator<HGeantKine*> >' 'vector<HGeantKine*>' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1080_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1080_0_32, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleGeantDecay::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1080_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleGeantDecay::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1080_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleGeantDecay::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1080_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleGeantDecay::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1080_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1080_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleGeantDecay::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1080_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleGeantDecay::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1080_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleGeantDecay::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1080_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleGeantDecay::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleGeantDecay", 1873, G__ParticleDict_1080_0_44, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay), -1, 0, 1, 1, 1, 0, "u 'HParticleGeantDecay' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleGeantDecay", 1999, G__ParticleDict_1080_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1080_0_46, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay), -1, 1, 1, 1, 1, 0, "u 'HParticleGeantDecay' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleGeant(void) {
   /* HParticleGeant */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeant));
   G__memfunc_setup("HParticleGeant",1387,G__ParticleDict_1081_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeant), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParticle",1152,G__ParticleDict_1081_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeantKine' - 0 - part", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParticle",1140,G__ParticleDict_1081_0_3, 85, G__get_linked_tagnum(&G__ParticleDictLN_HGeantKine), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMother",943,G__ParticleDict_1081_0_4, 85, G__get_linked_tagnum(&G__ParticleDictLN_HGeantKine), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMother",955,G__ParticleDict_1081_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeantKine' - 0 - moth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getID",461,G__ParticleDict_1081_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDecayVertex",1444,G__ParticleDict_1081_0_7, 117, G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMedium",929,G__ParticleDict_1081_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMechanism",1237,G__ParticleDict_1081_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeneration",1356,G__ParticleDict_1081_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMotherDecay",1429,G__ParticleDict_1081_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeneration",1368,G__ParticleDict_1081_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - gen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDecayVertex",1456,G__ParticleDict_1081_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDecayVertex",1456,G__ParticleDict_1081_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 1 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMotherDecay",1441,G__ParticleDict_1081_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParticleGeantDecay' - 0 - mdecay", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistFromVertex",1766,G__ParticleDict_1081_0_16, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "U 'HGeomVector' - 0 '0' primVer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRecoCand",1087,G__ParticleDict_1081_0_17, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgR), G__defined_typename("vector<HParticleCandSim*>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRecoCand",1087,G__ParticleDict_1081_0_18, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addRecoCand",1064,G__ParticleDict_1081_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParticleCandSim' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNRecoCand",1165,G__ParticleDict_1081_0_20, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNRecoUsedCand",1566,G__ParticleDict_1081_0_21, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNGhosts",1030,G__ParticleDict_1081_0_22, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' isUsed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTrueReco",1207,G__ParticleDict_1081_0_23, 104, -1, G__defined_typename("UInt_t"), 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 'kTRUE' isUsed h - 'UInt_t' 0 'kIsInInnerMDC|kIsInOuterMDC|kIsInMETA' detbits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInAcceptance",1402,G__ParticleDict_1081_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1081_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__ParticleDict_1081_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1081_0_27, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleGeant::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1081_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleGeant::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1081_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleGeant::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1081_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleGeant::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1081_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1081_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleGeant::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1081_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleGeant::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1081_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleGeant::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1081_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleGeant::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleGeant", 1387, G__ParticleDict_1081_0_39, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeant), -1, 0, 1, 1, 1, 0, "u 'HParticleGeant' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleGeant", 1513, G__ParticleDict_1081_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1081_0_41, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeant), -1, 1, 1, 1, 1, 0, "u 'HParticleGeant' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleGeantEvent(void) {
   /* HParticleGeantEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantEvent));
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleGeantEvent",1901,G__ParticleDict_1086_0_2, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setConvertExtThermal",2091,G__ParticleDict_1086_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - convert", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCorrectGenInfo",1732,G__ParticleDict_1086_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - cor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExternalParticles",2090,G__ParticleDict_1086_0_5, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR), G__defined_typename("vector<HGeantKine*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventVertex",1472,G__ParticleDict_1086_0_6, 117, G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDecays",921,G__ParticleDict_1086_0_7, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleGeantDecaymUcOallocatorlEHParticleGeantDecaymUgRsPgR), G__defined_typename("vector<HParticleGeantDecay*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParticles",1255,G__ParticleDict_1086_0_8, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleGeantmUcOallocatorlEHParticleGeantmUgRsPgR), G__defined_typename("vector<HParticleGeant*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBeamEnergy",1311,G__ParticleDict_1086_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventPlane",1330,G__ParticleDict_1086_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImpactParam",1423,G__ParticleDict_1086_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextEvent",961,G__ParticleDict_1086_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isMotherOfDecay",1510,G__ParticleDict_1086_0_13, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isMotherOfDecay",1510,G__ParticleDict_1086_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay), -1, 0, 1, 1, 1, 0, "U 'HGeantKine' - 0 - moth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isDaughterOfDecay",1707,G__ParticleDict_1086_0_15, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay), -1, 0, 1, 1, 1, 0, "U 'HGeantKine' - 0 - daughter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isDaughterOfDecay",1707,G__ParticleDict_1086_0_16, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isDecay",706,G__ParticleDict_1086_0_17, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"u 'vector<HParticleGeantDecay*,allocator<HParticleGeantDecay*> >' 'vector<HParticleGeantDecay*>' 1 - decays i - 'Int_t' 0 '-2' motherid "
"i - 'Int_t' 0 '-2' generation i - 'Int_t' 0 '-2' med "
"f - 'Float_t' 0 '0' dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isParticle",1040,G__ParticleDict_1086_0_18, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 1, 0, 
"u 'vector<HGeantKine*,allocator<HGeantKine*> >' 'vector<HGeantKine*>' 1 - particles i - 'Int_t' 0 '-2' id "
"i - 'Int_t' 0 '-2' motherid i - 'Int_t' 0 '-2' generation "
"i - 'Int_t' 0 '-2' med f - 'Float_t' 0 '0' dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isParticle",1040,G__ParticleDict_1086_0_19, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 1, 0, 
"u 'vector<HParticleGeant*,allocator<HParticleGeant*> >' 'vector<HParticleGeant*>' 1 - particles i - 'Int_t' 0 '-2' id "
"i - 'Int_t' 0 '-2' motherid i - 'Int_t' 0 '-2' generation "
"i - 'Int_t' 0 '-2' med f - 'Float_t' 0 '0' dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParticle",1140,G__ParticleDict_1086_0_20, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeant), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParticle",1140,G__ParticleDict_1086_0_21, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeant), -1, 0, 1, 1, 1, 0, "U 'HGeantKine' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKine",711,G__ParticleDict_1086_0_22, 85, G__get_linked_tagnum(&G__ParticleDictLN_HGeantKine), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMultiplicity",1609,G__ParticleDict_1086_0_23, 104, -1, G__defined_typename("UInt_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 '-10' id i - 'Int_t' 0 '0' generation "
"i - 'Int_t' 0 '0' charge h - 'UInt_t' 0 '1' type "
"h - 'UInt_t' 0 'kIsInInnerMDC|kIsInOuterMDC|kIsInMETA' detbits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1086_0_24, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleGeantEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1086_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleGeantEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1086_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleGeantEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1086_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleGeantEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1086_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1086_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleGeantEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1086_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleGeantEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1086_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleGeantEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1086_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleGeantEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleGeantEvent", 1901, G__ParticleDict_1086_0_36, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantEvent), -1, 0, 1, 1, 1, 0, "u 'HParticleGeantEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleGeantEvent", 2027, G__ParticleDict_1086_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1086_0_38, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantEvent), -1, 1, 1, 1, 1, 0, "u 'HParticleGeantEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleGeantPair(void) {
   /* HParticleGeantPair */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantPair));
   G__memfunc_setup("calcVertex",1041,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleGeantPair",1783,G__ParticleDict_1111_0_2, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantPair), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCand",694,G__ParticleDict_1111_0_3, 85, G__get_linked_tagnum(&G__ParticleDictLN_HGeantKine), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMother",943,G__ParticleDict_1111_0_4, 85, G__get_linked_tagnum(&G__ParticleDictLN_HGeantKine), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOpeningAngle",1527,G__ParticleDict_1111_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__ParticleDict_1111_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__ParticleDict_1111_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandVect",1096,G__ParticleDict_1111_0_8, 117, G__get_linked_tagnum(&G__ParticleDictLN_TLorentzVector), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandPID",915,G__ParticleDict_1111_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMotherPID",1164,G__ParticleDict_1111_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVerMinDistCand",1691,G__ParticleDict_1111_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVerMinDistMother",1940,G__ParticleDict_1111_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinDistCandidates",2024,G__ParticleDict_1111_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVerDistMother",1648,G__ParticleDict_1111_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventVertex",1472,G__ParticleDict_1111_0_15, 117, G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDecayVertex",1444,G__ParticleDict_1111_0_16, 117, G__get_linked_tagnum(&G__ParticleDictLN_HGeomVector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isFakePair",991,G__ParticleDict_1111_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTruePair",1032,G__ParticleDict_1111_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInAcceptance",1402,G__ParticleDict_1111_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1111_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '31' selection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__ParticleDict_1111_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatusFlags",1457,G__ParticleDict_1111_0_22, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkStatus",1154,G__ParticleDict_1111_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcVectors",1145,G__ParticleDict_1111_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - pid1 i - 'Int_t' 0 - pid2 "
"i - 'Int_t' 0 - motherpid u 'HGeomVector' - 1 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPair",728,G__ParticleDict_1111_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"U 'HGeantKine' - 0 - cnd1 i - 'Int_t' 0 - pid1 "
"U 'HGeantKine' - 0 - cnd2 i - 'Int_t' 0 - pid2 "
"U 'HGeantKine' - 0 - mother i - 'Int_t' 0 - motherpid "
"u 'HGeomVector' - 1 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPair",728,G__ParticleDict_1111_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"U 'HGeantKine' - 0 - cnd1 U 'HGeantKine' - 0 - cnd2 "
"U 'HGeantKine' - 0 - mother i - 'Int_t' 0 - motherpid "
"u 'HGeomVector' - 1 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAcceptanceCheck",1809,G__ParticleDict_1111_0_27, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - doit", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticleGeantPair::setAcceptanceCheck) ), 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1111_0_28, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleGeantPair::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1111_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleGeantPair::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1111_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleGeantPair::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1111_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleGeantPair::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1111_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1111_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleGeantPair::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1111_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleGeantPair::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1111_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleGeantPair::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1111_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleGeantPair::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleGeantPair", 1783, G__ParticleDict_1111_0_40, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantPair), -1, 0, 1, 1, 1, 0, "u 'HParticleGeantPair' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleGeantPair", 1909, G__ParticleDict_1111_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1111_0_42, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantPair), -1, 1, 1, 1, 1, 0, "u 'HParticleGeantPair' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleDraw(void) {
   /* HParticleDraw */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleDraw));
   G__memfunc_setup("HParticleDraw",1290,G__ParticleDict_1123_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleDraw), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawParticle",1250,G__ParticleDict_1123_0_2, 121, -1, -1, 0, 7, 1, 1, 0, 
"d - 'Double_t' 0 - xoff d - 'Double_t' 0 - yoff "
"d - 'Double_t' 0 - scx d - 'Double_t' 0 - scy "
"h - 'UInt_t' 0 - flag u 'TString' - 0 - nameCase "
"u 'TString' - 0 '\"\"' cuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawParticleNDC",1463,G__ParticleDict_1123_0_3, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - xoffNDC d - 'Double_t' 0 - yoffNDC "
"d - 'Double_t' 0 - heighNDC h - 'UInt_t' 0 - flag "
"u 'TString' - 0 - nameCase u 'TString' - 0 '\"\"' cuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1123_0_4, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleDraw::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1123_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleDraw::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1123_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleDraw::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1123_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleDraw::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1123_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1123_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleDraw::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1123_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleDraw::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1123_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleDraw::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1123_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleDraw::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleDraw", 1290, G__ParticleDict_1123_0_16, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleDraw), -1, 0, 1, 1, 1, 0, "u 'HParticleDraw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleDraw", 1416, G__ParticleDict_1123_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1123_0_18, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleDraw), -1, 1, 1, 1, 1, 0, "u 'HParticleDraw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticlePairDraw(void) {
   /* HParticlePairDraw */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairDraw));
   G__memfunc_setup("HParticlePairDraw",1686,G__ParticleDict_1124_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairDraw), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawPair",826,G__ParticleDict_1124_0_2, 121, -1, -1, 0, 7, 1, 1, 0, 
"d - 'Double_t' 0 - xoff d - 'Double_t' 0 - yoff "
"d - 'Double_t' 0 - scx d - 'Double_t' 0 - scy "
"h - 'UInt_t' 0 - flag u 'TString' - 0 - nameCase "
"u 'TString' - 0 '\"\"' cuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawPairNDC",1039,G__ParticleDict_1124_0_3, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - xoffNDC d - 'Double_t' 0 - yoffNDC "
"d - 'Double_t' 0 - heighNDC h - 'UInt_t' 0 - flag "
"u 'TString' - 0 - nameCase u 'TString' - 0 '\"\"' cuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawPairCases",1321,G__ParticleDict_1124_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1124_0_5, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticlePairDraw::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1124_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticlePairDraw::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1124_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticlePairDraw::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1124_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticlePairDraw::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1124_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1124_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticlePairDraw::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1124_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticlePairDraw::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1124_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticlePairDraw::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1124_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticlePairDraw::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticlePairDraw", 1686, G__ParticleDict_1124_0_17, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairDraw), -1, 0, 1, 1, 1, 0, "u 'HParticlePairDraw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticlePairDraw", 1812, G__ParticleDict_1124_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1124_0_19, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairDraw), -1, 1, 1, 1, 1, 0, "u 'HParticlePairDraw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticlePairMaker(void) {
   /* HParticlePairMaker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairMaker));
   G__memfunc_setup("clearVectors",1261,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("bookHits",835,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HParticleCand' - 0 - cand1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectPID",861,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"U 'HParticleCand' - 0 - cand1 i - 'Int_t' 1 - pid1 "
"g - 'Bool_t' 0 'kTRUE' warn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticlePairMaker",1784,G__ParticleDict_1125_0_4, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairMaker), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPIDs",668,G__ParticleDict_1125_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - pid1 i - 'Int_t' 0 - pid2 "
"i - 'Int_t' 0 - motherpid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPIDsSelection",1602,G__ParticleDict_1125_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"1 - 'Bool_t (*)(HParticleCand*)' 0 - selPID1 1 - 'Bool_t (*)(HParticleCand*)' 0 - selPID2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUserFilter",1361,G__ParticleDict_1125_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "1 - 'Bool_t (*)(HParticleCand*)' 0 - userfilter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoSkippedFullCandPairs",2519,G__ParticleDict_1125_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - doit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseLeptons",1374,G__ParticleDict_1125_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRequireRich",1455,G__ParticleDict_1125_0_10, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticlePairMaker::setRequireRich) ), 0);
   G__memfunc_setup("getRequireRich",1443,G__ParticleDict_1125_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Bool_t (*)())(&HParticlePairMaker::getRequireRich) ), 0);
   G__memfunc_setup("setVertexCase",1350,G__ParticleDict_1125_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i 'Particle::eVertex' - 0 - vertexCase", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVertex",970,G__ParticleDict_1125_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVertex",970,G__ParticleDict_1125_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HVertex' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectPos",946,G__ParticleDict_1125_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'HParticleCand' - 0 - -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParticleCand*))(&HParticlePairMaker::selectPos) ), 0);
   G__memfunc_setup("selectNeg",922,G__ParticleDict_1125_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'HParticleCand' - 0 - -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(HParticleCand*))(&HParticlePairMaker::selectNeg) ), 0);
   G__memfunc_setup("nextEvent",961,G__ParticleDict_1125_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getReferenceVector",1858,G__ParticleDict_1125_0_18, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgR), G__defined_typename("vector<HParticleCand*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOthersVector",1576,G__ParticleDict_1125_0_19, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgR), G__defined_typename("vector<HParticleCand*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPairsVector",1458,G__ParticleDict_1125_0_20, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHParticlePaircOallocatorlEHParticlePairgRsPgR), G__defined_typename("vector<HParticlePair>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("filterPairsVector",1784,G__ParticleDict_1125_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<HParticlePair*,allocator<HParticlePair*> >' 'vector<HParticlePair*>' 1 - filterpairs h - 'UInt_t' 0 '0' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("filterPairsVector",1784,G__ParticleDict_1125_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<HParticlePair*,allocator<HParticlePair*> >' 'vector<HParticlePair*>' 1 - filterpairs u 'vector<unsigned int,allocator<unsigned int> >' 'vector<UInt_t>' 1 - flags", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("filterCandidates",1654,G__ParticleDict_1125_0_23, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'HParticleCand' - 0 - cand u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - candidates "
"h - 'UInt_t' 0 '0' flag f - 'Float_t' 0 '-1' oAngle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("filterCandidates",1654,G__ParticleDict_1125_0_24, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'HParticleCand' - 0 - cand u 'vector<HParticlePair*,allocator<HParticlePair*> >' 'vector<HParticlePair*>' 1 - filterpairs "
"h - 'UInt_t' 0 '0' flag f - 'Float_t' 0 '-1' oAngle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSameRich",1100,G__ParticleDict_1125_0_25, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'HParticleCand' - 0 - cand u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - candidates "
"h - 'UInt_t' 0 '0' flag g - 'Bool_t' 0 'kTRUE' isReference", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSameInnerMdc",1494,G__ParticleDict_1125_0_26, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'HParticleCand' - 0 - cand u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - candidates "
"h - 'UInt_t' 0 '0' flag g - 'Bool_t' 0 'kTRUE' isReference", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSameOuterMdc",1513,G__ParticleDict_1125_0_27, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'HParticleCand' - 0 - cand u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - candidates "
"h - 'UInt_t' 0 '0' flag g - 'Bool_t' 0 'kTRUE' isReference", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSameMeta",1101,G__ParticleDict_1125_0_28, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'HParticleCand' - 0 - cand u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - candidates "
"h - 'UInt_t' 0 '0' flag g - 'Bool_t' 0 'kTRUE' isReference", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plotPairCaseStat",1635,G__ParticleDict_1125_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1125_0_30, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticlePairMaker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1125_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticlePairMaker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1125_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticlePairMaker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1125_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticlePairMaker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1125_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1125_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticlePairMaker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1125_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticlePairMaker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1125_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticlePairMaker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1125_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticlePairMaker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticlePairMaker", 1784, G__ParticleDict_1125_0_42, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairMaker), -1, 0, 1, 1, 1, 0, "u 'HParticlePairMaker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticlePairMaker", 1910, G__ParticleDict_1125_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1125_0_44, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticlePairMaker), -1, 1, 1, 1, 1, 0, "u 'HParticlePairMaker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleBooker(void) {
   /* HParticleBooker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBooker));
   G__memfunc_setup("bookHits",835,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HParticleCand' - 0 - cand1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleBooker",1502,G__ParticleDict_1150_0_2, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleBooker), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextEvent",961,G__ParticleDict_1150_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHitIndices",1613,G__ParticleDict_1150_0_4, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofClstIndices",1726,G__ParticleDict_1150_0_5, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcClstIndices",1722,G__ParticleDict_1150_0_6, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerIndices",1655,G__ParticleDict_1150_0_7, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInnerMdcIndices",1807,G__ParticleDict_1150_0_8, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOuterMdcIndices",1826,G__ParticleDict_1150_0_9, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichIndices",1413,G__ParticleDict_1150_0_10, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHitMap",1196,G__ParticleDict_1150_0_11, 117, G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR), G__defined_typename("map<Int_t,vector<HParticleCand*> >"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofClstMap",1309,G__ParticleDict_1150_0_12, 117, G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR), G__defined_typename("map<Int_t,vector<HParticleCand*> >"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcClstMap",1305,G__ParticleDict_1150_0_13, 117, G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR), G__defined_typename("map<Int_t,vector<HParticleCand*> >"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerHitMap",1531,G__ParticleDict_1150_0_14, 117, G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR), G__defined_typename("map<Int_t,vector<HParticleCand*> >"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInnerMdcMap",1390,G__ParticleDict_1150_0_15, 117, G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR), G__defined_typename("map<Int_t,vector<HParticleCand*> >"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOuterMdcMap",1409,G__ParticleDict_1150_0_16, 117, G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR), G__defined_typename("map<Int_t,vector<HParticleCand*> >"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichMap",996,G__ParticleDict_1150_0_17, 117, G__get_linked_tagnum(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR), G__defined_typename("map<Int_t,vector<HParticleCand*> >"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandidatesForTofHit",2213,G__ParticleDict_1150_0_18, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - index u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandidatesForTofCluster",2658,G__ParticleDict_1150_0_19, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - index u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandidatesForRpcCluster",2654,G__ParticleDict_1150_0_20, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - index u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandidatesForShower",2255,G__ParticleDict_1150_0_21, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - index u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandidatesForInnerMdc",2407,G__ParticleDict_1150_0_22, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - index u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandidatesForOuterMdc",2426,G__ParticleDict_1150_0_23, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - index u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandidatesForRich",2013,G__ParticleDict_1150_0_24, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - index u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandidatesAnyDetectorForTrack",3246,G__ParticleDict_1150_0_25, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<HParticleCandSim*,allocator<HParticleCandSim*> >' 'vector<HParticleCandSim*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandidatesForTrack",2124,G__ParticleDict_1150_0_26, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<HParticleCandSim*,allocator<HParticleCandSim*> >' 'vector<HParticleCandSim*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHitForTrack",1706,G__ParticleDict_1150_0_27, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<HTofHitSim*,allocator<HTofHitSim*> >' 'vector<HTofHitSim*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofClusterForTrack",2151,G__ParticleDict_1150_0_28, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<HTofClusterSim*,allocator<HTofClusterSim*> >' 'vector<HTofClusterSim*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcClusterForTrack",2147,G__ParticleDict_1150_0_29, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<HRpcClusterSim*,allocator<HRpcClusterSim*> >' 'vector<HRpcClusterSim*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerHitForTrack",2041,G__ParticleDict_1150_0_30, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<HShowerHitSim*,allocator<HShowerHitSim*> >' 'vector<HShowerHitSim*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInnerMdcSegForTrack",2187,G__ParticleDict_1150_0_31, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<HMdcSegSim*,allocator<HMdcSegSim*> >' 'vector<HMdcSegSim*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOuterMdcSegForTrack",2206,G__ParticleDict_1150_0_32, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<HMdcSegSim*,allocator<HMdcSegSim*> >' 'vector<HMdcSegSim*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichHitForTrack",1799,G__ParticleDict_1150_0_33, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<HRichHitSim*,allocator<HRichHitSim*> >' 'vector<HRichHitSim*>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandidatesIndAnyDetectorForTrack",3529,G__ParticleDict_1150_0_34, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCandidatesIndForTrack",2407,G__ParticleDict_1150_0_35, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHitIndForTrack",1989,G__ParticleDict_1150_0_36, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofClusterIndForTrack",2434,G__ParticleDict_1150_0_37, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcClusterIndForTrack",2430,G__ParticleDict_1150_0_38, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerHitIndForTrack",2324,G__ParticleDict_1150_0_39, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInnerMdcSegIndForTrack",2470,G__ParticleDict_1150_0_40, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOuterMdcSegIndForTrack",2489,G__ParticleDict_1150_0_41, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichHitIndForTrack",2082,G__ParticleDict_1150_0_42, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - track u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - cands", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofHits",1025,G__ParticleDict_1150_0_43, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgR), G__defined_typename("vector<HTofHit*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofClusters",1470,G__ParticleDict_1150_0_44, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgR), G__defined_typename("vector<HTofCluster*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcClusters",1466,G__ParticleDict_1150_0_45, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgR), G__defined_typename("vector<HRpcCluster*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerHits",1360,G__ParticleDict_1150_0_46, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgR), G__defined_typename("vector<HShowerHit*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInnerMdcSegs",1506,G__ParticleDict_1150_0_47, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgR), G__defined_typename("vector<HMdcSeg*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOuterMdcSegs",1525,G__ParticleDict_1150_0_48, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgR), G__defined_typename("vector<HMdcSeg*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichHits",1118,G__ParticleDict_1150_0_49, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgR), G__defined_typename("vector<HRichHit*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAllTofHits",1306,G__ParticleDict_1150_0_50, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgR), G__defined_typename("vector<HTofHit*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAllTofClusters",1751,G__ParticleDict_1150_0_51, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgR), G__defined_typename("vector<HTofCluster*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAllRpcClusters",1747,G__ParticleDict_1150_0_52, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgR), G__defined_typename("vector<HRpcCluster*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAllShowerHits",1641,G__ParticleDict_1150_0_53, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgR), G__defined_typename("vector<HShowerHit*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAllInnerMdcSegs",1787,G__ParticleDict_1150_0_54, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgR), G__defined_typename("vector<HMdcSeg*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAllOuterMdcSegs",1806,G__ParticleDict_1150_0_55, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgR), G__defined_typename("vector<HMdcSeg*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAllRichHits",1399,G__ParticleDict_1150_0_56, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgR), G__defined_typename("vector<HRichHit*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSameRich",1100,G__ParticleDict_1150_0_57, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'HParticleCand' - 0 - cand u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - candidates "
"h - 'UInt_t' 0 '0' flag g - 'Bool_t' 0 'kTRUE' isReference", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSameInnerMdc",1494,G__ParticleDict_1150_0_58, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'HParticleCand' - 0 - cand u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - candidates "
"h - 'UInt_t' 0 '0' flag g - 'Bool_t' 0 'kTRUE' isReference", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSameOuterMdc",1513,G__ParticleDict_1150_0_59, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'HParticleCand' - 0 - cand u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - candidates "
"h - 'UInt_t' 0 '0' flag g - 'Bool_t' 0 'kTRUE' isReference", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSameMeta",1101,G__ParticleDict_1150_0_60, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'HParticleCand' - 0 - cand u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - candidates "
"h - 'UInt_t' 0 '0' flag g - 'Bool_t' 0 'kTRUE' isReference", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSameAny",1006,G__ParticleDict_1150_0_61, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"U 'HParticleCand' - 0 - cand u 'vector<HParticleCand*,allocator<HParticleCand*> >' 'vector<HParticleCand*>' 1 - candidates "
"h - 'UInt_t' 0 '0' flag h - 'UInt_t' 0 '0' detswitch "
"g - 'Bool_t' 0 'kTRUE' isReference", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1150_0_62, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleBooker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1150_0_63, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBooker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1150_0_64, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleBooker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1150_0_65, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleBooker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1150_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1150_0_70, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBooker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1150_0_71, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBooker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1150_0_72, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBooker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1150_0_73, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBooker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleBooker", 1502, G__ParticleDict_1150_0_74, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleBooker), -1, 0, 1, 1, 1, 0, "u 'HParticleBooker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleBooker", 1628, G__ParticleDict_1150_0_75, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1150_0_76, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleBooker), -1, 1, 1, 1, 1, 0, "u 'HParticleBooker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleVertexFind(void) {
   /* HParticleVertexFind */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleVertexFind));
   G__memfunc_setup("HParticleVertexFind",1915,G__ParticleDict_1258_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleVertexFind), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 '\"\"' name C - 'Text_t' 10 '\"\"' title "
"g - 'Bool_t' 0 'kTRUE' tukey", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setCut",632,G__ParticleDict_1258_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 '-100' minz d - 'Double_t' 0 '50' maxz "
"d - 'Double_t' 0 '50' maxr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("useTukeyWeights",1594,G__ParticleDict_1258_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTukeyConstant",1704,G__ParticleDict_1258_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxIterations",1684,G__ParticleDict_1258_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEpsilon",1062,G__ParticleDict_1258_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMomChi2Cut",1255,G__ParticleDict_1258_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSeg0Chi2Cut",1293,G__ParticleDict_1258_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinReqTracks",1536,G__ParticleDict_1258_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinWindow",1256,G__ParticleDict_1258_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - wind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setProgessiveTukey",1925,G__ParticleDict_1258_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - prog", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCallExecuteManual",2041,G__ParticleDict_1258_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - call", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTukeyConstant",1692,G__ParticleDict_1258_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxIterations",1672,G__ParticleDict_1258_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEpsilon",1050,G__ParticleDict_1258_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMomChi2Cut",1243,G__ParticleDict_1258_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSeg0Chi2Cut",1281,G__ParticleDict_1258_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinReqTracks",1524,G__ParticleDict_1258_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinWindow",1244,G__ParticleDict_1258_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getProgessiveTukey",1913,G__ParticleDict_1258_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doFit",502,G__ParticleDict_1258_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSkipFakes",1229,G__ParticleDict_1258_0_25, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - skip", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HParticleVertexFind::setSkipFakes) ), 0);
   G__memfunc_setup("initVars",848,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pointsToTarget",1479,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 2, 0, 
"u 'HGeomVector' - 11 - r u 'HGeomVector' - 1 - alpha "
"i - 'Int_t' 0 - sector i - 'Int_t' 0 - module "
"d - 'Double_t' 0 - zmin d - 'Double_t' 0 - zmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readInput",940,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "u 'HGeomVector' - 1 - estimate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"U 'HParticleCand' - 0 - data u 'HGeomVector' - 1 - r "
"u 'HGeomVector' - 1 - alpha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasConverged",1241,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"u 'HGeomVector' - 1 - v u 'HGeomVector' - 1 - oldV", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1258_0_31, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleVertexFind::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1258_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleVertexFind::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1258_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleVertexFind::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1258_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleVertexFind::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1258_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1258_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleVertexFind::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1258_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleVertexFind::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1258_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleVertexFind::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1258_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleVertexFind::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HParticleVertexFind", 2041, G__ParticleDict_1258_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCutRange(void) {
   /* HParticleCutRange */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutRange));
   G__memfunc_setup("HParticleCutRange",1685,G__ParticleDict_1272_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutRange), -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 '\"cut\"' name i - 'Int_t' 0 '-1' num "
"d - 'Double_t' 0 '-1e30' l d - 'Double_t' 0 '1e30' u", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCut",926,G__ParticleDict_1272_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '4' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInverse",1064,G__ParticleDict_1272_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - inv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__ParticleDict_1272_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '-1e30' l d - 'Double_t' 0 '1e30' u", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTF1",535,G__ParticleDict_1272_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TF1' - 0 - flow U 'TF1' - 0 '0' fup "
"u 'TString' - 0 '\"low+up\"' mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTF1Low",829,G__ParticleDict_1272_0_6, 85, G__get_linked_tagnum(&G__ParticleDictLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTF1Up",720,G__ParticleDict_1272_0_7, 85, G__get_linked_tagnum(&G__ParticleDictLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTCutG",775,G__ParticleDict_1272_0_8, 85, G__get_linked_tagnum(&G__ParticleDictLN_TCutG), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutRate",1016,G__ParticleDict_1272_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCall",778,G__ParticleDict_1272_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFail",778,G__ParticleDict_1272_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxVersion",1356,G__ParticleDict_1272_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutNumber",1237,G__ParticleDict_1272_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLowCut",926,G__ParticleDict_1272_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUpCut",817,G__ParticleDict_1272_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eval",424,G__ParticleDict_1272_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - var h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("evalG",495,G__ParticleDict_1272_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - var d - 'Double_t' 0 - var2 "
"h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("evalF",494,G__ParticleDict_1272_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - var d - 'Double_t' 0 - var2 "
"h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1272_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounter",1283,G__ParticleDict_1272_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1272_0_21, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCutRange::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1272_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCutRange::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1272_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCutRange::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1272_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCutRange::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1272_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1272_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCutRange::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1272_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCutRange::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1272_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCutRange::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1272_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCutRange::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCutRange", 1685, G__ParticleDict_1272_0_33, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutRange), -1, 0, 1, 1, 1, 0, "u 'HParticleCutRange' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCutRange", 1811, G__ParticleDict_1272_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1272_0_35, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutRange), -1, 1, 1, 1, 1, 0, "u 'HParticleCutRange' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleBtPar(void) {
   /* HParticleBtPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar));
   G__memfunc_setup("HParticleBtPar",1365,G__ParticleDict_1273_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"ParticleBtPar\"' name C - 'Char_t' 10 '\"Parameters for particle back tracking to RICH\"' title "
"C - 'Char_t' 10 '\"ParticleBtParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNRingSegments",1636,G__ParticleDict_1273_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNVertex",1036,G__ParticleDict_1273_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNParMean",1074,G__ParticleDict_1273_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNParSigma",1186,G__ParticleDict_1273_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChargeThres",1424,G__ParticleDict_1273_0_6, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChargeThresMax",1718,G__ParticleDict_1273_0_7, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNSigma",895,G__ParticleDict_1273_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximumType",1472,G__ParticleDict_1273_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSizeMatrix",1360,G__ParticleDict_1273_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingSegStep",1419,G__ParticleDict_1273_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingSegOffset",1622,G__ParticleDict_1273_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSharedChargeDiagonal",2304,G__ParticleDict_1273_0_13, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSharedChargeVertical",2331,G__ParticleDict_1273_0_14, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSharedChargeHorizontal",2571,G__ParticleDict_1273_0_15, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaGaus",1217,G__ParticleDict_1273_0_16, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaGausRange",1710,G__ParticleDict_1273_0_17, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParThetaAngleMin",1892,G__ParticleDict_1273_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParThetaAngleMax",1894,G__ParticleDict_1273_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaRange",1310,G__ParticleDict_1273_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaRangeSmall",1815,G__ParticleDict_1273_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaRangeMax",1604,G__ParticleDict_1273_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaRangePadError",2109,G__ParticleDict_1273_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiOffset",1224,G__ParticleDict_1273_0_24, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiOffset2",1274,G__ParticleDict_1273_0_25, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffsetPar",1226,G__ParticleDict_1273_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadWidthX",1197,G__ParticleDict_1273_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadWidthY",1198,G__ParticleDict_1273_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaAngleMin",1601,G__ParticleDict_1273_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaAngleMax",1603,G__ParticleDict_1273_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusMaximaLimit",1843,G__ParticleDict_1273_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusSizeLimit",1649,G__ParticleDict_1273_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVertexPosMin",1556,G__ParticleDict_1273_0_33, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVertexPosMax",1558,G__ParticleDict_1273_0_34, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVertexStep",1370,G__ParticleDict_1273_0_35, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNRichSeg",1075,G__ParticleDict_1273_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichSegBorderX",1691,G__ParticleDict_1273_0_37, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichSegBorderY",1692,G__ParticleDict_1273_0_38, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNeighbourPad",1528,G__ParticleDict_1273_0_39, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinimumSigmaValue",2058,G__ParticleDict_1273_0_40, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTF2ParMean",1200,G__ParticleDict_1273_0_41, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - ringSeg i - 'Int_t' 0 - vertex "
"i - 'Int_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTF2ParSigma",1312,G__ParticleDict_1273_0_42, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - ringSeg i - 'Int_t' 0 - vertex "
"i - 'Int_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBetaRPCLimit",1440,G__ParticleDict_1273_0_43, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBetaTOFLimit",1444,G__ParticleDict_1273_0_44, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMDCdEdxLimit",1432,G__ParticleDict_1273_0_45, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNRingSegments",1648,G__ParticleDict_1273_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNVertex",1048,G__ParticleDict_1273_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNParMean",1086,G__ParticleDict_1273_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNParSigma",1198,G__ParticleDict_1273_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChargeThres",1436,G__ParticleDict_1273_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChargeThresMax",1730,G__ParticleDict_1273_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNSigma",907,G__ParticleDict_1273_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaximumType",1484,G__ParticleDict_1273_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSizeMatrix",1372,G__ParticleDict_1273_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingSegStep",1431,G__ParticleDict_1273_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingSegOffset",1634,G__ParticleDict_1273_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSharedChargeDiagonal",2316,G__ParticleDict_1273_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSharedChargeVertical",2343,G__ParticleDict_1273_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSharedChargeHorizontal",2583,G__ParticleDict_1273_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaGaus",1229,G__ParticleDict_1273_0_60, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - val1 f - 'Float_t' 0 - val2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaGausRange",1722,G__ParticleDict_1273_0_61, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - val1 f - 'Float_t' 0 - val2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParThetaAngleMin",1904,G__ParticleDict_1273_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParThetaAngleMax",1906,G__ParticleDict_1273_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaRange",1322,G__ParticleDict_1273_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaRangeSmall",1827,G__ParticleDict_1273_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaRangeMax",1616,G__ParticleDict_1273_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaRangePadError",2121,G__ParticleDict_1273_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhiOffset",1236,G__ParticleDict_1273_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhiOffset2",1286,G__ParticleDict_1273_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffsetPar",1238,G__ParticleDict_1273_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadWidthX",1209,G__ParticleDict_1273_0_71, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadWidthY",1210,G__ParticleDict_1273_0_72, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThetaAngleMin",1613,G__ParticleDict_1273_0_73, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThetaAngleMax",1615,G__ParticleDict_1273_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusMaximaLimit",1855,G__ParticleDict_1273_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusSizeLimit",1661,G__ParticleDict_1273_0_76, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVertexPosMin",1568,G__ParticleDict_1273_0_77, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVertexPosMax",1570,G__ParticleDict_1273_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVertexStep",1382,G__ParticleDict_1273_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNRichSeg",1087,G__ParticleDict_1273_0_80, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichSegBorderX",1703,G__ParticleDict_1273_0_81, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichSegBorderY",1704,G__ParticleDict_1273_0_82, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNeighbourPad",1540,G__ParticleDict_1273_0_83, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - val i - 'Int_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinimumSigmaValue",2070,G__ParticleDict_1273_0_84, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTF2ParMean",1212,G__ParticleDict_1273_0_85, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ringSeg i - 'Int_t' 0 - vertex "
"i - 'Int_t' 0 - par d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTF2ParSigma",1324,G__ParticleDict_1273_0_86, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ringSeg i - 'Int_t' 0 - vertex "
"i - 'Int_t' 0 - par d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBetaRPCLimit",1452,G__ParticleDict_1273_0_87, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBetaTOFLimit",1456,G__ParticleDict_1273_0_88, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMDCdEdxLimit",1444,G__ParticleDict_1273_0_89, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ParticleDict_1273_0_93, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleBtPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1273_0_94, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1273_0_95, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleBtPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1273_0_96, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleBtPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1273_0_100, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1273_0_101, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1273_0_102, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBtPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1273_0_103, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1273_0_104, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBtPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleBtPar", 1365, G__ParticleDict_1273_0_105, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar), -1, 0, 1, 1, 1, 0, "u 'HParticleBtPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleBtPar", 1491, G__ParticleDict_1273_0_106, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1273_0_107, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtPar), -1, 1, 1, 1, 1, 0, "u 'HParticleBtPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleBtRingInfo(void) {
   /* HParticleBtRingInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingInfo));
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleBtRingInfo",1870,G__ParticleDict_1274_0_2, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPrediction",1373,G__ParticleDict_1274_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 2 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingMatrix",1361,G__ParticleDict_1274_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 2 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichHitAdd",1280,G__ParticleDict_1274_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichHitCharge",1601,G__ParticleDict_1274_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsInCluster",1441,G__ParticleDict_1274_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackTheta",1335,G__ParticleDict_1274_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackPhi",1122,G__ParticleDict_1274_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackVertex",1471,G__ParticleDict_1274_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackSec",1116,G__ParticleDict_1274_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackPCandIdx",1580,G__ParticleDict_1274_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsGoodTrack",1414,G__ParticleDict_1274_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPosXCenter",1335,G__ParticleDict_1274_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPosYCenter",1336,G__ParticleDict_1274_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusTrackNo",1429,G__ParticleDict_1274_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 2 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusIsGood",1320,G__ParticleDict_1274_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusPadSum",1325,G__ParticleDict_1274_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusPadRing",1416,G__ParticleDict_1274_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusChargeSum",1634,G__ParticleDict_1274_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusChargeRing",1725,G__ParticleDict_1274_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusPosX",1133,G__ParticleDict_1274_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusPosY",1134,G__ParticleDict_1274_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusClass",1241,G__ParticleDict_1274_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusNMaxima",1422,G__ParticleDict_1274_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 2 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusNMaximaPad",1699,G__ParticleDict_1274_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 3 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusNMaximaPosX",1816,G__ParticleDict_1274_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 3 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusNMaximaPosY",1817,G__ParticleDict_1274_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 3 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusChi2",1065,G__ParticleDict_1274_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 3 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusChi2XMM",1307,G__ParticleDict_1274_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 3 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusChi2YMM",1308,G__ParticleDict_1274_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 3 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusCircleX",1421,G__ParticleDict_1274_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 3 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusCircleY",1422,G__ParticleDict_1274_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 3 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusSig1X",1167,G__ParticleDict_1274_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 3 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusSig1Y",1168,G__ParticleDict_1274_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 3 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusSig2X",1168,G__ParticleDict_1274_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 3 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusSig2Y",1169,G__ParticleDict_1274_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 3 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPrediction",1361,G__ParticleDict_1274_0_38, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingMatrix",1349,G__ParticleDict_1274_0_39, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichHitAdd",1268,G__ParticleDict_1274_0_40, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichHitCharge",1589,G__ParticleDict_1274_0_41, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsInCluster",1429,G__ParticleDict_1274_0_42, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackTheta",1323,G__ParticleDict_1274_0_43, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackPhi",1110,G__ParticleDict_1274_0_44, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackVertex",1459,G__ParticleDict_1274_0_45, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackSec",1104,G__ParticleDict_1274_0_46, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackPCandIdx",1568,G__ParticleDict_1274_0_47, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsGoodTrack",1402,G__ParticleDict_1274_0_48, 71, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosXCenter",1323,G__ParticleDict_1274_0_49, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosYCenter",1324,G__ParticleDict_1274_0_50, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusTrackNo",1417,G__ParticleDict_1274_0_51, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusIsGood",1308,G__ParticleDict_1274_0_52, 71, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusPadSum",1313,G__ParticleDict_1274_0_53, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusPadRing",1404,G__ParticleDict_1274_0_54, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusChargeSum",1622,G__ParticleDict_1274_0_55, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusChargeRing",1713,G__ParticleDict_1274_0_56, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusPosX",1121,G__ParticleDict_1274_0_57, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusPosY",1122,G__ParticleDict_1274_0_58, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusClass",1229,G__ParticleDict_1274_0_59, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusNMaxima",1410,G__ParticleDict_1274_0_60, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusNMaximaPad",1687,G__ParticleDict_1274_0_61, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusNMaximaPosX",1804,G__ParticleDict_1274_0_62, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusNMaximaPosY",1805,G__ParticleDict_1274_0_63, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusChi2",1053,G__ParticleDict_1274_0_64, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusChi2XMM",1295,G__ParticleDict_1274_0_65, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusChi2YMM",1296,G__ParticleDict_1274_0_66, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusCircleX",1409,G__ParticleDict_1274_0_67, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusCircleY",1410,G__ParticleDict_1274_0_68, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusSig1X",1155,G__ParticleDict_1274_0_69, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusSig1Y",1156,G__ParticleDict_1274_0_70, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusSig2X",1156,G__ParticleDict_1274_0_71, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusSig2Y",1157,G__ParticleDict_1274_0_72, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1274_0_73, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleBtRingInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1274_0_74, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtRingInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1274_0_75, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleBtRingInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1274_0_76, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleBtRingInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1274_0_80, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1274_0_81, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtRingInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1274_0_82, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBtRingInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1274_0_83, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtRingInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1274_0_84, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBtRingInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleBtRingInfo", 1870, G__ParticleDict_1274_0_85, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingInfo), -1, 0, 1, 1, 1, 0, "u 'HParticleBtRingInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleBtRingInfo", 1996, G__ParticleDict_1274_0_86, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1274_0_87, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingInfo), -1, 1, 1, 1, 1, 0, "u 'HParticleBtRingInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleBtRingF(void) {
   /* HParticleBtRingF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingF));
   G__memfunc_setup("HParticleBtRingF",1544,G__ParticleDict_1276_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__ParticleDict_1276_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finalize",850,G__ParticleDict_1276_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillRichCal",1085,G__ParticleDict_1276_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - catRichCal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillPrediction",1464,G__ParticleDict_1276_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'HParticleCand' - 10 - cand u 'HVertex' - 1 - vertex "
"g - 'Bool_t' 0 - isGoodTrack g - 'Bool_t' 10 - doAngleCorr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearData",897,G__ParticleDict_1276_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingMatrix",1349,G__ParticleDict_1276_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPrediction",1361,G__ParticleDict_1276_0_8, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), G__defined_typename("vector<vector<Int_t> >"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichHitAdd",1268,G__ParticleDict_1276_0_9, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRichHitCharge",1589,G__ParticleDict_1276_0_10, 117, G__get_linked_tagnum(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackTheta",1323,G__ParticleDict_1276_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackPhi",1110,G__ParticleDict_1276_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackVertex",1459,G__ParticleDict_1276_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackSec",1104,G__ParticleDict_1276_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosXCenter",1323,G__ParticleDict_1276_0_15, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosYCenter",1324,G__ParticleDict_1276_0_16, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodTrack",1114,G__ParticleDict_1276_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillRingInfo",1219,G__ParticleDict_1276_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParticleBtRingInfo' - 0 - btRingInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasNoisyRichSeg",1523,G__ParticleDict_1276_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - trackInSec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plotPrediction",1488,G__ParticleDict_1276_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plotRichHit",1130,G__ParticleDict_1276_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addressToColRow",1535,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"i - 'Int_t' 10 - address i - 'Int_t' 1 - sec "
"i - 'Int_t' 1 - row i - 'Int_t' 1 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("correctPhi",1043,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 10 - sec f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVertexNum",1262,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "f - 'Float_t' 10 - vertex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortElements",1285,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"d - 'Double_t' 1 - entry1 d - 'Double_t' 1 - entry2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMatrix",1052,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - xPad i - 'Int_t' 0 - yPad "
"i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1276_0_27, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleBtRingF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1276_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtRingF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1276_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleBtRingF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1276_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleBtRingF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1276_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1276_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtRingF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1276_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBtRingF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1276_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtRingF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1276_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBtRingF::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleBtRingF", 1544, G__ParticleDict_1276_0_39, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingF), -1, 0, 1, 1, 1, 0, "u 'HParticleBtRingF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleBtRingF", 1670, G__ParticleDict_1276_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1276_0_41, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRingF), -1, 1, 1, 1, 1, 0, "u 'HParticleBtRingF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleBtClusterF(void) {
   /* HParticleBtClusterF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtClusterF));
   G__memfunc_setup("HParticleBtClusterF",1882,G__ParticleDict_1289_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtClusterF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__ParticleDict_1289_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingF",802,G__ParticleDict_1289_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParticleBtRingF' - 0 - ring", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCluster",1141,G__ParticleDict_1289_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("noHitFound",1022,G__ParticleDict_1289_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearCluster",1257,G__ParticleDict_1289_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadsRing",1112,G__ParticleDict_1289_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadsSum",1021,G__ParticleDict_1289_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChargeRing",1306,G__ParticleDict_1289_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChargeSum",1215,G__ParticleDict_1289_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNClusters",1251,G__ParticleDict_1289_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxima",925,G__ParticleDict_1289_0_12, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaCharge",1511,G__ParticleDict_1289_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNearbyMaxima",1534,G__ParticleDict_1289_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2Value",1155,G__ParticleDict_1289_0_15, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2ValuePrimary",1895,G__ParticleDict_1289_0_16, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaShared",1524,G__ParticleDict_1289_0_17, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaSharedBad",1787,G__ParticleDict_1289_0_18, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaSharedTrack",2025,G__ParticleDict_1289_0_19, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - trackNo i - 'Int_t' 10 - trackNo2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaSharedBadTrack",2288,G__ParticleDict_1289_0_20, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - trackNo i - 'Int_t' 10 - trackNo2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaChargeShared",2110,G__ParticleDict_1289_0_21, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaChargeSharedTrack",2611,G__ParticleDict_1289_0_22, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - trackNo i - 'Int_t' 10 - trackNo2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaChargeSharedBad",2373,G__ParticleDict_1289_0_23, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaChargeSharedBadTrack",2874,G__ParticleDict_1289_0_24, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - trackNo i - 'Int_t' 10 - trackNo2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNearbyMaximaShared",2133,G__ParticleDict_1289_0_25, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNearbyMaximaSharedTrack",2634,G__ParticleDict_1289_0_26, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - trackNo i - 'Int_t' 10 - trackNo2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanDistX",1197,G__ParticleDict_1289_0_27, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanDistY",1198,G__ParticleDict_1289_0_28, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanDist",1109,G__ParticleDict_1289_0_29, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillRingInfo",1219,G__ParticleDict_1289_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParticleBtRingInfo' - 0 - BtRingInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addressToColRow",1535,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"i - 'Int_t' 10 - address i - 'Int_t' 1 - sec "
"i - 'Int_t' 1 - row i - 'Int_t' 1 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadCharge",1183,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 10 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShared",919,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 4, 0, 
"i - 'Int_t' 10 - trackNo i - 'Int_t' 10 - clusNum "
"f - 'Float_t' 10 - sigmaRange g - 'Bool_t' 10 - trackType "
"i - 'Int_t' 10 - trackNo2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSharedCharge",1505,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 4, 0, 
"i - 'Int_t' 10 - trackNo i - 'Int_t' 10 - clusNum "
"f - 'Float_t' 10 - sigmaRange g - 'Bool_t' 10 - trackType "
"i - 'Int_t' 10 - trackNo2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addressIsShared",1529,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - address", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sharedChargeDiagonal",2016,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 4, 0, "f - 'Float_t' 10 - maximumCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sharedChargeVertical",2043,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 4, 0, "f - 'Float_t' 10 - maximumCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sharedChargeHorizontal",2283,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 4, 0, "f - 'Float_t' 10 - maximumCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findNeighbour",1348,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 10 - trackNo i - 'Int_t' 10 - address", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCluster",1161,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 10 - trackNo h - 'UInt_t' 10 - beginclus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nMaxima",715,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 10 - trackNo h - 'UInt_t' 10 - beginclus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitMaximaPos",1234,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "h - 'UInt_t' 10 - beginclus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcChi2",729,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGoodClus",1132,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findClusterShape",1652,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "h - 'UInt_t' 10 - beginclus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcRingShift",1313,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 10 - trackNo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1289_0_47, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleBtClusterF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1289_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtClusterF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1289_0_49, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleBtClusterF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1289_0_50, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleBtClusterF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1289_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1289_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtClusterF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1289_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBtClusterF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1289_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtClusterF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1289_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBtClusterF::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleBtClusterF", 1882, G__ParticleDict_1289_0_59, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtClusterF), -1, 0, 1, 1, 1, 0, "u 'HParticleBtClusterF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleBtClusterF", 2008, G__ParticleDict_1289_0_60, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1289_0_61, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtClusterF), -1, 1, 1, 1, 1, 0, "u 'HParticleBtClusterF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleBtRing(void) {
   /* HParticleBtRing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRing));
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleBtRing",1474,G__ParticleDict_1302_0_2, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRing), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadsRing",1124,G__ParticleDict_1302_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadsClus",1131,G__ParticleDict_1302_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChargeRing",1318,G__ParticleDict_1302_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChargeClus",1325,G__ParticleDict_1302_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusters",1185,G__ParticleDict_1302_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxima",937,G__ParticleDict_1302_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaximaCharge",1523,G__ParticleDict_1302_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNearbyMaxima",1546,G__ParticleDict_1302_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChi2",658,G__ParticleDict_1302_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMeanDist",1121,G__ParticleDict_1302_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingMatrix",1361,G__ParticleDict_1302_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaximaShared",1536,G__ParticleDict_1302_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaximaSharedTrack",2037,G__ParticleDict_1302_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaximaSharedTrackIdx",2330,G__ParticleDict_1302_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaximaSharedFragment",2356,G__ParticleDict_1302_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaximaSharedFragmentTrack",2857,G__ParticleDict_1302_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaximaSharedFragmentTrackIdx",3150,G__ParticleDict_1302_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaximaChargeShared",2122,G__ParticleDict_1302_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaximaChargeSharedTrack",2623,G__ParticleDict_1302_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaximaChargeSharedTrackIdx",2916,G__ParticleDict_1302_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaximaChargeSharedFragment",2942,G__ParticleDict_1302_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaximaChargeSharedFragmentTrack",3443,G__ParticleDict_1302_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaximaChargeSharedFragmentTrackIdx",3736,G__ParticleDict_1302_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNearbyMaximaShared",2145,G__ParticleDict_1302_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNearbyMaximaSharedTrack",2646,G__ParticleDict_1302_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNearbyMaximaSharedTrackIdx",2939,G__ParticleDict_1302_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadsRing",1112,G__ParticleDict_1302_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadsClus",1119,G__ParticleDict_1302_0_30, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChargeRing",1306,G__ParticleDict_1302_0_31, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChargeClus",1313,G__ParticleDict_1302_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusters",1173,G__ParticleDict_1302_0_33, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxima",925,G__ParticleDict_1302_0_34, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaCharge",1511,G__ParticleDict_1302_0_35, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNearbyMaxima",1534,G__ParticleDict_1302_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChi2",646,G__ParticleDict_1302_0_37, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanDist",1109,G__ParticleDict_1302_0_38, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingMatrix",1349,G__ParticleDict_1302_0_39, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaShared",1524,G__ParticleDict_1302_0_40, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaSharedFragment",2344,G__ParticleDict_1302_0_41, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaChargeShared",2110,G__ParticleDict_1302_0_42, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaChargeSharedFragment",2930,G__ParticleDict_1302_0_43, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNearbyMaximaShared",2133,G__ParticleDict_1302_0_44, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaSharedTrack",2025,G__ParticleDict_1302_0_45, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaximaChargeSharedTrack",2611,G__ParticleDict_1302_0_46, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNearbyMaximaSharedTrack",2634,G__ParticleDict_1302_0_47, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1302_0_48, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleBtRing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1302_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtRing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1302_0_50, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleBtRing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1302_0_51, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleBtRing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1302_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1302_0_56, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtRing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1302_0_57, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBtRing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1302_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtRing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1302_0_59, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBtRing::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleBtRing", 1474, G__ParticleDict_1302_0_60, (int) ('i'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRing), -1, 0, 1, 1, 1, 0, "u 'HParticleBtRing' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleBtRing", 1600, G__ParticleDict_1302_0_61, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1302_0_62, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtRing), -1, 1, 1, 1, 1, 0, "u 'HParticleBtRing' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleBt(void) {
   /* HParticleBt */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBt));
   G__memfunc_setup("HParticleBt",1074,G__ParticleDict_1303_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleBt), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleBt",1074,G__ParticleDict_1303_0_2, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleBt), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"u 'TString' - 10 - beamtime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebugInfo",1215,G__ParticleDict_1303_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - debugInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fillOutput",1080,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'vector<HParticleCand,allocator<HParticleCand> >' 'vector<HParticleCand>' 1 - candidates", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectLeptonsBeta",1761,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 2, 0, "U 'HParticleCand' - 0 - pcand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isGoodLepton",1239,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 2, 0, "U 'HParticleCand' - 0 - cand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1303_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleBt::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1303_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBt::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1303_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleBt::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1303_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleBt::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1303_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1303_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBt::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1303_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBt::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1303_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBt::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1303_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBt::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HParticleBt", 1200, G__ParticleDict_1303_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleBtAngleTrafo(void) {
   /* HParticleBtAngleTrafo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtAngleTrafo));
   G__memfunc_setup("HParticleBtAngleTrafo",2069,G__ParticleDict_1308_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtAngleTrafo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initParam",933,G__ParticleDict_1308_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x2xPad",567,G__ParticleDict_1308_0_3, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 10 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xPad2x",567,G__ParticleDict_1308_0_4, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 10 - xPad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yPhi2x",580,G__ParticleDict_1308_0_5, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - y f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yPhi2xPad",857,G__ParticleDict_1308_0_6, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - y f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("angles2y",805,G__ParticleDict_1308_0_7, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - theta f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yPhi2Theta",962,G__ParticleDict_1308_0_8, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - y f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("angles2x",804,G__ParticleDict_1308_0_9, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - theta f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("angles2yPad",1082,G__ParticleDict_1308_0_10, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - theta f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yPadPhi2Theta",1239,G__ParticleDict_1308_0_11, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - yPad f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("angles2xPad",1081,G__ParticleDict_1308_0_12, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - theta f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xy2Phi",580,G__ParticleDict_1308_0_13, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - x f - 'Float_t' 10 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xPadyPad2Phi",1134,G__ParticleDict_1308_0_14, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - xPad f - 'Float_t' 10 - yPad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yPad2y",569,G__ParticleDict_1308_0_15, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 10 - yPad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yPadPhi2x",857,G__ParticleDict_1308_0_16, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - yPad f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yPhi2yPad",858,G__ParticleDict_1308_0_17, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - y f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yPadPhi2y",858,G__ParticleDict_1308_0_18, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - yPad f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xy2yPad",689,G__ParticleDict_1308_0_19, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - x f - 'Float_t' 10 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xPadyPad2y",966,G__ParticleDict_1308_0_20, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - xPad f - 'Float_t' 10 - yPad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xy2Theta",793,G__ParticleDict_1308_0_21, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - x f - 'Float_t' 10 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xPadyPad2Theta",1347,G__ParticleDict_1308_0_22, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - xPad f - 'Float_t' 10 - yPad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zTheta2dY",863,G__ParticleDict_1308_0_23, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 - z f - 'Float_t' 10 - theta "
"f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zTheta2dYPad",1140,G__ParticleDict_1308_0_24, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 - z f - 'Float_t' 10 - theta "
"f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zTheta2dX",862,G__ParticleDict_1308_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zTheta2dXPad",1139,G__ParticleDict_1308_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zY2dTheta",863,G__ParticleDict_1308_0_27, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 - z f - 'Float_t' 10 - y "
"f - 'Float_t' 10 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zYPad2dTheta",1140,G__ParticleDict_1308_0_28, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 - z f - 'Float_t' 10 - yPad "
"f - 'Float_t' 10 - xPad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zYPhi2dTheta",1152,G__ParticleDict_1308_0_29, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 - z f - 'Float_t' 10 - y "
"f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zTheta2dTheta",1276,G__ParticleDict_1308_0_30, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 - z f - 'Float_t' 10 - theta "
"f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichPos",1028,G__ParticleDict_1308_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - zRichPos", "depends on Rich alagnment, default -35 mm", (void*) NULL, 0);
   G__memfunc_setup("getRichPos",1016,G__ParticleDict_1308_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRichPos",1028,G__ParticleDict_1308_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - beamtime", "available for \"apr12\", \"oct11\", \"sep08\"", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1308_0_34, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleBtAngleTrafo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1308_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtAngleTrafo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1308_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleBtAngleTrafo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1308_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleBtAngleTrafo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1308_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1308_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtAngleTrafo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1308_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBtAngleTrafo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1308_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleBtAngleTrafo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1308_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleBtAngleTrafo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleBtAngleTrafo", 2069, G__ParticleDict_1308_0_46, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtAngleTrafo), -1, 0, 1, 1, 1, 0, "u 'HParticleBtAngleTrafo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleBtAngleTrafo", 2195, G__ParticleDict_1308_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1308_0_48, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleBtAngleTrafo), -1, 1, 1, 1, 1, 0, "u 'HParticleBtAngleTrafo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticlePathLengthCorr(void) {
   /* HParticlePathLengthCorr */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticlePathLengthCorr));
   G__memfunc_setup("HParticlePathLengthCorr",2305,G__ParticleDict_1309_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticlePathLengthCorr), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 '\"ParticlePathLengthCorr\"' name C - 'Text_t' 10 '\"ParticlePathLengthCorr\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setBeamTime",1104,G__ParticleDict_1309_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - beamtime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStart",846,G__ParticleDict_1309_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1309_0_7, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticlePathLengthCorr::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1309_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticlePathLengthCorr::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1309_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticlePathLengthCorr::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1309_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticlePathLengthCorr::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1309_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1309_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticlePathLengthCorr::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1309_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticlePathLengthCorr::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1309_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticlePathLengthCorr::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1309_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticlePathLengthCorr::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HParticlePathLengthCorr", 2431, G__ParticleDict_1309_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleT0Reco(void) {
   /* HParticleT0Reco */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0Reco));
   G__memfunc_setup("initWalkHists",1358,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isEmbedded",998,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'HParticleCand' - 0 - pCand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMETA",718,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"f - 'Float_t' 0 - t0 f - 'Float_t' 0 - err "
"i - 'Int_t' 0 - sys", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getT0",452,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - sys", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getT0Err",749,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - sys", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBeta",700,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 4, 0, "U 'HParticleCand' - 0 - pCand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillBuffer",1025,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCorrections",1586,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("correctBeta",1134,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOnlineStripCorrection",2511,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - mod i - 'Int_t' 0 - strip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOnlineMeanQ",1399,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - mod i - 'Int_t' 0 - strip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculateStartT0Cont",2004,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPIDs",668,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HParticleT0Reco",1417,G__ParticleDict_1332_0_15, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleT0Reco), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 '\"ParticleT0Reco\"' name C - 'Text_t' 10 '\"ParticleT0Reco\"' title "
"C - 'Text_t' 10 '\"apr12\"' beamtime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setUseFlaggedCandidates",2323,G__ParticleDict_1332_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1332_0_20, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleT0Reco::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1332_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleT0Reco::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1332_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleT0Reco::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1332_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleT0Reco::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1332_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1332_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleT0Reco::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1332_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleT0Reco::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1332_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleT0Reco::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1332_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleT0Reco::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HParticleT0Reco", 1543, G__ParticleDict_1332_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCutlEHParticleCandgR(void) {
   /* HParticleCut<HParticleCand> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandgR));
   G__memfunc_setup("HParticleCut<HParticleCand>",2580,G__ParticleDict_1357_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandgR), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 - num "
"u 'TString' - 0 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInverse",1064,G__ParticleDict_1357_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - inv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCut",926,G__ParticleDict_1357_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '4' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eval",424,G__ParticleDict_1357_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParticleCand' - 0 - c h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1357_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounter",1283,G__ParticleDict_1357_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutRate",1016,G__ParticleDict_1357_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCall",778,G__ParticleDict_1357_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFail",778,G__ParticleDict_1357_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClass",822,G__ParticleDict_1357_0_10, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCand), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__ParticleDict_1357_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFormula",1046,G__ParticleDict_1357_0_12, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCondition",1255,G__ParticleDict_1357_0_13, 117, G__get_linked_tagnum(&G__ParticleDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1357_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCut<HParticleCand>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1357_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleCand>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1357_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCut<HParticleCand>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1357_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCut<HParticleCand>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1357_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1357_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleCand>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1357_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HParticleCand>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1357_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleCand>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1357_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HParticleCand>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCut<HParticleCand>", 2580, G__ParticleDict_1357_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandgR), -1, 0, 1, 1, 1, 0, "u 'HParticleCut<HParticleCand>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCut<HParticleCand>", 2706, G__ParticleDict_1357_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1357_0_28, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandgR), -1, 1, 1, 1, 1, 0, "u 'HParticleCut<HParticleCand>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCutlEHParticleCandSimgR(void) {
   /* HParticleCut<HParticleCandSim> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandSimgR));
   G__memfunc_setup("HParticleCut<HParticleCandSim>",2877,G__ParticleDict_1358_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandSimgR), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 - num "
"u 'TString' - 0 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInverse",1064,G__ParticleDict_1358_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - inv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCut",926,G__ParticleDict_1358_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '4' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eval",424,G__ParticleDict_1358_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParticleCandSim' - 0 - c h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1358_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounter",1283,G__ParticleDict_1358_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutRate",1016,G__ParticleDict_1358_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCall",778,G__ParticleDict_1358_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFail",778,G__ParticleDict_1358_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClass",822,G__ParticleDict_1358_0_10, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCandSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__ParticleDict_1358_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFormula",1046,G__ParticleDict_1358_0_12, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCondition",1255,G__ParticleDict_1358_0_13, 117, G__get_linked_tagnum(&G__ParticleDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1358_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCut<HParticleCandSim>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1358_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleCandSim>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1358_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCut<HParticleCandSim>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1358_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCut<HParticleCandSim>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1358_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1358_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleCandSim>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1358_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HParticleCandSim>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1358_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleCandSim>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1358_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HParticleCandSim>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCut<HParticleCandSim>", 2877, G__ParticleDict_1358_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandSimgR), -1, 0, 1, 1, 1, 0, "u 'HParticleCut<HParticleCandSim>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCut<HParticleCandSim>", 3003, G__ParticleDict_1358_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1358_0_28, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleCandSimgR), -1, 1, 1, 1, 1, 0, "u 'HParticleCut<HParticleCandSim>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCutlEHParticlePairgR(void) {
   /* HParticleCut<HParticlePair> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticlePairgR));
   G__memfunc_setup("HParticleCut<HParticlePair>",2602,G__ParticleDict_1359_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticlePairgR), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 - num "
"u 'TString' - 0 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInverse",1064,G__ParticleDict_1359_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - inv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCut",926,G__ParticleDict_1359_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '4' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eval",424,G__ParticleDict_1359_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParticlePair' - 0 - c h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1359_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounter",1283,G__ParticleDict_1359_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutRate",1016,G__ParticleDict_1359_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCall",778,G__ParticleDict_1359_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFail",778,G__ParticleDict_1359_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClass",822,G__ParticleDict_1359_0_10, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticlePair), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__ParticleDict_1359_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFormula",1046,G__ParticleDict_1359_0_12, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCondition",1255,G__ParticleDict_1359_0_13, 117, G__get_linked_tagnum(&G__ParticleDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1359_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCut<HParticlePair>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1359_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticlePair>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1359_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCut<HParticlePair>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1359_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCut<HParticlePair>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1359_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1359_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticlePair>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1359_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HParticlePair>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1359_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticlePair>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1359_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HParticlePair>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCut<HParticlePair>", 2602, G__ParticleDict_1359_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticlePairgR), -1, 0, 1, 1, 1, 0, "u 'HParticleCut<HParticlePair>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCut<HParticlePair>", 2728, G__ParticleDict_1359_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1359_0_28, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticlePairgR), -1, 1, 1, 1, 1, 0, "u 'HParticleCut<HParticlePair>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCutlEHParticleGeantPairgR(void) {
   /* HParticleCut<HParticleGeantPair> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantPairgR));
   G__memfunc_setup("HParticleCut<HParticleGeantPair>",3097,G__ParticleDict_1360_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantPairgR), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 - num "
"u 'TString' - 0 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInverse",1064,G__ParticleDict_1360_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - inv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCut",926,G__ParticleDict_1360_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '4' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eval",424,G__ParticleDict_1360_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParticleGeantPair' - 0 - c h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1360_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounter",1283,G__ParticleDict_1360_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutRate",1016,G__ParticleDict_1360_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCall",778,G__ParticleDict_1360_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFail",778,G__ParticleDict_1360_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClass",822,G__ParticleDict_1360_0_10, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantPair), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__ParticleDict_1360_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFormula",1046,G__ParticleDict_1360_0_12, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCondition",1255,G__ParticleDict_1360_0_13, 117, G__get_linked_tagnum(&G__ParticleDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1360_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCut<HParticleGeantPair>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1360_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleGeantPair>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1360_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCut<HParticleGeantPair>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1360_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCut<HParticleGeantPair>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1360_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1360_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleGeantPair>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1360_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HParticleGeantPair>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1360_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleGeantPair>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1360_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HParticleGeantPair>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCut<HParticleGeantPair>", 3097, G__ParticleDict_1360_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantPairgR), -1, 0, 1, 1, 1, 0, "u 'HParticleCut<HParticleGeantPair>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCut<HParticleGeantPair>", 3223, G__ParticleDict_1360_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1360_0_28, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantPairgR), -1, 1, 1, 1, 1, 0, "u 'HParticleCut<HParticleGeantPair>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCutlEHParticleGeantgR(void) {
   /* HParticleCut<HParticleGeant> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantgR));
   G__memfunc_setup("HParticleCut<HParticleGeant>",2701,G__ParticleDict_1361_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantgR), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 - num "
"u 'TString' - 0 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInverse",1064,G__ParticleDict_1361_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - inv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCut",926,G__ParticleDict_1361_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '4' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eval",424,G__ParticleDict_1361_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParticleGeant' - 0 - c h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1361_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounter",1283,G__ParticleDict_1361_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutRate",1016,G__ParticleDict_1361_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCall",778,G__ParticleDict_1361_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFail",778,G__ParticleDict_1361_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClass",822,G__ParticleDict_1361_0_10, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeant), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__ParticleDict_1361_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFormula",1046,G__ParticleDict_1361_0_12, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCondition",1255,G__ParticleDict_1361_0_13, 117, G__get_linked_tagnum(&G__ParticleDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1361_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCut<HParticleGeant>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1361_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleGeant>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1361_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCut<HParticleGeant>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1361_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCut<HParticleGeant>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1361_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1361_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleGeant>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1361_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HParticleGeant>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1361_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleGeant>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1361_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HParticleGeant>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCut<HParticleGeant>", 2701, G__ParticleDict_1361_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantgR), -1, 0, 1, 1, 1, 0, "u 'HParticleCut<HParticleGeant>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCut<HParticleGeant>", 2827, G__ParticleDict_1361_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1361_0_28, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantgR), -1, 1, 1, 1, 1, 0, "u 'HParticleCut<HParticleGeant>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCutlEHParticleGeantDecaygR(void) {
   /* HParticleCut<HParticleGeantDecay> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantDecaygR));
   G__memfunc_setup("HParticleCut<HParticleGeantDecay>",3187,G__ParticleDict_1362_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantDecaygR), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 - num "
"u 'TString' - 0 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInverse",1064,G__ParticleDict_1362_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - inv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCut",926,G__ParticleDict_1362_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '4' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eval",424,G__ParticleDict_1362_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParticleGeantDecay' - 0 - c h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1362_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounter",1283,G__ParticleDict_1362_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutRate",1016,G__ParticleDict_1362_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCall",778,G__ParticleDict_1362_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFail",778,G__ParticleDict_1362_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClass",822,G__ParticleDict_1362_0_10, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleGeantDecay), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__ParticleDict_1362_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFormula",1046,G__ParticleDict_1362_0_12, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCondition",1255,G__ParticleDict_1362_0_13, 117, G__get_linked_tagnum(&G__ParticleDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1362_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCut<HParticleGeantDecay>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1362_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleGeantDecay>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1362_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCut<HParticleGeantDecay>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1362_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCut<HParticleGeantDecay>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1362_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1362_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleGeantDecay>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1362_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HParticleGeantDecay>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1362_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleGeantDecay>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1362_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HParticleGeantDecay>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCut<HParticleGeantDecay>", 3187, G__ParticleDict_1362_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantDecaygR), -1, 0, 1, 1, 1, 0, "u 'HParticleCut<HParticleGeantDecay>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCut<HParticleGeantDecay>", 3313, G__ParticleDict_1362_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1362_0_28, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleGeantDecaygR), -1, 1, 1, 1, 1, 0, "u 'HParticleCut<HParticleGeantDecay>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCutlEHParticleEvtInfogR(void) {
   /* HParticleCut<HParticleEvtInfo> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleEvtInfogR));
   G__memfunc_setup("HParticleCut<HParticleEvtInfo>",2905,G__ParticleDict_1363_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleEvtInfogR), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 - num "
"u 'TString' - 0 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInverse",1064,G__ParticleDict_1363_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - inv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCut",926,G__ParticleDict_1363_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '4' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eval",424,G__ParticleDict_1363_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParticleEvtInfo' - 0 - c h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1363_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounter",1283,G__ParticleDict_1363_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutRate",1016,G__ParticleDict_1363_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCall",778,G__ParticleDict_1363_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFail",778,G__ParticleDict_1363_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClass",822,G__ParticleDict_1363_0_10, 85, G__get_linked_tagnum(&G__ParticleDictLN_HParticleEvtInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__ParticleDict_1363_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFormula",1046,G__ParticleDict_1363_0_12, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCondition",1255,G__ParticleDict_1363_0_13, 117, G__get_linked_tagnum(&G__ParticleDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1363_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCut<HParticleEvtInfo>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1363_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleEvtInfo>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1363_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCut<HParticleEvtInfo>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1363_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCut<HParticleEvtInfo>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1363_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1363_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleEvtInfo>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1363_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HParticleEvtInfo>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1363_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HParticleEvtInfo>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1363_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HParticleEvtInfo>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCut<HParticleEvtInfo>", 2905, G__ParticleDict_1363_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleEvtInfogR), -1, 0, 1, 1, 1, 0, "u 'HParticleCut<HParticleEvtInfo>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCut<HParticleEvtInfo>", 3031, G__ParticleDict_1363_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1363_0_28, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHParticleEvtInfogR), -1, 1, 1, 1, 1, 0, "u 'HParticleCut<HParticleEvtInfo>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCutlEHRichHitgR(void) {
   /* HParticleCut<HRichHit> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitgR));
   G__memfunc_setup("HParticleCut<HRichHit>",2069,G__ParticleDict_1364_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitgR), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 - num "
"u 'TString' - 0 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInverse",1064,G__ParticleDict_1364_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - inv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCut",926,G__ParticleDict_1364_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '4' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eval",424,G__ParticleDict_1364_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HRichHit' - 0 - c h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1364_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounter",1283,G__ParticleDict_1364_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutRate",1016,G__ParticleDict_1364_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCall",778,G__ParticleDict_1364_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFail",778,G__ParticleDict_1364_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClass",822,G__ParticleDict_1364_0_10, 85, G__get_linked_tagnum(&G__ParticleDictLN_HRichHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__ParticleDict_1364_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFormula",1046,G__ParticleDict_1364_0_12, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCondition",1255,G__ParticleDict_1364_0_13, 117, G__get_linked_tagnum(&G__ParticleDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1364_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCut<HRichHit>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1364_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HRichHit>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1364_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCut<HRichHit>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1364_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCut<HRichHit>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1364_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1364_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HRichHit>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1364_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HRichHit>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1364_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HRichHit>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1364_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HRichHit>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCut<HRichHit>", 2069, G__ParticleDict_1364_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitgR), -1, 0, 1, 1, 1, 0, "u 'HParticleCut<HRichHit>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCut<HRichHit>", 2195, G__ParticleDict_1364_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1364_0_28, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitgR), -1, 1, 1, 1, 1, 0, "u 'HParticleCut<HRichHit>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCutlEHRichHitSimgR(void) {
   /* HParticleCut<HRichHitSim> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitSimgR));
   G__memfunc_setup("HParticleCut<HRichHitSim>",2366,G__ParticleDict_1365_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitSimgR), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 - num "
"u 'TString' - 0 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInverse",1064,G__ParticleDict_1365_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - inv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCut",926,G__ParticleDict_1365_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '4' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eval",424,G__ParticleDict_1365_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HRichHitSim' - 0 - c h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1365_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounter",1283,G__ParticleDict_1365_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutRate",1016,G__ParticleDict_1365_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCall",778,G__ParticleDict_1365_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFail",778,G__ParticleDict_1365_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClass",822,G__ParticleDict_1365_0_10, 85, G__get_linked_tagnum(&G__ParticleDictLN_HRichHitSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__ParticleDict_1365_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFormula",1046,G__ParticleDict_1365_0_12, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCondition",1255,G__ParticleDict_1365_0_13, 117, G__get_linked_tagnum(&G__ParticleDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1365_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCut<HRichHitSim>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1365_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HRichHitSim>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1365_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCut<HRichHitSim>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1365_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCut<HRichHitSim>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1365_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1365_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HRichHitSim>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1365_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HRichHitSim>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1365_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HRichHitSim>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1365_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HRichHitSim>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCut<HRichHitSim>", 2366, G__ParticleDict_1365_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitSimgR), -1, 0, 1, 1, 1, 0, "u 'HParticleCut<HRichHitSim>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCut<HRichHitSim>", 2492, G__ParticleDict_1365_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1365_0_28, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHRichHitSimgR), -1, 1, 1, 1, 1, 0, "u 'HParticleCut<HRichHitSim>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCutlEHEventHeadergR(void) {
   /* HParticleCut<HEventHeader> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHEventHeadergR));
   G__memfunc_setup("HParticleCut<HEventHeader>",2485,G__ParticleDict_1366_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHEventHeadergR), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 - num "
"u 'TString' - 0 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInverse",1064,G__ParticleDict_1366_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - inv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCut",926,G__ParticleDict_1366_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '4' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eval",424,G__ParticleDict_1366_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HEventHeader' - 0 - c h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1366_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounter",1283,G__ParticleDict_1366_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutRate",1016,G__ParticleDict_1366_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCall",778,G__ParticleDict_1366_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFail",778,G__ParticleDict_1366_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClass",822,G__ParticleDict_1366_0_10, 85, G__get_linked_tagnum(&G__ParticleDictLN_HEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__ParticleDict_1366_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFormula",1046,G__ParticleDict_1366_0_12, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCondition",1255,G__ParticleDict_1366_0_13, 117, G__get_linked_tagnum(&G__ParticleDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1366_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCut<HEventHeader>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1366_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HEventHeader>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1366_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCut<HEventHeader>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1366_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCut<HEventHeader>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1366_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1366_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HEventHeader>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1366_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HEventHeader>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1366_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HEventHeader>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1366_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HEventHeader>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCut<HEventHeader>", 2485, G__ParticleDict_1366_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHEventHeadergR), -1, 0, 1, 1, 1, 0, "u 'HParticleCut<HEventHeader>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCut<HEventHeader>", 2611, G__ParticleDict_1366_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1366_0_28, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHEventHeadergR), -1, 1, 1, 1, 1, 0, "u 'HParticleCut<HEventHeader>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCutlEHVertexgR(void) {
   /* HParticleCut<HVertex> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHVertexgR));
   G__memfunc_setup("HParticleCut<HVertex>",2024,G__ParticleDict_1367_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHVertexgR), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 - num "
"u 'TString' - 0 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInverse",1064,G__ParticleDict_1367_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - inv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCut",926,G__ParticleDict_1367_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '4' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eval",424,G__ParticleDict_1367_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HVertex' - 0 - c h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1367_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounter",1283,G__ParticleDict_1367_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutRate",1016,G__ParticleDict_1367_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCall",778,G__ParticleDict_1367_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFail",778,G__ParticleDict_1367_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClass",822,G__ParticleDict_1367_0_10, 85, G__get_linked_tagnum(&G__ParticleDictLN_HVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__ParticleDict_1367_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFormula",1046,G__ParticleDict_1367_0_12, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCondition",1255,G__ParticleDict_1367_0_13, 117, G__get_linked_tagnum(&G__ParticleDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1367_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCut<HVertex>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1367_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HVertex>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1367_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCut<HVertex>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1367_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCut<HVertex>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1367_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1367_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HVertex>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1367_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HVertex>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1367_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HVertex>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1367_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HVertex>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCut<HVertex>", 2024, G__ParticleDict_1367_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHVertexgR), -1, 0, 1, 1, 1, 0, "u 'HParticleCut<HVertex>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCut<HVertex>", 2150, G__ParticleDict_1367_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1367_0_28, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHVertexgR), -1, 1, 1, 1, 1, 0, "u 'HParticleCut<HVertex>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHParticleCutlEHGeantKinegR(void) {
   /* HParticleCut<HGeantKine> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHGeantKinegR));
   G__memfunc_setup("HParticleCut<HGeantKine>",2272,G__ParticleDict_1368_0_1, 105, G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHGeantKinegR), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 - num "
"u 'TString' - 0 - cond", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInverse",1064,G__ParticleDict_1368_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - inv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCut",926,G__ParticleDict_1368_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '4' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eval",424,G__ParticleDict_1368_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HGeantKine' - 0 - c h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ParticleDict_1368_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounter",1283,G__ParticleDict_1368_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutRate",1016,G__ParticleDict_1368_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCall",778,G__ParticleDict_1368_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFail",778,G__ParticleDict_1368_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClass",822,G__ParticleDict_1368_0_10, 85, G__get_linked_tagnum(&G__ParticleDictLN_HGeantKine), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__ParticleDict_1368_0_11, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFormula",1046,G__ParticleDict_1368_0_12, 85, G__get_linked_tagnum(&G__ParticleDictLN_TTreeFormula), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCondition",1255,G__ParticleDict_1368_0_13, 117, G__get_linked_tagnum(&G__ParticleDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ParticleDict_1368_0_14, 85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HParticleCut<HGeantKine>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ParticleDict_1368_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HGeantKine>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ParticleDict_1368_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HParticleCut<HGeantKine>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ParticleDict_1368_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HParticleCut<HGeantKine>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ParticleDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ParticleDict_1368_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ParticleDict_1368_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HGeantKine>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ParticleDict_1368_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HGeantKine>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ParticleDict_1368_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HParticleCut<HGeantKine>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ParticleDict_1368_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HParticleCut<HGeantKine>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HParticleCut<HGeantKine>", 2272, G__ParticleDict_1368_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHGeantKinegR), -1, 0, 1, 1, 1, 0, "u 'HParticleCut<HGeantKine>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HParticleCut<HGeantKine>", 2398, G__ParticleDict_1368_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ParticleDict_1368_0_28, (int) ('u'), G__get_linked_tagnum(&G__ParticleDictLN_HParticleCutlEHGeantKinegR), -1, 1, 1, 1, 1, 0, "u 'HParticleCut<HGeantKine>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncParticleDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
   G__memvar_setup((void*)(&catParticleCand),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catParticleCand=",0,(char*)NULL);
   G__memvar_setup((void*)(&catParticleEvtInfo),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catParticleEvtInfo=",0,(char*)NULL);
   G__memvar_setup((void*)(&catParticleDebug),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catParticleDebug=",0,(char*)NULL);
   G__memvar_setup((void*)(&catParticleCal),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catParticleCal=",0,(char*)NULL);
   G__memvar_setup((void*)(&catParticleMdc),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catParticleMdc=",0,(char*)NULL);
   G__memvar_setup((void*)(&catParticleBtRing),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catParticleBtRing=",0,(char*)NULL);
}

static void G__cpp_setup_global2() {
   G__memvar_setup((void*)(&catParticleBtRingInfo),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catParticleBtRingInfo=",0,(char*)NULL);
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {
}

static void G__cpp_setup_global7() {
   G__memvar_setup((void*)(&gParticleBooker),85,0,0,G__get_linked_tagnum(&G__ParticleDictLN_HParticleBooker),-1,-1,1,"gParticleBooker=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalParticleDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
  G__cpp_setup_global7();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {
}

static void G__cpp_setup_func34() {
}

static void G__cpp_setup_func35() {
}

static void G__cpp_setup_func36() {
}

static void G__cpp_setup_func37() {
}

static void G__cpp_setup_func38() {
}

static void G__cpp_setup_func39() {
}

static void G__cpp_setup_func40() {
}

static void G__cpp_setup_func41() {
}

static void G__cpp_setup_func42() {
}

static void G__cpp_setup_func43() {
}

static void G__cpp_setup_func44() {
}

static void G__cpp_setup_func45() {
}

static void G__cpp_setup_func46() {
}

static void G__cpp_setup_func47() {
}

static void G__cpp_setup_func48() {
}

static void G__cpp_setup_func49() {
}

static void G__cpp_setup_func50() {
}

static void G__cpp_setup_func51() {
}

static void G__cpp_setup_func52() {
}

static void G__cpp_setup_func53() {
}

static void G__cpp_setup_func54() {
}

static void G__cpp_setup_func55() {
}

static void G__cpp_setup_func56() {
}

static void G__cpp_setup_func57() {
}

static void G__cpp_setup_func58() {
}

static void G__cpp_setup_func59() {
}

static void G__cpp_setup_func60() {
}

static void G__cpp_setup_func61() {
}

static void G__cpp_setup_func62() {
}

static void G__cpp_setup_func63() {
}

static void G__cpp_setup_func64() {
}

static void G__cpp_setup_func65() {
}

static void G__cpp_setup_func66() {
}

static void G__cpp_setup_func67() {
}

static void G__cpp_setup_func68() {
}

static void G__cpp_setup_func69() {
}

static void G__cpp_setup_func70() {
}

static void G__cpp_setup_func71() {
}

static void G__cpp_setup_func72() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcParticleDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
  G__cpp_setup_func34();
  G__cpp_setup_func35();
  G__cpp_setup_func36();
  G__cpp_setup_func37();
  G__cpp_setup_func38();
  G__cpp_setup_func39();
  G__cpp_setup_func40();
  G__cpp_setup_func41();
  G__cpp_setup_func42();
  G__cpp_setup_func43();
  G__cpp_setup_func44();
  G__cpp_setup_func45();
  G__cpp_setup_func46();
  G__cpp_setup_func47();
  G__cpp_setup_func48();
  G__cpp_setup_func49();
  G__cpp_setup_func50();
  G__cpp_setup_func51();
  G__cpp_setup_func52();
  G__cpp_setup_func53();
  G__cpp_setup_func54();
  G__cpp_setup_func55();
  G__cpp_setup_func56();
  G__cpp_setup_func57();
  G__cpp_setup_func58();
  G__cpp_setup_func59();
  G__cpp_setup_func60();
  G__cpp_setup_func61();
  G__cpp_setup_func62();
  G__cpp_setup_func63();
  G__cpp_setup_func64();
  G__cpp_setup_func65();
  G__cpp_setup_func66();
  G__cpp_setup_func67();
  G__cpp_setup_func68();
  G__cpp_setup_func69();
  G__cpp_setup_func70();
  G__cpp_setup_func71();
  G__cpp_setup_func72();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ParticleDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TDirectory = { "TDirectory" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR = { "vector<unsigned long long,allocator<unsigned long long> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TIterator = { "TIterator" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_Particle = { "Particle" , 110 , -1 };
G__linked_taginfo G__ParticleDictLN_ParticlecLcLeSelMeta = { "Particle::eSelMeta" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_ParticlecLcLeDetBits = { "Particle::eDetBits" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_ParticlecLcLeMatching = { "Particle::eMatching" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_ParticlecLcLeVertex = { "Particle::eVertex" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_ParticlecLcLeMomReco = { "Particle::eMomReco" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_ParticlecLcLePair = { "Particle::ePair" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_ParticlecLcLeFlagBits = { "Particle::eFlagBits" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_ParticlecLcLeClosePairSelect = { "Particle::eClosePairSelect" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_ParticlecLcLePairCase = { "Particle::ePairCase" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_ParticlecLcLeEventSelect = { "Particle::eEventSelect" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_ParticlecLcLeBeamTime = { "Particle::eBeamTime" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCand = { "HParticleCand" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCandSim = { "HParticleCandSim" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleWallHit = { "HParticleWallHit" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleWallHitSim = { "HParticleWallHitSim" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCal = { "HParticleCal" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HMdcSeg = { "HMdcSeg" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HMdcTrkCand = { "HMdcTrkCand" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleMdc = { "HParticleMdc" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleEvtInfo = { "HParticleEvtInfo" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR = { "map<int,int,less<int>,allocator<pair<const int,int> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TTreeFormula = { "TTreeFormula" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TNtuple = { "TNtuple" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HTree = { "HTree" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HTask = { "HTask" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_TCutG = { "TCutG" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HGeantKine = { "HGeantKine" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR = { "map<int,particleproperties,less<int>,allocator<pair<const int,particleproperties> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR = { "map<TString,particleproperties,less<TString>,allocator<pair<const TString,particleproperties> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR = { "map<int,TString,less<int>,allocator<pair<const int,TString> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HIterator = { "HIterator" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HGeomVector = { "HGeomVector" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HVertex = { "HVertex" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HEventHeader = { "HEventHeader" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HRecEvent = { "HRecEvent" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR = { "map<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplETStringcOHCategorymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHCategorymUgRsPgRsPgR = { "map<TString,HCategory*,less<TString>,allocator<pair<const TString,HCategory*> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplETStringcOHPartialEventmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHPartialEventmUgRsPgRsPgR = { "map<TString,HPartialEvent*,less<TString>,allocator<pair<const TString,HPartialEvent*> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR = { "map<TString,int,less<TString>,allocator<pair<const TString,int> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR = { "map<TString,TString,less<TString>,allocator<pair<const TString,TString> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplETStringcOshortcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOshortgRsPgRsPgR = { "map<TString,short,less<TString>,allocator<pair<const TString,short> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HReconstructor = { "HReconstructor" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HMetaMatch2 = { "HMetaMatch2" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HTofHit = { "HTofHit" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HTofCluster = { "HTofCluster" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HTofHitSim = { "HTofHitSim" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HTofClusterSim = { "HTofClusterSim" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HRpcCluster = { "HRpcCluster" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HRpcClusterSim = { "HRpcClusterSim" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HShowerHit = { "HShowerHit" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HShowerHitSim = { "HShowerHitSim" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HRichHit = { "HRichHit" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HRichHitSim = { "HRichHitSim" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HMdcSegSim = { "HMdcSegSim" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HSplineTrack = { "HSplineTrack" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HRKTrackB = { "HRKTrackB" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HKalTrack = { "HKalTrack" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR = { "vector<HGeantKine*,allocator<HGeantKine*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantKine*,allocator<HGeantKine*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgR = { "vector<HGeantRichPhoton*,allocator<HGeantRichPhoton*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantRichPhoton*,allocator<HGeantRichPhoton*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgR = { "vector<HGeantMdc*,allocator<HGeantMdc*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantMdc*,allocator<HGeantMdc*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgR = { "vector<HGeantTof*,allocator<HGeantTof*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantTof*,allocator<HGeantTof*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgR = { "vector<HGeantRpc*,allocator<HGeantRpc*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantRpc*,allocator<HGeantRpc*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgR = { "vector<HGeantWall*,allocator<HGeantWall*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantWall*,allocator<HGeantWall*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgR = { "vector<HGeantEmc*,allocator<HGeantEmc*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantEmc*,allocator<HGeantEmc*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgR = { "vector<HGeantStart*,allocator<HGeantStart*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantStart*,allocator<HGeantStart*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgR = { "vector<HGeantFwDet*,allocator<HGeantFwDet*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantFwDet*,allocator<HGeantFwDet*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HMdcHit = { "HMdcHit" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HMdcClusInf = { "HMdcClusInf" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HMdcClusFit = { "HMdcClusFit" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HMdcClus = { "HMdcClus" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticlePair = { "HParticlePair" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HMdcPlane = { "HMdcPlane" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HMdcLayer = { "HMdcLayer" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HTofWalkPar = { "HTofWalkPar" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleTool = { "HParticleTool" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgR = { "vector<HParticleCand*,allocator<HParticleCand*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HParticleCand*,allocator<HParticleCand*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR = { "vector<TF1*,allocator<TF1*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TF1*,allocator<TF1*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHMdcWireFitmUcOallocatorlEHMdcWireFitmUgRsPgR = { "vector<HMdcWireFit*,allocator<HMdcWireFit*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcWireFitmUcOallocatorlEHMdcWireFitmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HMdcWireFit*,allocator<HMdcWireFit*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHMdcCal1mUcOallocatorlEHMdcCal1mUgRsPgR = { "vector<HMdcCal1*,allocator<HMdcCal1*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcCal1mUcOallocatorlEHMdcCal1mUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HMdcCal1*,allocator<HMdcCal1*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_pointers = { "pointers" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_closetrack = { "closetrack" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_closeVec = { "closeVec" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEclosetrackcOallocatorlEclosetrackgRsPgR = { "vector<closetrack,allocator<closetrack> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEclosetrackcOallocatorlEclosetrackgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<closetrack,allocator<closetrack> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_trackinfo = { "trackinfo" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_tracksVec = { "tracksVec" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEtrackinfomUcOallocatorlEtrackinfomUgRsPgR = { "vector<trackinfo*,allocator<trackinfo*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEtrackinfomUcOallocatorlEtrackinfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<trackinfo*,allocator<trackinfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_mdc_trk = { "mdc_trk" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_mdc_seg = { "mdc_seg" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_rpc_clst = { "rpc_clst" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_tof_hit = { "tof_hit" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_shower_hit = { "shower_hit" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_rich_hit = { "rich_hit" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_spline_track = { "spline_track" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_rk_track = { "rk_track" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_kal_track = { "kal_track" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_candidate = { "candidate" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleEvtChara = { "HParticleEvtChara" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleEvtCharacLcLeCentralityEsitimator = { "HParticleEvtChara::eCentralityEsitimator" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleEvtCharacLcLeCentralityClass = { "HParticleEvtChara::eCentralityClass" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_HMdcGeomPar = { "HMdcGeomPar" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HSpecGeomPar = { "HSpecGeomPar" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HMdcSizesCells = { "HMdcSizesCells" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCandFillerPar = { "HParticleCandFillerPar" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCandFiller = { "HParticleCandFiller" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEcandidatemUcOallocatorlEcandidatemUgRsPgR = { "vector<candidate*,allocator<candidate*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEcandidatemUcOallocatorlEcandidatemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<candidate*,allocator<candidate*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParIo = { "HParIo" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParSet = { "HParSet" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParamList = { "HParamList" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParCond = { "HParCond" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_candidateSort = { "candidateSort" , 115 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleTrackSorter = { "HParticleTrackSorter" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleTrackSortercLcLERichMatch = { "HParticleTrackSorter::ERichMatch" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleTrackSortercLcLESelect = { "HParticleTrackSorter::ESelect" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleTrackSortercLcLESwitch = { "HParticleTrackSorter::ESwitch" , 101 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEcandidateSortmUcOallocatorlEcandidateSortmUgRsPgR = { "vector<candidateSort*,allocator<candidateSort*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEcandidateSortmUcOallocatorlEcandidateSortmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<candidateSort*,allocator<candidateSort*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleTrackCleaner = { "HParticleTrackCleaner" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleRunningMeanI = { "HParticleRunningMeanI" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HMdcLookupGeom = { "HMdcLookupGeom" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HMdcCalParRaw = { "HMdcCalParRaw" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleEvtInfoFiller = { "HParticleEvtInfoFiller" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HContainer = { "HContainer" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HContFact = { "HContFact" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleContFact = { "HParticleContFact" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleStart2HitF = { "HParticleStart2HitF" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleTree = { "HParticleTree" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOHCategorymUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHCategorymUgRsPgRsPgR = { "map<int,HCategory*,less<int>,allocator<pair<const int,HCategory*> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleAngleCor = { "HParticleAngleCor" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_queuelEfloatcOdequelEfloatcOallocatorlEfloatgRsPgRsPgR = { "queue<float,deque<float,allocator<float> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleGeantDecay = { "HParticleGeantDecay" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleGeant = { "HParticleGeant" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgR = { "vector<HParticleCandSim*,allocator<HParticleCandSim*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HParticleCandSim*,allocator<HParticleCandSim*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleGeantEvent = { "HParticleGeantEvent" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEHGeantKinemUcOvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRsPgRsPgRsPgR = { "map<HGeantKine*,vector<HGeantKine*,allocator<HGeantKine*> >,less<HGeantKine*>,allocator<pair<HGeantKine* const,vector<HGeantKine*,allocator<HGeantKine*> > > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOHParticleGeantmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleGeantmUgRsPgRsPgR = { "map<int,HParticleGeant*,less<int>,allocator<pair<const int,HParticleGeant*> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHParticleGeantDecaymUcOallocatorlEHParticleGeantDecaymUgRsPgR = { "vector<HParticleGeantDecay*,allocator<HParticleGeantDecay*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleGeantDecaymUcOallocatorlEHParticleGeantDecaymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HParticleGeantDecay*,allocator<HParticleGeantDecay*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHParticleGeantmUcOallocatorlEHParticleGeantmUgRsPgR = { "vector<HParticleGeant*,allocator<HParticleGeant*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleGeantmUcOallocatorlEHParticleGeantmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HParticleGeant*,allocator<HParticleGeant*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleGeantPair = { "HParticleGeantPair" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleDraw = { "HParticleDraw" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticlePairDraw = { "HParticlePairDraw" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticlePairMaker = { "HParticlePairMaker" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHParticlePaircOallocatorlEHParticlePairgRsPgR = { "vector<HParticlePair,allocator<HParticlePair> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHParticlePaircOallocatorlEHParticlePairgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HParticlePair,allocator<HParticlePair> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR = { "map<int,vector<HParticleCand*,allocator<HParticleCand*> >,less<int>,allocator<pair<const int,vector<HParticleCand*,allocator<HParticleCand*> > > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgR = { "vector<HParticlePair*,allocator<HParticlePair*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HParticlePair*,allocator<HParticlePair*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEHParticleCandmUcOvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRcOlesslEHParticleCandmUgRcOallocatorlEpairlEHParticleCandmUsPconstcOvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRsPgRsPgRsPgR = { "map<HParticleCand*,vector<HParticlePair*,allocator<HParticlePair*> >,less<HParticleCand*>,allocator<pair<HParticleCand* const,vector<HParticlePair*,allocator<HParticlePair*> > > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleBooker = { "HParticleBooker" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgR = { "vector<HTofHit*,allocator<HTofHit*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HTofHit*,allocator<HTofHit*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgR = { "vector<HTofCluster*,allocator<HTofCluster*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HTofCluster*,allocator<HTofCluster*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgR = { "vector<HRpcCluster*,allocator<HRpcCluster*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HRpcCluster*,allocator<HRpcCluster*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgR = { "vector<HShowerHit*,allocator<HShowerHit*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HShowerHit*,allocator<HShowerHit*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgR = { "vector<HMdcSeg*,allocator<HMdcSeg*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HMdcSeg*,allocator<HMdcSeg*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgR = { "vector<HRichHit*,allocator<HRichHit*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HRichHit*,allocator<HRichHit*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRsPgRsPgRsPgR = { "map<int,vector<HParticleCandSim*,allocator<HParticleCandSim*> >,less<int>,allocator<pair<const int,vector<HParticleCandSim*,allocator<HParticleCandSim*> > > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgR = { "vector<HTofHitSim*,allocator<HTofHitSim*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HTofHitSim*,allocator<HTofHitSim*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRsPgRsPgRsPgR = { "map<int,vector<HTofHitSim*,allocator<HTofHitSim*> >,less<int>,allocator<pair<const int,vector<HTofHitSim*,allocator<HTofHitSim*> > > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgR = { "vector<HTofClusterSim*,allocator<HTofClusterSim*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HTofClusterSim*,allocator<HTofClusterSim*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRsPgRsPgRsPgR = { "map<int,vector<HTofClusterSim*,allocator<HTofClusterSim*> >,less<int>,allocator<pair<const int,vector<HTofClusterSim*,allocator<HTofClusterSim*> > > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgR = { "vector<HRpcClusterSim*,allocator<HRpcClusterSim*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HRpcClusterSim*,allocator<HRpcClusterSim*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRsPgRsPgRsPgR = { "map<int,vector<HRpcClusterSim*,allocator<HRpcClusterSim*> >,less<int>,allocator<pair<const int,vector<HRpcClusterSim*,allocator<HRpcClusterSim*> > > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgR = { "vector<HShowerHitSim*,allocator<HShowerHitSim*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HShowerHitSim*,allocator<HShowerHitSim*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRsPgRsPgRsPgR = { "map<int,vector<HShowerHitSim*,allocator<HShowerHitSim*> >,less<int>,allocator<pair<const int,vector<HShowerHitSim*,allocator<HShowerHitSim*> > > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgR = { "vector<HMdcSegSim*,allocator<HMdcSegSim*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HMdcSegSim*,allocator<HMdcSegSim*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRsPgRsPgRsPgR = { "map<int,vector<HMdcSegSim*,allocator<HMdcSegSim*> >,less<int>,allocator<pair<const int,vector<HMdcSegSim*,allocator<HMdcSegSim*> > > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgR = { "vector<HRichHitSim*,allocator<HRichHitSim*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HRichHitSim*,allocator<HRichHitSim*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRsPgRsPgRsPgR = { "map<int,vector<HRichHitSim*,allocator<HRichHitSim*> >,less<int>,allocator<pair<const int,vector<HRichHitSim*,allocator<HRichHitSim*> > > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR = { "map<int,vector<int,allocator<int> >,less<int>,allocator<pair<const int,vector<int,allocator<int> > > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HGeomVertexFit = { "HGeomVertexFit" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleVertexFind = { "HParticleVertexFind" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCutRange = { "HParticleCutRange" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleBtPar = { "HParticleBtPar" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleBtRingInfo = { "HParticleBtRingInfo" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleBtRingF = { "HParticleBtRingF" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlETF2mUcOallocatorlETF2mUgRsPgR = { "vector<TF2*,allocator<TF2*> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TF2*,allocator<TF2*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgR = { "vector<vector<TF2*,allocator<TF2*> >,allocator<vector<TF2*,allocator<TF2*> > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<TF2*,allocator<TF2*> >,allocator<vector<TF2*,allocator<TF2*> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleBtClusterF = { "HParticleBtClusterF" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >,allocator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR = { "vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >,allocator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleBtRing = { "HParticleBtRing" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleBt = { "HParticleBt" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHParticleCandcOallocatorlEHParticleCandgRsPgR = { "vector<HParticleCand,allocator<HParticleCand> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandcOallocatorlEHParticleCandgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HParticleCand,allocator<HParticleCand> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleBtAngleTrafo = { "HParticleBtAngleTrafo" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticlePathLengthCorr = { "HParticlePathLengthCorr" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HEnergyLossCorrPar = { "HEnergyLossCorrPar" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_listlEfloatcOallocatorlEfloatgRsPgR = { "list<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleT0Reco = { "HParticleT0Reco" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleT0RecocLcLpidvalues = { "HParticleT0Reco::pidvalues" , 115 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleT0RecocLcLstartvalues = { "HParticleT0Reco::startvalues" , 115 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleT0RecocLcLtofvalues = { "HParticleT0Reco::tofvalues" , 115 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleT0RecocLcLbuffers = { "HParticleT0Reco::buffers" , 115 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR = { "vector<list<float,allocator<float> >,allocator<list<float,allocator<float> > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<list<float,allocator<float> >,allocator<list<float,allocator<float> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<list<float,allocator<float> >,allocator<list<float,allocator<float> > > >,allocator<vector<list<float,allocator<float> >,allocator<list<float,allocator<float> > > > > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<list<float,allocator<float> >,allocator<list<float,allocator<float> > > >,allocator<vector<list<float,allocator<float> >,allocator<list<float,allocator<float> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_vectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgR = { "vector<HParticleT0Reco::tofvalues,allocator<HParticleT0Reco::tofvalues> >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HParticleT0Reco::tofvalues,allocator<HParticleT0Reco::tofvalues> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_maplEintcOHParticleT0RecocLcLmomCutcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleT0RecocLcLmomCutgRsPgRsPgR = { "map<int,HParticleT0Reco::momCut,less<int>,allocator<pair<const int,HParticleT0Reco::momCut> > >" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCutlEHParticleCandgR = { "HParticleCut<HParticleCand>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCutlEHParticleCandSimgR = { "HParticleCut<HParticleCandSim>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCutlEHParticlePairgR = { "HParticleCut<HParticlePair>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCutlEHParticleGeantPairgR = { "HParticleCut<HParticleGeantPair>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCutlEHParticleGeantgR = { "HParticleCut<HParticleGeant>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCutlEHParticleGeantDecaygR = { "HParticleCut<HParticleGeantDecay>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCutlEHParticleEvtInfogR = { "HParticleCut<HParticleEvtInfo>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCutlEHRichHitgR = { "HParticleCut<HRichHit>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCutlEHRichHitSimgR = { "HParticleCut<HRichHitSim>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCutlEHEventHeadergR = { "HParticleCut<HEventHeader>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCutlEHVertexgR = { "HParticleCut<HVertex>" , 99 , -1 };
G__linked_taginfo G__ParticleDictLN_HParticleCutlEHGeantKinegR = { "HParticleCut<HGeantKine>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableParticleDict() {
  G__ParticleDictLN_TClass.tagnum = -1 ;
  G__ParticleDictLN_TBuffer.tagnum = -1 ;
  G__ParticleDictLN_TDirectory.tagnum = -1 ;
  G__ParticleDictLN_TMemberInspector.tagnum = -1 ;
  G__ParticleDictLN_TObject.tagnum = -1 ;
  G__ParticleDictLN_TNamed.tagnum = -1 ;
  G__ParticleDictLN_TString.tagnum = -1 ;
  G__ParticleDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_TObjArray.tagnum = -1 ;
  G__ParticleDictLN_TClonesArray.tagnum = -1 ;
  G__ParticleDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_TIterator.tagnum = -1 ;
  G__ParticleDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__ParticleDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__ParticleDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__ParticleDictLN_TLorentzVector.tagnum = -1 ;
  G__ParticleDictLN_Particle.tagnum = -1 ;
  G__ParticleDictLN_ParticlecLcLeSelMeta.tagnum = -1 ;
  G__ParticleDictLN_ParticlecLcLeDetBits.tagnum = -1 ;
  G__ParticleDictLN_ParticlecLcLeMatching.tagnum = -1 ;
  G__ParticleDictLN_ParticlecLcLeVertex.tagnum = -1 ;
  G__ParticleDictLN_ParticlecLcLeMomReco.tagnum = -1 ;
  G__ParticleDictLN_ParticlecLcLePair.tagnum = -1 ;
  G__ParticleDictLN_ParticlecLcLeFlagBits.tagnum = -1 ;
  G__ParticleDictLN_ParticlecLcLeClosePairSelect.tagnum = -1 ;
  G__ParticleDictLN_ParticlecLcLePairCase.tagnum = -1 ;
  G__ParticleDictLN_ParticlecLcLeEventSelect.tagnum = -1 ;
  G__ParticleDictLN_ParticlecLcLeBeamTime.tagnum = -1 ;
  G__ParticleDictLN_HParticleCand.tagnum = -1 ;
  G__ParticleDictLN_HParticleCandSim.tagnum = -1 ;
  G__ParticleDictLN_HParticleWallHit.tagnum = -1 ;
  G__ParticleDictLN_HParticleWallHitSim.tagnum = -1 ;
  G__ParticleDictLN_HParticleCal.tagnum = -1 ;
  G__ParticleDictLN_HMdcSeg.tagnum = -1 ;
  G__ParticleDictLN_HMdcTrkCand.tagnum = -1 ;
  G__ParticleDictLN_HParticleMdc.tagnum = -1 ;
  G__ParticleDictLN_HParticleEvtInfo.tagnum = -1 ;
  G__ParticleDictLN_TFile.tagnum = -1 ;
  G__ParticleDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_TArrayD.tagnum = -1 ;
  G__ParticleDictLN_TArrayI.tagnum = -1 ;
  G__ParticleDictLN_TArrayF.tagnum = -1 ;
  G__ParticleDictLN_TF1.tagnum = -1 ;
  G__ParticleDictLN_TH1D.tagnum = -1 ;
  G__ParticleDictLN_TH1.tagnum = -1 ;
  G__ParticleDictLN_TH1F.tagnum = -1 ;
  G__ParticleDictLN_TTree.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_TTreeFormula.tagnum = -1 ;
  G__ParticleDictLN_TNtuple.tagnum = -1 ;
  G__ParticleDictLN_HTree.tagnum = -1 ;
  G__ParticleDictLN_HTask.tagnum = -1 ;
  G__ParticleDictLN_TCutG.tagnum = -1 ;
  G__ParticleDictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_HGeantKine.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_HLocation.tagnum = -1 ;
  G__ParticleDictLN_HIterator.tagnum = -1 ;
  G__ParticleDictLN_HGeomVector.tagnum = -1 ;
  G__ParticleDictLN_HVertex.tagnum = -1 ;
  G__ParticleDictLN_HEventHeader.tagnum = -1 ;
  G__ParticleDictLN_HCategory.tagnum = -1 ;
  G__ParticleDictLN_HRecEvent.tagnum = -1 ;
  G__ParticleDictLN_maplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_maplETStringcOHCategorymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHCategorymUgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_maplETStringcOHPartialEventmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHPartialEventmUgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_maplETStringcOshortcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOshortgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_HReconstructor.tagnum = -1 ;
  G__ParticleDictLN_HMetaMatch2.tagnum = -1 ;
  G__ParticleDictLN_HTofHit.tagnum = -1 ;
  G__ParticleDictLN_HTofCluster.tagnum = -1 ;
  G__ParticleDictLN_HTofHitSim.tagnum = -1 ;
  G__ParticleDictLN_HTofClusterSim.tagnum = -1 ;
  G__ParticleDictLN_HRpcCluster.tagnum = -1 ;
  G__ParticleDictLN_HRpcClusterSim.tagnum = -1 ;
  G__ParticleDictLN_HShowerHit.tagnum = -1 ;
  G__ParticleDictLN_HShowerHitSim.tagnum = -1 ;
  G__ParticleDictLN_HRichHit.tagnum = -1 ;
  G__ParticleDictLN_HRichHitSim.tagnum = -1 ;
  G__ParticleDictLN_HMdcSegSim.tagnum = -1 ;
  G__ParticleDictLN_HSplineTrack.tagnum = -1 ;
  G__ParticleDictLN_HRKTrackB.tagnum = -1 ;
  G__ParticleDictLN_HKalTrack.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_HMdcHit.tagnum = -1 ;
  G__ParticleDictLN_HMdcClusInf.tagnum = -1 ;
  G__ParticleDictLN_HMdcClusFit.tagnum = -1 ;
  G__ParticleDictLN_HMdcClus.tagnum = -1 ;
  G__ParticleDictLN_HParticlePair.tagnum = -1 ;
  G__ParticleDictLN_HMdcPlane.tagnum = -1 ;
  G__ParticleDictLN_HMdcLayer.tagnum = -1 ;
  G__ParticleDictLN_HTofWalkPar.tagnum = -1 ;
  G__ParticleDictLN_HParticleTool.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHMdcWireFitmUcOallocatorlEHMdcWireFitmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcWireFitmUcOallocatorlEHMdcWireFitmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHMdcCal1mUcOallocatorlEHMdcCal1mUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcCal1mUcOallocatorlEHMdcCal1mUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_pointers.tagnum = -1 ;
  G__ParticleDictLN_closetrack.tagnum = -1 ;
  G__ParticleDictLN_closeVec.tagnum = -1 ;
  G__ParticleDictLN_vectorlEclosetrackcOallocatorlEclosetrackgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEclosetrackcOallocatorlEclosetrackgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_trackinfo.tagnum = -1 ;
  G__ParticleDictLN_tracksVec.tagnum = -1 ;
  G__ParticleDictLN_vectorlEtrackinfomUcOallocatorlEtrackinfomUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEtrackinfomUcOallocatorlEtrackinfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_mdc_trk.tagnum = -1 ;
  G__ParticleDictLN_mdc_seg.tagnum = -1 ;
  G__ParticleDictLN_rpc_clst.tagnum = -1 ;
  G__ParticleDictLN_tof_hit.tagnum = -1 ;
  G__ParticleDictLN_shower_hit.tagnum = -1 ;
  G__ParticleDictLN_rich_hit.tagnum = -1 ;
  G__ParticleDictLN_spline_track.tagnum = -1 ;
  G__ParticleDictLN_rk_track.tagnum = -1 ;
  G__ParticleDictLN_kal_track.tagnum = -1 ;
  G__ParticleDictLN_candidate.tagnum = -1 ;
  G__ParticleDictLN_HParticleEvtChara.tagnum = -1 ;
  G__ParticleDictLN_HParticleEvtCharacLcLeCentralityEsitimator.tagnum = -1 ;
  G__ParticleDictLN_HParticleEvtCharacLcLeCentralityClass.tagnum = -1 ;
  G__ParticleDictLN_HMdcGeomPar.tagnum = -1 ;
  G__ParticleDictLN_HSpecGeomPar.tagnum = -1 ;
  G__ParticleDictLN_HMdcSizesCells.tagnum = -1 ;
  G__ParticleDictLN_HParticleCandFillerPar.tagnum = -1 ;
  G__ParticleDictLN_HParticleCandFiller.tagnum = -1 ;
  G__ParticleDictLN_vectorlEcandidatemUcOallocatorlEcandidatemUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEcandidatemUcOallocatorlEcandidatemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_HParIo.tagnum = -1 ;
  G__ParticleDictLN_HParSet.tagnum = -1 ;
  G__ParticleDictLN_HParamList.tagnum = -1 ;
  G__ParticleDictLN_HParCond.tagnum = -1 ;
  G__ParticleDictLN_candidateSort.tagnum = -1 ;
  G__ParticleDictLN_HParticleTrackSorter.tagnum = -1 ;
  G__ParticleDictLN_HParticleTrackSortercLcLERichMatch.tagnum = -1 ;
  G__ParticleDictLN_HParticleTrackSortercLcLESelect.tagnum = -1 ;
  G__ParticleDictLN_HParticleTrackSortercLcLESwitch.tagnum = -1 ;
  G__ParticleDictLN_vectorlEcandidateSortmUcOallocatorlEcandidateSortmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEcandidateSortmUcOallocatorlEcandidateSortmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleTrackCleaner.tagnum = -1 ;
  G__ParticleDictLN_HParticleRunningMeanI.tagnum = -1 ;
  G__ParticleDictLN_HMdcLookupGeom.tagnum = -1 ;
  G__ParticleDictLN_HMdcCalParRaw.tagnum = -1 ;
  G__ParticleDictLN_HParticleEvtInfoFiller.tagnum = -1 ;
  G__ParticleDictLN_HContainer.tagnum = -1 ;
  G__ParticleDictLN_HContFact.tagnum = -1 ;
  G__ParticleDictLN_HParticleContFact.tagnum = -1 ;
  G__ParticleDictLN_HParticleStart2HitF.tagnum = -1 ;
  G__ParticleDictLN_HParticleTree.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOHCategorymUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHCategorymUgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleAngleCor.tagnum = -1 ;
  G__ParticleDictLN_queuelEfloatcOdequelEfloatcOallocatorlEfloatgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleGeantDecay.tagnum = -1 ;
  G__ParticleDictLN_HParticleGeant.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleGeantEvent.tagnum = -1 ;
  G__ParticleDictLN_maplEHGeantKinemUcOvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOHParticleGeantmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleGeantmUgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHParticleGeantDecaymUcOallocatorlEHParticleGeantDecaymUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleGeantDecaymUcOallocatorlEHParticleGeantDecaymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHParticleGeantmUcOallocatorlEHParticleGeantmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleGeantmUcOallocatorlEHParticleGeantmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleGeantPair.tagnum = -1 ;
  G__ParticleDictLN_HParticleDraw.tagnum = -1 ;
  G__ParticleDictLN_HParticlePairDraw.tagnum = -1 ;
  G__ParticleDictLN_HParticlePairMaker.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHParticlePaircOallocatorlEHParticlePairgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHParticlePaircOallocatorlEHParticlePairgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_maplEHParticleCandmUcOvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRcOlesslEHParticleCandmUgRcOallocatorlEpairlEHParticleCandmUsPconstcOvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleBooker.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_HGeomVertexFit.tagnum = -1 ;
  G__ParticleDictLN_HParticleVertexFind.tagnum = -1 ;
  G__ParticleDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleCutRange.tagnum = -1 ;
  G__ParticleDictLN_HParticleBtPar.tagnum = -1 ;
  G__ParticleDictLN_HParticleBtRingInfo.tagnum = -1 ;
  G__ParticleDictLN_HParticleBtRingF.tagnum = -1 ;
  G__ParticleDictLN_vectorlETF2mUcOallocatorlETF2mUgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleBtClusterF.tagnum = -1 ;
  G__ParticleDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleBtRing.tagnum = -1 ;
  G__ParticleDictLN_HParticleBt.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHParticleCandcOallocatorlEHParticleCandgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandcOallocatorlEHParticleCandgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleBtAngleTrafo.tagnum = -1 ;
  G__ParticleDictLN_HParticlePathLengthCorr.tagnum = -1 ;
  G__ParticleDictLN_HEnergyLossCorrPar.tagnum = -1 ;
  G__ParticleDictLN_listlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleT0Reco.tagnum = -1 ;
  G__ParticleDictLN_HParticleT0RecocLcLpidvalues.tagnum = -1 ;
  G__ParticleDictLN_HParticleT0RecocLcLstartvalues.tagnum = -1 ;
  G__ParticleDictLN_HParticleT0RecocLcLtofvalues.tagnum = -1 ;
  G__ParticleDictLN_HParticleT0RecocLcLbuffers.tagnum = -1 ;
  G__ParticleDictLN_vectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_vectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ParticleDictLN_maplEintcOHParticleT0RecocLcLmomCutcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleT0RecocLcLmomCutgRsPgRsPgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleCutlEHParticleCandgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleCutlEHParticleCandSimgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleCutlEHParticlePairgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleCutlEHParticleGeantPairgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleCutlEHParticleGeantgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleCutlEHParticleGeantDecaygR.tagnum = -1 ;
  G__ParticleDictLN_HParticleCutlEHParticleEvtInfogR.tagnum = -1 ;
  G__ParticleDictLN_HParticleCutlEHRichHitgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleCutlEHRichHitSimgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleCutlEHEventHeadergR.tagnum = -1 ;
  G__ParticleDictLN_HParticleCutlEHVertexgR.tagnum = -1 ;
  G__ParticleDictLN_HParticleCutlEHGeantKinegR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableParticleDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TDirectory);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TString);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TIterator);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_Particle),0,-1,0,(char*)NULL,G__setup_memvarParticle,G__setup_memfuncParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_ParticlecLcLeSelMeta),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_ParticlecLcLeDetBits),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_ParticlecLcLeMatching),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_ParticlecLcLeVertex),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_ParticlecLcLeMomReco),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_ParticlecLcLePair),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_ParticlecLcLeFlagBits),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_ParticlecLcLeClosePairSelect),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_ParticlecLcLePairCase),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_ParticlecLcLeEventSelect);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_ParticlecLcLeBeamTime);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCand),sizeof(HParticleCand),-1,128256,"A simple track of a particle",G__setup_memvarHParticleCand,G__setup_memfuncHParticleCand);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCandSim),sizeof(HParticleCandSim),-1,128256,"A simple Sim track of a particle",G__setup_memvarHParticleCandSim,G__setup_memfuncHParticleCandSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleWallHit),sizeof(HParticleWallHit),-1,62720,"A simple wall hit of a particle",G__setup_memvarHParticleWallHit,G__setup_memfuncHParticleWallHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleWallHitSim),sizeof(HParticleWallHitSim),-1,62720,"A simple wall sim hit of a particle",G__setup_memvarHParticleWallHitSim,G__setup_memfuncHParticleWallHitSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCal),sizeof(HParticleCal),-1,29952,"A simple object for calibration purpose",G__setup_memvarHParticleCal,G__setup_memfuncHParticleCal);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HMdcSeg);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HMdcTrkCand);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleMdc),sizeof(HParticleMdc),-1,29952,"A simple object for investigation purpose",G__setup_memvarHParticleMdc,G__setup_memfuncHParticleMdc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleEvtInfo),sizeof(HParticleEvtInfo),-1,95488,"Event characteristic info",G__setup_memvarHParticleEvtInfo,G__setup_memfuncHParticleEvtInfo);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TF1);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TH1);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TTreeFormula);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TNtuple);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HTree);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HTask);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_TCutG);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HGeantKine);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HLocation);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HIterator);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HGeomVector);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HVertex);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HEventHeader);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HCategory);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HRecEvent);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplETStringcOHCategorymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHCategorymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplETStringcOHPartialEventmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHPartialEventmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplETStringcOshortcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOshortgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HReconstructor);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HMetaMatch2);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HTofHit);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HTofCluster);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HTofHitSim);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HTofClusterSim);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HRpcCluster);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HRpcClusterSim);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HShowerHit);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HShowerHitSim);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HRichHit);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HRichHitSim);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HMdcSegSim);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HSplineTrack);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HRKTrackB);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HKalTrack);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HMdcHit);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HMdcClusInf);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HMdcClusFit);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HMdcClus);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticlePair),sizeof(HParticlePair),-1,62720,(char*)NULL,G__setup_memvarHParticlePair,G__setup_memfuncHParticlePair);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HMdcPlane);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HMdcLayer);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HTofWalkPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleTool),sizeof(HParticleTool),-1,29952,(char*)NULL,G__setup_memvarHParticleTool,G__setup_memfuncHParticleTool);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHMdcWireFitmUcOallocatorlEHMdcWireFitmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcWireFitmUcOallocatorlEHMdcWireFitmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHMdcCal1mUcOallocatorlEHMdcCal1mUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcCal1mUcOallocatorlEHMdcCal1mUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_pointers),sizeof(pointers),-1,29952,(char*)NULL,G__setup_memvarpointers,G__setup_memfuncpointers);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_closetrack),sizeof(closetrack),-1,29952,(char*)NULL,G__setup_memvarclosetrack,G__setup_memfuncclosetrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_closeVec),sizeof(closeVec),-1,29952,(char*)NULL,G__setup_memvarcloseVec,G__setup_memfunccloseVec);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEclosetrackcOallocatorlEclosetrackgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEclosetrackcOallocatorlEclosetrackgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_trackinfo),sizeof(trackinfo),-1,29952,(char*)NULL,G__setup_memvartrackinfo,G__setup_memfunctrackinfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_tracksVec),sizeof(tracksVec),-1,30464,(char*)NULL,G__setup_memvartracksVec,G__setup_memfunctracksVec);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEtrackinfomUcOallocatorlEtrackinfomUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEtrackinfomUcOallocatorlEtrackinfomUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_mdc_trk),sizeof(mdc_trk),-1,29952,(char*)NULL,G__setup_memvarmdc_trk,G__setup_memfuncmdc_trk);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_mdc_seg),sizeof(mdc_seg),-1,29952,(char*)NULL,G__setup_memvarmdc_seg,G__setup_memfuncmdc_seg);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_rpc_clst),sizeof(rpc_clst),-1,29952,(char*)NULL,G__setup_memvarrpc_clst,G__setup_memfuncrpc_clst);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_tof_hit),sizeof(tof_hit),-1,29952,(char*)NULL,G__setup_memvartof_hit,G__setup_memfunctof_hit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_shower_hit),sizeof(shower_hit),-1,29952,(char*)NULL,G__setup_memvarshower_hit,G__setup_memfuncshower_hit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_rich_hit),sizeof(rich_hit),-1,29952,(char*)NULL,G__setup_memvarrich_hit,G__setup_memfuncrich_hit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_spline_track),sizeof(spline_track),-1,29952,(char*)NULL,G__setup_memvarspline_track,G__setup_memfuncspline_track);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_rk_track),sizeof(rk_track),-1,29952,(char*)NULL,G__setup_memvarrk_track,G__setup_memfuncrk_track);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_kal_track),sizeof(kal_track),-1,29952,(char*)NULL,G__setup_memvarkal_track,G__setup_memfunckal_track);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_candidate),sizeof(candidate),-1,29952,(char*)NULL,G__setup_memvarcandidate,G__setup_memfunccandidate);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleEvtChara),sizeof(HParticleEvtChara),-1,62720,(char*)NULL,G__setup_memvarHParticleEvtChara,G__setup_memfuncHParticleEvtChara);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityEsitimator);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleEvtCharacLcLeCentralityClass);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HMdcGeomPar);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HSpecGeomPar);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HMdcSizesCells);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCandFillerPar),sizeof(HParticleCandFillerPar),-1,62720,"Container for ParticleCandFiller parameters",G__setup_memvarHParticleCandFillerPar,G__setup_memfuncHParticleCandFillerPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCandFiller),sizeof(HParticleCandFiller),-1,62720,"HMetaMatch -> HParticleCand",G__setup_memvarHParticleCandFiller,G__setup_memfuncHParticleCandFiller);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEcandidatemUcOallocatorlEcandidatemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEcandidatemUcOallocatorlEcandidatemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParIo);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParSet);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParamList);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParCond);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_candidateSort);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleTrackSorter),sizeof(HParticleTrackSorter),-1,62720,(char*)NULL,G__setup_memvarHParticleTrackSorter,G__setup_memfuncHParticleTrackSorter);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleTrackSortercLcLERichMatch);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleTrackSortercLcLESelect);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleTrackSortercLcLESwitch);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEcandidateSortmUcOallocatorlEcandidateSortmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEcandidateSortmUcOallocatorlEcandidateSortmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleTrackCleaner),sizeof(HParticleTrackCleaner),-1,62720,(char*)NULL,G__setup_memvarHParticleTrackCleaner,G__setup_memfuncHParticleTrackCleaner);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleRunningMeanI),sizeof(HParticleRunningMeanI),-1,29952,"calculate moving average",G__setup_memvarHParticleRunningMeanI,G__setup_memfuncHParticleRunningMeanI);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HMdcLookupGeom);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HMdcCalParRaw);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleEvtInfoFiller),sizeof(HParticleEvtInfoFiller),-1,62720,(char*)NULL,G__setup_memvarHParticleEvtInfoFiller,G__setup_memfuncHParticleEvtInfoFiller);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HContainer);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleContFact),sizeof(HParticleContFact),-1,62720,"Factory for all Particle parameter containers",G__setup_memvarHParticleContFact,G__setup_memfuncHParticleContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleStart2HitF),sizeof(HParticleStart2HitF),-1,62720,"Hit finder for START2 detector suing META hits",G__setup_memvarHParticleStart2HitF,G__setup_memfuncHParticleStart2HitF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleTree),sizeof(HParticleTree),-1,62720,"A task to create an fitered  root output",G__setup_memvarHParticleTree,G__setup_memfuncHParticleTree);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOHCategorymUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHCategorymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleAngleCor),sizeof(HParticleAngleCor),-1,29952,"Correct emission angles by assuming a multiple scattering kick at the Rich mirror/housing",G__setup_memvarHParticleAngleCor,G__setup_memfuncHParticleAngleCor);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_queuelEfloatcOdequelEfloatcOallocatorlEfloatgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleGeantDecay),sizeof(HParticleGeantDecay),-1,29952,(char*)NULL,G__setup_memvarHParticleGeantDecay,G__setup_memfuncHParticleGeantDecay);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleGeant),sizeof(HParticleGeant),-1,29952,(char*)NULL,G__setup_memvarHParticleGeant,G__setup_memfuncHParticleGeant);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleGeantEvent),sizeof(HParticleGeantEvent),-1,29952,(char*)NULL,G__setup_memvarHParticleGeantEvent,G__setup_memfuncHParticleGeantEvent);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEHGeantKinemUcOvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOHParticleGeantmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleGeantmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHParticleGeantDecaymUcOallocatorlEHParticleGeantDecaymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleGeantDecaymUcOallocatorlEHParticleGeantDecaymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHParticleGeantmUcOallocatorlEHParticleGeantmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleGeantmUcOallocatorlEHParticleGeantmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleGeantPair),sizeof(HParticleGeantPair),-1,62720,(char*)NULL,G__setup_memvarHParticleGeantPair,G__setup_memfuncHParticleGeantPair);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleDraw),sizeof(HParticleDraw),-1,29952,(char*)NULL,G__setup_memvarHParticleDraw,G__setup_memfuncHParticleDraw);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticlePairDraw),sizeof(HParticlePairDraw),-1,29952,(char*)NULL,G__setup_memvarHParticlePairDraw,G__setup_memfuncHParticlePairDraw);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticlePairMaker),sizeof(HParticlePairMaker),-1,29952,(char*)NULL,G__setup_memvarHParticlePairMaker,G__setup_memfuncHParticlePairMaker);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHParticlePaircOallocatorlEHParticlePairgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticlePaircOallocatorlEHParticlePairgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandmUcOallocatorlEHParticleCandmUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEHParticleCandmUcOvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRcOlesslEHParticleCandmUgRcOallocatorlEpairlEHParticleCandmUsPconstcOvectorlEHParticlePairmUcOallocatorlEHParticlePairmUgRsPgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleBooker),sizeof(HParticleBooker),-1,29952,(char*)NULL,G__setup_memvarHParticleBooker,G__setup_memfuncHParticleBooker);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHTofHitmUcOallocatorlEHTofHitmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHTofClustermUcOallocatorlEHTofClustermUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHRpcClustermUcOallocatorlEHRpcClustermUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHShowerHitmUcOallocatorlEHShowerHitmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcSegmUcOallocatorlEHMdcSegmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHRichHitmUcOallocatorlEHRichHitmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHParticleCandSimmUcOallocatorlEHParticleCandSimmUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHTofHitSimmUcOallocatorlEHTofHitSimmUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHTofClusterSimmUcOallocatorlEHTofClusterSimmUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRpcClusterSimmUcOallocatorlEHRpcClusterSimmUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHShowerHitSimmUcOallocatorlEHShowerHitSimmUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHMdcSegSimmUcOallocatorlEHMdcSegSimmUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRichHitSimmUcOallocatorlEHRichHitSimmUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HGeomVertexFit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleVertexFind),sizeof(HParticleVertexFind),-1,62720,(char*)NULL,G__setup_memvarHParticleVertexFind,G__setup_memfuncHParticleVertexFind);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCutRange),sizeof(HParticleCutRange),-1,62720,(char*)NULL,G__setup_memvarHParticleCutRange,G__setup_memfuncHParticleCutRange);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleBtPar),sizeof(HParticleBtPar),-1,62720,"Container for the particleBT parameters",G__setup_memvarHParticleBtPar,G__setup_memfuncHParticleBtPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleBtRingInfo),sizeof(HParticleBtRingInfo),-1,29952,(char*)NULL,G__setup_memvarHParticleBtRingInfo,G__setup_memfuncHParticleBtRingInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleBtRingF),sizeof(HParticleBtRingF),-1,29952,(char*)NULL,G__setup_memvarHParticleBtRingF,G__setup_memfuncHParticleBtRingF);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlETF2mUcOallocatorlETF2mUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRcOallocatorlEvectorlETF2mUcOallocatorlETF2mUgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleBtClusterF),sizeof(HParticleBtClusterF),-1,29952,(char*)NULL,G__setup_memvarHParticleBtClusterF,G__setup_memfuncHParticleBtClusterF);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleBtRing),sizeof(HParticleBtRing),-1,95488,(char*)NULL,G__setup_memvarHParticleBtRing,G__setup_memfuncHParticleBtRing);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleBt),sizeof(HParticleBt),-1,62720,(char*)NULL,G__setup_memvarHParticleBt,G__setup_memfuncHParticleBt);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHParticleCandcOallocatorlEHParticleCandgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleCandcOallocatorlEHParticleCandgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleBtAngleTrafo),sizeof(HParticleBtAngleTrafo),-1,29952,(char*)NULL,G__setup_memvarHParticleBtAngleTrafo,G__setup_memfuncHParticleBtAngleTrafo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticlePathLengthCorr),sizeof(HParticlePathLengthCorr),-1,62720,(char*)NULL,G__setup_memvarHParticlePathLengthCorr,G__setup_memfuncHParticlePathLengthCorr);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HEnergyLossCorrPar);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_listlEfloatcOallocatorlEfloatgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleT0Reco),sizeof(HParticleT0Reco),-1,62720,(char*)NULL,G__setup_memvarHParticleT0Reco,G__setup_memfuncHParticleT0Reco);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleT0RecocLcLpidvalues);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleT0RecocLcLstartvalues);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleT0RecocLcLtofvalues);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleT0RecocLcLbuffers);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcOallocatorlEvectorlElistlEfloatcOallocatorlEfloatgRsPgRcOallocatorlElistlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_vectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_reverse_iteratorlEvectorlEHParticleT0RecocLcLtofvaluescOallocatorlEHParticleT0RecocLcLtofvaluesgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ParticleDictLN_maplEintcOHParticleT0RecocLcLmomCutcOlesslEintgRcOallocatorlEpairlEconstsPintcOHParticleT0RecocLcLmomCutgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCutlEHParticleCandgR),sizeof(HParticleCut<HParticleCand>),-1,62464,(char*)NULL,G__setup_memvarHParticleCutlEHParticleCandgR,G__setup_memfuncHParticleCutlEHParticleCandgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCutlEHParticleCandSimgR),sizeof(HParticleCut<HParticleCandSim>),-1,62464,(char*)NULL,G__setup_memvarHParticleCutlEHParticleCandSimgR,G__setup_memfuncHParticleCutlEHParticleCandSimgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCutlEHParticlePairgR),sizeof(HParticleCut<HParticlePair>),-1,62464,(char*)NULL,G__setup_memvarHParticleCutlEHParticlePairgR,G__setup_memfuncHParticleCutlEHParticlePairgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCutlEHParticleGeantPairgR),sizeof(HParticleCut<HParticleGeantPair>),-1,62464,(char*)NULL,G__setup_memvarHParticleCutlEHParticleGeantPairgR,G__setup_memfuncHParticleCutlEHParticleGeantPairgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCutlEHParticleGeantgR),sizeof(HParticleCut<HParticleGeant>),-1,62464,(char*)NULL,G__setup_memvarHParticleCutlEHParticleGeantgR,G__setup_memfuncHParticleCutlEHParticleGeantgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCutlEHParticleGeantDecaygR),sizeof(HParticleCut<HParticleGeantDecay>),-1,62464,(char*)NULL,G__setup_memvarHParticleCutlEHParticleGeantDecaygR,G__setup_memfuncHParticleCutlEHParticleGeantDecaygR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCutlEHParticleEvtInfogR),sizeof(HParticleCut<HParticleEvtInfo>),-1,62464,(char*)NULL,G__setup_memvarHParticleCutlEHParticleEvtInfogR,G__setup_memfuncHParticleCutlEHParticleEvtInfogR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCutlEHRichHitgR),sizeof(HParticleCut<HRichHit>),-1,62464,(char*)NULL,G__setup_memvarHParticleCutlEHRichHitgR,G__setup_memfuncHParticleCutlEHRichHitgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCutlEHRichHitSimgR),sizeof(HParticleCut<HRichHitSim>),-1,62464,(char*)NULL,G__setup_memvarHParticleCutlEHRichHitSimgR,G__setup_memfuncHParticleCutlEHRichHitSimgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCutlEHEventHeadergR),sizeof(HParticleCut<HEventHeader>),-1,62464,(char*)NULL,G__setup_memvarHParticleCutlEHEventHeadergR,G__setup_memfuncHParticleCutlEHEventHeadergR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCutlEHVertexgR),sizeof(HParticleCut<HVertex>),-1,62464,(char*)NULL,G__setup_memvarHParticleCutlEHVertexgR,G__setup_memfuncHParticleCutlEHVertexgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ParticleDictLN_HParticleCutlEHGeantKinegR),sizeof(HParticleCut<HGeantKine>),-1,62464,(char*)NULL,G__setup_memvarHParticleCutlEHGeantKinegR,G__setup_memfuncHParticleCutlEHGeantKinegR);
}
extern "C" void G__cpp_setupParticleDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupParticleDict()");
  G__set_cpp_environmentParticleDict();
  G__cpp_setup_tagtableParticleDict();

  G__cpp_setup_inheritanceParticleDict();

  G__cpp_setup_typetableParticleDict();

  G__cpp_setup_memvarParticleDict();

  G__cpp_setup_memfuncParticleDict();
  G__cpp_setup_globalParticleDict();
  G__cpp_setup_funcParticleDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncParticleDict();
  return;
}
class G__cpp_setup_initParticleDict {
  public:
    G__cpp_setup_initParticleDict() { G__add_setup_func("ParticleDict",(G__incsetup)(&G__cpp_setupParticleDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initParticleDict() { G__remove_setup_func("ParticleDict"); }
};
G__cpp_setup_initParticleDict G__cpp_setup_initializerParticleDict;

